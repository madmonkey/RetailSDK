<!-- Product Details Page -->

@using Contoso.Retail.Ecommerce.Web.Storefront.Models;
@using Microsoft.Dynamics.Commerce.RetailProxy;
@using System.Threading;
@using System.Threading.Tasks;
@using System.Linq;
@using System.Collections.Generic;
@using System.Collections.ObjectModel;
@using Contoso.Retail.Ecommerce.Sdk.Core;
@using Newtonsoft.Json;

@{
    // establish the base product
    Product baseProduct = Model.Product;

    ProductVariant p = null;
    ObservableCollection<ProductDimensionSet> productDimensions = null;
    Dictionary<string, long?> variantToIdMap = new Dictionary<string, long?>();
    string variantToIdMapJson = string.Empty;
    bool hasVariants = (baseProduct.CompositionInformation != null);

    if (hasVariants)
    {
        foreach (ProductVariant productVariant in baseProduct.CompositionInformation.VariantInformation.Variants)
        {
            string dimensionValues = string.Format("{0}:{1}:{2}:{3}", productVariant.Color, productVariant.Size, productVariant.Style, productVariant.Configuration);
            variantToIdMap.Add(dimensionValues, productVariant.DistinctProductVariantId);
        }

        // get the first product variant
        p = baseProduct.CompositionInformation.VariantInformation.Variants.FirstOrDefault<ProductVariant>();

        // get possible product dimensions
        productDimensions = baseProduct.CompositionInformation.VariantInformation.Dimensions;
    }

    variantToIdMapJson = JsonConvert.SerializeObject(variantToIdMap);

    // set page title to the product name
    ViewBag.Title = baseProduct.ProductName + " - " + @ResourceHelper.GetLocalString("HomeViewTitle");
}

@section other{
    <!-- Load CSS for Product Details Page specifically-->
    <link href="~/Content/CSS/productDetails.css" rel="stylesheet" />
}

<h5 class="margin-bottom-15 msg-activate msg-error"></h5>
<h5 class="margin-bottom-15 msg-activate msg-info"></h5>

<!-- Product Navigation Breadcrumb -->
<ol class="breadcrumb" style="text-align: left;">
    @for (var i = Model.BreadcrumbNavLinks.Count - 1; i >= 0; i--)
    {
        if (i == Model.BreadcrumbNavLinks.Count - 1)
        {
            // last element, make it active
            <li class="active">@Html.Raw(Model.BreadcrumbNavLinks[i])</li>
        }
        else
        {
            <li>@Html.Raw(Model.BreadcrumbNavLinks[i])</li>
        }
    }
</ol>



<!-- Check if a valid product was passed in-->
@if (baseProduct != null)
{

    <!-- Show the image on the left side of the page-->
    <div class="col-sm-6 col-xs-12">
        @{
            // get the first image
            string imgLoc = null;
            IEnumerable<RichMediaLocationsRichMediaLocation> itemImages = baseProduct.Image.Items.Where<RichMediaLocationsRichMediaLocation>(i => i.Url.EndsWith("_001.png"));
            RichMediaLocationsRichMediaLocation img = itemImages.FirstOrDefault<RichMediaLocationsRichMediaLocation>();
            if (img != null)
            {
                imgLoc = img.Url;
            }
        }
        <div class="product-details-img-wrapper">
            <img src="@imgLoc" class="product-gallery-img" />
        </div>
    </div>

    <!-- Product Details section on the right side of the page-->
            <div class="col-sm-6 col-xs-12 product-details-details-wrapper">
                <div class="product-details-product-name">@baseProduct.ProductName</div>
                <div class="product-details-product-number">@(p == null ? baseProduct.ProductNumber : p.ProductNumber)</div>
                <div id="product-details-product-id" />

                <div class="product-details-price-wrapper">
                    @if (baseProduct.AdjustedPrice == baseProduct.BasePrice)
                    {
                        // no sale
                        <div class="product-details-actual-price">@baseProduct.ExtensionProperties.GetPropertyValue("FormattedAdjustedPrice", ExtensionPropertyTypes.String)</div>
                    }
                    else
                    {
                        // sale
                        <div class="product-details-actual-price">@baseProduct.ExtensionProperties.GetPropertyValue("FormattedAdjustedPrice", ExtensionPropertyTypes.String) (save @baseProduct.ExtensionProperties.GetPropertyValue("SavingsPercent", ExtensionPropertyTypes.String))</div>
                        <div class="product-details-original-price">@baseProduct.ExtensionProperties.GetPropertyValue("FormattedBasePrice", ExtensionPropertyTypes.String)</div>
                    }
                </div>

                <!-- Starts for customer review, to make this actually work, we can add some logic for filling the right amount of stars in-->
                <div class="product-details-star-rating">
                    <span class="glyphicon glyphicon-star-empty" aria-hidden="true"></span>
                    <span class="glyphicon glyphicon-star-empty" aria-hidden="true"></span>
                    <span class="glyphicon glyphicon-star-empty" aria-hidden="true"></span>
                    <span class="glyphicon glyphicon-star-empty" aria-hidden="true"></span>
                    <span class="glyphicon glyphicon-star-empty" aria-hidden="true"></span>
                </div>

                <div class="product-details-description">
                    @baseProduct.Description
                </div>

                @if (productDimensions != null)
                {
                    foreach (var dim in productDimensions)
                    {
                        <h4><b>@dim.DimensionKey</b></h4>
                        <select class="form-control product-details-dimension-wrapper @(@dim.DimensionKey+"Selector")" onchange="getProductId()">
                            @foreach (var dimVal in dim.DimensionValues)
                            {
                                // see which option the variant being displayed contians, could use some work with multiple dimensions
                                if (dimVal.VariantSet.Contains((long)p.DistinctProductVariantId))
                                {
                                    <option selected="selected">@dimVal.DimensionValue</option>
                                }
                                else
                                {
                                    <option>@dimVal.DimensionValue</option>
                                }
                            }
                        </select>
                    }
                }

                @if (baseProduct.ProductNumber == "9999")
                {
                    // it's a gift card
                    <h4><b>@ResourceHelper.GetLocalString("GiftCardAmount")</b></h4>
                    <input type="text" class="form-control" id="giftcardAmount" style="width: 200px;" placeholder="100.00" />
                }

                <h4><b>@ResourceHelper.GetLocalString("Quantity")</b></h4>
                <div class="product-details-quanity-wrapper">
                    <div class="input-group">
                        <span class="input-group-btn">
                            <button type="button" class="btn btn-default btn-number glyphicon glyphicon-minus" data-type="minus" data-field="quant[1]" id="minus-qty"></button>
                        </span>
                        <input name="quant[1]" id="item-quantity" class="form-control input-number" value="1">
                        <span class="input-group-btn">
                            <button type="button" class="btn btn-default btn-number glyphicon glyphicon-plus" data-type="plus" data-field="quant[1]" id="plus-qty"></button>
                        </span>
                    </div>
                </div>

                <div class="info-bottom">
                    <div class="bottom-footer">
                        <div class="icon-image" style="float: right; margin-top: -6px">
                            <img type="button" id="add-to-wishList-btn" data-toggle="modal" data-target="#AddToWishListModal" class="add-to-wish-list-btn" />
                            <a href="javascript:window.print()">    
                                <img class="print-this-page-image" />
                            </a>
                        </div>
                        <button id="add-to-cart-btn" class="btn btn-primary" style="float: left">@ResourceHelper.GetLocalString("AddToCart")</button>
                    </div>
                </div>
            </div>

            <div class="modal fade" id="AddToWishListModal" role="dialog">
                <div class="modal-dialog">

                    <!-- Modal content-->
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">@ResourceHelper.GetLocalString("AddToWishList")</h4>
                        </div>
                        <div class="modal-body">
                            <ul class="msax-addToWishListModal">
                                <li class="no-wishlists-message">
                                    <div class="no-wishlists-text">
                                        @ResourceHelper.GetLocalString("NoWishlistsText")
                                        <span class="msax-fontBold">@ResourceHelper.GetLocalString("Create")</span>
                                        .
                                    </div>
                                </li>
                                <li class="msax-TileScroll">
                                    <div class="left-scroll-list msax-LargeButton msax-Blue">
                                        <div class="large-button-left"></div>
                                        <button class="msax-Button">
                                            <span class="msax-ButtonText"><</span>
                                        </button>
                                        <div class="large-button-right"></div>
                                    </div>
                                    <div id="wishListTilesContainer" class="msax-WishListTilesContainer"></div>
                                    <div class="right-scroll-list msax-LargeButton msax-Blue">
                                        <div class="large-button-left"></div>
                                        <button class="msax-Button">
                                            <span class="msax-ButtonText">></span>
                                        </button>
                                        <div class="large-button-right"></div>
                                    </div>
                                </li>
                                <li class="msax-CreateListControls">
                                    <label class="msax-CreateWishListLabel">@ResourceHelper.GetLocalString("Name")</label>
                                    <input id="new-wishList-input" class="msax-CreateListName" type="text" placeholder="New wish list name, example: My stuff" />
                                    <div class="msax-LargeButton msax-Blue">
                                        <div class="large-button-left"></div>
                                        <button id="create-wishList-btn" class="btn btn-default">
                                            <span class="msax-ButtonText">@ResourceHelper.GetLocalString("Create")</span>
                                        </button>
                                        <div class="large-button-right"></div>
                                    </div>
                                </li>
                            </ul>
                        </div>
                    </div>

                </div>
            </div>

            }
            else
            {
                <span>Item can't be found</span>
            }

@section pageSpecificJs {
    <script src="~/Content/JS/ProductDetails.js"></script>
    <script>

        var variantToIdMap = @Html.Raw(@variantToIdMapJson.ToString());
        var hasVariants = @(@hasVariants ? "true": "false");

        function getProductId() {
            var productId = 0;
            if (hasVariants) {
                var color = $(".ColorSelector").val() ? $(".ColorSelector").val() : "";
                var size = $(".SizeSelector").val() ? $(".SizeSelector").val() : "";
                var style = $(".StyleSelector").val() ? $(".StyleSelector").val() : "";
                var configuration = $(".ConfigurationSelector").val() ? $(".ConfigurationSelector").val() : "";
                var dimensionValues = color + ":" + size + ":" + style + ":" + configuration;

                if (variantToIdMap != undefined && variantToIdMap != null)
                {
                    productId = variantToIdMap[dimensionValues];
                }
            }
            else {
                productId = @((p == null) ? baseProduct.RecordId : p.DistinctProductVariantId);
            }

            $("#product-details-product-id").val(productId);
        }

        function isAuthenticatedSession() {
            var data = {};

            $.ajax({
                type: "POST",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                url: "/Customer/IsAuthenticatedSession",
                data: JSON.stringify(data),
                success: isAuthenticatedSessionSuccessCallback,
                error: isAuthenticatedSessionFailureCallback
            });
        }

        $("#add-to-cart-btn").click(function () {
            var productId = $("#product-details-product-id").val();
            if (productId != 0 && productId != undefined) {
                var cartLine = { "ProductId": productId, "Quantity": $("#item-quantity").val(), "Price": ($("#giftcardAmount") != null) ? $("#giftcardAmount").val() : null};
                var data = {
                    "isCheckoutSession": false,
                    "cartLines": [cartLine]
                };

                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    url: "/Cart/AddItems",
                    data: JSON.stringify(data),
                    success: addItemSuccessCallback,
                    error: addItemFailureCallback
                });
            }
            else {
                var errorElement = $("#body-wrapper").find(".msg-error");
                errorElement[0].textContent  = "@ResourceHelper.GetLocalString("NoSuchProduct")";
            }
        });

        $("#add-to-wishList-btn").click(function () {
            var queryResultSettings = new CommerceProxy.Entities.QueryResultSettingsClass();
            queryResultSettings.Paging = new CommerceProxy.Entities.PagingInfoClass();
            queryResultSettings.Paging.Skip = 0;
            queryResultSettings.Paging.Top = 1000;
            queryResultSettings.Sorting = {};

            var getWishListsdata = {
                "queryResultSettings": queryResultSettings
            };

            $.ajax({
                type: "POST",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                url: "/Customer/GetWishLists",
                data: JSON.stringify(getWishListsdata), 
                success: getWishListsSuccessCallback,
                error: getWishListsFailureCallback
            });
        });

        $("#create-wishList-btn").click(function(event) {
            var isValid = true;
            var wishListNameInputBox = $("#new-wishList-input");
            if ($.trim((wishListNameInputBox).val()) == '') {
                isValid = false;
                wishListNameInputBox.addClass("input-error");
            }
            else {
                wishListNameInputBox.removeClass("input-error");
            }

            if (isValid == false) {
                event.preventDefault();
            }
            else {
                var newWishListName = $('#new-wishList-input').val();
                var newWishListsData = {
                    "wishListName": newWishListName
                };

                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    url: "/WishList/CreateWishList",
                    data: JSON.stringify(newWishListsData), 
                    success: createWishListSuccessCallback,
                    error: createWishListFailureCallback
                });
            }
        });

        getProductId();
        isAuthenticatedSession();
    </script>
}