var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            var AutoExitMethodType;
            (function (AutoExitMethodType) {
                AutoExitMethodType[AutoExitMethodType["Logoff"] = 0] = "Logoff";
                AutoExitMethodType[AutoExitMethodType["Lock"] = 1] = "Lock";
                AutoExitMethodType[AutoExitMethodType["None"] = -1] = "None";
            })(AutoExitMethodType = Entities.AutoExitMethodType || (Entities.AutoExitMethodType = {}));
            var PublishingAction;
            (function (PublishingAction) {
                PublishingAction[PublishingAction["None"] = 0] = "None";
                PublishingAction[PublishingAction["Publish"] = 1] = "Publish";
                PublishingAction[PublishingAction["Delete"] = 2] = "Delete";
                PublishingAction[PublishingAction["Expire"] = 3] = "Expire";
            })(PublishingAction = Entities.PublishingAction || (Entities.PublishingAction = {}));
            var ListingPublishingActionStatus;
            (function (ListingPublishingActionStatus) {
                ListingPublishingActionStatus[ListingPublishingActionStatus["None"] = 0] = "None";
                ListingPublishingActionStatus[ListingPublishingActionStatus["Ready"] = 1] = "Ready";
                ListingPublishingActionStatus[ListingPublishingActionStatus["InProgress"] = 2] = "InProgress";
                ListingPublishingActionStatus[ListingPublishingActionStatus["Done"] = 3] = "Done";
                ListingPublishingActionStatus[ListingPublishingActionStatus["Failed"] = 4] = "Failed";
            })(ListingPublishingActionStatus = Entities.ListingPublishingActionStatus || (Entities.ListingPublishingActionStatus = {}));
            var AttributeDataType;
            (function (AttributeDataType) {
                AttributeDataType[AttributeDataType["None"] = 0] = "None";
                AttributeDataType[AttributeDataType["Currency"] = 1] = "Currency";
                AttributeDataType[AttributeDataType["DateTime"] = 2] = "DateTime";
                AttributeDataType[AttributeDataType["Decimal"] = 3] = "Decimal";
                AttributeDataType[AttributeDataType["Integer"] = 4] = "Integer";
                AttributeDataType[AttributeDataType["Text"] = 5] = "Text";
                AttributeDataType[AttributeDataType["TrueFalse"] = 6] = "TrueFalse";
                AttributeDataType[AttributeDataType["Video"] = 40] = "Video";
                AttributeDataType[AttributeDataType["Image"] = 41] = "Image";
            })(AttributeDataType = Entities.AttributeDataType || (Entities.AttributeDataType = {}));
            var OnlineChannelPublishStatusType;
            (function (OnlineChannelPublishStatusType) {
                OnlineChannelPublishStatusType[OnlineChannelPublishStatusType["None"] = 0] = "None";
                OnlineChannelPublishStatusType[OnlineChannelPublishStatusType["Draft"] = 1] = "Draft";
                OnlineChannelPublishStatusType[OnlineChannelPublishStatusType["InProgress"] = 2] = "InProgress";
                OnlineChannelPublishStatusType[OnlineChannelPublishStatusType["Published"] = 3] = "Published";
                OnlineChannelPublishStatusType[OnlineChannelPublishStatusType["Failed"] = 4] = "Failed";
            })(OnlineChannelPublishStatusType = Entities.OnlineChannelPublishStatusType || (Entities.OnlineChannelPublishStatusType = {}));
            var ReceiptTransactionType;
            (function (ReceiptTransactionType) {
                ReceiptTransactionType[ReceiptTransactionType["None"] = 0] = "None";
                ReceiptTransactionType[ReceiptTransactionType["Sale"] = 1] = "Sale";
                ReceiptTransactionType[ReceiptTransactionType["Return"] = 2] = "Return";
                ReceiptTransactionType[ReceiptTransactionType["Payment"] = 5] = "Payment";
                ReceiptTransactionType[ReceiptTransactionType["SalesOrder"] = 6] = "SalesOrder";
                ReceiptTransactionType[ReceiptTransactionType["Quote"] = 7] = "Quote";
            })(ReceiptTransactionType = Entities.ReceiptTransactionType || (Entities.ReceiptTransactionType = {}));
            var EmployeePriceOverrideType;
            (function (EmployeePriceOverrideType) {
                EmployeePriceOverrideType[EmployeePriceOverrideType["HigherAndLower"] = 0] = "HigherAndLower";
                EmployeePriceOverrideType[EmployeePriceOverrideType["HigherOnly"] = 1] = "HigherOnly";
                EmployeePriceOverrideType[EmployeePriceOverrideType["LowerOnly"] = 2] = "LowerOnly";
                EmployeePriceOverrideType[EmployeePriceOverrideType["NotAllowed"] = 3] = "NotAllowed";
            })(EmployeePriceOverrideType = Entities.EmployeePriceOverrideType || (Entities.EmployeePriceOverrideType = {}));
            var KeyInPriceRestriction;
            (function (KeyInPriceRestriction) {
                KeyInPriceRestriction[KeyInPriceRestriction["None"] = 0] = "None";
                KeyInPriceRestriction[KeyInPriceRestriction["NewPrice"] = 1] = "NewPrice";
                KeyInPriceRestriction[KeyInPriceRestriction["HigherOrEqualPrice"] = 2] = "HigherOrEqualPrice";
                KeyInPriceRestriction[KeyInPriceRestriction["LowerOrEqualPrice"] = 3] = "LowerOrEqualPrice";
                KeyInPriceRestriction[KeyInPriceRestriction["NotAllowed"] = 4] = "NotAllowed";
            })(KeyInPriceRestriction = Entities.KeyInPriceRestriction || (Entities.KeyInPriceRestriction = {}));
            var KeyInQuantityRestriction;
            (function (KeyInQuantityRestriction) {
                KeyInQuantityRestriction[KeyInQuantityRestriction["None"] = 0] = "None";
                KeyInQuantityRestriction[KeyInQuantityRestriction["Required"] = 1] = "Required";
                KeyInQuantityRestriction[KeyInQuantityRestriction["NotAllowed"] = 2] = "NotAllowed";
            })(KeyInQuantityRestriction = Entities.KeyInQuantityRestriction || (Entities.KeyInQuantityRestriction = {}));
            var ProductDimensionType;
            (function (ProductDimensionType) {
                ProductDimensionType[ProductDimensionType["None"] = 0] = "None";
                ProductDimensionType[ProductDimensionType["Color"] = 1] = "Color";
                ProductDimensionType[ProductDimensionType["Configuration"] = 2] = "Configuration";
                ProductDimensionType[ProductDimensionType["Size"] = 3] = "Size";
                ProductDimensionType[ProductDimensionType["Style"] = 4] = "Style";
            })(ProductDimensionType = Entities.ProductDimensionType || (Entities.ProductDimensionType = {}));
            var ProductType;
            (function (ProductType) {
                ProductType[ProductType["None"] = 0] = "None";
                ProductType[ProductType["KitMaster"] = 1] = "KitMaster";
                ProductType[ProductType["KitVariant"] = 2] = "KitVariant";
                ProductType[ProductType["Master"] = 3] = "Master";
                ProductType[ProductType["Standalone"] = 4] = "Standalone";
                ProductType[ProductType["Variant"] = 5] = "Variant";
            })(ProductType = Entities.ProductType || (Entities.ProductType = {}));
            var NumberSequenceSeedType;
            (function (NumberSequenceSeedType) {
                NumberSequenceSeedType[NumberSequenceSeedType["None"] = 0] = "None";
                NumberSequenceSeedType[NumberSequenceSeedType["ReceiptDefault"] = 1] = "ReceiptDefault";
                NumberSequenceSeedType[NumberSequenceSeedType["ReceiptSale"] = 2] = "ReceiptSale";
                NumberSequenceSeedType[NumberSequenceSeedType["ReceiptReturn"] = 3] = "ReceiptReturn";
                NumberSequenceSeedType[NumberSequenceSeedType["ReceiptSalesOrder"] = 4] = "ReceiptSalesOrder";
                NumberSequenceSeedType[NumberSequenceSeedType["ReceiptSalesInvoice"] = 5] = "ReceiptSalesInvoice";
                NumberSequenceSeedType[NumberSequenceSeedType["ReceiptPayment"] = 6] = "ReceiptPayment";
                NumberSequenceSeedType[NumberSequenceSeedType["BatchId"] = 7] = "BatchId";
                NumberSequenceSeedType[NumberSequenceSeedType["TransactionId"] = 8] = "TransactionId";
                NumberSequenceSeedType[NumberSequenceSeedType["ReceiptCustomerSalesOrder"] = 10] = "ReceiptCustomerSalesOrder";
                NumberSequenceSeedType[NumberSequenceSeedType["ReceiptCustomerQuote"] = 11] = "ReceiptCustomerQuote";
            })(NumberSequenceSeedType = Entities.NumberSequenceSeedType || (Entities.NumberSequenceSeedType = {}));
            var ReasonCodeSourceType;
            (function (ReasonCodeSourceType) {
                ReasonCodeSourceType[ReasonCodeSourceType["None"] = 0] = "None";
                ReasonCodeSourceType[ReasonCodeSourceType["AddSalesperson"] = 1] = "AddSalesperson";
                ReasonCodeSourceType[ReasonCodeSourceType["EndOfTransaction"] = 2] = "EndOfTransaction";
                ReasonCodeSourceType[ReasonCodeSourceType["ItemDiscount"] = 3] = "ItemDiscount";
                ReasonCodeSourceType[ReasonCodeSourceType["ItemNotOnFile"] = 4] = "ItemNotOnFile";
                ReasonCodeSourceType[ReasonCodeSourceType["LineItemTaxChange"] = 5] = "LineItemTaxChange";
                ReasonCodeSourceType[ReasonCodeSourceType["Markup"] = 6] = "Markup";
                ReasonCodeSourceType[ReasonCodeSourceType["NegativeAdjustment"] = 7] = "NegativeAdjustment";
                ReasonCodeSourceType[ReasonCodeSourceType["NfcEContingencyModeEnabled"] = 8] = "NfcEContingencyModeEnabled";
                ReasonCodeSourceType[ReasonCodeSourceType["NfcEVoided"] = 9] = "NfcEVoided";
                ReasonCodeSourceType[ReasonCodeSourceType["OpenDrawer"] = 10] = "OpenDrawer";
                ReasonCodeSourceType[ReasonCodeSourceType["OverridePrice"] = 11] = "OverridePrice";
                ReasonCodeSourceType[ReasonCodeSourceType["ReturnItem"] = 12] = "ReturnItem";
                ReasonCodeSourceType[ReasonCodeSourceType["ReturnTransaction"] = 13] = "ReturnTransaction";
                ReasonCodeSourceType[ReasonCodeSourceType["SerialNumber"] = 14] = "SerialNumber";
                ReasonCodeSourceType[ReasonCodeSourceType["StartOfTransaction"] = 15] = "StartOfTransaction";
                ReasonCodeSourceType[ReasonCodeSourceType["TenderDeclaration"] = 16] = "TenderDeclaration";
                ReasonCodeSourceType[ReasonCodeSourceType["TotalDiscount"] = 17] = "TotalDiscount";
                ReasonCodeSourceType[ReasonCodeSourceType["TransactionTaxChange"] = 18] = "TransactionTaxChange";
                ReasonCodeSourceType[ReasonCodeSourceType["VoidItem"] = 19] = "VoidItem";
                ReasonCodeSourceType[ReasonCodeSourceType["VoidPayment"] = 20] = "VoidPayment";
                ReasonCodeSourceType[ReasonCodeSourceType["VoidTransaction"] = 21] = "VoidTransaction";
                ReasonCodeSourceType[ReasonCodeSourceType["OrderFulfillment"] = 22] = "OrderFulfillment";
            })(ReasonCodeSourceType = Entities.ReasonCodeSourceType || (Entities.ReasonCodeSourceType = {}));
            var TriggerFunctionType;
            (function (TriggerFunctionType) {
                TriggerFunctionType[TriggerFunctionType["None"] = 0] = "None";
                TriggerFunctionType[TriggerFunctionType["Item"] = 1] = "Item";
                TriggerFunctionType[TriggerFunctionType["InfoCode"] = 2] = "InfoCode";
            })(TriggerFunctionType = Entities.TriggerFunctionType || (Entities.TriggerFunctionType = {}));
            var QueryType;
            (function (QueryType) {
                QueryType[QueryType["None"] = 0] = "None";
                QueryType[QueryType["NameAndDescription"] = 1] = "NameAndDescription";
                QueryType[QueryType["AotObject"] = 2] = "AotObject";
            })(QueryType = Entities.QueryType || (Entities.QueryType = {}));
            var ChangeAction;
            (function (ChangeAction) {
                ChangeAction[ChangeAction["None"] = 0] = "None";
                ChangeAction[ChangeAction["Insert"] = 1] = "Insert";
                ChangeAction[ChangeAction["Update"] = 2] = "Update";
                ChangeAction[ChangeAction["Delete"] = 3] = "Delete";
            })(ChangeAction = Entities.ChangeAction || (Entities.ChangeAction = {}));
            var PeriodicDiscountOfferType;
            (function (PeriodicDiscountOfferType) {
                PeriodicDiscountOfferType[PeriodicDiscountOfferType["MultipleBuy"] = 0] = "MultipleBuy";
                PeriodicDiscountOfferType[PeriodicDiscountOfferType["MixAndMatch"] = 1] = "MixAndMatch";
                PeriodicDiscountOfferType[PeriodicDiscountOfferType["Offer"] = 2] = "Offer";
                PeriodicDiscountOfferType[PeriodicDiscountOfferType["Promotion"] = 3] = "Promotion";
                PeriodicDiscountOfferType[PeriodicDiscountOfferType["Threshold"] = 4] = "Threshold";
                PeriodicDiscountOfferType[PeriodicDiscountOfferType["LeastExpensiveFavorRetailer"] = 5] = "LeastExpensiveFavorRetailer";
                PeriodicDiscountOfferType[PeriodicDiscountOfferType["OfferLineQuantityLimit"] = 6] = "OfferLineQuantityLimit";
            })(PeriodicDiscountOfferType = Entities.PeriodicDiscountOfferType || (Entities.PeriodicDiscountOfferType = {}));
            var SearchFilterType;
            (function (SearchFilterType) {
                SearchFilterType[SearchFilterType["None"] = 0] = "None";
                SearchFilterType[SearchFilterType["Text"] = 1] = "Text";
            })(SearchFilterType = Entities.SearchFilterType || (Entities.SearchFilterType = {}));
            var InfoCodeActivity;
            (function (InfoCodeActivity) {
                InfoCodeActivity[InfoCodeActivity["Transaction"] = 0] = "Transaction";
                InfoCodeActivity[InfoCodeActivity["OrderFulfillment"] = 1] = "OrderFulfillment";
            })(InfoCodeActivity = Entities.InfoCodeActivity || (Entities.InfoCodeActivity = {}));
            var AddressType;
            (function (AddressType) {
                AddressType[AddressType["None"] = 0] = "None";
                AddressType[AddressType["Invoice"] = 1] = "Invoice";
                AddressType[AddressType["Delivery"] = 2] = "Delivery";
                AddressType[AddressType["AltDlv"] = 3] = "AltDlv";
                AddressType[AddressType["SWIFT"] = 4] = "SWIFT";
                AddressType[AddressType["Payment"] = 5] = "Payment";
                AddressType[AddressType["Service"] = 6] = "Service";
                AddressType[AddressType["Home"] = 7] = "Home";
                AddressType[AddressType["Other"] = 8] = "Other";
                AddressType[AddressType["Business"] = 9] = "Business";
                AddressType[AddressType["RemitTo"] = 10] = "RemitTo";
                AddressType[AddressType["ShipCarrierThirdPartyShipping"] = 11] = "ShipCarrierThirdPartyShipping";
                AddressType[AddressType["Statement"] = 12] = "Statement";
                AddressType[AddressType["FixedAsset"] = 15] = "FixedAsset";
                AddressType[AddressType["Onetime"] = 16] = "Onetime";
                AddressType[AddressType["Recruit"] = 17] = "Recruit";
                AddressType[AddressType["SMS"] = 18] = "SMS";
                AddressType[AddressType["Lading_W"] = 101] = "Lading_W";
                AddressType[AddressType["Unlading_W"] = 102] = "Unlading_W";
                AddressType[AddressType["Consignment_IN"] = 103] = "Consignment_IN";
            })(AddressType = Entities.AddressType || (Entities.AddressType = {}));
            var BarcodeEntryMethodType;
            (function (BarcodeEntryMethodType) {
                BarcodeEntryMethodType[BarcodeEntryMethodType["SingleScanned"] = 0] = "SingleScanned";
                BarcodeEntryMethodType[BarcodeEntryMethodType["MultipleScanned"] = 1] = "MultipleScanned";
                BarcodeEntryMethodType[BarcodeEntryMethodType["ManuallyEntered"] = 2] = "ManuallyEntered";
                BarcodeEntryMethodType[BarcodeEntryMethodType["Selected"] = 3] = "Selected";
            })(BarcodeEntryMethodType = Entities.BarcodeEntryMethodType || (Entities.BarcodeEntryMethodType = {}));
            var BarcodeMaskType;
            (function (BarcodeMaskType) {
                BarcodeMaskType[BarcodeMaskType["None"] = 0] = "None";
                BarcodeMaskType[BarcodeMaskType["Item"] = 1] = "Item";
                BarcodeMaskType[BarcodeMaskType["Customer"] = 2] = "Customer";
                BarcodeMaskType[BarcodeMaskType["Employee"] = 3] = "Employee";
                BarcodeMaskType[BarcodeMaskType["Coupon"] = 4] = "Coupon";
                BarcodeMaskType[BarcodeMaskType["DataEntry"] = 5] = "DataEntry";
                BarcodeMaskType[BarcodeMaskType["Salesperson"] = 6] = "Salesperson";
                BarcodeMaskType[BarcodeMaskType["Pharmacy"] = 7] = "Pharmacy";
                BarcodeMaskType[BarcodeMaskType["DiscountCode"] = 8] = "DiscountCode";
                BarcodeMaskType[BarcodeMaskType["GiftCard"] = 9] = "GiftCard";
                BarcodeMaskType[BarcodeMaskType["LoyaltyCard"] = 10] = "LoyaltyCard";
            })(BarcodeMaskType = Entities.BarcodeMaskType || (Entities.BarcodeMaskType = {}));
            var TransactionStatus;
            (function (TransactionStatus) {
                TransactionStatus[TransactionStatus["Normal"] = 0] = "Normal";
                TransactionStatus[TransactionStatus["Voided"] = 1] = "Voided";
                TransactionStatus[TransactionStatus["Posted"] = 2] = "Posted";
                TransactionStatus[TransactionStatus["Concluded"] = 3] = "Concluded";
                TransactionStatus[TransactionStatus["Canceled"] = 4] = "Canceled";
                TransactionStatus[TransactionStatus["OnHold"] = 5] = "OnHold";
                TransactionStatus[TransactionStatus["Training"] = 6] = "Training";
                TransactionStatus[TransactionStatus["Aborted"] = 7] = "Aborted";
            })(TransactionStatus = Entities.TransactionStatus || (Entities.TransactionStatus = {}));
            var SalesStatus;
            (function (SalesStatus) {
                SalesStatus[SalesStatus["Unknown"] = 0] = "Unknown";
                SalesStatus[SalesStatus["Created"] = 1] = "Created";
                SalesStatus[SalesStatus["Processing"] = 2] = "Processing";
                SalesStatus[SalesStatus["Delivered"] = 3] = "Delivered";
                SalesStatus[SalesStatus["Invoiced"] = 4] = "Invoiced";
                SalesStatus[SalesStatus["Confirmed"] = 5] = "Confirmed";
                SalesStatus[SalesStatus["Sent"] = 6] = "Sent";
                SalesStatus[SalesStatus["Canceled"] = 7] = "Canceled";
                SalesStatus[SalesStatus["Lost"] = 8] = "Lost";
            })(SalesStatus = Entities.SalesStatus || (Entities.SalesStatus = {}));
            var GiftCardOperationType;
            (function (GiftCardOperationType) {
                GiftCardOperationType[GiftCardOperationType["None"] = 0] = "None";
                GiftCardOperationType[GiftCardOperationType["Issue"] = 1] = "Issue";
                GiftCardOperationType[GiftCardOperationType["AddTo"] = 2] = "AddTo";
            })(GiftCardOperationType = Entities.GiftCardOperationType || (Entities.GiftCardOperationType = {}));
            var DiscountLineType;
            (function (DiscountLineType) {
                DiscountLineType[DiscountLineType["None"] = 0] = "None";
                DiscountLineType[DiscountLineType["CustomerDiscount"] = 1] = "CustomerDiscount";
                DiscountLineType[DiscountLineType["PeriodicDiscount"] = 2] = "PeriodicDiscount";
                DiscountLineType[DiscountLineType["ManualDiscount"] = 3] = "ManualDiscount";
                DiscountLineType[DiscountLineType["LoyaltyDiscount"] = 4] = "LoyaltyDiscount";
            })(DiscountLineType = Entities.DiscountLineType || (Entities.DiscountLineType = {}));
            var ManualDiscountType;
            (function (ManualDiscountType) {
                ManualDiscountType[ManualDiscountType["None"] = 0] = "None";
                ManualDiscountType[ManualDiscountType["LineDiscountAmount"] = 1] = "LineDiscountAmount";
                ManualDiscountType[ManualDiscountType["LineDiscountPercent"] = 2] = "LineDiscountPercent";
                ManualDiscountType[ManualDiscountType["TotalDiscountAmount"] = 3] = "TotalDiscountAmount";
                ManualDiscountType[ManualDiscountType["TotalDiscountPercent"] = 4] = "TotalDiscountPercent";
            })(ManualDiscountType = Entities.ManualDiscountType || (Entities.ManualDiscountType = {}));
            var CustomerDiscountType;
            (function (CustomerDiscountType) {
                CustomerDiscountType[CustomerDiscountType["None"] = 0] = "None";
                CustomerDiscountType[CustomerDiscountType["LineDiscount"] = 1] = "LineDiscount";
                CustomerDiscountType[CustomerDiscountType["MultilineDiscount"] = 2] = "MultilineDiscount";
                CustomerDiscountType[CustomerDiscountType["TotalDiscount"] = 3] = "TotalDiscount";
            })(CustomerDiscountType = Entities.CustomerDiscountType || (Entities.CustomerDiscountType = {}));
            var ConcurrencyMode;
            (function (ConcurrencyMode) {
                ConcurrencyMode[ConcurrencyMode["Exclusive"] = 0] = "Exclusive";
                ConcurrencyMode[ConcurrencyMode["BestPrice"] = 1] = "BestPrice";
                ConcurrencyMode[ConcurrencyMode["Compounded"] = 2] = "Compounded";
            })(ConcurrencyMode = Entities.ConcurrencyMode || (Entities.ConcurrencyMode = {}));
            var ReasonCodeInputType;
            (function (ReasonCodeInputType) {
                ReasonCodeInputType[ReasonCodeInputType["None"] = 0] = "None";
                ReasonCodeInputType[ReasonCodeInputType["SubCode"] = 1] = "SubCode";
                ReasonCodeInputType[ReasonCodeInputType["Date"] = 2] = "Date";
                ReasonCodeInputType[ReasonCodeInputType["Numeric"] = 3] = "Numeric";
                ReasonCodeInputType[ReasonCodeInputType["Item"] = 4] = "Item";
                ReasonCodeInputType[ReasonCodeInputType["Customer"] = 5] = "Customer";
                ReasonCodeInputType[ReasonCodeInputType["Staff"] = 6] = "Staff";
                ReasonCodeInputType[ReasonCodeInputType["Text"] = 9] = "Text";
                ReasonCodeInputType[ReasonCodeInputType["SubCodeButtons"] = 10] = "SubCodeButtons";
                ReasonCodeInputType[ReasonCodeInputType["AgeLimit"] = 11] = "AgeLimit";
                ReasonCodeInputType[ReasonCodeInputType["CompositeSubCodes"] = 12] = "CompositeSubCodes";
            })(ReasonCodeInputType = Entities.ReasonCodeInputType || (Entities.ReasonCodeInputType = {}));
            var ReasonCodeLineType;
            (function (ReasonCodeLineType) {
                ReasonCodeLineType[ReasonCodeLineType["Header"] = 0] = "Header";
                ReasonCodeLineType[ReasonCodeLineType["Sales"] = 1] = "Sales";
                ReasonCodeLineType[ReasonCodeLineType["Payment"] = 2] = "Payment";
                ReasonCodeLineType[ReasonCodeLineType["IncomeExpense"] = 3] = "IncomeExpense";
                ReasonCodeLineType[ReasonCodeLineType["NoSale"] = 4] = "NoSale";
                ReasonCodeLineType[ReasonCodeLineType["Affiliation"] = 5] = "Affiliation";
            })(ReasonCodeLineType = Entities.ReasonCodeLineType || (Entities.ReasonCodeLineType = {}));
            var ChargeModule;
            (function (ChargeModule) {
                ChargeModule[ChargeModule["None"] = 0] = "None";
                ChargeModule[ChargeModule["Sales"] = 1] = "Sales";
                ChargeModule[ChargeModule["Retail"] = 3] = "Retail";
            })(ChargeModule = Entities.ChargeModule || (Entities.ChargeModule = {}));
            var ChargeType;
            (function (ChargeType) {
                ChargeType[ChargeType["ManualCharge"] = 0] = "ManualCharge";
                ChargeType[ChargeType["PriceCharge"] = 1] = "PriceCharge";
                ChargeType[ChargeType["AutoCharge"] = 2] = "AutoCharge";
            })(ChargeType = Entities.ChargeType || (Entities.ChargeType = {}));
            var ChargeMethod;
            (function (ChargeMethod) {
                ChargeMethod[ChargeMethod["Fixed"] = 0] = "Fixed";
                ChargeMethod[ChargeMethod["Pieces"] = 1] = "Pieces";
                ChargeMethod[ChargeMethod["Percent"] = 2] = "Percent";
                ChargeMethod[ChargeMethod["InterCompanyPercent"] = 3] = "InterCompanyPercent";
                ChargeMethod[ChargeMethod["External"] = 4] = "External";
                ChargeMethod[ChargeMethod["Proportional"] = 5] = "Proportional";
            })(ChargeMethod = Entities.ChargeMethod || (Entities.ChargeMethod = {}));
            var CardType;
            (function (CardType) {
                CardType[CardType["InternationalCreditCard"] = 0] = "InternationalCreditCard";
                CardType[CardType["InternationalDebitCard"] = 1] = "InternationalDebitCard";
                CardType[CardType["LoyaltyCard"] = 2] = "LoyaltyCard";
                CardType[CardType["CorporateCard"] = 3] = "CorporateCard";
                CardType[CardType["CustomerCard"] = 4] = "CustomerCard";
                CardType[CardType["EmployeeCard"] = 5] = "EmployeeCard";
                CardType[CardType["SalespersonCard"] = 6] = "SalespersonCard";
                CardType[CardType["GiftCard"] = 7] = "GiftCard";
                CardType[CardType["Unknown"] = -1] = "Unknown";
            })(CardType = Entities.CardType || (Entities.CardType = {}));
            var CashType;
            (function (CashType) {
                CashType[CashType["Coin"] = 0] = "Coin";
                CashType[CashType["Note"] = 1] = "Note";
            })(CashType = Entities.CashType || (Entities.CashType = {}));
            var IncomeExpenseAccountType;
            (function (IncomeExpenseAccountType) {
                IncomeExpenseAccountType[IncomeExpenseAccountType["Income"] = 0] = "Income";
                IncomeExpenseAccountType[IncomeExpenseAccountType["Expense"] = 1] = "Expense";
                IncomeExpenseAccountType[IncomeExpenseAccountType["None"] = -1] = "None";
            })(IncomeExpenseAccountType = Entities.IncomeExpenseAccountType || (Entities.IncomeExpenseAccountType = {}));
            var TenderLineStatus;
            (function (TenderLineStatus) {
                TenderLineStatus[TenderLineStatus["None"] = 0] = "None";
                TenderLineStatus[TenderLineStatus["NotProcessed"] = 1] = "NotProcessed";
                TenderLineStatus[TenderLineStatus["PendingCommit"] = 2] = "PendingCommit";
                TenderLineStatus[TenderLineStatus["Voided"] = 3] = "Voided";
                TenderLineStatus[TenderLineStatus["Committed"] = 4] = "Committed";
                TenderLineStatus[TenderLineStatus["Historical"] = 5] = "Historical";
            })(TenderLineStatus = Entities.TenderLineStatus || (Entities.TenderLineStatus = {}));
            var TenderLineVoidStatus;
            (function (TenderLineVoidStatus) {
                TenderLineVoidStatus[TenderLineVoidStatus["None"] = 0] = "None";
                TenderLineVoidStatus[TenderLineVoidStatus["NormalVoid"] = 1] = "NormalVoid";
                TenderLineVoidStatus[TenderLineVoidStatus["ForceVoided"] = 2] = "ForceVoided";
                TenderLineVoidStatus[TenderLineVoidStatus["ForceVoidReconciled"] = 3] = "ForceVoidReconciled";
            })(TenderLineVoidStatus = Entities.TenderLineVoidStatus || (Entities.TenderLineVoidStatus = {}));
            var ContactInformationType;
            (function (ContactInformationType) {
                ContactInformationType[ContactInformationType["None"] = 0] = "None";
                ContactInformationType[ContactInformationType["Phone"] = 1] = "Phone";
                ContactInformationType[ContactInformationType["Email"] = 2] = "Email";
                ContactInformationType[ContactInformationType["Url"] = 3] = "Url";
                ContactInformationType[ContactInformationType["Telex"] = 4] = "Telex";
                ContactInformationType[ContactInformationType["Fax"] = 5] = "Fax";
                ContactInformationType[ContactInformationType["CellularPhone"] = 6] = "CellularPhone";
            })(ContactInformationType = Entities.ContactInformationType || (Entities.ContactInformationType = {}));
            var EmployeePermissionsAllowPrintingReceiptCopy;
            (function (EmployeePermissionsAllowPrintingReceiptCopy) {
                EmployeePermissionsAllowPrintingReceiptCopy[EmployeePermissionsAllowPrintingReceiptCopy["Always"] = 0] = "Always";
                EmployeePermissionsAllowPrintingReceiptCopy[EmployeePermissionsAllowPrintingReceiptCopy["OnlyOnce"] = 1] = "OnlyOnce";
                EmployeePermissionsAllowPrintingReceiptCopy[EmployeePermissionsAllowPrintingReceiptCopy["OnlyOnceHqAvailable"] = 2] = "OnlyOnceHqAvailable";
                EmployeePermissionsAllowPrintingReceiptCopy[EmployeePermissionsAllowPrintingReceiptCopy["Never"] = 3] = "Never";
            })(EmployeePermissionsAllowPrintingReceiptCopy = Entities.EmployeePermissionsAllowPrintingReceiptCopy || (Entities.EmployeePermissionsAllowPrintingReceiptCopy = {}));
            var AddressFormatLineType;
            (function (AddressFormatLineType) {
                AddressFormatLineType[AddressFormatLineType["None"] = 0] = "None";
                AddressFormatLineType[AddressFormatLineType["ZipCode"] = 1] = "ZipCode";
                AddressFormatLineType[AddressFormatLineType["City"] = 2] = "City";
                AddressFormatLineType[AddressFormatLineType["County"] = 3] = "County";
                AddressFormatLineType[AddressFormatLineType["State"] = 4] = "State";
                AddressFormatLineType[AddressFormatLineType["CountryRegion"] = 5] = "CountryRegion";
                AddressFormatLineType[AddressFormatLineType["StreetName"] = 6] = "StreetName";
                AddressFormatLineType[AddressFormatLineType["District"] = 7] = "District";
                AddressFormatLineType[AddressFormatLineType["StreetNumber"] = 8] = "StreetNumber";
                AddressFormatLineType[AddressFormatLineType["BuildingCompliment"] = 9] = "BuildingCompliment";
                AddressFormatLineType[AddressFormatLineType["Postbox"] = 10] = "Postbox";
                AddressFormatLineType[AddressFormatLineType["House_RU"] = 21] = "House_RU";
                AddressFormatLineType[AddressFormatLineType["Flat_RU"] = 22] = "Flat_RU";
                AddressFormatLineType[AddressFormatLineType["CountryOKSMCode_RU"] = 23] = "CountryOKSMCode_RU";
            })(AddressFormatLineType = Entities.AddressFormatLineType || (Entities.AddressFormatLineType = {}));
            var StatementMethod;
            (function (StatementMethod) {
                StatementMethod[StatementMethod["Staff"] = 0] = "Staff";
                StatementMethod[StatementMethod["PosTerminal"] = 1] = "PosTerminal";
                StatementMethod[StatementMethod["Total"] = 2] = "Total";
                StatementMethod[StatementMethod["None"] = -1] = "None";
            })(StatementMethod = Entities.StatementMethod || (Entities.StatementMethod = {}));
            var SalesRepPromptType;
            (function (SalesRepPromptType) {
                SalesRepPromptType[SalesRepPromptType["NoPrompt"] = 0] = "NoPrompt";
                SalesRepPromptType[SalesRepPromptType["PromptOnCartCreation"] = 1] = "PromptOnCartCreation";
                SalesRepPromptType[SalesRepPromptType["PromptOnCartLineCreation"] = 2] = "PromptOnCartLineCreation";
                SalesRepPromptType[SalesRepPromptType["None"] = -1] = "None";
            })(SalesRepPromptType = Entities.SalesRepPromptType || (Entities.SalesRepPromptType = {}));
            var RetailProductSearchType;
            (function (RetailProductSearchType) {
                RetailProductSearchType[RetailProductSearchType["MatchAnySearchTerms"] = 0] = "MatchAnySearchTerms";
                RetailProductSearchType[RetailProductSearchType["MatchAllSearchTerms"] = 1] = "MatchAllSearchTerms";
            })(RetailProductSearchType = Entities.RetailProductSearchType || (Entities.RetailProductSearchType = {}));
            var RetailDenominationsToDisplay;
            (function (RetailDenominationsToDisplay) {
                RetailDenominationsToDisplay[RetailDenominationsToDisplay["GreaterOrEqualToAmountDue"] = 0] = "GreaterOrEqualToAmountDue";
                RetailDenominationsToDisplay[RetailDenominationsToDisplay["AllDenominations"] = 1] = "AllDenominations";
            })(RetailDenominationsToDisplay = Entities.RetailDenominationsToDisplay || (Entities.RetailDenominationsToDisplay = {}));
            var EmployeeLogonType;
            (function (EmployeeLogonType) {
                EmployeeLogonType[EmployeeLogonType["RetailIdentityProvider"] = 0] = "RetailIdentityProvider";
                EmployeeLogonType[EmployeeLogonType["AzureActiveDirectory"] = 1] = "AzureActiveDirectory";
            })(EmployeeLogonType = Entities.EmployeeLogonType || (Entities.EmployeeLogonType = {}));
            var DeviceActivationStatus;
            (function (DeviceActivationStatus) {
                DeviceActivationStatus[DeviceActivationStatus["Pending"] = 0] = "Pending";
                DeviceActivationStatus[DeviceActivationStatus["Activated"] = 1] = "Activated";
                DeviceActivationStatus[DeviceActivationStatus["Deactivated"] = 2] = "Deactivated";
                DeviceActivationStatus[DeviceActivationStatus["Disabled"] = 3] = "Disabled";
                DeviceActivationStatus[DeviceActivationStatus["None"] = -1] = "None";
            })(DeviceActivationStatus = Entities.DeviceActivationStatus || (Entities.DeviceActivationStatus = {}));
            var DeviceType;
            (function (DeviceType) {
                DeviceType[DeviceType["None"] = 0] = "None";
                DeviceType[DeviceType["OPOS"] = 1] = "OPOS";
                DeviceType[DeviceType["WindowsPrinter"] = 2] = "WindowsPrinter";
                DeviceType[DeviceType["Network"] = 3] = "Network";
            })(DeviceType = Entities.DeviceType || (Entities.DeviceType = {}));
            var DualDisplayType;
            (function (DualDisplayType) {
                DualDisplayType[DualDisplayType["Logo"] = 0] = "Logo";
                DualDisplayType[DualDisplayType["ImageRotator"] = 1] = "ImageRotator";
                DualDisplayType[DualDisplayType["WebBrowser"] = 2] = "WebBrowser";
                DualDisplayType[DualDisplayType["None"] = -1] = "None";
            })(DualDisplayType = Entities.DualDisplayType || (Entities.DualDisplayType = {}));
            var FiscalRegisterType;
            (function (FiscalRegisterType) {
                FiscalRegisterType[FiscalRegisterType["None"] = 0] = "None";
                FiscalRegisterType[FiscalRegisterType["Manufacturer"] = 1] = "Manufacturer";
            })(FiscalRegisterType = Entities.FiscalRegisterType || (Entities.FiscalRegisterType = {}));
            var PrinterLogotype;
            (function (PrinterLogotype) {
                PrinterLogotype[PrinterLogotype["None"] = 0] = "None";
                PrinterLogotype[PrinterLogotype["Download"] = 1] = "Download";
                PrinterLogotype[PrinterLogotype["EpsonFlash"] = 2] = "EpsonFlash";
            })(PrinterLogotype = Entities.PrinterLogotype || (Entities.PrinterLogotype = {}));
            var PrinterLogoAlignmentType;
            (function (PrinterLogoAlignmentType) {
                PrinterLogoAlignmentType[PrinterLogoAlignmentType["Left"] = 0] = "Left";
                PrinterLogoAlignmentType[PrinterLogoAlignmentType["Center"] = 1] = "Center";
                PrinterLogoAlignmentType[PrinterLogoAlignmentType["Right"] = 2] = "Right";
                PrinterLogoAlignmentType[PrinterLogoAlignmentType["None"] = -1] = "None";
            })(PrinterLogoAlignmentType = Entities.PrinterLogoAlignmentType || (Entities.PrinterLogoAlignmentType = {}));
            var ReceiptType;
            (function (ReceiptType) {
                ReceiptType[ReceiptType["Unknown"] = 0] = "Unknown";
                ReceiptType[ReceiptType["SalesReceipt"] = 1] = "SalesReceipt";
                ReceiptType[ReceiptType["CardReceiptForShop"] = 2] = "CardReceiptForShop";
                ReceiptType[ReceiptType["CardReceiptForCustomer"] = 3] = "CardReceiptForCustomer";
                ReceiptType[ReceiptType["CardReceiptForShopReturn"] = 4] = "CardReceiptForShopReturn";
                ReceiptType[ReceiptType["CardReceiptForCustomerReturn"] = 5] = "CardReceiptForCustomerReturn";
                ReceiptType[ReceiptType["CustomerAccountReceiptForShop"] = 7] = "CustomerAccountReceiptForShop";
                ReceiptType[ReceiptType["CustomerAccountReceiptForCustomer"] = 8] = "CustomerAccountReceiptForCustomer";
                ReceiptType[ReceiptType["CustomerAccountReceiptForShopReturn"] = 9] = "CustomerAccountReceiptForShopReturn";
                ReceiptType[ReceiptType["CustomerAccountReceiptForCustomerReturn"] = 10] = "CustomerAccountReceiptForCustomerReturn";
                ReceiptType[ReceiptType["CustomerAccountDeposit"] = 14] = "CustomerAccountDeposit";
                ReceiptType[ReceiptType["CreditMemo"] = 15] = "CreditMemo";
                ReceiptType[ReceiptType["SalesOrderReceipt"] = 18] = "SalesOrderReceipt";
                ReceiptType[ReceiptType["GiftCertificate"] = 20] = "GiftCertificate";
                ReceiptType[ReceiptType["QuotationReceipt"] = 21] = "QuotationReceipt";
                ReceiptType[ReceiptType["PackingSlip"] = 22] = "PackingSlip";
                ReceiptType[ReceiptType["PickupReceipt"] = 23] = "PickupReceipt";
                ReceiptType[ReceiptType["XReport"] = 24] = "XReport";
                ReceiptType[ReceiptType["ZReport"] = 25] = "ZReport";
                ReceiptType[ReceiptType["SafeDrop"] = 26] = "SafeDrop";
                ReceiptType[ReceiptType["BankDrop"] = 27] = "BankDrop";
                ReceiptType[ReceiptType["TenderDeclaration"] = 28] = "TenderDeclaration";
                ReceiptType[ReceiptType["RemoveTender"] = 29] = "RemoveTender";
                ReceiptType[ReceiptType["FloatEntry"] = 30] = "FloatEntry";
                ReceiptType[ReceiptType["StartingAmount"] = 31] = "StartingAmount";
                ReceiptType[ReceiptType["OrderSummaryReceipt"] = 32] = "OrderSummaryReceipt";
                ReceiptType[ReceiptType["GiftReceipt"] = 33] = "GiftReceipt";
                ReceiptType[ReceiptType["ReturnLabel"] = 34] = "ReturnLabel";
                ReceiptType[ReceiptType["EFDocDANFESimplified"] = 35] = "EFDocDANFESimplified";
                ReceiptType[ReceiptType["EFDocDANFEDetailed"] = 36] = "EFDocDANFEDetailed";
                ReceiptType[ReceiptType["PickingList"] = 37] = "PickingList";
                ReceiptType[ReceiptType["CustomReceipt1"] = 101] = "CustomReceipt1";
                ReceiptType[ReceiptType["CustomReceipt2"] = 102] = "CustomReceipt2";
                ReceiptType[ReceiptType["CustomReceipt3"] = 103] = "CustomReceipt3";
                ReceiptType[ReceiptType["CustomReceipt4"] = 104] = "CustomReceipt4";
                ReceiptType[ReceiptType["CustomReceipt5"] = 105] = "CustomReceipt5";
                ReceiptType[ReceiptType["CustomReceipt6"] = 106] = "CustomReceipt6";
                ReceiptType[ReceiptType["CustomReceipt7"] = 107] = "CustomReceipt7";
                ReceiptType[ReceiptType["CustomReceipt8"] = 108] = "CustomReceipt8";
                ReceiptType[ReceiptType["CustomReceipt9"] = 109] = "CustomReceipt9";
                ReceiptType[ReceiptType["CustomReceipt10"] = 110] = "CustomReceipt10";
                ReceiptType[ReceiptType["CustomReceipt11"] = 111] = "CustomReceipt11";
                ReceiptType[ReceiptType["CustomReceipt12"] = 112] = "CustomReceipt12";
                ReceiptType[ReceiptType["CustomReceipt13"] = 113] = "CustomReceipt13";
                ReceiptType[ReceiptType["CustomReceipt14"] = 114] = "CustomReceipt14";
                ReceiptType[ReceiptType["CustomReceipt15"] = 115] = "CustomReceipt15";
                ReceiptType[ReceiptType["CustomReceipt16"] = 116] = "CustomReceipt16";
                ReceiptType[ReceiptType["CustomReceipt17"] = 117] = "CustomReceipt17";
                ReceiptType[ReceiptType["CustomReceipt18"] = 118] = "CustomReceipt18";
                ReceiptType[ReceiptType["CustomReceipt19"] = 119] = "CustomReceipt19";
                ReceiptType[ReceiptType["CustomReceipt20"] = 120] = "CustomReceipt20";
            })(ReceiptType = Entities.ReceiptType || (Entities.ReceiptType = {}));
            var PrintBehavior;
            (function (PrintBehavior) {
                PrintBehavior[PrintBehavior["Always"] = 0] = "Always";
                PrintBehavior[PrintBehavior["Never"] = 1] = "Never";
                PrintBehavior[PrintBehavior["Prompt"] = 2] = "Prompt";
                PrintBehavior[PrintBehavior["AsRequired"] = 3] = "AsRequired";
            })(PrintBehavior = Entities.PrintBehavior || (Entities.PrintBehavior = {}));
            var ProductPropertyType;
            (function (ProductPropertyType) {
                ProductPropertyType[ProductPropertyType["None"] = 0] = "None";
                ProductPropertyType[ProductPropertyType["Currency"] = 1] = "Currency";
                ProductPropertyType[ProductPropertyType["DateTime"] = 2] = "DateTime";
                ProductPropertyType[ProductPropertyType["Decimal"] = 3] = "Decimal";
                ProductPropertyType[ProductPropertyType["Integer"] = 4] = "Integer";
                ProductPropertyType[ProductPropertyType["Text"] = 5] = "Text";
                ProductPropertyType[ProductPropertyType["Boolean"] = 6] = "Boolean";
                ProductPropertyType[ProductPropertyType["Video"] = 40] = "Video";
                ProductPropertyType[ProductPropertyType["Image"] = 41] = "Image";
            })(ProductPropertyType = Entities.ProductPropertyType || (Entities.ProductPropertyType = {}));
            var AttributeGroupType;
            (function (AttributeGroupType) {
                AttributeGroupType[AttributeGroupType["Default"] = 0] = "Default";
                AttributeGroupType[AttributeGroupType["Specification"] = 1] = "Specification";
            })(AttributeGroupType = Entities.AttributeGroupType || (Entities.AttributeGroupType = {}));
            var ProductSource;
            (function (ProductSource) {
                ProductSource[ProductSource["None"] = 0] = "None";
                ProductSource[ProductSource["Local"] = 1] = "Local";
                ProductSource[ProductSource["Remote"] = 2] = "Remote";
            })(ProductSource = Entities.ProductSource || (Entities.ProductSource = {}));
            var RoundingMethod;
            (function (RoundingMethod) {
                RoundingMethod[RoundingMethod["None"] = 0] = "None";
                RoundingMethod[RoundingMethod["Nearest"] = 1] = "Nearest";
                RoundingMethod[RoundingMethod["Up"] = 2] = "Up";
                RoundingMethod[RoundingMethod["Down"] = 3] = "Down";
            })(RoundingMethod = Entities.RoundingMethod || (Entities.RoundingMethod = {}));
            var PriceMethod;
            (function (PriceMethod) {
                PriceMethod[PriceMethod["None"] = 0] = "None";
                PriceMethod[PriceMethod["Fixed"] = 1] = "Fixed";
                PriceMethod[PriceMethod["AmountOff"] = 2] = "AmountOff";
                PriceMethod[PriceMethod["PercentOff"] = 3] = "PercentOff";
            })(PriceMethod = Entities.PriceMethod || (Entities.PriceMethod = {}));
            var LineMultilineDiscountOnItem;
            (function (LineMultilineDiscountOnItem) {
                LineMultilineDiscountOnItem[LineMultilineDiscountOnItem["None"] = 0] = "None";
                LineMultilineDiscountOnItem[LineMultilineDiscountOnItem["Line"] = 1] = "Line";
                LineMultilineDiscountOnItem[LineMultilineDiscountOnItem["Multiline"] = 2] = "Multiline";
                LineMultilineDiscountOnItem[LineMultilineDiscountOnItem["Both"] = 3] = "Both";
            })(LineMultilineDiscountOnItem = Entities.LineMultilineDiscountOnItem || (Entities.LineMultilineDiscountOnItem = {}));
            var DistanceUnit;
            (function (DistanceUnit) {
                DistanceUnit[DistanceUnit["Miles"] = 0] = "Miles";
                DistanceUnit[DistanceUnit["Kilometers"] = 1] = "Kilometers";
            })(DistanceUnit = Entities.DistanceUnit || (Entities.DistanceUnit = {}));
            var TransactionType;
            (function (TransactionType) {
                TransactionType[TransactionType["LogOff"] = 0] = "LogOff";
                TransactionType[TransactionType["LogOn"] = 1] = "LogOn";
                TransactionType[TransactionType["Sales"] = 2] = "Sales";
                TransactionType[TransactionType["Payment"] = 3] = "Payment";
                TransactionType[TransactionType["RemoveTender"] = 4] = "RemoveTender";
                TransactionType[TransactionType["FloatEntry"] = 5] = "FloatEntry";
                TransactionType[TransactionType["ChangeTender"] = 6] = "ChangeTender";
                TransactionType[TransactionType["TenderDeclaration"] = 7] = "TenderDeclaration";
                TransactionType[TransactionType["OpenDrawer"] = 9] = "OpenDrawer";
                TransactionType[TransactionType["SalesOrder"] = 14] = "SalesOrder";
                TransactionType[TransactionType["SalesInvoice"] = 15] = "SalesInvoice";
                TransactionType[TransactionType["BankDrop"] = 16] = "BankDrop";
                TransactionType[TransactionType["SafeDrop"] = 17] = "SafeDrop";
                TransactionType[TransactionType["IncomeExpense"] = 18] = "IncomeExpense";
                TransactionType[TransactionType["CustomerOrder"] = 19] = "CustomerOrder";
                TransactionType[TransactionType["StartingAmount"] = 20] = "StartingAmount";
                TransactionType[TransactionType["SuspendShift"] = 21] = "SuspendShift";
                TransactionType[TransactionType["BlindCloseShift"] = 22] = "BlindCloseShift";
                TransactionType[TransactionType["CloseShift"] = 23] = "CloseShift";
                TransactionType[TransactionType["PrintX"] = 24] = "PrintX";
                TransactionType[TransactionType["PrintZ"] = 25] = "PrintZ";
                TransactionType[TransactionType["PendingSalesOrder"] = 27] = "PendingSalesOrder";
                TransactionType[TransactionType["KitDisassembly"] = 28] = "KitDisassembly";
                TransactionType[TransactionType["AsyncCustomerQuote"] = 31] = "AsyncCustomerQuote";
                TransactionType[TransactionType["AsyncCustomerOrder"] = 33] = "AsyncCustomerOrder";
                TransactionType[TransactionType["None"] = -1] = "None";
            })(TransactionType = Entities.TransactionType || (Entities.TransactionType = {}));
            var StockCountStatus;
            (function (StockCountStatus) {
                StockCountStatus[StockCountStatus["Unchanged"] = 0] = "Unchanged";
                StockCountStatus[StockCountStatus["PendingUpdate"] = 1] = "PendingUpdate";
            })(StockCountStatus = Entities.StockCountStatus || (Entities.StockCountStatus = {}));
            var CommerceListInvitationStatus;
            (function (CommerceListInvitationStatus) {
                CommerceListInvitationStatus[CommerceListInvitationStatus["None"] = 0] = "None";
                CommerceListInvitationStatus[CommerceListInvitationStatus["Pending"] = 1] = "Pending";
                CommerceListInvitationStatus[CommerceListInvitationStatus["Accepted"] = 2] = "Accepted";
            })(CommerceListInvitationStatus = Entities.CommerceListInvitationStatus || (Entities.CommerceListInvitationStatus = {}));
            var CommerceListInvitationType;
            (function (CommerceListInvitationType) {
                CommerceListInvitationType[CommerceListInvitationType["None"] = 0] = "None";
                CommerceListInvitationType[CommerceListInvitationType["Public"] = 1] = "Public";
                CommerceListInvitationType[CommerceListInvitationType["Email"] = 2] = "Email";
            })(CommerceListInvitationType = Entities.CommerceListInvitationType || (Entities.CommerceListInvitationType = {}));
            var SearchLocation;
            (function (SearchLocation) {
                SearchLocation[SearchLocation["None"] = 0] = "None";
                SearchLocation[SearchLocation["Local"] = 1] = "Local";
                SearchLocation[SearchLocation["Remote"] = 2] = "Remote";
                SearchLocation[SearchLocation["All"] = 3] = "All";
            })(SearchLocation = Entities.SearchLocation || (Entities.SearchLocation = {}));
            var OrderSearchType;
            (function (OrderSearchType) {
                OrderSearchType[OrderSearchType["None"] = 0] = "None";
                OrderSearchType[OrderSearchType["SalesOrder"] = 1] = "SalesOrder";
                OrderSearchType[OrderSearchType["SalesTransaction"] = 2] = "SalesTransaction";
                OrderSearchType[OrderSearchType["ConsolidateOrder"] = 3] = "ConsolidateOrder";
            })(OrderSearchType = Entities.OrderSearchType || (Entities.OrderSearchType = {}));
            var SalesTransactionType;
            (function (SalesTransactionType) {
                SalesTransactionType[SalesTransactionType["Sales"] = 2] = "Sales";
                SalesTransactionType[SalesTransactionType["CustomerAccountDeposit"] = 3] = "CustomerAccountDeposit";
                SalesTransactionType[SalesTransactionType["IncomeExpense"] = 18] = "IncomeExpense";
                SalesTransactionType[SalesTransactionType["CustomerOrder"] = 19] = "CustomerOrder";
                SalesTransactionType[SalesTransactionType["PendingSalesOrder"] = 27] = "PendingSalesOrder";
                SalesTransactionType[SalesTransactionType["AsyncCustomerQuote"] = 31] = "AsyncCustomerQuote";
                SalesTransactionType[SalesTransactionType["AsyncCustomerOrder"] = 33] = "AsyncCustomerOrder";
                SalesTransactionType[SalesTransactionType["None"] = -1] = "None";
            })(SalesTransactionType = Entities.SalesTransactionType || (Entities.SalesTransactionType = {}));
            var CommerceEntityDataLevel;
            (function (CommerceEntityDataLevel) {
                CommerceEntityDataLevel[CommerceEntityDataLevel["Identity"] = 0] = "Identity";
                CommerceEntityDataLevel[CommerceEntityDataLevel["Minimal"] = 1] = "Minimal";
                CommerceEntityDataLevel[CommerceEntityDataLevel["Standard"] = 2] = "Standard";
                CommerceEntityDataLevel[CommerceEntityDataLevel["Extended"] = 3] = "Extended";
                CommerceEntityDataLevel[CommerceEntityDataLevel["Complete"] = 4] = "Complete";
            })(CommerceEntityDataLevel = Entities.CommerceEntityDataLevel || (Entities.CommerceEntityDataLevel = {}));
            var RetailAffiliationType;
            (function (RetailAffiliationType) {
                RetailAffiliationType[RetailAffiliationType["General"] = 0] = "General";
                RetailAffiliationType[RetailAffiliationType["Loyalty"] = 1] = "Loyalty";
                RetailAffiliationType[RetailAffiliationType["Unknown"] = -1] = "Unknown";
            })(RetailAffiliationType = Entities.RetailAffiliationType || (Entities.RetailAffiliationType = {}));
            var ProductRefinerSource;
            (function (ProductRefinerSource) {
                ProductRefinerSource[ProductRefinerSource["None"] = 0] = "None";
                ProductRefinerSource[ProductRefinerSource["Attribute"] = 1] = "Attribute";
                ProductRefinerSource[ProductRefinerSource["Category"] = 2] = "Category";
                ProductRefinerSource[ProductRefinerSource["Price"] = 3] = "Price";
            })(ProductRefinerSource = Entities.ProductRefinerSource || (Entities.ProductRefinerSource = {}));
            var RefinerType;
            (function (RefinerType) {
                RefinerType[RefinerType["SingleSelect"] = 0] = "SingleSelect";
                RefinerType[RefinerType["MultiSelect"] = 1] = "MultiSelect";
            })(RefinerType = Entities.RefinerType || (Entities.RefinerType = {}));
            var DisplayTemplate;
            (function (DisplayTemplate) {
                DisplayTemplate[DisplayTemplate["List"] = 0] = "List";
                DisplayTemplate[DisplayTemplate["Slider"] = 1] = "Slider";
                DisplayTemplate[DisplayTemplate["SliderWithBars"] = 2] = "SliderWithBars";
                DisplayTemplate[DisplayTemplate["Range"] = 3] = "Range";
            })(DisplayTemplate = Entities.DisplayTemplate || (Entities.DisplayTemplate = {}));
            var LoyaltyCardTenderType;
            (function (LoyaltyCardTenderType) {
                LoyaltyCardTenderType[LoyaltyCardTenderType["AsCardTender"] = 0] = "AsCardTender";
                LoyaltyCardTenderType[LoyaltyCardTenderType["AsContactTender"] = 1] = "AsContactTender";
                LoyaltyCardTenderType[LoyaltyCardTenderType["NoTender"] = 2] = "NoTender";
                LoyaltyCardTenderType[LoyaltyCardTenderType["Blocked"] = 3] = "Blocked";
            })(LoyaltyCardTenderType = Entities.LoyaltyCardTenderType || (Entities.LoyaltyCardTenderType = {}));
            var LoyaltyRewardPointType;
            (function (LoyaltyRewardPointType) {
                LoyaltyRewardPointType[LoyaltyRewardPointType["None"] = 0] = "None";
                LoyaltyRewardPointType[LoyaltyRewardPointType["Quantity"] = 1] = "Quantity";
                LoyaltyRewardPointType[LoyaltyRewardPointType["Amount"] = 2] = "Amount";
            })(LoyaltyRewardPointType = Entities.LoyaltyRewardPointType || (Entities.LoyaltyRewardPointType = {}));
            var LoyaltyRewardPointEntryType;
            (function (LoyaltyRewardPointEntryType) {
                LoyaltyRewardPointEntryType[LoyaltyRewardPointEntryType["None"] = 0] = "None";
                LoyaltyRewardPointEntryType[LoyaltyRewardPointEntryType["Earn"] = 1] = "Earn";
                LoyaltyRewardPointEntryType[LoyaltyRewardPointEntryType["Redeem"] = 2] = "Redeem";
                LoyaltyRewardPointEntryType[LoyaltyRewardPointEntryType["ReturnEarned"] = 3] = "ReturnEarned";
                LoyaltyRewardPointEntryType[LoyaltyRewardPointEntryType["Adjust"] = 4] = "Adjust";
                LoyaltyRewardPointEntryType[LoyaltyRewardPointEntryType["Refund"] = 5] = "Refund";
            })(LoyaltyRewardPointEntryType = Entities.LoyaltyRewardPointEntryType || (Entities.LoyaltyRewardPointEntryType = {}));
            var RetailChannelType;
            (function (RetailChannelType) {
                RetailChannelType[RetailChannelType["RetailStore"] = 0] = "RetailStore";
                RetailChannelType[RetailChannelType["OnlineStore"] = 1] = "OnlineStore";
                RetailChannelType[RetailChannelType["OnlineMarketplace"] = 2] = "OnlineMarketplace";
                RetailChannelType[RetailChannelType["SharePointOnlineStore"] = 3] = "SharePointOnlineStore";
                RetailChannelType[RetailChannelType["None"] = -1] = "None";
            })(RetailChannelType = Entities.RetailChannelType || (Entities.RetailChannelType = {}));
            var LogOnConfiguration;
            (function (LogOnConfiguration) {
                LogOnConfiguration[LogOnConfiguration["LocalDatabase"] = 0] = "LocalDatabase";
                LogOnConfiguration[LogOnConfiguration["RealTimeService"] = 1] = "RealTimeService";
            })(LogOnConfiguration = Entities.LogOnConfiguration || (Entities.LogOnConfiguration = {}));
            var TransactionServiceAuthenticationType;
            (function (TransactionServiceAuthenticationType) {
                TransactionServiceAuthenticationType[TransactionServiceAuthenticationType["CertificateAuthentication"] = 0] = "CertificateAuthentication";
                TransactionServiceAuthenticationType[TransactionServiceAuthenticationType["ServiceToServiceAuthentication"] = 1] = "ServiceToServiceAuthentication";
            })(TransactionServiceAuthenticationType = Entities.TransactionServiceAuthenticationType || (Entities.TransactionServiceAuthenticationType = {}));
            var EmployeeActivityType;
            (function (EmployeeActivityType) {
                EmployeeActivityType[EmployeeActivityType["ClockIn"] = 0] = "ClockIn";
                EmployeeActivityType[EmployeeActivityType["JobStop"] = 1] = "JobStop";
                EmployeeActivityType[EmployeeActivityType["JobStart"] = 2] = "JobStart";
                EmployeeActivityType[EmployeeActivityType["TeamStop"] = 3] = "TeamStop";
                EmployeeActivityType[EmployeeActivityType["TeamStart"] = 4] = "TeamStart";
                EmployeeActivityType[EmployeeActivityType["BreakFlowStart"] = 5] = "BreakFlowStart";
                EmployeeActivityType[EmployeeActivityType["BreakCancelOne"] = 6] = "BreakCancelOne";
                EmployeeActivityType[EmployeeActivityType["BreakCancelAll"] = 7] = "BreakCancelAll";
                EmployeeActivityType[EmployeeActivityType["BreakFlowStop"] = 8] = "BreakFlowStop";
                EmployeeActivityType[EmployeeActivityType["FinishQuantity"] = 9] = "FinishQuantity";
                EmployeeActivityType[EmployeeActivityType["ClockOut"] = 10] = "ClockOut";
                EmployeeActivityType[EmployeeActivityType["EventCode"] = 11] = "EventCode";
                EmployeeActivityType[EmployeeActivityType["BreakFromWork"] = 12] = "BreakFromWork";
                EmployeeActivityType[EmployeeActivityType["BreakForLunch"] = 13] = "BreakForLunch";
                EmployeeActivityType[EmployeeActivityType["Logbook"] = 14] = "Logbook";
                EmployeeActivityType[EmployeeActivityType["None"] = -1] = "None";
            })(EmployeeActivityType = Entities.EmployeeActivityType || (Entities.EmployeeActivityType = {}));
            var DeliveryPreferenceType;
            (function (DeliveryPreferenceType) {
                DeliveryPreferenceType[DeliveryPreferenceType["None"] = 0] = "None";
                DeliveryPreferenceType[DeliveryPreferenceType["ShipToAddress"] = 1] = "ShipToAddress";
                DeliveryPreferenceType[DeliveryPreferenceType["PickupFromStore"] = 2] = "PickupFromStore";
                DeliveryPreferenceType[DeliveryPreferenceType["ElectronicDelivery"] = 3] = "ElectronicDelivery";
                DeliveryPreferenceType[DeliveryPreferenceType["DeliverItemsIndividually"] = 4] = "DeliverItemsIndividually";
            })(DeliveryPreferenceType = Entities.DeliveryPreferenceType || (Entities.DeliveryPreferenceType = {}));
            var LayoutType;
            (function (LayoutType) {
                LayoutType[LayoutType["None"] = 0] = "None";
                LayoutType[LayoutType["ModernPosCompact"] = 1] = "ModernPosCompact";
                LayoutType[LayoutType["ModernPosFull"] = 2] = "ModernPosFull";
                LayoutType[LayoutType["Epos"] = 3] = "Epos";
            })(LayoutType = Entities.LayoutType || (Entities.LayoutType = {}));
            var SalesInvoiceType;
            (function (SalesInvoiceType) {
                SalesInvoiceType[SalesInvoiceType["Journal"] = 0] = "Journal";
                SalesInvoiceType[SalesInvoiceType["Quotation"] = 1] = "Quotation";
                SalesInvoiceType[SalesInvoiceType["Subscription"] = 2] = "Subscription";
                SalesInvoiceType[SalesInvoiceType["Sales"] = 3] = "Sales";
                SalesInvoiceType[SalesInvoiceType["ReturnItem"] = 4] = "ReturnItem";
                SalesInvoiceType[SalesInvoiceType["Blanket"] = 5] = "Blanket";
                SalesInvoiceType[SalesInvoiceType["ItemRequirements"] = 6] = "ItemRequirements";
            })(SalesInvoiceType = Entities.SalesInvoiceType || (Entities.SalesInvoiceType = {}));
            var TaxOverrideType;
            (function (TaxOverrideType) {
                TaxOverrideType[TaxOverrideType["ItemSalesTaxGroup"] = 0] = "ItemSalesTaxGroup";
                TaxOverrideType[TaxOverrideType["SalesTaxGroup"] = 1] = "SalesTaxGroup";
                TaxOverrideType[TaxOverrideType["None"] = -1] = "None";
            })(TaxOverrideType = Entities.TaxOverrideType || (Entities.TaxOverrideType = {}));
            var TaxOverrideBy;
            (function (TaxOverrideBy) {
                TaxOverrideBy[TaxOverrideBy["Line"] = 0] = "Line";
                TaxOverrideBy[TaxOverrideBy["Cart"] = 1] = "Cart";
                TaxOverrideBy[TaxOverrideBy["None"] = -1] = "None";
            })(TaxOverrideBy = Entities.TaxOverrideBy || (Entities.TaxOverrideBy = {}));
            var RetailOperation;
            (function (RetailOperation) {
                RetailOperation[RetailOperation["None"] = 0] = "None";
                RetailOperation[RetailOperation["ItemSale"] = 100] = "ItemSale";
                RetailOperation[RetailOperation["PriceCheck"] = 101] = "PriceCheck";
                RetailOperation[RetailOperation["VoidItem"] = 102] = "VoidItem";
                RetailOperation[RetailOperation["ItemComment"] = 103] = "ItemComment";
                RetailOperation[RetailOperation["PriceOverride"] = 104] = "PriceOverride";
                RetailOperation[RetailOperation["SetQuantity"] = 105] = "SetQuantity";
                RetailOperation[RetailOperation["ClearQuantity"] = 106] = "ClearQuantity";
                RetailOperation[RetailOperation["ItemSearch"] = 108] = "ItemSearch";
                RetailOperation[RetailOperation["ReturnItem"] = 109] = "ReturnItem";
                RetailOperation[RetailOperation["WeighItem"] = 110] = "WeighItem";
                RetailOperation[RetailOperation["LinkedItemsAdd"] = 112] = "LinkedItemsAdd";
                RetailOperation[RetailOperation["SetDimensions"] = 113] = "SetDimensions";
                RetailOperation[RetailOperation["ReturnTransaction"] = 114] = "ReturnTransaction";
                RetailOperation[RetailOperation["ShowJournal"] = 115] = "ShowJournal";
                RetailOperation[RetailOperation["SetCostPrice"] = 116] = "SetCostPrice";
                RetailOperation[RetailOperation["LoyaltyRequest"] = 117] = "LoyaltyRequest";
                RetailOperation[RetailOperation["ProcessInput"] = 118] = "ProcessInput";
                RetailOperation[RetailOperation["SalespersonBarcode"] = 119] = "SalespersonBarcode";
                RetailOperation[RetailOperation["SalespersonCard"] = 120] = "SalespersonCard";
                RetailOperation[RetailOperation["SalespersonClear"] = 121] = "SalespersonClear";
                RetailOperation[RetailOperation["InvoiceComment"] = 122] = "InvoiceComment";
                RetailOperation[RetailOperation["ChangeUnitOfMeasure"] = 123] = "ChangeUnitOfMeasure";
                RetailOperation[RetailOperation["ItemSaleMultiple"] = 124] = "ItemSaleMultiple";
                RetailOperation[RetailOperation["RFIDSale"] = 125] = "RFIDSale";
                RetailOperation[RetailOperation["SalesHistory"] = 126] = "SalesHistory";
                RetailOperation[RetailOperation["OverrideTaxTransaction"] = 127] = "OverrideTaxTransaction";
                RetailOperation[RetailOperation["OverrideTaxTransactionList"] = 128] = "OverrideTaxTransactionList";
                RetailOperation[RetailOperation["OverrideTaxLine"] = 129] = "OverrideTaxLine";
                RetailOperation[RetailOperation["OverrideTaxLineList"] = 130] = "OverrideTaxLineList";
                RetailOperation[RetailOperation["PackSlip"] = 131] = "PackSlip";
                RetailOperation[RetailOperation["DepositOverride"] = 132] = "DepositOverride";
                RetailOperation[RetailOperation["BuyWarranty"] = 133] = "BuyWarranty";
                RetailOperation[RetailOperation["AddAffiliation"] = 134] = "AddAffiliation";
                RetailOperation[RetailOperation["AddAffiliationFromList"] = 135] = "AddAffiliationFromList";
                RetailOperation[RetailOperation["AddSerialNumber"] = 136] = "AddSerialNumber";
                RetailOperation[RetailOperation["PayCash"] = 200] = "PayCash";
                RetailOperation[RetailOperation["PayCard"] = 201] = "PayCard";
                RetailOperation[RetailOperation["PayCustomerAccount"] = 202] = "PayCustomerAccount";
                RetailOperation[RetailOperation["PayCurrency"] = 203] = "PayCurrency";
                RetailOperation[RetailOperation["PayCheck"] = 204] = "PayCheck";
                RetailOperation[RetailOperation["PayCashQuick"] = 206] = "PayCashQuick";
                RetailOperation[RetailOperation["PayLoyalty"] = 207] = "PayLoyalty";
                RetailOperation[RetailOperation["PayCorporateCard"] = 208] = "PayCorporateCard";
                RetailOperation[RetailOperation["ChangeBack"] = 210] = "ChangeBack";
                RetailOperation[RetailOperation["VoidPayment"] = 211] = "VoidPayment";
                RetailOperation[RetailOperation["FleetCardInfo"] = 212] = "FleetCardInfo";
                RetailOperation[RetailOperation["PayCreditMemo"] = 213] = "PayCreditMemo";
                RetailOperation[RetailOperation["PayGiftCertificate"] = 214] = "PayGiftCertificate";
                RetailOperation[RetailOperation["LineDiscountAmount"] = 300] = "LineDiscountAmount";
                RetailOperation[RetailOperation["LineDiscountPercent"] = 301] = "LineDiscountPercent";
                RetailOperation[RetailOperation["TotalDiscountAmount"] = 302] = "TotalDiscountAmount";
                RetailOperation[RetailOperation["TotalDiscountPercent"] = 303] = "TotalDiscountPercent";
                RetailOperation[RetailOperation["DiscountCodeBarcode"] = 304] = "DiscountCodeBarcode";
                RetailOperation[RetailOperation["CalculateFullDiscounts"] = 310] = "CalculateFullDiscounts";
                RetailOperation[RetailOperation["PopupMenu"] = 400] = "PopupMenu";
                RetailOperation[RetailOperation["Submenu"] = 401] = "Submenu";
                RetailOperation[RetailOperation["VoidTransaction"] = 500] = "VoidTransaction";
                RetailOperation[RetailOperation["TransactionComment"] = 501] = "TransactionComment";
                RetailOperation[RetailOperation["SalesPerson"] = 502] = "SalesPerson";
                RetailOperation[RetailOperation["SuspendTransaction"] = 503] = "SuspendTransaction";
                RetailOperation[RetailOperation["RecallTransaction"] = 504] = "RecallTransaction";
                RetailOperation[RetailOperation["RecallUnconcludedTransaction"] = 505] = "RecallUnconcludedTransaction";
                RetailOperation[RetailOperation["CardSwipe"] = 506] = "CardSwipe";
                RetailOperation[RetailOperation["PharmacyPrescriptionAdd"] = 507] = "PharmacyPrescriptionAdd";
                RetailOperation[RetailOperation["PharmacyPrescriptionCancel"] = 508] = "PharmacyPrescriptionCancel";
                RetailOperation[RetailOperation["PharmacyPrescriptionPaid"] = 509] = "PharmacyPrescriptionPaid";
                RetailOperation[RetailOperation["PharmacyPrescriptions"] = 510] = "PharmacyPrescriptions";
                RetailOperation[RetailOperation["IssueCreditMemo"] = 511] = "IssueCreditMemo";
                RetailOperation[RetailOperation["IssueGiftCertificate"] = 512] = "IssueGiftCertificate";
                RetailOperation[RetailOperation["DisplayTotal"] = 513] = "DisplayTotal";
                RetailOperation[RetailOperation["RecallSalesOrder"] = 515] = "RecallSalesOrder";
                RetailOperation[RetailOperation["SalesInvoice"] = 516] = "SalesInvoice";
                RetailOperation[RetailOperation["IncomeAccounts"] = 517] = "IncomeAccounts";
                RetailOperation[RetailOperation["ExpenseAccounts"] = 518] = "ExpenseAccounts";
                RetailOperation[RetailOperation["AddToGiftCard"] = 519] = "AddToGiftCard";
                RetailOperation[RetailOperation["GiftCardBalance"] = 520] = "GiftCardBalance";
                RetailOperation[RetailOperation["LoyaltyCardPointsBalance"] = 521] = "LoyaltyCardPointsBalance";
                RetailOperation[RetailOperation["CashChangerRegisterAmount"] = 550] = "CashChangerRegisterAmount";
                RetailOperation[RetailOperation["CashChangerReset"] = 551] = "CashChangerReset";
                RetailOperation[RetailOperation["CashChangerRegret"] = 552] = "CashChangerRegret";
                RetailOperation[RetailOperation["CashChangerExit"] = 553] = "CashChangerExit";
                RetailOperation[RetailOperation["CashChangerChange"] = 554] = "CashChangerChange";
                RetailOperation[RetailOperation["CashChangerLogOn"] = 555] = "CashChangerLogOn";
                RetailOperation[RetailOperation["CashChangerInit"] = 556] = "CashChangerInit";
                RetailOperation[RetailOperation["SetCustomer"] = 600] = "SetCustomer";
                RetailOperation[RetailOperation["CustomerSearch"] = 602] = "CustomerSearch";
                RetailOperation[RetailOperation["CustomerClear"] = 603] = "CustomerClear";
                RetailOperation[RetailOperation["CustomerCard"] = 604] = "CustomerCard";
                RetailOperation[RetailOperation["CustomerTransactions"] = 609] = "CustomerTransactions";
                RetailOperation[RetailOperation["CustomerTransactionsReport"] = 610] = "CustomerTransactionsReport";
                RetailOperation[RetailOperation["CustomerBalanceReport"] = 611] = "CustomerBalanceReport";
                RetailOperation[RetailOperation["CustomerAdd"] = 612] = "CustomerAdd";
                RetailOperation[RetailOperation["CustomerBarcode"] = 613] = "CustomerBarcode";
                RetailOperation[RetailOperation["EditCustomerOrder"] = 614] = "EditCustomerOrder";
                RetailOperation[RetailOperation["EditQuotation"] = 615] = "EditQuotation";
                RetailOperation[RetailOperation["CreateCustomerOrder"] = 620] = "CreateCustomerOrder";
                RetailOperation[RetailOperation["CreateQuotation"] = 621] = "CreateQuotation";
                RetailOperation[RetailOperation["Search"] = 622] = "Search";
                RetailOperation[RetailOperation["CustomerEdit"] = 623] = "CustomerEdit";
                RetailOperation[RetailOperation["LoyaltyIssueCard"] = 625] = "LoyaltyIssueCard";
                RetailOperation[RetailOperation["RecalculateCustomerOrder"] = 627] = "RecalculateCustomerOrder";
                RetailOperation[RetailOperation["ShipSelectedProducts"] = 629] = "ShipSelectedProducts";
                RetailOperation[RetailOperation["ShipAllProducts"] = 630] = "ShipAllProducts";
                RetailOperation[RetailOperation["PickupSelectedProducts"] = 631] = "PickupSelectedProducts";
                RetailOperation[RetailOperation["PickupAllProducts"] = 632] = "PickupAllProducts";
                RetailOperation[RetailOperation["SetQuotationExpirationDate"] = 633] = "SetQuotationExpirationDate";
                RetailOperation[RetailOperation["PaymentsHistory"] = 634] = "PaymentsHistory";
                RetailOperation[RetailOperation["ReturnChargesOverride"] = 635] = "ReturnChargesOverride";
                RetailOperation[RetailOperation["CreateRetailTransaction"] = 636] = "CreateRetailTransaction";
                RetailOperation[RetailOperation["SetCommissionSalesGroupOnTransaction"] = 637] = "SetCommissionSalesGroupOnTransaction";
                RetailOperation[RetailOperation["SetCommissionSalesGroupOnLine"] = 638] = "SetCommissionSalesGroupOnLine";
                RetailOperation[RetailOperation["ClearCommissionSalesGroupOnTransaction"] = 639] = "ClearCommissionSalesGroupOnTransaction";
                RetailOperation[RetailOperation["ClearCommissionSalesGroupOnLine"] = 640] = "ClearCommissionSalesGroupOnLine";
                RetailOperation[RetailOperation["CarryoutSelectedProducts"] = 641] = "CarryoutSelectedProducts";
                RetailOperation[RetailOperation["CarryoutAllProducts"] = 642] = "CarryoutAllProducts";
                RetailOperation[RetailOperation["AddCoupons"] = 643] = "AddCoupons";
                RetailOperation[RetailOperation["RemoveCoupons"] = 644] = "RemoveCoupons";
                RetailOperation[RetailOperation["LogOn"] = 700] = "LogOn";
                RetailOperation[RetailOperation["LogOff"] = 701] = "LogOff";
                RetailOperation[RetailOperation["ChangeUser"] = 702] = "ChangeUser";
                RetailOperation[RetailOperation["LockTerminal"] = 703] = "LockTerminal";
                RetailOperation[RetailOperation["LogOffForce"] = 704] = "LogOffForce";
                RetailOperation[RetailOperation["EmployeeCard"] = 705] = "EmployeeCard";
                RetailOperation[RetailOperation["EmployeeBarcode"] = 706] = "EmployeeBarcode";
                RetailOperation[RetailOperation["ActivateDevice"] = 707] = "ActivateDevice";
                RetailOperation[RetailOperation["DeactivateDevice"] = 708] = "DeactivateDevice";
                RetailOperation[RetailOperation["ChangeHardwareStation"] = 709] = "ChangeHardwareStation";
                RetailOperation[RetailOperation["PairHardwareStation"] = 710] = "PairHardwareStation";
                RetailOperation[RetailOperation["MassActivateDevice"] = 711] = "MassActivateDevice";
                RetailOperation[RetailOperation["NegativeAdjustment"] = 800] = "NegativeAdjustment";
                RetailOperation[RetailOperation["InventoryLookup"] = 801] = "InventoryLookup";
                RetailOperation[RetailOperation["StockCount"] = 802] = "StockCount";
                RetailOperation[RetailOperation["PickingAndReceiving"] = 803] = "PickingAndReceiving";
                RetailOperation[RetailOperation["ApplicationExit"] = 900] = "ApplicationExit";
                RetailOperation[RetailOperation["PrintTaxFree"] = 906] = "PrintTaxFree";
                RetailOperation[RetailOperation["PrintPreviousSlip"] = 907] = "PrintPreviousSlip";
                RetailOperation[RetailOperation["PrintPreviousInvoice"] = 908] = "PrintPreviousInvoice";
                RetailOperation[RetailOperation["UploadPrinterLogo"] = 909] = "UploadPrinterLogo";
                RetailOperation[RetailOperation["RestartComputer"] = 910] = "RestartComputer";
                RetailOperation[RetailOperation["ShutdownComputer"] = 911] = "ShutdownComputer";
                RetailOperation[RetailOperation["DesignModeEnable"] = 912] = "DesignModeEnable";
                RetailOperation[RetailOperation["DesignModeDisable"] = 913] = "DesignModeDisable";
                RetailOperation[RetailOperation["MinimizePOSWindow"] = 914] = "MinimizePOSWindow";
                RetailOperation[RetailOperation["BlankOperation"] = 915] = "BlankOperation";
                RetailOperation[RetailOperation["WindowsWorkflowOperation"] = 916] = "WindowsWorkflowOperation";
                RetailOperation[RetailOperation["DatabaseConnectionStatus"] = 917] = "DatabaseConnectionStatus";
                RetailOperation[RetailOperation["ShowBlindClosedShifts"] = 918] = "ShowBlindClosedShifts";
                RetailOperation[RetailOperation["ExtendedLogOn"] = 919] = "ExtendedLogOn";
                RetailOperation[RetailOperation["TimeRegistration"] = 920] = "TimeRegistration";
                RetailOperation[RetailOperation["ViewTimeClockEntries"] = 921] = "ViewTimeClockEntries";
                RetailOperation[RetailOperation["ViewProductDetails"] = 922] = "ViewProductDetails";
                RetailOperation[RetailOperation["ViewOrderFulfillmentLines"] = 928] = "ViewOrderFulfillmentLines";
                RetailOperation[RetailOperation["OpenDrawer"] = 1000] = "OpenDrawer";
                RetailOperation[RetailOperation["ViewReport"] = 1003] = "ViewReport";
                RetailOperation[RetailOperation["TenderDeclaration"] = 1052] = "TenderDeclaration";
                RetailOperation[RetailOperation["BlindCloseShift"] = 1053] = "BlindCloseShift";
                RetailOperation[RetailOperation["SuspendShift"] = 1054] = "SuspendShift";
                RetailOperation[RetailOperation["CloseShift"] = 1055] = "CloseShift";
                RetailOperation[RetailOperation["PrintX"] = 1056] = "PrintX";
                RetailOperation[RetailOperation["PrintZ"] = 1057] = "PrintZ";
                RetailOperation[RetailOperation["CustomerAccountDeposit"] = 1100] = "CustomerAccountDeposit";
                RetailOperation[RetailOperation["DeclareStartAmount"] = 1200] = "DeclareStartAmount";
                RetailOperation[RetailOperation["FloatEntry"] = 1201] = "FloatEntry";
                RetailOperation[RetailOperation["TenderRemoval"] = 1210] = "TenderRemoval";
                RetailOperation[RetailOperation["SafeDrop"] = 1211] = "SafeDrop";
                RetailOperation[RetailOperation["BankDrop"] = 1212] = "BankDrop";
                RetailOperation[RetailOperation["ShippingAddressSearch"] = 1213] = "ShippingAddressSearch";
                RetailOperation[RetailOperation["ShippingAddressAdd"] = 1214] = "ShippingAddressAdd";
                RetailOperation[RetailOperation["ChangePassword"] = 1215] = "ChangePassword";
                RetailOperation[RetailOperation["ResetPassword"] = 1216] = "ResetPassword";
                RetailOperation[RetailOperation["KitDisassembly"] = 1217] = "KitDisassembly";
                RetailOperation[RetailOperation["ForceUnlockPeripheral"] = 1218] = "ForceUnlockPeripheral";
                RetailOperation[RetailOperation["Invalid"] = 65535] = "Invalid";
            })(RetailOperation = Entities.RetailOperation || (Entities.RetailOperation = {}));
            var ReasonCodeInputRequiredType;
            (function (ReasonCodeInputRequiredType) {
                ReasonCodeInputRequiredType[ReasonCodeInputRequiredType["None"] = 0] = "None";
                ReasonCodeInputRequiredType[ReasonCodeInputRequiredType["Always"] = 1] = "Always";
                ReasonCodeInputRequiredType[ReasonCodeInputRequiredType["Positive"] = 2] = "Positive";
                ReasonCodeInputRequiredType[ReasonCodeInputRequiredType["Negative"] = 3] = "Negative";
            })(ReasonCodeInputRequiredType = Entities.ReasonCodeInputRequiredType || (Entities.ReasonCodeInputRequiredType = {}));
            var RecordingValueType;
            (function (RecordingValueType) {
                RecordingValueType[RecordingValueType["Preferred"] = 0] = "Preferred";
                RecordingValueType[RecordingValueType["Example"] = 1] = "Example";
            })(RecordingValueType = Entities.RecordingValueType || (Entities.RecordingValueType = {}));
            var UserActionType;
            (function (UserActionType) {
                UserActionType[UserActionType["Input"] = 1] = "Input";
                UserActionType[UserActionType["Output"] = 16] = "Output";
                UserActionType[UserActionType["Validation"] = 256] = "Validation";
            })(UserActionType = Entities.UserActionType || (Entities.UserActionType = {}));
            var ArtifactType;
            (function (ArtifactType) {
                ArtifactType[ArtifactType["None"] = 0] = "None";
                ArtifactType[ArtifactType["Ax7Bpm"] = 1] = "Ax7Bpm";
                ArtifactType[ArtifactType["Visio"] = 2] = "Visio";
                ArtifactType[ArtifactType["TaskGuide"] = 3] = "TaskGuide";
                ArtifactType[ArtifactType["Ax6Bpm"] = 4] = "Ax6Bpm";
                ArtifactType[ArtifactType["TaskGuideResources"] = 5] = "TaskGuideResources";
                ArtifactType[ArtifactType["TaskXml"] = 6] = "TaskXml";
                ArtifactType[ArtifactType["VideoWma"] = 7] = "VideoWma";
                ArtifactType[ArtifactType["ProcessXml"] = 8] = "ProcessXml";
                ArtifactType[ArtifactType["Trace"] = 9] = "Trace";
                ArtifactType[ArtifactType["RapidStartXml"] = 10] = "RapidStartXml";
                ArtifactType[ArtifactType["UserDrawing"] = 100] = "UserDrawing";
            })(ArtifactType = Entities.ArtifactType || (Entities.ArtifactType = {}));
            var FrameworkAccess;
            (function (FrameworkAccess) {
                FrameworkAccess[FrameworkAccess["None"] = 0] = "None";
                FrameworkAccess[FrameworkAccess["Global"] = 1] = "Global";
                FrameworkAccess[FrameworkAccess["Corporate"] = 2] = "Corporate";
                FrameworkAccess[FrameworkAccess["Private"] = 3] = "Private";
                FrameworkAccess[FrameworkAccess["BoxPackage"] = 4] = "BoxPackage";
            })(FrameworkAccess = Entities.FrameworkAccess || (Entities.FrameworkAccess = {}));
            var MetadataControl;
            (function (MetadataControl) {
                MetadataControl[MetadataControl["None"] = 0] = "None";
                MetadataControl[MetadataControl["SingleValue"] = 1] = "SingleValue";
                MetadataControl[MetadataControl["MultiValue"] = 2] = "MultiValue";
                MetadataControl[MetadataControl["Tags"] = 3] = "Tags";
                MetadataControl[MetadataControl["Links"] = 4] = "Links";
                MetadataControl[MetadataControl["ComboBox"] = 5] = "ComboBox";
                MetadataControl[MetadataControl["MultiSelect"] = 6] = "MultiSelect";
            })(MetadataControl = Entities.MetadataControl || (Entities.MetadataControl = {}));
            var CartType;
            (function (CartType) {
                CartType[CartType["None"] = 0] = "None";
                CartType[CartType["Shopping"] = 1] = "Shopping";
                CartType[CartType["Checkout"] = 2] = "Checkout";
                CartType[CartType["CustomerOrder"] = 3] = "CustomerOrder";
                CartType[CartType["IncomeExpense"] = 4] = "IncomeExpense";
                CartType[CartType["AccountDeposit"] = 5] = "AccountDeposit";
            })(CartType = Entities.CartType || (Entities.CartType = {}));
            var CustomerOrderMode;
            (function (CustomerOrderMode) {
                CustomerOrderMode[CustomerOrderMode["None"] = 0] = "None";
                CustomerOrderMode[CustomerOrderMode["CustomerOrderCreateOrEdit"] = 1] = "CustomerOrderCreateOrEdit";
                CustomerOrderMode[CustomerOrderMode["OrderRecalled"] = 2] = "OrderRecalled";
                CustomerOrderMode[CustomerOrderMode["Pickup"] = 3] = "Pickup";
                CustomerOrderMode[CustomerOrderMode["Return"] = 4] = "Return";
                CustomerOrderMode[CustomerOrderMode["Cancellation"] = 5] = "Cancellation";
                CustomerOrderMode[CustomerOrderMode["QuoteCreateOrEdit"] = 6] = "QuoteCreateOrEdit";
            })(CustomerOrderMode = Entities.CustomerOrderMode || (Entities.CustomerOrderMode = {}));
            var CartStatus;
            (function (CartStatus) {
                CartStatus[CartStatus["None"] = 0] = "None";
                CartStatus[CartStatus["Created"] = 1] = "Created";
                CartStatus[CartStatus["Suspended"] = 2] = "Suspended";
                CartStatus[CartStatus["Voided"] = 3] = "Voided";
            })(CartStatus = Entities.CartStatus || (Entities.CartStatus = {}));
            var CustomerType;
            (function (CustomerType) {
                CustomerType[CustomerType["None"] = 0] = "None";
                CustomerType[CustomerType["Person"] = 1] = "Person";
                CustomerType[CustomerType["Organization"] = 2] = "Organization";
            })(CustomerType = Entities.CustomerType || (Entities.CustomerType = {}));
            var DocumentStatus;
            (function (DocumentStatus) {
                DocumentStatus[DocumentStatus["None"] = 0] = "None";
                DocumentStatus[DocumentStatus["Quotation"] = 1] = "Quotation";
                DocumentStatus[DocumentStatus["PurchaseOrder"] = 2] = "PurchaseOrder";
                DocumentStatus[DocumentStatus["Confirmation"] = 3] = "Confirmation";
                DocumentStatus[DocumentStatus["PickingList"] = 4] = "PickingList";
                DocumentStatus[DocumentStatus["PackingSlip"] = 5] = "PackingSlip";
                DocumentStatus[DocumentStatus["ReceiptsList"] = 6] = "ReceiptsList";
                DocumentStatus[DocumentStatus["Invoice"] = 7] = "Invoice";
                DocumentStatus[DocumentStatus["ApproveJournal"] = 8] = "ApproveJournal";
                DocumentStatus[DocumentStatus["ProjectInvoice"] = 9] = "ProjectInvoice";
                DocumentStatus[DocumentStatus["ProjectPackingSlip"] = 10] = "ProjectPackingSlip";
                DocumentStatus[DocumentStatus["CRMQuotation"] = 11] = "CRMQuotation";
                DocumentStatus[DocumentStatus["Lost"] = 12] = "Lost";
                DocumentStatus[DocumentStatus["Canceled"] = 13] = "Canceled";
                DocumentStatus[DocumentStatus["FreeTextInvoice"] = 14] = "FreeTextInvoice";
                DocumentStatus[DocumentStatus["RFQ"] = 15] = "RFQ";
                DocumentStatus[DocumentStatus["RFQAccept"] = 16] = "RFQAccept";
                DocumentStatus[DocumentStatus["RFQReject"] = 17] = "RFQReject";
                DocumentStatus[DocumentStatus["PurchaseRequest"] = 18] = "PurchaseRequest";
                DocumentStatus[DocumentStatus["RFQResend"] = 19] = "RFQResend";
            })(DocumentStatus = Entities.DocumentStatus || (Entities.DocumentStatus = {}));
            var CustomerOrderType;
            (function (CustomerOrderType) {
                CustomerOrderType[CustomerOrderType["SalesOrder"] = 0] = "SalesOrder";
                CustomerOrderType[CustomerOrderType["Quote"] = 1] = "Quote";
            })(CustomerOrderType = Entities.CustomerOrderType || (Entities.CustomerOrderType = {}));
            var LineDiscountCalculationType;
            (function (LineDiscountCalculationType) {
                LineDiscountCalculationType[LineDiscountCalculationType["Line"] = 0] = "Line";
                LineDiscountCalculationType[LineDiscountCalculationType["Multiline"] = 1] = "Multiline";
                LineDiscountCalculationType[LineDiscountCalculationType["MaxLineMultiline"] = 2] = "MaxLineMultiline";
                LineDiscountCalculationType[LineDiscountCalculationType["MinLineMultiline"] = 3] = "MinLineMultiline";
                LineDiscountCalculationType[LineDiscountCalculationType["LinePlusMultiline"] = 4] = "LinePlusMultiline";
                LineDiscountCalculationType[LineDiscountCalculationType["LineMultiplyMultiline"] = 5] = "LineMultiplyMultiline";
            })(LineDiscountCalculationType = Entities.LineDiscountCalculationType || (Entities.LineDiscountCalculationType = {}));
            var TaxCalculationType;
            (function (TaxCalculationType) {
                TaxCalculationType[TaxCalculationType["Regular"] = 0] = "Regular";
                TaxCalculationType[TaxCalculationType["GTE"] = 1] = "GTE";
            })(TaxCalculationType = Entities.TaxCalculationType || (Entities.TaxCalculationType = {}));
            var ShiftStatus;
            (function (ShiftStatus) {
                ShiftStatus[ShiftStatus["None"] = 0] = "None";
                ShiftStatus[ShiftStatus["Open"] = 1] = "Open";
                ShiftStatus[ShiftStatus["Closed"] = 2] = "Closed";
                ShiftStatus[ShiftStatus["BlindClosed"] = 3] = "BlindClosed";
                ShiftStatus[ShiftStatus["Suspended"] = 4] = "Suspended";
            })(ShiftStatus = Entities.ShiftStatus || (Entities.ShiftStatus = {}));
            var CommerceListType;
            (function (CommerceListType) {
                CommerceListType[CommerceListType["None"] = 0] = "None";
                CommerceListType[CommerceListType["WishList"] = 1] = "WishList";
            })(CommerceListType = Entities.CommerceListType || (Entities.CommerceListType = {}));
            var PurchaseTransferOrderType;
            (function (PurchaseTransferOrderType) {
                PurchaseTransferOrderType[PurchaseTransferOrderType["Unknown"] = 0] = "Unknown";
                PurchaseTransferOrderType[PurchaseTransferOrderType["PurchaseOrder"] = 1] = "PurchaseOrder";
                PurchaseTransferOrderType[PurchaseTransferOrderType["TransferIn"] = 2] = "TransferIn";
                PurchaseTransferOrderType[PurchaseTransferOrderType["TransferOut"] = 3] = "TransferOut";
                PurchaseTransferOrderType[PurchaseTransferOrderType["TransferOrder"] = 4] = "TransferOrder";
                PurchaseTransferOrderType[PurchaseTransferOrderType["PickingList"] = 5] = "PickingList";
            })(PurchaseTransferOrderType = Entities.PurchaseTransferOrderType || (Entities.PurchaseTransferOrderType = {}));
            var DownloadSessionStatus;
            (function (DownloadSessionStatus) {
                DownloadSessionStatus[DownloadSessionStatus["Started"] = 0] = "Started";
                DownloadSessionStatus[DownloadSessionStatus["Available"] = 1] = "Available";
                DownloadSessionStatus[DownloadSessionStatus["Requested"] = 2] = "Requested";
                DownloadSessionStatus[DownloadSessionStatus["Downloaded"] = 3] = "Downloaded";
                DownloadSessionStatus[DownloadSessionStatus["Applied"] = 4] = "Applied";
                DownloadSessionStatus[DownloadSessionStatus["Canceled"] = 5] = "Canceled";
                DownloadSessionStatus[DownloadSessionStatus["CreateFailed"] = 6] = "CreateFailed";
                DownloadSessionStatus[DownloadSessionStatus["DownloadFailed"] = 7] = "DownloadFailed";
                DownloadSessionStatus[DownloadSessionStatus["ApplyFailed"] = 8] = "ApplyFailed";
            })(DownloadSessionStatus = Entities.DownloadSessionStatus || (Entities.DownloadSessionStatus = {}));
            var HardwareStationType;
            (function (HardwareStationType) {
                HardwareStationType[HardwareStationType["None"] = 0] = "None";
                HardwareStationType[HardwareStationType["Shared"] = 1] = "Shared";
                HardwareStationType[HardwareStationType["Dedicated"] = 2] = "Dedicated";
            })(HardwareStationType = Entities.HardwareStationType || (Entities.HardwareStationType = {}));
            var AuditEventUploadType;
            (function (AuditEventUploadType) {
                AuditEventUploadType[AuditEventUploadType["Async"] = 0] = "Async";
                AuditEventUploadType[AuditEventUploadType["RealTime"] = 1] = "RealTime";
            })(AuditEventUploadType = Entities.AuditEventUploadType || (Entities.AuditEventUploadType = {}));
            var AuditEventType;
            (function (AuditEventType) {
                AuditEventType[AuditEventType["Unknown"] = 0] = "Unknown";
                AuditEventType[AuditEventType["UserLogOn"] = 1] = "UserLogOn";
                AuditEventType[AuditEventType["UserLogOff"] = 2] = "UserLogOff";
                AuditEventType[AuditEventType["ManagerOverride"] = 3] = "ManagerOverride";
                AuditEventType[AuditEventType["ItemVoid"] = 4] = "ItemVoid";
                AuditEventType[AuditEventType["TransactionVoid"] = 5] = "TransactionVoid";
                AuditEventType[AuditEventType["PrintReceiptCopy"] = 6] = "PrintReceiptCopy";
                AuditEventType[AuditEventType["PriceCheck"] = 7] = "PriceCheck";
                AuditEventType[AuditEventType["TaxOverride"] = 8] = "TaxOverride";
                AuditEventType[AuditEventType["QuantityCorrection"] = 9] = "QuantityCorrection";
                AuditEventType[AuditEventType["PurgeTransactionsData"] = 10] = "PurgeTransactionsData";
            })(AuditEventType = Entities.AuditEventType || (Entities.AuditEventType = {}));
            var AuditLogTraceLevel;
            (function (AuditLogTraceLevel) {
                AuditLogTraceLevel[AuditLogTraceLevel["Trace"] = 0] = "Trace";
                AuditLogTraceLevel[AuditLogTraceLevel["Debug"] = 1] = "Debug";
                AuditLogTraceLevel[AuditLogTraceLevel["Error"] = 2] = "Error";
            })(AuditLogTraceLevel = Entities.AuditLogTraceLevel || (Entities.AuditLogTraceLevel = {}));
            var AttachedServiceStatus;
            (function (AttachedServiceStatus) {
                AttachedServiceStatus[AttachedServiceStatus["None"] = 0] = "None";
                AttachedServiceStatus[AttachedServiceStatus["Disabled"] = 1] = "Disabled";
                AttachedServiceStatus[AttachedServiceStatus["InProgress"] = 2] = "InProgress";
                AttachedServiceStatus[AttachedServiceStatus["Enabled"] = 3] = "Enabled";
                AttachedServiceStatus[AttachedServiceStatus["Submitted"] = 4] = "Submitted";
            })(AttachedServiceStatus = Entities.AttachedServiceStatus || (Entities.AttachedServiceStatus = {}));
            var CommunicationErrors;
            (function (CommunicationErrors) {
                CommunicationErrors[CommunicationErrors["None"] = 0] = "None";
                CommunicationErrors[CommunicationErrors["Microsoft_Dynamics_Commerce_Runtime_HeadquarterCommunicationFailure"] = 1] = "Microsoft_Dynamics_Commerce_Runtime_HeadquarterCommunicationFailure";
                CommunicationErrors[CommunicationErrors["Microsoft_Dynamics_Commerce_Runtime_HeadquarterResponseParsingError"] = 2] = "Microsoft_Dynamics_Commerce_Runtime_HeadquarterResponseParsingError";
                CommunicationErrors[CommunicationErrors["Microsoft_Dynamics_Commerce_Runtime_AggregateCommunicationError"] = 3] = "Microsoft_Dynamics_Commerce_Runtime_AggregateCommunicationError";
                CommunicationErrors[CommunicationErrors["Microsoft_Dynamics_Commerce_Runtime_ExternalProviderError"] = 4] = "Microsoft_Dynamics_Commerce_Runtime_ExternalProviderError";
                CommunicationErrors[CommunicationErrors["Microsoft_Dynamics_Commerce_Runtime_HeadquarterTransactionServiceMethodCallFailure"] = 5] = "Microsoft_Dynamics_Commerce_Runtime_HeadquarterTransactionServiceMethodCallFailure";
                CommunicationErrors[CommunicationErrors["Microsoft_Dynamics_Commerce_Runtime_TransactionServiceTimeOut"] = 6] = "Microsoft_Dynamics_Commerce_Runtime_TransactionServiceTimeOut";
                CommunicationErrors[CommunicationErrors["Microsoft_Dynamics_Commerce_Runtime_TransactionServiceException"] = 7] = "Microsoft_Dynamics_Commerce_Runtime_TransactionServiceException";
                CommunicationErrors[CommunicationErrors["Microsoft_Dynamics_Commerce_Runtime_TransactionServiceAuthenticationFailedFault"] = 8] = "Microsoft_Dynamics_Commerce_Runtime_TransactionServiceAuthenticationFailedFault";
                CommunicationErrors[CommunicationErrors["Microsoft_Dynamics_Commerce_Runtime_TransactionServiceForbiddenFault"] = 9] = "Microsoft_Dynamics_Commerce_Runtime_TransactionServiceForbiddenFault";
                CommunicationErrors[CommunicationErrors["Microsoft_Dynamics_Commerce_Runtime_TransactionServiceSenderFault"] = 10] = "Microsoft_Dynamics_Commerce_Runtime_TransactionServiceSenderFault";
                CommunicationErrors[CommunicationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidS2SClientId"] = 11] = "Microsoft_Dynamics_Commerce_Runtime_InvalidS2SClientId";
                CommunicationErrors[CommunicationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidS2SSecret"] = 12] = "Microsoft_Dynamics_Commerce_Runtime_InvalidS2SSecret";
                CommunicationErrors[CommunicationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidS2STenant"] = 13] = "Microsoft_Dynamics_Commerce_Runtime_InvalidS2STenant";
                CommunicationErrors[CommunicationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidS2SApplicationName"] = 14] = "Microsoft_Dynamics_Commerce_Runtime_InvalidS2SApplicationName";
            })(CommunicationErrors = Entities.CommunicationErrors || (Entities.CommunicationErrors = {}));
            var ConfigurationErrors;
            (function (ConfigurationErrors) {
                ConfigurationErrors[ConfigurationErrors["None"] = 0] = "None";
                ConfigurationErrors[ConfigurationErrors["Microsoft_Dynamics_Commerce_Runtime_ConfigurationSettingNotFound"] = 1] = "Microsoft_Dynamics_Commerce_Runtime_ConfigurationSettingNotFound";
                ConfigurationErrors[ConfigurationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidConfigurationKeyFormat"] = 2] = "Microsoft_Dynamics_Commerce_Runtime_InvalidConfigurationKeyFormat";
                ConfigurationErrors[ConfigurationErrors["Microsoft_Dynamics_Commerce_Runtime_ApplicationCompositionFailed"] = 3] = "Microsoft_Dynamics_Commerce_Runtime_ApplicationCompositionFailed";
                ConfigurationErrors[ConfigurationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidChannelConfiguration"] = 4] = "Microsoft_Dynamics_Commerce_Runtime_InvalidChannelConfiguration";
                ConfigurationErrors[ConfigurationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidPipelineConfiguration"] = 5] = "Microsoft_Dynamics_Commerce_Runtime_InvalidPipelineConfiguration";
                ConfigurationErrors[ConfigurationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidProviderConfiguration"] = 6] = "Microsoft_Dynamics_Commerce_Runtime_InvalidProviderConfiguration";
                ConfigurationErrors[ConfigurationErrors["Microsoft_Dynamics_Commerce_Runtime_UnableToFindDeliveryOptions"] = 7] = "Microsoft_Dynamics_Commerce_Runtime_UnableToFindDeliveryOptions";
                ConfigurationErrors[ConfigurationErrors["Microsoft_Dynamics_Commerce_Runtime_UnableToFindDeliveryPreferences"] = 8] = "Microsoft_Dynamics_Commerce_Runtime_UnableToFindDeliveryPreferences";
                ConfigurationErrors[ConfigurationErrors["Microsoft_Dynamics_Commerce_Runtime_UnableToFindConfigForTenderType"] = 9] = "Microsoft_Dynamics_Commerce_Runtime_UnableToFindConfigForTenderType";
                ConfigurationErrors[ConfigurationErrors["Microsoft_Dynamics_Commerce_Runtime_ConnectionIsNotOverridden"] = 10] = "Microsoft_Dynamics_Commerce_Runtime_ConnectionIsNotOverridden";
                ConfigurationErrors[ConfigurationErrors["Microsoft_Dynamics_Commerce_Runtime_PaymentConnectorNotFound"] = 11] = "Microsoft_Dynamics_Commerce_Runtime_PaymentConnectorNotFound";
                ConfigurationErrors[ConfigurationErrors["Microsoft_Dynamics_Commerce_Runtime_DeviceConfigurationNotFound"] = 12] = "Microsoft_Dynamics_Commerce_Runtime_DeviceConfigurationNotFound";
                ConfigurationErrors[ConfigurationErrors["Microsoft_Dynamics_Commerce_Runtime_HardwareProfileNotFound"] = 13] = "Microsoft_Dynamics_Commerce_Runtime_HardwareProfileNotFound";
                ConfigurationErrors[ConfigurationErrors["Microsoft_Dynamics_Commerce_Runtime_LayoutNotFound"] = 14] = "Microsoft_Dynamics_Commerce_Runtime_LayoutNotFound";
                ConfigurationErrors[ConfigurationErrors["Microsoft_Dynamics_Commerce_Runtime_VersionedEdmResourceFileNotFound"] = 15] = "Microsoft_Dynamics_Commerce_Runtime_VersionedEdmResourceFileNotFound";
                ConfigurationErrors[ConfigurationErrors["Microsoft_Dynamics_Commerce_Runtime_RetailServerConfigurationNotFound"] = 16] = "Microsoft_Dynamics_Commerce_Runtime_RetailServerConfigurationNotFound";
                ConfigurationErrors[ConfigurationErrors["Microsoft_Dynamics_Commerce_Runtime_RetailServerCertificateNotFound"] = 17] = "Microsoft_Dynamics_Commerce_Runtime_RetailServerCertificateNotFound";
                ConfigurationErrors[ConfigurationErrors["Microsoft_Dynamics_Commerce_Runtime_ActivatedDeviceMissingTokenIssueDatetime"] = 18] = "Microsoft_Dynamics_Commerce_Runtime_ActivatedDeviceMissingTokenIssueDatetime";
                ConfigurationErrors[ConfigurationErrors["Microsoft_Dynamics_Commerce_Runtime_LCSLibrariesNotConfigured"] = 19] = "Microsoft_Dynamics_Commerce_Runtime_LCSLibrariesNotConfigured";
                ConfigurationErrors[ConfigurationErrors["Microsoft_Dynamics_Commerce_Runtime_UnknownRequestResponsePair"] = 20] = "Microsoft_Dynamics_Commerce_Runtime_UnknownRequestResponsePair";
                ConfigurationErrors[ConfigurationErrors["Microsoft_Dynamics_Commerce_Runtime_ProductRecommendationsDisabled"] = 21] = "Microsoft_Dynamics_Commerce_Runtime_ProductRecommendationsDisabled";
                ConfigurationErrors[ConfigurationErrors["Microsoft_Dynamics_Commerce_Runtime_UnableToRetrieveRecommendationServiceCredentials"] = 22] = "Microsoft_Dynamics_Commerce_Runtime_UnableToRetrieveRecommendationServiceCredentials";
                ConfigurationErrors[ConfigurationErrors["Microsoft_Dynamics_Commerce_Runtime_CommerceIssuerNotFound"] = 23] = "Microsoft_Dynamics_Commerce_Runtime_CommerceIssuerNotFound";
            })(ConfigurationErrors = Entities.ConfigurationErrors || (Entities.ConfigurationErrors = {}));
            var DataValidationErrors;
            (function (DataValidationErrors) {
                DataValidationErrors[DataValidationErrors["None"] = 0] = "None";
                DataValidationErrors[DataValidationErrors["RegexAttribute_ValidationError"] = 1] = "RegexAttribute_ValidationError";
                DataValidationErrors[DataValidationErrors["RequiredAttribute_ValidationError"] = 2] = "RequiredAttribute_ValidationError";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_AuthenticationGrantTypeNotSupported"] = 3] = "Microsoft_Dynamics_Commerce_Runtime_AuthenticationGrantTypeNotSupported";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_BlockedLoyaltyCard"] = 4] = "Microsoft_Dynamics_Commerce_Runtime_BlockedLoyaltyCard";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidLoyaltyCardNumber"] = 5] = "Microsoft_Dynamics_Commerce_Runtime_InvalidLoyaltyCardNumber";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ProductMasterPageRequired"] = 6] = "Microsoft_Dynamics_Commerce_Runtime_ProductMasterPageRequired";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_RequiredValueNotFound"] = 7] = "Microsoft_Dynamics_Commerce_Runtime_RequiredValueNotFound";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_SalesLineNotAllowed"] = 8] = "Microsoft_Dynamics_Commerce_Runtime_SalesLineNotAllowed";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_RemoteProductsNotSupportedWithCurrentTransactionType"] = 9] = "Microsoft_Dynamics_Commerce_Runtime_RemoteProductsNotSupportedWithCurrentTransactionType";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CustomerAccountIsBlocked"] = 10] = "Microsoft_Dynamics_Commerce_Runtime_CustomerAccountIsBlocked";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CustomerInvoiceAccountIsBlocked"] = 11] = "Microsoft_Dynamics_Commerce_Runtime_CustomerInvoiceAccountIsBlocked";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ProductIsNotActive"] = 12] = "Microsoft_Dynamics_Commerce_Runtime_ProductIsNotActive";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ProductIsBlocked"] = 13] = "Microsoft_Dynamics_Commerce_Runtime_ProductIsBlocked";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ValueOutOfRange"] = 14] = "Microsoft_Dynamics_Commerce_Runtime_ValueOutOfRange";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ObjectNotFound"] = 15] = "Microsoft_Dynamics_Commerce_Runtime_ObjectNotFound";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_DuplicateObject"] = 16] = "Microsoft_Dynamics_Commerce_Runtime_DuplicateObject";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidFormat"] = 17] = "Microsoft_Dynamics_Commerce_Runtime_InvalidFormat";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_MissingStockCountTransactions"] = 18] = "Microsoft_Dynamics_Commerce_Runtime_MissingStockCountTransactions";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_MissingParameter"] = 19] = "Microsoft_Dynamics_Commerce_Runtime_MissingParameter";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidProductDimensionCombinations"] = 20] = "Microsoft_Dynamics_Commerce_Runtime_InvalidProductDimensionCombinations";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_EmployeeDiscountExceeded"] = 21] = "Microsoft_Dynamics_Commerce_Runtime_EmployeeDiscountExceeded";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_EmployeeDetailsNotFound"] = 22] = "Microsoft_Dynamics_Commerce_Runtime_EmployeeDetailsNotFound";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_BarcodeNotFound"] = 23] = "Microsoft_Dynamics_Commerce_Runtime_BarcodeNotFound";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CustomerNotFound"] = 24] = "Microsoft_Dynamics_Commerce_Runtime_CustomerNotFound";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ExistingCustomerAlreadyMappedToExternalIdentity"] = 25] = "Microsoft_Dynamics_Commerce_Runtime_ExistingCustomerAlreadyMappedToExternalIdentity";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_UnsupportedLanguage"] = 26] = "Microsoft_Dynamics_Commerce_Runtime_UnsupportedLanguage";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_UnknownRequest"] = 27] = "Microsoft_Dynamics_Commerce_Runtime_UnknownRequest";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_UnSupportedType"] = 28] = "Microsoft_Dynamics_Commerce_Runtime_UnSupportedType";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_AggregateValidationError"] = 29] = "Microsoft_Dynamics_Commerce_Runtime_AggregateValidationError";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_IdMismatch"] = 30] = "Microsoft_Dynamics_Commerce_Runtime_IdMismatch";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidRequest"] = 31] = "Microsoft_Dynamics_Commerce_Runtime_InvalidRequest";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_MultipleEmployeeLineDiscountsNotAllowed"] = 32] = "Microsoft_Dynamics_Commerce_Runtime_MultipleEmployeeLineDiscountsNotAllowed";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_MultipleEmployeeTotalDiscountsNotAllowed"] = 33] = "Microsoft_Dynamics_Commerce_Runtime_MultipleEmployeeTotalDiscountsNotAllowed";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_IncomeExpenseAccountsInSameCart"] = 34] = "Microsoft_Dynamics_Commerce_Runtime_IncomeExpenseAccountsInSameCart";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_IncomeExpenseCartDoesNotAllowDiscounts"] = 35] = "Microsoft_Dynamics_Commerce_Runtime_IncomeExpenseCartDoesNotAllowDiscounts";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_IncomeExpenseCartDoesNotAllowSalesLine"] = 36] = "Microsoft_Dynamics_Commerce_Runtime_IncomeExpenseCartDoesNotAllowSalesLine";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_IncomeExpenseCartDoesNotAllowCustomer"] = 37] = "Microsoft_Dynamics_Commerce_Runtime_IncomeExpenseCartDoesNotAllowCustomer";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_IncomeExpenseCartDoesNotAllowGiftCardLine"] = 38] = "Microsoft_Dynamics_Commerce_Runtime_IncomeExpenseCartDoesNotAllowGiftCardLine";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_IncomeExpenseLineDoesNotAllowSettingTransactionStatus"] = 39] = "Microsoft_Dynamics_Commerce_Runtime_IncomeExpenseLineDoesNotAllowSettingTransactionStatus";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_IncomeExpenseCartDoesNotAllowAffiliation"] = 40] = "Microsoft_Dynamics_Commerce_Runtime_IncomeExpenseCartDoesNotAllowAffiliation";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InsufficientQuantityAvailable"] = 41] = "Microsoft_Dynamics_Commerce_Runtime_InsufficientQuantityAvailable";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidUnitOfMeasure"] = 42] = "Microsoft_Dynamics_Commerce_Runtime_InvalidUnitOfMeasure";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_UnitOfMeasureConversionNotFound"] = 43] = "Microsoft_Dynamics_Commerce_Runtime_UnitOfMeasureConversionNotFound";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidDeliveryMode"] = 44] = "Microsoft_Dynamics_Commerce_Runtime_InvalidDeliveryMode";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_DeliveryModeMissing"] = 45] = "Microsoft_Dynamics_Commerce_Runtime_DeliveryModeMissing";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidEmailAddress"] = 46] = "Microsoft_Dynamics_Commerce_Runtime_InvalidEmailAddress";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidDeliveryPreferenceType"] = 47] = "Microsoft_Dynamics_Commerce_Runtime_InvalidDeliveryPreferenceType";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidShippingAddress"] = 48] = "Microsoft_Dynamics_Commerce_Runtime_InvalidShippingAddress";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidCountryRegion"] = 49] = "Microsoft_Dynamics_Commerce_Runtime_InvalidCountryRegion";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidStateProvince"] = 50] = "Microsoft_Dynamics_Commerce_Runtime_InvalidStateProvince";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidCounty"] = 51] = "Microsoft_Dynamics_Commerce_Runtime_InvalidCounty";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidCity"] = 52] = "Microsoft_Dynamics_Commerce_Runtime_InvalidCity";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidDistrict"] = 53] = "Microsoft_Dynamics_Commerce_Runtime_InvalidDistrict";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidZipPostalCode"] = 54] = "Microsoft_Dynamics_Commerce_Runtime_InvalidZipPostalCode";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidAddress"] = 55] = "Microsoft_Dynamics_Commerce_Runtime_InvalidAddress";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidShippingDate"] = 56] = "Microsoft_Dynamics_Commerce_Runtime_InvalidShippingDate";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_DiscountAmountInvalidated"] = 57] = "Microsoft_Dynamics_Commerce_Runtime_DiscountAmountInvalidated";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidPriceEncountered"] = 58] = "Microsoft_Dynamics_Commerce_Runtime_InvalidPriceEncountered";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ItemDiscontinuedFromChannel"] = 59] = "Microsoft_Dynamics_Commerce_Runtime_ItemDiscontinuedFromChannel";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_DiscontinuedProductsRemovedFromCart"] = 60] = "Microsoft_Dynamics_Commerce_Runtime_DiscontinuedProductsRemovedFromCart";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_GrossWeightForItemNotFound"] = 61] = "Microsoft_Dynamics_Commerce_Runtime_GrossWeightForItemNotFound";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ListingIdNotFound"] = 62] = "Microsoft_Dynamics_Commerce_Runtime_ListingIdNotFound";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_RequiredReasonCodesMissing"] = 63] = "Microsoft_Dynamics_Commerce_Runtime_RequiredReasonCodesMissing";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CartNotActive"] = 64] = "Microsoft_Dynamics_Commerce_Runtime_CartNotActive";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidStatus"] = 65] = "Microsoft_Dynamics_Commerce_Runtime_InvalidStatus";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_VoidTransactionContainsTenderedLines"] = 66] = "Microsoft_Dynamics_Commerce_Runtime_VoidTransactionContainsTenderedLines";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidCustomerOrderModeForVoidProducts"] = 67] = "Microsoft_Dynamics_Commerce_Runtime_InvalidCustomerOrderModeForVoidProducts";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidReceiptTemplate"] = 68] = "Microsoft_Dynamics_Commerce_Runtime_InvalidReceiptTemplate";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidReceiptItem"] = 69] = "Microsoft_Dynamics_Commerce_Runtime_InvalidReceiptItem";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ItemIdBarcodeMissing"] = 70] = "Microsoft_Dynamics_Commerce_Runtime_ItemIdBarcodeMissing";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_MultipleItemsForItemId"] = 71] = "Microsoft_Dynamics_Commerce_Runtime_MultipleItemsForItemId";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidCustomerOrderModeChange"] = 72] = "Microsoft_Dynamics_Commerce_Runtime_InvalidCustomerOrderModeChange";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidCustomerOrderModeForReturnTransaction"] = 73] = "Microsoft_Dynamics_Commerce_Runtime_InvalidCustomerOrderModeForReturnTransaction";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidCustomerOrderModeForAddCartLine"] = 74] = "Microsoft_Dynamics_Commerce_Runtime_InvalidCustomerOrderModeForAddCartLine";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CannotChangeCustomerIdWhenEditingCustomerOrder"] = 75] = "Microsoft_Dynamics_Commerce_Runtime_CannotChangeCustomerIdWhenEditingCustomerOrder";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_QuoteMustNotHaveAnyPayment"] = 76] = "Microsoft_Dynamics_Commerce_Runtime_QuoteMustNotHaveAnyPayment";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_QuoteMustHaveValidQuotationExpiryDate"] = 77] = "Microsoft_Dynamics_Commerce_Runtime_QuoteMustHaveValidQuotationExpiryDate";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_QuoteMustNotHaveDepositOverride"] = 78] = "Microsoft_Dynamics_Commerce_Runtime_QuoteMustNotHaveDepositOverride";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_DepositMustBeGreaterThanZero"] = 79] = "Microsoft_Dynamics_Commerce_Runtime_DepositMustBeGreaterThanZero";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_DepositOverrideMustNotBeGreaterThanTotalAmount"] = 80] = "Microsoft_Dynamics_Commerce_Runtime_DepositOverrideMustNotBeGreaterThanTotalAmount";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidPickupDepositOverrideAmount"] = 81] = "Microsoft_Dynamics_Commerce_Runtime_InvalidPickupDepositOverrideAmount";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_OrderWasNotCreatedWithDepositOverride"] = 82] = "Microsoft_Dynamics_Commerce_Runtime_OrderWasNotCreatedWithDepositOverride";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_DepositOverrideMayNotBeChanged"] = 83] = "Microsoft_Dynamics_Commerce_Runtime_DepositOverrideMayNotBeChanged";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_DepositOverrideMayNotBeCleared"] = 84] = "Microsoft_Dynamics_Commerce_Runtime_DepositOverrideMayNotBeCleared";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_AmountDueMustBePaidBeforeCheckout"] = 85] = "Microsoft_Dynamics_Commerce_Runtime_AmountDueMustBePaidBeforeCheckout";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_DiscountMustBeCalculatedBeforeCheckout"] = 86] = "Microsoft_Dynamics_Commerce_Runtime_DiscountMustBeCalculatedBeforeCheckout";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_IncorrectPaymentAmountSign"] = 87] = "Microsoft_Dynamics_Commerce_Runtime_IncorrectPaymentAmountSign";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_PaymentExceedsMaximumAmountPerLine"] = 88] = "Microsoft_Dynamics_Commerce_Runtime_PaymentExceedsMaximumAmountPerLine";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_PaymentExceedsMinimumAmountPerLine"] = 89] = "Microsoft_Dynamics_Commerce_Runtime_PaymentExceedsMinimumAmountPerLine";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_PaymentExceedsMaximumAmountPerTransaction"] = 90] = "Microsoft_Dynamics_Commerce_Runtime_PaymentExceedsMaximumAmountPerTransaction";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_PaymentExceedsMinimumAmountPerTransaction"] = 91] = "Microsoft_Dynamics_Commerce_Runtime_PaymentExceedsMinimumAmountPerTransaction";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ChangebackIsNotAllowed"] = 92] = "Microsoft_Dynamics_Commerce_Runtime_ChangebackIsNotAllowed";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_OvertenderAmountExceedsMaximumAllowedValue"] = 93] = "Microsoft_Dynamics_Commerce_Runtime_OvertenderAmountExceedsMaximumAllowedValue";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_BalanceAmountExceedsMaximumAllowedValue"] = 94] = "Microsoft_Dynamics_Commerce_Runtime_BalanceAmountExceedsMaximumAllowedValue";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_PaymentMustBeUsedToFinalizeTransaction"] = 95] = "Microsoft_Dynamics_Commerce_Runtime_PaymentMustBeUsedToFinalizeTransaction";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_UnableToFindListing"] = 96] = "Microsoft_Dynamics_Commerce_Runtime_UnableToFindListing";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_UnableToFindEmployeeActivityBreakCategory"] = 97] = "Microsoft_Dynamics_Commerce_Runtime_UnableToFindEmployeeActivityBreakCategory";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_UnableToFindVariant"] = 98] = "Microsoft_Dynamics_Commerce_Runtime_UnableToFindVariant";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidStoreNumber"] = 99] = "Microsoft_Dynamics_Commerce_Runtime_InvalidStoreNumber";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_SalesLineMustHavePickupDeliveryMode"] = 100] = "Microsoft_Dynamics_Commerce_Runtime_SalesLineMustHavePickupDeliveryMode";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_UnableToPickupMoreThanQtyRemaining"] = 101] = "Microsoft_Dynamics_Commerce_Runtime_UnableToPickupMoreThanQtyRemaining";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidDeliveryCharge"] = 102] = "Microsoft_Dynamics_Commerce_Runtime_InvalidDeliveryCharge";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CurrencyConversionFailed"] = 103] = "Microsoft_Dynamics_Commerce_Runtime_CurrencyConversionFailed";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CurrencyChannelOrderMismatch"] = 104] = "Microsoft_Dynamics_Commerce_Runtime_CurrencyChannelOrderMismatch";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CurrencyNotFound"] = 105] = "Microsoft_Dynamics_Commerce_Runtime_CurrencyNotFound";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidCancellationCharge"] = 106] = "Microsoft_Dynamics_Commerce_Runtime_InvalidCancellationCharge";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ChargeNotConfiguredOnHeadquarters"] = 107] = "Microsoft_Dynamics_Commerce_Runtime_ChargeNotConfiguredOnHeadquarters";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ShippingChargeRefundCannotBePositive"] = 108] = "Microsoft_Dynamics_Commerce_Runtime_ShippingChargeRefundCannotBePositive";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ShippingChargeRefundIsNotAllowed"] = 109] = "Microsoft_Dynamics_Commerce_Runtime_ShippingChargeRefundIsNotAllowed";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_PickupModeOfDeliveryNotConfiguredOnHeadquarters"] = 110] = "Microsoft_Dynamics_Commerce_Runtime_PickupModeOfDeliveryNotConfiguredOnHeadquarters";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_SerialNumberMissing"] = 111] = "Microsoft_Dynamics_Commerce_Runtime_SerialNumberMissing";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_SerialNumberCannotBeChanged"] = 112] = "Microsoft_Dynamics_Commerce_Runtime_SerialNumberCannotBeChanged";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_SerialNumberMissingInCustomerOrder"] = 113] = "Microsoft_Dynamics_Commerce_Runtime_SerialNumberMissingInCustomerOrder";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_SerializedQuantityGreaterThanOne"] = 114] = "Microsoft_Dynamics_Commerce_Runtime_SerializedQuantityGreaterThanOne";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_MultipleCreditCardPaymentNotSupported"] = 115] = "Microsoft_Dynamics_Commerce_Runtime_MultipleCreditCardPaymentNotSupported";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidCardExpirationDate"] = 116] = "Microsoft_Dynamics_Commerce_Runtime_InvalidCardExpirationDate";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_PurchaseTransferOrderMissing"] = 117] = "Microsoft_Dynamics_Commerce_Runtime_PurchaseTransferOrderMissing";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_NotAllLinesSaved"] = 118] = "Microsoft_Dynamics_Commerce_Runtime_NotAllLinesSaved";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_PurchaseTransferOrderRequired"] = 119] = "Microsoft_Dynamics_Commerce_Runtime_PurchaseTransferOrderRequired";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_SalesMustHaveQuantityGreaterThanZero"] = 120] = "Microsoft_Dynamics_Commerce_Runtime_SalesMustHaveQuantityGreaterThanZero";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ReturnsMustHaveQuantityLesserThanZero"] = 121] = "Microsoft_Dynamics_Commerce_Runtime_ReturnsMustHaveQuantityLesserThanZero";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CannotReturnMoreThanPurchased"] = 122] = "Microsoft_Dynamics_Commerce_Runtime_CannotReturnMoreThanPurchased";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CannotReturnMultipleTransactions"] = 123] = "Microsoft_Dynamics_Commerce_Runtime_CannotReturnMultipleTransactions";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_PropertyUpdateNotAllowed"] = 124] = "Microsoft_Dynamics_Commerce_Runtime_PropertyUpdateNotAllowed";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_GiftCardDiscountNotAllowed"] = 125] = "Microsoft_Dynamics_Commerce_Runtime_GiftCardDiscountNotAllowed";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_LoadingActiveCartFromAnotherTerminalNotAllowed"] = 126] = "Microsoft_Dynamics_Commerce_Runtime_LoadingActiveCartFromAnotherTerminalNotAllowed";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ShiftAlreadyOpenOnDifferentTerminal"] = 127] = "Microsoft_Dynamics_Commerce_Runtime_ShiftAlreadyOpenOnDifferentTerminal";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_TerminalHasAnOpenShift"] = 128] = "Microsoft_Dynamics_Commerce_Runtime_TerminalHasAnOpenShift";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CashDrawerHasAnOpenShift"] = 129] = "Microsoft_Dynamics_Commerce_Runtime_CashDrawerHasAnOpenShift";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ShiftStartingAmountNotEntered"] = 130] = "Microsoft_Dynamics_Commerce_Runtime_ShiftStartingAmountNotEntered";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ShiftTenderDeclarationAmountNotEntered"] = 131] = "Microsoft_Dynamics_Commerce_Runtime_ShiftTenderDeclarationAmountNotEntered";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ReceiptTypeNotSupported"] = 132] = "Microsoft_Dynamics_Commerce_Runtime_ReceiptTypeNotSupported";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ReceiptTypeNotFound"] = 133] = "Microsoft_Dynamics_Commerce_Runtime_ReceiptTypeNotFound";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_MoreThanOneTenderTypeForTenderTypeId"] = 134] = "Microsoft_Dynamics_Commerce_Runtime_MoreThanOneTenderTypeForTenderTypeId";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_TimeClockNotEnabled"] = 135] = "Microsoft_Dynamics_Commerce_Runtime_TimeClockNotEnabled";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ViewTimeClockNotEnabled"] = 136] = "Microsoft_Dynamics_Commerce_Runtime_ViewTimeClockNotEnabled";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_NoMoreThanOneOperationWithAGiftCard"] = 137] = "Microsoft_Dynamics_Commerce_Runtime_NoMoreThanOneOperationWithAGiftCard";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_GiftCardUnlockFailed"] = 138] = "Microsoft_Dynamics_Commerce_Runtime_GiftCardUnlockFailed";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_GiftCardLineVoidReversalNotSupported"] = 139] = "Microsoft_Dynamics_Commerce_Runtime_GiftCardLineVoidReversalNotSupported";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_SalesInvoiceLineVoidReversalNotSupported"] = 140] = "Microsoft_Dynamics_Commerce_Runtime_SalesInvoiceLineVoidReversalNotSupported";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CannotSuspendCartWithActiveTenderLines"] = 141] = "Microsoft_Dynamics_Commerce_Runtime_CannotSuspendCartWithActiveTenderLines";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CannotSuspendCartWithActiveGiftCardSalesLines"] = 142] = "Microsoft_Dynamics_Commerce_Runtime_CannotSuspendCartWithActiveGiftCardSalesLines";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CannotUpdateUnitOfMeasureOnPriceOverriddenLine"] = 143] = "Microsoft_Dynamics_Commerce_Runtime_CannotUpdateUnitOfMeasureOnPriceOverriddenLine";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_SettleInvoiceFailed"] = 144] = "Microsoft_Dynamics_Commerce_Runtime_SettleInvoiceFailed";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_TerminalNotFound"] = 145] = "Microsoft_Dynamics_Commerce_Runtime_TerminalNotFound";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidQuantity"] = 146] = "Microsoft_Dynamics_Commerce_Runtime_InvalidQuantity";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ItemQuantityExceeded"] = 147] = "Microsoft_Dynamics_Commerce_Runtime_ItemQuantityExceeded";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_NoPriceOverrideForReturns"] = 148] = "Microsoft_Dynamics_Commerce_Runtime_NoPriceOverrideForReturns";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_NoPriceOverrideForGiftCards"] = 149] = "Microsoft_Dynamics_Commerce_Runtime_NoPriceOverrideForGiftCards";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_NoPriceOverrideForInvoiceLines"] = 150] = "Microsoft_Dynamics_Commerce_Runtime_NoPriceOverrideForInvoiceLines";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CannotAddNonProductItemToCustomerOrder"] = 151] = "Microsoft_Dynamics_Commerce_Runtime_CannotAddNonProductItemToCustomerOrder";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ReturnItemPriceExceeded"] = 152] = "Microsoft_Dynamics_Commerce_Runtime_ReturnItemPriceExceeded";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ReturnTransactionTotalExceeded"] = 153] = "Microsoft_Dynamics_Commerce_Runtime_ReturnTransactionTotalExceeded";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ShiftNotFound"] = 154] = "Microsoft_Dynamics_Commerce_Runtime_ShiftNotFound";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ShiftValidationError"] = 155] = "Microsoft_Dynamics_Commerce_Runtime_ShiftValidationError";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CredentialIdentifierAlreadyInUse"] = 156] = "Microsoft_Dynamics_Commerce_Runtime_CredentialIdentifierAlreadyInUse";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CreditVoucherNull"] = 157] = "Microsoft_Dynamics_Commerce_Runtime_CreditVoucherNull";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CartNotFound"] = 158] = "Microsoft_Dynamics_Commerce_Runtime_CartNotFound";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CustomerAccountDepositMultipleCartLinesNotAllowed"] = 159] = "Microsoft_Dynamics_Commerce_Runtime_CustomerAccountDepositMultipleCartLinesNotAllowed";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CustomerAccountNumberIsNotSet"] = 160] = "Microsoft_Dynamics_Commerce_Runtime_CustomerAccountNumberIsNotSet";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CannotPayForCustomerAccountDepositWithCustomerAccountPaymentMethod"] = 161] = "Microsoft_Dynamics_Commerce_Runtime_CannotPayForCustomerAccountDepositWithCustomerAccountPaymentMethod";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CustomerAccountDepositCannotBeNegative"] = 162] = "Microsoft_Dynamics_Commerce_Runtime_CustomerAccountDepositCannotBeNegative";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CustomerAccountDepositCannotBeVoided"] = 163] = "Microsoft_Dynamics_Commerce_Runtime_CustomerAccountDepositCannotBeVoided";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_OfflineDatabaseChunkFileNotFound"] = 164] = "Microsoft_Dynamics_Commerce_Runtime_OfflineDatabaseChunkFileNotFound";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ChannelIsNotPublished"] = 165] = "Microsoft_Dynamics_Commerce_Runtime_ChannelIsNotPublished";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidOperation"] = 166] = "Microsoft_Dynamics_Commerce_Runtime_InvalidOperation";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_MaxCountingDifferenceExceeded"] = 167] = "Microsoft_Dynamics_Commerce_Runtime_MaxCountingDifferenceExceeded";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_EmployeeNotAllowedManageSharedShift"] = 168] = "Microsoft_Dynamics_Commerce_Runtime_EmployeeNotAllowedManageSharedShift";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidAmount"] = 169] = "Microsoft_Dynamics_Commerce_Runtime_InvalidAmount";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidBagNumber"] = 170] = "Microsoft_Dynamics_Commerce_Runtime_InvalidBagNumber";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_NoPrintersReturned"] = 171] = "Microsoft_Dynamics_Commerce_Runtime_NoPrintersReturned";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_EnteringPriceNotAllowed"] = 172] = "Microsoft_Dynamics_Commerce_Runtime_EnteringPriceNotAllowed";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_MustKeyInEqualHigherPrice"] = 173] = "Microsoft_Dynamics_Commerce_Runtime_MustKeyInEqualHigherPrice";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_MustKeyInEqualLowerPrice"] = 174] = "Microsoft_Dynamics_Commerce_Runtime_MustKeyInEqualLowerPrice";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_MustKeyInNewPrice"] = 175] = "Microsoft_Dynamics_Commerce_Runtime_MustKeyInNewPrice";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ConflictingClaimsPresentOnUserContext"] = 176] = "Microsoft_Dynamics_Commerce_Runtime_ConflictingClaimsPresentOnUserContext";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidCartSalesLineAdd"] = 177] = "Microsoft_Dynamics_Commerce_Runtime_InvalidCartSalesLineAdd";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidCartSalesLineUpdate"] = 178] = "Microsoft_Dynamics_Commerce_Runtime_InvalidCartSalesLineUpdate";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidCartState"] = 179] = "Microsoft_Dynamics_Commerce_Runtime_InvalidCartState";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidProduct"] = 180] = "Microsoft_Dynamics_Commerce_Runtime_InvalidProduct";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ConflictingCartLineOperation"] = 181] = "Microsoft_Dynamics_Commerce_Runtime_ConflictingCartLineOperation";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidCartLinesAggregateError"] = 182] = "Microsoft_Dynamics_Commerce_Runtime_InvalidCartLinesAggregateError";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidCartInventoryLocationId"] = 183] = "Microsoft_Dynamics_Commerce_Runtime_InvalidCartInventoryLocationId";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidCartVersion"] = 184] = "Microsoft_Dynamics_Commerce_Runtime_InvalidCartVersion";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CustomerOrDirectoryPartyNotFound"] = 185] = "Microsoft_Dynamics_Commerce_Runtime_CustomerOrDirectoryPartyNotFound";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CannotUpdateCustomerAndLoyaltyCardAtTheSameTime"] = 186] = "Microsoft_Dynamics_Commerce_Runtime_CannotUpdateCustomerAndLoyaltyCardAtTheSameTime";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ConflictLoyaltyCardCustomerAndTransactionCustomer"] = 187] = "Microsoft_Dynamics_Commerce_Runtime_ConflictLoyaltyCardCustomerAndTransactionCustomer";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidCashBackAmount"] = 188] = "Microsoft_Dynamics_Commerce_Runtime_InvalidCashBackAmount";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_UnableToRetrieveCardPaymentAcceptResult"] = 189] = "Microsoft_Dynamics_Commerce_Runtime_UnableToRetrieveCardPaymentAcceptResult";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_PreValidationForAsyncAddressFailed"] = 190] = "Microsoft_Dynamics_Commerce_Runtime_PreValidationForAsyncAddressFailed";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ZeroPriceIsNotAllowed"] = 191] = "Microsoft_Dynamics_Commerce_Runtime_ZeroPriceIsNotAllowed";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_OperationNotAllowedOnLinkedProduct"] = 192] = "Microsoft_Dynamics_Commerce_Runtime_OperationNotAllowedOnLinkedProduct";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CustomerAccountMismatchBetweenTransactionAndDepositLine"] = 193] = "Microsoft_Dynamics_Commerce_Runtime_CustomerAccountMismatchBetweenTransactionAndDepositLine";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CustomerAccountDepositLineDoesNotAllowSettingTransactionStatus"] = 194] = "Microsoft_Dynamics_Commerce_Runtime_CustomerAccountDepositLineDoesNotAllowSettingTransactionStatus";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CustomerAccountDepositLinesNotAllowed"] = 195] = "Microsoft_Dynamics_Commerce_Runtime_CustomerAccountDepositLinesNotAllowed";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ReturnLineNumberNotFound"] = 196] = "Microsoft_Dynamics_Commerce_Runtime_ReturnLineNumberNotFound";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CustomerNameExceedsMaximumLength"] = 197] = "Microsoft_Dynamics_Commerce_Runtime_CustomerNameExceedsMaximumLength";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CustomerPhoneNumberExceedsMaximumLength"] = 198] = "Microsoft_Dynamics_Commerce_Runtime_CustomerPhoneNumberExceedsMaximumLength";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CustomerEmailExceedsMaximumLength"] = 199] = "Microsoft_Dynamics_Commerce_Runtime_CustomerEmailExceedsMaximumLength";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidShiftStatusChange"] = 200] = "Microsoft_Dynamics_Commerce_Runtime_InvalidShiftStatusChange";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_AmountExceedsMaximumAllowed"] = 201] = "Microsoft_Dynamics_Commerce_Runtime_AmountExceedsMaximumAllowed";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_PrintXZReportNotConfigured"] = 202] = "Microsoft_Dynamics_Commerce_Runtime_PrintXZReportNotConfigured";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ColumnsNameBadFormat"] = 203] = "Microsoft_Dynamics_Commerce_Runtime_ColumnsNameBadFormat";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_SelectedValuesDidNotMatchExactlyOneProduct"] = 204] = "Microsoft_Dynamics_Commerce_Runtime_SelectedValuesDidNotMatchExactlyOneProduct";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ProductNotFound"] = 205] = "Microsoft_Dynamics_Commerce_Runtime_ProductNotFound";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_DiscountNotAllowed"] = 206] = "Microsoft_Dynamics_Commerce_Runtime_DiscountNotAllowed";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_FailedToRecallTransaction"] = 207] = "Microsoft_Dynamics_Commerce_Runtime_FailedToRecallTransaction";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_MultiplePrimaryAddresses"] = 208] = "Microsoft_Dynamics_Commerce_Runtime_MultiplePrimaryAddresses";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_SortingColumnsNotSupported"] = 209] = "Microsoft_Dynamics_Commerce_Runtime_SortingColumnsNotSupported";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_WorkerDoesNotHaveAllowSaleOutsideAssortmentPermission"] = 210] = "Microsoft_Dynamics_Commerce_Runtime_WorkerDoesNotHaveAllowSaleOutsideAssortmentPermission";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidOrderInvoiceData"] = 211] = "Microsoft_Dynamics_Commerce_Runtime_InvalidOrderInvoiceData";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_NoSalesInvoiceReturned"] = 212] = "Microsoft_Dynamics_Commerce_Runtime_NoSalesInvoiceReturned";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_GiftCardLineNotAllowedWithInvoiceLine"] = 213] = "Microsoft_Dynamics_Commerce_Runtime_GiftCardLineNotAllowedWithInvoiceLine";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvoiceLineNotAllowedInCustomerOrder"] = 214] = "Microsoft_Dynamics_Commerce_Runtime_InvoiceLineNotAllowedInCustomerOrder";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CustomerOrderNotAllowedToContainInvoiceLine"] = 215] = "Microsoft_Dynamics_Commerce_Runtime_CustomerOrderNotAllowedToContainInvoiceLine";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvoiceLineNotAllowedWithItemLines"] = 216] = "Microsoft_Dynamics_Commerce_Runtime_InvoiceLineNotAllowedWithItemLines";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ItemLinesNotAllowedWithInvoiceLine"] = 217] = "Microsoft_Dynamics_Commerce_Runtime_ItemLinesNotAllowedWithInvoiceLine";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_MultipleInvoiceLinesNotAllowed"] = 218] = "Microsoft_Dynamics_Commerce_Runtime_MultipleInvoiceLinesNotAllowed";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CustomerAccountRemovalNotAllowedForInvoiceSales"] = 219] = "Microsoft_Dynamics_Commerce_Runtime_CustomerAccountRemovalNotAllowedForInvoiceSales";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvoiceLineNotAllowedInCartWithoutCustomerAccount"] = 220] = "Microsoft_Dynamics_Commerce_Runtime_InvoiceLineNotAllowedInCartWithoutCustomerAccount";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvoiceLineNotAllowedInCartWithDifferentCustomerAccount"] = 221] = "Microsoft_Dynamics_Commerce_Runtime_InvoiceLineNotAllowedInCartWithDifferentCustomerAccount";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvoiceDiscountNotAllowed"] = 222] = "Microsoft_Dynamics_Commerce_Runtime_InvoiceDiscountNotAllowed";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_AttributeTypeNotSupported"] = 223] = "Microsoft_Dynamics_Commerce_Runtime_AttributeTypeNotSupported";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidAttributeValue"] = 224] = "Microsoft_Dynamics_Commerce_Runtime_InvalidAttributeValue";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_AttributeValueOutOfBounds"] = 225] = "Microsoft_Dynamics_Commerce_Runtime_AttributeValueOutOfBounds";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_AttributeValueCannotBeNull"] = 226] = "Microsoft_Dynamics_Commerce_Runtime_AttributeValueCannotBeNull";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_AttributeTypeMismatch"] = 227] = "Microsoft_Dynamics_Commerce_Runtime_AttributeTypeMismatch";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_AttributeDefinitionNotFound"] = 228] = "Microsoft_Dynamics_Commerce_Runtime_AttributeDefinitionNotFound";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_MixingSalesAndReturnsProhibited"] = 229] = "Microsoft_Dynamics_Commerce_Runtime_MixingSalesAndReturnsProhibited";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidCouponCode"] = 230] = "Microsoft_Dynamics_Commerce_Runtime_InvalidCouponCode";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CouponRequiresCustomerOnCart"] = 231] = "Microsoft_Dynamics_Commerce_Runtime_CouponRequiresCustomerOnCart";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ExclusiveCouponCannotBeAppliedWithOtherCoupons"] = 232] = "Microsoft_Dynamics_Commerce_Runtime_ExclusiveCouponCannotBeAppliedWithOtherCoupons";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CouponExceedsDefinedUsageLimits"] = 233] = "Microsoft_Dynamics_Commerce_Runtime_CouponExceedsDefinedUsageLimits";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_UserCannotAcceptFulfillmentLines"] = 234] = "Microsoft_Dynamics_Commerce_Runtime_UserCannotAcceptFulfillmentLines";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_UserCannotRejectFulfillmentLines"] = 235] = "Microsoft_Dynamics_Commerce_Runtime_UserCannotRejectFulfillmentLines";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_RestrictPrintingReceiptCopy_AlreadyRegistered"] = 236] = "Microsoft_Dynamics_Commerce_Runtime_RestrictPrintingReceiptCopy_AlreadyRegistered";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_RestrictPrintingReceiptCopy_HQisNotAvailable"] = 237] = "Microsoft_Dynamics_Commerce_Runtime_RestrictPrintingReceiptCopy_HQisNotAvailable";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_RestrictPrintingReceiptCopy"] = 238] = "Microsoft_Dynamics_Commerce_Runtime_RestrictPrintingReceiptCopy";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_RemoveAddPaymentMethodConfigurationNotDefined"] = 239] = "Microsoft_Dynamics_Commerce_Runtime_RemoveAddPaymentMethodConfigurationNotDefined";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_OverrideDepostAmountShouldBeLargerThanCarriedOutAmount"] = 240] = "Microsoft_Dynamics_Commerce_Runtime_OverrideDepostAmountShouldBeLargerThanCarriedOutAmount";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_MixingItemIdsAndProductIdsProhibited"] = 241] = "Microsoft_Dynamics_Commerce_Runtime_MixingItemIdsAndProductIdsProhibited";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_PackingLinesFromDifferentOrdersNotAllowed"] = 242] = "Microsoft_Dynamics_Commerce_Runtime_PackingLinesFromDifferentOrdersNotAllowed";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidFulfillmentLineKey"] = 243] = "Microsoft_Dynamics_Commerce_Runtime_InvalidFulfillmentLineKey";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_Missing_LocationId"] = 244] = "Microsoft_Dynamics_Commerce_Runtime_Missing_LocationId";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_Missing_ShipDate"] = 245] = "Microsoft_Dynamics_Commerce_Runtime_Missing_ShipDate";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_Missing_ReceiveDate"] = 246] = "Microsoft_Dynamics_Commerce_Runtime_Missing_ReceiveDate";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidOrderType"] = 247] = "Microsoft_Dynamics_Commerce_Runtime_InvalidOrderType";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ShippingSerializedProductsNotSupported"] = 248] = "Microsoft_Dynamics_Commerce_Runtime_ShippingSerializedProductsNotSupported";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_ShippingMultipleOrdersNotSupported"] = 249] = "Microsoft_Dynamics_Commerce_Runtime_ShippingMultipleOrdersNotSupported";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_UnableToOpenShift"] = 250] = "Microsoft_Dynamics_Commerce_Runtime_UnableToOpenShift";
                DataValidationErrors[DataValidationErrors["Microsoft_Dynamics_Commerce_Runtime_CartAlreadyCheckedOut"] = 251] = "Microsoft_Dynamics_Commerce_Runtime_CartAlreadyCheckedOut";
            })(DataValidationErrors = Entities.DataValidationErrors || (Entities.DataValidationErrors = {}));
            var FeatureNotSupportedErrors;
            (function (FeatureNotSupportedErrors) {
                FeatureNotSupportedErrors[FeatureNotSupportedErrors["None"] = 0] = "None";
                FeatureNotSupportedErrors[FeatureNotSupportedErrors["Microsoft_Dynamics_Commerce_Runtime_RequestTypeNotSupported"] = 1] = "Microsoft_Dynamics_Commerce_Runtime_RequestTypeNotSupported";
                FeatureNotSupportedErrors[FeatureNotSupportedErrors["Microsoft_Dynamics_Commerce_Runtime_RequestParametersNotSupported"] = 2] = "Microsoft_Dynamics_Commerce_Runtime_RequestParametersNotSupported";
                FeatureNotSupportedErrors[FeatureNotSupportedErrors["Microsoft_Dynamics_Commerce_Runtime_RequestParameterValueNotSupported"] = 3] = "Microsoft_Dynamics_Commerce_Runtime_RequestParameterValueNotSupported";
                FeatureNotSupportedErrors[FeatureNotSupportedErrors["Microsoft_Dynamics_Commerce_Runtime_ChangeTenderTypeNotSupported"] = 4] = "Microsoft_Dynamics_Commerce_Runtime_ChangeTenderTypeNotSupported";
                FeatureNotSupportedErrors[FeatureNotSupportedErrors["Microsoft_Dynamics_Commerce_Runtime_DemoModeOperationNotSupported"] = 5] = "Microsoft_Dynamics_Commerce_Runtime_DemoModeOperationNotSupported";
                FeatureNotSupportedErrors[FeatureNotSupportedErrors["Microsoft_Dynamics_Commerce_Runtime_RealtimeServiceNotSupported"] = 6] = "Microsoft_Dynamics_Commerce_Runtime_RealtimeServiceNotSupported";
                FeatureNotSupportedErrors[FeatureNotSupportedErrors["Microsoft_Dynamics_Commerce_Runtime_ReceiptTypeNotSupported"] = 7] = "Microsoft_Dynamics_Commerce_Runtime_ReceiptTypeNotSupported";
                FeatureNotSupportedErrors[FeatureNotSupportedErrors["Microsoft_Dynamics_Commerce_Runtime_OnlineChannelRequired"] = 8] = "Microsoft_Dynamics_Commerce_Runtime_OnlineChannelRequired";
                FeatureNotSupportedErrors[FeatureNotSupportedErrors["Microsoft_Dynamics_Commerce_Runtime_CouponsNotSupportedOnSalesQuotations"] = 9] = "Microsoft_Dynamics_Commerce_Runtime_CouponsNotSupportedOnSalesQuotations";
                FeatureNotSupportedErrors[FeatureNotSupportedErrors["Microsoft_Dynamics_Commerce_Runtime_FeatureNotSupportedInHeadquarters"] = 10] = "Microsoft_Dynamics_Commerce_Runtime_FeatureNotSupportedInHeadquarters";
                FeatureNotSupportedErrors[FeatureNotSupportedErrors["Microsoft_Dynamics_Commerce_Runtime_UpdatingCouponsNotSupportedOnPickup"] = 11] = "Microsoft_Dynamics_Commerce_Runtime_UpdatingCouponsNotSupportedOnPickup";
                FeatureNotSupportedErrors[FeatureNotSupportedErrors["Microsoft_Dynamics_Commerce_Runtime_UpdateAsyncCustomerNotSupported"] = 12] = "Microsoft_Dynamics_Commerce_Runtime_UpdateAsyncCustomerNotSupported";
            })(FeatureNotSupportedErrors = Entities.FeatureNotSupportedErrors || (Entities.FeatureNotSupportedErrors = {}));
            var SecurityErrors;
            (function (SecurityErrors) {
                SecurityErrors[SecurityErrors["None"] = 0] = "None";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_AuthenticationFailed"] = 1] = "Microsoft_Dynamics_Commerce_Runtime_AuthenticationFailed";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_AuthorizationFailed"] = 2] = "Microsoft_Dynamics_Commerce_Runtime_AuthorizationFailed";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_AuthenticationMethodDisabled"] = 3] = "Microsoft_Dynamics_Commerce_Runtime_AuthenticationMethodDisabled";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_CommerceIdentityNotFound"] = 4] = "Microsoft_Dynamics_Commerce_Runtime_CommerceIdentityNotFound";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_UserNotActivated"] = 5] = "Microsoft_Dynamics_Commerce_Runtime_UserNotActivated";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_PrincipalMissing"] = 6] = "Microsoft_Dynamics_Commerce_Runtime_PrincipalMissing";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_PasswordRequired"] = 7] = "Microsoft_Dynamics_Commerce_Runtime_PasswordRequired";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_ChangePasswordFailed"] = 8] = "Microsoft_Dynamics_Commerce_Runtime_ChangePasswordFailed";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidPassword"] = 9] = "Microsoft_Dynamics_Commerce_Runtime_InvalidPassword";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_IdentityProviderNotFound"] = 10] = "Microsoft_Dynamics_Commerce_Runtime_IdentityProviderNotFound";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidAuthenticationCredentials"] = 11] = "Microsoft_Dynamics_Commerce_Runtime_InvalidAuthenticationCredentials";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_UpdatePasswordFailed"] = 12] = "Microsoft_Dynamics_Commerce_Runtime_UpdatePasswordFailed";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_ResetPasswordFailed"] = 13] = "Microsoft_Dynamics_Commerce_Runtime_ResetPasswordFailed";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_NonDrawerOperationsOnly"] = 14] = "Microsoft_Dynamics_Commerce_Runtime_NonDrawerOperationsOnly";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_UseExistingShiftPermissionDenied"] = 15] = "Microsoft_Dynamics_Commerce_Runtime_UseExistingShiftPermissionDenied";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_CreateTransferOrderNotAllowed"] = 16] = "Microsoft_Dynamics_Commerce_Runtime_CreateTransferOrderNotAllowed";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_UserCannotMassActivation"] = 17] = "Microsoft_Dynamics_Commerce_Runtime_UserCannotMassActivation";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_OpenMultipleShiftsNotAllowed"] = 18] = "Microsoft_Dynamics_Commerce_Runtime_OpenMultipleShiftsNotAllowed";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_UserSessionNotOpened"] = 19] = "Microsoft_Dynamics_Commerce_Runtime_UserSessionNotOpened";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_HeadquarterTransactionServiceMethodCallFailure"] = 20] = "Microsoft_Dynamics_Commerce_Runtime_HeadquarterTransactionServiceMethodCallFailure";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_HeadquarterCommunicationFailure"] = 21] = "Microsoft_Dynamics_Commerce_Runtime_HeadquarterCommunicationFailure";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_DeviceTokenExpired"] = 22] = "Microsoft_Dynamics_Commerce_Runtime_DeviceTokenExpired";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_DeviceTokenNotPresent"] = 23] = "Microsoft_Dynamics_Commerce_Runtime_DeviceTokenNotPresent";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidChannel"] = 24] = "Microsoft_Dynamics_Commerce_Runtime_InvalidChannel";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_ElevatedUserSameAsLoggedOnUser"] = 25] = "Microsoft_Dynamics_Commerce_Runtime_ElevatedUserSameAsLoggedOnUser";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_GrantTypeNotSupported"] = 26] = "Microsoft_Dynamics_Commerce_Runtime_GrantTypeNotSupported";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_DeviceDeactivationFailed"] = 27] = "Microsoft_Dynamics_Commerce_Runtime_DeviceDeactivationFailed";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_HardwareStationTokenCreationFailed"] = 28] = "Microsoft_Dynamics_Commerce_Runtime_HardwareStationTokenCreationFailed";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidHardwareStationToken"] = 29] = "Microsoft_Dynamics_Commerce_Runtime_InvalidHardwareStationToken";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_UserLogonAnotherTerminal"] = 30] = "Microsoft_Dynamics_Commerce_Runtime_UserLogonAnotherTerminal";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_UnlockRegisterFailed"] = 31] = "Microsoft_Dynamics_Commerce_Runtime_UnlockRegisterFailed";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_ChannelDatabaseConnectionFailed"] = 32] = "Microsoft_Dynamics_Commerce_Runtime_ChannelDatabaseConnectionFailed";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidUserToken"] = 33] = "Microsoft_Dynamics_Commerce_Runtime_InvalidUserToken";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_CustomerAccountAuthorizationFailure"] = 34] = "Microsoft_Dynamics_Commerce_Runtime_CustomerAccountAuthorizationFailure";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_LocalLogonFailed"] = 35] = "Microsoft_Dynamics_Commerce_Runtime_LocalLogonFailed";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_LocalDeviceAuthenticationFailed"] = 36] = "Microsoft_Dynamics_Commerce_Runtime_LocalDeviceAuthenticationFailed";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_DeviceTokenValidationFailed"] = 37] = "Microsoft_Dynamics_Commerce_Runtime_DeviceTokenValidationFailed";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_NoDeviceManagementPermission"] = 38] = "Microsoft_Dynamics_Commerce_Runtime_NoDeviceManagementPermission";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_IncorrectLogonTypeUserAccountOrPassword"] = 39] = "Microsoft_Dynamics_Commerce_Runtime_IncorrectLogonTypeUserAccountOrPassword";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidAudience"] = 40] = "Microsoft_Dynamics_Commerce_Runtime_InvalidAudience";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidIssuer"] = 41] = "Microsoft_Dynamics_Commerce_Runtime_InvalidIssuer";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_TenantIdNotFound"] = 42] = "Microsoft_Dynamics_Commerce_Runtime_TenantIdNotFound";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_AADTokenIssuedForDifferentEnvironment"] = 43] = "Microsoft_Dynamics_Commerce_Runtime_AADTokenIssuedForDifferentEnvironment";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidAADTenantId"] = 44] = "Microsoft_Dynamics_Commerce_Runtime_InvalidAADTenantId";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_UserBlockedDueToTooManyFailedLogonAttempts"] = 45] = "Microsoft_Dynamics_Commerce_Runtime_UserBlockedDueToTooManyFailedLogonAttempts";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_UserPasswordExpired"] = 46] = "Microsoft_Dynamics_Commerce_Runtime_UserPasswordExpired";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_CheckOutNotOverHTTPS"] = 47] = "Microsoft_Dynamics_Commerce_Runtime_CheckOutNotOverHTTPS";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_AttemptToActivateFromDifferentPhysicalDevice"] = 48] = "Microsoft_Dynamics_Commerce_Runtime_AttemptToActivateFromDifferentPhysicalDevice";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_InternalServerError"] = 49] = "Microsoft_Dynamics_Commerce_Runtime_InternalServerError";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_DeviceActivationNotAllowedWithUserTokenIssuer"] = 50] = "Microsoft_Dynamics_Commerce_Runtime_DeviceActivationNotAllowedWithUserTokenIssuer";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_PasswordComplexityRequirementsNotMet"] = 51] = "Microsoft_Dynamics_Commerce_Runtime_PasswordComplexityRequirementsNotMet";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_PasswordHistoryRequirementsNotMet"] = 52] = "Microsoft_Dynamics_Commerce_Runtime_PasswordHistoryRequirementsNotMet";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_ReturnItemPriceExceeded"] = 53] = "Microsoft_Dynamics_Commerce_Runtime_ReturnItemPriceExceeded";
                SecurityErrors[SecurityErrors["Microsoft_Dynamics_Commerce_Runtime_ReturnTransactionTotalExceeded"] = 54] = "Microsoft_Dynamics_Commerce_Runtime_ReturnTransactionTotalExceeded";
            })(SecurityErrors = Entities.SecurityErrors || (Entities.SecurityErrors = {}));
            var StorageErrors;
            (function (StorageErrors) {
                StorageErrors[StorageErrors["None"] = 0] = "None";
                StorageErrors[StorageErrors["Microsoft_Dynamics_Commerce_Runtime_CriticalStorageError"] = 1] = "Microsoft_Dynamics_Commerce_Runtime_CriticalStorageError";
                StorageErrors[StorageErrors["Microsoft_Dynamics_Commerce_Runtime_UnexpectedNumberOfRowsError"] = 2] = "Microsoft_Dynamics_Commerce_Runtime_UnexpectedNumberOfRowsError";
                StorageErrors[StorageErrors["Microsoft_Dynamics_Commerce_Runtime_ObjectVersionMismatchError"] = 3] = "Microsoft_Dynamics_Commerce_Runtime_ObjectVersionMismatchError";
            })(StorageErrors = Entities.StorageErrors || (Entities.StorageErrors = {}));
            var VersionNotSupportedErrors;
            (function (VersionNotSupportedErrors) {
                VersionNotSupportedErrors[VersionNotSupportedErrors["None"] = 0] = "None";
                VersionNotSupportedErrors[VersionNotSupportedErrors["Microsoft_Dynamics_Commerce_Runtime_RetailServerApiVersionNotSupported"] = 1] = "Microsoft_Dynamics_Commerce_Runtime_RetailServerApiVersionNotSupported";
            })(VersionNotSupportedErrors = Entities.VersionNotSupportedErrors || (Entities.VersionNotSupportedErrors = {}));
            var PaymentErrors;
            (function (PaymentErrors) {
                PaymentErrors[PaymentErrors["None"] = 0] = "None";
                PaymentErrors[PaymentErrors["Microsoft_Dynamics_Commerce_Runtime_UnableToCapturePayment"] = 1] = "Microsoft_Dynamics_Commerce_Runtime_UnableToCapturePayment";
                PaymentErrors[PaymentErrors["Microsoft_Dynamics_Commerce_Runtime_UnableToAuthorizePayment"] = 2] = "Microsoft_Dynamics_Commerce_Runtime_UnableToAuthorizePayment";
                PaymentErrors[PaymentErrors["Microsoft_Dynamics_Commerce_Runtime_UnableToRefundPayment"] = 3] = "Microsoft_Dynamics_Commerce_Runtime_UnableToRefundPayment";
                PaymentErrors[PaymentErrors["Microsoft_Dynamics_Commerce_Runtime_UnableToCancelPayment"] = 4] = "Microsoft_Dynamics_Commerce_Runtime_UnableToCancelPayment";
                PaymentErrors[PaymentErrors["Microsoft_Dynamics_Commerce_Runtime_UnableToGetCardPaymentAcceptPoint"] = 5] = "Microsoft_Dynamics_Commerce_Runtime_UnableToGetCardPaymentAcceptPoint";
                PaymentErrors[PaymentErrors["Microsoft_Dynamics_Commerce_Runtime_UnableToRetrieveCardPaymentAcceptResult"] = 6] = "Microsoft_Dynamics_Commerce_Runtime_UnableToRetrieveCardPaymentAcceptResult";
                PaymentErrors[PaymentErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidCashBackAmount"] = 7] = "Microsoft_Dynamics_Commerce_Runtime_InvalidCashBackAmount";
                PaymentErrors[PaymentErrors["Microsoft_Dynamics_Commerce_Runtime_ManualCardNumberNotAllowed"] = 8] = "Microsoft_Dynamics_Commerce_Runtime_ManualCardNumberNotAllowed";
                PaymentErrors[PaymentErrors["Microsoft_Dynamics_Commerce_Runtime_TenderLineCannotBeVoided"] = 9] = "Microsoft_Dynamics_Commerce_Runtime_TenderLineCannotBeVoided";
                PaymentErrors[PaymentErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidPaymentRequest"] = 10] = "Microsoft_Dynamics_Commerce_Runtime_InvalidPaymentRequest";
                PaymentErrors[PaymentErrors["Microsoft_Dynamics_Commerce_Runtime_PaymentAlreadyVoided"] = 11] = "Microsoft_Dynamics_Commerce_Runtime_PaymentAlreadyVoided";
                PaymentErrors[PaymentErrors["Microsoft_Dynamics_Commerce_Runtime_InvalidLoyaltyCardNumber"] = 12] = "Microsoft_Dynamics_Commerce_Runtime_InvalidLoyaltyCardNumber";
                PaymentErrors[PaymentErrors["Microsoft_Dynamics_Commerce_Runtime_GiftCardCurrencyMismatch"] = 13] = "Microsoft_Dynamics_Commerce_Runtime_GiftCardCurrencyMismatch";
                PaymentErrors[PaymentErrors["Microsoft_Dynamics_Commerce_Runtime_PaymentAmountExceedsGiftBalance"] = 14] = "Microsoft_Dynamics_Commerce_Runtime_PaymentAmountExceedsGiftBalance";
                PaymentErrors[PaymentErrors["Microsoft_Dynamics_Commerce_Runtime_BlockedLoyaltyCard"] = 15] = "Microsoft_Dynamics_Commerce_Runtime_BlockedLoyaltyCard";
                PaymentErrors[PaymentErrors["Microsoft_Dynamics_Commerce_Runtime_NoTenderLoyaltyCard"] = 16] = "Microsoft_Dynamics_Commerce_Runtime_NoTenderLoyaltyCard";
                PaymentErrors[PaymentErrors["Microsoft_Dynamics_Commerce_Runtime_NotEnoughRewardPoints"] = 17] = "Microsoft_Dynamics_Commerce_Runtime_NotEnoughRewardPoints";
                PaymentErrors[PaymentErrors["Microsoft_Dynamics_Commerce_Runtime_RefundAmountMoreThanAllowed"] = 18] = "Microsoft_Dynamics_Commerce_Runtime_RefundAmountMoreThanAllowed";
                PaymentErrors[PaymentErrors["Microsoft_Dynamics_Commerce_Runtime_NoMoreThanOneLoyaltyTender"] = 19] = "Microsoft_Dynamics_Commerce_Runtime_NoMoreThanOneLoyaltyTender";
                PaymentErrors[PaymentErrors["Microsoft_Dynamics_Commerce_Runtime_PaymentUsingUnauthorizedAccount"] = 20] = "Microsoft_Dynamics_Commerce_Runtime_PaymentUsingUnauthorizedAccount";
                PaymentErrors[PaymentErrors["Microsoft_Dynamics_Commerce_Runtime_CustomerAccountPaymentIsNotAllowedForCustomerOrderDepositAndCancellation"] = 21] = "Microsoft_Dynamics_Commerce_Runtime_CustomerAccountPaymentIsNotAllowedForCustomerOrderDepositAndCancellation";
                PaymentErrors[PaymentErrors["Microsoft_Dynamics_Commerce_Runtime_PaymentRequiresMerchantProperties"] = 22] = "Microsoft_Dynamics_Commerce_Runtime_PaymentRequiresMerchantProperties";
                PaymentErrors[PaymentErrors["Microsoft_Dynamics_Commerce_Runtime_CustomerAccountPaymentExceedsTotalAmountForCarryOutItems"] = 23] = "Microsoft_Dynamics_Commerce_Runtime_CustomerAccountPaymentExceedsTotalAmountForCarryOutItems";
            })(PaymentErrors = Entities.PaymentErrors || (Entities.PaymentErrors = {}));
            var CommerceDataExchangeErrors;
            (function (CommerceDataExchangeErrors) {
                CommerceDataExchangeErrors[CommerceDataExchangeErrors["None"] = 0] = "None";
                CommerceDataExchangeErrors[CommerceDataExchangeErrors["Microsoft_Dynamics_Commerce_Runtime_CdxDataPackageApplicationFailure"] = 1] = "Microsoft_Dynamics_Commerce_Runtime_CdxDataPackageApplicationFailure";
            })(CommerceDataExchangeErrors = Entities.CommerceDataExchangeErrors || (Entities.CommerceDataExchangeErrors = {}));
            var WrongEndpointErrors;
            (function (WrongEndpointErrors) {
                WrongEndpointErrors[WrongEndpointErrors["None"] = 0] = "None";
                WrongEndpointErrors[WrongEndpointErrors["Microsoft_Dynamics_Commerce_WrongEndpoint"] = 1] = "Microsoft_Dynamics_Commerce_WrongEndpoint";
            })(WrongEndpointErrors = Entities.WrongEndpointErrors || (Entities.WrongEndpointErrors = {}));
            var RetailServerApiErrors;
            (function (RetailServerApiErrors) {
                RetailServerApiErrors[RetailServerApiErrors["None"] = 0] = "None";
                RetailServerApiErrors[RetailServerApiErrors["Microsoft_Dynamics_Internal_Server_Error"] = 1] = "Microsoft_Dynamics_Internal_Server_Error";
            })(RetailServerApiErrors = Entities.RetailServerApiErrors || (Entities.RetailServerApiErrors = {}));
            var ExceptionSeverity;
            (function (ExceptionSeverity) {
                ExceptionSeverity[ExceptionSeverity["None"] = 0] = "None";
                ExceptionSeverity[ExceptionSeverity["Error"] = 1] = "Error";
                ExceptionSeverity[ExceptionSeverity["Warning"] = 2] = "Warning";
                ExceptionSeverity[ExceptionSeverity["Critical"] = 3] = "Critical";
                ExceptionSeverity[ExceptionSeverity["Informational"] = 4] = "Informational";
            })(ExceptionSeverity = Entities.ExceptionSeverity || (Entities.ExceptionSeverity = {}));
            var CategoryClass = (function () {
                function CategoryClass(odataObject) {
                    odataObject = odataObject || {};
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.OfflineImage = odataObject.OfflineImage;
                    this.Name = odataObject.Name;
                    this.ParentCategory = (odataObject.ParentCategory != null) ? parseInt(odataObject.ParentCategory, 10) : undefined;
                    this.Images = undefined;
                    if (odataObject.Images) {
                        this.Images = [];
                        for (var i = 0; i < odataObject.Images.length; i++) {
                            if (odataObject.Images[i] != null) {
                                if (odataObject.Images[i]['@odata.type'] != null) {
                                    var className = odataObject.Images[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.Images[i] = new Commerce.Proxy.Entities[className](odataObject.Images[i]);
                                    }
                                }
                                else {
                                    this.Images[i] = new MediaLocationClass(odataObject.Images[i]);
                                }
                            }
                            else {
                                this.Images[i] = undefined;
                            }
                        }
                    }
                    this.NameTranslations = undefined;
                    if (odataObject.NameTranslations) {
                        this.NameTranslations = [];
                        for (var i = 0; i < odataObject.NameTranslations.length; i++) {
                            if (odataObject.NameTranslations[i] != null) {
                                if (odataObject.NameTranslations[i]['@odata.type'] != null) {
                                    var className = odataObject.NameTranslations[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.NameTranslations[i] = new Commerce.Proxy.Entities[className](odataObject.NameTranslations[i]);
                                    }
                                }
                                else {
                                    this.NameTranslations[i] = new TextValueTranslationClass(odataObject.NameTranslations[i]);
                                }
                            }
                            else {
                                this.NameTranslations[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return CategoryClass;
            }());
            Entities.CategoryClass = CategoryClass;
            var CartClass = (function () {
                function CartClass(odataObject) {
                    odataObject = odataObject || {};
                    this.AffiliationLines = undefined;
                    if (odataObject.AffiliationLines) {
                        this.AffiliationLines = [];
                        for (var i = 0; i < odataObject.AffiliationLines.length; i++) {
                            if (odataObject.AffiliationLines[i] != null) {
                                if (odataObject.AffiliationLines[i]['@odata.type'] != null) {
                                    var className = odataObject.AffiliationLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.AffiliationLines[i] = new Commerce.Proxy.Entities[className](odataObject.AffiliationLines[i]);
                                    }
                                }
                                else {
                                    this.AffiliationLines[i] = new AffiliationLoyaltyTierClass(odataObject.AffiliationLines[i]);
                                }
                            }
                            else {
                                this.AffiliationLines[i] = undefined;
                            }
                        }
                    }
                    this.IsRequiredAmountPaid = odataObject.IsRequiredAmountPaid;
                    this.IsDiscountFullyCalculated = odataObject.IsDiscountFullyCalculated;
                    this.AmountDue = (odataObject.AmountDue != null) ? parseFloat(odataObject.AmountDue) : undefined;
                    this.AmountPaid = (odataObject.AmountPaid != null) ? parseFloat(odataObject.AmountPaid) : undefined;
                    this.AttributeValues = undefined;
                    if (odataObject.AttributeValues) {
                        this.AttributeValues = [];
                        for (var i = 0; i < odataObject.AttributeValues.length; i++) {
                            if (odataObject.AttributeValues[i] != null) {
                                if (odataObject.AttributeValues[i]['@odata.type'] != null) {
                                    var className = odataObject.AttributeValues[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.AttributeValues[i] = new Commerce.Proxy.Entities[className](odataObject.AttributeValues[i]);
                                    }
                                }
                                else {
                                    this.AttributeValues[i] = new AttributeValueBaseClass(odataObject.AttributeValues[i]);
                                }
                            }
                            else {
                                this.AttributeValues[i] = undefined;
                            }
                        }
                    }
                    this.BeginDateTime = (odataObject.BeginDateTime instanceof Date) ? odataObject.BeginDateTime
                        : (odataObject.BeginDateTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.BeginDateTime, "Edm.DateTimeOffset", false) : undefined;
                    this.BusinessDate = (odataObject.BusinessDate instanceof Date) ? odataObject.BusinessDate
                        : (odataObject.BusinessDate != null) ? OData.jsonLightReadStringPropertyValue(odataObject.BusinessDate, "Edm.DateTimeOffset", false) : undefined;
                    this.CancellationChargeAmount = (odataObject.CancellationChargeAmount != null) ? parseFloat(odataObject.CancellationChargeAmount) : undefined;
                    this.EstimatedShippingAmount = (odataObject.EstimatedShippingAmount != null) ? parseFloat(odataObject.EstimatedShippingAmount) : undefined;
                    this.CartLines = undefined;
                    if (odataObject.CartLines) {
                        this.CartLines = [];
                        for (var i = 0; i < odataObject.CartLines.length; i++) {
                            if (odataObject.CartLines[i] != null) {
                                if (odataObject.CartLines[i]['@odata.type'] != null) {
                                    var className = odataObject.CartLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.CartLines[i] = new Commerce.Proxy.Entities[className](odataObject.CartLines[i]);
                                    }
                                }
                                else {
                                    this.CartLines[i] = new CartLineClass(odataObject.CartLines[i]);
                                }
                            }
                            else {
                                this.CartLines[i] = undefined;
                            }
                        }
                    }
                    this.CartTypeValue = odataObject.CartTypeValue;
                    this.ChannelId = (odataObject.ChannelId != null) ? parseInt(odataObject.ChannelId, 10) : undefined;
                    this.ChargeAmount = (odataObject.ChargeAmount != null) ? parseFloat(odataObject.ChargeAmount) : undefined;
                    this.ChargeLines = undefined;
                    if (odataObject.ChargeLines) {
                        this.ChargeLines = [];
                        for (var i = 0; i < odataObject.ChargeLines.length; i++) {
                            if (odataObject.ChargeLines[i] != null) {
                                if (odataObject.ChargeLines[i]['@odata.type'] != null) {
                                    var className = odataObject.ChargeLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ChargeLines[i] = new Commerce.Proxy.Entities[className](odataObject.ChargeLines[i]);
                                    }
                                }
                                else {
                                    this.ChargeLines[i] = new ChargeLineClass(odataObject.ChargeLines[i]);
                                }
                            }
                            else {
                                this.ChargeLines[i] = undefined;
                            }
                        }
                    }
                    this.TaxViewLines = undefined;
                    if (odataObject.TaxViewLines) {
                        this.TaxViewLines = [];
                        for (var i = 0; i < odataObject.TaxViewLines.length; i++) {
                            if (odataObject.TaxViewLines[i] != null) {
                                if (odataObject.TaxViewLines[i]['@odata.type'] != null) {
                                    var className = odataObject.TaxViewLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.TaxViewLines[i] = new Commerce.Proxy.Entities[className](odataObject.TaxViewLines[i]);
                                    }
                                }
                                else {
                                    this.TaxViewLines[i] = new TaxViewLineClass(odataObject.TaxViewLines[i]);
                                }
                            }
                            else {
                                this.TaxViewLines[i] = undefined;
                            }
                        }
                    }
                    this.Comment = odataObject.Comment;
                    this.InvoiceComment = odataObject.InvoiceComment;
                    this.Coupons = undefined;
                    if (odataObject.Coupons) {
                        this.Coupons = [];
                        for (var i = 0; i < odataObject.Coupons.length; i++) {
                            if (odataObject.Coupons[i] != null) {
                                if (odataObject.Coupons[i]['@odata.type'] != null) {
                                    var className = odataObject.Coupons[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.Coupons[i] = new Commerce.Proxy.Entities[className](odataObject.Coupons[i]);
                                    }
                                }
                                else {
                                    this.Coupons[i] = new CouponClass(odataObject.Coupons[i]);
                                }
                            }
                            else {
                                this.Coupons[i] = undefined;
                            }
                        }
                    }
                    this.CustomerId = odataObject.CustomerId;
                    this.CustomerOrderModeValue = odataObject.CustomerOrderModeValue;
                    this.DeliveryMode = odataObject.DeliveryMode;
                    this.DeliveryModeChargeAmount = (odataObject.DeliveryModeChargeAmount != null) ? parseFloat(odataObject.DeliveryModeChargeAmount) : undefined;
                    this.DiscountAmount = (odataObject.DiscountAmount != null) ? parseFloat(odataObject.DiscountAmount) : undefined;
                    this.DiscountCodes = undefined;
                    if (odataObject.DiscountCodes) {
                        this.DiscountCodes = [];
                        for (var i = 0; i < odataObject.DiscountCodes.length; i++) {
                            if (odataObject.DiscountCodes[i] != null) {
                                this.DiscountCodes[i] = odataObject.DiscountCodes[i];
                            }
                            else {
                                this.DiscountCodes[i] = undefined;
                            }
                        }
                    }
                    this.Id = odataObject.Id;
                    this.TransactionTypeValue = odataObject.TransactionTypeValue;
                    this.CustomerAccountDepositLines = undefined;
                    if (odataObject.CustomerAccountDepositLines) {
                        this.CustomerAccountDepositLines = [];
                        for (var i = 0; i < odataObject.CustomerAccountDepositLines.length; i++) {
                            if (odataObject.CustomerAccountDepositLines[i] != null) {
                                if (odataObject.CustomerAccountDepositLines[i]['@odata.type'] != null) {
                                    var className = odataObject.CustomerAccountDepositLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.CustomerAccountDepositLines[i] = new Commerce.Proxy.Entities[className](odataObject.CustomerAccountDepositLines[i]);
                                    }
                                }
                                else {
                                    this.CustomerAccountDepositLines[i] = new CustomerAccountDepositLineClass(odataObject.CustomerAccountDepositLines[i]);
                                }
                            }
                            else {
                                this.CustomerAccountDepositLines[i] = undefined;
                            }
                        }
                    }
                    this.IncomeExpenseLines = undefined;
                    if (odataObject.IncomeExpenseLines) {
                        this.IncomeExpenseLines = [];
                        for (var i = 0; i < odataObject.IncomeExpenseLines.length; i++) {
                            if (odataObject.IncomeExpenseLines[i] != null) {
                                if (odataObject.IncomeExpenseLines[i]['@odata.type'] != null) {
                                    var className = odataObject.IncomeExpenseLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.IncomeExpenseLines[i] = new Commerce.Proxy.Entities[className](odataObject.IncomeExpenseLines[i]);
                                    }
                                }
                                else {
                                    this.IncomeExpenseLines[i] = new IncomeExpenseLineClass(odataObject.IncomeExpenseLines[i]);
                                }
                            }
                            else {
                                this.IncomeExpenseLines[i] = undefined;
                            }
                        }
                    }
                    this.IncomeExpenseTotalAmount = (odataObject.IncomeExpenseTotalAmount != null) ? parseFloat(odataObject.IncomeExpenseTotalAmount) : undefined;
                    this.IsReturnByReceipt = odataObject.IsReturnByReceipt;
                    this.ReturnTransactionHasLoyaltyPayment = odataObject.ReturnTransactionHasLoyaltyPayment;
                    this.IsFavorite = odataObject.IsFavorite;
                    this.IsRecurring = odataObject.IsRecurring;
                    this.IsSuspended = odataObject.IsSuspended;
                    this.LoyaltyCardId = odataObject.LoyaltyCardId;
                    this.ModifiedDateTime = (odataObject.ModifiedDateTime instanceof Date) ? odataObject.ModifiedDateTime
                        : (odataObject.ModifiedDateTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.ModifiedDateTime, "Edm.DateTimeOffset", false) : undefined;
                    this.Name = odataObject.Name;
                    this.OrderNumber = odataObject.OrderNumber;
                    this.AvailableDepositAmount = (odataObject.AvailableDepositAmount != null) ? parseFloat(odataObject.AvailableDepositAmount) : undefined;
                    this.OverriddenDepositAmount = (odataObject.OverriddenDepositAmount != null) ? parseFloat(odataObject.OverriddenDepositAmount) : undefined;
                    this.PrepaymentAmountPaid = (odataObject.PrepaymentAmountPaid != null) ? parseFloat(odataObject.PrepaymentAmountPaid) : undefined;
                    this.PrepaymentAppliedOnPickup = (odataObject.PrepaymentAppliedOnPickup != null) ? parseFloat(odataObject.PrepaymentAppliedOnPickup) : undefined;
                    this.PromotionLines = undefined;
                    if (odataObject.PromotionLines) {
                        this.PromotionLines = [];
                        for (var i = 0; i < odataObject.PromotionLines.length; i++) {
                            if (odataObject.PromotionLines[i] != null) {
                                this.PromotionLines[i] = odataObject.PromotionLines[i];
                            }
                            else {
                                this.PromotionLines[i] = undefined;
                            }
                        }
                    }
                    this.QuotationExpiryDate = (odataObject.QuotationExpiryDate instanceof Date) ? odataObject.QuotationExpiryDate
                        : (odataObject.QuotationExpiryDate != null) ? OData.jsonLightReadStringPropertyValue(odataObject.QuotationExpiryDate, "Edm.DateTimeOffset", false) : undefined;
                    this.ReasonCodeLines = undefined;
                    if (odataObject.ReasonCodeLines) {
                        this.ReasonCodeLines = [];
                        for (var i = 0; i < odataObject.ReasonCodeLines.length; i++) {
                            if (odataObject.ReasonCodeLines[i] != null) {
                                if (odataObject.ReasonCodeLines[i]['@odata.type'] != null) {
                                    var className = odataObject.ReasonCodeLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ReasonCodeLines[i] = new Commerce.Proxy.Entities[className](odataObject.ReasonCodeLines[i]);
                                    }
                                }
                                else {
                                    this.ReasonCodeLines[i] = new ReasonCodeLineClass(odataObject.ReasonCodeLines[i]);
                                }
                            }
                            else {
                                this.ReasonCodeLines[i] = undefined;
                            }
                        }
                    }
                    this.ReceiptEmail = odataObject.ReceiptEmail;
                    this.RequestedDeliveryDate = (odataObject.RequestedDeliveryDate instanceof Date) ? odataObject.RequestedDeliveryDate
                        : (odataObject.RequestedDeliveryDate != null) ? OData.jsonLightReadStringPropertyValue(odataObject.RequestedDeliveryDate, "Edm.DateTimeOffset", false) : undefined;
                    this.RequiredDepositAmount = (odataObject.RequiredDepositAmount != null) ? parseFloat(odataObject.RequiredDepositAmount) : undefined;
                    this.SalesId = odataObject.SalesId;
                    if (odataObject.ShippingAddress == null) {
                        this.ShippingAddress = undefined;
                    }
                    else if (odataObject.ShippingAddress['@odata.type'] == null) {
                        this.ShippingAddress = new AddressClass(odataObject.ShippingAddress);
                    }
                    else {
                        var className = odataObject.ShippingAddress['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.ShippingAddress = new Commerce.Proxy.Entities[className](odataObject.ShippingAddress);
                        }
                    }
                    this.StaffId = odataObject.StaffId;
                    this.SubtotalAmount = (odataObject.SubtotalAmount != null) ? parseFloat(odataObject.SubtotalAmount) : undefined;
                    this.SubtotalAmountWithoutTax = (odataObject.SubtotalAmountWithoutTax != null) ? parseFloat(odataObject.SubtotalAmountWithoutTax) : undefined;
                    this.TaxAmount = (odataObject.TaxAmount != null) ? parseFloat(odataObject.TaxAmount) : undefined;
                    this.TaxOnCancellationCharge = (odataObject.TaxOnCancellationCharge != null) ? parseFloat(odataObject.TaxOnCancellationCharge) : undefined;
                    this.TaxOverrideCode = odataObject.TaxOverrideCode;
                    this.TenderLines = undefined;
                    if (odataObject.TenderLines) {
                        this.TenderLines = [];
                        for (var i = 0; i < odataObject.TenderLines.length; i++) {
                            if (odataObject.TenderLines[i] != null) {
                                if (odataObject.TenderLines[i]['@odata.type'] != null) {
                                    var className = odataObject.TenderLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.TenderLines[i] = new Commerce.Proxy.Entities[className](odataObject.TenderLines[i]);
                                    }
                                }
                                else {
                                    this.TenderLines[i] = new TenderLineClass(odataObject.TenderLines[i]);
                                }
                            }
                            else {
                                this.TenderLines[i] = undefined;
                            }
                        }
                    }
                    this.TerminalId = odataObject.TerminalId;
                    this.TotalAmount = (odataObject.TotalAmount != null) ? parseFloat(odataObject.TotalAmount) : undefined;
                    this.TotalManualDiscountAmount = (odataObject.TotalManualDiscountAmount != null) ? parseFloat(odataObject.TotalManualDiscountAmount) : undefined;
                    this.TotalManualDiscountPercentage = (odataObject.TotalManualDiscountPercentage != null) ? parseFloat(odataObject.TotalManualDiscountPercentage) : undefined;
                    this.WarehouseId = odataObject.WarehouseId;
                    this.IsCreatedOffline = odataObject.IsCreatedOffline;
                    this.CartStatusValue = odataObject.CartStatusValue;
                    this.ReceiptTransactionTypeValue = odataObject.ReceiptTransactionTypeValue;
                    this.CommissionSalesGroup = odataObject.CommissionSalesGroup;
                    this.Version = (odataObject.Version != null) ? parseInt(odataObject.Version, 10) : undefined;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return CartClass;
            }());
            Entities.CartClass = CartClass;
            var CustomerClass = (function () {
                function CustomerClass(odataObject) {
                    odataObject = odataObject || {};
                    this.AccountNumber = odataObject.AccountNumber;
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.CreatedDateTime = (odataObject.CreatedDateTime instanceof Date) ? odataObject.CreatedDateTime
                        : (odataObject.CreatedDateTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.CreatedDateTime, "Edm.DateTimeOffset", false) : undefined;
                    this.ChargeGroup = odataObject.ChargeGroup;
                    this.PriceGroup = odataObject.PriceGroup;
                    this.IsCustomerTaxInclusive = odataObject.IsCustomerTaxInclusive;
                    this.Phone = odataObject.Phone;
                    this.PhoneRecordId = (odataObject.PhoneRecordId != null) ? parseInt(odataObject.PhoneRecordId, 10) : undefined;
                    this.PhoneExt = odataObject.PhoneExt;
                    this.Cellphone = odataObject.Cellphone;
                    this.Email = odataObject.Email;
                    this.EmailRecordId = (odataObject.EmailRecordId != null) ? parseInt(odataObject.EmailRecordId, 10) : undefined;
                    this.Url = odataObject.Url;
                    this.UrlRecordId = (odataObject.UrlRecordId != null) ? parseInt(odataObject.UrlRecordId, 10) : undefined;
                    this.Name = odataObject.Name;
                    this.PersonNameId = (odataObject.PersonNameId != null) ? parseInt(odataObject.PersonNameId, 10) : undefined;
                    this.FirstName = odataObject.FirstName;
                    this.MiddleName = odataObject.MiddleName;
                    this.LastName = odataObject.LastName;
                    this.DirectoryPartyRecordId = (odataObject.DirectoryPartyRecordId != null) ? parseInt(odataObject.DirectoryPartyRecordId, 10) : undefined;
                    this.PartyNumber = odataObject.PartyNumber;
                    this.CustomerTypeValue = odataObject.CustomerTypeValue;
                    this.Language = odataObject.Language;
                    this.CustomerGroup = odataObject.CustomerGroup;
                    this.CurrencyCode = odataObject.CurrencyCode;
                    this.CNPJCPFNumber = odataObject.CNPJCPFNumber;
                    this.IdentificationNumber = odataObject.IdentificationNumber;
                    this.InvoiceAccount = odataObject.InvoiceAccount;
                    this.MandatoryCreditLimit = odataObject.MandatoryCreditLimit;
                    this.CreditRating = odataObject.CreditRating;
                    this.CreditLimit = (odataObject.CreditLimit != null) ? parseFloat(odataObject.CreditLimit) : undefined;
                    this.Balance = (odataObject.Balance != null) ? parseFloat(odataObject.Balance) : undefined;
                    this.Blocked = odataObject.Blocked;
                    this.BlockedType = odataObject.BlockedType;
                    this.UseOrderNumberReference = odataObject.UseOrderNumberReference;
                    this.OrganizationId = odataObject.OrganizationId;
                    this.UsePurchaseRequest = odataObject.UsePurchaseRequest;
                    this.MultilineDiscountGroup = odataObject.MultilineDiscountGroup;
                    this.TotalDiscountGroup = odataObject.TotalDiscountGroup;
                    this.LineDiscountGroup = odataObject.LineDiscountGroup;
                    this.TaxGroup = odataObject.TaxGroup;
                    this.SalesTaxGroup = odataObject.SalesTaxGroup;
                    this.TaxExemptNumber = odataObject.TaxExemptNumber;
                    this.VatNumber = odataObject.VatNumber;
                    this.TaxOffice = odataObject.TaxOffice;
                    this.NonChargeableAccount = odataObject.NonChargeableAccount;
                    this.Tag = odataObject.Tag;
                    this.ReceiptSettings = odataObject.ReceiptSettings;
                    this.ReceiptEmail = odataObject.ReceiptEmail;
                    this.RetailCustomerTableRecordId = (odataObject.RetailCustomerTableRecordId != null) ? parseInt(odataObject.RetailCustomerTableRecordId, 10) : undefined;
                    this.OfflineImage = odataObject.OfflineImage;
                    this.IsAsyncCustomer = odataObject.IsAsyncCustomer;
                    this.NewCustomerPartyNumber = odataObject.NewCustomerPartyNumber;
                    this.CustomerAffiliations = undefined;
                    if (odataObject.CustomerAffiliations) {
                        this.CustomerAffiliations = [];
                        for (var i = 0; i < odataObject.CustomerAffiliations.length; i++) {
                            if (odataObject.CustomerAffiliations[i] != null) {
                                if (odataObject.CustomerAffiliations[i]['@odata.type'] != null) {
                                    var className = odataObject.CustomerAffiliations[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.CustomerAffiliations[i] = new Commerce.Proxy.Entities[className](odataObject.CustomerAffiliations[i]);
                                    }
                                }
                                else {
                                    this.CustomerAffiliations[i] = new CustomerAffiliationClass(odataObject.CustomerAffiliations[i]);
                                }
                            }
                            else {
                                this.CustomerAffiliations[i] = undefined;
                            }
                        }
                    }
                    this.Addresses = undefined;
                    if (odataObject.Addresses) {
                        this.Addresses = [];
                        for (var i = 0; i < odataObject.Addresses.length; i++) {
                            if (odataObject.Addresses[i] != null) {
                                if (odataObject.Addresses[i]['@odata.type'] != null) {
                                    var className = odataObject.Addresses[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.Addresses[i] = new Commerce.Proxy.Entities[className](odataObject.Addresses[i]);
                                    }
                                }
                                else {
                                    this.Addresses[i] = new AddressClass(odataObject.Addresses[i]);
                                }
                            }
                            else {
                                this.Addresses[i] = undefined;
                            }
                        }
                    }
                    this.Attributes = undefined;
                    if (odataObject.Attributes) {
                        this.Attributes = [];
                        for (var i = 0; i < odataObject.Attributes.length; i++) {
                            if (odataObject.Attributes[i] != null) {
                                if (odataObject.Attributes[i]['@odata.type'] != null) {
                                    var className = odataObject.Attributes[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.Attributes[i] = new Commerce.Proxy.Entities[className](odataObject.Attributes[i]);
                                    }
                                }
                                else {
                                    this.Attributes[i] = new CustomerAttributeClass(odataObject.Attributes[i]);
                                }
                            }
                            else {
                                this.Attributes[i] = undefined;
                            }
                        }
                    }
                    this.Images = undefined;
                    if (odataObject.Images) {
                        this.Images = [];
                        for (var i = 0; i < odataObject.Images.length; i++) {
                            if (odataObject.Images[i] != null) {
                                if (odataObject.Images[i]['@odata.type'] != null) {
                                    var className = odataObject.Images[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.Images[i] = new Commerce.Proxy.Entities[className](odataObject.Images[i]);
                                    }
                                }
                                else {
                                    this.Images[i] = new MediaLocationClass(odataObject.Images[i]);
                                }
                            }
                            else {
                                this.Images[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return CustomerClass;
            }());
            Entities.CustomerClass = CustomerClass;
            var EmployeeClass = (function () {
                function EmployeeClass(odataObject) {
                    odataObject = odataObject || {};
                    this.StaffId = odataObject.StaffId;
                    this.NameOnReceipt = odataObject.NameOnReceipt;
                    this.Name = odataObject.Name;
                    this.CultureName = odataObject.CultureName;
                    this.NumberOfDaysToPasswordExpiry = odataObject.NumberOfDaysToPasswordExpiry;
                    if (odataObject.Permissions == null) {
                        this.Permissions = undefined;
                    }
                    else if (odataObject.Permissions['@odata.type'] == null) {
                        this.Permissions = new EmployeePermissionsClass(odataObject.Permissions);
                    }
                    else {
                        var className = odataObject.Permissions['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.Permissions = new Commerce.Proxy.Entities[className](odataObject.Permissions);
                        }
                    }
                    this.Images = undefined;
                    if (odataObject.Images) {
                        this.Images = [];
                        for (var i = 0; i < odataObject.Images.length; i++) {
                            if (odataObject.Images[i] != null) {
                                if (odataObject.Images[i]['@odata.type'] != null) {
                                    var className = odataObject.Images[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.Images[i] = new Commerce.Proxy.Entities[className](odataObject.Images[i]);
                                    }
                                }
                                else {
                                    this.Images[i] = new MediaLocationClass(odataObject.Images[i]);
                                }
                            }
                            else {
                                this.Images[i] = undefined;
                            }
                        }
                    }
                    this.DefaultImage = odataObject.DefaultImage;
                    this.DefaultCommissionSalesGroup = odataObject.DefaultCommissionSalesGroup;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return EmployeeClass;
            }());
            Entities.EmployeeClass = EmployeeClass;
            var SalesOrderClass = (function () {
                function SalesOrderClass(odataObject) {
                    odataObject = odataObject || {};
                    this.DocumentStatusValue = odataObject.DocumentStatusValue;
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.StatusValue = odataObject.StatusValue;
                    this.AffiliationLoyaltyTierLines = undefined;
                    if (odataObject.AffiliationLoyaltyTierLines) {
                        this.AffiliationLoyaltyTierLines = [];
                        for (var i = 0; i < odataObject.AffiliationLoyaltyTierLines.length; i++) {
                            if (odataObject.AffiliationLoyaltyTierLines[i] != null) {
                                if (odataObject.AffiliationLoyaltyTierLines[i]['@odata.type'] != null) {
                                    var className = odataObject.AffiliationLoyaltyTierLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.AffiliationLoyaltyTierLines[i] = new Commerce.Proxy.Entities[className](odataObject.AffiliationLoyaltyTierLines[i]);
                                    }
                                }
                                else {
                                    this.AffiliationLoyaltyTierLines[i] = new SalesAffiliationLoyaltyTierClass(odataObject.AffiliationLoyaltyTierLines[i]);
                                }
                            }
                            else {
                                this.AffiliationLoyaltyTierLines[i] = undefined;
                            }
                        }
                    }
                    this.IsRequiredAmountPaid = odataObject.IsRequiredAmountPaid;
                    this.IsDiscountFullyCalculated = odataObject.IsDiscountFullyCalculated;
                    this.AmountDue = (odataObject.AmountDue != null) ? parseFloat(odataObject.AmountDue) : undefined;
                    this.EstimatedShippingAmount = (odataObject.EstimatedShippingAmount != null) ? parseFloat(odataObject.EstimatedShippingAmount) : undefined;
                    this.AmountPaid = (odataObject.AmountPaid != null) ? parseFloat(odataObject.AmountPaid) : undefined;
                    this.AttributeValues = undefined;
                    if (odataObject.AttributeValues) {
                        this.AttributeValues = [];
                        for (var i = 0; i < odataObject.AttributeValues.length; i++) {
                            if (odataObject.AttributeValues[i] != null) {
                                if (odataObject.AttributeValues[i]['@odata.type'] != null) {
                                    var className = odataObject.AttributeValues[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.AttributeValues[i] = new Commerce.Proxy.Entities[className](odataObject.AttributeValues[i]);
                                    }
                                }
                                else {
                                    this.AttributeValues[i] = new AttributeValueBaseClass(odataObject.AttributeValues[i]);
                                }
                            }
                            else {
                                this.AttributeValues[i] = undefined;
                            }
                        }
                    }
                    this.AvailableDepositAmount = (odataObject.AvailableDepositAmount != null) ? parseFloat(odataObject.AvailableDepositAmount) : undefined;
                    this.BeginDateTime = (odataObject.BeginDateTime instanceof Date) ? odataObject.BeginDateTime
                        : (odataObject.BeginDateTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.BeginDateTime, "Edm.DateTimeOffset", false) : undefined;
                    this.CreatedDateTime = (odataObject.CreatedDateTime instanceof Date) ? odataObject.CreatedDateTime
                        : (odataObject.CreatedDateTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.CreatedDateTime, "Edm.DateTimeOffset", false) : undefined;
                    this.BusinessDate = (odataObject.BusinessDate instanceof Date) ? odataObject.BusinessDate
                        : (odataObject.BusinessDate != null) ? OData.jsonLightReadStringPropertyValue(odataObject.BusinessDate, "Edm.DateTimeOffset", false) : undefined;
                    this.CalculatedDepositAmount = (odataObject.CalculatedDepositAmount != null) ? parseFloat(odataObject.CalculatedDepositAmount) : undefined;
                    this.CancellationCharge = (odataObject.CancellationCharge != null) ? parseFloat(odataObject.CancellationCharge) : undefined;
                    this.ChannelId = (odataObject.ChannelId != null) ? parseInt(odataObject.ChannelId, 10) : undefined;
                    this.ChannelReferenceId = odataObject.ChannelReferenceId;
                    this.ChargeAmount = (odataObject.ChargeAmount != null) ? parseFloat(odataObject.ChargeAmount) : undefined;
                    this.ChargeLines = undefined;
                    if (odataObject.ChargeLines) {
                        this.ChargeLines = [];
                        for (var i = 0; i < odataObject.ChargeLines.length; i++) {
                            if (odataObject.ChargeLines[i] != null) {
                                if (odataObject.ChargeLines[i]['@odata.type'] != null) {
                                    var className = odataObject.ChargeLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ChargeLines[i] = new Commerce.Proxy.Entities[className](odataObject.ChargeLines[i]);
                                    }
                                }
                                else {
                                    this.ChargeLines[i] = new ChargeLineClass(odataObject.ChargeLines[i]);
                                }
                            }
                            else {
                                this.ChargeLines[i] = undefined;
                            }
                        }
                    }
                    this.Comment = odataObject.Comment;
                    this.Coupons = undefined;
                    if (odataObject.Coupons) {
                        this.Coupons = [];
                        for (var i = 0; i < odataObject.Coupons.length; i++) {
                            if (odataObject.Coupons[i] != null) {
                                if (odataObject.Coupons[i]['@odata.type'] != null) {
                                    var className = odataObject.Coupons[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.Coupons[i] = new Commerce.Proxy.Entities[className](odataObject.Coupons[i]);
                                    }
                                }
                                else {
                                    this.Coupons[i] = new CouponClass(odataObject.Coupons[i]);
                                }
                            }
                            else {
                                this.Coupons[i] = undefined;
                            }
                        }
                    }
                    this.InvoiceComment = odataObject.InvoiceComment;
                    this.ContactInformationCollection = undefined;
                    if (odataObject.ContactInformationCollection) {
                        this.ContactInformationCollection = [];
                        for (var i = 0; i < odataObject.ContactInformationCollection.length; i++) {
                            if (odataObject.ContactInformationCollection[i] != null) {
                                if (odataObject.ContactInformationCollection[i]['@odata.type'] != null) {
                                    var className = odataObject.ContactInformationCollection[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ContactInformationCollection[i] = new Commerce.Proxy.Entities[className](odataObject.ContactInformationCollection[i]);
                                    }
                                }
                                else {
                                    this.ContactInformationCollection[i] = new ContactInformationClass(odataObject.ContactInformationCollection[i]);
                                }
                            }
                            else {
                                this.ContactInformationCollection[i] = undefined;
                            }
                        }
                    }
                    this.CurrencyCode = odataObject.CurrencyCode;
                    this.CustomerAccountDepositLines = undefined;
                    if (odataObject.CustomerAccountDepositLines) {
                        this.CustomerAccountDepositLines = [];
                        for (var i = 0; i < odataObject.CustomerAccountDepositLines.length; i++) {
                            if (odataObject.CustomerAccountDepositLines[i] != null) {
                                if (odataObject.CustomerAccountDepositLines[i]['@odata.type'] != null) {
                                    var className = odataObject.CustomerAccountDepositLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.CustomerAccountDepositLines[i] = new Commerce.Proxy.Entities[className](odataObject.CustomerAccountDepositLines[i]);
                                    }
                                }
                                else {
                                    this.CustomerAccountDepositLines[i] = new CustomerAccountDepositLineClass(odataObject.CustomerAccountDepositLines[i]);
                                }
                            }
                            else {
                                this.CustomerAccountDepositLines[i] = undefined;
                            }
                        }
                    }
                    this.CustomerId = odataObject.CustomerId;
                    this.CustomerOrderModeValue = odataObject.CustomerOrderModeValue;
                    this.CustomerOrderTypeValue = odataObject.CustomerOrderTypeValue;
                    this.DeliveryMode = odataObject.DeliveryMode;
                    this.DeliveryModeChargeAmount = (odataObject.DeliveryModeChargeAmount != null) ? parseFloat(odataObject.DeliveryModeChargeAmount) : undefined;
                    this.DiscountAmount = (odataObject.DiscountAmount != null) ? parseFloat(odataObject.DiscountAmount) : undefined;
                    this.DiscountCodes = undefined;
                    if (odataObject.DiscountCodes) {
                        this.DiscountCodes = [];
                        for (var i = 0; i < odataObject.DiscountCodes.length; i++) {
                            if (odataObject.DiscountCodes[i] != null) {
                                this.DiscountCodes[i] = odataObject.DiscountCodes[i];
                            }
                            else {
                                this.DiscountCodes[i] = undefined;
                            }
                        }
                    }
                    this.EntryStatusValue = odataObject.EntryStatusValue;
                    this.GrossAmount = (odataObject.GrossAmount != null) ? parseFloat(odataObject.GrossAmount) : undefined;
                    this.HasLoyaltyPayment = odataObject.HasLoyaltyPayment;
                    this.Id = odataObject.Id;
                    this.IncomeExpenseLines = undefined;
                    if (odataObject.IncomeExpenseLines) {
                        this.IncomeExpenseLines = [];
                        for (var i = 0; i < odataObject.IncomeExpenseLines.length; i++) {
                            if (odataObject.IncomeExpenseLines[i] != null) {
                                if (odataObject.IncomeExpenseLines[i]['@odata.type'] != null) {
                                    var className = odataObject.IncomeExpenseLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.IncomeExpenseLines[i] = new Commerce.Proxy.Entities[className](odataObject.IncomeExpenseLines[i]);
                                    }
                                }
                                else {
                                    this.IncomeExpenseLines[i] = new IncomeExpenseLineClass(odataObject.IncomeExpenseLines[i]);
                                }
                            }
                            else {
                                this.IncomeExpenseLines[i] = undefined;
                            }
                        }
                    }
                    this.IncomeExpenseTotalAmount = (odataObject.IncomeExpenseTotalAmount != null) ? parseFloat(odataObject.IncomeExpenseTotalAmount) : undefined;
                    this.InventoryLocationId = odataObject.InventoryLocationId;
                    this.IsCreatedOffline = odataObject.IsCreatedOffline;
                    this.IsReturnByReceipt = odataObject.IsReturnByReceipt;
                    this.IsSuspended = odataObject.IsSuspended;
                    this.IsTaxIncludedInPrice = odataObject.IsTaxIncludedInPrice;
                    this.LineDiscount = (odataObject.LineDiscount != null) ? parseFloat(odataObject.LineDiscount) : undefined;
                    this.LineDiscountCalculationTypeValue = odataObject.LineDiscountCalculationTypeValue;
                    this.LoyaltyCardId = odataObject.LoyaltyCardId;
                    this.LoyaltyDiscountAmount = (odataObject.LoyaltyDiscountAmount != null) ? parseFloat(odataObject.LoyaltyDiscountAmount) : undefined;
                    this.LoyaltyManualDiscountAmount = (odataObject.LoyaltyManualDiscountAmount != null) ? parseFloat(odataObject.LoyaltyManualDiscountAmount) : undefined;
                    this.LoyaltyRewardPointLines = undefined;
                    if (odataObject.LoyaltyRewardPointLines) {
                        this.LoyaltyRewardPointLines = [];
                        for (var i = 0; i < odataObject.LoyaltyRewardPointLines.length; i++) {
                            if (odataObject.LoyaltyRewardPointLines[i] != null) {
                                if (odataObject.LoyaltyRewardPointLines[i]['@odata.type'] != null) {
                                    var className = odataObject.LoyaltyRewardPointLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.LoyaltyRewardPointLines[i] = new Commerce.Proxy.Entities[className](odataObject.LoyaltyRewardPointLines[i]);
                                    }
                                }
                                else {
                                    this.LoyaltyRewardPointLines[i] = new LoyaltyRewardPointLineClass(odataObject.LoyaltyRewardPointLines[i]);
                                }
                            }
                            else {
                                this.LoyaltyRewardPointLines[i] = undefined;
                            }
                        }
                    }
                    this.ModifiedDateTime = (odataObject.ModifiedDateTime instanceof Date) ? odataObject.ModifiedDateTime
                        : (odataObject.ModifiedDateTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.ModifiedDateTime, "Edm.DateTimeOffset", false) : undefined;
                    this.Name = odataObject.Name;
                    this.NetAmount = (odataObject.NetAmount != null) ? parseFloat(odataObject.NetAmount) : undefined;
                    this.NetAmountWithoutTax = (odataObject.NetAmountWithoutTax != null) ? parseFloat(odataObject.NetAmountWithoutTax) : undefined;
                    this.NetAmountWithNoTax = (odataObject.NetAmountWithNoTax != null) ? parseFloat(odataObject.NetAmountWithNoTax) : undefined;
                    this.NetAmountWithTax = (odataObject.NetAmountWithTax != null) ? parseFloat(odataObject.NetAmountWithTax) : undefined;
                    this.NumberOfItems = (odataObject.NumberOfItems != null) ? parseFloat(odataObject.NumberOfItems) : undefined;
                    this.OverriddenDepositAmount = (odataObject.OverriddenDepositAmount != null) ? parseFloat(odataObject.OverriddenDepositAmount) : undefined;
                    this.PeriodicDiscountAmount = (odataObject.PeriodicDiscountAmount != null) ? parseFloat(odataObject.PeriodicDiscountAmount) : undefined;
                    this.PrepaymentAmountAppliedOnPickup = (odataObject.PrepaymentAmountAppliedOnPickup != null) ? parseFloat(odataObject.PrepaymentAmountAppliedOnPickup) : undefined;
                    this.PrepaymentAmountInvoiced = (odataObject.PrepaymentAmountInvoiced != null) ? parseFloat(odataObject.PrepaymentAmountInvoiced) : undefined;
                    this.PrepaymentAmountPaid = (odataObject.PrepaymentAmountPaid != null) ? parseFloat(odataObject.PrepaymentAmountPaid) : undefined;
                    this.QuotationExpiryDate = (odataObject.QuotationExpiryDate instanceof Date) ? odataObject.QuotationExpiryDate
                        : (odataObject.QuotationExpiryDate != null) ? OData.jsonLightReadStringPropertyValue(odataObject.QuotationExpiryDate, "Edm.DateTimeOffset", false) : undefined;
                    this.ReasonCodeLines = undefined;
                    if (odataObject.ReasonCodeLines) {
                        this.ReasonCodeLines = [];
                        for (var i = 0; i < odataObject.ReasonCodeLines.length; i++) {
                            if (odataObject.ReasonCodeLines[i] != null) {
                                if (odataObject.ReasonCodeLines[i]['@odata.type'] != null) {
                                    var className = odataObject.ReasonCodeLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ReasonCodeLines[i] = new Commerce.Proxy.Entities[className](odataObject.ReasonCodeLines[i]);
                                    }
                                }
                                else {
                                    this.ReasonCodeLines[i] = new ReasonCodeLineClass(odataObject.ReasonCodeLines[i]);
                                }
                            }
                            else {
                                this.ReasonCodeLines[i] = undefined;
                            }
                        }
                    }
                    this.ReceiptEmail = odataObject.ReceiptEmail;
                    this.ReceiptId = odataObject.ReceiptId;
                    this.RequestedDeliveryDate = (odataObject.RequestedDeliveryDate instanceof Date) ? odataObject.RequestedDeliveryDate
                        : (odataObject.RequestedDeliveryDate != null) ? OData.jsonLightReadStringPropertyValue(odataObject.RequestedDeliveryDate, "Edm.DateTimeOffset", false) : undefined;
                    this.RequiredDepositAmount = (odataObject.RequiredDepositAmount != null) ? parseFloat(odataObject.RequiredDepositAmount) : undefined;
                    this.ReturnTransactionHasLoyaltyPayment = odataObject.ReturnTransactionHasLoyaltyPayment;
                    this.SalesId = odataObject.SalesId;
                    this.SalesPaymentDifference = (odataObject.SalesPaymentDifference != null) ? parseFloat(odataObject.SalesPaymentDifference) : undefined;
                    this.SalesLines = undefined;
                    if (odataObject.SalesLines) {
                        this.SalesLines = [];
                        for (var i = 0; i < odataObject.SalesLines.length; i++) {
                            if (odataObject.SalesLines[i] != null) {
                                if (odataObject.SalesLines[i]['@odata.type'] != null) {
                                    var className = odataObject.SalesLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.SalesLines[i] = new Commerce.Proxy.Entities[className](odataObject.SalesLines[i]);
                                    }
                                }
                                else {
                                    this.SalesLines[i] = new SalesLineClass(odataObject.SalesLines[i]);
                                }
                            }
                            else {
                                this.SalesLines[i] = undefined;
                            }
                        }
                    }
                    this.ShiftId = (odataObject.ShiftId != null) ? parseInt(odataObject.ShiftId, 10) : undefined;
                    this.ShiftTerminalId = odataObject.ShiftTerminalId;
                    if (odataObject.ShippingAddress == null) {
                        this.ShippingAddress = undefined;
                    }
                    else if (odataObject.ShippingAddress['@odata.type'] == null) {
                        this.ShippingAddress = new AddressClass(odataObject.ShippingAddress);
                    }
                    else {
                        var className = odataObject.ShippingAddress['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.ShippingAddress = new Commerce.Proxy.Entities[className](odataObject.ShippingAddress);
                        }
                    }
                    this.StaffId = odataObject.StaffId;
                    this.StatementCode = odataObject.StatementCode;
                    this.StoreId = odataObject.StoreId;
                    this.SubtotalAmount = (odataObject.SubtotalAmount != null) ? parseFloat(odataObject.SubtotalAmount) : undefined;
                    this.SubtotalAmountWithoutTax = (odataObject.SubtotalAmountWithoutTax != null) ? parseFloat(odataObject.SubtotalAmountWithoutTax) : undefined;
                    this.TaxAmount = (odataObject.TaxAmount != null) ? parseFloat(odataObject.TaxAmount) : undefined;
                    this.TaxAmountExclusive = (odataObject.TaxAmountExclusive != null) ? parseFloat(odataObject.TaxAmountExclusive) : undefined;
                    this.TaxAmountInclusive = (odataObject.TaxAmountInclusive != null) ? parseFloat(odataObject.TaxAmountInclusive) : undefined;
                    this.TaxLines = undefined;
                    if (odataObject.TaxLines) {
                        this.TaxLines = [];
                        for (var i = 0; i < odataObject.TaxLines.length; i++) {
                            if (odataObject.TaxLines[i] != null) {
                                if (odataObject.TaxLines[i]['@odata.type'] != null) {
                                    var className = odataObject.TaxLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.TaxLines[i] = new Commerce.Proxy.Entities[className](odataObject.TaxLines[i]);
                                    }
                                }
                                else {
                                    this.TaxLines[i] = new TaxLineClass(odataObject.TaxLines[i]);
                                }
                            }
                            else {
                                this.TaxLines[i] = undefined;
                            }
                        }
                    }
                    this.TaxOnCancellationCharge = (odataObject.TaxOnCancellationCharge != null) ? parseFloat(odataObject.TaxOnCancellationCharge) : undefined;
                    this.TaxOverrideCode = odataObject.TaxOverrideCode;
                    this.TenderLines = undefined;
                    if (odataObject.TenderLines) {
                        this.TenderLines = [];
                        for (var i = 0; i < odataObject.TenderLines.length; i++) {
                            if (odataObject.TenderLines[i] != null) {
                                if (odataObject.TenderLines[i]['@odata.type'] != null) {
                                    var className = odataObject.TenderLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.TenderLines[i] = new Commerce.Proxy.Entities[className](odataObject.TenderLines[i]);
                                    }
                                }
                                else {
                                    this.TenderLines[i] = new TenderLineClass(odataObject.TenderLines[i]);
                                }
                            }
                            else {
                                this.TenderLines[i] = undefined;
                            }
                        }
                    }
                    this.TerminalId = odataObject.TerminalId;
                    this.TotalAmount = (odataObject.TotalAmount != null) ? parseFloat(odataObject.TotalAmount) : undefined;
                    this.TotalDiscount = (odataObject.TotalDiscount != null) ? parseFloat(odataObject.TotalDiscount) : undefined;
                    this.TotalManualDiscountAmount = (odataObject.TotalManualDiscountAmount != null) ? parseFloat(odataObject.TotalManualDiscountAmount) : undefined;
                    this.TotalManualDiscountPercentage = (odataObject.TotalManualDiscountPercentage != null) ? parseFloat(odataObject.TotalManualDiscountPercentage) : undefined;
                    this.TransactionTypeValue = odataObject.TransactionTypeValue;
                    this.TaxCalculationTypeValue = odataObject.TaxCalculationTypeValue;
                    this.CommissionSalesGroup = odataObject.CommissionSalesGroup;
                    this.FiscalTransactions = undefined;
                    if (odataObject.FiscalTransactions) {
                        this.FiscalTransactions = [];
                        for (var i = 0; i < odataObject.FiscalTransactions.length; i++) {
                            if (odataObject.FiscalTransactions[i] != null) {
                                if (odataObject.FiscalTransactions[i]['@odata.type'] != null) {
                                    var className = odataObject.FiscalTransactions[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.FiscalTransactions[i] = new Commerce.Proxy.Entities[className](odataObject.FiscalTransactions[i]);
                                    }
                                }
                                else {
                                    this.FiscalTransactions[i] = new FiscalTransactionClass(odataObject.FiscalTransactions[i]);
                                }
                            }
                            else {
                                this.FiscalTransactions[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return SalesOrderClass;
            }());
            Entities.SalesOrderClass = SalesOrderClass;
            var ShiftClass = (function () {
                function ShiftClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ShiftId = (odataObject.ShiftId != null) ? parseInt(odataObject.ShiftId, 10) : undefined;
                    this.TerminalId = odataObject.TerminalId;
                    this.StartingAmountTotal = (odataObject.StartingAmountTotal != null) ? parseFloat(odataObject.StartingAmountTotal) : undefined;
                    this.FloatingEntryAmountTotal = (odataObject.FloatingEntryAmountTotal != null) ? parseFloat(odataObject.FloatingEntryAmountTotal) : undefined;
                    this.AddToTenderAmountTotal = (odataObject.AddToTenderAmountTotal != null) ? parseFloat(odataObject.AddToTenderAmountTotal) : undefined;
                    this.SafeDropTotal = (odataObject.SafeDropTotal != null) ? parseFloat(odataObject.SafeDropTotal) : undefined;
                    this.BankDropTotal = (odataObject.BankDropTotal != null) ? parseFloat(odataObject.BankDropTotal) : undefined;
                    this.RemoveTenderAmountTotal = (odataObject.RemoveTenderAmountTotal != null) ? parseFloat(odataObject.RemoveTenderAmountTotal) : undefined;
                    this.DeclareTenderAmountTotal = (odataObject.DeclareTenderAmountTotal != null) ? parseFloat(odataObject.DeclareTenderAmountTotal) : undefined;
                    this.OverShortTotal = (odataObject.OverShortTotal != null) ? parseFloat(odataObject.OverShortTotal) : undefined;
                    this.TenderedTotal = (odataObject.TenderedTotal != null) ? parseFloat(odataObject.TenderedTotal) : undefined;
                    this.ChangeTotal = (odataObject.ChangeTotal != null) ? parseFloat(odataObject.ChangeTotal) : undefined;
                    this.IncomeAccountTotal = (odataObject.IncomeAccountTotal != null) ? parseFloat(odataObject.IncomeAccountTotal) : undefined;
                    this.ExpenseAccountTotal = (odataObject.ExpenseAccountTotal != null) ? parseFloat(odataObject.ExpenseAccountTotal) : undefined;
                    this.CashDrawer = odataObject.CashDrawer;
                    this.StoreRecordId = (odataObject.StoreRecordId != null) ? parseInt(odataObject.StoreRecordId, 10) : undefined;
                    this.StoreId = odataObject.StoreId;
                    this.StaffId = odataObject.StaffId;
                    this.CurrentStaffId = odataObject.CurrentStaffId;
                    this.StatusValue = odataObject.StatusValue;
                    this.StartDateTime = (odataObject.StartDateTime instanceof Date) ? odataObject.StartDateTime
                        : (odataObject.StartDateTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.StartDateTime, "Edm.DateTimeOffset", false) : undefined;
                    this.CloseDateTime = (odataObject.CloseDateTime instanceof Date) ? odataObject.CloseDateTime
                        : (odataObject.CloseDateTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.CloseDateTime, "Edm.DateTimeOffset", false) : undefined;
                    this.ClosedAtTerminalId = odataObject.ClosedAtTerminalId;
                    this.CurrentTerminalId = odataObject.CurrentTerminalId;
                    this.SalesTotal = (odataObject.SalesTotal != null) ? parseFloat(odataObject.SalesTotal) : undefined;
                    this.StatusDateTime = (odataObject.StatusDateTime instanceof Date) ? odataObject.StatusDateTime
                        : (odataObject.StatusDateTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.StatusDateTime, "Edm.DateTimeOffset", false) : undefined;
                    this.ReturnsTotal = (odataObject.ReturnsTotal != null) ? parseFloat(odataObject.ReturnsTotal) : undefined;
                    this.PaidToAccountTotal = (odataObject.PaidToAccountTotal != null) ? parseFloat(odataObject.PaidToAccountTotal) : undefined;
                    this.TaxTotal = (odataObject.TaxTotal != null) ? parseFloat(odataObject.TaxTotal) : undefined;
                    this.DiscountTotal = (odataObject.DiscountTotal != null) ? parseFloat(odataObject.DiscountTotal) : undefined;
                    this.RoundedAmountTotal = (odataObject.RoundedAmountTotal != null) ? parseFloat(odataObject.RoundedAmountTotal) : undefined;
                    this.CustomerCount = odataObject.CustomerCount;
                    this.SaleTransactionCount = odataObject.SaleTransactionCount;
                    this.NoSaleTransactionCount = odataObject.NoSaleTransactionCount;
                    this.VoidTransactionCount = odataObject.VoidTransactionCount;
                    this.LogOnTransactionCount = odataObject.LogOnTransactionCount;
                    this.SuspendedTransactionCount = odataObject.SuspendedTransactionCount;
                    this.TransactionCount = odataObject.TransactionCount;
                    this.ReceiptsCount = odataObject.ReceiptsCount;
                    this.ReturnsCount = odataObject.ReturnsCount;
                    this.GoodsSoldQty = (odataObject.GoodsSoldQty != null) ? parseFloat(odataObject.GoodsSoldQty) : undefined;
                    this.ServicesSoldQty = (odataObject.ServicesSoldQty != null) ? parseFloat(odataObject.ServicesSoldQty) : undefined;
                    this.ReceiptCopiesCount = odataObject.ReceiptCopiesCount;
                    this.ReceiptCopiesTotal = (odataObject.ReceiptCopiesTotal != null) ? parseFloat(odataObject.ReceiptCopiesTotal) : undefined;
                    this.PriceOverrideTotal = (odataObject.PriceOverrideTotal != null) ? parseFloat(odataObject.PriceOverrideTotal) : undefined;
                    this.SuspendedTotal = (odataObject.SuspendedTotal != null) ? parseFloat(odataObject.SuspendedTotal) : undefined;
                    this.SalesTotalIncludingTax = (odataObject.SalesTotalIncludingTax != null) ? parseFloat(odataObject.SalesTotalIncludingTax) : undefined;
                    this.SalesTotalExcludingTax = (odataObject.SalesTotalExcludingTax != null) ? parseFloat(odataObject.SalesTotalExcludingTax) : undefined;
                    this.SalesGrandTotal = (odataObject.SalesGrandTotal != null) ? parseFloat(odataObject.SalesGrandTotal) : undefined;
                    this.ReturnsGrandTotal = (odataObject.ReturnsGrandTotal != null) ? parseFloat(odataObject.ReturnsGrandTotal) : undefined;
                    this.TaxLines = undefined;
                    if (odataObject.TaxLines) {
                        this.TaxLines = [];
                        for (var i = 0; i < odataObject.TaxLines.length; i++) {
                            if (odataObject.TaxLines[i] != null) {
                                if (odataObject.TaxLines[i]['@odata.type'] != null) {
                                    var className = odataObject.TaxLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.TaxLines[i] = new Commerce.Proxy.Entities[className](odataObject.TaxLines[i]);
                                    }
                                }
                                else {
                                    this.TaxLines[i] = new ShiftTaxLineClass(odataObject.TaxLines[i]);
                                }
                            }
                            else {
                                this.TaxLines[i] = undefined;
                            }
                        }
                    }
                    this.TenderLines = undefined;
                    if (odataObject.TenderLines) {
                        this.TenderLines = [];
                        for (var i = 0; i < odataObject.TenderLines.length; i++) {
                            if (odataObject.TenderLines[i] != null) {
                                if (odataObject.TenderLines[i]['@odata.type'] != null) {
                                    var className = odataObject.TenderLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.TenderLines[i] = new Commerce.Proxy.Entities[className](odataObject.TenderLines[i]);
                                    }
                                }
                                else {
                                    this.TenderLines[i] = new ShiftTenderLineClass(odataObject.TenderLines[i]);
                                }
                            }
                            else {
                                this.TenderLines[i] = undefined;
                            }
                        }
                    }
                    this.AccountLines = undefined;
                    if (odataObject.AccountLines) {
                        this.AccountLines = [];
                        for (var i = 0; i < odataObject.AccountLines.length; i++) {
                            if (odataObject.AccountLines[i] != null) {
                                if (odataObject.AccountLines[i]['@odata.type'] != null) {
                                    var className = odataObject.AccountLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.AccountLines[i] = new Commerce.Proxy.Entities[className](odataObject.AccountLines[i]);
                                    }
                                }
                                else {
                                    this.AccountLines[i] = new ShiftAccountLineClass(odataObject.AccountLines[i]);
                                }
                            }
                            else {
                                this.AccountLines[i] = undefined;
                            }
                        }
                    }
                    this.IsShared = odataObject.IsShared;
                    this.GiftCardsTotal = (odataObject.GiftCardsTotal != null) ? parseFloat(odataObject.GiftCardsTotal) : undefined;
                    this.VoidedSalesTotal = (odataObject.VoidedSalesTotal != null) ? parseFloat(odataObject.VoidedSalesTotal) : undefined;
                    this.ShiftSalesTotal = (odataObject.ShiftSalesTotal != null) ? parseFloat(odataObject.ShiftSalesTotal) : undefined;
                    this.ShiftReturnsTotal = (odataObject.ShiftReturnsTotal != null) ? parseFloat(odataObject.ShiftReturnsTotal) : undefined;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ShiftClass;
            }());
            Entities.ShiftClass = ShiftClass;
            var StockCountJournalClass = (function () {
                function StockCountJournalClass(odataObject) {
                    odataObject = odataObject || {};
                    this.JournalId = odataObject.JournalId;
                    this.RecordId = odataObject.RecordId;
                    this.Description = odataObject.Description;
                    this.InventLocationId = odataObject.InventLocationId;
                    this.DataAreaId = odataObject.DataAreaId;
                    this.StockCountTransactionLines = undefined;
                    if (odataObject.StockCountTransactionLines) {
                        this.StockCountTransactionLines = [];
                        for (var i = 0; i < odataObject.StockCountTransactionLines.length; i++) {
                            if (odataObject.StockCountTransactionLines[i] != null) {
                                if (odataObject.StockCountTransactionLines[i]['@odata.type'] != null) {
                                    var className = odataObject.StockCountTransactionLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.StockCountTransactionLines[i] = new Commerce.Proxy.Entities[className](odataObject.StockCountTransactionLines[i]);
                                    }
                                }
                                else {
                                    this.StockCountTransactionLines[i] = new StockCountJournalTransactionClass(odataObject.StockCountTransactionLines[i]);
                                }
                            }
                            else {
                                this.StockCountTransactionLines[i] = undefined;
                            }
                        }
                    }
                    this.Worker = odataObject.Worker;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return StockCountJournalClass;
            }());
            Entities.StockCountJournalClass = StockCountJournalClass;
            var OrgUnitClass = (function () {
                function OrgUnitClass(odataObject) {
                    odataObject = odataObject || {};
                    this.OrgUnitNumber = odataObject.OrgUnitNumber;
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.InventoryLocationId = odataObject.InventoryLocationId;
                    this.OMOperatingUnitNumber = odataObject.OMOperatingUnitNumber;
                    this.TaxGroup = odataObject.TaxGroup;
                    this.FunctionalityProfileId = odataObject.FunctionalityProfileId;
                    this.UseCustomerBasedTax = odataObject.UseCustomerBasedTax;
                    this.UseDestinationBasedTax = odataObject.UseDestinationBasedTax;
                    this.Currency = odataObject.Currency;
                    if (odataObject.OrgUnitAddress == null) {
                        this.OrgUnitAddress = undefined;
                    }
                    else if (odataObject.OrgUnitAddress['@odata.type'] == null) {
                        this.OrgUnitAddress = new AddressClass(odataObject.OrgUnitAddress);
                    }
                    else {
                        var className = odataObject.OrgUnitAddress['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.OrgUnitAddress = new Commerce.Proxy.Entities[className](odataObject.OrgUnitAddress);
                        }
                    }
                    this.OrgUnitFullAddress = odataObject.OrgUnitFullAddress;
                    this.OrgUnitName = odataObject.OrgUnitName;
                    this.Latitude = (odataObject.Latitude != null) ? parseFloat(odataObject.Latitude) : undefined;
                    this.Longitude = (odataObject.Longitude != null) ? parseFloat(odataObject.Longitude) : undefined;
                    this.EmailReceiptProfileId = odataObject.EmailReceiptProfileId;
                    this.DefaultCustomerAccount = odataObject.DefaultCustomerAccount;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return OrgUnitClass;
            }());
            Entities.OrgUnitClass = OrgUnitClass;
            var ProductClass = (function () {
                function ProductClass(odataObject) {
                    odataObject = odataObject || {};
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.ProductName = odataObject.ProductName;
                    this.ProductNumber = odataObject.ProductNumber;
                    this.Description = odataObject.Description;
                    this.IsMasterProduct = odataObject.IsMasterProduct;
                    this.IsKit = odataObject.IsKit;
                    this.ItemId = odataObject.ItemId;
                    this.HasLinkedProducts = odataObject.HasLinkedProducts;
                    if (odataObject.Rules == null) {
                        this.Rules = undefined;
                    }
                    else if (odataObject.Rules['@odata.type'] == null) {
                        this.Rules = new ProductRulesClass(odataObject.Rules);
                    }
                    else {
                        var className = odataObject.Rules['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.Rules = new Commerce.Proxy.Entities[className](odataObject.Rules);
                        }
                    }
                    this.DefaultUnitOfMeasure = odataObject.DefaultUnitOfMeasure;
                    this.Name = odataObject.Name;
                    this.Locale = odataObject.Locale;
                    this.OfflineImage = odataObject.OfflineImage;
                    this.IsRemote = odataObject.IsRemote;
                    if (odataObject.ChangeTrackingInformation == null) {
                        this.ChangeTrackingInformation = undefined;
                    }
                    else if (odataObject.ChangeTrackingInformation['@odata.type'] == null) {
                        this.ChangeTrackingInformation = new ProductChangeTrackingInformationClass(odataObject.ChangeTrackingInformation);
                    }
                    else {
                        var className = odataObject.ChangeTrackingInformation['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.ChangeTrackingInformation = new Commerce.Proxy.Entities[className](odataObject.ChangeTrackingInformation);
                        }
                    }
                    if (odataObject.Image == null) {
                        this.Image = undefined;
                    }
                    else if (odataObject.Image['@odata.type'] == null) {
                        this.Image = new RichMediaLocationsClass(odataObject.Image);
                    }
                    else {
                        var className = odataObject.Image['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.Image = new Commerce.Proxy.Entities[className](odataObject.Image);
                        }
                    }
                    this.UnitsOfMeasureSymbol = undefined;
                    if (odataObject.UnitsOfMeasureSymbol) {
                        this.UnitsOfMeasureSymbol = [];
                        for (var i = 0; i < odataObject.UnitsOfMeasureSymbol.length; i++) {
                            if (odataObject.UnitsOfMeasureSymbol[i] != null) {
                                this.UnitsOfMeasureSymbol[i] = odataObject.UnitsOfMeasureSymbol[i];
                            }
                            else {
                                this.UnitsOfMeasureSymbol[i] = undefined;
                            }
                        }
                    }
                    this.LinkedProducts = undefined;
                    if (odataObject.LinkedProducts) {
                        this.LinkedProducts = [];
                        for (var i = 0; i < odataObject.LinkedProducts.length; i++) {
                            if (odataObject.LinkedProducts[i] != null) {
                                if (odataObject.LinkedProducts[i]['@odata.type'] != null) {
                                    var className = odataObject.LinkedProducts[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.LinkedProducts[i] = new Commerce.Proxy.Entities[className](odataObject.LinkedProducts[i]);
                                    }
                                }
                                else {
                                    this.LinkedProducts[i] = new LinkedProductClass(odataObject.LinkedProducts[i]);
                                }
                            }
                            else {
                                this.LinkedProducts[i] = undefined;
                            }
                        }
                    }
                    this.BasePrice = (odataObject.BasePrice != null) ? parseFloat(odataObject.BasePrice) : undefined;
                    this.Price = (odataObject.Price != null) ? parseFloat(odataObject.Price) : undefined;
                    this.AdjustedPrice = (odataObject.AdjustedPrice != null) ? parseFloat(odataObject.AdjustedPrice) : undefined;
                    if (odataObject.RetailContext == null) {
                        this.RetailContext = undefined;
                    }
                    else if (odataObject.RetailContext['@odata.type'] == null) {
                        this.RetailContext = new ProjectionDomainClass(odataObject.RetailContext);
                    }
                    else {
                        var className = odataObject.RetailContext['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.RetailContext = new Commerce.Proxy.Entities[className](odataObject.RetailContext);
                        }
                    }
                    this.PrimaryCategoryId = (odataObject.PrimaryCategoryId != null) ? parseInt(odataObject.PrimaryCategoryId, 10) : undefined;
                    this.CategoryIds = undefined;
                    if (odataObject.CategoryIds) {
                        this.CategoryIds = [];
                        for (var i = 0; i < odataObject.CategoryIds.length; i++) {
                            if (odataObject.CategoryIds[i] != null) {
                                this.CategoryIds[i] = parseInt(odataObject.CategoryIds[i], 10);
                            }
                            else {
                                this.CategoryIds[i] = undefined;
                            }
                        }
                    }
                    this.RelatedProducts = undefined;
                    if (odataObject.RelatedProducts) {
                        this.RelatedProducts = [];
                        for (var i = 0; i < odataObject.RelatedProducts.length; i++) {
                            if (odataObject.RelatedProducts[i] != null) {
                                if (odataObject.RelatedProducts[i]['@odata.type'] != null) {
                                    var className = odataObject.RelatedProducts[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.RelatedProducts[i] = new Commerce.Proxy.Entities[className](odataObject.RelatedProducts[i]);
                                    }
                                }
                                else {
                                    this.RelatedProducts[i] = new RelatedProductClass(odataObject.RelatedProducts[i]);
                                }
                            }
                            else {
                                this.RelatedProducts[i] = undefined;
                            }
                        }
                    }
                    this.ProductsRelatedToThis = undefined;
                    if (odataObject.ProductsRelatedToThis) {
                        this.ProductsRelatedToThis = [];
                        for (var i = 0; i < odataObject.ProductsRelatedToThis.length; i++) {
                            if (odataObject.ProductsRelatedToThis[i] != null) {
                                if (odataObject.ProductsRelatedToThis[i]['@odata.type'] != null) {
                                    var className = odataObject.ProductsRelatedToThis[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ProductsRelatedToThis[i] = new Commerce.Proxy.Entities[className](odataObject.ProductsRelatedToThis[i]);
                                    }
                                }
                                else {
                                    this.ProductsRelatedToThis[i] = new RelatedProductClass(odataObject.ProductsRelatedToThis[i]);
                                }
                            }
                            else {
                                this.ProductsRelatedToThis[i] = undefined;
                            }
                        }
                    }
                    this.ProductSchema = undefined;
                    if (odataObject.ProductSchema) {
                        this.ProductSchema = [];
                        for (var i = 0; i < odataObject.ProductSchema.length; i++) {
                            if (odataObject.ProductSchema[i] != null) {
                                this.ProductSchema[i] = odataObject.ProductSchema[i];
                            }
                            else {
                                this.ProductSchema[i] = undefined;
                            }
                        }
                    }
                    this.ProductProperties = undefined;
                    if (odataObject.ProductProperties) {
                        this.ProductProperties = [];
                        for (var i = 0; i < odataObject.ProductProperties.length; i++) {
                            if (odataObject.ProductProperties[i] != null) {
                                if (odataObject.ProductProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ProductProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ProductProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ProductProperties[i]);
                                    }
                                }
                                else {
                                    this.ProductProperties[i] = new ProductPropertyTranslationClass(odataObject.ProductProperties[i]);
                                }
                            }
                            else {
                                this.ProductProperties[i] = undefined;
                            }
                        }
                    }
                    if (odataObject.CompositionInformation == null) {
                        this.CompositionInformation = undefined;
                    }
                    else if (odataObject.CompositionInformation['@odata.type'] == null) {
                        this.CompositionInformation = new ProductCompositionInformationClass(odataObject.CompositionInformation);
                    }
                    else {
                        var className = odataObject.CompositionInformation['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.CompositionInformation = new Commerce.Proxy.Entities[className](odataObject.CompositionInformation);
                        }
                    }
                    this.ParentKits = undefined;
                    if (odataObject.ParentKits) {
                        this.ParentKits = [];
                        for (var i = 0; i < odataObject.ParentKits.length; i++) {
                            if (odataObject.ParentKits[i] != null) {
                                if (odataObject.ParentKits[i]['@odata.type'] != null) {
                                    var className = odataObject.ParentKits[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ParentKits[i] = new Commerce.Proxy.Entities[className](odataObject.ParentKits[i]);
                                    }
                                }
                                else {
                                    this.ParentKits[i] = new KitComponentClass(odataObject.ParentKits[i]);
                                }
                            }
                            else {
                                this.ParentKits[i] = undefined;
                            }
                        }
                    }
                    this.SearchName = odataObject.SearchName;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ProductClass;
            }());
            Entities.ProductClass = ProductClass;
            var ProductCatalogClass = (function () {
                function ProductCatalogClass(odataObject) {
                    odataObject = odataObject || {};
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.Name = odataObject.Name;
                    this.Description = odataObject.Description;
                    this.Language = odataObject.Language;
                    this.IsSnapshotEnabled = odataObject.IsSnapshotEnabled;
                    this.ValidFrom = (odataObject.ValidFrom instanceof Date) ? odataObject.ValidFrom
                        : (odataObject.ValidFrom != null) ? OData.jsonLightReadStringPropertyValue(odataObject.ValidFrom, "Edm.DateTimeOffset", false) : undefined;
                    this.ValidTo = (odataObject.ValidTo instanceof Date) ? odataObject.ValidTo
                        : (odataObject.ValidTo != null) ? OData.jsonLightReadStringPropertyValue(odataObject.ValidTo, "Edm.DateTimeOffset", false) : undefined;
                    this.CreatedOn = (odataObject.CreatedOn instanceof Date) ? odataObject.CreatedOn
                        : (odataObject.CreatedOn != null) ? OData.jsonLightReadStringPropertyValue(odataObject.CreatedOn, "Edm.DateTimeOffset", false) : undefined;
                    this.ModifiedOn = (odataObject.ModifiedOn instanceof Date) ? odataObject.ModifiedOn
                        : (odataObject.ModifiedOn != null) ? OData.jsonLightReadStringPropertyValue(odataObject.ModifiedOn, "Edm.DateTimeOffset", false) : undefined;
                    this.PublishedOn = (odataObject.PublishedOn instanceof Date) ? odataObject.PublishedOn
                        : (odataObject.PublishedOn != null) ? OData.jsonLightReadStringPropertyValue(odataObject.PublishedOn, "Edm.DateTimeOffset", false) : undefined;
                    this.Images = undefined;
                    if (odataObject.Images) {
                        this.Images = [];
                        for (var i = 0; i < odataObject.Images.length; i++) {
                            if (odataObject.Images[i] != null) {
                                if (odataObject.Images[i]['@odata.type'] != null) {
                                    var className = odataObject.Images[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.Images[i] = new Commerce.Proxy.Entities[className](odataObject.Images[i]);
                                    }
                                }
                                else {
                                    this.Images[i] = new MediaLocationClass(odataObject.Images[i]);
                                }
                            }
                            else {
                                this.Images[i] = undefined;
                            }
                        }
                    }
                    this.ChannelId = (odataObject.ChannelId != null) ? parseInt(odataObject.ChannelId, 10) : undefined;
                    this.DefaultImage = odataObject.DefaultImage;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ProductCatalogClass;
            }());
            Entities.ProductCatalogClass = ProductCatalogClass;
            var CommerceListClass = (function () {
                function CommerceListClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Id = (odataObject.Id != null) ? parseInt(odataObject.Id, 10) : undefined;
                    this.Name = odataObject.Name;
                    this.CustomerId = odataObject.CustomerId;
                    this.CustomerName = odataObject.CustomerName;
                    this.IsFavorite = odataObject.IsFavorite;
                    this.IsRecurring = odataObject.IsRecurring;
                    this.IsPrivate = odataObject.IsPrivate;
                    this.IsCollaborative = odataObject.IsCollaborative;
                    this.CreatedDateTime = (odataObject.CreatedDateTime instanceof Date) ? odataObject.CreatedDateTime
                        : (odataObject.CreatedDateTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.CreatedDateTime, "Edm.DateTimeOffset", false) : undefined;
                    this.DueDateTime = (odataObject.DueDateTime instanceof Date) ? odataObject.DueDateTime
                        : (odataObject.DueDateTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.DueDateTime, "Edm.DateTimeOffset", false) : undefined;
                    this.CommerceListTypeValue = odataObject.CommerceListTypeValue;
                    this.CommerceListLines = undefined;
                    if (odataObject.CommerceListLines) {
                        this.CommerceListLines = [];
                        for (var i = 0; i < odataObject.CommerceListLines.length; i++) {
                            if (odataObject.CommerceListLines[i] != null) {
                                if (odataObject.CommerceListLines[i]['@odata.type'] != null) {
                                    var className = odataObject.CommerceListLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.CommerceListLines[i] = new Commerce.Proxy.Entities[className](odataObject.CommerceListLines[i]);
                                    }
                                }
                                else {
                                    this.CommerceListLines[i] = new CommerceListLineClass(odataObject.CommerceListLines[i]);
                                }
                            }
                            else {
                                this.CommerceListLines[i] = undefined;
                            }
                        }
                    }
                    this.CommerceListContributors = undefined;
                    if (odataObject.CommerceListContributors) {
                        this.CommerceListContributors = [];
                        for (var i = 0; i < odataObject.CommerceListContributors.length; i++) {
                            if (odataObject.CommerceListContributors[i] != null) {
                                if (odataObject.CommerceListContributors[i]['@odata.type'] != null) {
                                    var className = odataObject.CommerceListContributors[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.CommerceListContributors[i] = new Commerce.Proxy.Entities[className](odataObject.CommerceListContributors[i]);
                                    }
                                }
                                else {
                                    this.CommerceListContributors[i] = new CommerceListContributorClass(odataObject.CommerceListContributors[i]);
                                }
                            }
                            else {
                                this.CommerceListContributors[i] = undefined;
                            }
                        }
                    }
                    this.CommerceListInvitations = undefined;
                    if (odataObject.CommerceListInvitations) {
                        this.CommerceListInvitations = [];
                        for (var i = 0; i < odataObject.CommerceListInvitations.length; i++) {
                            if (odataObject.CommerceListInvitations[i] != null) {
                                if (odataObject.CommerceListInvitations[i]['@odata.type'] != null) {
                                    var className = odataObject.CommerceListInvitations[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.CommerceListInvitations[i] = new Commerce.Proxy.Entities[className](odataObject.CommerceListInvitations[i]);
                                    }
                                }
                                else {
                                    this.CommerceListInvitations[i] = new CommerceListInvitationClass(odataObject.CommerceListInvitations[i]);
                                }
                            }
                            else {
                                this.CommerceListInvitations[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return CommerceListClass;
            }());
            Entities.CommerceListClass = CommerceListClass;
            var TransferOrderClass = (function () {
                function TransferOrderClass(odataObject) {
                    odataObject = odataObject || {};
                    this.OrderId = odataObject.OrderId;
                    this.RecordId = odataObject.RecordId;
                    this.Status = odataObject.Status;
                    this.Lines = (odataObject.Lines != null) ? parseFloat(odataObject.Lines) : undefined;
                    this.TotalItems = (odataObject.TotalItems != null) ? parseFloat(odataObject.TotalItems) : undefined;
                    this.OrderTypeValue = odataObject.OrderTypeValue;
                    this.InventLocationIdFrom = odataObject.InventLocationIdFrom;
                    this.InventLocationIdTo = odataObject.InventLocationIdTo;
                    this.QuantityShipped = (odataObject.QuantityShipped != null) ? parseFloat(odataObject.QuantityShipped) : undefined;
                    this.QuantityReceived = (odataObject.QuantityReceived != null) ? parseFloat(odataObject.QuantityReceived) : undefined;
                    this.QuantityShipNow = (odataObject.QuantityShipNow != null) ? parseFloat(odataObject.QuantityShipNow) : undefined;
                    this.QuantityReceiveNow = (odataObject.QuantityReceiveNow != null) ? parseFloat(odataObject.QuantityReceiveNow) : undefined;
                    this.QuantityShipRemaining = (odataObject.QuantityShipRemaining != null) ? parseFloat(odataObject.QuantityShipRemaining) : undefined;
                    this.QuantityReceiveRemaining = (odataObject.QuantityReceiveRemaining != null) ? parseFloat(odataObject.QuantityReceiveRemaining) : undefined;
                    this.ShipDate = (odataObject.ShipDate instanceof Date) ? odataObject.ShipDate
                        : (odataObject.ShipDate != null) ? OData.jsonLightReadStringPropertyValue(odataObject.ShipDate, "Edm.DateTimeOffset", false) : undefined;
                    this.ReceiveDate = (odataObject.ReceiveDate instanceof Date) ? odataObject.ReceiveDate
                        : (odataObject.ReceiveDate != null) ? OData.jsonLightReadStringPropertyValue(odataObject.ReceiveDate, "Edm.DateTimeOffset", false) : undefined;
                    this.OrderLines = undefined;
                    if (odataObject.OrderLines) {
                        this.OrderLines = [];
                        for (var i = 0; i < odataObject.OrderLines.length; i++) {
                            if (odataObject.OrderLines[i] != null) {
                                if (odataObject.OrderLines[i]['@odata.type'] != null) {
                                    var className = odataObject.OrderLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.OrderLines[i] = new Commerce.Proxy.Entities[className](odataObject.OrderLines[i]);
                                    }
                                }
                                else {
                                    this.OrderLines[i] = new TransferOrderLineClass(odataObject.OrderLines[i]);
                                }
                            }
                            else {
                                this.OrderLines[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return TransferOrderClass;
            }());
            Entities.TransferOrderClass = TransferOrderClass;
            var PurchaseOrderClass = (function () {
                function PurchaseOrderClass(odataObject) {
                    odataObject = odataObject || {};
                    this.OrderId = odataObject.OrderId;
                    this.RecordId = odataObject.RecordId;
                    this.Status = odataObject.Status;
                    this.Lines = (odataObject.Lines != null) ? parseFloat(odataObject.Lines) : undefined;
                    this.TotalItems = (odataObject.TotalItems != null) ? parseFloat(odataObject.TotalItems) : undefined;
                    this.OrderTypeValue = odataObject.OrderTypeValue;
                    this.TotalReceived = (odataObject.TotalReceived != null) ? parseFloat(odataObject.TotalReceived) : undefined;
                    this.OrderLines = undefined;
                    if (odataObject.OrderLines) {
                        this.OrderLines = [];
                        for (var i = 0; i < odataObject.OrderLines.length; i++) {
                            if (odataObject.OrderLines[i] != null) {
                                if (odataObject.OrderLines[i]['@odata.type'] != null) {
                                    var className = odataObject.OrderLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.OrderLines[i] = new Commerce.Proxy.Entities[className](odataObject.OrderLines[i]);
                                    }
                                }
                                else {
                                    this.OrderLines[i] = new PurchaseOrderLineClass(odataObject.OrderLines[i]);
                                }
                            }
                            else {
                                this.OrderLines[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return PurchaseOrderClass;
            }());
            Entities.PurchaseOrderClass = PurchaseOrderClass;
            var PickingListClass = (function () {
                function PickingListClass(odataObject) {
                    odataObject = odataObject || {};
                    this.OrderId = odataObject.OrderId;
                    this.RecordId = odataObject.RecordId;
                    this.Status = odataObject.Status;
                    this.Lines = (odataObject.Lines != null) ? parseFloat(odataObject.Lines) : undefined;
                    this.TotalItems = (odataObject.TotalItems != null) ? parseFloat(odataObject.TotalItems) : undefined;
                    this.OrderTypeValue = odataObject.OrderTypeValue;
                    this.InventLocationId = odataObject.InventLocationId;
                    this.DeliveryDate = (odataObject.DeliveryDate instanceof Date) ? odataObject.DeliveryDate
                        : (odataObject.DeliveryDate != null) ? OData.jsonLightReadStringPropertyValue(odataObject.DeliveryDate, "Edm.DateTimeOffset", false) : undefined;
                    this.DeliveryMode = odataObject.DeliveryMode;
                    this.TotalReceived = (odataObject.TotalReceived != null) ? parseFloat(odataObject.TotalReceived) : undefined;
                    this.OrderLines = undefined;
                    if (odataObject.OrderLines) {
                        this.OrderLines = [];
                        for (var i = 0; i < odataObject.OrderLines.length; i++) {
                            if (odataObject.OrderLines[i] != null) {
                                if (odataObject.OrderLines[i]['@odata.type'] != null) {
                                    var className = odataObject.OrderLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.OrderLines[i] = new Commerce.Proxy.Entities[className](odataObject.OrderLines[i]);
                                    }
                                }
                                else {
                                    this.OrderLines[i] = new PickingListLineClass(odataObject.OrderLines[i]);
                                }
                            }
                            else {
                                this.OrderLines[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return PickingListClass;
            }());
            Entities.PickingListClass = PickingListClass;
            var WarehouseClass = (function () {
                function WarehouseClass(odataObject) {
                    odataObject = odataObject || {};
                    this.InventLocation = odataObject.InventLocation;
                    this.Name = odataObject.Name;
                    this.IsWMSEnabled = odataObject.IsWMSEnabled;
                    this.DefaultInventoryStatus = odataObject.DefaultInventoryStatus;
                    this.DefaultReceiptLocation = odataObject.DefaultReceiptLocation;
                    this.DefaultLocationId = odataObject.DefaultLocationId;
                    this.DefaultIssueLocation = odataObject.DefaultIssueLocation;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return WarehouseClass;
            }());
            Entities.WarehouseClass = WarehouseClass;
            var ScanResultClass = (function () {
                function ScanResultClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ScannedText = odataObject.ScannedText;
                    this.MaskTypeValue = odataObject.MaskTypeValue;
                    if (odataObject.Barcode == null) {
                        this.Barcode = undefined;
                    }
                    else if (odataObject.Barcode['@odata.type'] == null) {
                        this.Barcode = new BarcodeClass(odataObject.Barcode);
                    }
                    else {
                        var className = odataObject.Barcode['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.Barcode = new Commerce.Proxy.Entities[className](odataObject.Barcode);
                        }
                    }
                    if (odataObject.Product == null) {
                        this.Product = undefined;
                    }
                    else if (odataObject.Product['@odata.type'] == null) {
                        this.Product = new SimpleProductClass(odataObject.Product);
                    }
                    else {
                        var className = odataObject.Product['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.Product = new Commerce.Proxy.Entities[className](odataObject.Product);
                        }
                    }
                    if (odataObject.LoyaltyCard == null) {
                        this.LoyaltyCard = undefined;
                    }
                    else if (odataObject.LoyaltyCard['@odata.type'] == null) {
                        this.LoyaltyCard = new LoyaltyCardClass(odataObject.LoyaltyCard);
                    }
                    else {
                        var className = odataObject.LoyaltyCard['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.LoyaltyCard = new Commerce.Proxy.Entities[className](odataObject.LoyaltyCard);
                        }
                    }
                    if (odataObject.GiftCard == null) {
                        this.GiftCard = undefined;
                    }
                    else if (odataObject.GiftCard['@odata.type'] == null) {
                        this.GiftCard = new GiftCardClass(odataObject.GiftCard);
                    }
                    else {
                        var className = odataObject.GiftCard['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.GiftCard = new Commerce.Proxy.Entities[className](odataObject.GiftCard);
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                    if (odataObject.Customer == null) {
                        this.Customer = undefined;
                    }
                    else if (odataObject.Customer['@odata.type'] == null) {
                        this.Customer = new CustomerClass(odataObject.Customer);
                    }
                    else {
                        var className = odataObject.Customer['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.Customer = new Commerce.Proxy.Entities[className](odataObject.Customer);
                        }
                    }
                }
                return ScanResultClass;
            }());
            ScanResultClass.customerPropertyName = "Customer";
            Entities.ScanResultClass = ScanResultClass;
            var ExtensibleEnumerationClass = (function () {
                function ExtensibleEnumerationClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Name = odataObject.Name;
                    this.Value = odataObject.Value;
                }
                return ExtensibleEnumerationClass;
            }());
            Entities.ExtensibleEnumerationClass = ExtensibleEnumerationClass;
            var ExtensibleEnumeration_1OfTClass = (function (_super) {
                __extends(ExtensibleEnumeration_1OfTClass, _super);
                function ExtensibleEnumeration_1OfTClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.Framework.ExtensibleEnumeration_1OfT";
                    return _this;
                }
                return ExtensibleEnumeration_1OfTClass;
            }(ExtensibleEnumerationClass));
            Entities.ExtensibleEnumeration_1OfTClass = ExtensibleEnumeration_1OfTClass;
            var ExtensibleTransactionTypeClass = (function (_super) {
                __extends(ExtensibleTransactionTypeClass, _super);
                function ExtensibleTransactionTypeClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.ExtensibleTransactionType";
                    return _this;
                }
                return ExtensibleTransactionTypeClass;
            }(ExtensibleEnumerationClass));
            Entities.ExtensibleTransactionTypeClass = ExtensibleTransactionTypeClass;
            var ExtensibleSalesTransactionTypeClass = (function (_super) {
                __extends(ExtensibleSalesTransactionTypeClass, _super);
                function ExtensibleSalesTransactionTypeClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.ExtensibleSalesTransactionType";
                    return _this;
                }
                return ExtensibleSalesTransactionTypeClass;
            }(ExtensibleEnumerationClass));
            Entities.ExtensibleSalesTransactionTypeClass = ExtensibleSalesTransactionTypeClass;
            var FulfillmentLineStatusClass = (function (_super) {
                __extends(FulfillmentLineStatusClass, _super);
                function FulfillmentLineStatusClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.FulfillmentLineStatus";
                    return _this;
                }
                return FulfillmentLineStatusClass;
            }(ExtensibleEnumerationClass));
            Entities.FulfillmentLineStatusClass = FulfillmentLineStatusClass;
            var FulfillmentLineDeliveryTypeClass = (function (_super) {
                __extends(FulfillmentLineDeliveryTypeClass, _super);
                function FulfillmentLineDeliveryTypeClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.FulfillmentLineDeliveryType";
                    return _this;
                }
                return FulfillmentLineDeliveryTypeClass;
            }(ExtensibleEnumerationClass));
            Entities.FulfillmentLineDeliveryTypeClass = FulfillmentLineDeliveryTypeClass;
            var AddressClass = (function () {
                function AddressClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Name = odataObject.Name;
                    this.FullAddress = odataObject.FullAddress;
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.Street = odataObject.Street;
                    this.StreetNumber = odataObject.StreetNumber;
                    this.County = odataObject.County;
                    this.CountyName = odataObject.CountyName;
                    this.City = odataObject.City;
                    this.DistrictName = odataObject.DistrictName;
                    this.State = odataObject.State;
                    this.StateName = odataObject.StateName;
                    this.ZipCode = odataObject.ZipCode;
                    this.ThreeLetterISORegionName = odataObject.ThreeLetterISORegionName;
                    this.Phone = odataObject.Phone;
                    this.PhoneRecordId = (odataObject.PhoneRecordId != null) ? parseInt(odataObject.PhoneRecordId, 10) : undefined;
                    this.PhoneExt = odataObject.PhoneExt;
                    this.Email = odataObject.Email;
                    this.EmailContent = odataObject.EmailContent;
                    this.EmailRecordId = (odataObject.EmailRecordId != null) ? parseInt(odataObject.EmailRecordId, 10) : undefined;
                    this.Url = odataObject.Url;
                    this.UrlRecordId = (odataObject.UrlRecordId != null) ? parseInt(odataObject.UrlRecordId, 10) : undefined;
                    this.TwoLetterISORegionName = odataObject.TwoLetterISORegionName;
                    this.Deactivate = odataObject.Deactivate;
                    this.AttentionTo = odataObject.AttentionTo;
                    this.BuildingCompliment = odataObject.BuildingCompliment;
                    this.Postbox = odataObject.Postbox;
                    this.TaxGroup = odataObject.TaxGroup;
                    this.AddressTypeValue = odataObject.AddressTypeValue;
                    this.IsPrimary = odataObject.IsPrimary;
                    this.IsPrivate = odataObject.IsPrivate;
                    this.PartyNumber = odataObject.PartyNumber;
                    this.IsAsyncAddress = odataObject.IsAsyncAddress;
                    this.DirectoryPartyTableRecordId = (odataObject.DirectoryPartyTableRecordId != null) ? parseInt(odataObject.DirectoryPartyTableRecordId, 10) : undefined;
                    this.DirectoryPartyLocationRecordId = (odataObject.DirectoryPartyLocationRecordId != null) ? parseInt(odataObject.DirectoryPartyLocationRecordId, 10) : undefined;
                    this.DirectoryPartyLocationRoleRecordId = (odataObject.DirectoryPartyLocationRoleRecordId != null) ? parseInt(odataObject.DirectoryPartyLocationRoleRecordId, 10) : undefined;
                    this.LogisticsLocationId = odataObject.LogisticsLocationId;
                    this.LogisticsLocationRecordId = (odataObject.LogisticsLocationRecordId != null) ? parseInt(odataObject.LogisticsLocationRecordId, 10) : undefined;
                    this.LogisticsLocationExtRecordId = (odataObject.LogisticsLocationExtRecordId != null) ? parseInt(odataObject.LogisticsLocationExtRecordId, 10) : undefined;
                    this.LogisticsLocationRoleRecordId = (odataObject.LogisticsLocationRoleRecordId != null) ? parseInt(odataObject.LogisticsLocationRoleRecordId, 10) : undefined;
                    this.PhoneLogisticsLocationRecordId = (odataObject.PhoneLogisticsLocationRecordId != null) ? parseInt(odataObject.PhoneLogisticsLocationRecordId, 10) : undefined;
                    this.PhoneLogisticsLocationId = odataObject.PhoneLogisticsLocationId;
                    this.EmailLogisticsLocationRecordId = (odataObject.EmailLogisticsLocationRecordId != null) ? parseInt(odataObject.EmailLogisticsLocationRecordId, 10) : undefined;
                    this.EmailLogisticsLocationId = odataObject.EmailLogisticsLocationId;
                    this.UrlLogisticsLocationRecordId = (odataObject.UrlLogisticsLocationRecordId != null) ? parseInt(odataObject.UrlLogisticsLocationRecordId, 10) : undefined;
                    this.UrlLogisticsLocationId = odataObject.UrlLogisticsLocationId;
                    this.ExpireRecordId = (odataObject.ExpireRecordId != null) ? parseInt(odataObject.ExpireRecordId, 10) : undefined;
                    this.SortOrder = odataObject.SortOrder;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return AddressClass;
            }());
            Entities.AddressClass = AddressClass;
            var CustomerAffiliationClass = (function () {
                function CustomerAffiliationClass(odataObject) {
                    odataObject = odataObject || {};
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.RetailAffiliationId = (odataObject.RetailAffiliationId != null) ? parseInt(odataObject.RetailAffiliationId, 10) : undefined;
                    this.Name = odataObject.Name;
                    this.Description = odataObject.Description;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return CustomerAffiliationClass;
            }());
            Entities.CustomerAffiliationClass = CustomerAffiliationClass;
            var CustomerBalancesClass = (function () {
                function CustomerBalancesClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Balance = (odataObject.Balance != null) ? parseFloat(odataObject.Balance) : undefined;
                    this.PendingBalance = (odataObject.PendingBalance != null) ? parseFloat(odataObject.PendingBalance) : undefined;
                    this.CreditLimit = (odataObject.CreditLimit != null) ? parseFloat(odataObject.CreditLimit) : undefined;
                    this.InvoiceAccountBalance = (odataObject.InvoiceAccountBalance != null) ? parseFloat(odataObject.InvoiceAccountBalance) : undefined;
                    this.InvoiceAccountPendingBalance = (odataObject.InvoiceAccountPendingBalance != null) ? parseFloat(odataObject.InvoiceAccountPendingBalance) : undefined;
                    this.InvoiceAccountCreditLimit = (odataObject.InvoiceAccountCreditLimit != null) ? parseFloat(odataObject.InvoiceAccountCreditLimit) : undefined;
                }
                return CustomerBalancesClass;
            }());
            Entities.CustomerBalancesClass = CustomerBalancesClass;
            var GlobalCustomerClass = (function () {
                function GlobalCustomerClass(odataObject) {
                    odataObject = odataObject || {};
                    this.PartyNumber = odataObject.PartyNumber;
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.IsAsyncCustomer = odataObject.IsAsyncCustomer;
                    this.AccountNumber = odataObject.AccountNumber;
                    this.FullName = odataObject.FullName;
                    this.FullAddress = odataObject.FullAddress;
                    this.Phone = odataObject.Phone;
                    this.Email = odataObject.Email;
                    this.CustomerTypeValue = odataObject.CustomerTypeValue;
                    this.Images = undefined;
                    if (odataObject.Images) {
                        this.Images = [];
                        for (var i = 0; i < odataObject.Images.length; i++) {
                            if (odataObject.Images[i] != null) {
                                if (odataObject.Images[i]['@odata.type'] != null) {
                                    var className = odataObject.Images[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.Images[i] = new Commerce.Proxy.Entities[className](odataObject.Images[i]);
                                    }
                                }
                                else {
                                    this.Images[i] = new MediaLocationClass(odataObject.Images[i]);
                                }
                            }
                            else {
                                this.Images[i] = undefined;
                            }
                        }
                    }
                    this.OfflineImage = odataObject.OfflineImage;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return GlobalCustomerClass;
            }());
            Entities.GlobalCustomerClass = GlobalCustomerClass;
            var AttributeValueClass = (function () {
                function AttributeValueClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Name = odataObject.Name;
                    this.UnitOfMeasureSymbol = odataObject.UnitOfMeasureSymbol;
                    this.DataTypeValue = odataObject.DataTypeValue;
                    this.BooleanValue = odataObject.BooleanValue;
                    this.DateTimeOffsetValue = (odataObject.DateTimeOffsetValue instanceof Date) ? odataObject.DateTimeOffsetValue
                        : (odataObject.DateTimeOffsetValue != null) ? OData.jsonLightReadStringPropertyValue(odataObject.DateTimeOffsetValue, "Edm.DateTimeOffset", false) : undefined;
                    this.FloatValue = (odataObject.FloatValue != null) ? parseFloat(odataObject.FloatValue) : undefined;
                    this.IntegerValue = odataObject.IntegerValue;
                    this.TextValue = odataObject.TextValue;
                    this.CurrencyValue = (odataObject.CurrencyValue != null) ? parseFloat(odataObject.CurrencyValue) : undefined;
                    this.CurrencyCode = odataObject.CurrencyCode;
                    this.AttributeValueId = (odataObject.AttributeValueId != null) ? parseInt(odataObject.AttributeValueId, 10) : undefined;
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return AttributeValueClass;
            }());
            Entities.AttributeValueClass = AttributeValueClass;
            var AttributeValueBaseClass = (function () {
                function AttributeValueBaseClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Name = odataObject.Name;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return AttributeValueBaseClass;
            }());
            Entities.AttributeValueBaseClass = AttributeValueBaseClass;
            var BarcodeClass = (function () {
                function BarcodeClass(odataObject) {
                    odataObject = odataObject || {};
                    this.BarcodeId = odataObject.BarcodeId;
                    this.BarcodePrice = (odataObject.BarcodePrice != null) ? parseFloat(odataObject.BarcodePrice) : undefined;
                    this.Quantity = (odataObject.Quantity != null) ? parseFloat(odataObject.Quantity) : undefined;
                    this.CustomerId = odataObject.CustomerId;
                    this.EmployeeId = odataObject.EmployeeId;
                    this.SalespersonId = odataObject.SalespersonId;
                    this.EANLicenseId = odataObject.EANLicenseId;
                    this.DataEntry = odataObject.DataEntry;
                    this.DiscountCode = odataObject.DiscountCode;
                    this.GiftCardNumber = odataObject.GiftCardNumber;
                    this.LoyaltyCardNumber = odataObject.LoyaltyCardNumber;
                    if (odataObject.ItemBarcode == null) {
                        this.ItemBarcode = undefined;
                    }
                    else if (odataObject.ItemBarcode['@odata.type'] == null) {
                        this.ItemBarcode = new ItemBarcodeClass(odataObject.ItemBarcode);
                    }
                    else {
                        var className = odataObject.ItemBarcode['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.ItemBarcode = new Commerce.Proxy.Entities[className](odataObject.ItemBarcode);
                        }
                    }
                    this.EntryMethodTypeValue = odataObject.EntryMethodTypeValue;
                    this.ItemType = odataObject.ItemType;
                    this.EnterDimensions = odataObject.EnterDimensions;
                    this.ItemGroupId = odataObject.ItemGroupId;
                    this.ItemDepartmentId = odataObject.ItemDepartmentId;
                    this.ScaleItem = odataObject.ScaleItem;
                    this.ZeroPriceValid = odataObject.ZeroPriceValid;
                    this.NegativeQuantity = odataObject.NegativeQuantity;
                    this.DiscountNotAllowed = odataObject.DiscountNotAllowed;
                    this.DateToBeBlocked = (odataObject.DateToBeBlocked instanceof Date) ? odataObject.DateToBeBlocked
                        : (odataObject.DateToBeBlocked != null) ? OData.jsonLightReadStringPropertyValue(odataObject.DateToBeBlocked, "Edm.DateTimeOffset", false) : undefined;
                    this.DateToBeActivated = (odataObject.DateToBeActivated instanceof Date) ? odataObject.DateToBeActivated
                        : (odataObject.DateToBeActivated != null) ? OData.jsonLightReadStringPropertyValue(odataObject.DateToBeActivated, "Edm.DateTimeOffset", false) : undefined;
                    this.CheckDigitValidated = odataObject.CheckDigitValidated;
                    this.CouponId = odataObject.CouponId;
                    this.Message = odataObject.Message;
                    this.LineDiscountGroup = odataObject.LineDiscountGroup;
                    this.MultilineDiscountGroup = odataObject.MultilineDiscountGroup;
                    this.IncludedInTotalDiscount = odataObject.IncludedInTotalDiscount;
                    this.CostPrice = (odataObject.CostPrice != null) ? parseFloat(odataObject.CostPrice) : undefined;
                    this.BatchId = odataObject.BatchId;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return BarcodeClass;
            }());
            Entities.BarcodeClass = BarcodeClass;
            var ItemBarcodeClass = (function () {
                function ItemBarcodeClass(odataObject) {
                    odataObject = odataObject || {};
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.ItemId = odataObject.ItemId;
                    this.Description = odataObject.Description;
                    this.BarcodeSetupId = odataObject.BarcodeSetupId;
                    this.ItemBarcodeValue = odataObject.ItemBarcodeValue;
                    this.InventoryDimensionId = odataObject.InventoryDimensionId;
                    this.IsBlocked = odataObject.IsBlocked;
                    this.Display = odataObject.Display;
                    this.VariantId = odataObject.VariantId;
                    this.UnitId = odataObject.UnitId;
                    this.UseForInput = odataObject.UseForInput;
                    this.UseForPrinting = odataObject.UseForPrinting;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ItemBarcodeClass;
            }());
            Entities.ItemBarcodeClass = ItemBarcodeClass;
            var ButtonGridClass = (function () {
                function ButtonGridClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Id = odataObject.Id;
                    this.Name = odataObject.Name;
                    this.DefaultColor = odataObject.DefaultColor;
                    this.SpaceBetweenButtonsInPixels = odataObject.SpaceBetweenButtonsInPixels;
                    this.Buttons = undefined;
                    if (odataObject.Buttons) {
                        this.Buttons = [];
                        for (var i = 0; i < odataObject.Buttons.length; i++) {
                            if (odataObject.Buttons[i] != null) {
                                if (odataObject.Buttons[i]['@odata.type'] != null) {
                                    var className = odataObject.Buttons[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.Buttons[i] = new Commerce.Proxy.Entities[className](odataObject.Buttons[i]);
                                    }
                                }
                                else {
                                    this.Buttons[i] = new ButtonGridButtonClass(odataObject.Buttons[i]);
                                }
                            }
                            else {
                                this.Buttons[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ButtonGridClass;
            }());
            Entities.ButtonGridClass = ButtonGridClass;
            var GetButtonGridsByIdsCriteriaClass = (function () {
                function GetButtonGridsByIdsCriteriaClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ButtonGridIds = undefined;
                    if (odataObject.ButtonGridIds) {
                        this.ButtonGridIds = [];
                        for (var i = 0; i < odataObject.ButtonGridIds.length; i++) {
                            if (odataObject.ButtonGridIds[i] != null) {
                                this.ButtonGridIds[i] = odataObject.ButtonGridIds[i];
                            }
                            else {
                                this.ButtonGridIds[i] = undefined;
                            }
                        }
                    }
                }
                return GetButtonGridsByIdsCriteriaClass;
            }());
            Entities.GetButtonGridsByIdsCriteriaClass = GetButtonGridsByIdsCriteriaClass;
            var CartLineClass = (function () {
                function CartLineClass(odataObject) {
                    odataObject = odataObject || {};
                    this.LineId = odataObject.LineId;
                    this.TaxOverrideCode = odataObject.TaxOverrideCode;
                    this.ItemId = odataObject.ItemId;
                    this.Barcode = odataObject.Barcode;
                    this.EntryMethodTypeValue = odataObject.EntryMethodTypeValue;
                    this.Description = odataObject.Description;
                    this.InventoryDimensionId = odataObject.InventoryDimensionId;
                    this.Comment = odataObject.Comment;
                    this.ProductId = (odataObject.ProductId != null) ? parseInt(odataObject.ProductId, 10) : undefined;
                    this.WarehouseId = odataObject.WarehouseId;
                    this.Quantity = (odataObject.Quantity != null) ? parseFloat(odataObject.Quantity) : undefined;
                    this.Price = (odataObject.Price != null) ? parseFloat(odataObject.Price) : undefined;
                    this.ExtendedPrice = (odataObject.ExtendedPrice != null) ? parseFloat(odataObject.ExtendedPrice) : undefined;
                    this.TaxAmount = (odataObject.TaxAmount != null) ? parseFloat(odataObject.TaxAmount) : undefined;
                    this.ItemTaxGroupId = odataObject.ItemTaxGroupId;
                    this.TotalAmount = (odataObject.TotalAmount != null) ? parseFloat(odataObject.TotalAmount) : undefined;
                    this.NetAmountWithoutTax = (odataObject.NetAmountWithoutTax != null) ? parseFloat(odataObject.NetAmountWithoutTax) : undefined;
                    this.DiscountAmount = (odataObject.DiscountAmount != null) ? parseFloat(odataObject.DiscountAmount) : undefined;
                    this.LineDiscount = (odataObject.LineDiscount != null) ? parseFloat(odataObject.LineDiscount) : undefined;
                    this.LinePercentageDiscount = (odataObject.LinePercentageDiscount != null) ? parseFloat(odataObject.LinePercentageDiscount) : undefined;
                    this.LineManualDiscountPercentage = (odataObject.LineManualDiscountPercentage != null) ? parseFloat(odataObject.LineManualDiscountPercentage) : undefined;
                    this.LineManualDiscountAmount = (odataObject.LineManualDiscountAmount != null) ? parseFloat(odataObject.LineManualDiscountAmount) : undefined;
                    this.UnitOfMeasureSymbol = odataObject.UnitOfMeasureSymbol;
                    if (odataObject.ShippingAddress == null) {
                        this.ShippingAddress = undefined;
                    }
                    else if (odataObject.ShippingAddress['@odata.type'] == null) {
                        this.ShippingAddress = new AddressClass(odataObject.ShippingAddress);
                    }
                    else {
                        var className = odataObject.ShippingAddress['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.ShippingAddress = new Commerce.Proxy.Entities[className](odataObject.ShippingAddress);
                        }
                    }
                    this.DeliveryMode = odataObject.DeliveryMode;
                    this.DeliveryModeChargeAmount = (odataObject.DeliveryModeChargeAmount != null) ? parseFloat(odataObject.DeliveryModeChargeAmount) : undefined;
                    this.RequestedDeliveryDate = (odataObject.RequestedDeliveryDate instanceof Date) ? odataObject.RequestedDeliveryDate
                        : (odataObject.RequestedDeliveryDate != null) ? OData.jsonLightReadStringPropertyValue(odataObject.RequestedDeliveryDate, "Edm.DateTimeOffset", false) : undefined;
                    this.ReturnTransactionId = odataObject.ReturnTransactionId;
                    this.ReturnLineNumber = (odataObject.ReturnLineNumber != null) ? parseFloat(odataObject.ReturnLineNumber) : undefined;
                    this.ReturnInventTransId = odataObject.ReturnInventTransId;
                    this.IsVoided = odataObject.IsVoided;
                    this.IsGiftCardLine = odataObject.IsGiftCardLine;
                    this.IsPriceKeyedIn = odataObject.IsPriceKeyedIn;
                    this.GiftCardId = odataObject.GiftCardId;
                    this.SalesStatusValue = odataObject.SalesStatusValue;
                    this.QuantityOrdered = (odataObject.QuantityOrdered != null) ? parseFloat(odataObject.QuantityOrdered) : undefined;
                    this.QuantityInvoiced = (odataObject.QuantityInvoiced != null) ? parseFloat(odataObject.QuantityInvoiced) : undefined;
                    this.QuantityCanceled = (odataObject.QuantityCanceled != null) ? parseFloat(odataObject.QuantityCanceled) : undefined;
                    this.FulfillmentStoreId = odataObject.FulfillmentStoreId;
                    this.SerialNumber = odataObject.SerialNumber;
                    this.ElectronicDeliveryEmail = odataObject.ElectronicDeliveryEmail;
                    this.ElectronicDeliveryEmailContent = odataObject.ElectronicDeliveryEmailContent;
                    this.IsPriceOverridden = odataObject.IsPriceOverridden;
                    this.OriginalPrice = (odataObject.OriginalPrice != null) ? parseFloat(odataObject.OriginalPrice) : undefined;
                    this.IsInvoiceLine = odataObject.IsInvoiceLine;
                    this.InvoiceId = odataObject.InvoiceId;
                    this.InvoiceAmount = (odataObject.InvoiceAmount != null) ? parseFloat(odataObject.InvoiceAmount) : undefined;
                    this.GiftCardBalance = (odataObject.GiftCardBalance != null) ? parseFloat(odataObject.GiftCardBalance) : undefined;
                    this.LineVersion = odataObject.LineVersion;
                    this.PromotionLines = undefined;
                    if (odataObject.PromotionLines) {
                        this.PromotionLines = [];
                        for (var i = 0; i < odataObject.PromotionLines.length; i++) {
                            if (odataObject.PromotionLines[i] != null) {
                                this.PromotionLines[i] = odataObject.PromotionLines[i];
                            }
                            else {
                                this.PromotionLines[i] = undefined;
                            }
                        }
                    }
                    this.DiscountLines = undefined;
                    if (odataObject.DiscountLines) {
                        this.DiscountLines = [];
                        for (var i = 0; i < odataObject.DiscountLines.length; i++) {
                            if (odataObject.DiscountLines[i] != null) {
                                if (odataObject.DiscountLines[i]['@odata.type'] != null) {
                                    var className = odataObject.DiscountLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.DiscountLines[i] = new Commerce.Proxy.Entities[className](odataObject.DiscountLines[i]);
                                    }
                                }
                                else {
                                    this.DiscountLines[i] = new DiscountLineClass(odataObject.DiscountLines[i]);
                                }
                            }
                            else {
                                this.DiscountLines[i] = undefined;
                            }
                        }
                    }
                    this.RelatedDiscountedLineIds = undefined;
                    if (odataObject.RelatedDiscountedLineIds) {
                        this.RelatedDiscountedLineIds = [];
                        for (var i = 0; i < odataObject.RelatedDiscountedLineIds.length; i++) {
                            if (odataObject.RelatedDiscountedLineIds[i] != null) {
                                this.RelatedDiscountedLineIds[i] = odataObject.RelatedDiscountedLineIds[i];
                            }
                            else {
                                this.RelatedDiscountedLineIds[i] = undefined;
                            }
                        }
                    }
                    this.ReasonCodeLines = undefined;
                    if (odataObject.ReasonCodeLines) {
                        this.ReasonCodeLines = [];
                        for (var i = 0; i < odataObject.ReasonCodeLines.length; i++) {
                            if (odataObject.ReasonCodeLines[i] != null) {
                                if (odataObject.ReasonCodeLines[i]['@odata.type'] != null) {
                                    var className = odataObject.ReasonCodeLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ReasonCodeLines[i] = new Commerce.Proxy.Entities[className](odataObject.ReasonCodeLines[i]);
                                    }
                                }
                                else {
                                    this.ReasonCodeLines[i] = new ReasonCodeLineClass(odataObject.ReasonCodeLines[i]);
                                }
                            }
                            else {
                                this.ReasonCodeLines[i] = undefined;
                            }
                        }
                    }
                    this.ChargeLines = undefined;
                    if (odataObject.ChargeLines) {
                        this.ChargeLines = [];
                        for (var i = 0; i < odataObject.ChargeLines.length; i++) {
                            if (odataObject.ChargeLines[i] != null) {
                                if (odataObject.ChargeLines[i]['@odata.type'] != null) {
                                    var className = odataObject.ChargeLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ChargeLines[i] = new Commerce.Proxy.Entities[className](odataObject.ChargeLines[i]);
                                    }
                                }
                                else {
                                    this.ChargeLines[i] = new ChargeLineClass(odataObject.ChargeLines[i]);
                                }
                            }
                            else {
                                this.ChargeLines[i] = undefined;
                            }
                        }
                    }
                    this.TaxRatePercent = (odataObject.TaxRatePercent != null) ? parseFloat(odataObject.TaxRatePercent) : undefined;
                    this.IsCustomerAccountDeposit = odataObject.IsCustomerAccountDeposit;
                    this.LinkedParentLineId = odataObject.LinkedParentLineId;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                    this.LineNumber = (odataObject.LineNumber != null) ? parseFloat(odataObject.LineNumber) : undefined;
                    this.CommissionSalesGroup = odataObject.CommissionSalesGroup;
                    this.TrackingId = odataObject.TrackingId;
                    this.StaffId = odataObject.StaffId;
                    this.QuantityRemained = (odataObject.QuantityRemained != null) ? parseFloat(odataObject.QuantityRemained) : undefined;
                    this.QuantityShipped = (odataObject.QuantityShipped != null) ? parseFloat(odataObject.QuantityShipped) : undefined;
                    this.CatalogId = (odataObject.CatalogId != null) ? parseInt(odataObject.CatalogId, 10) : undefined;
                    this.AttributeValues = undefined;
                    if (odataObject.AttributeValues) {
                        this.AttributeValues = [];
                        for (var i = 0; i < odataObject.AttributeValues.length; i++) {
                            if (odataObject.AttributeValues[i] != null) {
                                if (odataObject.AttributeValues[i]['@odata.type'] != null) {
                                    var className = odataObject.AttributeValues[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.AttributeValues[i] = new Commerce.Proxy.Entities[className](odataObject.AttributeValues[i]);
                                    }
                                }
                                else {
                                    this.AttributeValues[i] = new AttributeValueBaseClass(odataObject.AttributeValues[i]);
                                }
                            }
                            else {
                                this.AttributeValues[i] = undefined;
                            }
                        }
                    }
                    if (odataObject.ThirdPartyGiftCardInfo == null) {
                        this.ThirdPartyGiftCardInfo = undefined;
                    }
                    else if (odataObject.ThirdPartyGiftCardInfo['@odata.type'] == null) {
                        this.ThirdPartyGiftCardInfo = new ThirdPartyGiftCardInfoClass(odataObject.ThirdPartyGiftCardInfo);
                    }
                    else {
                        var className = odataObject.ThirdPartyGiftCardInfo['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.ThirdPartyGiftCardInfo = new Commerce.Proxy.Entities[className](odataObject.ThirdPartyGiftCardInfo);
                        }
                    }
                }
                return CartLineClass;
            }());
            Entities.CartLineClass = CartLineClass;
            var ThirdPartyGiftCardInfoClass = (function () {
                function ThirdPartyGiftCardInfoClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Amount = (odataObject.Amount != null) ? parseFloat(odataObject.Amount) : undefined;
                    this.Authorization = odataObject.Authorization;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ThirdPartyGiftCardInfoClass;
            }());
            Entities.ThirdPartyGiftCardInfoClass = ThirdPartyGiftCardInfoClass;
            var CardTypeInfoClass = (function () {
                function CardTypeInfoClass(odataObject) {
                    odataObject = odataObject || {};
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.TypeId = odataObject.TypeId;
                    this.Name = odataObject.Name;
                    this.PaymentMethodId = odataObject.PaymentMethodId;
                    this.CardTypeValue = odataObject.CardTypeValue;
                    this.Issuer = odataObject.Issuer;
                    this.NumberFrom = odataObject.NumberFrom;
                    this.NumberTo = odataObject.NumberTo;
                    this.CashBackLimit = (odataObject.CashBackLimit != null) ? parseFloat(odataObject.CashBackLimit) : undefined;
                    this.AllowManualInput = odataObject.AllowManualInput;
                    this.CheckModulus = odataObject.CheckModulus;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return CardTypeInfoClass;
            }());
            Entities.CardTypeInfoClass = CardTypeInfoClass;
            var CashDeclarationClass = (function () {
                function CashDeclarationClass(odataObject) {
                    odataObject = odataObject || {};
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.Currency = odataObject.Currency;
                    this.Amount = (odataObject.Amount != null) ? parseFloat(odataObject.Amount) : undefined;
                    this.CashTypeValue = odataObject.CashTypeValue;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return CashDeclarationClass;
            }());
            Entities.CashDeclarationClass = CashDeclarationClass;
            var IncomeExpenseAccountClass = (function () {
                function IncomeExpenseAccountClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Amount = (odataObject.Amount != null) ? parseFloat(odataObject.Amount) : undefined;
                    this.AccountNumber = odataObject.AccountNumber;
                    this.AccountName = odataObject.AccountName;
                    this.AccountNameAlias = odataObject.AccountNameAlias;
                    this.AccountTypeValue = odataObject.AccountTypeValue;
                    this.Quantity = (odataObject.Quantity != null) ? parseFloat(odataObject.Quantity) : undefined;
                    this.Message1Line = odataObject.Message1Line;
                    this.Message2Line = odataObject.Message2Line;
                    this.SlipText1Line = odataObject.SlipText1Line;
                    this.SlipText2Line = odataObject.SlipText2Line;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return IncomeExpenseAccountClass;
            }());
            Entities.IncomeExpenseAccountClass = IncomeExpenseAccountClass;
            var IncomeExpenseLineClass = (function () {
                function IncomeExpenseLineClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Amount = (odataObject.Amount != null) ? parseFloat(odataObject.Amount) : undefined;
                    this.IncomeExpenseAccount = odataObject.IncomeExpenseAccount;
                    this.StoreNumber = odataObject.StoreNumber;
                    this.AccountTypeValue = odataObject.AccountTypeValue;
                    this.Terminal = odataObject.Terminal;
                    this.Shift = odataObject.Shift;
                    this.TransactionStatusValue = odataObject.TransactionStatusValue;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return IncomeExpenseLineClass;
            }());
            Entities.IncomeExpenseLineClass = IncomeExpenseLineClass;
            var CartTenderLineClass = (function () {
                function CartTenderLineClass(odataObject) {
                    odataObject = odataObject || {};
                    if (odataObject.PaymentCard == null) {
                        this.PaymentCard = undefined;
                    }
                    else if (odataObject.PaymentCard['@odata.type'] == null) {
                        this.PaymentCard = new PaymentCardClass(odataObject.PaymentCard);
                    }
                    else {
                        var className = odataObject.PaymentCard['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.PaymentCard = new Commerce.Proxy.Entities[className](odataObject.PaymentCard);
                        }
                    }
                    if (odataObject.TokenizedPaymentCard == null) {
                        this.TokenizedPaymentCard = undefined;
                    }
                    else if (odataObject.TokenizedPaymentCard['@odata.type'] == null) {
                        this.TokenizedPaymentCard = new TokenizedPaymentCardClass(odataObject.TokenizedPaymentCard);
                    }
                    else {
                        var className = odataObject.TokenizedPaymentCard['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.TokenizedPaymentCard = new Commerce.Proxy.Entities[className](odataObject.TokenizedPaymentCard);
                        }
                    }
                    this.TenderLineId = odataObject.TenderLineId;
                    this.Amount = (odataObject.Amount != null) ? parseFloat(odataObject.Amount) : undefined;
                    this.CashBackAmount = (odataObject.CashBackAmount != null) ? parseFloat(odataObject.CashBackAmount) : undefined;
                    this.AmountInTenderedCurrency = (odataObject.AmountInTenderedCurrency != null) ? parseFloat(odataObject.AmountInTenderedCurrency) : undefined;
                    this.AmountInCompanyCurrency = (odataObject.AmountInCompanyCurrency != null) ? parseFloat(odataObject.AmountInCompanyCurrency) : undefined;
                    this.Currency = odataObject.Currency;
                    this.ExchangeRate = (odataObject.ExchangeRate != null) ? parseFloat(odataObject.ExchangeRate) : undefined;
                    this.CompanyCurrencyExchangeRate = (odataObject.CompanyCurrencyExchangeRate != null) ? parseFloat(odataObject.CompanyCurrencyExchangeRate) : undefined;
                    this.TenderTypeId = odataObject.TenderTypeId;
                    this.SignatureData = odataObject.SignatureData;
                    this.ReasonCodeLines = undefined;
                    if (odataObject.ReasonCodeLines) {
                        this.ReasonCodeLines = [];
                        for (var i = 0; i < odataObject.ReasonCodeLines.length; i++) {
                            if (odataObject.ReasonCodeLines[i] != null) {
                                if (odataObject.ReasonCodeLines[i]['@odata.type'] != null) {
                                    var className = odataObject.ReasonCodeLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ReasonCodeLines[i] = new Commerce.Proxy.Entities[className](odataObject.ReasonCodeLines[i]);
                                    }
                                }
                                else {
                                    this.ReasonCodeLines[i] = new ReasonCodeLineClass(odataObject.ReasonCodeLines[i]);
                                }
                            }
                            else {
                                this.ReasonCodeLines[i] = undefined;
                            }
                        }
                    }
                    this.LineNumber = (odataObject.LineNumber != null) ? parseFloat(odataObject.LineNumber) : undefined;
                    this.GiftCardId = odataObject.GiftCardId;
                    this.CreditMemoId = odataObject.CreditMemoId;
                    this.CustomerId = odataObject.CustomerId;
                    this.LoyaltyCardId = odataObject.LoyaltyCardId;
                    this.CardTypeId = odataObject.CardTypeId;
                    this.IsChangeLine = odataObject.IsChangeLine;
                    this.IsHistorical = odataObject.IsHistorical;
                    this.IsVoidable = odataObject.IsVoidable;
                    this.StatusValue = odataObject.StatusValue;
                    this.VoidStatusValue = odataObject.VoidStatusValue;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return CartTenderLineClass;
            }());
            Entities.CartTenderLineClass = CartTenderLineClass;
            var ChargeLineClass = (function () {
                function ChargeLineClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ChargeCode = odataObject.ChargeCode;
                    this.CurrencyCode = odataObject.CurrencyCode;
                    this.ModuleTypeValue = odataObject.ModuleTypeValue;
                    this.ChargeTypeValue = odataObject.ChargeTypeValue;
                    this.ChargeMethodValue = odataObject.ChargeMethodValue;
                    this.CalculatedAmount = (odataObject.CalculatedAmount != null) ? parseFloat(odataObject.CalculatedAmount) : undefined;
                    this.Value = (odataObject.Value != null) ? parseFloat(odataObject.Value) : undefined;
                    this.Description = odataObject.Description;
                    this.TransactionId = odataObject.TransactionId;
                    this.SaleLineNumber = (odataObject.SaleLineNumber != null) ? parseFloat(odataObject.SaleLineNumber) : undefined;
                    this.FromAmount = (odataObject.FromAmount != null) ? parseFloat(odataObject.FromAmount) : undefined;
                    this.ToAmount = (odataObject.ToAmount != null) ? parseFloat(odataObject.ToAmount) : undefined;
                    this.Keep = odataObject.Keep;
                    this.ItemId = odataObject.ItemId;
                    this.Quantity = (odataObject.Quantity != null) ? parseFloat(odataObject.Quantity) : undefined;
                    this.Price = (odataObject.Price != null) ? parseFloat(odataObject.Price) : undefined;
                    this.ItemTaxGroupId = odataObject.ItemTaxGroupId;
                    this.SalesTaxGroupId = odataObject.SalesTaxGroupId;
                    this.OriginalSalesTaxGroupId = odataObject.OriginalSalesTaxGroupId;
                    this.OriginalItemTaxGroupId = odataObject.OriginalItemTaxGroupId;
                    this.TaxAmount = (odataObject.TaxAmount != null) ? parseFloat(odataObject.TaxAmount) : undefined;
                    this.SalesOrderUnitOfMeasure = odataObject.SalesOrderUnitOfMeasure;
                    this.NetAmount = (odataObject.NetAmount != null) ? parseFloat(odataObject.NetAmount) : undefined;
                    this.NetAmountPerUnit = (odataObject.NetAmountPerUnit != null) ? parseFloat(odataObject.NetAmountPerUnit) : undefined;
                    this.GrossAmount = (odataObject.GrossAmount != null) ? parseFloat(odataObject.GrossAmount) : undefined;
                    this.TaxLines = undefined;
                    if (odataObject.TaxLines) {
                        this.TaxLines = [];
                        for (var i = 0; i < odataObject.TaxLines.length; i++) {
                            if (odataObject.TaxLines[i] != null) {
                                if (odataObject.TaxLines[i]['@odata.type'] != null) {
                                    var className = odataObject.TaxLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.TaxLines[i] = new Commerce.Proxy.Entities[className](odataObject.TaxLines[i]);
                                    }
                                }
                                else {
                                    this.TaxLines[i] = new TaxLineClass(odataObject.TaxLines[i]);
                                }
                            }
                            else {
                                this.TaxLines[i] = undefined;
                            }
                        }
                    }
                    this.TaxMeasures = undefined;
                    if (odataObject.TaxMeasures) {
                        this.TaxMeasures = [];
                        for (var i = 0; i < odataObject.TaxMeasures.length; i++) {
                            if (odataObject.TaxMeasures[i] != null) {
                                if (odataObject.TaxMeasures[i]['@odata.type'] != null) {
                                    var className = odataObject.TaxMeasures[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.TaxMeasures[i] = new Commerce.Proxy.Entities[className](odataObject.TaxMeasures[i]);
                                    }
                                }
                                else {
                                    this.TaxMeasures[i] = new TaxMeasureClass(odataObject.TaxMeasures[i]);
                                }
                            }
                            else {
                                this.TaxMeasures[i] = undefined;
                            }
                        }
                    }
                    this.TaxAmountExemptInclusive = (odataObject.TaxAmountExemptInclusive != null) ? parseFloat(odataObject.TaxAmountExemptInclusive) : undefined;
                    this.TaxAmountInclusive = (odataObject.TaxAmountInclusive != null) ? parseFloat(odataObject.TaxAmountInclusive) : undefined;
                    this.TaxAmountExclusive = (odataObject.TaxAmountExclusive != null) ? parseFloat(odataObject.TaxAmountExclusive) : undefined;
                    this.NetAmountWithAllInclusiveTax = (odataObject.NetAmountWithAllInclusiveTax != null) ? parseFloat(odataObject.NetAmountWithAllInclusiveTax) : undefined;
                    this.BeginDateTime = (odataObject.BeginDateTime instanceof Date) ? odataObject.BeginDateTime
                        : (odataObject.BeginDateTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.BeginDateTime, "Edm.DateTimeOffset", false) : undefined;
                    this.EndDateTime = (odataObject.EndDateTime instanceof Date) ? odataObject.EndDateTime
                        : (odataObject.EndDateTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.EndDateTime, "Edm.DateTimeOffset", false) : undefined;
                    this.TaxRatePercent = (odataObject.TaxRatePercent != null) ? parseFloat(odataObject.TaxRatePercent) : undefined;
                    this.IsReturnByReceipt = odataObject.IsReturnByReceipt;
                    this.ReturnLineTaxAmount = (odataObject.ReturnLineTaxAmount != null) ? parseFloat(odataObject.ReturnLineTaxAmount) : undefined;
                    this.ReturnTaxLines = undefined;
                    if (odataObject.ReturnTaxLines) {
                        this.ReturnTaxLines = [];
                        for (var i = 0; i < odataObject.ReturnTaxLines.length; i++) {
                            if (odataObject.ReturnTaxLines[i] != null) {
                                if (odataObject.ReturnTaxLines[i]['@odata.type'] != null) {
                                    var className = odataObject.ReturnTaxLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ReturnTaxLines[i] = new Commerce.Proxy.Entities[className](odataObject.ReturnTaxLines[i]);
                                    }
                                }
                                else {
                                    this.ReturnTaxLines[i] = new TaxLineClass(odataObject.ReturnTaxLines[i]);
                                }
                            }
                            else {
                                this.ReturnTaxLines[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ChargeLineClass;
            }());
            Entities.ChargeLineClass = ChargeLineClass;
            var CityInfoClass = (function () {
                function CityInfoClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Name = odataObject.Name;
                    this.Description = odataObject.Description;
                    this.CountryRegionId = odataObject.CountryRegionId;
                    this.StateId = odataObject.StateId;
                    this.CountyId = odataObject.CountyId;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return CityInfoClass;
            }());
            Entities.CityInfoClass = CityInfoClass;
            var CommissionSalesGroupClass = (function () {
                function CommissionSalesGroupClass(odataObject) {
                    odataObject = odataObject || {};
                    this.GroupId = odataObject.GroupId;
                    this.Name = odataObject.Name;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return CommissionSalesGroupClass;
            }());
            Entities.CommissionSalesGroupClass = CommissionSalesGroupClass;
            var ContactInformationClass = (function () {
                function ContactInformationClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Value = odataObject.Value;
                    this.ContactInformationTypeValue = odataObject.ContactInformationTypeValue;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ContactInformationClass;
            }());
            Entities.ContactInformationClass = ContactInformationClass;
            var AttributeCategoryClass = (function () {
                function AttributeCategoryClass(odataObject) {
                    odataObject = odataObject || {};
                    if (odataObject.Value == null) {
                        this.Value = undefined;
                    }
                    else if (odataObject.Value['@odata.type'] == null) {
                        this.Value = new CommercePropertyValueClass(odataObject.Value);
                    }
                    else {
                        var className = odataObject.Value['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.Value = new Commerce.Proxy.Entities[className](odataObject.Value);
                        }
                    }
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.Name = odataObject.Name;
                    this.KeyName = odataObject.KeyName;
                    this.DataTypeValue = odataObject.DataTypeValue;
                    this.NameTranslations = undefined;
                    if (odataObject.NameTranslations) {
                        this.NameTranslations = [];
                        for (var i = 0; i < odataObject.NameTranslations.length; i++) {
                            if (odataObject.NameTranslations[i] != null) {
                                if (odataObject.NameTranslations[i]['@odata.type'] != null) {
                                    var className = odataObject.NameTranslations[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.NameTranslations[i] = new Commerce.Proxy.Entities[className](odataObject.NameTranslations[i]);
                                    }
                                }
                                else {
                                    this.NameTranslations[i] = new TextValueTranslationClass(odataObject.NameTranslations[i]);
                                }
                            }
                            else {
                                this.NameTranslations[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return AttributeCategoryClass;
            }());
            Entities.AttributeCategoryClass = AttributeCategoryClass;
            var ProductComparisonEntryClass = (function () {
                function ProductComparisonEntryClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ProductId = (odataObject.ProductId != null) ? parseInt(odataObject.ProductId, 10) : undefined;
                    if (odataObject.AttributeValue == null) {
                        this.AttributeValue = undefined;
                    }
                    else if (odataObject.AttributeValue['@odata.type'] == null) {
                        this.AttributeValue = new AttributeValueClass(odataObject.AttributeValue);
                    }
                    else {
                        var className = odataObject.AttributeValue['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.AttributeValue = new Commerce.Proxy.Entities[className](odataObject.AttributeValue);
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ProductComparisonEntryClass;
            }());
            Entities.ProductComparisonEntryClass = ProductComparisonEntryClass;
            var ProductComparisonLineClass = (function () {
                function ProductComparisonLineClass(odataObject) {
                    odataObject = odataObject || {};
                    this.AttributeRecordId = (odataObject.AttributeRecordId != null) ? parseInt(odataObject.AttributeRecordId, 10) : undefined;
                    this.AttributeName = odataObject.AttributeName;
                    this.ProductAttributeComparisonEntries = undefined;
                    if (odataObject.ProductAttributeComparisonEntries) {
                        this.ProductAttributeComparisonEntries = [];
                        for (var i = 0; i < odataObject.ProductAttributeComparisonEntries.length; i++) {
                            if (odataObject.ProductAttributeComparisonEntries[i] != null) {
                                if (odataObject.ProductAttributeComparisonEntries[i]['@odata.type'] != null) {
                                    var className = odataObject.ProductAttributeComparisonEntries[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ProductAttributeComparisonEntries[i] = new Commerce.Proxy.Entities[className](odataObject.ProductAttributeComparisonEntries[i]);
                                    }
                                }
                                else {
                                    this.ProductAttributeComparisonEntries[i] = new ProductComparisonEntryClass(odataObject.ProductAttributeComparisonEntries[i]);
                                }
                            }
                            else {
                                this.ProductAttributeComparisonEntries[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ProductComparisonLineClass;
            }());
            Entities.ProductComparisonLineClass = ProductComparisonLineClass;
            var AttributeDefinitionClass = (function () {
                function AttributeDefinitionClass(odataObject) {
                    odataObject = odataObject || {};
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.Name = odataObject.Name;
                    this.AttributeTypeName = odataObject.AttributeTypeName;
                    this.DataType = odataObject.DataType;
                    this.DataTypeValue = odataObject.DataTypeValue;
                    this.IsHidden = odataObject.IsHidden;
                    this.IsMandatory = odataObject.IsMandatory;
                    this.IsMultiValue = odataObject.IsMultiValue;
                    this.IsEnumeration = odataObject.IsEnumeration;
                    this.TranslationDetails = undefined;
                    if (odataObject.TranslationDetails) {
                        this.TranslationDetails = [];
                        for (var i = 0; i < odataObject.TranslationDetails.length; i++) {
                            if (odataObject.TranslationDetails[i] != null) {
                                if (odataObject.TranslationDetails[i]['@odata.type'] != null) {
                                    var className = odataObject.TranslationDetails[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.TranslationDetails[i] = new Commerce.Proxy.Entities[className](odataObject.TranslationDetails[i]);
                                    }
                                }
                                else {
                                    this.TranslationDetails[i] = new AttributeTranslationDetailsClass(odataObject.TranslationDetails[i]);
                                }
                            }
                            else {
                                this.TranslationDetails[i] = undefined;
                            }
                        }
                    }
                    this.EnumerationDetails = undefined;
                    if (odataObject.EnumerationDetails) {
                        this.EnumerationDetails = [];
                        for (var i = 0; i < odataObject.EnumerationDetails.length; i++) {
                            if (odataObject.EnumerationDetails[i] != null) {
                                if (odataObject.EnumerationDetails[i]['@odata.type'] != null) {
                                    var className = odataObject.EnumerationDetails[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.EnumerationDetails[i] = new Commerce.Proxy.Entities[className](odataObject.EnumerationDetails[i]);
                                    }
                                }
                                else {
                                    this.EnumerationDetails[i] = new AttributeEnumerationClass(odataObject.EnumerationDetails[i]);
                                }
                            }
                            else {
                                this.EnumerationDetails[i] = undefined;
                            }
                        }
                    }
                    if (odataObject.DefaultValue == null) {
                        this.DefaultValue = undefined;
                    }
                    else if (odataObject.DefaultValue['@odata.type'] == null) {
                        this.DefaultValue = new CommercePropertyValueClass(odataObject.DefaultValue);
                    }
                    else {
                        var className = odataObject.DefaultValue['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.DefaultValue = new Commerce.Proxy.Entities[className](odataObject.DefaultValue);
                        }
                    }
                    if (odataObject.UpperBound == null) {
                        this.UpperBound = undefined;
                    }
                    else if (odataObject.UpperBound['@odata.type'] == null) {
                        this.UpperBound = new CommercePropertyValueClass(odataObject.UpperBound);
                    }
                    else {
                        var className = odataObject.UpperBound['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.UpperBound = new Commerce.Proxy.Entities[className](odataObject.UpperBound);
                        }
                    }
                    if (odataObject.LowerBound == null) {
                        this.LowerBound = undefined;
                    }
                    else if (odataObject.LowerBound['@odata.type'] == null) {
                        this.LowerBound = new CommercePropertyValueClass(odataObject.LowerBound);
                    }
                    else {
                        var className = odataObject.LowerBound['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.LowerBound = new Commerce.Proxy.Entities[className](odataObject.LowerBound);
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return AttributeDefinitionClass;
            }());
            Entities.AttributeDefinitionClass = AttributeDefinitionClass;
            var AttributeTranslationDetailsClass = (function () {
                function AttributeTranslationDetailsClass(odataObject) {
                    odataObject = odataObject || {};
                    this.AttributeRecordId = (odataObject.AttributeRecordId != null) ? parseInt(odataObject.AttributeRecordId, 10) : undefined;
                    this.LanguageId = odataObject.LanguageId;
                    this.FriendlyName = odataObject.FriendlyName;
                    this.Description = odataObject.Description;
                    this.HelpText = odataObject.HelpText;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return AttributeTranslationDetailsClass;
            }());
            Entities.AttributeTranslationDetailsClass = AttributeTranslationDetailsClass;
            var AttributeEnumerationClass = (function () {
                function AttributeEnumerationClass(odataObject) {
                    odataObject = odataObject || {};
                    this.OrdinalNumber = odataObject.OrdinalNumber;
                    this.EnumerationValue = odataObject.EnumerationValue;
                    this.AttributeEnumerationTranslations = undefined;
                    if (odataObject.AttributeEnumerationTranslations) {
                        this.AttributeEnumerationTranslations = [];
                        for (var i = 0; i < odataObject.AttributeEnumerationTranslations.length; i++) {
                            if (odataObject.AttributeEnumerationTranslations[i] != null) {
                                if (odataObject.AttributeEnumerationTranslations[i]['@odata.type'] != null) {
                                    var className = odataObject.AttributeEnumerationTranslations[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.AttributeEnumerationTranslations[i] = new Commerce.Proxy.Entities[className](odataObject.AttributeEnumerationTranslations[i]);
                                    }
                                }
                                else {
                                    this.AttributeEnumerationTranslations[i] = new AttributeEnumerationTranslationClass(odataObject.AttributeEnumerationTranslations[i]);
                                }
                            }
                            else {
                                this.AttributeEnumerationTranslations[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return AttributeEnumerationClass;
            }());
            Entities.AttributeEnumerationClass = AttributeEnumerationClass;
            var AttributeEnumerationTranslationClass = (function () {
                function AttributeEnumerationTranslationClass(odataObject) {
                    odataObject = odataObject || {};
                    this.LanguageId = odataObject.LanguageId;
                    this.EnumerationTranslationValue = odataObject.EnumerationTranslationValue;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return AttributeEnumerationTranslationClass;
            }());
            Entities.AttributeEnumerationTranslationClass = AttributeEnumerationTranslationClass;
            var AttributeDefinitionCriteriaClass = (function () {
                function AttributeDefinitionCriteriaClass(odataObject) {
                    odataObject = odataObject || {};
                    this.AttributeGroupIdentifier = (odataObject.AttributeGroupIdentifier != null) ? parseInt(odataObject.AttributeGroupIdentifier, 10) : undefined;
                    this.Languages = undefined;
                    if (odataObject.Languages) {
                        this.Languages = [];
                        for (var i = 0; i < odataObject.Languages.length; i++) {
                            if (odataObject.Languages[i] != null) {
                                this.Languages[i] = odataObject.Languages[i];
                            }
                            else {
                                this.Languages[i] = undefined;
                            }
                        }
                    }
                }
                return AttributeDefinitionCriteriaClass;
            }());
            Entities.AttributeDefinitionCriteriaClass = AttributeDefinitionCriteriaClass;
            var CountyInfoClass = (function () {
                function CountyInfoClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Name = odataObject.Name;
                    this.CountyId = odataObject.CountyId;
                    this.CountryRegionId = odataObject.CountryRegionId;
                    this.StateId = odataObject.StateId;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return CountyInfoClass;
            }());
            Entities.CountyInfoClass = CountyInfoClass;
            var CustomerGroupClass = (function () {
                function CustomerGroupClass(odataObject) {
                    odataObject = odataObject || {};
                    this.CustomerGroupNumber = odataObject.CustomerGroupNumber;
                    this.CustomerGroupName = odataObject.CustomerGroupName;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return CustomerGroupClass;
            }());
            Entities.CustomerGroupClass = CustomerGroupClass;
            var DiscountLineClass = (function () {
                function DiscountLineClass(odataObject) {
                    odataObject = odataObject || {};
                    this.SaleLineNumber = (odataObject.SaleLineNumber != null) ? parseFloat(odataObject.SaleLineNumber) : undefined;
                    this.OfferId = odataObject.OfferId;
                    this.OfferName = odataObject.OfferName;
                    this.Amount = (odataObject.Amount != null) ? parseFloat(odataObject.Amount) : undefined;
                    this.DiscountCost = (odataObject.DiscountCost != null) ? parseFloat(odataObject.DiscountCost) : undefined;
                    this.EffectiveAmount = (odataObject.EffectiveAmount != null) ? parseFloat(odataObject.EffectiveAmount) : undefined;
                    this.SavedEffectiveAmount = (odataObject.SavedEffectiveAmount != null) ? parseFloat(odataObject.SavedEffectiveAmount) : undefined;
                    this.Percentage = (odataObject.Percentage != null) ? parseFloat(odataObject.Percentage) : undefined;
                    this.DealPrice = (odataObject.DealPrice != null) ? parseFloat(odataObject.DealPrice) : undefined;
                    this.DiscountLineTypeValue = odataObject.DiscountLineTypeValue;
                    this.ManualDiscountTypeValue = odataObject.ManualDiscountTypeValue;
                    this.CustomerDiscountTypeValue = odataObject.CustomerDiscountTypeValue;
                    this.PeriodicDiscountTypeValue = odataObject.PeriodicDiscountTypeValue;
                    this.DiscountApplicationGroup = odataObject.DiscountApplicationGroup;
                    this.ConcurrencyModeValue = odataObject.ConcurrencyModeValue;
                    this.IsCompoundable = odataObject.IsCompoundable;
                    this.DiscountCode = odataObject.DiscountCode;
                    this.PricingPriorityNumber = odataObject.PricingPriorityNumber;
                    this.IsDiscountCodeRequired = odataObject.IsDiscountCodeRequired;
                    this.ThresholdAmountRequired = (odataObject.ThresholdAmountRequired != null) ? parseFloat(odataObject.ThresholdAmountRequired) : undefined;
                    this.BundleId = odataObject.BundleId;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return DiscountLineClass;
            }());
            Entities.DiscountLineClass = DiscountLineClass;
            var EmployeePermissionsClass = (function () {
                function EmployeePermissionsClass(odataObject) {
                    odataObject = odataObject || {};
                    this.PriceOverrideRestrictionValue = odataObject.PriceOverrideRestrictionValue;
                    this.AllowPriceOverride = odataObject.AllowPriceOverride;
                    this.MaximumDiscountPercentage = (odataObject.MaximumDiscountPercentage != null) ? parseFloat(odataObject.MaximumDiscountPercentage) : undefined;
                    this.MaximumLineDiscountAmount = (odataObject.MaximumLineDiscountAmount != null) ? parseFloat(odataObject.MaximumLineDiscountAmount) : undefined;
                    this.MaximumLineReturnAmount = (odataObject.MaximumLineReturnAmount != null) ? parseFloat(odataObject.MaximumLineReturnAmount) : undefined;
                    this.MaximumTotalDiscountAmount = (odataObject.MaximumTotalDiscountAmount != null) ? parseFloat(odataObject.MaximumTotalDiscountAmount) : undefined;
                    this.MaximumTotalDiscountPercentage = (odataObject.MaximumTotalDiscountPercentage != null) ? parseFloat(odataObject.MaximumTotalDiscountPercentage) : undefined;
                    this.MaxTotalReturnAmount = (odataObject.MaxTotalReturnAmount != null) ? parseFloat(odataObject.MaxTotalReturnAmount) : undefined;
                    this.StaffId = odataObject.StaffId;
                    this.Roles = undefined;
                    if (odataObject.Roles) {
                        this.Roles = [];
                        for (var i = 0; i < odataObject.Roles.length; i++) {
                            if (odataObject.Roles[i] != null) {
                                this.Roles[i] = odataObject.Roles[i];
                            }
                            else {
                                this.Roles[i] = undefined;
                            }
                        }
                    }
                    this.AllowUseSharedShift = odataObject.AllowUseSharedShift;
                    this.AllowManageSharedShift = odataObject.AllowManageSharedShift;
                    this.AllowTaskGuides = odataObject.AllowTaskGuides;
                    this.AllowSaleOutsideAssortment = odataObject.AllowSaleOutsideAssortment;
                    this.AllowPrintingReceiptCopy = odataObject.AllowPrintingReceiptCopy;
                    this.AllowSkipFiscalRegistration = odataObject.AllowSkipFiscalRegistration;
                    this.AllowCreateTransferOrder = odataObject.AllowCreateTransferOrder;
                    this.AllowAcceptOrder = odataObject.AllowAcceptOrder;
                    this.AllowRejectOrder = odataObject.AllowRejectOrder;
                    this.AllowMassActivation = odataObject.AllowMassActivation;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return EmployeePermissionsClass;
            }());
            Entities.EmployeePermissionsClass = EmployeePermissionsClass;
            var CommercePropertyClass = (function () {
                function CommercePropertyClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Key = odataObject.Key;
                    if (odataObject.Value == null) {
                        this.Value = undefined;
                    }
                    else if (odataObject.Value['@odata.type'] == null) {
                        this.Value = new CommercePropertyValueClass(odataObject.Value);
                    }
                    else {
                        var className = odataObject.Value['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.Value = new Commerce.Proxy.Entities[className](odataObject.Value);
                        }
                    }
                }
                return CommercePropertyClass;
            }());
            Entities.CommercePropertyClass = CommercePropertyClass;
            var CommercePropertyValueClass = (function () {
                function CommercePropertyValueClass(odataObject) {
                    odataObject = odataObject || {};
                    this.BooleanValue = odataObject.BooleanValue;
                    this.ByteValue = (odataObject.ByteValue != null) ? parseInt(odataObject.ByteValue, 10) : undefined;
                    this.DateTimeOffsetValue = (odataObject.DateTimeOffsetValue instanceof Date) ? odataObject.DateTimeOffsetValue
                        : (odataObject.DateTimeOffsetValue != null) ? OData.jsonLightReadStringPropertyValue(odataObject.DateTimeOffsetValue, "Edm.DateTimeOffset", false) : undefined;
                    this.DecimalValue = (odataObject.DecimalValue != null) ? parseFloat(odataObject.DecimalValue) : undefined;
                    this.IntegerValue = odataObject.IntegerValue;
                    this.LongValue = (odataObject.LongValue != null) ? parseInt(odataObject.LongValue, 10) : undefined;
                    this.StringValue = odataObject.StringValue;
                }
                return CommercePropertyValueClass;
            }());
            Entities.CommercePropertyValueClass = CommercePropertyValueClass;
            var CountryRegionInfoClass = (function () {
                function CountryRegionInfoClass(odataObject) {
                    odataObject = odataObject || {};
                    this.CountryRegionId = odataObject.CountryRegionId;
                    this.ShortName = odataObject.ShortName;
                    this.LongName = odataObject.LongName;
                    this.ISOCode = odataObject.ISOCode;
                    this.TimeZone = odataObject.TimeZone;
                    this.LanguageId = odataObject.LanguageId;
                    this.AddressFormatLines = undefined;
                    if (odataObject.AddressFormatLines) {
                        this.AddressFormatLines = [];
                        for (var i = 0; i < odataObject.AddressFormatLines.length; i++) {
                            if (odataObject.AddressFormatLines[i] != null) {
                                if (odataObject.AddressFormatLines[i]['@odata.type'] != null) {
                                    var className = odataObject.AddressFormatLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.AddressFormatLines[i] = new Commerce.Proxy.Entities[className](odataObject.AddressFormatLines[i]);
                                    }
                                }
                                else {
                                    this.AddressFormatLines[i] = new AddressFormattingInfoClass(odataObject.AddressFormatLines[i]);
                                }
                            }
                            else {
                                this.AddressFormatLines[i] = undefined;
                            }
                        }
                    }
                    this.AddressFormatId = odataObject.AddressFormatId;
                    this.AddressFormatName = odataObject.AddressFormatName;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return CountryRegionInfoClass;
            }());
            Entities.CountryRegionInfoClass = CountryRegionInfoClass;
            var CreditMemoClass = (function () {
                function CreditMemoClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Id = odataObject.Id;
                    this.Balance = (odataObject.Balance != null) ? parseFloat(odataObject.Balance) : undefined;
                    this.CurrencyCode = odataObject.CurrencyCode;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return CreditMemoClass;
            }());
            Entities.CreditMemoClass = CreditMemoClass;
            var CurrencyClass = (function () {
                function CurrencyClass(odataObject) {
                    odataObject = odataObject || {};
                    this.CurrencyCode = odataObject.CurrencyCode;
                    this.CurrencySymbol = odataObject.CurrencySymbol;
                    this.RoundOffPrice = (odataObject.RoundOffPrice != null) ? parseFloat(odataObject.RoundOffPrice) : undefined;
                    this.RoundOffSales = (odataObject.RoundOffSales != null) ? parseFloat(odataObject.RoundOffSales) : undefined;
                    this.RoundOffTypePrice = odataObject.RoundOffTypePrice;
                    this.RoundOffTypeSales = odataObject.RoundOffTypeSales;
                    this.NumberOfDecimals = odataObject.NumberOfDecimals;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return CurrencyClass;
            }());
            Entities.CurrencyClass = CurrencyClass;
            var CurrencyAmountClass = (function () {
                function CurrencyAmountClass(odataObject) {
                    odataObject = odataObject || {};
                    this.CurrencyCode = odataObject.CurrencyCode;
                    this.CurrencySymbol = odataObject.CurrencySymbol;
                    this.ConvertedAmount = (odataObject.ConvertedAmount != null) ? parseFloat(odataObject.ConvertedAmount) : undefined;
                    this.RoundedConvertedAmount = (odataObject.RoundedConvertedAmount != null) ? parseFloat(odataObject.RoundedConvertedAmount) : undefined;
                    this.ExchangeRate = (odataObject.ExchangeRate != null) ? parseFloat(odataObject.ExchangeRate) : undefined;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return CurrencyAmountClass;
            }());
            Entities.CurrencyAmountClass = CurrencyAmountClass;
            var EnvironmentConfigurationClass = (function () {
                function EnvironmentConfigurationClass(odataObject) {
                    odataObject = odataObject || {};
                    this.EnvironmentId = odataObject.EnvironmentId;
                    this.TenantId = odataObject.TenantId;
                    this.ClientAppInsightsInstrumentationKey = odataObject.ClientAppInsightsInstrumentationKey;
                    this.HardwareStationAppInsightsInstrumentationKey = odataObject.HardwareStationAppInsightsInstrumentationKey;
                    this.WindowsPhonePosAppInsightsInstrumentationKey = odataObject.WindowsPhonePosAppInsightsInstrumentationKey;
                }
                return EnvironmentConfigurationClass;
            }());
            Entities.EnvironmentConfigurationClass = EnvironmentConfigurationClass;
            var DeviceConfigurationClass = (function () {
                function DeviceConfigurationClass(odataObject) {
                    odataObject = odataObject || {};
                    this.UseInMemoryDeviceDataStorage = odataObject.UseInMemoryDeviceDataStorage;
                    this.AllowItemsAggregation = odataObject.AllowItemsAggregation;
                    this.AggregateItemsForPrinting = odataObject.AggregateItemsForPrinting;
                    this.AggregatePayments = odataObject.AggregatePayments;
                    this.AlwaysExpandTransactionScreenLineDetails = odataObject.AlwaysExpandTransactionScreenLineDetails;
                    this.AuditEnabled = odataObject.AuditEnabled;
                    this.DiscountAtTotal = odataObject.DiscountAtTotal;
                    this.ProductDiscount = odataObject.ProductDiscount;
                    this.ManuallyCalculateComplexDiscounts = odataObject.ManuallyCalculateComplexDiscounts;
                    this.DisplaySecondaryTotalCurrency = odataObject.DisplaySecondaryTotalCurrency;
                    this.EndOfTransaction = odataObject.EndOfTransaction;
                    this.ItemNotOnFile = odataObject.ItemNotOnFile;
                    this.LimitStaffListToStore = odataObject.LimitStaffListToStore;
                    this.LineItemTaxChange = odataObject.LineItemTaxChange;
                    this.MarkUp = odataObject.MarkUp;
                    this.MaximumPrice = (odataObject.MaximumPrice != null) ? parseFloat(odataObject.MaximumPrice) : undefined;
                    this.MaximumQuantity = (odataObject.MaximumQuantity != null) ? parseFloat(odataObject.MaximumQuantity) : undefined;
                    this.MinimumPasswordLength = odataObject.MinimumPasswordLength;
                    this.MustKeyInPriceIfZero = odataObject.MustKeyInPriceIfZero;
                    this.NfcEContingencyModeEnabled = odataObject.NfcEContingencyModeEnabled;
                    this.NfcEVoided = odataObject.NfcEVoided;
                    this.FunctionalityProfileDescription = odataObject.FunctionalityProfileDescription;
                    this.OverridePrice = odataObject.OverridePrice;
                    this.PrintXZReportsOnTerminal = odataObject.PrintXZReportsOnTerminal;
                    this.PrintTenderDetailsOnXReport = odataObject.PrintTenderDetailsOnXReport;
                    this.ProfileId = odataObject.ProfileId;
                    this.RefundSale = odataObject.RefundSale;
                    this.ReturnProduct = odataObject.ReturnProduct;
                    this.SalesPerson = odataObject.SalesPerson;
                    this.SecondaryTotalCurrency = odataObject.SecondaryTotalCurrency;
                    this.SelectHardwareStationOnTendering = odataObject.SelectHardwareStationOnTendering;
                    this.SerialNumber = odataObject.SerialNumber;
                    this.ShowStaffListAtLogOn = odataObject.ShowStaffListAtLogOn;
                    this.StaffBarcodeLogOn = odataObject.StaffBarcodeLogOn;
                    this.StaffBarcodeLogOnRequiresPassword = odataObject.StaffBarcodeLogOnRequiresPassword;
                    this.StaffCardLogOn = odataObject.StaffCardLogOn;
                    this.StaffCardLogOnRequiresPassword = odataObject.StaffCardLogOnRequiresPassword;
                    this.StartOfTransaction = odataObject.StartOfTransaction;
                    this.EnableTimeRegistration = odataObject.EnableTimeRegistration;
                    this.TenderDeclaration = odataObject.TenderDeclaration;
                    this.TransactionTaxChange = odataObject.TransactionTaxChange;
                    this.VoidItem = odataObject.VoidItem;
                    this.VoidPayment = odataObject.VoidPayment;
                    this.SalesModeDefaultsAsCustomerOrder = odataObject.SalesModeDefaultsAsCustomerOrder;
                    this.CreateOfflineCustomerOrders = odataObject.CreateOfflineCustomerOrders;
                    this.CreateAsyncCustomers = odataObject.CreateAsyncCustomers;
                    this.EnableAxCustomerSearch = odataObject.EnableAxCustomerSearch;
                    this.VoidTransaction = odataObject.VoidTransaction;
                    this.CultureName = odataObject.CultureName;
                    this.SystemLegalTermsUrl = odataObject.SystemLegalTermsUrl;
                    this.SystemPrivacyStatementUrl = odataObject.SystemPrivacyStatementUrl;
                    this.HideTrainingMode = odataObject.HideTrainingMode;
                    this.StorePhone = odataObject.StorePhone;
                    this.StatementMethod = odataObject.StatementMethod;
                    this.StoreNumber = odataObject.StoreNumber;
                    this.ChannelId = (odataObject.ChannelId != null) ? parseInt(odataObject.ChannelId, 10) : undefined;
                    this.StoreTaxGroup = odataObject.StoreTaxGroup;
                    this.TaxIdNumber = odataObject.TaxIdNumber;
                    this.TaxOverrideGroup = (odataObject.TaxOverrideGroup != null) ? parseInt(odataObject.TaxOverrideGroup, 10) : undefined;
                    this.TenderDeclarationCalculation = odataObject.TenderDeclarationCalculation;
                    this.UseCustomerBasedTax = odataObject.UseCustomerBasedTax;
                    this.UseDestinationBasedTax = odataObject.UseDestinationBasedTax;
                    this.AutoLogOffTimeoutInMinutes = odataObject.AutoLogOffTimeoutInMinutes;
                    this.AutoExitMethodValue = odataObject.AutoExitMethodValue;
                    this.CustomerDisplayText1 = odataObject.CustomerDisplayText1;
                    this.CustomerDisplayText2 = odataObject.CustomerDisplayText2;
                    this.EFTStoreId = (odataObject.EFTStoreId != null) ? parseInt(odataObject.EFTStoreId, 10) : undefined;
                    this.EFTTerminalId = odataObject.EFTTerminalId;
                    this.ExitAfterEachTransaction = odataObject.ExitAfterEachTransaction;
                    this.HardwareProfile = odataObject.HardwareProfile;
                    this.Placement = odataObject.Placement;
                    this.TerminalDescription = odataObject.TerminalDescription;
                    this.OpenDrawer = odataObject.OpenDrawer;
                    this.OpenDrawerAtLogOnLogOff = odataObject.OpenDrawerAtLogOnLogOff;
                    this.PrintTaxRefundChecks = odataObject.PrintTaxRefundChecks;
                    this.StandAlone = odataObject.StandAlone;
                    this.TerminalId = odataObject.TerminalId;
                    this.TerminalStatement = odataObject.TerminalStatement;
                    this.VisualProfile = odataObject.VisualProfile;
                    this.Currency = odataObject.Currency;
                    this.InventLocationId = odataObject.InventLocationId;
                    this.IncludeKitComponents = odataObject.IncludeKitComponents;
                    this.AccentColor = odataObject.AccentColor;
                    this.HeaderColor = odataObject.HeaderColor;
                    this.Theme = odataObject.Theme;
                    this.FontScheme = odataObject.FontScheme;
                    this.ShowAppBarLabel = odataObject.ShowAppBarLabel;
                    this.LogOnBackgroundPictureAsBase64 = odataObject.LogOnBackgroundPictureAsBase64;
                    this.LogOnBackgroundPicturePortraitAsBase64 = odataObject.LogOnBackgroundPicturePortraitAsBase64;
                    this.BackgroundPictureAsBase64 = odataObject.BackgroundPictureAsBase64;
                    this.LogonBackgroundPictureId = (odataObject.LogonBackgroundPictureId != null) ? parseInt(odataObject.LogonBackgroundPictureId, 10) : undefined;
                    this.LogonBackgroundPictureIdCompact = (odataObject.LogonBackgroundPictureIdCompact != null) ? parseInt(odataObject.LogonBackgroundPictureIdCompact, 10) : undefined;
                    this.LogonBackgroundPictureIdPortrait = (odataObject.LogonBackgroundPictureIdPortrait != null) ? parseInt(odataObject.LogonBackgroundPictureIdPortrait, 10) : undefined;
                    this.LogonBackgroundPictureIdCompactPortrait = (odataObject.LogonBackgroundPictureIdCompactPortrait != null) ? parseInt(odataObject.LogonBackgroundPictureIdCompactPortrait, 10) : undefined;
                    this.BackgroundPictureId = (odataObject.BackgroundPictureId != null) ? parseInt(odataObject.BackgroundPictureId, 10) : undefined;
                    this.RequireAmountDeclaration = odataObject.RequireAmountDeclaration;
                    this.DecimalNotRequiredForMinorCurrencyUnit = odataObject.DecimalNotRequiredForMinorCurrencyUnit;
                    this.MaxTransactionSearchResults = odataObject.MaxTransactionSearchResults;
                    this.OfflineProfileId = (odataObject.OfflineProfileId != null) ? parseInt(odataObject.OfflineProfileId, 10) : undefined;
                    this.NewOfflineDatabaseCheckInterval = odataObject.NewOfflineDatabaseCheckInterval;
                    this.OfflineTransactionUploadInterval = odataObject.OfflineTransactionUploadInterval;
                    this.ReconnectToOnlineInterval = odataObject.ReconnectToOnlineInterval;
                    this.SwitchToOfflineTimeout = odataObject.SwitchToOfflineTimeout;
                    this.RetentionDays = odataObject.RetentionDays;
                    if (odataObject.HardwareConfigurations == null) {
                        this.HardwareConfigurations = undefined;
                    }
                    else if (odataObject.HardwareConfigurations['@odata.type'] == null) {
                        this.HardwareConfigurations = new HardwareConfigurationsClass(odataObject.HardwareConfigurations);
                    }
                    else {
                        var className = odataObject.HardwareConfigurations['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.HardwareConfigurations = new Commerce.Proxy.Entities[className](odataObject.HardwareConfigurations);
                        }
                    }
                    this.CreateRecording = odataObject.CreateRecording;
                    this.PlaybackRecording = odataObject.PlaybackRecording;
                    this.ShouldUseDefaultCommisionSalesGroup = odataObject.ShouldUseDefaultCommisionSalesGroup;
                    this.AskForSalesRepresentative = odataObject.AskForSalesRepresentative;
                    this.IsSalesRepRequired = odataObject.IsSalesRepRequired;
                    this.ProhibitMixingSalesAndReturns = odataObject.ProhibitMixingSalesAndReturns;
                    this.ApplyDiscountsToPriceKeyedIn = odataObject.ApplyDiscountsToPriceKeyedIn;
                    this.ApplyDiscountsToPriceOverrides = odataObject.ApplyDiscountsToPriceOverrides;
                    this.IsProductSuggestionsEnabled = odataObject.IsProductSuggestionsEnabled;
                    this.ProductSearchType = odataObject.ProductSearchType;
                    this.DenominationsToDisplayValue = odataObject.DenominationsToDisplayValue;
                    this.RejectOrderFulfillment = odataObject.RejectOrderFulfillment;
                    this.EmployeeLogonTypeValue = odataObject.EmployeeLogonTypeValue;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return DeviceConfigurationClass;
            }());
            Entities.DeviceConfigurationClass = DeviceConfigurationClass;
            var DeviceClass = (function () {
                function DeviceClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ChannelId = (odataObject.ChannelId != null) ? parseInt(odataObject.ChannelId, 10) : undefined;
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.DeviceNumber = odataObject.DeviceNumber;
                    this.DeviceId = odataObject.DeviceId;
                    this.Description = odataObject.Description;
                    this.DeviceType = odataObject.DeviceType;
                    this.TerminalRecordId = (odataObject.TerminalRecordId != null) ? parseInt(odataObject.TerminalRecordId, 10) : undefined;
                    this.TerminalId = odataObject.TerminalId;
                    this.ChannelName = odataObject.ChannelName;
                    this.UseInMemoryDeviceDataStorage = odataObject.UseInMemoryDeviceDataStorage;
                    this.AllowMassActivation = odataObject.AllowMassActivation;
                    this.TokenIssueTime = (odataObject.TokenIssueTime instanceof Date) ? odataObject.TokenIssueTime
                        : (odataObject.TokenIssueTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.TokenIssueTime, "Edm.DateTimeOffset", false) : undefined;
                    this.ActivationStatusValue = odataObject.ActivationStatusValue;
                    this.Token = odataObject.Token;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return DeviceClass;
            }());
            Entities.DeviceClass = DeviceClass;
            var DiscountCodeClass = (function () {
                function DiscountCodeClass(odataObject) {
                    odataObject = odataObject || {};
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.Barcode = odataObject.Barcode;
                    this.Code = odataObject.Code;
                    this.ConcurrencyMode = odataObject.ConcurrencyMode;
                    this.Description = odataObject.Description;
                    this.Disclaimer = odataObject.Disclaimer;
                    this.IsDiscountCodeRequired = odataObject.IsDiscountCodeRequired;
                    this.Name = odataObject.Name;
                    this.OfferId = odataObject.OfferId;
                    this.IsEnabled = odataObject.IsEnabled;
                    this.ValidFrom = (odataObject.ValidFrom instanceof Date) ? odataObject.ValidFrom
                        : (odataObject.ValidFrom != null) ? OData.jsonLightReadStringPropertyValue(odataObject.ValidFrom, "Edm.DateTimeOffset", false) : undefined;
                    this.ValidTo = (odataObject.ValidTo instanceof Date) ? odataObject.ValidTo
                        : (odataObject.ValidTo != null) ? OData.jsonLightReadStringPropertyValue(odataObject.ValidTo, "Edm.DateTimeOffset", false) : undefined;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return DiscountCodeClass;
            }());
            Entities.DiscountCodeClass = DiscountCodeClass;
            var DistrictInfoClass = (function () {
                function DistrictInfoClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Name = odataObject.Name;
                    this.Description = odataObject.Description;
                    this.CountryRegionId = odataObject.CountryRegionId;
                    this.StateId = odataObject.StateId;
                    this.CountyId = odataObject.CountyId;
                    this.CityName = odataObject.CityName;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return DistrictInfoClass;
            }());
            Entities.DistrictInfoClass = DistrictInfoClass;
            var HardwareProfileClass = (function () {
                function HardwareProfileClass(odataObject) {
                    odataObject = odataObject || {};
                    this.LineDisplayDelayForLinkedItems = odataObject.LineDisplayDelayForLinkedItems;
                    this.LineDisplayBalanceText = odataObject.LineDisplayBalanceText;
                    this.LineDisplayBinaryConversion = odataObject.LineDisplayBinaryConversion;
                    this.LineDisplayCharacterSet = odataObject.LineDisplayCharacterSet;
                    this.LineDisplayClosedLine1 = odataObject.LineDisplayClosedLine1;
                    this.LineDisplayClosedLine2 = odataObject.LineDisplayClosedLine2;
                    this.LineDisplayDeviceDescription = odataObject.LineDisplayDeviceDescription;
                    this.LineDisplayDeviceTypeValue = odataObject.LineDisplayDeviceTypeValue;
                    this.LineDisplayDeviceName = odataObject.LineDisplayDeviceName;
                    this.LineDisplayDisplayLinkedItem = odataObject.LineDisplayDisplayLinkedItem;
                    this.LineDisplayDisplayTerminalClosed = odataObject.LineDisplayDisplayTerminalClosed;
                    this.LineDisplayTotalText = odataObject.LineDisplayTotalText;
                    this.DualDisplayActive = odataObject.DualDisplayActive;
                    this.DualDisplayWebBrowserUrl = odataObject.DualDisplayWebBrowserUrl;
                    this.DualDisplayImageRotatorInterval = odataObject.DualDisplayImageRotatorInterval;
                    this.DualDisplayImageRotatorPath = odataObject.DualDisplayImageRotatorPath;
                    this.DualDisplayReceiptWidthPercentage = (odataObject.DualDisplayReceiptWidthPercentage != null) ? parseFloat(odataObject.DualDisplayReceiptWidthPercentage) : undefined;
                    this.DualDisplayDisplayType = odataObject.DualDisplayDisplayType;
                    this.EftTypeId = odataObject.EftTypeId;
                    this.EftCompanyId = odataObject.EftCompanyId;
                    this.EftConfiguration = odataObject.EftConfiguration;
                    this.EftPaymentConnectorName = odataObject.EftPaymentConnectorName;
                    this.EftData = odataObject.EftData;
                    this.EftDescription = odataObject.EftDescription;
                    this.EftMerchantId = odataObject.EftMerchantId;
                    this.EftPassword = odataObject.EftPassword;
                    this.EftServerName = odataObject.EftServerName;
                    this.EftServerPort = odataObject.EftServerPort;
                    this.EftUserId = odataObject.EftUserId;
                    this.EftTestMode = odataObject.EftTestMode;
                    this.MsrEndTrack1 = odataObject.MsrEndTrack1;
                    this.MsrEndTrack2 = odataObject.MsrEndTrack2;
                    this.FiscalPrinterManagementReportPAFIdentification = odataObject.FiscalPrinterManagementReportPAFIdentification;
                    this.FiscalPrinterManagementReportConfigParameter = odataObject.FiscalPrinterManagementReportConfigParameter;
                    this.FiscalPrinterManagementReportTenderType = odataObject.FiscalPrinterManagementReportTenderType;
                    this.FiscalPrinterManagementReportGiftCard = odataObject.FiscalPrinterManagementReportGiftCard;
                    this.FiscalRegisterDeviceTypeValue = odataObject.FiscalRegisterDeviceTypeValue;
                    this.FiscalRegisterConfiguration = odataObject.FiscalRegisterConfiguration;
                    this.FiscalRegisterDeviceDescription = odataObject.FiscalRegisterDeviceDescription;
                    this.FiscalRegisterDeviceName = odataObject.FiscalRegisterDeviceName;
                    this.KeyboardMappingId = odataObject.KeyboardMappingId;
                    this.KeyLockDeviceTypeValue = odataObject.KeyLockDeviceTypeValue;
                    this.KeyLockDeviceDescription = odataObject.KeyLockDeviceDescription;
                    this.KeyLockDeviceName = odataObject.KeyLockDeviceName;
                    this.MsrDeviceTypeValue = odataObject.MsrDeviceTypeValue;
                    this.MsrDeviceDescription = odataObject.MsrDeviceDescription;
                    this.MsrDeviceName = odataObject.MsrDeviceName;
                    this.MsrMake = odataObject.MsrMake;
                    this.MsrModel = odataObject.MsrModel;
                    this.MsrSeparator = odataObject.MsrSeparator;
                    this.MsrStartTrack = odataObject.MsrStartTrack;
                    this.PinPadDeviceTypeValue = odataObject.PinPadDeviceTypeValue;
                    this.PinPadDeviceName = odataObject.PinPadDeviceName;
                    this.PinPadMake = odataObject.PinPadMake;
                    this.PinPadModel = odataObject.PinPadModel;
                    this.PinPadDeviceDescription = odataObject.PinPadDeviceDescription;
                    this.ProfileDescription = odataObject.ProfileDescription;
                    this.ProfileId = odataObject.ProfileId;
                    this.RFIDDeviceTypeValue = odataObject.RFIDDeviceTypeValue;
                    this.RFIDDeviceName = odataObject.RFIDDeviceName;
                    this.RFIDDeviceDescription = odataObject.RFIDDeviceDescription;
                    this.ScaleDeviceTypeValue = odataObject.ScaleDeviceTypeValue;
                    this.ScaleDeviceName = odataObject.ScaleDeviceName;
                    this.ScaleDeviceDescription = odataObject.ScaleDeviceDescription;
                    this.ScaleManualInputAllowed = odataObject.ScaleManualInputAllowed;
                    this.ScaleTimeoutInSeconds = odataObject.ScaleTimeoutInSeconds;
                    this.SignatureCaptureDeviceTypeValue = odataObject.SignatureCaptureDeviceTypeValue;
                    this.SignatureCaptureDeviceName = odataObject.SignatureCaptureDeviceName;
                    this.SignatureCaptureMake = odataObject.SignatureCaptureMake;
                    this.SignatureCaptureModel = odataObject.SignatureCaptureModel;
                    this.SignatureCaptureDeviceDescription = odataObject.SignatureCaptureDeviceDescription;
                    this.SignatureCaptureFormName = odataObject.SignatureCaptureFormName;
                    this.Printers = undefined;
                    if (odataObject.Printers) {
                        this.Printers = [];
                        for (var i = 0; i < odataObject.Printers.length; i++) {
                            if (odataObject.Printers[i] != null) {
                                if (odataObject.Printers[i]['@odata.type'] != null) {
                                    var className = odataObject.Printers[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.Printers[i] = new Commerce.Proxy.Entities[className](odataObject.Printers[i]);
                                    }
                                }
                                else {
                                    this.Printers[i] = new HardwareProfilePrinterClass(odataObject.Printers[i]);
                                }
                            }
                            else {
                                this.Printers[i] = undefined;
                            }
                        }
                    }
                    this.Scanners = undefined;
                    if (odataObject.Scanners) {
                        this.Scanners = [];
                        for (var i = 0; i < odataObject.Scanners.length; i++) {
                            if (odataObject.Scanners[i] != null) {
                                if (odataObject.Scanners[i]['@odata.type'] != null) {
                                    var className = odataObject.Scanners[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.Scanners[i] = new Commerce.Proxy.Entities[className](odataObject.Scanners[i]);
                                    }
                                }
                                else {
                                    this.Scanners[i] = new HardwareProfileScannerClass(odataObject.Scanners[i]);
                                }
                            }
                            else {
                                this.Scanners[i] = undefined;
                            }
                        }
                    }
                    this.CashDrawers = undefined;
                    if (odataObject.CashDrawers) {
                        this.CashDrawers = [];
                        for (var i = 0; i < odataObject.CashDrawers.length; i++) {
                            if (odataObject.CashDrawers[i] != null) {
                                if (odataObject.CashDrawers[i]['@odata.type'] != null) {
                                    var className = odataObject.CashDrawers[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.CashDrawers[i] = new Commerce.Proxy.Entities[className](odataObject.CashDrawers[i]);
                                    }
                                }
                                else {
                                    this.CashDrawers[i] = new HardwareProfileCashDrawerClass(odataObject.CashDrawers[i]);
                                }
                            }
                            else {
                                this.CashDrawers[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return HardwareProfileClass;
            }());
            Entities.HardwareProfileClass = HardwareProfileClass;
            var SupportedLanguageClass = (function () {
                function SupportedLanguageClass(odataObject) {
                    odataObject = odataObject || {};
                    this.LanguageId = odataObject.LanguageId;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return SupportedLanguageClass;
            }());
            Entities.SupportedLanguageClass = SupportedLanguageClass;
            var PaymentCardClass = (function () {
                function PaymentCardClass(odataObject) {
                    odataObject = odataObject || {};
                    this.UseShippingAddress = odataObject.UseShippingAddress;
                    this.CardNumber = odataObject.CardNumber;
                    this.CCID = odataObject.CCID;
                    this.Track1 = odataObject.Track1;
                    this.Track2 = odataObject.Track2;
                    this.Track3 = odataObject.Track3;
                    this.VoiceAuthorizationCode = odataObject.VoiceAuthorizationCode;
                    this.EncryptedPin = odataObject.EncryptedPin;
                    this.AdditionalSecurityData = odataObject.AdditionalSecurityData;
                    this.IsSwipe = odataObject.IsSwipe;
                    this.Phone = odataObject.Phone;
                    this.Country = odataObject.Country;
                    this.Address1 = odataObject.Address1;
                    this.Address2 = odataObject.Address2;
                    this.City = odataObject.City;
                    this.State = odataObject.State;
                    this.Zip = odataObject.Zip;
                    this.NameOnCard = odataObject.NameOnCard;
                    this.CardTypeId = odataObject.CardTypeId;
                    this.ExpirationMonth = odataObject.ExpirationMonth;
                    this.ExpirationYear = odataObject.ExpirationYear;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return PaymentCardClass;
            }());
            Entities.PaymentCardClass = PaymentCardClass;
            var CardPaymentAcceptSettingsClass = (function () {
                function CardPaymentAcceptSettingsClass(odataObject) {
                    odataObject = odataObject || {};
                    this.HostPageOrigin = odataObject.HostPageOrigin;
                    this.AdaptorPath = odataObject.AdaptorPath;
                    this.CardTokenizationEnabled = odataObject.CardTokenizationEnabled;
                    this.CardPaymentEnabled = odataObject.CardPaymentEnabled;
                    this.PaymentAmount = (odataObject.PaymentAmount != null) ? parseFloat(odataObject.PaymentAmount) : undefined;
                }
                return CardPaymentAcceptSettingsClass;
            }());
            Entities.CardPaymentAcceptSettingsClass = CardPaymentAcceptSettingsClass;
            var CardPaymentAcceptPointClass = (function () {
                function CardPaymentAcceptPointClass(odataObject) {
                    odataObject = odataObject || {};
                    this.AcceptPageUrl = odataObject.AcceptPageUrl;
                    this.AcceptPageSubmitUrl = odataObject.AcceptPageSubmitUrl;
                    this.MessageOrigin = odataObject.MessageOrigin;
                }
                return CardPaymentAcceptPointClass;
            }());
            Entities.CardPaymentAcceptPointClass = CardPaymentAcceptPointClass;
            var CardPaymentAcceptResultClass = (function () {
                function CardPaymentAcceptResultClass(odataObject) {
                    odataObject = odataObject || {};
                    if (odataObject.TenderLine == null) {
                        this.TenderLine = undefined;
                    }
                    else if (odataObject.TenderLine['@odata.type'] == null) {
                        this.TenderLine = new TenderLineClass(odataObject.TenderLine);
                    }
                    else {
                        var className = odataObject.TenderLine['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.TenderLine = new Commerce.Proxy.Entities[className](odataObject.TenderLine);
                        }
                    }
                    if (odataObject.TokenizedPaymentCard == null) {
                        this.TokenizedPaymentCard = undefined;
                    }
                    else if (odataObject.TokenizedPaymentCard['@odata.type'] == null) {
                        this.TokenizedPaymentCard = new TokenizedPaymentCardClass(odataObject.TokenizedPaymentCard);
                    }
                    else {
                        var className = odataObject.TokenizedPaymentCard['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.TokenizedPaymentCard = new Commerce.Proxy.Entities[className](odataObject.TokenizedPaymentCard);
                        }
                    }
                    this.PaymentSdkErrors = undefined;
                    if (odataObject.PaymentSdkErrors) {
                        this.PaymentSdkErrors = [];
                        for (var i = 0; i < odataObject.PaymentSdkErrors.length; i++) {
                            if (odataObject.PaymentSdkErrors[i] != null) {
                                if (odataObject.PaymentSdkErrors[i]['@odata.type'] != null) {
                                    var className = odataObject.PaymentSdkErrors[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.PaymentSdkErrors[i] = new Commerce.Proxy.Entities[className](odataObject.PaymentSdkErrors[i]);
                                    }
                                }
                                else {
                                    this.PaymentSdkErrors[i] = new PaymentErrorClass(odataObject.PaymentSdkErrors[i]);
                                }
                            }
                            else {
                                this.PaymentSdkErrors[i] = undefined;
                            }
                        }
                    }
                }
                return CardPaymentAcceptResultClass;
            }());
            Entities.CardPaymentAcceptResultClass = CardPaymentAcceptResultClass;
            var ReasonCodeLineClass = (function () {
                function ReasonCodeLineClass(odataObject) {
                    odataObject = odataObject || {};
                    this.LineId = odataObject.LineId;
                    this.Amount = (odataObject.Amount != null) ? parseFloat(odataObject.Amount) : undefined;
                    this.Information = odataObject.Information;
                    this.InformationAmount = (odataObject.InformationAmount != null) ? parseFloat(odataObject.InformationAmount) : undefined;
                    this.InputTypeValue = odataObject.InputTypeValue;
                    this.ItemTender = odataObject.ItemTender;
                    this.LineNumber = (odataObject.LineNumber != null) ? parseFloat(odataObject.LineNumber) : undefined;
                    this.LineTypeValue = odataObject.LineTypeValue;
                    this.ParentLineId = odataObject.ParentLineId;
                    this.ReasonCodeId = odataObject.ReasonCodeId;
                    this.StatementCode = odataObject.StatementCode;
                    this.SubReasonCodeId = odataObject.SubReasonCodeId;
                    this.SourceCode = odataObject.SourceCode;
                    this.SourceCode2 = odataObject.SourceCode2;
                    this.SourceCode3 = odataObject.SourceCode3;
                    this.TransactionId = odataObject.TransactionId;
                    this.CreatedDateTime = (odataObject.CreatedDateTime instanceof Date) ? odataObject.CreatedDateTime
                        : (odataObject.CreatedDateTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.CreatedDateTime, "Edm.DateTimeOffset", false) : undefined;
                    this.IsChanged = odataObject.IsChanged;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ReasonCodeLineClass;
            }());
            Entities.ReasonCodeLineClass = ReasonCodeLineClass;
            var ReasonSubCodeClass = (function () {
                function ReasonSubCodeClass(odataObject) {
                    odataObject = odataObject || {};
                    this.TriggerCode = odataObject.TriggerCode;
                    this.AmountPercent = (odataObject.AmountPercent != null) ? parseFloat(odataObject.AmountPercent) : undefined;
                    this.ReasonCodeId = odataObject.ReasonCodeId;
                    this.SubCodeId = odataObject.SubCodeId;
                    this.Description = odataObject.Description;
                    this.TriggerFunctionTypeValue = odataObject.TriggerFunctionTypeValue;
                    this.ProductId = (odataObject.ProductId != null) ? parseInt(odataObject.ProductId, 10) : undefined;
                    this.PriceTypeValue = odataObject.PriceTypeValue;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ReasonSubCodeClass;
            }());
            Entities.ReasonSubCodeClass = ReasonSubCodeClass;
            var ReceiptClass = (function () {
                function ReceiptClass(odataObject) {
                    odataObject = odataObject || {};
                    this.TransactionId = odataObject.TransactionId;
                    this.Header = odataObject.Header;
                    this.Body = odataObject.Body;
                    this.Footer = odataObject.Footer;
                    this.Width = odataObject.Width;
                    this.ReceiptId = odataObject.ReceiptId;
                    this.LayoutId = odataObject.LayoutId;
                    this.ReceiptTitle = odataObject.ReceiptTitle;
                    this.ReceiptTypeValue = odataObject.ReceiptTypeValue;
                    this.ReceiptTypeStrValue = odataObject.ReceiptTypeStrValue;
                    this.Printers = undefined;
                    if (odataObject.Printers) {
                        this.Printers = [];
                        for (var i = 0; i < odataObject.Printers.length; i++) {
                            if (odataObject.Printers[i] != null) {
                                if (odataObject.Printers[i]['@odata.type'] != null) {
                                    var className = odataObject.Printers[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.Printers[i] = new Commerce.Proxy.Entities[className](odataObject.Printers[i]);
                                    }
                                }
                                else {
                                    this.Printers[i] = new PrinterClass(odataObject.Printers[i]);
                                }
                            }
                            else {
                                this.Printers[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ReceiptClass;
            }());
            Entities.ReceiptClass = ReceiptClass;
            var ReceiptMaskClass = (function () {
                function ReceiptMaskClass(odataObject) {
                    odataObject = odataObject || {};
                    this.FunctionalityProfileId = odataObject.FunctionalityProfileId;
                    this.IsIndependent = odataObject.IsIndependent;
                    this.ReceiptTransactionTypeValue = odataObject.ReceiptTransactionTypeValue;
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.Mask = odataObject.Mask;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ReceiptMaskClass;
            }());
            Entities.ReceiptMaskClass = ReceiptMaskClass;
            var SalesLineClass = (function () {
                function SalesLineClass(odataObject) {
                    odataObject = odataObject || {};
                    this.StaffId = odataObject.StaffId;
                    this.LineId = odataObject.LineId;
                    this.Description = odataObject.Description;
                    this.OriginLineId = odataObject.OriginLineId;
                    this.TaxOverrideCode = odataObject.TaxOverrideCode;
                    this.IsPriceKeyedIn = odataObject.IsPriceKeyedIn;
                    this.ProductId = (odataObject.ProductId != null) ? parseInt(odataObject.ProductId, 10) : undefined;
                    this.Barcode = odataObject.Barcode;
                    this.EntryMethodTypeValue = odataObject.EntryMethodTypeValue;
                    this.MasterProductId = (odataObject.MasterProductId != null) ? parseInt(odataObject.MasterProductId, 10) : undefined;
                    this.ListingId = (odataObject.ListingId != null) ? parseInt(odataObject.ListingId, 10) : undefined;
                    this.IsPriceOverridden = odataObject.IsPriceOverridden;
                    this.OriginalPrice = (odataObject.OriginalPrice != null) ? parseFloat(odataObject.OriginalPrice) : undefined;
                    this.TotalAmount = (odataObject.TotalAmount != null) ? parseFloat(odataObject.TotalAmount) : undefined;
                    this.NetAmountWithoutTax = (odataObject.NetAmountWithoutTax != null) ? parseFloat(odataObject.NetAmountWithoutTax) : undefined;
                    this.DiscountAmount = (odataObject.DiscountAmount != null) ? parseFloat(odataObject.DiscountAmount) : undefined;
                    this.TotalDiscount = (odataObject.TotalDiscount != null) ? parseFloat(odataObject.TotalDiscount) : undefined;
                    this.TotalPercentageDiscount = (odataObject.TotalPercentageDiscount != null) ? parseFloat(odataObject.TotalPercentageDiscount) : undefined;
                    this.LineDiscount = (odataObject.LineDiscount != null) ? parseFloat(odataObject.LineDiscount) : undefined;
                    this.PeriodicDiscount = (odataObject.PeriodicDiscount != null) ? parseFloat(odataObject.PeriodicDiscount) : undefined;
                    this.LineManualDiscountPercentage = (odataObject.LineManualDiscountPercentage != null) ? parseFloat(odataObject.LineManualDiscountPercentage) : undefined;
                    this.LineManualDiscountAmount = (odataObject.LineManualDiscountAmount != null) ? parseFloat(odataObject.LineManualDiscountAmount) : undefined;
                    if (odataObject.ShippingAddress == null) {
                        this.ShippingAddress = undefined;
                    }
                    else if (odataObject.ShippingAddress['@odata.type'] == null) {
                        this.ShippingAddress = new AddressClass(odataObject.ShippingAddress);
                    }
                    else {
                        var className = odataObject.ShippingAddress['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.ShippingAddress = new Commerce.Proxy.Entities[className](odataObject.ShippingAddress);
                        }
                    }
                    this.DeliveryMode = odataObject.DeliveryMode;
                    this.Comment = odataObject.Comment;
                    this.RequestedDeliveryDate = (odataObject.RequestedDeliveryDate instanceof Date) ? odataObject.RequestedDeliveryDate
                        : (odataObject.RequestedDeliveryDate != null) ? OData.jsonLightReadStringPropertyValue(odataObject.RequestedDeliveryDate, "Edm.DateTimeOffset", false) : undefined;
                    this.InventoryLocationId = odataObject.InventoryLocationId;
                    this.WarehouseLocation = odataObject.WarehouseLocation;
                    this.InventoryStatusId = odataObject.InventoryStatusId;
                    this.LicensePlate = odataObject.LicensePlate;
                    this.InventoryDimensionId = odataObject.InventoryDimensionId;
                    this.ItemType = odataObject.ItemType;
                    this.ReservationId = odataObject.ReservationId;
                    this.LineNumber = (odataObject.LineNumber != null) ? parseFloat(odataObject.LineNumber) : undefined;
                    this.ReturnQuantity = (odataObject.ReturnQuantity != null) ? parseFloat(odataObject.ReturnQuantity) : undefined;
                    this.QuantityRemained = (odataObject.QuantityRemained != null) ? parseFloat(odataObject.QuantityRemained) : undefined;
                    this.QuantityShipped = (odataObject.QuantityShipped != null) ? parseFloat(odataObject.QuantityShipped) : undefined;
                    this.LineVersion = odataObject.LineVersion;
                    this.StatusValue = odataObject.StatusValue;
                    this.SalesStatusValue = odataObject.SalesStatusValue;
                    this.ProductSourceValue = odataObject.ProductSourceValue;
                    this.IsGiftCardLine = odataObject.IsGiftCardLine;
                    this.GiftCardId = odataObject.GiftCardId;
                    this.GiftCardCurrencyCode = odataObject.GiftCardCurrencyCode;
                    this.GiftCardOperationValue = odataObject.GiftCardOperationValue;
                    this.IsInvoiceLine = odataObject.IsInvoiceLine;
                    this.InvoiceId = odataObject.InvoiceId;
                    this.InvoiceAmount = (odataObject.InvoiceAmount != null) ? parseFloat(odataObject.InvoiceAmount) : undefined;
                    this.IsInvoiceSettled = odataObject.IsInvoiceSettled;
                    this.IsVoided = odataObject.IsVoided;
                    this.IsPriceLocked = odataObject.IsPriceLocked;
                    this.ChargeLines = undefined;
                    if (odataObject.ChargeLines) {
                        this.ChargeLines = [];
                        for (var i = 0; i < odataObject.ChargeLines.length; i++) {
                            if (odataObject.ChargeLines[i] != null) {
                                if (odataObject.ChargeLines[i]['@odata.type'] != null) {
                                    var className = odataObject.ChargeLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ChargeLines[i] = new Commerce.Proxy.Entities[className](odataObject.ChargeLines[i]);
                                    }
                                }
                                else {
                                    this.ChargeLines[i] = new ChargeLineClass(odataObject.ChargeLines[i]);
                                }
                            }
                            else {
                                this.ChargeLines[i] = undefined;
                            }
                        }
                    }
                    this.BasePrice = (odataObject.BasePrice != null) ? parseFloat(odataObject.BasePrice) : undefined;
                    this.AgreementPrice = (odataObject.AgreementPrice != null) ? parseFloat(odataObject.AgreementPrice) : undefined;
                    this.AdjustedPrice = (odataObject.AdjustedPrice != null) ? parseFloat(odataObject.AdjustedPrice) : undefined;
                    this.ReturnTransactionId = odataObject.ReturnTransactionId;
                    this.ReturnLineNumber = (odataObject.ReturnLineNumber != null) ? parseFloat(odataObject.ReturnLineNumber) : undefined;
                    this.ReturnInventTransId = odataObject.ReturnInventTransId;
                    this.ReturnStore = odataObject.ReturnStore;
                    this.ReturnTerminalId = odataObject.ReturnTerminalId;
                    this.ReturnChannelId = (odataObject.ReturnChannelId != null) ? parseInt(odataObject.ReturnChannelId, 10) : undefined;
                    this.FulfillmentStoreId = odataObject.FulfillmentStoreId;
                    this.SalesDate = (odataObject.SalesDate instanceof Date) ? odataObject.SalesDate
                        : (odataObject.SalesDate != null) ? OData.jsonLightReadStringPropertyValue(odataObject.SalesDate, "Edm.DateTimeOffset", false) : undefined;
                    this.QuantityInvoiced = (odataObject.QuantityInvoiced != null) ? parseFloat(odataObject.QuantityInvoiced) : undefined;
                    this.QuantityOrdered = (odataObject.QuantityOrdered != null) ? parseFloat(odataObject.QuantityOrdered) : undefined;
                    this.QuantityCanceled = (odataObject.QuantityCanceled != null) ? parseFloat(odataObject.QuantityCanceled) : undefined;
                    this.SavedQuantity = (odataObject.SavedQuantity != null) ? parseFloat(odataObject.SavedQuantity) : undefined;
                    this.IsSavedDiscount = odataObject.IsSavedDiscount;
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.SerialNumber = odataObject.SerialNumber;
                    this.BatchId = odataObject.BatchId;
                    this.DeliveryModeChargeAmount = (odataObject.DeliveryModeChargeAmount != null) ? parseFloat(odataObject.DeliveryModeChargeAmount) : undefined;
                    this.UnitOfMeasureSymbol = odataObject.UnitOfMeasureSymbol;
                    this.CatalogId = (odataObject.CatalogId != null) ? parseInt(odataObject.CatalogId, 10) : undefined;
                    this.ElectronicDeliveryEmailAddress = odataObject.ElectronicDeliveryEmailAddress;
                    this.ElectronicDeliveryEmailContent = odataObject.ElectronicDeliveryEmailContent;
                    this.LoyaltyDiscountAmount = (odataObject.LoyaltyDiscountAmount != null) ? parseFloat(odataObject.LoyaltyDiscountAmount) : undefined;
                    this.LoyaltyPercentageDiscount = (odataObject.LoyaltyPercentageDiscount != null) ? parseFloat(odataObject.LoyaltyPercentageDiscount) : undefined;
                    this.GiftCardBalance = (odataObject.GiftCardBalance != null) ? parseFloat(odataObject.GiftCardBalance) : undefined;
                    this.IsCustomerAccountDeposit = odataObject.IsCustomerAccountDeposit;
                    this.Blocked = odataObject.Blocked;
                    this.Found = odataObject.Found;
                    this.DateToActivateItem = (odataObject.DateToActivateItem instanceof Date) ? odataObject.DateToActivateItem
                        : (odataObject.DateToActivateItem != null) ? OData.jsonLightReadStringPropertyValue(odataObject.DateToActivateItem, "Edm.DateTimeOffset", false) : undefined;
                    this.LinePercentageDiscount = (odataObject.LinePercentageDiscount != null) ? parseFloat(odataObject.LinePercentageDiscount) : undefined;
                    this.PeriodicPercentageDiscount = (odataObject.PeriodicPercentageDiscount != null) ? parseFloat(odataObject.PeriodicPercentageDiscount) : undefined;
                    this.QuantityDiscounted = (odataObject.QuantityDiscounted != null) ? parseFloat(odataObject.QuantityDiscounted) : undefined;
                    this.UnitQuantity = (odataObject.UnitQuantity != null) ? parseFloat(odataObject.UnitQuantity) : undefined;
                    if (odataObject.UnitOfMeasureConversion == null) {
                        this.UnitOfMeasureConversion = undefined;
                    }
                    else if (odataObject.UnitOfMeasureConversion['@odata.type'] == null) {
                        this.UnitOfMeasureConversion = new UnitOfMeasureConversionClass(odataObject.UnitOfMeasureConversion);
                    }
                    else {
                        var className = odataObject.UnitOfMeasureConversion['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.UnitOfMeasureConversion = new Commerce.Proxy.Entities[className](odataObject.UnitOfMeasureConversion);
                        }
                    }
                    this.DiscountLines = undefined;
                    if (odataObject.DiscountLines) {
                        this.DiscountLines = [];
                        for (var i = 0; i < odataObject.DiscountLines.length; i++) {
                            if (odataObject.DiscountLines[i] != null) {
                                if (odataObject.DiscountLines[i]['@odata.type'] != null) {
                                    var className = odataObject.DiscountLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.DiscountLines[i] = new Commerce.Proxy.Entities[className](odataObject.DiscountLines[i]);
                                    }
                                }
                                else {
                                    this.DiscountLines[i] = new DiscountLineClass(odataObject.DiscountLines[i]);
                                }
                            }
                            else {
                                this.DiscountLines[i] = undefined;
                            }
                        }
                    }
                    this.PriceLines = undefined;
                    if (odataObject.PriceLines) {
                        this.PriceLines = [];
                        for (var i = 0; i < odataObject.PriceLines.length; i++) {
                            if (odataObject.PriceLines[i] != null) {
                                if (odataObject.PriceLines[i]['@odata.type'] != null) {
                                    var className = odataObject.PriceLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.PriceLines[i] = new Commerce.Proxy.Entities[className](odataObject.PriceLines[i]);
                                    }
                                }
                                else {
                                    this.PriceLines[i] = new PriceLineClass(odataObject.PriceLines[i]);
                                }
                            }
                            else {
                                this.PriceLines[i] = undefined;
                            }
                        }
                    }
                    this.PeriodicDiscountPossibilities = undefined;
                    if (odataObject.PeriodicDiscountPossibilities) {
                        this.PeriodicDiscountPossibilities = [];
                        for (var i = 0; i < odataObject.PeriodicDiscountPossibilities.length; i++) {
                            if (odataObject.PeriodicDiscountPossibilities[i] != null) {
                                if (odataObject.PeriodicDiscountPossibilities[i]['@odata.type'] != null) {
                                    var className = odataObject.PeriodicDiscountPossibilities[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.PeriodicDiscountPossibilities[i] = new Commerce.Proxy.Entities[className](odataObject.PeriodicDiscountPossibilities[i]);
                                    }
                                }
                                else {
                                    this.PeriodicDiscountPossibilities[i] = new DiscountLineClass(odataObject.PeriodicDiscountPossibilities[i]);
                                }
                            }
                            else {
                                this.PeriodicDiscountPossibilities[i] = undefined;
                            }
                        }
                    }
                    this.ReasonCodeLines = undefined;
                    if (odataObject.ReasonCodeLines) {
                        this.ReasonCodeLines = [];
                        for (var i = 0; i < odataObject.ReasonCodeLines.length; i++) {
                            if (odataObject.ReasonCodeLines[i] != null) {
                                if (odataObject.ReasonCodeLines[i]['@odata.type'] != null) {
                                    var className = odataObject.ReasonCodeLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ReasonCodeLines[i] = new Commerce.Proxy.Entities[className](odataObject.ReasonCodeLines[i]);
                                    }
                                }
                                else {
                                    this.ReasonCodeLines[i] = new ReasonCodeLineClass(odataObject.ReasonCodeLines[i]);
                                }
                            }
                            else {
                                this.ReasonCodeLines[i] = undefined;
                            }
                        }
                    }
                    if (odataObject.ReturnLabelProperties == null) {
                        this.ReturnLabelProperties = undefined;
                    }
                    else if (odataObject.ReturnLabelProperties['@odata.type'] == null) {
                        this.ReturnLabelProperties = new ReturnLabelContentClass(odataObject.ReturnLabelProperties);
                    }
                    else {
                        var className = odataObject.ReturnLabelProperties['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.ReturnLabelProperties = new Commerce.Proxy.Entities[className](odataObject.ReturnLabelProperties);
                        }
                    }
                    this.LineMultilineDiscOnItem = odataObject.LineMultilineDiscOnItem;
                    this.RelatedDiscountedLineIds = undefined;
                    if (odataObject.RelatedDiscountedLineIds) {
                        this.RelatedDiscountedLineIds = [];
                        for (var i = 0; i < odataObject.RelatedDiscountedLineIds.length; i++) {
                            if (odataObject.RelatedDiscountedLineIds[i] != null) {
                                this.RelatedDiscountedLineIds[i] = odataObject.RelatedDiscountedLineIds[i];
                            }
                            else {
                                this.RelatedDiscountedLineIds[i] = undefined;
                            }
                        }
                    }
                    this.LinkedParentLineId = odataObject.LinkedParentLineId;
                    this.LineMultilineDiscOnItemValue = odataObject.LineMultilineDiscOnItemValue;
                    this.WasChanged = odataObject.WasChanged;
                    this.OriginalSalesOrderUnitOfMeasure = odataObject.OriginalSalesOrderUnitOfMeasure;
                    this.InventOrderUnitOfMeasure = odataObject.InventOrderUnitOfMeasure;
                    this.TrackingId = odataObject.TrackingId;
                    this.IsLoyaltyDiscountApplied = odataObject.IsLoyaltyDiscountApplied;
                    this.CommissionSalesGroup = odataObject.CommissionSalesGroup;
                    this.AttributeValues = undefined;
                    if (odataObject.AttributeValues) {
                        this.AttributeValues = [];
                        for (var i = 0; i < odataObject.AttributeValues.length; i++) {
                            if (odataObject.AttributeValues[i] != null) {
                                if (odataObject.AttributeValues[i]['@odata.type'] != null) {
                                    var className = odataObject.AttributeValues[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.AttributeValues[i] = new Commerce.Proxy.Entities[className](odataObject.AttributeValues[i]);
                                    }
                                }
                                else {
                                    this.AttributeValues[i] = new AttributeValueBaseClass(odataObject.AttributeValues[i]);
                                }
                            }
                            else {
                                this.AttributeValues[i] = undefined;
                            }
                        }
                    }
                    if (odataObject.ThirdPartyGiftCardInfo == null) {
                        this.ThirdPartyGiftCardInfo = undefined;
                    }
                    else if (odataObject.ThirdPartyGiftCardInfo['@odata.type'] == null) {
                        this.ThirdPartyGiftCardInfo = new ThirdPartyGiftCardInfoClass(odataObject.ThirdPartyGiftCardInfo);
                    }
                    else {
                        var className = odataObject.ThirdPartyGiftCardInfo['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.ThirdPartyGiftCardInfo = new Commerce.Proxy.Entities[className](odataObject.ThirdPartyGiftCardInfo);
                        }
                    }
                    this.ItemId = odataObject.ItemId;
                    this.Quantity = (odataObject.Quantity != null) ? parseFloat(odataObject.Quantity) : undefined;
                    this.Price = (odataObject.Price != null) ? parseFloat(odataObject.Price) : undefined;
                    this.ItemTaxGroupId = odataObject.ItemTaxGroupId;
                    this.SalesTaxGroupId = odataObject.SalesTaxGroupId;
                    this.OriginalSalesTaxGroupId = odataObject.OriginalSalesTaxGroupId;
                    this.OriginalItemTaxGroupId = odataObject.OriginalItemTaxGroupId;
                    this.TaxAmount = (odataObject.TaxAmount != null) ? parseFloat(odataObject.TaxAmount) : undefined;
                    this.SalesOrderUnitOfMeasure = odataObject.SalesOrderUnitOfMeasure;
                    this.NetAmount = (odataObject.NetAmount != null) ? parseFloat(odataObject.NetAmount) : undefined;
                    this.NetAmountPerUnit = (odataObject.NetAmountPerUnit != null) ? parseFloat(odataObject.NetAmountPerUnit) : undefined;
                    this.GrossAmount = (odataObject.GrossAmount != null) ? parseFloat(odataObject.GrossAmount) : undefined;
                    this.TaxLines = undefined;
                    if (odataObject.TaxLines) {
                        this.TaxLines = [];
                        for (var i = 0; i < odataObject.TaxLines.length; i++) {
                            if (odataObject.TaxLines[i] != null) {
                                if (odataObject.TaxLines[i]['@odata.type'] != null) {
                                    var className = odataObject.TaxLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.TaxLines[i] = new Commerce.Proxy.Entities[className](odataObject.TaxLines[i]);
                                    }
                                }
                                else {
                                    this.TaxLines[i] = new TaxLineClass(odataObject.TaxLines[i]);
                                }
                            }
                            else {
                                this.TaxLines[i] = undefined;
                            }
                        }
                    }
                    this.TaxMeasures = undefined;
                    if (odataObject.TaxMeasures) {
                        this.TaxMeasures = [];
                        for (var i = 0; i < odataObject.TaxMeasures.length; i++) {
                            if (odataObject.TaxMeasures[i] != null) {
                                if (odataObject.TaxMeasures[i]['@odata.type'] != null) {
                                    var className = odataObject.TaxMeasures[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.TaxMeasures[i] = new Commerce.Proxy.Entities[className](odataObject.TaxMeasures[i]);
                                    }
                                }
                                else {
                                    this.TaxMeasures[i] = new TaxMeasureClass(odataObject.TaxMeasures[i]);
                                }
                            }
                            else {
                                this.TaxMeasures[i] = undefined;
                            }
                        }
                    }
                    this.TaxAmountExemptInclusive = (odataObject.TaxAmountExemptInclusive != null) ? parseFloat(odataObject.TaxAmountExemptInclusive) : undefined;
                    this.TaxAmountInclusive = (odataObject.TaxAmountInclusive != null) ? parseFloat(odataObject.TaxAmountInclusive) : undefined;
                    this.TaxAmountExclusive = (odataObject.TaxAmountExclusive != null) ? parseFloat(odataObject.TaxAmountExclusive) : undefined;
                    this.NetAmountWithAllInclusiveTax = (odataObject.NetAmountWithAllInclusiveTax != null) ? parseFloat(odataObject.NetAmountWithAllInclusiveTax) : undefined;
                    this.BeginDateTime = (odataObject.BeginDateTime instanceof Date) ? odataObject.BeginDateTime
                        : (odataObject.BeginDateTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.BeginDateTime, "Edm.DateTimeOffset", false) : undefined;
                    this.EndDateTime = (odataObject.EndDateTime instanceof Date) ? odataObject.EndDateTime
                        : (odataObject.EndDateTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.EndDateTime, "Edm.DateTimeOffset", false) : undefined;
                    this.TaxRatePercent = (odataObject.TaxRatePercent != null) ? parseFloat(odataObject.TaxRatePercent) : undefined;
                    this.IsReturnByReceipt = odataObject.IsReturnByReceipt;
                    this.ReturnLineTaxAmount = (odataObject.ReturnLineTaxAmount != null) ? parseFloat(odataObject.ReturnLineTaxAmount) : undefined;
                    this.ReturnTaxLines = undefined;
                    if (odataObject.ReturnTaxLines) {
                        this.ReturnTaxLines = [];
                        for (var i = 0; i < odataObject.ReturnTaxLines.length; i++) {
                            if (odataObject.ReturnTaxLines[i] != null) {
                                if (odataObject.ReturnTaxLines[i]['@odata.type'] != null) {
                                    var className = odataObject.ReturnTaxLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ReturnTaxLines[i] = new Commerce.Proxy.Entities[className](odataObject.ReturnTaxLines[i]);
                                    }
                                }
                                else {
                                    this.ReturnTaxLines[i] = new TaxLineClass(odataObject.ReturnTaxLines[i]);
                                }
                            }
                            else {
                                this.ReturnTaxLines[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return SalesLineClass;
            }());
            Entities.SalesLineClass = SalesLineClass;
            var SearchAreaClass = (function () {
                function SearchAreaClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Longitude = (odataObject.Longitude != null) ? parseFloat(odataObject.Longitude) : undefined;
                    this.Latitude = (odataObject.Latitude != null) ? parseFloat(odataObject.Latitude) : undefined;
                    this.Radius = (odataObject.Radius != null) ? parseFloat(odataObject.Radius) : undefined;
                    this.DistanceUnitValue = odataObject.DistanceUnitValue;
                }
                return SearchAreaClass;
            }());
            Entities.SearchAreaClass = SearchAreaClass;
            var ShiftAccountLineClass = (function () {
                function ShiftAccountLineClass(odataObject) {
                    odataObject = odataObject || {};
                    this.AccountTypeValue = odataObject.AccountTypeValue;
                    this.AccountNumber = odataObject.AccountNumber;
                    this.Amount = (odataObject.Amount != null) ? parseFloat(odataObject.Amount) : undefined;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ShiftAccountLineClass;
            }());
            Entities.ShiftAccountLineClass = ShiftAccountLineClass;
            var ShiftTenderLineClass = (function () {
                function ShiftTenderLineClass(odataObject) {
                    odataObject = odataObject || {};
                    this.TenderTypeId = odataObject.TenderTypeId;
                    this.TenderTypeName = odataObject.TenderTypeName;
                    this.CardTypeId = odataObject.CardTypeId;
                    this.TenderCurrency = odataObject.TenderCurrency;
                    this.CountingRequired = odataObject.CountingRequired;
                    this.StartingAmountOfStoreCurrency = (odataObject.StartingAmountOfStoreCurrency != null) ? parseFloat(odataObject.StartingAmountOfStoreCurrency) : undefined;
                    this.StartingAmountOfTenderCurrency = (odataObject.StartingAmountOfTenderCurrency != null) ? parseFloat(odataObject.StartingAmountOfTenderCurrency) : undefined;
                    this.FloatingEntryAmountOfStoreCurrency = (odataObject.FloatingEntryAmountOfStoreCurrency != null) ? parseFloat(odataObject.FloatingEntryAmountOfStoreCurrency) : undefined;
                    this.FloatingEntryAmountOfTenderCurrency = (odataObject.FloatingEntryAmountOfTenderCurrency != null) ? parseFloat(odataObject.FloatingEntryAmountOfTenderCurrency) : undefined;
                    this.SafeDropAmountOfStoreCurrency = (odataObject.SafeDropAmountOfStoreCurrency != null) ? parseFloat(odataObject.SafeDropAmountOfStoreCurrency) : undefined;
                    this.SafeDropAmountOfTenderCurrency = (odataObject.SafeDropAmountOfTenderCurrency != null) ? parseFloat(odataObject.SafeDropAmountOfTenderCurrency) : undefined;
                    this.BankDropAmountOfStoreCurrency = (odataObject.BankDropAmountOfStoreCurrency != null) ? parseFloat(odataObject.BankDropAmountOfStoreCurrency) : undefined;
                    this.BankDropAmountOfTenderCurrency = (odataObject.BankDropAmountOfTenderCurrency != null) ? parseFloat(odataObject.BankDropAmountOfTenderCurrency) : undefined;
                    this.RemoveTenderAmountOfStoreCurrency = (odataObject.RemoveTenderAmountOfStoreCurrency != null) ? parseFloat(odataObject.RemoveTenderAmountOfStoreCurrency) : undefined;
                    this.RemoveTenderAmountOfTenderCurrency = (odataObject.RemoveTenderAmountOfTenderCurrency != null) ? parseFloat(odataObject.RemoveTenderAmountOfTenderCurrency) : undefined;
                    this.DeclareTenderAmountOfStoreCurrency = (odataObject.DeclareTenderAmountOfStoreCurrency != null) ? parseFloat(odataObject.DeclareTenderAmountOfStoreCurrency) : undefined;
                    this.DeclareTenderAmountOfTenderCurrency = (odataObject.DeclareTenderAmountOfTenderCurrency != null) ? parseFloat(odataObject.DeclareTenderAmountOfTenderCurrency) : undefined;
                    this.TenderedAmountOfStoreCurrency = (odataObject.TenderedAmountOfStoreCurrency != null) ? parseFloat(odataObject.TenderedAmountOfStoreCurrency) : undefined;
                    this.TenderedAmountOfTenderCurrency = (odataObject.TenderedAmountOfTenderCurrency != null) ? parseFloat(odataObject.TenderedAmountOfTenderCurrency) : undefined;
                    this.ChangeAmountOfStoreCurrency = (odataObject.ChangeAmountOfStoreCurrency != null) ? parseFloat(odataObject.ChangeAmountOfStoreCurrency) : undefined;
                    this.ChangeAmountOfTenderCurrency = (odataObject.ChangeAmountOfTenderCurrency != null) ? parseFloat(odataObject.ChangeAmountOfTenderCurrency) : undefined;
                    this.Count = odataObject.Count;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ShiftTenderLineClass;
            }());
            Entities.ShiftTenderLineClass = ShiftTenderLineClass;
            var StockCountJournalTransactionClass = (function () {
                function StockCountJournalTransactionClass(odataObject) {
                    odataObject = odataObject || {};
                    this.JournalId = odataObject.JournalId;
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.OperationType = odataObject.OperationType;
                    this.ItemId = odataObject.ItemId;
                    this.DataAreaId = odataObject.DataAreaId;
                    this.ProductRecordId = (odataObject.ProductRecordId != null) ? parseInt(odataObject.ProductRecordId, 10) : undefined;
                    this.ItemName = odataObject.ItemName;
                    this.InventDimId = odataObject.InventDimId;
                    this.Counted = (odataObject.Counted != null) ? parseFloat(odataObject.Counted) : undefined;
                    this.Quantity = (odataObject.Quantity != null) ? parseFloat(odataObject.Quantity) : undefined;
                    this.Unit = odataObject.Unit;
                    this.UserId = odataObject.UserId;
                    this.TerminalId = odataObject.TerminalId;
                    this.CountedDate = (odataObject.CountedDate instanceof Date) ? odataObject.CountedDate
                        : (odataObject.CountedDate != null) ? OData.jsonLightReadStringPropertyValue(odataObject.CountedDate, "Edm.DateTimeOffset", false) : undefined;
                    this.Status = odataObject.Status;
                    this.InventBatchId = odataObject.InventBatchId;
                    this.WarehouseLocationId = odataObject.WarehouseLocationId;
                    this.InventoryStatus = odataObject.InventoryStatus;
                    this.LicensePlate = odataObject.LicensePlate;
                    this.WarehousePalletId = odataObject.WarehousePalletId;
                    this.InventSiteId = odataObject.InventSiteId;
                    this.InventLocationId = odataObject.InventLocationId;
                    this.ConfigId = odataObject.ConfigId;
                    this.InventSizeId = odataObject.InventSizeId;
                    this.InventColorId = odataObject.InventColorId;
                    this.InventStyleId = odataObject.InventStyleId;
                    this.InventSerialId = odataObject.InventSerialId;
                    this.TrackingGuid = odataObject.TrackingGuid;
                    this.UpdatedInAx = odataObject.UpdatedInAx;
                    this.Message = odataObject.Message;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return StockCountJournalTransactionClass;
            }());
            Entities.StockCountJournalTransactionClass = StockCountJournalTransactionClass;
            var TaxLineClass = (function () {
                function TaxLineClass(odataObject) {
                    odataObject = odataObject || {};
                    this.TaxGroup = odataObject.TaxGroup;
                    this.Percentage = (odataObject.Percentage != null) ? parseFloat(odataObject.Percentage) : undefined;
                    this.IsExempt = odataObject.IsExempt;
                    this.TaxBasis = (odataObject.TaxBasis != null) ? parseFloat(odataObject.TaxBasis) : undefined;
                    this.IsIncludedInPrice = odataObject.IsIncludedInPrice;
                    this.SaleLineNumber = (odataObject.SaleLineNumber != null) ? parseFloat(odataObject.SaleLineNumber) : undefined;
                    this.StoreId = odataObject.StoreId;
                    this.TerminalId = odataObject.TerminalId;
                    this.TransactionId = odataObject.TransactionId;
                    this.TaxCode = odataObject.TaxCode;
                    this.Amount = (odataObject.Amount != null) ? parseFloat(odataObject.Amount) : undefined;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return TaxLineClass;
            }());
            Entities.TaxLineClass = TaxLineClass;
            var TenderLineClass = (function () {
                function TenderLineClass(odataObject) {
                    odataObject = odataObject || {};
                    this.CardToken = odataObject.CardToken;
                    this.Authorization = odataObject.Authorization;
                    this.TransactionStatusValue = odataObject.TransactionStatusValue;
                    this.IncomeExpenseAccountTypeValue = odataObject.IncomeExpenseAccountTypeValue;
                    this.MaskedCardNumber = odataObject.MaskedCardNumber;
                    this.TenderDate = (odataObject.TenderDate instanceof Date) ? odataObject.TenderDate
                        : (odataObject.TenderDate != null) ? OData.jsonLightReadStringPropertyValue(odataObject.TenderDate, "Edm.DateTimeOffset", false) : undefined;
                    this.IsPreProcessed = odataObject.IsPreProcessed;
                    this.IsDeposit = odataObject.IsDeposit;
                    this.TenderLineId = odataObject.TenderLineId;
                    this.Amount = (odataObject.Amount != null) ? parseFloat(odataObject.Amount) : undefined;
                    this.CashBackAmount = (odataObject.CashBackAmount != null) ? parseFloat(odataObject.CashBackAmount) : undefined;
                    this.AmountInTenderedCurrency = (odataObject.AmountInTenderedCurrency != null) ? parseFloat(odataObject.AmountInTenderedCurrency) : undefined;
                    this.AmountInCompanyCurrency = (odataObject.AmountInCompanyCurrency != null) ? parseFloat(odataObject.AmountInCompanyCurrency) : undefined;
                    this.Currency = odataObject.Currency;
                    this.ExchangeRate = (odataObject.ExchangeRate != null) ? parseFloat(odataObject.ExchangeRate) : undefined;
                    this.CompanyCurrencyExchangeRate = (odataObject.CompanyCurrencyExchangeRate != null) ? parseFloat(odataObject.CompanyCurrencyExchangeRate) : undefined;
                    this.TenderTypeId = odataObject.TenderTypeId;
                    this.SignatureData = odataObject.SignatureData;
                    this.ReasonCodeLines = undefined;
                    if (odataObject.ReasonCodeLines) {
                        this.ReasonCodeLines = [];
                        for (var i = 0; i < odataObject.ReasonCodeLines.length; i++) {
                            if (odataObject.ReasonCodeLines[i] != null) {
                                if (odataObject.ReasonCodeLines[i]['@odata.type'] != null) {
                                    var className = odataObject.ReasonCodeLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ReasonCodeLines[i] = new Commerce.Proxy.Entities[className](odataObject.ReasonCodeLines[i]);
                                    }
                                }
                                else {
                                    this.ReasonCodeLines[i] = new ReasonCodeLineClass(odataObject.ReasonCodeLines[i]);
                                }
                            }
                            else {
                                this.ReasonCodeLines[i] = undefined;
                            }
                        }
                    }
                    this.LineNumber = (odataObject.LineNumber != null) ? parseFloat(odataObject.LineNumber) : undefined;
                    this.GiftCardId = odataObject.GiftCardId;
                    this.CreditMemoId = odataObject.CreditMemoId;
                    this.CustomerId = odataObject.CustomerId;
                    this.LoyaltyCardId = odataObject.LoyaltyCardId;
                    this.CardTypeId = odataObject.CardTypeId;
                    this.IsChangeLine = odataObject.IsChangeLine;
                    this.IsHistorical = odataObject.IsHistorical;
                    this.IsVoidable = odataObject.IsVoidable;
                    this.StatusValue = odataObject.StatusValue;
                    this.VoidStatusValue = odataObject.VoidStatusValue;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return TenderLineClass;
            }());
            Entities.TenderLineClass = TenderLineClass;
            var TextValueTranslationClass = (function () {
                function TextValueTranslationClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Language = odataObject.Language;
                    this.Text = odataObject.Text;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return TextValueTranslationClass;
            }());
            Entities.TextValueTranslationClass = TextValueTranslationClass;
            var UnitOfMeasureClass = (function () {
                function UnitOfMeasureClass(odataObject) {
                    odataObject = odataObject || {};
                    this.DecimalPrecision = odataObject.DecimalPrecision;
                    this.Symbol = odataObject.Symbol;
                    this.Description = odataObject.Description;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return UnitOfMeasureClass;
            }());
            Entities.UnitOfMeasureClass = UnitOfMeasureClass;
            var CommerceListLineClass = (function () {
                function CommerceListLineClass(odataObject) {
                    odataObject = odataObject || {};
                    this.CommerceListId = (odataObject.CommerceListId != null) ? parseInt(odataObject.CommerceListId, 10) : undefined;
                    this.LineId = (odataObject.LineId != null) ? parseInt(odataObject.LineId, 10) : undefined;
                    this.CustomerId = odataObject.CustomerId;
                    this.CustomerName = odataObject.CustomerName;
                    this.ProductId = (odataObject.ProductId != null) ? parseInt(odataObject.ProductId, 10) : undefined;
                    this.Quantity = (odataObject.Quantity != null) ? parseFloat(odataObject.Quantity) : undefined;
                    this.UnitOfMeasure = odataObject.UnitOfMeasure;
                    this.IsFavorite = odataObject.IsFavorite;
                    this.IsRecurring = odataObject.IsRecurring;
                    this.IsPrivate = odataObject.IsPrivate;
                    this.CreatedDateTime = (odataObject.CreatedDateTime instanceof Date) ? odataObject.CreatedDateTime
                        : (odataObject.CreatedDateTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.CreatedDateTime, "Edm.DateTimeOffset", false) : undefined;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return CommerceListLineClass;
            }());
            Entities.CommerceListLineClass = CommerceListLineClass;
            var CommerceListContributorClass = (function () {
                function CommerceListContributorClass(odataObject) {
                    odataObject = odataObject || {};
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.CustomerId = odataObject.CustomerId;
                    this.CustomerName = odataObject.CustomerName;
                    this.InvitationId = (odataObject.InvitationId != null) ? parseInt(odataObject.InvitationId, 10) : undefined;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return CommerceListContributorClass;
            }());
            Entities.CommerceListContributorClass = CommerceListContributorClass;
            var CommerceListInvitationClass = (function () {
                function CommerceListInvitationClass(odataObject) {
                    odataObject = odataObject || {};
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.Invitee = odataObject.Invitee;
                    this.IsSent = odataObject.IsSent;
                    this.LastRequestDateTime = (odataObject.LastRequestDateTime instanceof Date) ? odataObject.LastRequestDateTime
                        : (odataObject.LastRequestDateTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.LastRequestDateTime, "Edm.DateTimeOffset", false) : undefined;
                    this.LastSentDateTime = (odataObject.LastSentDateTime instanceof Date) ? odataObject.LastSentDateTime
                        : (odataObject.LastSentDateTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.LastSentDateTime, "Edm.DateTimeOffset", false) : undefined;
                    this.StatusValue = odataObject.StatusValue;
                    this.Token = odataObject.Token;
                    this.InvitationTypeValue = odataObject.InvitationTypeValue;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return CommerceListInvitationClass;
            }());
            Entities.CommerceListInvitationClass = CommerceListInvitationClass;
            var SearchFilterClass = (function () {
                function SearchFilterClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Key = odataObject.Key;
                    this.FilterTypeValue = odataObject.FilterTypeValue;
                    this.SearchValues = undefined;
                    if (odataObject.SearchValues) {
                        this.SearchValues = [];
                        for (var i = 0; i < odataObject.SearchValues.length; i++) {
                            if (odataObject.SearchValues[i] != null) {
                                if (odataObject.SearchValues[i]['@odata.type'] != null) {
                                    var className = odataObject.SearchValues[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.SearchValues[i] = new Commerce.Proxy.Entities[className](odataObject.SearchValues[i]);
                                    }
                                }
                                else {
                                    this.SearchValues[i] = new SearchFilterValueClass(odataObject.SearchValues[i]);
                                }
                            }
                            else {
                                this.SearchValues[i] = undefined;
                            }
                        }
                    }
                }
                return SearchFilterClass;
            }());
            Entities.SearchFilterClass = SearchFilterClass;
            var SearchFilterValueClass = (function () {
                function SearchFilterValueClass(odataObject) {
                    odataObject = odataObject || {};
                    if (odataObject.Value == null) {
                        this.Value = undefined;
                    }
                    else if (odataObject.Value['@odata.type'] == null) {
                        this.Value = new CommercePropertyValueClass(odataObject.Value);
                    }
                    else {
                        var className = odataObject.Value['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.Value = new Commerce.Proxy.Entities[className](odataObject.Value);
                        }
                    }
                }
                return SearchFilterValueClass;
            }());
            Entities.SearchFilterValueClass = SearchFilterValueClass;
            var TransactionSearchCriteriaClass = (function () {
                function TransactionSearchCriteriaClass(odataObject) {
                    odataObject = odataObject || {};
                    this.TransactionIds = undefined;
                    if (odataObject.TransactionIds) {
                        this.TransactionIds = [];
                        for (var i = 0; i < odataObject.TransactionIds.length; i++) {
                            if (odataObject.TransactionIds[i] != null) {
                                this.TransactionIds[i] = odataObject.TransactionIds[i];
                            }
                            else {
                                this.TransactionIds[i] = undefined;
                            }
                        }
                    }
                    this.SalesId = odataObject.SalesId;
                    this.ReceiptId = odataObject.ReceiptId;
                    this.ChannelReferenceId = odataObject.ChannelReferenceId;
                    this.CustomerAccountNumber = odataObject.CustomerAccountNumber;
                    this.CustomerFirstName = odataObject.CustomerFirstName;
                    this.CustomerLastName = odataObject.CustomerLastName;
                    this.StoreId = odataObject.StoreId;
                    this.TerminalId = odataObject.TerminalId;
                    this.ItemId = odataObject.ItemId;
                    this.Barcode = odataObject.Barcode;
                    this.SerialNumber = odataObject.SerialNumber;
                    this.StaffId = odataObject.StaffId;
                    this.StartDateTime = (odataObject.StartDateTime instanceof Date) ? odataObject.StartDateTime
                        : (odataObject.StartDateTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.StartDateTime, "Edm.DateTimeOffset", false) : undefined;
                    this.EndDateTime = (odataObject.EndDateTime instanceof Date) ? odataObject.EndDateTime
                        : (odataObject.EndDateTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.EndDateTime, "Edm.DateTimeOffset", false) : undefined;
                    this.ReceiptEmailAddress = odataObject.ReceiptEmailAddress;
                    this.SearchIdentifiers = odataObject.SearchIdentifiers;
                    this.SearchLocationTypeValue = odataObject.SearchLocationTypeValue;
                    this.CustomFilters = undefined;
                    if (odataObject.CustomFilters) {
                        this.CustomFilters = [];
                        for (var i = 0; i < odataObject.CustomFilters.length; i++) {
                            if (odataObject.CustomFilters[i] != null) {
                                if (odataObject.CustomFilters[i]['@odata.type'] != null) {
                                    var className = odataObject.CustomFilters[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.CustomFilters[i] = new Commerce.Proxy.Entities[className](odataObject.CustomFilters[i]);
                                    }
                                }
                                else {
                                    this.CustomFilters[i] = new SearchFilterClass(odataObject.CustomFilters[i]);
                                }
                            }
                            else {
                                this.CustomFilters[i] = undefined;
                            }
                        }
                    }
                }
                return TransactionSearchCriteriaClass;
            }());
            Entities.TransactionSearchCriteriaClass = TransactionSearchCriteriaClass;
            var SalesOrderSearchCriteriaClass = (function () {
                function SalesOrderSearchCriteriaClass(odataObject) {
                    odataObject = odataObject || {};
                    this.TransactionIds = undefined;
                    if (odataObject.TransactionIds) {
                        this.TransactionIds = [];
                        for (var i = 0; i < odataObject.TransactionIds.length; i++) {
                            if (odataObject.TransactionIds[i] != null) {
                                this.TransactionIds[i] = odataObject.TransactionIds[i];
                            }
                            else {
                                this.TransactionIds[i] = undefined;
                            }
                        }
                    }
                    this.SalesId = odataObject.SalesId;
                    this.ReceiptId = odataObject.ReceiptId;
                    this.ChannelReferenceId = odataObject.ChannelReferenceId;
                    this.CustomerAccountNumber = odataObject.CustomerAccountNumber;
                    this.CustomerFirstName = odataObject.CustomerFirstName;
                    this.CustomerLastName = odataObject.CustomerLastName;
                    this.StoreId = odataObject.StoreId;
                    this.TerminalId = odataObject.TerminalId;
                    this.ItemId = odataObject.ItemId;
                    this.Barcode = odataObject.Barcode;
                    this.SerialNumber = odataObject.SerialNumber;
                    this.StaffId = odataObject.StaffId;
                    this.SearchTypeValue = odataObject.SearchTypeValue;
                    this.StartDateTime = (odataObject.StartDateTime instanceof Date) ? odataObject.StartDateTime
                        : (odataObject.StartDateTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.StartDateTime, "Edm.DateTimeOffset", false) : undefined;
                    this.EndDateTime = (odataObject.EndDateTime instanceof Date) ? odataObject.EndDateTime
                        : (odataObject.EndDateTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.EndDateTime, "Edm.DateTimeOffset", false) : undefined;
                    this.IncludeDetails = odataObject.IncludeDetails;
                    this.ReceiptEmailAddress = odataObject.ReceiptEmailAddress;
                    this.SearchIdentifiers = odataObject.SearchIdentifiers;
                    this.SalesTransactionTypeValues = undefined;
                    if (odataObject.SalesTransactionTypeValues) {
                        this.SalesTransactionTypeValues = [];
                        for (var i = 0; i < odataObject.SalesTransactionTypeValues.length; i++) {
                            if (odataObject.SalesTransactionTypeValues[i] != null) {
                                this.SalesTransactionTypeValues[i] = odataObject.SalesTransactionTypeValues[i];
                            }
                            else {
                                this.SalesTransactionTypeValues[i] = undefined;
                            }
                        }
                    }
                    this.SearchLocationTypeValue = odataObject.SearchLocationTypeValue;
                    this.TransactionStatusTypeValues = undefined;
                    if (odataObject.TransactionStatusTypeValues) {
                        this.TransactionStatusTypeValues = [];
                        for (var i = 0; i < odataObject.TransactionStatusTypeValues.length; i++) {
                            if (odataObject.TransactionStatusTypeValues[i] != null) {
                                this.TransactionStatusTypeValues[i] = odataObject.TransactionStatusTypeValues[i];
                            }
                            else {
                                this.TransactionStatusTypeValues[i] = undefined;
                            }
                        }
                    }
                }
                return SalesOrderSearchCriteriaClass;
            }());
            Entities.SalesOrderSearchCriteriaClass = SalesOrderSearchCriteriaClass;
            var SearchStoreCriteriaClass = (function () {
                function SearchStoreCriteriaClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ChannelId = (odataObject.ChannelId != null) ? parseInt(odataObject.ChannelId, 10) : undefined;
                    this.StoreNumber = odataObject.StoreNumber;
                    this.InventoryLocationId = odataObject.InventoryLocationId;
                }
                return SearchStoreCriteriaClass;
            }());
            Entities.SearchStoreCriteriaClass = SearchStoreCriteriaClass;
            var CustomerSearchCriteriaClass = (function () {
                function CustomerSearchCriteriaClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Keyword = odataObject.Keyword;
                    this.SearchOnlyCurrentCompany = odataObject.SearchOnlyCurrentCompany;
                    this.SearchLocationValue = odataObject.SearchLocationValue;
                    this.DataLevelValue = odataObject.DataLevelValue;
                }
                return CustomerSearchCriteriaClass;
            }());
            Entities.CustomerSearchCriteriaClass = CustomerSearchCriteriaClass;
            var ProductPriceClass = (function () {
                function ProductPriceClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ProductId = (odataObject.ProductId != null) ? parseInt(odataObject.ProductId, 10) : undefined;
                    this.ListingId = (odataObject.ListingId != null) ? parseInt(odataObject.ListingId, 10) : undefined;
                    this.BasePrice = (odataObject.BasePrice != null) ? parseFloat(odataObject.BasePrice) : undefined;
                    this.TradeAgreementPrice = (odataObject.TradeAgreementPrice != null) ? parseFloat(odataObject.TradeAgreementPrice) : undefined;
                    this.AdjustedPrice = (odataObject.AdjustedPrice != null) ? parseFloat(odataObject.AdjustedPrice) : undefined;
                    this.CustomerContextualPrice = (odataObject.CustomerContextualPrice != null) ? parseFloat(odataObject.CustomerContextualPrice) : undefined;
                    this.DiscountAmount = (odataObject.DiscountAmount != null) ? parseFloat(odataObject.DiscountAmount) : undefined;
                    this.CurrencyCode = odataObject.CurrencyCode;
                    this.ItemId = odataObject.ItemId;
                    this.InventoryDimensionId = odataObject.InventoryDimensionId;
                    this.UnitOfMeasure = odataObject.UnitOfMeasure;
                    this.ValidFrom = (odataObject.ValidFrom instanceof Date) ? odataObject.ValidFrom
                        : (odataObject.ValidFrom != null) ? OData.jsonLightReadStringPropertyValue(odataObject.ValidFrom, "Edm.DateTimeOffset", false) : undefined;
                    this.ProductLookupId = (odataObject.ProductLookupId != null) ? parseInt(odataObject.ProductLookupId, 10) : undefined;
                    this.ChannelId = (odataObject.ChannelId != null) ? parseInt(odataObject.ChannelId, 10) : undefined;
                    this.CatalogId = (odataObject.CatalogId != null) ? parseInt(odataObject.CatalogId, 10) : undefined;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ProductPriceClass;
            }());
            Entities.ProductPriceClass = ProductPriceClass;
            var OrgUnitAvailabilityClass = (function () {
                function OrgUnitAvailabilityClass(odataObject) {
                    odataObject = odataObject || {};
                    if (odataObject.OrgUnitLocation == null) {
                        this.OrgUnitLocation = undefined;
                    }
                    else if (odataObject.OrgUnitLocation['@odata.type'] == null) {
                        this.OrgUnitLocation = new OrgUnitLocationClass(odataObject.OrgUnitLocation);
                    }
                    else {
                        var className = odataObject.OrgUnitLocation['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.OrgUnitLocation = new Commerce.Proxy.Entities[className](odataObject.OrgUnitLocation);
                        }
                    }
                    this.ItemAvailabilities = undefined;
                    if (odataObject.ItemAvailabilities) {
                        this.ItemAvailabilities = [];
                        for (var i = 0; i < odataObject.ItemAvailabilities.length; i++) {
                            if (odataObject.ItemAvailabilities[i] != null) {
                                if (odataObject.ItemAvailabilities[i]['@odata.type'] != null) {
                                    var className = odataObject.ItemAvailabilities[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ItemAvailabilities[i] = new Commerce.Proxy.Entities[className](odataObject.ItemAvailabilities[i]);
                                    }
                                }
                                else {
                                    this.ItemAvailabilities[i] = new ItemAvailabilityClass(odataObject.ItemAvailabilities[i]);
                                }
                            }
                            else {
                                this.ItemAvailabilities[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return OrgUnitAvailabilityClass;
            }());
            Entities.OrgUnitAvailabilityClass = OrgUnitAvailabilityClass;
            var ProductVariantPropertySetClass = (function () {
                function ProductVariantPropertySetClass(odataObject) {
                    odataObject = odataObject || {};
                    this.VariantId = (odataObject.VariantId != null) ? parseInt(odataObject.VariantId, 10) : undefined;
                    this.ProductVariantPropertiesAsList = undefined;
                    if (odataObject.ProductVariantPropertiesAsList) {
                        this.ProductVariantPropertiesAsList = [];
                        for (var i = 0; i < odataObject.ProductVariantPropertiesAsList.length; i++) {
                            if (odataObject.ProductVariantPropertiesAsList[i] != null) {
                                if (odataObject.ProductVariantPropertiesAsList[i]['@odata.type'] != null) {
                                    var className = odataObject.ProductVariantPropertiesAsList[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ProductVariantPropertiesAsList[i] = new Commerce.Proxy.Entities[className](odataObject.ProductVariantPropertiesAsList[i]);
                                    }
                                }
                                else {
                                    this.ProductVariantPropertiesAsList[i] = new ProductPropertyTranslationClass(odataObject.ProductVariantPropertiesAsList[i]);
                                }
                            }
                            else {
                                this.ProductVariantPropertiesAsList[i] = undefined;
                            }
                        }
                    }
                }
                return ProductVariantPropertySetClass;
            }());
            Entities.ProductVariantPropertySetClass = ProductVariantPropertySetClass;
            var PurchaseOrderLineClass = (function () {
                function PurchaseOrderLineClass(odataObject) {
                    odataObject = odataObject || {};
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.OrderId = odataObject.OrderId;
                    this.ProductRecordId = (odataObject.ProductRecordId != null) ? parseInt(odataObject.ProductRecordId, 10) : undefined;
                    this.ItemId = odataObject.ItemId;
                    this.ItemName = odataObject.ItemName;
                    this.InventDimId = odataObject.InventDimId;
                    this.QuantityOrdered = (odataObject.QuantityOrdered != null) ? parseFloat(odataObject.QuantityOrdered) : undefined;
                    this.PurchaseQuantity = (odataObject.PurchaseQuantity != null) ? parseFloat(odataObject.PurchaseQuantity) : undefined;
                    this.PurchaseUnit = odataObject.PurchaseUnit;
                    this.PurchaseReceived = (odataObject.PurchaseReceived != null) ? parseFloat(odataObject.PurchaseReceived) : undefined;
                    this.PurchaseReceivedNow = (odataObject.PurchaseReceivedNow != null) ? parseFloat(odataObject.PurchaseReceivedNow) : undefined;
                    this.InventBatchId = odataObject.InventBatchId;
                    this.WMSLocationId = odataObject.WMSLocationId;
                    this.WMSPalletId = odataObject.WMSPalletId;
                    this.InventoryStatus = odataObject.InventoryStatus;
                    this.LicensePlate = odataObject.LicensePlate;
                    this.InventSiteId = odataObject.InventSiteId;
                    this.InventLocationId = odataObject.InventLocationId;
                    this.ConfigId = odataObject.ConfigId;
                    this.InventSerialId = odataObject.InventSerialId;
                    this.InventSizeId = odataObject.InventSizeId;
                    this.InventColorId = odataObject.InventColorId;
                    this.InventStyleId = odataObject.InventStyleId;
                    this.IsCommitted = odataObject.IsCommitted;
                    this.Message = odataObject.Message;
                    this.UniqueIdentifier = odataObject.UniqueIdentifier;
                    this.DeliveryMethod = odataObject.DeliveryMethod;
                    this.DataAreaId = odataObject.DataAreaId;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return PurchaseOrderLineClass;
            }());
            Entities.PurchaseOrderLineClass = PurchaseOrderLineClass;
            var TransferOrderLineClass = (function () {
                function TransferOrderLineClass(odataObject) {
                    odataObject = odataObject || {};
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.OrderId = odataObject.OrderId;
                    this.ProductRecordId = (odataObject.ProductRecordId != null) ? parseInt(odataObject.ProductRecordId, 10) : undefined;
                    this.ItemId = odataObject.ItemId;
                    this.ItemName = odataObject.ItemName;
                    this.InventDimId = odataObject.InventDimId;
                    this.QuantityTransferred = (odataObject.QuantityTransferred != null) ? parseFloat(odataObject.QuantityTransferred) : undefined;
                    this.QuantityShipped = (odataObject.QuantityShipped != null) ? parseFloat(odataObject.QuantityShipped) : undefined;
                    this.QuantityReceived = (odataObject.QuantityReceived != null) ? parseFloat(odataObject.QuantityReceived) : undefined;
                    this.QuantityShipNow = (odataObject.QuantityShipNow != null) ? parseFloat(odataObject.QuantityShipNow) : undefined;
                    this.QuantityReceiveNow = (odataObject.QuantityReceiveNow != null) ? parseFloat(odataObject.QuantityReceiveNow) : undefined;
                    this.QuantityRemainShip = (odataObject.QuantityRemainShip != null) ? parseFloat(odataObject.QuantityRemainShip) : undefined;
                    this.QuantityRemainReceive = (odataObject.QuantityRemainReceive != null) ? parseFloat(odataObject.QuantityRemainReceive) : undefined;
                    this.PurchaseUnit = odataObject.PurchaseUnit;
                    this.InventBatchId = odataObject.InventBatchId;
                    this.WMSLocationId = odataObject.WMSLocationId;
                    this.WMSPalletId = odataObject.WMSPalletId;
                    this.InventoryStatus = odataObject.InventoryStatus;
                    this.LicensePlate = odataObject.LicensePlate;
                    this.InventSiteId = odataObject.InventSiteId;
                    this.InventLocationId = odataObject.InventLocationId;
                    this.ConfigId = odataObject.ConfigId;
                    this.InventSerialId = odataObject.InventSerialId;
                    this.InventSizeId = odataObject.InventSizeId;
                    this.InventColorId = odataObject.InventColorId;
                    this.InventStyleId = odataObject.InventStyleId;
                    this.IsCommitted = odataObject.IsCommitted;
                    this.Message = odataObject.Message;
                    this.Guid = odataObject.Guid;
                    this.DeliveryMethod = odataObject.DeliveryMethod;
                    this.DataAreaId = odataObject.DataAreaId;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return TransferOrderLineClass;
            }());
            Entities.TransferOrderLineClass = TransferOrderLineClass;
            var TransferOrderJournalClass = (function () {
                function TransferOrderJournalClass(odataObject) {
                    odataObject = odataObject || {};
                    this.OrderId = odataObject.OrderId;
                    this.VoucherId = odataObject.VoucherId;
                    this.UpdatedByWorker = odataObject.UpdatedByWorker;
                    this.InventLocationIdFrom = odataObject.InventLocationIdFrom;
                    this.InventLocationIdTo = odataObject.InventLocationIdTo;
                    this.QuantityShipped = (odataObject.QuantityShipped != null) ? parseFloat(odataObject.QuantityShipped) : undefined;
                    this.PostingDate = (odataObject.PostingDate instanceof Date) ? odataObject.PostingDate
                        : (odataObject.PostingDate != null) ? OData.jsonLightReadStringPropertyValue(odataObject.PostingDate, "Edm.DateTimeOffset", false) : undefined;
                    this.JournalLines = undefined;
                    if (odataObject.JournalLines) {
                        this.JournalLines = [];
                        for (var i = 0; i < odataObject.JournalLines.length; i++) {
                            if (odataObject.JournalLines[i] != null) {
                                if (odataObject.JournalLines[i]['@odata.type'] != null) {
                                    var className = odataObject.JournalLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.JournalLines[i] = new Commerce.Proxy.Entities[className](odataObject.JournalLines[i]);
                                    }
                                }
                                else {
                                    this.JournalLines[i] = new TransferOrderJournalLineClass(odataObject.JournalLines[i]);
                                }
                            }
                            else {
                                this.JournalLines[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return TransferOrderJournalClass;
            }());
            Entities.TransferOrderJournalClass = TransferOrderJournalClass;
            var PickingListLineClass = (function () {
                function PickingListLineClass(odataObject) {
                    odataObject = odataObject || {};
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.OrderId = odataObject.OrderId;
                    this.ProductRecordId = (odataObject.ProductRecordId != null) ? parseInt(odataObject.ProductRecordId, 10) : undefined;
                    this.ItemId = odataObject.ItemId;
                    this.ItemName = odataObject.ItemName;
                    this.InventDimId = odataObject.InventDimId;
                    this.QuantityOrdered = (odataObject.QuantityOrdered != null) ? parseFloat(odataObject.QuantityOrdered) : undefined;
                    this.PurchaseReceivedNow = (odataObject.PurchaseReceivedNow != null) ? parseFloat(odataObject.PurchaseReceivedNow) : undefined;
                    this.InventBatchId = odataObject.InventBatchId;
                    this.WMSLocationId = odataObject.WMSLocationId;
                    this.WMSPalletId = odataObject.WMSPalletId;
                    this.InventoryStatus = odataObject.InventoryStatus;
                    this.LicensePlate = odataObject.LicensePlate;
                    this.InventSiteId = odataObject.InventSiteId;
                    this.InventLocationId = odataObject.InventLocationId;
                    this.ConfigId = odataObject.ConfigId;
                    this.InventSerialId = odataObject.InventSerialId;
                    this.InventSizeId = odataObject.InventSizeId;
                    this.InventColorId = odataObject.InventColorId;
                    this.InventStyleId = odataObject.InventStyleId;
                    this.IsCommitted = odataObject.IsCommitted;
                    this.Message = odataObject.Message;
                    this.Guid = odataObject.Guid;
                    this.DeliveryMethod = odataObject.DeliveryMethod;
                    this.DataAreaId = odataObject.DataAreaId;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return PickingListLineClass;
            }());
            Entities.PickingListLineClass = PickingListLineClass;
            var AffiliationClass = (function () {
                function AffiliationClass(odataObject) {
                    odataObject = odataObject || {};
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.AffiliationTypeValue = odataObject.AffiliationTypeValue;
                    this.Description = odataObject.Description;
                    this.Name = odataObject.Name;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return AffiliationClass;
            }());
            Entities.AffiliationClass = AffiliationClass;
            var ProductDimensionClass = (function () {
                function ProductDimensionClass(odataObject) {
                    odataObject = odataObject || {};
                    this.DimensionTypeValue = odataObject.DimensionTypeValue;
                    if (odataObject.DimensionValue == null) {
                        this.DimensionValue = undefined;
                    }
                    else if (odataObject.DimensionValue['@odata.type'] == null) {
                        this.DimensionValue = new ProductDimensionValueClass(odataObject.DimensionValue);
                    }
                    else {
                        var className = odataObject.DimensionValue['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.DimensionValue = new Commerce.Proxy.Entities[className](odataObject.DimensionValue);
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ProductDimensionClass;
            }());
            Entities.ProductDimensionClass = ProductDimensionClass;
            var ProductDimensionValueClass = (function () {
                function ProductDimensionValueClass(odataObject) {
                    odataObject = odataObject || {};
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.Value = odataObject.Value;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ProductDimensionValueClass;
            }());
            Entities.ProductDimensionValueClass = ProductDimensionValueClass;
            var ProductDimensionCombinationClass = (function () {
                function ProductDimensionCombinationClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ProductDimensions = undefined;
                    if (odataObject.ProductDimensions) {
                        this.ProductDimensions = [];
                        for (var i = 0; i < odataObject.ProductDimensions.length; i++) {
                            if (odataObject.ProductDimensions[i] != null) {
                                if (odataObject.ProductDimensions[i]['@odata.type'] != null) {
                                    var className = odataObject.ProductDimensions[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ProductDimensions[i] = new Commerce.Proxy.Entities[className](odataObject.ProductDimensions[i]);
                                    }
                                }
                                else {
                                    this.ProductDimensions[i] = new ProductDimensionClass(odataObject.ProductDimensions[i]);
                                }
                            }
                            else {
                                this.ProductDimensions[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ProductDimensionCombinationClass;
            }());
            Entities.ProductDimensionCombinationClass = ProductDimensionCombinationClass;
            var ProductRefinerClass = (function () {
                function ProductRefinerClass(odataObject) {
                    odataObject = odataObject || {};
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.KeyName = odataObject.KeyName;
                    this.SourceValue = odataObject.SourceValue;
                    this.DataTypeValue = odataObject.DataTypeValue;
                    this.RefinerTypeValue = odataObject.RefinerTypeValue;
                    this.DisplayTemplateValue = odataObject.DisplayTemplateValue;
                    this.Values = undefined;
                    if (odataObject.Values) {
                        this.Values = [];
                        for (var i = 0; i < odataObject.Values.length; i++) {
                            if (odataObject.Values[i] != null) {
                                if (odataObject.Values[i]['@odata.type'] != null) {
                                    var className = odataObject.Values[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.Values[i] = new Commerce.Proxy.Entities[className](odataObject.Values[i]);
                                    }
                                }
                                else {
                                    this.Values[i] = new ProductRefinerValueClass(odataObject.Values[i]);
                                }
                            }
                            else {
                                this.Values[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ProductRefinerClass;
            }());
            Entities.ProductRefinerClass = ProductRefinerClass;
            var ProductRefinerValueClass = (function () {
                function ProductRefinerValueClass(odataObject) {
                    odataObject = odataObject || {};
                    this.RefinerRecordId = (odataObject.RefinerRecordId != null) ? parseInt(odataObject.RefinerRecordId, 10) : undefined;
                    this.RefinerSourceValue = odataObject.RefinerSourceValue;
                    this.DataTypeValue = odataObject.DataTypeValue;
                    this.LeftValueBoundString = odataObject.LeftValueBoundString;
                    this.RightValueBoundString = odataObject.RightValueBoundString;
                    this.UnitText = odataObject.UnitText;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ProductRefinerValueClass;
            }());
            Entities.ProductRefinerValueClass = ProductRefinerValueClass;
            var ProductRelationTypeClass = (function () {
                function ProductRelationTypeClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Name = odataObject.Name;
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ProductRelationTypeClass;
            }());
            Entities.ProductRelationTypeClass = ProductRelationTypeClass;
            var ComponentInSlotRelationClass = (function () {
                function ComponentInSlotRelationClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ComponentId = (odataObject.ComponentId != null) ? parseInt(odataObject.ComponentId, 10) : undefined;
                    this.SlotId = (odataObject.SlotId != null) ? parseInt(odataObject.SlotId, 10) : undefined;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ComponentInSlotRelationClass;
            }());
            Entities.ComponentInSlotRelationClass = ComponentInSlotRelationClass;
            var ProductRulesClass = (function () {
                function ProductRulesClass(odataObject) {
                    odataObject = odataObject || {};
                    this.HasLinkedProducts = odataObject.HasLinkedProducts;
                    this.IsSerialized = odataObject.IsSerialized;
                    this.IsActiveInSalesProcess = odataObject.IsActiveInSalesProcess;
                    this.IsBlocked = odataObject.IsBlocked;
                    this.DateOfBlocking = (odataObject.DateOfBlocking instanceof Date) ? odataObject.DateOfBlocking
                        : (odataObject.DateOfBlocking != null) ? OData.jsonLightReadStringPropertyValue(odataObject.DateOfBlocking, "Edm.DateTimeOffset", false) : undefined;
                    this.DateToActivate = (odataObject.DateToActivate instanceof Date) ? odataObject.DateToActivate
                        : (odataObject.DateToActivate != null) ? OData.jsonLightReadStringPropertyValue(odataObject.DateToActivate, "Edm.DateTimeOffset", false) : undefined;
                    this.DateToBlock = (odataObject.DateToBlock instanceof Date) ? odataObject.DateToBlock
                        : (odataObject.DateToBlock != null) ? OData.jsonLightReadStringPropertyValue(odataObject.DateToBlock, "Edm.DateTimeOffset", false) : undefined;
                    this.DefaultUnitOfMeasure = odataObject.DefaultUnitOfMeasure;
                    this.PriceKeyingRequirementValue = odataObject.PriceKeyingRequirementValue;
                    this.QuantityKeyingRequirementValue = odataObject.QuantityKeyingRequirementValue;
                    this.MustKeyInComment = odataObject.MustKeyInComment;
                    this.CanQuantityBecomeNegative = odataObject.CanQuantityBecomeNegative;
                    this.MustScaleItem = odataObject.MustScaleItem;
                    this.CanPriceBeZero = odataObject.CanPriceBeZero;
                    this.ProductId = (odataObject.ProductId != null) ? parseInt(odataObject.ProductId, 10) : undefined;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ProductRulesClass;
            }());
            Entities.ProductRulesClass = ProductRulesClass;
            var LocalizedStringClass = (function () {
                function LocalizedStringClass(odataObject) {
                    odataObject = odataObject || {};
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.LanguageId = odataObject.LanguageId;
                    this.TextId = odataObject.TextId;
                    this.Text = odataObject.Text;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return LocalizedStringClass;
            }());
            Entities.LocalizedStringClass = LocalizedStringClass;
            var LoyaltyCardClass = (function () {
                function LoyaltyCardClass(odataObject) {
                    odataObject = odataObject || {};
                    this.CardNumber = odataObject.CardNumber;
                    this.CardTenderTypeValue = odataObject.CardTenderTypeValue;
                    this.CustomerAccount = odataObject.CustomerAccount;
                    this.LoyaltyGroups = undefined;
                    if (odataObject.LoyaltyGroups) {
                        this.LoyaltyGroups = [];
                        for (var i = 0; i < odataObject.LoyaltyGroups.length; i++) {
                            if (odataObject.LoyaltyGroups[i] != null) {
                                if (odataObject.LoyaltyGroups[i]['@odata.type'] != null) {
                                    var className = odataObject.LoyaltyGroups[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.LoyaltyGroups[i] = new Commerce.Proxy.Entities[className](odataObject.LoyaltyGroups[i]);
                                    }
                                }
                                else {
                                    this.LoyaltyGroups[i] = new LoyaltyGroupClass(odataObject.LoyaltyGroups[i]);
                                }
                            }
                            else {
                                this.LoyaltyGroups[i] = undefined;
                            }
                        }
                    }
                    this.RewardPoints = undefined;
                    if (odataObject.RewardPoints) {
                        this.RewardPoints = [];
                        for (var i = 0; i < odataObject.RewardPoints.length; i++) {
                            if (odataObject.RewardPoints[i] != null) {
                                if (odataObject.RewardPoints[i]['@odata.type'] != null) {
                                    var className = odataObject.RewardPoints[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.RewardPoints[i] = new Commerce.Proxy.Entities[className](odataObject.RewardPoints[i]);
                                    }
                                }
                                else {
                                    this.RewardPoints[i] = new LoyaltyRewardPointClass(odataObject.RewardPoints[i]);
                                }
                            }
                            else {
                                this.RewardPoints[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return LoyaltyCardClass;
            }());
            Entities.LoyaltyCardClass = LoyaltyCardClass;
            var ProductComponentClass = (function () {
                function ProductComponentClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ProductId = (odataObject.ProductId != null) ? parseInt(odataObject.ProductId, 10) : undefined;
                    this.SlotId = (odataObject.SlotId != null) ? parseInt(odataObject.SlotId, 10) : undefined;
                    if (odataObject.Product == null) {
                        this.Product = undefined;
                    }
                    else if (odataObject.Product['@odata.type'] == null) {
                        this.Product = new SimpleProductClass(odataObject.Product);
                    }
                    else {
                        var className = odataObject.Product['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.Product = new Commerce.Proxy.Entities[className](odataObject.Product);
                        }
                    }
                    this.AdditionalChargeForComponent = (odataObject.AdditionalChargeForComponent != null) ? parseFloat(odataObject.AdditionalChargeForComponent) : undefined;
                    if (odataObject.Behavior == null) {
                        this.Behavior = undefined;
                    }
                    else if (odataObject.Behavior['@odata.type'] == null) {
                        this.Behavior = new ProductBehaviorClass(odataObject.Behavior);
                    }
                    else {
                        var className = odataObject.Behavior['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.Behavior = new Commerce.Proxy.Entities[className](odataObject.Behavior);
                        }
                    }
                    this.Description = odataObject.Description;
                    this.Dimensions = undefined;
                    if (odataObject.Dimensions) {
                        this.Dimensions = [];
                        for (var i = 0; i < odataObject.Dimensions.length; i++) {
                            if (odataObject.Dimensions[i] != null) {
                                if (odataObject.Dimensions[i]['@odata.type'] != null) {
                                    var className = odataObject.Dimensions[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.Dimensions[i] = new Commerce.Proxy.Entities[className](odataObject.Dimensions[i]);
                                    }
                                }
                                else {
                                    this.Dimensions[i] = new ProductDimensionClass(odataObject.Dimensions[i]);
                                }
                            }
                            else {
                                this.Dimensions[i] = undefined;
                            }
                        }
                    }
                    this.ItemId = odataObject.ItemId;
                    this.Name = odataObject.Name;
                    this.ProductTypeValue = odataObject.ProductTypeValue;
                    this.Quantity = (odataObject.Quantity != null) ? parseFloat(odataObject.Quantity) : undefined;
                    this.UnitOfMeasure = odataObject.UnitOfMeasure;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ProductComponentClass;
            }());
            Entities.ProductComponentClass = ProductComponentClass;
            var SimpleProductClass = (function () {
                function SimpleProductClass(odataObject) {
                    odataObject = odataObject || {};
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.ItemId = odataObject.ItemId;
                    this.Name = odataObject.Name;
                    this.Description = odataObject.Description;
                    this.ProductTypeValue = odataObject.ProductTypeValue;
                    this.DefaultUnitOfMeasure = odataObject.DefaultUnitOfMeasure;
                    this.BasePrice = (odataObject.BasePrice != null) ? parseFloat(odataObject.BasePrice) : undefined;
                    this.Price = (odataObject.Price != null) ? parseFloat(odataObject.Price) : undefined;
                    this.AdjustedPrice = (odataObject.AdjustedPrice != null) ? parseFloat(odataObject.AdjustedPrice) : undefined;
                    this.MasterProductId = (odataObject.MasterProductId != null) ? parseInt(odataObject.MasterProductId, 10) : undefined;
                    this.Components = undefined;
                    if (odataObject.Components) {
                        this.Components = [];
                        for (var i = 0; i < odataObject.Components.length; i++) {
                            if (odataObject.Components[i] != null) {
                                if (odataObject.Components[i]['@odata.type'] != null) {
                                    var className = odataObject.Components[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.Components[i] = new Commerce.Proxy.Entities[className](odataObject.Components[i]);
                                    }
                                }
                                else {
                                    this.Components[i] = new ProductComponentClass(odataObject.Components[i]);
                                }
                            }
                            else {
                                this.Components[i] = undefined;
                            }
                        }
                    }
                    this.Dimensions = undefined;
                    if (odataObject.Dimensions) {
                        this.Dimensions = [];
                        for (var i = 0; i < odataObject.Dimensions.length; i++) {
                            if (odataObject.Dimensions[i] != null) {
                                if (odataObject.Dimensions[i]['@odata.type'] != null) {
                                    var className = odataObject.Dimensions[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.Dimensions[i] = new Commerce.Proxy.Entities[className](odataObject.Dimensions[i]);
                                    }
                                }
                                else {
                                    this.Dimensions[i] = new ProductDimensionClass(odataObject.Dimensions[i]);
                                }
                            }
                            else {
                                this.Dimensions[i] = undefined;
                            }
                        }
                    }
                    if (odataObject.Behavior == null) {
                        this.Behavior = undefined;
                    }
                    else if (odataObject.Behavior['@odata.type'] == null) {
                        this.Behavior = new ProductBehaviorClass(odataObject.Behavior);
                    }
                    else {
                        var className = odataObject.Behavior['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.Behavior = new Commerce.Proxy.Entities[className](odataObject.Behavior);
                        }
                    }
                    this.LinkedProducts = undefined;
                    if (odataObject.LinkedProducts) {
                        this.LinkedProducts = [];
                        for (var i = 0; i < odataObject.LinkedProducts.length; i++) {
                            if (odataObject.LinkedProducts[i] != null) {
                                if (odataObject.LinkedProducts[i]['@odata.type'] != null) {
                                    var className = odataObject.LinkedProducts[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.LinkedProducts[i] = new Commerce.Proxy.Entities[className](odataObject.LinkedProducts[i]);
                                    }
                                }
                                else {
                                    this.LinkedProducts[i] = new SimpleLinkedProductClass(odataObject.LinkedProducts[i]);
                                }
                            }
                            else {
                                this.LinkedProducts[i] = undefined;
                            }
                        }
                    }
                    this.PrimaryImageUrl = odataObject.PrimaryImageUrl;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return SimpleProductClass;
            }());
            Entities.SimpleProductClass = SimpleProductClass;
            var ProductBehaviorClass = (function () {
                function ProductBehaviorClass(odataObject) {
                    odataObject = odataObject || {};
                    this.HasSerialNumber = odataObject.HasSerialNumber;
                    this.IsDiscountAllowed = odataObject.IsDiscountAllowed;
                    this.IsManualDiscountAllowed = odataObject.IsManualDiscountAllowed;
                    this.IsKitDisassemblyAllowed = odataObject.IsKitDisassemblyAllowed;
                    this.IsNegativeQuantityAllowed = odataObject.IsNegativeQuantityAllowed;
                    this.IsReturnAllowed = odataObject.IsReturnAllowed;
                    this.IsSaleAtPhysicalStoresAllowed = odataObject.IsSaleAtPhysicalStoresAllowed;
                    this.IsZeroSalePriceAllowed = odataObject.IsZeroSalePriceAllowed;
                    this.KeyInPriceValue = odataObject.KeyInPriceValue;
                    this.KeyInQuantityValue = odataObject.KeyInQuantityValue;
                    this.MustKeyInComment = odataObject.MustKeyInComment;
                    this.MustPrintIndividualShelfLabelsForVariants = odataObject.MustPrintIndividualShelfLabelsForVariants;
                    this.MustPromptForSerialNumberOnlyAtSale = odataObject.MustPromptForSerialNumberOnlyAtSale;
                    this.MustWeighProductAtSale = odataObject.MustWeighProductAtSale;
                    this.ValidFromDateForSaleAtPhysicalStores = (odataObject.ValidFromDateForSaleAtPhysicalStores instanceof Date) ? odataObject.ValidFromDateForSaleAtPhysicalStores
                        : (odataObject.ValidFromDateForSaleAtPhysicalStores != null) ? OData.jsonLightReadStringPropertyValue(odataObject.ValidFromDateForSaleAtPhysicalStores, "Edm.DateTimeOffset", false) : undefined;
                    this.ValidToDateForSaleAtPhysicalStores = (odataObject.ValidToDateForSaleAtPhysicalStores instanceof Date) ? odataObject.ValidToDateForSaleAtPhysicalStores
                        : (odataObject.ValidToDateForSaleAtPhysicalStores != null) ? OData.jsonLightReadStringPropertyValue(odataObject.ValidToDateForSaleAtPhysicalStores, "Edm.DateTimeOffset", false) : undefined;
                    this.IsBlankSerialNumberAllowed = odataObject.IsBlankSerialNumberAllowed;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ProductBehaviorClass;
            }());
            Entities.ProductBehaviorClass = ProductBehaviorClass;
            var SimpleLinkedProductClass = (function () {
                function SimpleLinkedProductClass(odataObject) {
                    odataObject = odataObject || {};
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.ItemId = odataObject.ItemId;
                    this.Name = odataObject.Name;
                    this.Description = odataObject.Description;
                    this.ProductTypeValue = odataObject.ProductTypeValue;
                    this.DefaultUnitOfMeasure = odataObject.DefaultUnitOfMeasure;
                    this.BasePrice = (odataObject.BasePrice != null) ? parseFloat(odataObject.BasePrice) : undefined;
                    this.Price = (odataObject.Price != null) ? parseFloat(odataObject.Price) : undefined;
                    this.AdjustedPrice = (odataObject.AdjustedPrice != null) ? parseFloat(odataObject.AdjustedPrice) : undefined;
                    this.Quantity = (odataObject.Quantity != null) ? parseFloat(odataObject.Quantity) : undefined;
                    if (odataObject.Behavior == null) {
                        this.Behavior = undefined;
                    }
                    else if (odataObject.Behavior['@odata.type'] == null) {
                        this.Behavior = new ProductBehaviorClass(odataObject.Behavior);
                    }
                    else {
                        var className = odataObject.Behavior['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.Behavior = new Commerce.Proxy.Entities[className](odataObject.Behavior);
                        }
                    }
                    this.Dimensions = undefined;
                    if (odataObject.Dimensions) {
                        this.Dimensions = [];
                        for (var i = 0; i < odataObject.Dimensions.length; i++) {
                            if (odataObject.Dimensions[i] != null) {
                                if (odataObject.Dimensions[i]['@odata.type'] != null) {
                                    var className = odataObject.Dimensions[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.Dimensions[i] = new Commerce.Proxy.Entities[className](odataObject.Dimensions[i]);
                                    }
                                }
                                else {
                                    this.Dimensions[i] = new ProductDimensionClass(odataObject.Dimensions[i]);
                                }
                            }
                            else {
                                this.Dimensions[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return SimpleLinkedProductClass;
            }());
            Entities.SimpleLinkedProductClass = SimpleLinkedProductClass;
            var ProductSearchResultClass = (function () {
                function ProductSearchResultClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ItemId = odataObject.ItemId;
                    this.Name = odataObject.Name;
                    this.Price = (odataObject.Price != null) ? parseFloat(odataObject.Price) : undefined;
                    this.PrimaryImageUrl = odataObject.PrimaryImageUrl;
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.TrackingId = odataObject.TrackingId;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ProductSearchResultClass;
            }());
            Entities.ProductSearchResultClass = ProductSearchResultClass;
            var SearchSuggestionClass = (function () {
                function SearchSuggestionClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Value = odataObject.Value;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return SearchSuggestionClass;
            }());
            Entities.SearchSuggestionClass = SearchSuggestionClass;
            var LoyaltyGroupClass = (function () {
                function LoyaltyGroupClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Description = odataObject.Description;
                    this.Name = odataObject.Name;
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.LoyaltyTiers = undefined;
                    if (odataObject.LoyaltyTiers) {
                        this.LoyaltyTiers = [];
                        for (var i = 0; i < odataObject.LoyaltyTiers.length; i++) {
                            if (odataObject.LoyaltyTiers[i] != null) {
                                if (odataObject.LoyaltyTiers[i]['@odata.type'] != null) {
                                    var className = odataObject.LoyaltyTiers[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.LoyaltyTiers[i] = new Commerce.Proxy.Entities[className](odataObject.LoyaltyTiers[i]);
                                    }
                                }
                                else {
                                    this.LoyaltyTiers[i] = new LoyaltyTierClass(odataObject.LoyaltyTiers[i]);
                                }
                            }
                            else {
                                this.LoyaltyTiers[i] = undefined;
                            }
                        }
                    }
                    this.LoyaltyCardTiers = undefined;
                    if (odataObject.LoyaltyCardTiers) {
                        this.LoyaltyCardTiers = [];
                        for (var i = 0; i < odataObject.LoyaltyCardTiers.length; i++) {
                            if (odataObject.LoyaltyCardTiers[i] != null) {
                                if (odataObject.LoyaltyCardTiers[i]['@odata.type'] != null) {
                                    var className = odataObject.LoyaltyCardTiers[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.LoyaltyCardTiers[i] = new Commerce.Proxy.Entities[className](odataObject.LoyaltyCardTiers[i]);
                                    }
                                }
                                else {
                                    this.LoyaltyCardTiers[i] = new LoyaltyCardTierClass(odataObject.LoyaltyCardTiers[i]);
                                }
                            }
                            else {
                                this.LoyaltyCardTiers[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return LoyaltyGroupClass;
            }());
            Entities.LoyaltyGroupClass = LoyaltyGroupClass;
            var LoyaltyTierClass = (function () {
                function LoyaltyTierClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Description = odataObject.Description;
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.TierId = odataObject.TierId;
                    this.TierLevel = (odataObject.TierLevel != null) ? parseFloat(odataObject.TierLevel) : undefined;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return LoyaltyTierClass;
            }());
            Entities.LoyaltyTierClass = LoyaltyTierClass;
            var LoyaltyCardTierClass = (function () {
                function LoyaltyCardTierClass(odataObject) {
                    odataObject = odataObject || {};
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.TierId = odataObject.TierId;
                    this.LoyaltyTierRecordId = (odataObject.LoyaltyTierRecordId != null) ? parseInt(odataObject.LoyaltyTierRecordId, 10) : undefined;
                    this.ValidFrom = (odataObject.ValidFrom instanceof Date) ? odataObject.ValidFrom
                        : (odataObject.ValidFrom != null) ? OData.jsonLightReadStringPropertyValue(odataObject.ValidFrom, "Edm.DateTimeOffset", false) : undefined;
                    this.ValidTo = (odataObject.ValidTo instanceof Date) ? odataObject.ValidTo
                        : (odataObject.ValidTo != null) ? OData.jsonLightReadStringPropertyValue(odataObject.ValidTo, "Edm.DateTimeOffset", false) : undefined;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return LoyaltyCardTierClass;
            }());
            Entities.LoyaltyCardTierClass = LoyaltyCardTierClass;
            var LoyaltyRewardPointClass = (function () {
                function LoyaltyRewardPointClass(odataObject) {
                    odataObject = odataObject || {};
                    this.IsRedeemable = odataObject.IsRedeemable;
                    this.RewardPointCurrency = odataObject.RewardPointCurrency;
                    this.RewardPointTypeValue = odataObject.RewardPointTypeValue;
                    this.Description = odataObject.Description;
                    this.RewardPointId = odataObject.RewardPointId;
                    this.IssuedPoints = (odataObject.IssuedPoints != null) ? parseFloat(odataObject.IssuedPoints) : undefined;
                    this.UsedPoints = (odataObject.UsedPoints != null) ? parseFloat(odataObject.UsedPoints) : undefined;
                    this.ExpiredPoints = (odataObject.ExpiredPoints != null) ? parseFloat(odataObject.ExpiredPoints) : undefined;
                    this.ActivePoints = (odataObject.ActivePoints != null) ? parseFloat(odataObject.ActivePoints) : undefined;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return LoyaltyRewardPointClass;
            }());
            Entities.LoyaltyRewardPointClass = LoyaltyRewardPointClass;
            var LoyaltyCardTransactionClass = (function () {
                function LoyaltyCardTransactionClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ChannelName = odataObject.ChannelName;
                    this.EntryDateTime = (odataObject.EntryDateTime instanceof Date) ? odataObject.EntryDateTime
                        : (odataObject.EntryDateTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.EntryDateTime, "Edm.DateTimeOffset", false) : undefined;
                    this.EntryTypeValue = odataObject.EntryTypeValue;
                    this.ExpirationDate = (odataObject.ExpirationDate instanceof Date) ? odataObject.ExpirationDate
                        : (odataObject.ExpirationDate != null) ? OData.jsonLightReadStringPropertyValue(odataObject.ExpirationDate, "Edm.DateTimeOffset", false) : undefined;
                    this.RewardPointAmountQuantity = (odataObject.RewardPointAmountQuantity != null) ? parseFloat(odataObject.RewardPointAmountQuantity) : undefined;
                    this.TransactionId = odataObject.TransactionId;
                }
                return LoyaltyCardTransactionClass;
            }());
            Entities.LoyaltyCardTransactionClass = LoyaltyCardTransactionClass;
            var GiftCardClass = (function () {
                function GiftCardClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Id = odataObject.Id;
                    this.Balance = (odataObject.Balance != null) ? parseFloat(odataObject.Balance) : undefined;
                    this.BalanceCurrencyCode = odataObject.BalanceCurrencyCode;
                    this.BalanceInCardCurrency = (odataObject.BalanceInCardCurrency != null) ? parseFloat(odataObject.BalanceInCardCurrency) : undefined;
                    this.CardCurrencyCode = odataObject.CardCurrencyCode;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return GiftCardClass;
            }());
            Entities.GiftCardClass = GiftCardClass;
            var OperationPermissionClass = (function () {
                function OperationPermissionClass(odataObject) {
                    odataObject = odataObject || {};
                    this.OperationName = odataObject.OperationName;
                    this.OperationId = odataObject.OperationId;
                    this.CheckUserAccess = odataObject.CheckUserAccess;
                    this.AllowAnonymousAccess = odataObject.AllowAnonymousAccess;
                    this.AllowCustomerAccess = odataObject.AllowCustomerAccess;
                    this.AllowApplicationAccess = odataObject.AllowApplicationAccess;
                    this.Permissions = undefined;
                    if (odataObject.Permissions) {
                        this.Permissions = [];
                        for (var i = 0; i < odataObject.Permissions.length; i++) {
                            if (odataObject.Permissions[i] != null) {
                                this.Permissions[i] = odataObject.Permissions[i];
                            }
                            else {
                                this.Permissions[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return OperationPermissionClass;
            }());
            Entities.OperationPermissionClass = OperationPermissionClass;
            var StateProvinceInfoClass = (function () {
                function StateProvinceInfoClass(odataObject) {
                    odataObject = odataObject || {};
                    this.CountryRegionId = odataObject.CountryRegionId;
                    this.StateId = odataObject.StateId;
                    this.StateName = odataObject.StateName;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return StateProvinceInfoClass;
            }());
            Entities.StateProvinceInfoClass = StateProvinceInfoClass;
            var TransactionClass = (function () {
                function TransactionClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Id = odataObject.Id;
                    this.StoreId = odataObject.StoreId;
                    this.TerminalId = odataObject.TerminalId;
                    this.IsCreatedOffline = odataObject.IsCreatedOffline;
                    this.StaffId = odataObject.StaffId;
                    this.ShiftId = odataObject.ShiftId;
                    this.ShiftTerminalId = odataObject.ShiftTerminalId;
                    this.Description = odataObject.Description;
                    this.ReceiptId = odataObject.ReceiptId;
                    this.GrossAmount = (odataObject.GrossAmount != null) ? parseFloat(odataObject.GrossAmount) : undefined;
                    this.TotalAmount = (odataObject.TotalAmount != null) ? parseFloat(odataObject.TotalAmount) : undefined;
                    this.CreatedDateTime = (odataObject.CreatedDateTime instanceof Date) ? odataObject.CreatedDateTime
                        : (odataObject.CreatedDateTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.CreatedDateTime, "Edm.DateTimeOffset", false) : undefined;
                    this.TransactionTypeValue = odataObject.TransactionTypeValue;
                    this.TransactionStatusValue = odataObject.TransactionStatusValue;
                    this.BeginDateTime = (odataObject.BeginDateTime instanceof Date) ? odataObject.BeginDateTime
                        : (odataObject.BeginDateTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.BeginDateTime, "Edm.DateTimeOffset", false) : undefined;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return TransactionClass;
            }());
            Entities.TransactionClass = TransactionClass;
            var TransactionLogClass = (function (_super) {
                __extends(TransactionLogClass, _super);
                function TransactionLogClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.TransactionLog";
                    return _this;
                }
                return TransactionLogClass;
            }(TransactionClass));
            Entities.TransactionLogClass = TransactionLogClass;
            var KitTransactionClass = (function (_super) {
                __extends(KitTransactionClass, _super);
                function KitTransactionClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.KitTransactionLines = undefined;
                    if (odataObject.KitTransactionLines) {
                        _this.KitTransactionLines = [];
                        for (var i = 0; i < odataObject.KitTransactionLines.length; i++) {
                            if (odataObject.KitTransactionLines[i] != null) {
                                if (odataObject.KitTransactionLines[i]['@odata.type'] != null) {
                                    var className = odataObject.KitTransactionLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        _this.KitTransactionLines[i] = new Commerce.Proxy.Entities[className](odataObject.KitTransactionLines[i]);
                                    }
                                }
                                else {
                                    _this.KitTransactionLines[i] = new KitTransactionLineClass(odataObject.KitTransactionLines[i]);
                                }
                            }
                            else {
                                _this.KitTransactionLines[i] = undefined;
                            }
                        }
                    }
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.KitTransaction";
                    return _this;
                }
                return KitTransactionClass;
            }(TransactionLogClass));
            Entities.KitTransactionClass = KitTransactionClass;
            var SalesTaxGroupClass = (function () {
                function SalesTaxGroupClass(odataObject) {
                    odataObject = odataObject || {};
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.TaxGroup = odataObject.TaxGroup;
                    this.TaxGroupName = odataObject.TaxGroupName;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return SalesTaxGroupClass;
            }());
            Entities.SalesTaxGroupClass = SalesTaxGroupClass;
            var ProductPropertyClass = (function () {
                function ProductPropertyClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ValueString = odataObject.ValueString;
                    this.PropertyTypeValue = odataObject.PropertyTypeValue;
                    this.KeyName = odataObject.KeyName;
                    this.FriendlyName = odataObject.FriendlyName;
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.IsDimensionProperty = odataObject.IsDimensionProperty;
                    this.AttributeValueId = (odataObject.AttributeValueId != null) ? parseInt(odataObject.AttributeValueId, 10) : undefined;
                    this.UnitText = odataObject.UnitText;
                    this.GroupId = (odataObject.GroupId != null) ? parseInt(odataObject.GroupId, 10) : undefined;
                    this.GroupTypeValue = odataObject.GroupTypeValue;
                    this.GroupName = odataObject.GroupName;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                    this.ProductId = (odataObject.ProductId != null) ? parseInt(odataObject.ProductId, 10) : undefined;
                    this.CatalogId = (odataObject.CatalogId != null) ? parseInt(odataObject.CatalogId, 10) : undefined;
                }
                return ProductPropertyClass;
            }());
            Entities.ProductPropertyClass = ProductPropertyClass;
            var ProductCompositionInformationClass = (function () {
                function ProductCompositionInformationClass(odataObject) {
                    odataObject = odataObject || {};
                    if (odataObject.VariantInformation == null) {
                        this.VariantInformation = undefined;
                    }
                    else if (odataObject.VariantInformation['@odata.type'] == null) {
                        this.VariantInformation = new ProductVariantInformationClass(odataObject.VariantInformation);
                    }
                    else {
                        var className = odataObject.VariantInformation['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.VariantInformation = new Commerce.Proxy.Entities[className](odataObject.VariantInformation);
                        }
                    }
                    if (odataObject.KitDefinition == null) {
                        this.KitDefinition = undefined;
                    }
                    else if (odataObject.KitDefinition['@odata.type'] == null) {
                        this.KitDefinition = new KitDefinitionClass(odataObject.KitDefinition);
                    }
                    else {
                        var className = odataObject.KitDefinition['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.KitDefinition = new Commerce.Proxy.Entities[className](odataObject.KitDefinition);
                        }
                    }
                }
                return ProductCompositionInformationClass;
            }());
            Entities.ProductCompositionInformationClass = ProductCompositionInformationClass;
            var ProductVariantInformationClass = (function () {
                function ProductVariantInformationClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ActiveVariantProductId = (odataObject.ActiveVariantProductId != null) ? parseInt(odataObject.ActiveVariantProductId, 10) : undefined;
                    this.Variants = undefined;
                    if (odataObject.Variants) {
                        this.Variants = [];
                        for (var i = 0; i < odataObject.Variants.length; i++) {
                            if (odataObject.Variants[i] != null) {
                                if (odataObject.Variants[i]['@odata.type'] != null) {
                                    var className = odataObject.Variants[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.Variants[i] = new Commerce.Proxy.Entities[className](odataObject.Variants[i]);
                                    }
                                }
                                else {
                                    this.Variants[i] = new ProductVariantClass(odataObject.Variants[i]);
                                }
                            }
                            else {
                                this.Variants[i] = undefined;
                            }
                        }
                    }
                    this.Dimensions = undefined;
                    if (odataObject.Dimensions) {
                        this.Dimensions = [];
                        for (var i = 0; i < odataObject.Dimensions.length; i++) {
                            if (odataObject.Dimensions[i] != null) {
                                if (odataObject.Dimensions[i]['@odata.type'] != null) {
                                    var className = odataObject.Dimensions[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.Dimensions[i] = new Commerce.Proxy.Entities[className](odataObject.Dimensions[i]);
                                    }
                                }
                                else {
                                    this.Dimensions[i] = new ProductDimensionSetClass(odataObject.Dimensions[i]);
                                }
                            }
                            else {
                                this.Dimensions[i] = undefined;
                            }
                        }
                    }
                    this.ItemId = odataObject.ItemId;
                    this.MasterProductId = (odataObject.MasterProductId != null) ? parseInt(odataObject.MasterProductId, 10) : undefined;
                }
                return ProductVariantInformationClass;
            }());
            Entities.ProductVariantInformationClass = ProductVariantInformationClass;
            var ProductChangeTrackingInformationClass = (function () {
                function ProductChangeTrackingInformationClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ModifiedDateTime = (odataObject.ModifiedDateTime instanceof Date) ? odataObject.ModifiedDateTime
                        : (odataObject.ModifiedDateTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.ModifiedDateTime, "Edm.DateTimeOffset", false) : undefined;
                    this.ChangeActionValue = odataObject.ChangeActionValue;
                    this.RequestedActionValue = odataObject.RequestedActionValue;
                }
                return ProductChangeTrackingInformationClass;
            }());
            Entities.ProductChangeTrackingInformationClass = ProductChangeTrackingInformationClass;
            var ProductDimensionSetClass = (function () {
                function ProductDimensionSetClass(odataObject) {
                    odataObject = odataObject || {};
                    this.DimensionKey = odataObject.DimensionKey;
                    this.DimensionValues = undefined;
                    if (odataObject.DimensionValues) {
                        this.DimensionValues = [];
                        for (var i = 0; i < odataObject.DimensionValues.length; i++) {
                            if (odataObject.DimensionValues[i] != null) {
                                if (odataObject.DimensionValues[i]['@odata.type'] != null) {
                                    var className = odataObject.DimensionValues[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.DimensionValues[i] = new Commerce.Proxy.Entities[className](odataObject.DimensionValues[i]);
                                    }
                                }
                                else {
                                    this.DimensionValues[i] = new ProductDimensionValueSetClass(odataObject.DimensionValues[i]);
                                }
                            }
                            else {
                                this.DimensionValues[i] = undefined;
                            }
                        }
                    }
                }
                return ProductDimensionSetClass;
            }());
            Entities.ProductDimensionSetClass = ProductDimensionSetClass;
            var ProductDimensionValueSetClass = (function () {
                function ProductDimensionValueSetClass(odataObject) {
                    odataObject = odataObject || {};
                    this.DimensionValue = odataObject.DimensionValue;
                    this.VariantSet = undefined;
                    if (odataObject.VariantSet) {
                        this.VariantSet = [];
                        for (var i = 0; i < odataObject.VariantSet.length; i++) {
                            if (odataObject.VariantSet[i] != null) {
                                this.VariantSet[i] = parseInt(odataObject.VariantSet[i], 10);
                            }
                            else {
                                this.VariantSet[i] = undefined;
                            }
                        }
                    }
                }
                return ProductDimensionValueSetClass;
            }());
            Entities.ProductDimensionValueSetClass = ProductDimensionValueSetClass;
            var RichMediaLocationsClass = (function () {
                function RichMediaLocationsClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Items = undefined;
                    if (odataObject.Items) {
                        this.Items = [];
                        for (var i = 0; i < odataObject.Items.length; i++) {
                            if (odataObject.Items[i] != null) {
                                if (odataObject.Items[i]['@odata.type'] != null) {
                                    var className = odataObject.Items[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.Items[i] = new Commerce.Proxy.Entities[className](odataObject.Items[i]);
                                    }
                                }
                                else {
                                    this.Items[i] = new RichMediaLocationsRichMediaLocationClass(odataObject.Items[i]);
                                }
                            }
                            else {
                                this.Items[i] = undefined;
                            }
                        }
                    }
                }
                return RichMediaLocationsClass;
            }());
            Entities.RichMediaLocationsClass = RichMediaLocationsClass;
            var RichMediaLocationsRichMediaLocationClass = (function () {
                function RichMediaLocationsRichMediaLocationClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Url = odataObject.Url;
                    this.AltText = odataObject.AltText;
                    this.IsSelfHosted = odataObject.IsSelfHosted;
                    this.IsDefault = odataObject.IsDefault;
                }
                return RichMediaLocationsRichMediaLocationClass;
            }());
            Entities.RichMediaLocationsRichMediaLocationClass = RichMediaLocationsRichMediaLocationClass;
            var KitDefinitionClass = (function () {
                function KitDefinitionClass(odataObject) {
                    odataObject = odataObject || {};
                    this.DisassembleAtRegister = odataObject.DisassembleAtRegister;
                    this.KitLineDefinitions = undefined;
                    if (odataObject.KitLineDefinitions) {
                        this.KitLineDefinitions = [];
                        for (var i = 0; i < odataObject.KitLineDefinitions.length; i++) {
                            if (odataObject.KitLineDefinitions[i] != null) {
                                if (odataObject.KitLineDefinitions[i]['@odata.type'] != null) {
                                    var className = odataObject.KitLineDefinitions[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.KitLineDefinitions[i] = new Commerce.Proxy.Entities[className](odataObject.KitLineDefinitions[i]);
                                    }
                                }
                                else {
                                    this.KitLineDefinitions[i] = new KitLineDefinitionClass(odataObject.KitLineDefinitions[i]);
                                }
                            }
                            else {
                                this.KitLineDefinitions[i] = undefined;
                            }
                        }
                    }
                    this.KitLineProductToVariantMap = undefined;
                    if (odataObject.KitLineProductToVariantMap) {
                        this.KitLineProductToVariantMap = [];
                        for (var i = 0; i < odataObject.KitLineProductToVariantMap.length; i++) {
                            if (odataObject.KitLineProductToVariantMap[i] != null) {
                                if (odataObject.KitLineProductToVariantMap[i]['@odata.type'] != null) {
                                    var className = odataObject.KitLineProductToVariantMap[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.KitLineProductToVariantMap[i] = new Commerce.Proxy.Entities[className](odataObject.KitLineProductToVariantMap[i]);
                                    }
                                }
                                else {
                                    this.KitLineProductToVariantMap[i] = new ComponentKitVariantSetClass(odataObject.KitLineProductToVariantMap[i]);
                                }
                            }
                            else {
                                this.KitLineProductToVariantMap[i] = undefined;
                            }
                        }
                    }
                    this.KitVariantToComponentMap = undefined;
                    if (odataObject.KitVariantToComponentMap) {
                        this.KitVariantToComponentMap = [];
                        for (var i = 0; i < odataObject.KitVariantToComponentMap.length; i++) {
                            if (odataObject.KitVariantToComponentMap[i] != null) {
                                if (odataObject.KitVariantToComponentMap[i]['@odata.type'] != null) {
                                    var className = odataObject.KitVariantToComponentMap[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.KitVariantToComponentMap[i] = new Commerce.Proxy.Entities[className](odataObject.KitVariantToComponentMap[i]);
                                    }
                                }
                                else {
                                    this.KitVariantToComponentMap[i] = new KitVariantContentClass(odataObject.KitVariantToComponentMap[i]);
                                }
                            }
                            else {
                                this.KitVariantToComponentMap[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return KitDefinitionClass;
            }());
            Entities.KitDefinitionClass = KitDefinitionClass;
            var ComponentKitVariantSetClass = (function () {
                function ComponentKitVariantSetClass(odataObject) {
                    odataObject = odataObject || {};
                    this.KitLineProductId = (odataObject.KitLineProductId != null) ? parseInt(odataObject.KitLineProductId, 10) : undefined;
                    this.KitVariantIdList = undefined;
                    if (odataObject.KitVariantIdList) {
                        this.KitVariantIdList = [];
                        for (var i = 0; i < odataObject.KitVariantIdList.length; i++) {
                            if (odataObject.KitVariantIdList[i] != null) {
                                this.KitVariantIdList[i] = parseInt(odataObject.KitVariantIdList[i], 10);
                            }
                            else {
                                this.KitVariantIdList[i] = undefined;
                            }
                        }
                    }
                }
                return ComponentKitVariantSetClass;
            }());
            Entities.ComponentKitVariantSetClass = ComponentKitVariantSetClass;
            var KitLineDefinitionClass = (function () {
                function KitLineDefinitionClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ComponentProductId = (odataObject.ComponentProductId != null) ? parseInt(odataObject.ComponentProductId, 10) : undefined;
                    this.KitLineIdentifier = (odataObject.KitLineIdentifier != null) ? parseInt(odataObject.KitLineIdentifier, 10) : undefined;
                    this.SubstituteProductIds = undefined;
                    if (odataObject.SubstituteProductIds) {
                        this.SubstituteProductIds = [];
                        for (var i = 0; i < odataObject.SubstituteProductIds.length; i++) {
                            if (odataObject.SubstituteProductIds[i] != null) {
                                this.SubstituteProductIds[i] = parseInt(odataObject.SubstituteProductIds[i], 10);
                            }
                            else {
                                this.SubstituteProductIds[i] = undefined;
                            }
                        }
                    }
                    this.ComponentProperties = undefined;
                    if (odataObject.ComponentProperties) {
                        this.ComponentProperties = [];
                        for (var i = 0; i < odataObject.ComponentProperties.length; i++) {
                            if (odataObject.ComponentProperties[i] != null) {
                                if (odataObject.ComponentProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ComponentProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ComponentProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ComponentProperties[i]);
                                    }
                                }
                                else {
                                    this.ComponentProperties[i] = new KitLineProductPropertyClass(odataObject.ComponentProperties[i]);
                                }
                            }
                            else {
                                this.ComponentProperties[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return KitLineDefinitionClass;
            }());
            Entities.KitLineDefinitionClass = KitLineDefinitionClass;
            var KitLineProductPropertyClass = (function () {
                function KitLineProductPropertyClass(odataObject) {
                    odataObject = odataObject || {};
                    this.KitLineIdentifier = (odataObject.KitLineIdentifier != null) ? parseInt(odataObject.KitLineIdentifier, 10) : undefined;
                    this.ProductId = (odataObject.ProductId != null) ? parseInt(odataObject.ProductId, 10) : undefined;
                    this.Unit = odataObject.Unit;
                    this.Quantity = (odataObject.Quantity != null) ? parseFloat(odataObject.Quantity) : undefined;
                    this.Charge = (odataObject.Charge != null) ? parseFloat(odataObject.Charge) : undefined;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return KitLineProductPropertyClass;
            }());
            Entities.KitLineProductPropertyClass = KitLineProductPropertyClass;
            var KitComponentKeyClass = (function () {
                function KitComponentKeyClass(odataObject) {
                    odataObject = odataObject || {};
                    this.KitLineIdentifier = (odataObject.KitLineIdentifier != null) ? parseInt(odataObject.KitLineIdentifier, 10) : undefined;
                    this.DistinctProductId = (odataObject.DistinctProductId != null) ? parseInt(odataObject.DistinctProductId, 10) : undefined;
                }
                return KitComponentKeyClass;
            }());
            Entities.KitComponentKeyClass = KitComponentKeyClass;
            var KitVariantContentClass = (function () {
                function KitVariantContentClass(odataObject) {
                    odataObject = odataObject || {};
                    this.KitVariantId = (odataObject.KitVariantId != null) ? parseInt(odataObject.KitVariantId, 10) : undefined;
                    this.KitComponentKeyList = undefined;
                    if (odataObject.KitComponentKeyList) {
                        this.KitComponentKeyList = [];
                        for (var i = 0; i < odataObject.KitComponentKeyList.length; i++) {
                            if (odataObject.KitComponentKeyList[i] != null) {
                                if (odataObject.KitComponentKeyList[i]['@odata.type'] != null) {
                                    var className = odataObject.KitComponentKeyList[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.KitComponentKeyList[i] = new Commerce.Proxy.Entities[className](odataObject.KitComponentKeyList[i]);
                                    }
                                }
                                else {
                                    this.KitComponentKeyList[i] = new KitComponentKeyClass(odataObject.KitComponentKeyList[i]);
                                }
                            }
                            else {
                                this.KitComponentKeyList[i] = undefined;
                            }
                        }
                    }
                }
                return KitVariantContentClass;
            }());
            Entities.KitVariantContentClass = KitVariantContentClass;
            var ProductLookupClauseClass = (function () {
                function ProductLookupClauseClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ItemId = odataObject.ItemId;
                    this.InventDimensionId = odataObject.InventDimensionId;
                    this.Barcode = odataObject.Barcode;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ProductLookupClauseClass;
            }());
            Entities.ProductLookupClauseClass = ProductLookupClauseClass;
            var OrgUnitLocationClass = (function () {
                function OrgUnitLocationClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ChannelId = (odataObject.ChannelId != null) ? parseInt(odataObject.ChannelId, 10) : undefined;
                    this.Latitude = (odataObject.Latitude != null) ? parseFloat(odataObject.Latitude) : undefined;
                    this.Longitude = (odataObject.Longitude != null) ? parseFloat(odataObject.Longitude) : undefined;
                    this.OrgUnitName = odataObject.OrgUnitName;
                    this.OrgUnitNumber = odataObject.OrgUnitNumber;
                    this.Address = odataObject.Address;
                    this.Street = odataObject.Street;
                    this.StreetNumber = odataObject.StreetNumber;
                    this.City = odataObject.City;
                    this.DistrictName = odataObject.DistrictName;
                    this.BuildingCompliment = odataObject.BuildingCompliment;
                    this.Postbox = odataObject.Postbox;
                    this.Zip = odataObject.Zip;
                    this.County = odataObject.County;
                    this.CountyName = odataObject.CountyName;
                    this.State = odataObject.State;
                    this.StateName = odataObject.StateName;
                    this.Country = odataObject.Country;
                    this.Distance = (odataObject.Distance != null) ? parseFloat(odataObject.Distance) : undefined;
                    this.InventoryLocationId = odataObject.InventoryLocationId;
                    this.InventorySiteId = odataObject.InventorySiteId;
                    this.PostalAddressId = (odataObject.PostalAddressId != null) ? parseInt(odataObject.PostalAddressId, 10) : undefined;
                    this.OpenFrom = odataObject.OpenFrom;
                    this.OpenTo = odataObject.OpenTo;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return OrgUnitLocationClass;
            }());
            Entities.OrgUnitLocationClass = OrgUnitLocationClass;
            var SalesLineDeliveryOptionClass = (function () {
                function SalesLineDeliveryOptionClass(odataObject) {
                    odataObject = odataObject || {};
                    this.SalesLineId = odataObject.SalesLineId;
                    this.DeliveryOptions = undefined;
                    if (odataObject.DeliveryOptions) {
                        this.DeliveryOptions = [];
                        for (var i = 0; i < odataObject.DeliveryOptions.length; i++) {
                            if (odataObject.DeliveryOptions[i] != null) {
                                if (odataObject.DeliveryOptions[i]['@odata.type'] != null) {
                                    var className = odataObject.DeliveryOptions[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.DeliveryOptions[i] = new Commerce.Proxy.Entities[className](odataObject.DeliveryOptions[i]);
                                    }
                                }
                                else {
                                    this.DeliveryOptions[i] = new DeliveryOptionClass(odataObject.DeliveryOptions[i]);
                                }
                            }
                            else {
                                this.DeliveryOptions[i] = undefined;
                            }
                        }
                    }
                }
                return SalesLineDeliveryOptionClass;
            }());
            Entities.SalesLineDeliveryOptionClass = SalesLineDeliveryOptionClass;
            var DeliveryOptionClass = (function () {
                function DeliveryOptionClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ChargeGroup = odataObject.ChargeGroup;
                    this.Code = odataObject.Code;
                    this.Description = odataObject.Description;
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return DeliveryOptionClass;
            }());
            Entities.DeliveryOptionClass = DeliveryOptionClass;
            var ChannelProfilePropertyClass = (function () {
                function ChannelProfilePropertyClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Key = odataObject.Key;
                    this.Value = odataObject.Value;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ChannelProfilePropertyClass;
            }());
            Entities.ChannelProfilePropertyClass = ChannelProfilePropertyClass;
            var ChannelConfigurationClass = (function () {
                function ChannelConfigurationClass(odataObject) {
                    odataObject = odataObject || {};
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.ChannelNaturalId = odataObject.ChannelNaturalId;
                    this.MinimumDepositPercentage = (odataObject.MinimumDepositPercentage != null) ? parseFloat(odataObject.MinimumDepositPercentage) : undefined;
                    this.QuoteExpirationDays = odataObject.QuoteExpirationDays;
                    this.PickupDeliveryModeCode = odataObject.PickupDeliveryModeCode;
                    this.CarryoutDeliveryModeCode = odataObject.CarryoutDeliveryModeCode;
                    this.CancellationChargePercentage = (odataObject.CancellationChargePercentage != null) ? parseFloat(odataObject.CancellationChargePercentage) : undefined;
                    this.InventLocation = odataObject.InventLocation;
                    this.InventLocationDataAreaId = odataObject.InventLocationDataAreaId;
                    this.BingMapsApiKey = odataObject.BingMapsApiKey;
                    this.BingMapsEnabled = odataObject.BingMapsEnabled;
                    this.Currency = odataObject.Currency;
                    this.CatalogDefaultImageTemplate = odataObject.CatalogDefaultImageTemplate;
                    this.CompanyCurrency = odataObject.CompanyCurrency;
                    this.PriceIncludesSalesTax = odataObject.PriceIncludesSalesTax;
                    this.CountryRegionId = odataObject.CountryRegionId;
                    this.ChannelCountryRegionISOCode = odataObject.ChannelCountryRegionISOCode;
                    this.DefaultLanguageId = odataObject.DefaultLanguageId;
                    this.TimeZoneInfoId = odataObject.TimeZoneInfoId;
                    this.EmailDeliveryModeCode = odataObject.EmailDeliveryModeCode;
                    this.GiftCardItemId = odataObject.GiftCardItemId;
                    this.EnableProductRecommendations = odataObject.EnableProductRecommendations;
                    this.RefundableShippingAmountWithoutApproval = (odataObject.RefundableShippingAmountWithoutApproval != null) ? parseFloat(odataObject.RefundableShippingAmountWithoutApproval) : undefined;
                    this.RefundShippingCharges = odataObject.RefundShippingCharges;
                    this.ReceiptSettingsValue = odataObject.ReceiptSettingsValue;
                    this.CustomerAttributeGroupId = (odataObject.CustomerAttributeGroupId != null) ? parseInt(odataObject.CustomerAttributeGroupId, 10) : undefined;
                    this.NotificationRefreshInterval = odataObject.NotificationRefreshInterval;
                    this.ProfileProperties = undefined;
                    if (odataObject.ProfileProperties) {
                        this.ProfileProperties = [];
                        for (var i = 0; i < odataObject.ProfileProperties.length; i++) {
                            if (odataObject.ProfileProperties[i] != null) {
                                if (odataObject.ProfileProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ProfileProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ProfileProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ProfileProperties[i]);
                                    }
                                }
                                else {
                                    this.ProfileProperties[i] = new ChannelProfilePropertyClass(odataObject.ProfileProperties[i]);
                                }
                            }
                            else {
                                this.ProfileProperties[i] = undefined;
                            }
                        }
                    }
                    this.Properties = undefined;
                    if (odataObject.Properties) {
                        this.Properties = [];
                        for (var i = 0; i < odataObject.Properties.length; i++) {
                            if (odataObject.Properties[i] != null) {
                                if (odataObject.Properties[i]['@odata.type'] != null) {
                                    var className = odataObject.Properties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.Properties[i] = new Commerce.Proxy.Entities[className](odataObject.Properties[i]);
                                    }
                                }
                                else {
                                    this.Properties[i] = new ChannelPropertyClass(odataObject.Properties[i]);
                                }
                            }
                            else {
                                this.Properties[i] = undefined;
                            }
                        }
                    }
                    this.Languages = undefined;
                    if (odataObject.Languages) {
                        this.Languages = [];
                        for (var i = 0; i < odataObject.Languages.length; i++) {
                            if (odataObject.Languages[i] != null) {
                                if (odataObject.Languages[i]['@odata.type'] != null) {
                                    var className = odataObject.Languages[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.Languages[i] = new Commerce.Proxy.Entities[className](odataObject.Languages[i]);
                                    }
                                }
                                else {
                                    this.Languages[i] = new ChannelLanguageClass(odataObject.Languages[i]);
                                }
                            }
                            else {
                                this.Languages[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ChannelConfigurationClass;
            }());
            Entities.ChannelConfigurationClass = ChannelConfigurationClass;
            var ChannelPropertyClass = (function () {
                function ChannelPropertyClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Name = odataObject.Name;
                    this.Value = odataObject.Value;
                    this.Channel = (odataObject.Channel != null) ? parseInt(odataObject.Channel, 10) : undefined;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ChannelPropertyClass;
            }());
            Entities.ChannelPropertyClass = ChannelPropertyClass;
            var ChannelLanguageClass = (function () {
                function ChannelLanguageClass(odataObject) {
                    odataObject = odataObject || {};
                    this.LanguageId = odataObject.LanguageId;
                    this.IsDefault = odataObject.IsDefault;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ChannelLanguageClass;
            }());
            Entities.ChannelLanguageClass = ChannelLanguageClass;
            var NonSalesTransactionClass = (function (_super) {
                __extends(NonSalesTransactionClass, _super);
                function NonSalesTransactionClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.ReasonCodeLines = undefined;
                    if (odataObject.ReasonCodeLines) {
                        _this.ReasonCodeLines = [];
                        for (var i = 0; i < odataObject.ReasonCodeLines.length; i++) {
                            if (odataObject.ReasonCodeLines[i] != null) {
                                if (odataObject.ReasonCodeLines[i]['@odata.type'] != null) {
                                    var className = odataObject.ReasonCodeLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        _this.ReasonCodeLines[i] = new Commerce.Proxy.Entities[className](odataObject.ReasonCodeLines[i]);
                                    }
                                }
                                else {
                                    _this.ReasonCodeLines[i] = new ReasonCodeLineClass(odataObject.ReasonCodeLines[i]);
                                }
                            }
                            else {
                                _this.ReasonCodeLines[i] = undefined;
                            }
                        }
                    }
                    _this.Amount = (odataObject.Amount != null) ? parseFloat(odataObject.Amount) : undefined;
                    _this.ForeignCurrency = odataObject.ForeignCurrency;
                    _this.OpenDrawer = odataObject.OpenDrawer;
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.NonSalesTransaction";
                    return _this;
                }
                return NonSalesTransactionClass;
            }(TransactionClass));
            Entities.NonSalesTransactionClass = NonSalesTransactionClass;
            var DropAndDeclareTransactionClass = (function (_super) {
                __extends(DropAndDeclareTransactionClass, _super);
                function DropAndDeclareTransactionClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.TenderDetails = undefined;
                    if (odataObject.TenderDetails) {
                        _this.TenderDetails = [];
                        for (var i = 0; i < odataObject.TenderDetails.length; i++) {
                            if (odataObject.TenderDetails[i] != null) {
                                if (odataObject.TenderDetails[i]['@odata.type'] != null) {
                                    var className = odataObject.TenderDetails[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        _this.TenderDetails[i] = new Commerce.Proxy.Entities[className](odataObject.TenderDetails[i]);
                                    }
                                }
                                else {
                                    _this.TenderDetails[i] = new TenderDetailClass(odataObject.TenderDetails[i]);
                                }
                            }
                            else {
                                _this.TenderDetails[i] = undefined;
                            }
                        }
                    }
                    _this.ReasonCodeLines = undefined;
                    if (odataObject.ReasonCodeLines) {
                        _this.ReasonCodeLines = [];
                        for (var i = 0; i < odataObject.ReasonCodeLines.length; i++) {
                            if (odataObject.ReasonCodeLines[i] != null) {
                                if (odataObject.ReasonCodeLines[i]['@odata.type'] != null) {
                                    var className = odataObject.ReasonCodeLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        _this.ReasonCodeLines[i] = new Commerce.Proxy.Entities[className](odataObject.ReasonCodeLines[i]);
                                    }
                                }
                                else {
                                    _this.ReasonCodeLines[i] = new ReasonCodeLineClass(odataObject.ReasonCodeLines[i]);
                                }
                            }
                            else {
                                _this.ReasonCodeLines[i] = undefined;
                            }
                        }
                    }
                    _this.OpenDrawer = odataObject.OpenDrawer;
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.DropAndDeclareTransaction";
                    return _this;
                }
                return DropAndDeclareTransactionClass;
            }(TransactionClass));
            Entities.DropAndDeclareTransactionClass = DropAndDeclareTransactionClass;
            var ProductSearchCriteriaClass = (function () {
                function ProductSearchCriteriaClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Ids = undefined;
                    if (odataObject.Ids) {
                        this.Ids = [];
                        for (var i = 0; i < odataObject.Ids.length; i++) {
                            if (odataObject.Ids[i] != null) {
                                this.Ids[i] = parseInt(odataObject.Ids[i], 10);
                            }
                            else {
                                this.Ids[i] = undefined;
                            }
                        }
                    }
                    this.CategoryIds = undefined;
                    if (odataObject.CategoryIds) {
                        this.CategoryIds = [];
                        for (var i = 0; i < odataObject.CategoryIds.length; i++) {
                            if (odataObject.CategoryIds[i] != null) {
                                this.CategoryIds[i] = parseInt(odataObject.CategoryIds[i], 10);
                            }
                            else {
                                this.CategoryIds[i] = undefined;
                            }
                        }
                    }
                    this.IncludeProductsFromDescendantCategories = odataObject.IncludeProductsFromDescendantCategories;
                    this.SearchCondition = odataObject.SearchCondition;
                    this.SkipVariantExpansion = odataObject.SkipVariantExpansion;
                    this.Barcodes = undefined;
                    if (odataObject.Barcodes) {
                        this.Barcodes = [];
                        for (var i = 0; i < odataObject.Barcodes.length; i++) {
                            if (odataObject.Barcodes[i] != null) {
                                this.Barcodes[i] = odataObject.Barcodes[i];
                            }
                            else {
                                this.Barcodes[i] = undefined;
                            }
                        }
                    }
                    this.ItemIds = undefined;
                    if (odataObject.ItemIds) {
                        this.ItemIds = [];
                        for (var i = 0; i < odataObject.ItemIds.length; i++) {
                            if (odataObject.ItemIds[i] != null) {
                                if (odataObject.ItemIds[i]['@odata.type'] != null) {
                                    var className = odataObject.ItemIds[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ItemIds[i] = new Commerce.Proxy.Entities[className](odataObject.ItemIds[i]);
                                    }
                                }
                                else {
                                    this.ItemIds[i] = new ProductLookupClauseClass(odataObject.ItemIds[i]);
                                }
                            }
                            else {
                                this.ItemIds[i] = undefined;
                            }
                        }
                    }
                    this.Refinement = undefined;
                    if (odataObject.Refinement) {
                        this.Refinement = [];
                        for (var i = 0; i < odataObject.Refinement.length; i++) {
                            if (odataObject.Refinement[i] != null) {
                                if (odataObject.Refinement[i]['@odata.type'] != null) {
                                    var className = odataObject.Refinement[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.Refinement[i] = new Commerce.Proxy.Entities[className](odataObject.Refinement[i]);
                                    }
                                }
                                else {
                                    this.Refinement[i] = new ProductRefinerValueClass(odataObject.Refinement[i]);
                                }
                            }
                            else {
                                this.Refinement[i] = undefined;
                            }
                        }
                    }
                    this.DownloadProductData = odataObject.DownloadProductData;
                    if (odataObject.Context == null) {
                        this.Context = undefined;
                    }
                    else if (odataObject.Context['@odata.type'] == null) {
                        this.Context = new ProjectionDomainClass(odataObject.Context);
                    }
                    else {
                        var className = odataObject.Context['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.Context = new Commerce.Proxy.Entities[className](odataObject.Context);
                        }
                    }
                    this.Language = odataObject.Language;
                    this.IsOnline = odataObject.IsOnline;
                    this.DataLevelValue = odataObject.DataLevelValue;
                }
                return ProductSearchCriteriaClass;
            }());
            Entities.ProductSearchCriteriaClass = ProductSearchCriteriaClass;
            var ChangedProductsSearchCriteriaClass = (function () {
                function ChangedProductsSearchCriteriaClass(odataObject) {
                    odataObject = odataObject || {};
                    this.SynchronizationToken = odataObject.SynchronizationToken;
                    if (odataObject.Context == null) {
                        this.Context = undefined;
                    }
                    else if (odataObject.Context['@odata.type'] == null) {
                        this.Context = new ProjectionDomainClass(odataObject.Context);
                    }
                    else {
                        var className = odataObject.Context['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.Context = new Commerce.Proxy.Entities[className](odataObject.Context);
                        }
                    }
                    this.AsListings = odataObject.AsListings;
                    if (odataObject.Session == null) {
                        this.Session = undefined;
                    }
                    else if (odataObject.Session['@odata.type'] == null) {
                        this.Session = new ReadChangedProductsSessionClass(odataObject.Session);
                    }
                    else {
                        var className = odataObject.Session['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.Session = new Commerce.Proxy.Entities[className](odataObject.Session);
                        }
                    }
                    this.DataLevelValue = odataObject.DataLevelValue;
                }
                return ChangedProductsSearchCriteriaClass;
            }());
            Entities.ChangedProductsSearchCriteriaClass = ChangedProductsSearchCriteriaClass;
            var EmployeeActivitySearchCriteriaClass = (function () {
                function EmployeeActivitySearchCriteriaClass(odataObject) {
                    odataObject = odataObject || {};
                    this.FromDateTimeOffset = (odataObject.FromDateTimeOffset instanceof Date) ? odataObject.FromDateTimeOffset
                        : (odataObject.FromDateTimeOffset != null) ? OData.jsonLightReadStringPropertyValue(odataObject.FromDateTimeOffset, "Edm.DateTimeOffset", false) : undefined;
                    this.ToDateTimeOffset = (odataObject.ToDateTimeOffset instanceof Date) ? odataObject.ToDateTimeOffset
                        : (odataObject.ToDateTimeOffset != null) ? OData.jsonLightReadStringPropertyValue(odataObject.ToDateTimeOffset, "Edm.DateTimeOffset", false) : undefined;
                    this.StoreNumber = odataObject.StoreNumber;
                    this.EmployeeActivityTypeValues = undefined;
                    if (odataObject.EmployeeActivityTypeValues) {
                        this.EmployeeActivityTypeValues = [];
                        for (var i = 0; i < odataObject.EmployeeActivityTypeValues.length; i++) {
                            if (odataObject.EmployeeActivityTypeValues[i] != null) {
                                this.EmployeeActivityTypeValues[i] = odataObject.EmployeeActivityTypeValues[i];
                            }
                            else {
                                this.EmployeeActivityTypeValues[i] = undefined;
                            }
                        }
                    }
                    this.DataLevelValue = odataObject.DataLevelValue;
                }
                return EmployeeActivitySearchCriteriaClass;
            }());
            Entities.EmployeeActivitySearchCriteriaClass = EmployeeActivitySearchCriteriaClass;
            var CartLineDeliveryPreferenceClass = (function () {
                function CartLineDeliveryPreferenceClass(odataObject) {
                    odataObject = odataObject || {};
                    this.LineId = odataObject.LineId;
                    this.DeliveryPreferenceTypeValues = undefined;
                    if (odataObject.DeliveryPreferenceTypeValues) {
                        this.DeliveryPreferenceTypeValues = [];
                        for (var i = 0; i < odataObject.DeliveryPreferenceTypeValues.length; i++) {
                            if (odataObject.DeliveryPreferenceTypeValues[i] != null) {
                                this.DeliveryPreferenceTypeValues[i] = odataObject.DeliveryPreferenceTypeValues[i];
                            }
                            else {
                                this.DeliveryPreferenceTypeValues[i] = undefined;
                            }
                        }
                    }
                }
                return CartLineDeliveryPreferenceClass;
            }());
            Entities.CartLineDeliveryPreferenceClass = CartLineDeliveryPreferenceClass;
            var CartLinePromotionClass = (function () {
                function CartLinePromotionClass(odataObject) {
                    odataObject = odataObject || {};
                    this.LineId = odataObject.LineId;
                    this.Promotions = undefined;
                    if (odataObject.Promotions) {
                        this.Promotions = [];
                        for (var i = 0; i < odataObject.Promotions.length; i++) {
                            if (odataObject.Promotions[i] != null) {
                                this.Promotions[i] = odataObject.Promotions[i];
                            }
                            else {
                                this.Promotions[i] = undefined;
                            }
                        }
                    }
                }
                return CartLinePromotionClass;
            }());
            Entities.CartLinePromotionClass = CartLinePromotionClass;
            var ProductVariantClass = (function () {
                function ProductVariantClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ItemId = odataObject.ItemId;
                    this.MasterProductId = (odataObject.MasterProductId != null) ? parseInt(odataObject.MasterProductId, 10) : undefined;
                    this.InventoryDimensionId = odataObject.InventoryDimensionId;
                    this.AdjustedPrice = (odataObject.AdjustedPrice != null) ? parseFloat(odataObject.AdjustedPrice) : undefined;
                    this.BasePrice = (odataObject.BasePrice != null) ? parseFloat(odataObject.BasePrice) : undefined;
                    this.Price = (odataObject.Price != null) ? parseFloat(odataObject.Price) : undefined;
                    this.Color = odataObject.Color;
                    this.Style = odataObject.Style;
                    this.Size = odataObject.Size;
                    this.Configuration = odataObject.Configuration;
                    this.ColorId = odataObject.ColorId;
                    this.StyleId = odataObject.StyleId;
                    this.SizeId = odataObject.SizeId;
                    this.ConfigId = odataObject.ConfigId;
                    this.VariantId = odataObject.VariantId;
                    this.Images = undefined;
                    if (odataObject.Images) {
                        this.Images = [];
                        for (var i = 0; i < odataObject.Images.length; i++) {
                            if (odataObject.Images[i] != null) {
                                if (odataObject.Images[i]['@odata.type'] != null) {
                                    var className = odataObject.Images[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.Images[i] = new Commerce.Proxy.Entities[className](odataObject.Images[i]);
                                    }
                                }
                                else {
                                    this.Images[i] = new RichMediaLocationsClass(odataObject.Images[i]);
                                }
                            }
                            else {
                                this.Images[i] = undefined;
                            }
                        }
                    }
                    this.DistinctProductVariantId = (odataObject.DistinctProductVariantId != null) ? parseInt(odataObject.DistinctProductVariantId, 10) : undefined;
                    this.ProductNumber = odataObject.ProductNumber;
                    this.PropertiesAsList = undefined;
                    if (odataObject.PropertiesAsList) {
                        this.PropertiesAsList = [];
                        for (var i = 0; i < odataObject.PropertiesAsList.length; i++) {
                            if (odataObject.PropertiesAsList[i] != null) {
                                if (odataObject.PropertiesAsList[i]['@odata.type'] != null) {
                                    var className = odataObject.PropertiesAsList[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.PropertiesAsList[i] = new Commerce.Proxy.Entities[className](odataObject.PropertiesAsList[i]);
                                    }
                                }
                                else {
                                    this.PropertiesAsList[i] = new ProductPropertyTranslationClass(odataObject.PropertiesAsList[i]);
                                }
                            }
                            else {
                                this.PropertiesAsList[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ProductVariantClass;
            }());
            Entities.ProductVariantClass = ProductVariantClass;
            var HardwareProfilePrinterClass = (function () {
                function HardwareProfilePrinterClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ProfileId = odataObject.ProfileId;
                    this.DeviceTypeValue = odataObject.DeviceTypeValue;
                    this.DeviceName = odataObject.DeviceName;
                    this.DeviceMake = odataObject.DeviceMake;
                    this.DeviceModel = odataObject.DeviceModel;
                    this.DeviceDescription = odataObject.DeviceDescription;
                    this.CharacterSet = odataObject.CharacterSet;
                    this.ReceiptProfileId = odataObject.ReceiptProfileId;
                    this.BinaryConversion = odataObject.BinaryConversion;
                    this.DocInsertRemovalTimeout = odataObject.DocInsertRemovalTimeout;
                    this.Logo = odataObject.Logo;
                    this.LogoAlignment = odataObject.LogoAlignment;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return HardwareProfilePrinterClass;
            }());
            Entities.HardwareProfilePrinterClass = HardwareProfilePrinterClass;
            var HardwareProfileScannerClass = (function () {
                function HardwareProfileScannerClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ProfileId = odataObject.ProfileId;
                    this.DeviceTypeValue = odataObject.DeviceTypeValue;
                    this.DeviceName = odataObject.DeviceName;
                    this.DeviceDescription = odataObject.DeviceDescription;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return HardwareProfileScannerClass;
            }());
            Entities.HardwareProfileScannerClass = HardwareProfileScannerClass;
            var HardwareProfileCashDrawerClass = (function () {
                function HardwareProfileCashDrawerClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ProfileId = odataObject.ProfileId;
                    this.DeviceTypeValue = odataObject.DeviceTypeValue;
                    this.DeviceName = odataObject.DeviceName;
                    this.DeviceDescription = odataObject.DeviceDescription;
                    this.DeviceMake = odataObject.DeviceMake;
                    this.DeviceModel = odataObject.DeviceModel;
                    this.IsSharedShiftDrawer = odataObject.IsSharedShiftDrawer;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return HardwareProfileCashDrawerClass;
            }());
            Entities.HardwareProfileCashDrawerClass = HardwareProfileCashDrawerClass;
            var TillLayoutClass = (function () {
                function TillLayoutClass(odataObject) {
                    odataObject = odataObject || {};
                    this.CashChangerLayoutXml = odataObject.CashChangerLayoutXml;
                    this.CustomerLayoutId = odataObject.CustomerLayoutId;
                    this.CustomerLayoutXml = odataObject.CustomerLayoutXml;
                    this.Height = odataObject.Height;
                    this.LayoutId = odataObject.LayoutId;
                    this.LayoutTypeValue = odataObject.LayoutTypeValue;
                    this.LayoutXml = odataObject.LayoutXml;
                    this.LayoutXmlPortrait = odataObject.LayoutXmlPortrait;
                    this.Name = odataObject.Name;
                    this.ReceiptId = odataObject.ReceiptId;
                    this.ReceiptItemsLayoutXml = odataObject.ReceiptItemsLayoutXml;
                    this.ReceiptPaymentLayoutXml = odataObject.ReceiptPaymentLayoutXml;
                    this.TotalId = odataObject.TotalId;
                    this.TotalsLayoutXml = odataObject.TotalsLayoutXml;
                    this.Width = odataObject.Width;
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.StartScreen = odataObject.StartScreen;
                    this.ButtonGridZones = undefined;
                    if (odataObject.ButtonGridZones) {
                        this.ButtonGridZones = [];
                        for (var i = 0; i < odataObject.ButtonGridZones.length; i++) {
                            if (odataObject.ButtonGridZones[i] != null) {
                                if (odataObject.ButtonGridZones[i]['@odata.type'] != null) {
                                    var className = odataObject.ButtonGridZones[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ButtonGridZones[i] = new Commerce.Proxy.Entities[className](odataObject.ButtonGridZones[i]);
                                    }
                                }
                                else {
                                    this.ButtonGridZones[i] = new ButtonGridZoneClass(odataObject.ButtonGridZones[i]);
                                }
                            }
                            else {
                                this.ButtonGridZones[i] = undefined;
                            }
                        }
                    }
                    this.ImageZones = undefined;
                    if (odataObject.ImageZones) {
                        this.ImageZones = [];
                        for (var i = 0; i < odataObject.ImageZones.length; i++) {
                            if (odataObject.ImageZones[i] != null) {
                                if (odataObject.ImageZones[i]['@odata.type'] != null) {
                                    var className = odataObject.ImageZones[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ImageZones[i] = new Commerce.Proxy.Entities[className](odataObject.ImageZones[i]);
                                    }
                                }
                                else {
                                    this.ImageZones[i] = new ImageZoneClass(odataObject.ImageZones[i]);
                                }
                            }
                            else {
                                this.ImageZones[i] = undefined;
                            }
                        }
                    }
                    this.ReportZones = undefined;
                    if (odataObject.ReportZones) {
                        this.ReportZones = [];
                        for (var i = 0; i < odataObject.ReportZones.length; i++) {
                            if (odataObject.ReportZones[i] != null) {
                                if (odataObject.ReportZones[i]['@odata.type'] != null) {
                                    var className = odataObject.ReportZones[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ReportZones[i] = new Commerce.Proxy.Entities[className](odataObject.ReportZones[i]);
                                    }
                                }
                                else {
                                    this.ReportZones[i] = new ReportZoneClass(odataObject.ReportZones[i]);
                                }
                            }
                            else {
                                this.ReportZones[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return TillLayoutClass;
            }());
            Entities.TillLayoutClass = TillLayoutClass;
            var SalesInvoiceClass = (function () {
                function SalesInvoiceClass(odataObject) {
                    odataObject = odataObject || {};
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.Id = odataObject.Id;
                    this.SalesId = odataObject.SalesId;
                    this.SalesType = odataObject.SalesType;
                    this.InvoiceDate = (odataObject.InvoiceDate instanceof Date) ? odataObject.InvoiceDate
                        : (odataObject.InvoiceDate != null) ? OData.jsonLightReadStringPropertyValue(odataObject.InvoiceDate, "Edm.DateTimeOffset", false) : undefined;
                    this.CurrencyCode = odataObject.CurrencyCode;
                    this.Amount = (odataObject.Amount != null) ? parseFloat(odataObject.Amount) : undefined;
                    this.AmountPaid = (odataObject.AmountPaid != null) ? parseFloat(odataObject.AmountPaid) : undefined;
                    this.Account = odataObject.Account;
                    this.Name = odataObject.Name;
                    this.TotalManualDiscountPercentage = (odataObject.TotalManualDiscountPercentage != null) ? parseFloat(odataObject.TotalManualDiscountPercentage) : undefined;
                    this.TotalManualDiscountAmount = (odataObject.TotalManualDiscountAmount != null) ? parseFloat(odataObject.TotalManualDiscountAmount) : undefined;
                    this.SalesInvoiceLine = undefined;
                    if (odataObject.SalesInvoiceLine) {
                        this.SalesInvoiceLine = [];
                        for (var i = 0; i < odataObject.SalesInvoiceLine.length; i++) {
                            if (odataObject.SalesInvoiceLine[i] != null) {
                                if (odataObject.SalesInvoiceLine[i]['@odata.type'] != null) {
                                    var className = odataObject.SalesInvoiceLine[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.SalesInvoiceLine[i] = new Commerce.Proxy.Entities[className](odataObject.SalesInvoiceLine[i]);
                                    }
                                }
                                else {
                                    this.SalesInvoiceLine[i] = new SalesInvoiceLineClass(odataObject.SalesInvoiceLine[i]);
                                }
                            }
                            else {
                                this.SalesInvoiceLine[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return SalesInvoiceClass;
            }());
            Entities.SalesInvoiceClass = SalesInvoiceClass;
            var OrderInvoiceClass = (function () {
                function OrderInvoiceClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Id = odataObject.Id;
                    this.CustomerAccountNumber = odataObject.CustomerAccountNumber;
                    this.CustomerName = odataObject.CustomerName;
                    this.InvoiceDate = (odataObject.InvoiceDate instanceof Date) ? odataObject.InvoiceDate
                        : (odataObject.InvoiceDate != null) ? OData.jsonLightReadStringPropertyValue(odataObject.InvoiceDate, "Edm.DateTimeOffset", false) : undefined;
                    this.TotalAmount = (odataObject.TotalAmount != null) ? parseFloat(odataObject.TotalAmount) : undefined;
                    this.AmountPaid = (odataObject.AmountPaid != null) ? parseFloat(odataObject.AmountPaid) : undefined;
                    this.AmountBalance = (odataObject.AmountBalance != null) ? parseFloat(odataObject.AmountBalance) : undefined;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return OrderInvoiceClass;
            }());
            Entities.OrderInvoiceClass = OrderInvoiceClass;
            var TaxOverrideClass = (function () {
                function TaxOverrideClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Code = odataObject.Code;
                    this.SourceTaxGroup = odataObject.SourceTaxGroup;
                    this.DestinationTaxGroup = odataObject.DestinationTaxGroup;
                    this.SourceItemTaxGroup = odataObject.SourceItemTaxGroup;
                    this.DestinationItemTaxGroup = odataObject.DestinationItemTaxGroup;
                    this.ChannelId = (odataObject.ChannelId != null) ? parseInt(odataObject.ChannelId, 10) : undefined;
                    this.AdditionalDescription = odataObject.AdditionalDescription;
                    this.Status = odataObject.Status;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return TaxOverrideClass;
            }());
            Entities.TaxOverrideClass = TaxOverrideClass;
            var TenderTypeClass = (function () {
                function TenderTypeClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Function = odataObject.Function;
                    this.TenderTypeId = odataObject.TenderTypeId;
                    this.Name = odataObject.Name;
                    this.OperationId = odataObject.OperationId;
                    this.OperationName = odataObject.OperationName;
                    this.ChangeTenderTypeId = odataObject.ChangeTenderTypeId;
                    this.AboveMinimumChangeAmount = (odataObject.AboveMinimumChangeAmount != null) ? parseFloat(odataObject.AboveMinimumChangeAmount) : undefined;
                    this.AboveMinimumChangeTenderTypeId = odataObject.AboveMinimumChangeTenderTypeId;
                    this.OpenDrawer = odataObject.OpenDrawer;
                    this.UseSignatureCaptureDevice = odataObject.UseSignatureCaptureDevice;
                    this.MinimumSignatureCaptureAmount = (odataObject.MinimumSignatureCaptureAmount != null) ? parseFloat(odataObject.MinimumSignatureCaptureAmount) : undefined;
                    this.IsOvertenderAllowed = odataObject.IsOvertenderAllowed;
                    this.IsUndertenderAllowed = odataObject.IsUndertenderAllowed;
                    this.MaximumOvertenderAmount = (odataObject.MaximumOvertenderAmount != null) ? parseFloat(odataObject.MaximumOvertenderAmount) : undefined;
                    this.MaximumUndertenderAmount = (odataObject.MaximumUndertenderAmount != null) ? parseFloat(odataObject.MaximumUndertenderAmount) : undefined;
                    this.MaximumAmountPerTransaction = (odataObject.MaximumAmountPerTransaction != null) ? parseFloat(odataObject.MaximumAmountPerTransaction) : undefined;
                    this.MaximumAmountPerLine = (odataObject.MaximumAmountPerLine != null) ? parseFloat(odataObject.MaximumAmountPerLine) : undefined;
                    this.MinimumAmountPerTransaction = (odataObject.MinimumAmountPerTransaction != null) ? parseFloat(odataObject.MinimumAmountPerTransaction) : undefined;
                    this.MinimumAmountPerLine = (odataObject.MinimumAmountPerLine != null) ? parseFloat(odataObject.MinimumAmountPerLine) : undefined;
                    this.RoundOff = (odataObject.RoundOff != null) ? parseFloat(odataObject.RoundOff) : undefined;
                    this.CountingRequired = odataObject.CountingRequired;
                    this.TakenToBank = odataObject.TakenToBank;
                    this.TakenToSafe = odataObject.TakenToSafe;
                    this.ConnectorId = odataObject.ConnectorId;
                    this.GiftCardItem = odataObject.GiftCardItem;
                    this.HideCardInputDetails = odataObject.HideCardInputDetails;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return TenderTypeClass;
            }());
            Entities.TenderTypeClass = TenderTypeClass;
            var ReasonCodeClass = (function () {
                function ReasonCodeClass(odataObject) {
                    odataObject = odataObject || {};
                    this.InputRequired = odataObject.InputRequired;
                    this.LinkedReasonCodeId = odataObject.LinkedReasonCodeId;
                    this.MaximumLength = odataObject.MaximumLength;
                    this.MaximumValue = (odataObject.MaximumValue != null) ? parseFloat(odataObject.MaximumValue) : undefined;
                    this.MinimumLength = odataObject.MinimumLength;
                    this.MinimumValue = (odataObject.MinimumValue != null) ? parseFloat(odataObject.MinimumValue) : undefined;
                    this.OncePerTransaction = odataObject.OncePerTransaction;
                    this.PrintInputNameOnReceipt = odataObject.PrintInputNameOnReceipt;
                    this.PrintInputToReceipt = odataObject.PrintInputToReceipt;
                    this.PrintPromptToReceipt = odataObject.PrintPromptToReceipt;
                    this.Prompt = odataObject.Prompt;
                    this.RandomFactor = (odataObject.RandomFactor != null) ? parseFloat(odataObject.RandomFactor) : undefined;
                    this.RetailUseReasonCode = odataObject.RetailUseReasonCode;
                    this.ReasonCodeId = odataObject.ReasonCodeId;
                    this.Description = odataObject.Description;
                    this.InputTypeValue = odataObject.InputTypeValue;
                    this.ActivityValue = odataObject.ActivityValue;
                    this.ReasonSubCodes = undefined;
                    if (odataObject.ReasonSubCodes) {
                        this.ReasonSubCodes = [];
                        for (var i = 0; i < odataObject.ReasonSubCodes.length; i++) {
                            if (odataObject.ReasonSubCodes[i] != null) {
                                if (odataObject.ReasonSubCodes[i]['@odata.type'] != null) {
                                    var className = odataObject.ReasonSubCodes[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ReasonSubCodes[i] = new Commerce.Proxy.Entities[className](odataObject.ReasonSubCodes[i]);
                                    }
                                }
                                else {
                                    this.ReasonSubCodes[i] = new ReasonSubCodeClass(odataObject.ReasonSubCodes[i]);
                                }
                            }
                            else {
                                this.ReasonSubCodes[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ReasonCodeClass;
            }());
            Entities.ReasonCodeClass = ReasonCodeClass;
            var ReportDataSetClass = (function () {
                function ReportDataSetClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ReportId = odataObject.ReportId;
                    this.Parameters = undefined;
                    if (odataObject.Parameters) {
                        this.Parameters = [];
                        for (var i = 0; i < odataObject.Parameters.length; i++) {
                            if (odataObject.Parameters[i] != null) {
                                if (odataObject.Parameters[i]['@odata.type'] != null) {
                                    var className = odataObject.Parameters[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.Parameters[i] = new Commerce.Proxy.Entities[className](odataObject.Parameters[i]);
                                    }
                                }
                                else {
                                    this.Parameters[i] = new CommercePropertyClass(odataObject.Parameters[i]);
                                }
                            }
                            else {
                                this.Parameters[i] = undefined;
                            }
                        }
                    }
                    this.Locale = odataObject.Locale;
                    this.Output = undefined;
                    if (odataObject.Output) {
                        this.Output = [];
                        for (var i = 0; i < odataObject.Output.length; i++) {
                            if (odataObject.Output[i] != null) {
                                if (odataObject.Output[i]['@odata.type'] != null) {
                                    var className = odataObject.Output[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.Output[i] = new Commerce.Proxy.Entities[className](odataObject.Output[i]);
                                    }
                                }
                                else {
                                    this.Output[i] = new ReportRowClass(odataObject.Output[i]);
                                }
                            }
                            else {
                                this.Output[i] = undefined;
                            }
                        }
                    }
                    this.HasTotalRow = odataObject.HasTotalRow;
                    this.HasDisclaimer = odataObject.HasDisclaimer;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ReportDataSetClass;
            }());
            Entities.ReportDataSetClass = ReportDataSetClass;
            var ZipCodeInfoClass = (function () {
                function ZipCodeInfoClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ZipPostalCode = odataObject.ZipPostalCode;
                    this.StreetName = odataObject.StreetName;
                    this.TimeZone = odataObject.TimeZone;
                    this.CountryRegionId = odataObject.CountryRegionId;
                    this.StateId = odataObject.StateId;
                    this.CountyId = odataObject.CountyId;
                    this.CityName = odataObject.CityName;
                    this.CityAlias = odataObject.CityAlias;
                    this.District = odataObject.District;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ZipCodeInfoClass;
            }());
            Entities.ZipCodeInfoClass = ZipCodeInfoClass;
            var ReasonCodeRequirementClass = (function () {
                function ReasonCodeRequirementClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ReasonCodeId = odataObject.ReasonCodeId;
                    this.SourceId = odataObject.SourceId;
                    this.TableRefTypeValue = odataObject.TableRefTypeValue;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ReasonCodeRequirementClass;
            }());
            Entities.ReasonCodeRequirementClass = ReasonCodeRequirementClass;
            var QueryResultSettingsClass = (function () {
                function QueryResultSettingsClass(odataObject) {
                    odataObject = odataObject || {};
                    if (odataObject.Paging == null) {
                        this.Paging = undefined;
                    }
                    else if (odataObject.Paging['@odata.type'] == null) {
                        this.Paging = new PagingInfoClass(odataObject.Paging);
                    }
                    else {
                        var className = odataObject.Paging['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.Paging = new Commerce.Proxy.Entities[className](odataObject.Paging);
                        }
                    }
                    if (odataObject.Sorting == null) {
                        this.Sorting = undefined;
                    }
                    else if (odataObject.Sorting['@odata.type'] == null) {
                        this.Sorting = new SortingInfoClass(odataObject.Sorting);
                    }
                    else {
                        var className = odataObject.Sorting['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.Sorting = new Commerce.Proxy.Entities[className](odataObject.Sorting);
                        }
                    }
                }
                return QueryResultSettingsClass;
            }());
            Entities.QueryResultSettingsClass = QueryResultSettingsClass;
            var SortingInfoClass = (function () {
                function SortingInfoClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Columns = undefined;
                    if (odataObject.Columns) {
                        this.Columns = [];
                        for (var i = 0; i < odataObject.Columns.length; i++) {
                            if (odataObject.Columns[i] != null) {
                                if (odataObject.Columns[i]['@odata.type'] != null) {
                                    var className = odataObject.Columns[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.Columns[i] = new Commerce.Proxy.Entities[className](odataObject.Columns[i]);
                                    }
                                }
                                else {
                                    this.Columns[i] = new SortColumnClass(odataObject.Columns[i]);
                                }
                            }
                            else {
                                this.Columns[i] = undefined;
                            }
                        }
                    }
                }
                return SortingInfoClass;
            }());
            Entities.SortingInfoClass = SortingInfoClass;
            var SortColumnClass = (function () {
                function SortColumnClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ColumnName = odataObject.ColumnName;
                    this.IsDescending = odataObject.IsDescending;
                }
                return SortColumnClass;
            }());
            Entities.SortColumnClass = SortColumnClass;
            var PagingInfoClass = (function () {
                function PagingInfoClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Top = (odataObject.Top != null) ? parseInt(odataObject.Top, 10) : undefined;
                    this.Skip = (odataObject.Skip != null) ? parseInt(odataObject.Skip, 10) : undefined;
                }
                return PagingInfoClass;
            }());
            Entities.PagingInfoClass = PagingInfoClass;
            var ProductPropertyTranslationClass = (function () {
                function ProductPropertyTranslationClass(odataObject) {
                    odataObject = odataObject || {};
                    this.TranslationLanguage = odataObject.TranslationLanguage;
                    this.TranslatedProperties = undefined;
                    if (odataObject.TranslatedProperties) {
                        this.TranslatedProperties = [];
                        for (var i = 0; i < odataObject.TranslatedProperties.length; i++) {
                            if (odataObject.TranslatedProperties[i] != null) {
                                if (odataObject.TranslatedProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.TranslatedProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.TranslatedProperties[i] = new Commerce.Proxy.Entities[className](odataObject.TranslatedProperties[i]);
                                    }
                                }
                                else {
                                    this.TranslatedProperties[i] = new ProductPropertyClass(odataObject.TranslatedProperties[i]);
                                }
                            }
                            else {
                                this.TranslatedProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ProductPropertyTranslationClass;
            }());
            Entities.ProductPropertyTranslationClass = ProductPropertyTranslationClass;
            var NumberSequenceSeedDataClass = (function () {
                function NumberSequenceSeedDataClass(odataObject) {
                    odataObject = odataObject || {};
                    this.DataTypeValue = odataObject.DataTypeValue;
                    this.DataValue = (odataObject.DataValue != null) ? parseInt(odataObject.DataValue, 10) : undefined;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return NumberSequenceSeedDataClass;
            }());
            Entities.NumberSequenceSeedDataClass = NumberSequenceSeedDataClass;
            var DeviceActivationResultClass = (function () {
                function DeviceActivationResultClass(odataObject) {
                    odataObject = odataObject || {};
                    if (odataObject.Device == null) {
                        this.Device = undefined;
                    }
                    else if (odataObject.Device['@odata.type'] == null) {
                        this.Device = new DeviceClass(odataObject.Device);
                    }
                    else {
                        var className = odataObject.Device['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.Device = new Commerce.Proxy.Entities[className](odataObject.Device);
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return DeviceActivationResultClass;
            }());
            Entities.DeviceActivationResultClass = DeviceActivationResultClass;
            var PurchaseHistoryClass = (function () {
                function PurchaseHistoryClass(odataObject) {
                    odataObject = odataObject || {};
                    this.DatePurchased = (odataObject.DatePurchased instanceof Date) ? odataObject.DatePurchased
                        : (odataObject.DatePurchased != null) ? OData.jsonLightReadStringPropertyValue(odataObject.DatePurchased, "Edm.DateTimeOffset", false) : undefined;
                    this.ImageUrl = odataObject.ImageUrl;
                    this.ItemId = odataObject.ItemId;
                    this.ProductId = (odataObject.ProductId != null) ? parseInt(odataObject.ProductId, 10) : undefined;
                    this.ProductName = odataObject.ProductName;
                    this.ReceiptId = odataObject.ReceiptId;
                    this.SalesId = odataObject.SalesId;
                    this.ChannelId = (odataObject.ChannelId != null) ? parseInt(odataObject.ChannelId, 10) : undefined;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return PurchaseHistoryClass;
            }());
            Entities.PurchaseHistoryClass = PurchaseHistoryClass;
            var NodeClass = (function () {
                function NodeClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ParentScopeId = odataObject.ParentScopeId;
                    this.ParentSequence = odataObject.ParentSequence;
                    this.Id = odataObject.Id;
                    this.Sequence = odataObject.Sequence;
                    this.Description = odataObject.Description;
                    this.ScreenshotUri = odataObject.ScreenshotUri;
                }
                return NodeClass;
            }());
            Entities.NodeClass = NodeClass;
            var LineClass = (function () {
                function LineClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ChildrenIds = undefined;
                    if (odataObject.ChildrenIds) {
                        this.ChildrenIds = [];
                        for (var i = 0; i < odataObject.ChildrenIds.length; i++) {
                            if (odataObject.ChildrenIds[i] != null) {
                                this.ChildrenIds[i] = parseInt(odataObject.ChildrenIds[i], 10);
                            }
                            else {
                                this.ChildrenIds[i] = undefined;
                            }
                        }
                    }
                    this.Id = (odataObject.Id != null) ? parseInt(odataObject.Id, 10) : undefined;
                    this.Name = odataObject.Name;
                    this.Description = odataObject.Description;
                    this.IsLinked = odataObject.IsLinked;
                    this.LineMetadataId = (odataObject.LineMetadataId != null) ? parseInt(odataObject.LineMetadataId, 10) : undefined;
                    this.Artifacts = undefined;
                    if (odataObject.Artifacts) {
                        this.Artifacts = [];
                        for (var i = 0; i < odataObject.Artifacts.length; i++) {
                            if (odataObject.Artifacts[i] != null) {
                                if (odataObject.Artifacts[i]['@odata.type'] != null) {
                                    var className = odataObject.Artifacts[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.Artifacts[i] = new Commerce.Proxy.Entities[className](odataObject.Artifacts[i]);
                                    }
                                }
                                else {
                                    this.Artifacts[i] = new ArtifactSummaryClass(odataObject.Artifacts[i]);
                                }
                            }
                            else {
                                this.Artifacts[i] = undefined;
                            }
                        }
                    }
                    this.MetadataPropertyValues = undefined;
                    if (odataObject.MetadataPropertyValues) {
                        this.MetadataPropertyValues = [];
                        for (var i = 0; i < odataObject.MetadataPropertyValues.length; i++) {
                            if (odataObject.MetadataPropertyValues[i] != null) {
                                if (odataObject.MetadataPropertyValues[i]['@odata.type'] != null) {
                                    var className = odataObject.MetadataPropertyValues[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.MetadataPropertyValues[i] = new Commerce.Proxy.Entities[className](odataObject.MetadataPropertyValues[i]);
                                    }
                                }
                                else {
                                    this.MetadataPropertyValues[i] = new MetadataPropertyValueClass(odataObject.MetadataPropertyValues[i]);
                                }
                            }
                            else {
                                this.MetadataPropertyValues[i] = undefined;
                            }
                        }
                    }
                }
                return LineClass;
            }());
            Entities.LineClass = LineClass;
            var ScopeClass = (function (_super) {
                __extends(ScopeClass, _super);
                function ScopeClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.Name = odataObject.Name;
                    _this.ScopeTypeValue = odataObject.ScopeTypeValue;
                    _this.Children = undefined;
                    if (odataObject.Children) {
                        _this.Children = [];
                        for (var i = 0; i < odataObject.Children.length; i++) {
                            if (odataObject.Children[i] != null) {
                                if (odataObject.Children[i]['@odata.type'] != null) {
                                    var className = odataObject.Children[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        _this.Children[i] = new Commerce.Proxy.Entities[className](odataObject.Children[i]);
                                    }
                                }
                                else {
                                    _this.Children[i] = new NodeClass(odataObject.Children[i]);
                                }
                            }
                            else {
                                _this.Children[i] = undefined;
                            }
                        }
                    }
                    _this.ActiveCount = odataObject.ActiveCount;
                    _this.IsForm = odataObject.IsForm;
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.Scope";
                    return _this;
                }
                return ScopeClass;
            }(NodeClass));
            Entities.ScopeClass = ScopeClass;
            var FrameworkClass = (function () {
                function FrameworkClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Lines = undefined;
                    if (odataObject.Lines) {
                        this.Lines = [];
                        for (var i = 0; i < odataObject.Lines.length; i++) {
                            if (odataObject.Lines[i] != null) {
                                if (odataObject.Lines[i]['@odata.type'] != null) {
                                    var className = odataObject.Lines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.Lines[i] = new Commerce.Proxy.Entities[className](odataObject.Lines[i]);
                                    }
                                }
                                else {
                                    this.Lines[i] = new LineClass(odataObject.Lines[i]);
                                }
                            }
                            else {
                                this.Lines[i] = undefined;
                            }
                        }
                    }
                    this.Id = (odataObject.Id != null) ? parseInt(odataObject.Id, 10) : undefined;
                    this.Name = odataObject.Name;
                    this.Access = odataObject.Access;
                    this.Hierarchy = undefined;
                    if (odataObject.Hierarchy) {
                        this.Hierarchy = [];
                        for (var i = 0; i < odataObject.Hierarchy.length; i++) {
                            if (odataObject.Hierarchy[i] != null) {
                                if (odataObject.Hierarchy[i]['@odata.type'] != null) {
                                    var className = odataObject.Hierarchy[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.Hierarchy[i] = new Commerce.Proxy.Entities[className](odataObject.Hierarchy[i]);
                                    }
                                }
                                else {
                                    this.Hierarchy[i] = new LineClass(odataObject.Hierarchy[i]);
                                }
                            }
                            else {
                                this.Hierarchy[i] = undefined;
                            }
                        }
                    }
                    this.Publisher = odataObject.Publisher;
                }
                return FrameworkClass;
            }());
            Entities.FrameworkClass = FrameworkClass;
            var UserActionClass = (function (_super) {
                __extends(UserActionClass, _super);
                function UserActionClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.SystemGenerated = odataObject.SystemGenerated;
                    _this.GlobalId = odataObject.GlobalId;
                    _this.Annotations = undefined;
                    if (odataObject.Annotations) {
                        _this.Annotations = [];
                        for (var i = 0; i < odataObject.Annotations.length; i++) {
                            if (odataObject.Annotations[i] != null) {
                                if (odataObject.Annotations[i]['@odata.type'] != null) {
                                    var className = odataObject.Annotations[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        _this.Annotations[i] = new Commerce.Proxy.Entities[className](odataObject.Annotations[i]);
                                    }
                                }
                                else {
                                    _this.Annotations[i] = new AnnotationClass(odataObject.Annotations[i]);
                                }
                            }
                            else {
                                _this.Annotations[i] = undefined;
                            }
                        }
                    }
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.UserAction";
                    return _this;
                }
                return UserActionClass;
            }(NodeClass));
            Entities.UserActionClass = UserActionClass;
            var TaskUserActionClass = (function (_super) {
                __extends(TaskUserActionClass, _super);
                function TaskUserActionClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.UserActionTypeValue = odataObject.UserActionTypeValue;
                    _this.Name = odataObject.Name;
                    _this.Comment = odataObject.Comment;
                    _this.TaskId = odataObject.TaskId;
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.TaskUserAction";
                    return _this;
                }
                return TaskUserActionClass;
            }(UserActionClass));
            Entities.TaskUserActionClass = TaskUserActionClass;
            var FormUserActionClass = (function (_super) {
                __extends(FormUserActionClass, _super);
                function FormUserActionClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.FormId = odataObject.FormId;
                    _this.ControlLabel = odataObject.ControlLabel;
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.FormUserAction";
                    return _this;
                }
                return FormUserActionClass;
            }(UserActionClass));
            Entities.FormUserActionClass = FormUserActionClass;
            var CommandUserActionClass = (function (_super) {
                __extends(CommandUserActionClass, _super);
                function CommandUserActionClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.ReturnTypeValue = odataObject.ReturnTypeValue;
                    _this.CommandName = odataObject.CommandName;
                    _this.ControlName = odataObject.ControlName;
                    _this.ControlType = odataObject.ControlType;
                    _this.Arguments = undefined;
                    if (odataObject.Arguments) {
                        _this.Arguments = [];
                        for (var i = 0; i < odataObject.Arguments.length; i++) {
                            if (odataObject.Arguments[i] != null) {
                                if (odataObject.Arguments[i]['@odata.type'] != null) {
                                    var className = odataObject.Arguments[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        _this.Arguments[i] = new Commerce.Proxy.Entities[className](odataObject.Arguments[i]);
                                    }
                                }
                                else {
                                    _this.Arguments[i] = new CommandArgumentClass(odataObject.Arguments[i]);
                                }
                            }
                            else {
                                _this.Arguments[i] = undefined;
                            }
                        }
                    }
                    _this.LabelId = odataObject.LabelId;
                    _this.ReturnValue = odataObject.ReturnValue;
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.CommandUserAction";
                    return _this;
                }
                return CommandUserActionClass;
            }(FormUserActionClass));
            Entities.CommandUserActionClass = CommandUserActionClass;
            var AnnotationClass = (function () {
                function AnnotationClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Description = odataObject.Description;
                }
                return AnnotationClass;
            }());
            Entities.AnnotationClass = AnnotationClass;
            var RecordingClass = (function () {
                function RecordingClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Scopes = undefined;
                    if (odataObject.Scopes) {
                        this.Scopes = [];
                        for (var i = 0; i < odataObject.Scopes.length; i++) {
                            if (odataObject.Scopes[i] != null) {
                                if (odataObject.Scopes[i]['@odata.type'] != null) {
                                    var className = odataObject.Scopes[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.Scopes[i] = new Commerce.Proxy.Entities[className](odataObject.Scopes[i]);
                                    }
                                }
                                else {
                                    this.Scopes[i] = new ScopeClass(odataObject.Scopes[i]);
                                }
                            }
                            else {
                                this.Scopes[i] = undefined;
                            }
                        }
                    }
                    this.FormContextEntries = undefined;
                    if (odataObject.FormContextEntries) {
                        this.FormContextEntries = [];
                        for (var i = 0; i < odataObject.FormContextEntries.length; i++) {
                            if (odataObject.FormContextEntries[i] != null) {
                                if (odataObject.FormContextEntries[i]['@odata.type'] != null) {
                                    var className = odataObject.FormContextEntries[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.FormContextEntries[i] = new Commerce.Proxy.Entities[className](odataObject.FormContextEntries[i]);
                                    }
                                }
                                else {
                                    this.FormContextEntries[i] = new FormContextDictionaryEntryClass(odataObject.FormContextEntries[i]);
                                }
                            }
                            else {
                                this.FormContextEntries[i] = undefined;
                            }
                        }
                    }
                    if (odataObject.RootScope == null) {
                        this.RootScope = undefined;
                    }
                    else if (odataObject.RootScope['@odata.type'] == null) {
                        this.RootScope = new ScopeClass(odataObject.RootScope);
                    }
                    else {
                        var className = odataObject.RootScope['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.RootScope = new Commerce.Proxy.Entities[className](odataObject.RootScope);
                        }
                    }
                    this.Name = odataObject.Name;
                    this.Description = odataObject.Description;
                }
                return RecordingClass;
            }());
            Entities.RecordingClass = RecordingClass;
            var FormContextDictionaryEntryClass = (function () {
                function FormContextDictionaryEntryClass(odataObject) {
                    odataObject = odataObject || {};
                    this.FormId = odataObject.FormId;
                    if (odataObject.FormContext == null) {
                        this.FormContext = undefined;
                    }
                    else if (odataObject.FormContext['@odata.type'] == null) {
                        this.FormContext = new FormContextClass(odataObject.FormContext);
                    }
                    else {
                        var className = odataObject.FormContext['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.FormContext = new Commerce.Proxy.Entities[className](odataObject.FormContext);
                        }
                    }
                }
                return FormContextDictionaryEntryClass;
            }());
            Entities.FormContextDictionaryEntryClass = FormContextDictionaryEntryClass;
            var ProductVariantResolutionContextClass = (function () {
                function ProductVariantResolutionContextClass(odataObject) {
                    odataObject = odataObject || {};
                }
                return ProductVariantResolutionContextClass;
            }());
            Entities.ProductVariantResolutionContextClass = ProductVariantResolutionContextClass;
            var ProductVariantResolutionOnKitSelectionContextClass = (function (_super) {
                __extends(ProductVariantResolutionOnKitSelectionContextClass, _super);
                function ProductVariantResolutionOnKitSelectionContextClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.SelectedComponents = undefined;
                    if (odataObject.SelectedComponents) {
                        _this.SelectedComponents = [];
                        for (var i = 0; i < odataObject.SelectedComponents.length; i++) {
                            if (odataObject.SelectedComponents[i] != null) {
                                if (odataObject.SelectedComponents[i]['@odata.type'] != null) {
                                    var className = odataObject.SelectedComponents[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        _this.SelectedComponents[i] = new Commerce.Proxy.Entities[className](odataObject.SelectedComponents[i]);
                                    }
                                }
                                else {
                                    _this.SelectedComponents[i] = new ComponentInSlotRelationClass(odataObject.SelectedComponents[i]);
                                }
                            }
                            else {
                                _this.SelectedComponents[i] = undefined;
                            }
                        }
                    }
                    _this.SlotId = (odataObject.SlotId != null) ? parseInt(odataObject.SlotId, 10) : undefined;
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.ProductVariantResolutionOnKitSelectionContext";
                    return _this;
                }
                return ProductVariantResolutionOnKitSelectionContextClass;
            }(ProductVariantResolutionContextClass));
            Entities.ProductVariantResolutionOnKitSelectionContextClass = ProductVariantResolutionOnKitSelectionContextClass;
            var WarehouseLocationClass = (function () {
                function WarehouseLocationClass(odataObject) {
                    odataObject = odataObject || {};
                    this.LocationId = odataObject.LocationId;
                    this.IsLicensePlateControlled = odataObject.IsLicensePlateControlled;
                    this.ProfileId = odataObject.ProfileId;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return WarehouseLocationClass;
            }());
            Entities.WarehouseLocationClass = WarehouseLocationClass;
            var FiscalTransactionClass = (function () {
                function FiscalTransactionClass(odataObject) {
                    odataObject = odataObject || {};
                    this.CreatedDateTime = (odataObject.CreatedDateTime instanceof Date) ? odataObject.CreatedDateTime
                        : (odataObject.CreatedDateTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.CreatedDateTime, "Edm.DateTimeOffset", false) : undefined;
                    this.StoreId = odataObject.StoreId;
                    this.TerminalId = odataObject.TerminalId;
                    this.TransactionId = odataObject.TransactionId;
                    this.TransDateTime = (odataObject.TransDateTime instanceof Date) ? odataObject.TransDateTime
                        : (odataObject.TransDateTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.TransDateTime, "Edm.DateTimeOffset", false) : undefined;
                    this.LineNumber = (odataObject.LineNumber != null) ? parseFloat(odataObject.LineNumber) : undefined;
                    this.RegisterResponse = odataObject.RegisterResponse;
                    this.ReceiptCopy = odataObject.ReceiptCopy;
                    this.RecordGUID = odataObject.RecordGUID;
                    this.RegisterStoreId = odataObject.RegisterStoreId;
                    this.RegisterTerminalId = odataObject.RegisterTerminalId;
                    this.StaffId = odataObject.StaffId;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return FiscalTransactionClass;
            }());
            Entities.FiscalTransactionClass = FiscalTransactionClass;
            var FulfillmentLineClass = (function () {
                function FulfillmentLineClass(odataObject) {
                    odataObject = odataObject || {};
                    this.SalesId = odataObject.SalesId;
                    this.SalesPersonStoreId = odataObject.SalesPersonStoreId;
                    this.SalesPersonId = odataObject.SalesPersonId;
                    this.SalesPersonFirstName = odataObject.SalesPersonFirstName;
                    this.SalesPersonLastName = odataObject.SalesPersonLastName;
                    this.SalesLineNumber = (odataObject.SalesLineNumber != null) ? parseFloat(odataObject.SalesLineNumber) : undefined;
                    this.ReceiptId = odataObject.ReceiptId;
                    this.ChannelReferenceId = odataObject.ChannelReferenceId;
                    this.CustomerId = odataObject.CustomerId;
                    this.CustomerName = odataObject.CustomerName;
                    this.EmailAddress = odataObject.EmailAddress;
                    this.DeliveryModeCode = odataObject.DeliveryModeCode;
                    this.DocumentStatusValue = odataObject.DocumentStatusValue;
                    if (odataObject.FulfillmentDeliveryType == null) {
                        this.FulfillmentDeliveryType = undefined;
                    }
                    else if (odataObject.FulfillmentDeliveryType['@odata.type'] == null) {
                        this.FulfillmentDeliveryType = new FulfillmentLineDeliveryTypeClass(odataObject.FulfillmentDeliveryType);
                    }
                    else {
                        var className = odataObject.FulfillmentDeliveryType['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.FulfillmentDeliveryType = new Commerce.Proxy.Entities[className](odataObject.FulfillmentDeliveryType);
                        }
                    }
                    this.DeliveryTypeValue = odataObject.DeliveryTypeValue;
                    this.QuantityOrdered = (odataObject.QuantityOrdered != null) ? parseFloat(odataObject.QuantityOrdered) : undefined;
                    this.QuantityPicked = (odataObject.QuantityPicked != null) ? parseFloat(odataObject.QuantityPicked) : undefined;
                    this.QuantityPacked = (odataObject.QuantityPacked != null) ? parseFloat(odataObject.QuantityPacked) : undefined;
                    this.QuantityInvoiced = (odataObject.QuantityInvoiced != null) ? parseFloat(odataObject.QuantityInvoiced) : undefined;
                    this.StoreInventoryTotalQuantity = (odataObject.StoreInventoryTotalQuantity != null) ? parseFloat(odataObject.StoreInventoryTotalQuantity) : undefined;
                    this.StoreInventoryReservedQuantity = (odataObject.StoreInventoryReservedQuantity != null) ? parseFloat(odataObject.StoreInventoryReservedQuantity) : undefined;
                    this.StoreInventoryOrderedQuantity = (odataObject.StoreInventoryOrderedQuantity != null) ? parseFloat(odataObject.StoreInventoryOrderedQuantity) : undefined;
                    this.ItemId = odataObject.ItemId;
                    this.ProductId = (odataObject.ProductId != null) ? parseInt(odataObject.ProductId, 10) : undefined;
                    this.ProductVariant = odataObject.ProductVariant;
                    this.ItemName = odataObject.ItemName;
                    if (odataObject.FulfillmentStatus == null) {
                        this.FulfillmentStatus = undefined;
                    }
                    else if (odataObject.FulfillmentStatus['@odata.type'] == null) {
                        this.FulfillmentStatus = new FulfillmentLineStatusClass(odataObject.FulfillmentStatus);
                    }
                    else {
                        var className = odataObject.FulfillmentStatus['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.FulfillmentStatus = new Commerce.Proxy.Entities[className](odataObject.FulfillmentStatus);
                        }
                    }
                    this.FulfillmentStatusValue = odataObject.FulfillmentStatusValue;
                    this.UnitOfMeasureSymbol = odataObject.UnitOfMeasureSymbol;
                    this.RequestedShipDate = (odataObject.RequestedShipDate instanceof Date) ? odataObject.RequestedShipDate
                        : (odataObject.RequestedShipDate != null) ? OData.jsonLightReadStringPropertyValue(odataObject.RequestedShipDate, "Edm.DateTimeOffset", false) : undefined;
                    this.RequestedDeliveryDate = (odataObject.RequestedDeliveryDate instanceof Date) ? odataObject.RequestedDeliveryDate
                        : (odataObject.RequestedDeliveryDate != null) ? OData.jsonLightReadStringPropertyValue(odataObject.RequestedDeliveryDate, "Edm.DateTimeOffset", false) : undefined;
                    this.RequestedReceiptDate = (odataObject.RequestedReceiptDate instanceof Date) ? odataObject.RequestedReceiptDate
                        : (odataObject.RequestedReceiptDate != null) ? OData.jsonLightReadStringPropertyValue(odataObject.RequestedReceiptDate, "Edm.DateTimeOffset", false) : undefined;
                    this.CreatedDate = (odataObject.CreatedDate instanceof Date) ? odataObject.CreatedDate
                        : (odataObject.CreatedDate != null) ? OData.jsonLightReadStringPropertyValue(odataObject.CreatedDate, "Edm.DateTimeOffset", false) : undefined;
                    this.TotalAmount = (odataObject.TotalAmount != null) ? parseFloat(odataObject.TotalAmount) : undefined;
                    this.Balance = (odataObject.Balance != null) ? parseFloat(odataObject.Balance) : undefined;
                    if (odataObject.ShippingAddress == null) {
                        this.ShippingAddress = undefined;
                    }
                    else if (odataObject.ShippingAddress['@odata.type'] == null) {
                        this.ShippingAddress = new AddressClass(odataObject.ShippingAddress);
                    }
                    else {
                        var className = odataObject.ShippingAddress['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.ShippingAddress = new Commerce.Proxy.Entities[className](odataObject.ShippingAddress);
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return FulfillmentLineClass;
            }());
            Entities.FulfillmentLineClass = FulfillmentLineClass;
            var FulfillmentLineSearchCriteriaClass = (function () {
                function FulfillmentLineSearchCriteriaClass(odataObject) {
                    odataObject = odataObject || {};
                    this.CustomerId = odataObject.CustomerId;
                    this.CustomerName = odataObject.CustomerName;
                    this.EmailAddress = odataObject.EmailAddress;
                    this.SalesId = odataObject.SalesId;
                    this.OrderCreatedStartDate = (odataObject.OrderCreatedStartDate instanceof Date) ? odataObject.OrderCreatedStartDate
                        : (odataObject.OrderCreatedStartDate != null) ? OData.jsonLightReadStringPropertyValue(odataObject.OrderCreatedStartDate, "Edm.DateTimeOffset", false) : undefined;
                    this.OrderCreatedEndDate = (odataObject.OrderCreatedEndDate instanceof Date) ? odataObject.OrderCreatedEndDate
                        : (odataObject.OrderCreatedEndDate != null) ? OData.jsonLightReadStringPropertyValue(odataObject.OrderCreatedEndDate, "Edm.DateTimeOffset", false) : undefined;
                    this.ReceiptId = odataObject.ReceiptId;
                    this.StoreId = odataObject.StoreId;
                    this.ChannelReferenceId = odataObject.ChannelReferenceId;
                    this.RequestedReceiptStartDate = (odataObject.RequestedReceiptStartDate instanceof Date) ? odataObject.RequestedReceiptStartDate
                        : (odataObject.RequestedReceiptStartDate != null) ? OData.jsonLightReadStringPropertyValue(odataObject.RequestedReceiptStartDate, "Edm.DateTimeOffset", false) : undefined;
                    this.RequestedReceiptEndDate = (odataObject.RequestedReceiptEndDate instanceof Date) ? odataObject.RequestedReceiptEndDate
                        : (odataObject.RequestedReceiptEndDate != null) ? OData.jsonLightReadStringPropertyValue(odataObject.RequestedReceiptEndDate, "Edm.DateTimeOffset", false) : undefined;
                    this.RequestedDeliveryStartDate = (odataObject.RequestedDeliveryStartDate instanceof Date) ? odataObject.RequestedDeliveryStartDate
                        : (odataObject.RequestedDeliveryStartDate != null) ? OData.jsonLightReadStringPropertyValue(odataObject.RequestedDeliveryStartDate, "Edm.DateTimeOffset", false) : undefined;
                    this.RequestedDeliveryEndDate = (odataObject.RequestedDeliveryEndDate instanceof Date) ? odataObject.RequestedDeliveryEndDate
                        : (odataObject.RequestedDeliveryEndDate != null) ? OData.jsonLightReadStringPropertyValue(odataObject.RequestedDeliveryEndDate, "Edm.DateTimeOffset", false) : undefined;
                    this.FulfillmentStatusValues = undefined;
                    if (odataObject.FulfillmentStatusValues) {
                        this.FulfillmentStatusValues = [];
                        for (var i = 0; i < odataObject.FulfillmentStatusValues.length; i++) {
                            if (odataObject.FulfillmentStatusValues[i] != null) {
                                this.FulfillmentStatusValues[i] = odataObject.FulfillmentStatusValues[i];
                            }
                            else {
                                this.FulfillmentStatusValues[i] = undefined;
                            }
                        }
                    }
                    this.DeliveryModeCode = odataObject.DeliveryModeCode;
                    this.WarehouseId = odataObject.WarehouseId;
                    this.DeliveryTypeValue = odataObject.DeliveryTypeValue;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return FulfillmentLineSearchCriteriaClass;
            }());
            Entities.FulfillmentLineSearchCriteriaClass = FulfillmentLineSearchCriteriaClass;
            var CommentClass = (function () {
                function CommentClass(odataObject) {
                    odataObject = odataObject || {};
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.AuthorStaffId = odataObject.AuthorStaffId;
                    this.AuthorName = odataObject.AuthorName;
                    this.Text = odataObject.Text;
                    this.CreatedDateTime = (odataObject.CreatedDateTime instanceof Date) ? odataObject.CreatedDateTime
                        : (odataObject.CreatedDateTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.CreatedDateTime, "Edm.DateTimeOffset", false) : undefined;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return CommentClass;
            }());
            Entities.CommentClass = CommentClass;
            var MediaLocationClass = (function () {
                function MediaLocationClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Uri = odataObject.Uri;
                    this.AltText = odataObject.AltText;
                    this.IsDefault = odataObject.IsDefault;
                    this.IsSelfHosted = odataObject.IsSelfHosted;
                    this.Priority = odataObject.Priority;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return MediaLocationClass;
            }());
            Entities.MediaLocationClass = MediaLocationClass;
            var EmployeeActivityClass = (function () {
                function EmployeeActivityClass(odataObject) {
                    odataObject = odataObject || {};
                    this.StaffId = odataObject.StaffId;
                    this.StaffName = odataObject.StaffName;
                    this.Activity = odataObject.Activity;
                    this.ActivityDateTimeOffset = (odataObject.ActivityDateTimeOffset instanceof Date) ? odataObject.ActivityDateTimeOffset
                        : (odataObject.ActivityDateTimeOffset != null) ? OData.jsonLightReadStringPropertyValue(odataObject.ActivityDateTimeOffset, "Edm.DateTimeOffset", false) : undefined;
                    this.StoreNumber = odataObject.StoreNumber;
                    this.EmployeeActivityTypeValue = odataObject.EmployeeActivityTypeValue;
                    this.BreakCategory = odataObject.BreakCategory;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return EmployeeActivityClass;
            }());
            Entities.EmployeeActivityClass = EmployeeActivityClass;
            var TokenizedPaymentCardClass = (function () {
                function TokenizedPaymentCardClass(odataObject) {
                    odataObject = odataObject || {};
                    this.IsSwipe = odataObject.IsSwipe;
                    this.TenderType = odataObject.TenderType;
                    if (odataObject.CardTokenInfo == null) {
                        this.CardTokenInfo = undefined;
                    }
                    else if (odataObject.CardTokenInfo['@odata.type'] == null) {
                        this.CardTokenInfo = new CardTokenInfoClass(odataObject.CardTokenInfo);
                    }
                    else {
                        var className = odataObject.CardTokenInfo['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.CardTokenInfo = new Commerce.Proxy.Entities[className](odataObject.CardTokenInfo);
                        }
                    }
                    this.Phone = odataObject.Phone;
                    this.Country = odataObject.Country;
                    this.Address1 = odataObject.Address1;
                    this.Address2 = odataObject.Address2;
                    this.City = odataObject.City;
                    this.State = odataObject.State;
                    this.Zip = odataObject.Zip;
                    this.NameOnCard = odataObject.NameOnCard;
                    this.CardTypeId = odataObject.CardTypeId;
                    this.ExpirationMonth = odataObject.ExpirationMonth;
                    this.ExpirationYear = odataObject.ExpirationYear;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return TokenizedPaymentCardClass;
            }());
            Entities.TokenizedPaymentCardClass = TokenizedPaymentCardClass;
            var LineShippingAddressClass = (function () {
                function LineShippingAddressClass(odataObject) {
                    odataObject = odataObject || {};
                    this.LineId = odataObject.LineId;
                    if (odataObject.ShippingAddress == null) {
                        this.ShippingAddress = undefined;
                    }
                    else if (odataObject.ShippingAddress['@odata.type'] == null) {
                        this.ShippingAddress = new AddressClass(odataObject.ShippingAddress);
                    }
                    else {
                        var className = odataObject.ShippingAddress['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.ShippingAddress = new Commerce.Proxy.Entities[className](odataObject.ShippingAddress);
                        }
                    }
                }
                return LineShippingAddressClass;
            }());
            Entities.LineShippingAddressClass = LineShippingAddressClass;
            var CartDeliveryPreferencesClass = (function () {
                function CartDeliveryPreferencesClass(odataObject) {
                    odataObject = odataObject || {};
                    this.HeaderDeliveryPreferenceTypeValues = undefined;
                    if (odataObject.HeaderDeliveryPreferenceTypeValues) {
                        this.HeaderDeliveryPreferenceTypeValues = [];
                        for (var i = 0; i < odataObject.HeaderDeliveryPreferenceTypeValues.length; i++) {
                            if (odataObject.HeaderDeliveryPreferenceTypeValues[i] != null) {
                                this.HeaderDeliveryPreferenceTypeValues[i] = odataObject.HeaderDeliveryPreferenceTypeValues[i];
                            }
                            else {
                                this.HeaderDeliveryPreferenceTypeValues[i] = undefined;
                            }
                        }
                    }
                    this.CartLineDeliveryPreferences = undefined;
                    if (odataObject.CartLineDeliveryPreferences) {
                        this.CartLineDeliveryPreferences = [];
                        for (var i = 0; i < odataObject.CartLineDeliveryPreferences.length; i++) {
                            if (odataObject.CartLineDeliveryPreferences[i] != null) {
                                if (odataObject.CartLineDeliveryPreferences[i]['@odata.type'] != null) {
                                    var className = odataObject.CartLineDeliveryPreferences[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.CartLineDeliveryPreferences[i] = new Commerce.Proxy.Entities[className](odataObject.CartLineDeliveryPreferences[i]);
                                    }
                                }
                                else {
                                    this.CartLineDeliveryPreferences[i] = new CartLineDeliveryPreferenceClass(odataObject.CartLineDeliveryPreferences[i]);
                                }
                            }
                            else {
                                this.CartLineDeliveryPreferences[i] = undefined;
                            }
                        }
                    }
                }
                return CartDeliveryPreferencesClass;
            }());
            Entities.CartDeliveryPreferencesClass = CartDeliveryPreferencesClass;
            var LineDeliverySpecificationClass = (function () {
                function LineDeliverySpecificationClass(odataObject) {
                    odataObject = odataObject || {};
                    this.LineId = odataObject.LineId;
                    if (odataObject.DeliverySpecification == null) {
                        this.DeliverySpecification = undefined;
                    }
                    else if (odataObject.DeliverySpecification['@odata.type'] == null) {
                        this.DeliverySpecification = new DeliverySpecificationClass(odataObject.DeliverySpecification);
                    }
                    else {
                        var className = odataObject.DeliverySpecification['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.DeliverySpecification = new Commerce.Proxy.Entities[className](odataObject.DeliverySpecification);
                        }
                    }
                }
                return LineDeliverySpecificationClass;
            }());
            Entities.LineDeliverySpecificationClass = LineDeliverySpecificationClass;
            var DeliverySpecificationClass = (function () {
                function DeliverySpecificationClass(odataObject) {
                    odataObject = odataObject || {};
                    this.DeliveryModeId = odataObject.DeliveryModeId;
                    this.DeliveryPreferenceTypeValue = odataObject.DeliveryPreferenceTypeValue;
                    if (odataObject.DeliveryAddress == null) {
                        this.DeliveryAddress = undefined;
                    }
                    else if (odataObject.DeliveryAddress['@odata.type'] == null) {
                        this.DeliveryAddress = new AddressClass(odataObject.DeliveryAddress);
                    }
                    else {
                        var className = odataObject.DeliveryAddress['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.DeliveryAddress = new Commerce.Proxy.Entities[className](odataObject.DeliveryAddress);
                        }
                    }
                    this.PickUpStoreId = odataObject.PickUpStoreId;
                    this.ElectronicDeliveryEmailAddress = odataObject.ElectronicDeliveryEmailAddress;
                    this.ElectronicDeliveryEmailContent = odataObject.ElectronicDeliveryEmailContent;
                }
                return DeliverySpecificationClass;
            }());
            Entities.DeliverySpecificationClass = DeliverySpecificationClass;
            var OrderSearchCriteriaClass = (function () {
                function OrderSearchCriteriaClass(odataObject) {
                    odataObject = odataObject || {};
                    this.CustomerAccountNumber = odataObject.CustomerAccountNumber;
                    this.CustomerName = odataObject.CustomerName;
                    this.EmailAddress = odataObject.EmailAddress;
                    this.SalesId = odataObject.SalesId;
                    this.ReceiptId = odataObject.ReceiptId;
                    this.OrderStatusValues = undefined;
                    if (odataObject.OrderStatusValues) {
                        this.OrderStatusValues = [];
                        for (var i = 0; i < odataObject.OrderStatusValues.length; i++) {
                            if (odataObject.OrderStatusValues[i] != null) {
                                this.OrderStatusValues[i] = odataObject.OrderStatusValues[i];
                            }
                            else {
                                this.OrderStatusValues[i] = undefined;
                            }
                        }
                    }
                    this.StartDateTime = (odataObject.StartDateTime instanceof Date) ? odataObject.StartDateTime
                        : (odataObject.StartDateTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.StartDateTime, "Edm.DateTimeOffset", false) : undefined;
                    this.EndDateTime = (odataObject.EndDateTime instanceof Date) ? odataObject.EndDateTime
                        : (odataObject.EndDateTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.EndDateTime, "Edm.DateTimeOffset", false) : undefined;
                    this.ChannelReferenceId = odataObject.ChannelReferenceId;
                    this.StoreId = odataObject.StoreId;
                    this.OrderType = odataObject.OrderType;
                    this.CustomFilters = undefined;
                    if (odataObject.CustomFilters) {
                        this.CustomFilters = [];
                        for (var i = 0; i < odataObject.CustomFilters.length; i++) {
                            if (odataObject.CustomFilters[i] != null) {
                                if (odataObject.CustomFilters[i]['@odata.type'] != null) {
                                    var className = odataObject.CustomFilters[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.CustomFilters[i] = new Commerce.Proxy.Entities[className](odataObject.CustomFilters[i]);
                                    }
                                }
                                else {
                                    this.CustomFilters[i] = new SearchFilterClass(odataObject.CustomFilters[i]);
                                }
                            }
                            else {
                                this.CustomFilters[i] = undefined;
                            }
                        }
                    }
                }
                return OrderSearchCriteriaClass;
            }());
            Entities.OrderSearchCriteriaClass = OrderSearchCriteriaClass;
            var CartSearchCriteriaClass = (function () {
                function CartSearchCriteriaClass(odataObject) {
                    odataObject = odataObject || {};
                    this.CartId = odataObject.CartId;
                    this.ExpectedCartVersion = (odataObject.ExpectedCartVersion != null) ? parseInt(odataObject.ExpectedCartVersion, 10) : undefined;
                    this.CustomerAccountNumber = odataObject.CustomerAccountNumber;
                    this.IncludeAnonymous = odataObject.IncludeAnonymous;
                    this.SuspendedOnly = odataObject.SuspendedOnly;
                    this.CartTypeValue = odataObject.CartTypeValue;
                }
                return CartSearchCriteriaClass;
            }());
            Entities.CartSearchCriteriaClass = CartSearchCriteriaClass;
            var ReceiptRetrievalCriteriaClass = (function () {
                function ReceiptRetrievalCriteriaClass(odataObject) {
                    odataObject = odataObject || {};
                    this.IsCopy = odataObject.IsCopy;
                    this.IsRemoteTransaction = odataObject.IsRemoteTransaction;
                    this.IsPreview = odataObject.IsPreview;
                    this.QueryBySalesId = odataObject.QueryBySalesId;
                    this.ReceiptTypeValue = odataObject.ReceiptTypeValue;
                    this.ShiftId = (odataObject.ShiftId != null) ? parseInt(odataObject.ShiftId, 10) : undefined;
                    this.ShiftTerminalId = odataObject.ShiftTerminalId;
                    this.HardwareProfileId = odataObject.HardwareProfileId;
                }
                return ReceiptRetrievalCriteriaClass;
            }());
            Entities.ReceiptRetrievalCriteriaClass = ReceiptRetrievalCriteriaClass;
            var FulfillmentLineParameterClass = (function () {
                function FulfillmentLineParameterClass(odataObject) {
                    odataObject = odataObject || {};
                    this.SalesId = odataObject.SalesId;
                    this.SalesLineNumber = (odataObject.SalesLineNumber != null) ? parseFloat(odataObject.SalesLineNumber) : undefined;
                    this.Quantity = (odataObject.Quantity != null) ? parseFloat(odataObject.Quantity) : undefined;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return FulfillmentLineParameterClass;
            }());
            Entities.FulfillmentLineParameterClass = FulfillmentLineParameterClass;
            var ShipFulfillmentLineClass = (function (_super) {
                __extends(ShipFulfillmentLineClass, _super);
                function ShipFulfillmentLineClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.ProductId = (odataObject.ProductId != null) ? parseInt(odataObject.ProductId, 10) : undefined;
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.ShipFulfillmentLine";
                    return _this;
                }
                return ShipFulfillmentLineClass;
            }(FulfillmentLineParameterClass));
            Entities.ShipFulfillmentLineClass = ShipFulfillmentLineClass;
            var RejectFulfillmentLineClass = (function (_super) {
                __extends(RejectFulfillmentLineClass, _super);
                function RejectFulfillmentLineClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.RejectedQuantity = (odataObject.RejectedQuantity != null) ? parseFloat(odataObject.RejectedQuantity) : undefined;
                    _this.InfoCodeId = odataObject.InfoCodeId;
                    _this.SubInfoCodeId = odataObject.SubInfoCodeId;
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.RejectFulfillmentLine";
                    return _this;
                }
                return RejectFulfillmentLineClass;
            }(FulfillmentLineParameterClass));
            Entities.RejectFulfillmentLineClass = RejectFulfillmentLineClass;
            var ReadChangedProductsSessionClass = (function () {
                function ReadChangedProductsSessionClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Id = odataObject.Id;
                    this.TotalNumberOfProducts = odataObject.TotalNumberOfProducts;
                    this.NumberOfProductsRead = odataObject.NumberOfProductsRead;
                    this.NumberOfProductsReadInCurrentPage = odataObject.NumberOfProductsReadInCurrentPage;
                    this.NextSynchronizationToken = odataObject.NextSynchronizationToken;
                    this.IsInitialSync = odataObject.IsInitialSync;
                }
                return ReadChangedProductsSessionClass;
            }());
            Entities.ReadChangedProductsSessionClass = ReadChangedProductsSessionClass;
            var DeletedListingsResultClass = (function () {
                function DeletedListingsResultClass(odataObject) {
                    odataObject = odataObject || {};
                    this.HasMorePublishedListings = odataObject.HasMorePublishedListings;
                    this.DeletedListings = undefined;
                    if (odataObject.DeletedListings) {
                        this.DeletedListings = [];
                        for (var i = 0; i < odataObject.DeletedListings.length; i++) {
                            if (odataObject.DeletedListings[i] != null) {
                                if (odataObject.DeletedListings[i]['@odata.type'] != null) {
                                    var className = odataObject.DeletedListings[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.DeletedListings[i] = new Commerce.Proxy.Entities[className](odataObject.DeletedListings[i]);
                                    }
                                }
                                else {
                                    this.DeletedListings[i] = new ListingIdentityClass(odataObject.DeletedListings[i]);
                                }
                            }
                            else {
                                this.DeletedListings[i] = undefined;
                            }
                        }
                    }
                }
                return DeletedListingsResultClass;
            }());
            Entities.DeletedListingsResultClass = DeletedListingsResultClass;
            var ListingPublishStatusClass = (function () {
                function ListingPublishStatusClass(odataObject) {
                    odataObject = odataObject || {};
                    this.PublishStatusValue = odataObject.PublishStatusValue;
                    this.ListingModifiedDateTime = (odataObject.ListingModifiedDateTime instanceof Date) ? odataObject.ListingModifiedDateTime
                        : (odataObject.ListingModifiedDateTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.ListingModifiedDateTime, "Edm.DateTimeOffset", false) : undefined;
                    this.ChannelListingId = odataObject.ChannelListingId;
                    this.ChannelId = (odataObject.ChannelId != null) ? parseInt(odataObject.ChannelId, 10) : undefined;
                    this.CatalogId = (odataObject.CatalogId != null) ? parseInt(odataObject.CatalogId, 10) : undefined;
                    this.ProductId = (odataObject.ProductId != null) ? parseInt(odataObject.ProductId, 10) : undefined;
                    this.LanguageId = odataObject.LanguageId;
                    this.AppliedActionValue = odataObject.AppliedActionValue;
                    this.StatusMessage = odataObject.StatusMessage;
                    this.Tag = odataObject.Tag;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ListingPublishStatusClass;
            }());
            Entities.ListingPublishStatusClass = ListingPublishStatusClass;
            var CartPromotionsClass = (function () {
                function CartPromotionsClass(odataObject) {
                    odataObject = odataObject || {};
                    this.HeaderPromotions = undefined;
                    if (odataObject.HeaderPromotions) {
                        this.HeaderPromotions = [];
                        for (var i = 0; i < odataObject.HeaderPromotions.length; i++) {
                            if (odataObject.HeaderPromotions[i] != null) {
                                this.HeaderPromotions[i] = odataObject.HeaderPromotions[i];
                            }
                            else {
                                this.HeaderPromotions[i] = undefined;
                            }
                        }
                    }
                    this.CartLinePromotions = undefined;
                    if (odataObject.CartLinePromotions) {
                        this.CartLinePromotions = [];
                        for (var i = 0; i < odataObject.CartLinePromotions.length; i++) {
                            if (odataObject.CartLinePromotions[i] != null) {
                                if (odataObject.CartLinePromotions[i]['@odata.type'] != null) {
                                    var className = odataObject.CartLinePromotions[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.CartLinePromotions[i] = new Commerce.Proxy.Entities[className](odataObject.CartLinePromotions[i]);
                                    }
                                }
                                else {
                                    this.CartLinePromotions[i] = new CartLinePromotionClass(odataObject.CartLinePromotions[i]);
                                }
                            }
                            else {
                                this.CartLinePromotions[i] = undefined;
                            }
                        }
                    }
                }
                return CartPromotionsClass;
            }());
            Entities.CartPromotionsClass = CartPromotionsClass;
            var ItemUnitClass = (function () {
                function ItemUnitClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ItemId = odataObject.ItemId;
                    this.VariantInventoryDimensionId = odataObject.VariantInventoryDimensionId;
                    this.Product = (odataObject.Product != null) ? parseInt(odataObject.Product, 10) : undefined;
                    this.DistinctProductVariant = (odataObject.DistinctProductVariant != null) ? parseInt(odataObject.DistinctProductVariant, 10) : undefined;
                    this.UnitOfMeasure = odataObject.UnitOfMeasure;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ItemUnitClass;
            }());
            Entities.ItemUnitClass = ItemUnitClass;
            var ProductAvailableQuantityClass = (function () {
                function ProductAvailableQuantityClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ProductId = (odataObject.ProductId != null) ? parseInt(odataObject.ProductId, 10) : undefined;
                    this.AvailableQuantity = (odataObject.AvailableQuantity != null) ? parseFloat(odataObject.AvailableQuantity) : undefined;
                    this.UnitOfMeasure = odataObject.UnitOfMeasure;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ProductAvailableQuantityClass;
            }());
            Entities.ProductAvailableQuantityClass = ProductAvailableQuantityClass;
            var PickAndPackSalesLineParameterClass = (function () {
                function PickAndPackSalesLineParameterClass(odataObject) {
                    odataObject = odataObject || {};
                    this.SalesLineNumber = (odataObject.SalesLineNumber != null) ? parseFloat(odataObject.SalesLineNumber) : undefined;
                    this.Quantity = (odataObject.Quantity != null) ? parseFloat(odataObject.Quantity) : undefined;
                }
                return PickAndPackSalesLineParameterClass;
            }());
            Entities.PickAndPackSalesLineParameterClass = PickAndPackSalesLineParameterClass;
            var ProjectionDomainClass = (function () {
                function ProjectionDomainClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ChannelId = (odataObject.ChannelId != null) ? parseInt(odataObject.ChannelId, 10) : undefined;
                    this.CatalogId = (odataObject.CatalogId != null) ? parseInt(odataObject.CatalogId, 10) : undefined;
                }
                return ProjectionDomainClass;
            }());
            Entities.ProjectionDomainClass = ProjectionDomainClass;
            var AffiliationLoyaltyTierClass = (function () {
                function AffiliationLoyaltyTierClass(odataObject) {
                    odataObject = odataObject || {};
                    this.AffiliationId = (odataObject.AffiliationId != null) ? parseInt(odataObject.AffiliationId, 10) : undefined;
                    this.LoyaltyTierId = (odataObject.LoyaltyTierId != null) ? parseInt(odataObject.LoyaltyTierId, 10) : undefined;
                    this.AffiliationTypeValue = odataObject.AffiliationTypeValue;
                    this.ReasonCodeLines = undefined;
                    if (odataObject.ReasonCodeLines) {
                        this.ReasonCodeLines = [];
                        for (var i = 0; i < odataObject.ReasonCodeLines.length; i++) {
                            if (odataObject.ReasonCodeLines[i] != null) {
                                if (odataObject.ReasonCodeLines[i]['@odata.type'] != null) {
                                    var className = odataObject.ReasonCodeLines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ReasonCodeLines[i] = new Commerce.Proxy.Entities[className](odataObject.ReasonCodeLines[i]);
                                    }
                                }
                                else {
                                    this.ReasonCodeLines[i] = new ReasonCodeLineClass(odataObject.ReasonCodeLines[i]);
                                }
                            }
                            else {
                                this.ReasonCodeLines[i] = undefined;
                            }
                        }
                    }
                    this.CustomerId = odataObject.CustomerId;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return AffiliationLoyaltyTierClass;
            }());
            Entities.AffiliationLoyaltyTierClass = AffiliationLoyaltyTierClass;
            var CreateHardwareStationTokenResultClass = (function () {
                function CreateHardwareStationTokenResultClass(odataObject) {
                    odataObject = odataObject || {};
                    this.HardwareStationToken = odataObject.HardwareStationToken;
                    this.PairingKey = odataObject.PairingKey;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return CreateHardwareStationTokenResultClass;
            }());
            Entities.CreateHardwareStationTokenResultClass = CreateHardwareStationTokenResultClass;
            var ValidateHardwareStationTokenResultClass = (function () {
                function ValidateHardwareStationTokenResultClass(odataObject) {
                    odataObject = odataObject || {};
                    this.PairingKey = odataObject.PairingKey;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ValidateHardwareStationTokenResultClass;
            }());
            Entities.ValidateHardwareStationTokenResultClass = ValidateHardwareStationTokenResultClass;
            var DownloadSessionClass = (function () {
                function DownloadSessionClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Id = (odataObject.Id != null) ? parseInt(odataObject.Id, 10) : undefined;
                    this.JobId = odataObject.JobId;
                    this.JobDescription = odataObject.JobDescription;
                    this.FileSize = (odataObject.FileSize != null) ? parseInt(odataObject.FileSize, 10) : undefined;
                    this.RowsAffected = odataObject.RowsAffected;
                    this.Checksum = odataObject.Checksum;
                    this.DateDownloaded = odataObject.DateDownloaded;
                    this.DateRequested = odataObject.DateRequested;
                    this.DataStoreName = odataObject.DataStoreName;
                    this.StatusValue = odataObject.StatusValue;
                    this.Message = odataObject.Message;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return DownloadSessionClass;
            }());
            Entities.DownloadSessionClass = DownloadSessionClass;
            var CurrencyRequestClass = (function () {
                function CurrencyRequestClass(odataObject) {
                    odataObject = odataObject || {};
                    this.AmountToConvert = (odataObject.AmountToConvert != null) ? parseFloat(odataObject.AmountToConvert) : undefined;
                    this.CurrencyCode = odataObject.CurrencyCode;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return CurrencyRequestClass;
            }());
            Entities.CurrencyRequestClass = CurrencyRequestClass;
            var HardwareStationProfileClass = (function () {
                function HardwareStationProfileClass(odataObject) {
                    odataObject = odataObject || {};
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.HardwareStationId = odataObject.HardwareStationId;
                    this.HardwareStationTypeValue = odataObject.HardwareStationTypeValue;
                    this.HardwareProfileId = odataObject.HardwareProfileId;
                    this.HardwareStationName = odataObject.HardwareStationName;
                    this.HardwareStationDescription = odataObject.HardwareStationDescription;
                    this.HardwareStationUrl = odataObject.HardwareStationUrl;
                    this.HardwareStationHostName = odataObject.HardwareStationHostName;
                    this.HardwareStationEftTerminalId = odataObject.HardwareStationEftTerminalId;
                    if (odataObject.HardwareConfigurations == null) {
                        this.HardwareConfigurations = undefined;
                    }
                    else if (odataObject.HardwareConfigurations['@odata.type'] == null) {
                        this.HardwareConfigurations = new HardwareConfigurationsClass(odataObject.HardwareConfigurations);
                    }
                    else {
                        var className = odataObject.HardwareConfigurations['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.HardwareConfigurations = new Commerce.Proxy.Entities[className](odataObject.HardwareConfigurations);
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return HardwareStationProfileClass;
            }());
            Entities.HardwareStationProfileClass = HardwareStationProfileClass;
            var NameValuePairClass = (function () {
                function NameValuePairClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Name = odataObject.Name;
                    this.Value = odataObject.Value;
                }
                return NameValuePairClass;
            }());
            Entities.NameValuePairClass = NameValuePairClass;
            var LinkToExistingCustomerResultClass = (function () {
                function LinkToExistingCustomerResultClass(odataObject) {
                    odataObject = odataObject || {};
                    this.EmailAddress = odataObject.EmailAddress;
                    this.ExternalIdentityProvider = odataObject.ExternalIdentityProvider;
                    this.ExternalIdentityLinkRecordId = (odataObject.ExternalIdentityLinkRecordId != null) ? parseInt(odataObject.ExternalIdentityLinkRecordId, 10) : undefined;
                }
                return LinkToExistingCustomerResultClass;
            }());
            Entities.LinkToExistingCustomerResultClass = LinkToExistingCustomerResultClass;
            var OfflineSyncStatsLineClass = (function () {
                function OfflineSyncStatsLineClass(odataObject) {
                    odataObject = odataObject || {};
                    this.IsUploadJob = odataObject.IsUploadJob;
                    this.JobDescription = odataObject.JobDescription;
                    this.LastSyncDateTime = (odataObject.LastSyncDateTime instanceof Date) ? odataObject.LastSyncDateTime
                        : (odataObject.LastSyncDateTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.LastSyncDateTime, "Edm.DateTimeOffset", false) : undefined;
                    this.Status = odataObject.Status;
                    this.FileSize = odataObject.FileSize;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return OfflineSyncStatsLineClass;
            }());
            Entities.OfflineSyncStatsLineClass = OfflineSyncStatsLineClass;
            var StorageAccessTokenClass = (function () {
                function StorageAccessTokenClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Url = odataObject.Url;
                    this.SasKey = odataObject.SasKey;
                }
                return StorageAccessTokenClass;
            }());
            Entities.StorageAccessTokenClass = StorageAccessTokenClass;
            var TaskGuidesSearchResultClass = (function () {
                function TaskGuidesSearchResultClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Lines = undefined;
                    if (odataObject.Lines) {
                        this.Lines = [];
                        for (var i = 0; i < odataObject.Lines.length; i++) {
                            if (odataObject.Lines[i] != null) {
                                if (odataObject.Lines[i]['@odata.type'] != null) {
                                    var className = odataObject.Lines[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.Lines[i] = new Commerce.Proxy.Entities[className](odataObject.Lines[i]);
                                    }
                                }
                                else {
                                    this.Lines[i] = new LineClass(odataObject.Lines[i]);
                                }
                            }
                            else {
                                this.Lines[i] = undefined;
                            }
                        }
                    }
                    this.FrameworkPublisherName = odataObject.FrameworkPublisherName;
                    this.FrameworkName = odataObject.FrameworkName;
                }
                return TaskGuidesSearchResultClass;
            }());
            Entities.TaskGuidesSearchResultClass = TaskGuidesSearchResultClass;
            var AuditEventClass = (function () {
                function AuditEventClass(odataObject) {
                    odataObject = odataObject || {};
                    this.EventId = (odataObject.EventId != null) ? parseInt(odataObject.EventId, 10) : undefined;
                    this.Channel = (odataObject.Channel != null) ? parseInt(odataObject.Channel, 10) : undefined;
                    this.Store = odataObject.Store;
                    this.Terminal = odataObject.Terminal;
                    this.UploadType = odataObject.UploadType;
                    this.EventType = odataObject.EventType;
                    this.DurationInMilliseconds = odataObject.DurationInMilliseconds;
                    this.Source = odataObject.Source;
                    this.EventMessage = odataObject.EventMessage;
                    this.LogLevel = odataObject.LogLevel;
                    this.Staff = odataObject.Staff;
                    this.ShiftId = (odataObject.ShiftId != null) ? parseInt(odataObject.ShiftId, 10) : undefined;
                    this.ReferenceId = (odataObject.ReferenceId != null) ? parseInt(odataObject.ReferenceId, 10) : undefined;
                    this.RefChannel = (odataObject.RefChannel != null) ? parseInt(odataObject.RefChannel, 10) : undefined;
                    this.RefStore = odataObject.RefStore;
                    this.RefTerminal = odataObject.RefTerminal;
                    this.RefTransactionId = odataObject.RefTransactionId;
                    this.AuditEventTypeValue = odataObject.AuditEventTypeValue;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return AuditEventClass;
            }());
            Entities.AuditEventClass = AuditEventClass;
            var ItemAvailabilityClass = (function () {
                function ItemAvailabilityClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ItemId = odataObject.ItemId;
                    this.VariantInventoryDimensionId = odataObject.VariantInventoryDimensionId;
                    this.InventoryLocationId = odataObject.InventoryLocationId;
                    this.ProductId = (odataObject.ProductId != null) ? parseInt(odataObject.ProductId, 10) : undefined;
                    this.AvailableQuantity = (odataObject.AvailableQuantity != null) ? parseFloat(odataObject.AvailableQuantity) : undefined;
                    this.OrderedSum = (odataObject.OrderedSum != null) ? parseFloat(odataObject.OrderedSum) : undefined;
                    this.PhysicalReserved = (odataObject.PhysicalReserved != null) ? parseFloat(odataObject.PhysicalReserved) : undefined;
                    this.UnitOfMeasure = odataObject.UnitOfMeasure;
                    this.ProductDimensions = undefined;
                    if (odataObject.ProductDimensions) {
                        this.ProductDimensions = [];
                        for (var i = 0; i < odataObject.ProductDimensions.length; i++) {
                            if (odataObject.ProductDimensions[i] != null) {
                                if (odataObject.ProductDimensions[i]['@odata.type'] != null) {
                                    var className = odataObject.ProductDimensions[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ProductDimensions[i] = new Commerce.Proxy.Entities[className](odataObject.ProductDimensions[i]);
                                    }
                                }
                                else {
                                    this.ProductDimensions[i] = new ProductDimensionClass(odataObject.ProductDimensions[i]);
                                }
                            }
                            else {
                                this.ProductDimensions[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ItemAvailabilityClass;
            }());
            Entities.ItemAvailabilityClass = ItemAvailabilityClass;
            var InventoryAvailableToPromiseClass = (function (_super) {
                __extends(InventoryAvailableToPromiseClass, _super);
                function InventoryAvailableToPromiseClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.Date = odataObject.Date;
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.InventoryAvailableToPromise";
                    return _this;
                }
                return InventoryAvailableToPromiseClass;
            }(ItemAvailabilityClass));
            Entities.InventoryAvailableToPromiseClass = InventoryAvailableToPromiseClass;
            var NotificationItemClass = (function () {
                function NotificationItemClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Action = odataObject.Action;
                    this.ActionName = odataObject.ActionName;
                    this.NotificationDetails = undefined;
                    if (odataObject.NotificationDetails) {
                        this.NotificationDetails = [];
                        for (var i = 0; i < odataObject.NotificationDetails.length; i++) {
                            if (odataObject.NotificationDetails[i] != null) {
                                if (odataObject.NotificationDetails[i]['@odata.type'] != null) {
                                    var className = odataObject.NotificationDetails[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.NotificationDetails[i] = new Commerce.Proxy.Entities[className](odataObject.NotificationDetails[i]);
                                    }
                                }
                                else {
                                    this.NotificationDetails[i] = new NotificationDetailClass(odataObject.NotificationDetails[i]);
                                }
                            }
                            else {
                                this.NotificationDetails[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return NotificationItemClass;
            }());
            Entities.NotificationItemClass = NotificationItemClass;
            var ExtensionProfileClass = (function () {
                function ExtensionProfileClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ExtensionServiceUrl = odataObject.ExtensionServiceUrl;
                    this.AttachedServices = undefined;
                    if (odataObject.AttachedServices) {
                        this.AttachedServices = [];
                        for (var i = 0; i < odataObject.AttachedServices.length; i++) {
                            if (odataObject.AttachedServices[i] != null) {
                                if (odataObject.AttachedServices[i]['@odata.type'] != null) {
                                    var className = odataObject.AttachedServices[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.AttachedServices[i] = new Commerce.Proxy.Entities[className](odataObject.AttachedServices[i]);
                                    }
                                }
                                else {
                                    this.AttachedServices[i] = new AttachedServiceClass(odataObject.AttachedServices[i]);
                                }
                            }
                            else {
                                this.AttachedServices[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ExtensionProfileClass;
            }());
            Entities.ExtensionProfileClass = ExtensionProfileClass;
            var PaymentMerchantInformationClass = (function () {
                function PaymentMerchantInformationClass(odataObject) {
                    odataObject = odataObject || {};
                    this.PaymentConnectorPropertiesXml = odataObject.PaymentConnectorPropertiesXml;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return PaymentMerchantInformationClass;
            }());
            Entities.PaymentMerchantInformationClass = PaymentMerchantInformationClass;
            var AttributeProductClass = (function () {
                function AttributeProductClass(odataObject) {
                    odataObject = odataObject || {};
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.Name = odataObject.Name;
                    this.KeyName = odataObject.KeyName;
                    this.DataTypeValue = odataObject.DataTypeValue;
                    this.NameTranslations = undefined;
                    if (odataObject.NameTranslations) {
                        this.NameTranslations = [];
                        for (var i = 0; i < odataObject.NameTranslations.length; i++) {
                            if (odataObject.NameTranslations[i] != null) {
                                if (odataObject.NameTranslations[i]['@odata.type'] != null) {
                                    var className = odataObject.NameTranslations[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.NameTranslations[i] = new Commerce.Proxy.Entities[className](odataObject.NameTranslations[i]);
                                    }
                                }
                                else {
                                    this.NameTranslations[i] = new TextValueTranslationClass(odataObject.NameTranslations[i]);
                                }
                            }
                            else {
                                this.NameTranslations[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return AttributeProductClass;
            }());
            Entities.AttributeProductClass = AttributeProductClass;
            var MediaBlobClass = (function () {
                function MediaBlobClass(odataObject) {
                    odataObject = odataObject || {};
                    this.MediaType = odataObject.MediaType;
                    this.Content = odataObject.Content;
                    this.IsDefault = odataObject.IsDefault;
                    this.AltText = odataObject.AltText;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return MediaBlobClass;
            }());
            Entities.MediaBlobClass = MediaBlobClass;
            var TerminalInfoClass = (function () {
                function TerminalInfoClass(odataObject) {
                    odataObject = odataObject || {};
                    this.TerminalId = odataObject.TerminalId;
                    this.DeviceNumber = odataObject.DeviceNumber;
                    this.Name = odataObject.Name;
                    this.DeviceType = odataObject.DeviceType;
                    this.ActivationStatusValue = odataObject.ActivationStatusValue;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return TerminalInfoClass;
            }());
            Entities.TerminalInfoClass = TerminalInfoClass;
            var ExtensibleEnumerationContainerClass = (function () {
                function ExtensibleEnumerationContainerClass(odataObject) {
                    odataObject = odataObject || {};
                    this.TypeName = odataObject.TypeName;
                    this.ExtensibleEnumerations = undefined;
                    if (odataObject.ExtensibleEnumerations) {
                        this.ExtensibleEnumerations = [];
                        for (var i = 0; i < odataObject.ExtensibleEnumerations.length; i++) {
                            if (odataObject.ExtensibleEnumerations[i] != null) {
                                if (odataObject.ExtensibleEnumerations[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensibleEnumerations[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensibleEnumerations[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensibleEnumerations[i]);
                                    }
                                }
                                else {
                                    this.ExtensibleEnumerations[i] = new ExtensibleEnumerationClass(odataObject.ExtensibleEnumerations[i]);
                                }
                            }
                            else {
                                this.ExtensibleEnumerations[i] = undefined;
                            }
                        }
                    }
                }
                return ExtensibleEnumerationContainerClass;
            }());
            Entities.ExtensibleEnumerationContainerClass = ExtensibleEnumerationContainerClass;
            var PackingSlipDataClass = (function () {
                function PackingSlipDataClass(odataObject) {
                    odataObject = odataObject || {};
                    this.PackingSlipId = odataObject.PackingSlipId;
                    this.CreatedDateTime = (odataObject.CreatedDateTime instanceof Date) ? odataObject.CreatedDateTime
                        : (odataObject.CreatedDateTime != null) ? OData.jsonLightReadStringPropertyValue(odataObject.CreatedDateTime, "Edm.DateTimeOffset", false) : undefined;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return PackingSlipDataClass;
            }());
            Entities.PackingSlipDataClass = PackingSlipDataClass;
            var OrgUnitAddressClass = (function (_super) {
                __extends(OrgUnitAddressClass, _super);
                function OrgUnitAddressClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.OrgUnitAddress";
                    return _this;
                }
                return OrgUnitAddressClass;
            }(AddressClass));
            Entities.OrgUnitAddressClass = OrgUnitAddressClass;
            var WarehouseDetailsClass = (function (_super) {
                __extends(WarehouseDetailsClass, _super);
                function WarehouseDetailsClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.WarehouseDetails";
                    return _this;
                }
                return WarehouseDetailsClass;
            }(AddressClass));
            Entities.WarehouseDetailsClass = WarehouseDetailsClass;
            var AttributeBooleanValueClass = (function (_super) {
                __extends(AttributeBooleanValueClass, _super);
                function AttributeBooleanValueClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.Value = odataObject.Value;
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.AttributeBooleanValue";
                    return _this;
                }
                return AttributeBooleanValueClass;
            }(AttributeValueBaseClass));
            Entities.AttributeBooleanValueClass = AttributeBooleanValueClass;
            var AttributeCurrencyValueClass = (function (_super) {
                __extends(AttributeCurrencyValueClass, _super);
                function AttributeCurrencyValueClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.CurrencyValue = (odataObject.CurrencyValue != null) ? parseFloat(odataObject.CurrencyValue) : undefined;
                    _this.CurrencyCode = odataObject.CurrencyCode;
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.AttributeCurrencyValue";
                    return _this;
                }
                return AttributeCurrencyValueClass;
            }(AttributeValueBaseClass));
            Entities.AttributeCurrencyValueClass = AttributeCurrencyValueClass;
            var AttributeDateTimeOffsetValueClass = (function (_super) {
                __extends(AttributeDateTimeOffsetValueClass, _super);
                function AttributeDateTimeOffsetValueClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.Value = (odataObject.Value instanceof Date) ? odataObject.Value
                        : (odataObject.Value != null) ? OData.jsonLightReadStringPropertyValue(odataObject.Value, "Edm.DateTimeOffset", false) : undefined;
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.AttributeDateTimeOffsetValue";
                    return _this;
                }
                return AttributeDateTimeOffsetValueClass;
            }(AttributeValueBaseClass));
            Entities.AttributeDateTimeOffsetValueClass = AttributeDateTimeOffsetValueClass;
            var AttributeFloatValueClass = (function (_super) {
                __extends(AttributeFloatValueClass, _super);
                function AttributeFloatValueClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.Value = (odataObject.Value != null) ? parseFloat(odataObject.Value) : undefined;
                    _this.UnitSymbol = odataObject.UnitSymbol;
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.AttributeFloatValue";
                    return _this;
                }
                return AttributeFloatValueClass;
            }(AttributeValueBaseClass));
            Entities.AttributeFloatValueClass = AttributeFloatValueClass;
            var AttributeIntValueClass = (function (_super) {
                __extends(AttributeIntValueClass, _super);
                function AttributeIntValueClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.Value = odataObject.Value;
                    _this.UnitSymbol = odataObject.UnitSymbol;
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.AttributeIntValue";
                    return _this;
                }
                return AttributeIntValueClass;
            }(AttributeValueBaseClass));
            Entities.AttributeIntValueClass = AttributeIntValueClass;
            var AttributeMediaLocationValueClass = (function (_super) {
                __extends(AttributeMediaLocationValueClass, _super);
                function AttributeMediaLocationValueClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.Value = undefined;
                    if (odataObject.Value) {
                        _this.Value = [];
                        for (var i = 0; i < odataObject.Value.length; i++) {
                            if (odataObject.Value[i] != null) {
                                if (odataObject.Value[i]['@odata.type'] != null) {
                                    var className = odataObject.Value[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        _this.Value[i] = new Commerce.Proxy.Entities[className](odataObject.Value[i]);
                                    }
                                }
                                else {
                                    _this.Value[i] = new MediaLocationClass(odataObject.Value[i]);
                                }
                            }
                            else {
                                _this.Value[i] = undefined;
                            }
                        }
                    }
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.AttributeMediaLocationValue";
                    return _this;
                }
                return AttributeMediaLocationValueClass;
            }(AttributeValueBaseClass));
            Entities.AttributeMediaLocationValueClass = AttributeMediaLocationValueClass;
            var AttributeTextValueClass = (function (_super) {
                __extends(AttributeTextValueClass, _super);
                function AttributeTextValueClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.TextValue = odataObject.TextValue;
                    _this.TextValueTranslations = undefined;
                    if (odataObject.TextValueTranslations) {
                        _this.TextValueTranslations = [];
                        for (var i = 0; i < odataObject.TextValueTranslations.length; i++) {
                            if (odataObject.TextValueTranslations[i] != null) {
                                if (odataObject.TextValueTranslations[i]['@odata.type'] != null) {
                                    var className = odataObject.TextValueTranslations[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        _this.TextValueTranslations[i] = new Commerce.Proxy.Entities[className](odataObject.TextValueTranslations[i]);
                                    }
                                }
                                else {
                                    _this.TextValueTranslations[i] = new TextValueTranslationClass(odataObject.TextValueTranslations[i]);
                                }
                            }
                            else {
                                _this.TextValueTranslations[i] = undefined;
                            }
                        }
                    }
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.AttributeTextValue";
                    return _this;
                }
                return AttributeTextValueClass;
            }(AttributeValueBaseClass));
            Entities.AttributeTextValueClass = AttributeTextValueClass;
            var ButtonGridButtonClass = (function () {
                function ButtonGridButtonClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Action = odataObject.Action;
                    this.ActionProperty = odataObject.ActionProperty;
                    if (odataObject.BackColorAsARGB == null) {
                        this.BackColorAsARGB = undefined;
                    }
                    else if (odataObject.BackColorAsARGB['@odata.type'] == null) {
                        this.BackColorAsARGB = new ARGBColorClass(odataObject.BackColorAsARGB);
                    }
                    else {
                        var className = odataObject.BackColorAsARGB['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.BackColorAsARGB = new Commerce.Proxy.Entities[className](odataObject.BackColorAsARGB);
                        }
                    }
                    if (odataObject.BorderColorAsARGB == null) {
                        this.BorderColorAsARGB = undefined;
                    }
                    else if (odataObject.BorderColorAsARGB['@odata.type'] == null) {
                        this.BorderColorAsARGB = new ARGBColorClass(odataObject.BorderColorAsARGB);
                    }
                    else {
                        var className = odataObject.BorderColorAsARGB['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.BorderColorAsARGB = new Commerce.Proxy.Entities[className](odataObject.BorderColorAsARGB);
                        }
                    }
                    this.Column = odataObject.Column;
                    this.ColumnSpan = odataObject.ColumnSpan;
                    this.DisplayText = odataObject.DisplayText;
                    if (odataObject.FontColorAsARGB == null) {
                        this.FontColorAsARGB = undefined;
                    }
                    else if (odataObject.FontColorAsARGB['@odata.type'] == null) {
                        this.FontColorAsARGB = new ARGBColorClass(odataObject.FontColorAsARGB);
                    }
                    else {
                        var className = odataObject.FontColorAsARGB['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.FontColorAsARGB = new Commerce.Proxy.Entities[className](odataObject.FontColorAsARGB);
                        }
                    }
                    this.ButtonId = odataObject.ButtonId;
                    this.Row = odataObject.Row;
                    this.RowSpan = odataObject.RowSpan;
                    this.UseCustomLookAndFeel = odataObject.UseCustomLookAndFeel;
                    this.PictureAsBase64 = odataObject.PictureAsBase64;
                    this.FontStyle = odataObject.FontStyle;
                    this.FontSize = odataObject.FontSize;
                    this.EnableCustomFontForPOS = odataObject.EnableCustomFontForPOS;
                    this.HideButtonText = odataObject.HideButtonText;
                    this.Tooltip = odataObject.Tooltip;
                    this.EnableLiveContent = odataObject.EnableLiveContent;
                    this.NotificationContentAlignment = odataObject.NotificationContentAlignment;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ButtonGridButtonClass;
            }());
            Entities.ButtonGridButtonClass = ButtonGridButtonClass;
            var ARGBColorClass = (function () {
                function ARGBColorClass(odataObject) {
                    odataObject = odataObject || {};
                    this.A = (odataObject.A != null) ? parseInt(odataObject.A, 10) : undefined;
                    this.R = (odataObject.R != null) ? parseInt(odataObject.R, 10) : undefined;
                    this.G = (odataObject.G != null) ? parseInt(odataObject.G, 10) : undefined;
                    this.B = (odataObject.B != null) ? parseInt(odataObject.B, 10) : undefined;
                }
                return ARGBColorClass;
            }());
            Entities.ARGBColorClass = ARGBColorClass;
            var ExtensiblePeriodicDiscountOfferTypeClass = (function (_super) {
                __extends(ExtensiblePeriodicDiscountOfferTypeClass, _super);
                function ExtensiblePeriodicDiscountOfferTypeClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.ExtensiblePeriodicDiscountOfferType";
                    return _this;
                }
                return ExtensiblePeriodicDiscountOfferTypeClass;
            }(ExtensibleEnumerationClass));
            Entities.ExtensiblePeriodicDiscountOfferTypeClass = ExtensiblePeriodicDiscountOfferTypeClass;
            var TaxLineGTEClass = (function (_super) {
                __extends(TaxLineGTEClass, _super);
                function TaxLineGTEClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.TaxComponent = odataObject.TaxComponent;
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.TaxLineGTE";
                    return _this;
                }
                return TaxLineGTEClass;
            }(TaxLineClass));
            Entities.TaxLineGTEClass = TaxLineGTEClass;
            var TaxMeasureClass = (function () {
                function TaxMeasureClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Path = odataObject.Path;
                    this.Value = (odataObject.Value != null) ? parseFloat(odataObject.Value) : undefined;
                    this.DataAreaId = odataObject.DataAreaId;
                    this.SaleLineNumber = (odataObject.SaleLineNumber != null) ? parseFloat(odataObject.SaleLineNumber) : undefined;
                    this.StoreId = odataObject.StoreId;
                    this.TerminalId = odataObject.TerminalId;
                    this.TransactionId = odataObject.TransactionId;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return TaxMeasureClass;
            }());
            Entities.TaxMeasureClass = TaxMeasureClass;
            var CardTokenInfoClass = (function () {
                function CardTokenInfoClass(odataObject) {
                    odataObject = odataObject || {};
                    this.CardToken = odataObject.CardToken;
                    this.UniqueCardId = odataObject.UniqueCardId;
                    this.ServiceAccountId = odataObject.ServiceAccountId;
                    this.MaskedCardNumber = odataObject.MaskedCardNumber;
                }
                return CardTokenInfoClass;
            }());
            Entities.CardTokenInfoClass = CardTokenInfoClass;
            var AddressFormattingInfoClass = (function () {
                function AddressFormattingInfoClass(odataObject) {
                    odataObject = odataObject || {};
                    this.AddressComponentNameValue = odataObject.AddressComponentNameValue;
                    this.LineNumber = odataObject.LineNumber;
                    this.IsDataEntryOnly = odataObject.IsDataEntryOnly;
                    this.NewLine = odataObject.NewLine;
                    this.Expand = odataObject.Expand;
                    this.Inactive = odataObject.Inactive;
                    this.Special = odataObject.Special;
                    this.NumberOfSpaces = odataObject.NumberOfSpaces;
                    this.Separator = odataObject.Separator;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return AddressFormattingInfoClass;
            }());
            Entities.AddressFormattingInfoClass = AddressFormattingInfoClass;
            var HardwareConfigurationsClass = (function () {
                function HardwareConfigurationsClass(odataObject) {
                    odataObject = odataObject || {};
                    this.CashDrawerConfigurations = undefined;
                    if (odataObject.CashDrawerConfigurations) {
                        this.CashDrawerConfigurations = [];
                        for (var i = 0; i < odataObject.CashDrawerConfigurations.length; i++) {
                            if (odataObject.CashDrawerConfigurations[i] != null) {
                                if (odataObject.CashDrawerConfigurations[i]['@odata.type'] != null) {
                                    var className = odataObject.CashDrawerConfigurations[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.CashDrawerConfigurations[i] = new Commerce.Proxy.Entities[className](odataObject.CashDrawerConfigurations[i]);
                                    }
                                }
                                else {
                                    this.CashDrawerConfigurations[i] = new HardwareConfigurationClass(odataObject.CashDrawerConfigurations[i]);
                                }
                            }
                            else {
                                this.CashDrawerConfigurations[i] = undefined;
                            }
                        }
                    }
                    this.PrinterConfigurations = undefined;
                    if (odataObject.PrinterConfigurations) {
                        this.PrinterConfigurations = [];
                        for (var i = 0; i < odataObject.PrinterConfigurations.length; i++) {
                            if (odataObject.PrinterConfigurations[i] != null) {
                                if (odataObject.PrinterConfigurations[i]['@odata.type'] != null) {
                                    var className = odataObject.PrinterConfigurations[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.PrinterConfigurations[i] = new Commerce.Proxy.Entities[className](odataObject.PrinterConfigurations[i]);
                                    }
                                }
                                else {
                                    this.PrinterConfigurations[i] = new HardwareConfigurationClass(odataObject.PrinterConfigurations[i]);
                                }
                            }
                            else {
                                this.PrinterConfigurations[i] = undefined;
                            }
                        }
                    }
                    if (odataObject.PinPadConfiguration == null) {
                        this.PinPadConfiguration = undefined;
                    }
                    else if (odataObject.PinPadConfiguration['@odata.type'] == null) {
                        this.PinPadConfiguration = new HardwareConfigurationClass(odataObject.PinPadConfiguration);
                    }
                    else {
                        var className = odataObject.PinPadConfiguration['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.PinPadConfiguration = new Commerce.Proxy.Entities[className](odataObject.PinPadConfiguration);
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return HardwareConfigurationsClass;
            }());
            Entities.HardwareConfigurationsClass = HardwareConfigurationsClass;
            var HardwareConfigurationClass = (function () {
                function HardwareConfigurationClass(odataObject) {
                    odataObject = odataObject || {};
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.HardwareStationRecordId = (odataObject.HardwareStationRecordId != null) ? parseInt(odataObject.HardwareStationRecordId, 10) : undefined;
                    this.TerminalId = odataObject.TerminalId;
                    this.DeviceName = odataObject.DeviceName;
                    this.IPAddress = odataObject.IPAddress;
                    this.Port = odataObject.Port;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return HardwareConfigurationClass;
            }());
            Entities.HardwareConfigurationClass = HardwareConfigurationClass;
            var PaymentErrorClass = (function () {
                function PaymentErrorClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Code = odataObject.Code;
                    this.Message = odataObject.Message;
                }
                return PaymentErrorClass;
            }());
            Entities.PaymentErrorClass = PaymentErrorClass;
            var PrinterClass = (function () {
                function PrinterClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Name = odataObject.Name;
                    this.PrinterType = odataObject.PrinterType;
                    this.Terminal = (odataObject.Terminal != null) ? parseInt(odataObject.Terminal, 10) : undefined;
                    this.PrintBehaviorValue = odataObject.PrintBehaviorValue;
                    this.ReceiptLayoutId = odataObject.ReceiptLayoutId;
                    this.HardwareProfileId = odataObject.HardwareProfileId;
                    this.ReceiptType = odataObject.ReceiptType;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return PrinterClass;
            }());
            Entities.PrinterClass = PrinterClass;
            var UnitOfMeasureConversionClass = (function () {
                function UnitOfMeasureConversionClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ItemId = odataObject.ItemId;
                    this.FromUnitOfMeasureId = odataObject.FromUnitOfMeasureId;
                    this.ToUnitOfMeasureId = odataObject.ToUnitOfMeasureId;
                    this.FromUnitOfMeasureSymbol = odataObject.FromUnitOfMeasureSymbol;
                    this.ToUnitOfMeasureSymbol = odataObject.ToUnitOfMeasureSymbol;
                    this.IsBackward = odataObject.IsBackward;
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.ProductRecordId = (odataObject.ProductRecordId != null) ? parseInt(odataObject.ProductRecordId, 10) : undefined;
                    this.Factor = (odataObject.Factor != null) ? parseFloat(odataObject.Factor) : undefined;
                    this.Numerator = odataObject.Numerator;
                    this.Denominator = odataObject.Denominator;
                    this.InnerOffset = (odataObject.InnerOffset != null) ? parseFloat(odataObject.InnerOffset) : undefined;
                    this.OuterOffset = (odataObject.OuterOffset != null) ? parseFloat(odataObject.OuterOffset) : undefined;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return UnitOfMeasureConversionClass;
            }());
            Entities.UnitOfMeasureConversionClass = UnitOfMeasureConversionClass;
            var PriceLineClass = (function () {
                function PriceLineClass(odataObject) {
                    odataObject = odataObject || {};
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.Value = (odataObject.Value != null) ? parseFloat(odataObject.Value) : undefined;
                    this.PriceMethod = odataObject.PriceMethod;
                    this.OriginId = odataObject.OriginId;
                    this.PriceChangedByExtensions = odataObject.PriceChangedByExtensions;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return PriceLineClass;
            }());
            Entities.PriceLineClass = PriceLineClass;
            var BasePriceLineClass = (function (_super) {
                __extends(BasePriceLineClass, _super);
                function BasePriceLineClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.BasePriceLine";
                    return _this;
                }
                return BasePriceLineClass;
            }(PriceLineClass));
            Entities.BasePriceLineClass = BasePriceLineClass;
            var PriceAdjustmentPriceLineClass = (function (_super) {
                __extends(PriceAdjustmentPriceLineClass, _super);
                function PriceAdjustmentPriceLineClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.IsCompoundable = odataObject.IsCompoundable;
                    _this.Concurrency = odataObject.Concurrency;
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.PriceAdjustmentPriceLine";
                    return _this;
                }
                return PriceAdjustmentPriceLineClass;
            }(PriceLineClass));
            Entities.PriceAdjustmentPriceLineClass = PriceAdjustmentPriceLineClass;
            var TradeAgreementPriceLineClass = (function (_super) {
                __extends(TradeAgreementPriceLineClass, _super);
                function TradeAgreementPriceLineClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.TradeAgreementPriceLine";
                    return _this;
                }
                return TradeAgreementPriceLineClass;
            }(PriceLineClass));
            Entities.TradeAgreementPriceLineClass = TradeAgreementPriceLineClass;
            var ReturnLabelContentClass = (function () {
                function ReturnLabelContentClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ReturnLocationText = odataObject.ReturnLocationText;
                    this.ReturnWarehouseText = odataObject.ReturnWarehouseText;
                    this.ReturnReasonText = odataObject.ReturnReasonText;
                    this.ReturnPalleteText = odataObject.ReturnPalleteText;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ReturnLabelContentClass;
            }());
            Entities.ReturnLabelContentClass = ReturnLabelContentClass;
            var TransferOrderJournalLineClass = (function () {
                function TransferOrderJournalLineClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ItemId = odataObject.ItemId;
                    this.ItemName = odataObject.ItemName;
                    this.InventDimId = odataObject.InventDimId;
                    this.TotalQuantityShipped = (odataObject.TotalQuantityShipped != null) ? parseFloat(odataObject.TotalQuantityShipped) : undefined;
                    this.QuantityShipped = (odataObject.QuantityShipped != null) ? parseFloat(odataObject.QuantityShipped) : undefined;
                    this.TransferQuantity = (odataObject.TransferQuantity != null) ? parseFloat(odataObject.TransferQuantity) : undefined;
                    this.UnitId = odataObject.UnitId;
                    this.ConfigId = odataObject.ConfigId;
                    this.InventSizeId = odataObject.InventSizeId;
                    this.InventColorId = odataObject.InventColorId;
                    this.InventStyleId = odataObject.InventStyleId;
                    this.DeliveryMethod = odataObject.DeliveryMethod;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return TransferOrderJournalLineClass;
            }());
            Entities.TransferOrderJournalLineClass = TransferOrderJournalLineClass;
            var KitTransactionLineClass = (function () {
                function KitTransactionLineClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ItemId = odataObject.ItemId;
                    this.Quantity = (odataObject.Quantity != null) ? parseFloat(odataObject.Quantity) : undefined;
                    this.InventoryDimensionId = odataObject.InventoryDimensionId;
                    this.ProductId = (odataObject.ProductId != null) ? parseInt(odataObject.ProductId, 10) : undefined;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return KitTransactionLineClass;
            }());
            Entities.KitTransactionLineClass = KitTransactionLineClass;
            var TenderDetailClass = (function () {
                function TenderDetailClass(odataObject) {
                    odataObject = odataObject || {};
                    this.LineNumber = (odataObject.LineNumber != null) ? parseFloat(odataObject.LineNumber) : undefined;
                    this.Amount = (odataObject.Amount != null) ? parseFloat(odataObject.Amount) : undefined;
                    this.AmountInForeignCurrency = (odataObject.AmountInForeignCurrency != null) ? parseFloat(odataObject.AmountInForeignCurrency) : undefined;
                    this.ForeignCurrencyExchangeRate = (odataObject.ForeignCurrencyExchangeRate != null) ? parseFloat(odataObject.ForeignCurrencyExchangeRate) : undefined;
                    this.ForeignCurrency = odataObject.ForeignCurrency;
                    this.BankBagNumber = odataObject.BankBagNumber;
                    this.TenderTypeId = odataObject.TenderTypeId;
                    this.TenderRecount = odataObject.TenderRecount;
                    this.DenominationDetails = undefined;
                    if (odataObject.DenominationDetails) {
                        this.DenominationDetails = [];
                        for (var i = 0; i < odataObject.DenominationDetails.length; i++) {
                            if (odataObject.DenominationDetails[i] != null) {
                                if (odataObject.DenominationDetails[i]['@odata.type'] != null) {
                                    var className = odataObject.DenominationDetails[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.DenominationDetails[i] = new Commerce.Proxy.Entities[className](odataObject.DenominationDetails[i]);
                                    }
                                }
                                else {
                                    this.DenominationDetails[i] = new DenominationDetailClass(odataObject.DenominationDetails[i]);
                                }
                            }
                            else {
                                this.DenominationDetails[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return TenderDetailClass;
            }());
            Entities.TenderDetailClass = TenderDetailClass;
            var DenominationDetailClass = (function () {
                function DenominationDetailClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Type = odataObject.Type;
                    this.Currency = odataObject.Currency;
                    this.DenominationAmount = (odataObject.DenominationAmount != null) ? parseFloat(odataObject.DenominationAmount) : undefined;
                    this.QuantityDeclared = odataObject.QuantityDeclared;
                    this.AmountDeclared = (odataObject.AmountDeclared != null) ? parseFloat(odataObject.AmountDeclared) : undefined;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return DenominationDetailClass;
            }());
            Entities.DenominationDetailClass = DenominationDetailClass;
            var ButtonGridZoneClass = (function () {
                function ButtonGridZoneClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ButtonGridId = odataObject.ButtonGridId;
                    this.ZoneId = odataObject.ZoneId;
                    this.ZoneName = odataObject.ZoneName;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ButtonGridZoneClass;
            }());
            Entities.ButtonGridZoneClass = ButtonGridZoneClass;
            var ImageZoneClass = (function () {
                function ImageZoneClass(odataObject) {
                    odataObject = odataObject || {};
                    this.PictureId = odataObject.PictureId;
                    this.PictureAsBase64 = odataObject.PictureAsBase64;
                    this.ZoneId = odataObject.ZoneId;
                    this.ZoneName = odataObject.ZoneName;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ImageZoneClass;
            }());
            Entities.ImageZoneClass = ImageZoneClass;
            var ReportZoneClass = (function () {
                function ReportZoneClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ReportRecordId = (odataObject.ReportRecordId != null) ? parseInt(odataObject.ReportRecordId, 10) : undefined;
                    this.ZoneId = odataObject.ZoneId;
                    this.ZoneName = odataObject.ZoneName;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ReportZoneClass;
            }());
            Entities.ReportZoneClass = ReportZoneClass;
            var SalesInvoiceLineClass = (function () {
                function SalesInvoiceLineClass(odataObject) {
                    odataObject = odataObject || {};
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.ItemId = odataObject.ItemId;
                    this.ProductName = odataObject.ProductName;
                    this.InventDimensionId = odataObject.InventDimensionId;
                    this.InventTransactionId = odataObject.InventTransactionId;
                    this.Quantity = (odataObject.Quantity != null) ? parseFloat(odataObject.Quantity) : undefined;
                    this.Price = (odataObject.Price != null) ? parseFloat(odataObject.Price) : undefined;
                    this.DiscountPercent = (odataObject.DiscountPercent != null) ? parseFloat(odataObject.DiscountPercent) : undefined;
                    this.DiscountAmount = (odataObject.DiscountAmount != null) ? parseFloat(odataObject.DiscountAmount) : undefined;
                    this.BatchId = odataObject.BatchId;
                    this.NetAmount = (odataObject.NetAmount != null) ? parseFloat(odataObject.NetAmount) : undefined;
                    this.Site = odataObject.Site;
                    this.Warehouse = odataObject.Warehouse;
                    this.SerialId = odataObject.SerialId;
                    this.ColorId = odataObject.ColorId;
                    this.SizeId = odataObject.SizeId;
                    this.StyleId = odataObject.StyleId;
                    this.ConfigId = odataObject.ConfigId;
                    this.ColorName = odataObject.ColorName;
                    this.SizeName = odataObject.SizeName;
                    this.StyleName = odataObject.StyleName;
                    this.ConfigName = odataObject.ConfigName;
                    this.SalesTaxGroup = odataObject.SalesTaxGroup;
                    this.ItemTaxGroup = odataObject.ItemTaxGroup;
                    this.SalesMarkup = (odataObject.SalesMarkup != null) ? parseFloat(odataObject.SalesMarkup) : undefined;
                    this.TotalDiscount = (odataObject.TotalDiscount != null) ? parseFloat(odataObject.TotalDiscount) : undefined;
                    this.TotalPercentageDiscount = (odataObject.TotalPercentageDiscount != null) ? parseFloat(odataObject.TotalPercentageDiscount) : undefined;
                    this.LineDiscount = (odataObject.LineDiscount != null) ? parseFloat(odataObject.LineDiscount) : undefined;
                    this.PeriodicDiscount = (odataObject.PeriodicDiscount != null) ? parseFloat(odataObject.PeriodicDiscount) : undefined;
                    this.PeriodicPercentageDiscount = (odataObject.PeriodicPercentageDiscount != null) ? parseFloat(odataObject.PeriodicPercentageDiscount) : undefined;
                    this.LineManualDiscountPercentage = (odataObject.LineManualDiscountPercentage != null) ? parseFloat(odataObject.LineManualDiscountPercentage) : undefined;
                    this.LineManualDiscountAmount = (odataObject.LineManualDiscountAmount != null) ? parseFloat(odataObject.LineManualDiscountAmount) : undefined;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return SalesInvoiceLineClass;
            }());
            Entities.SalesInvoiceLineClass = SalesInvoiceLineClass;
            var ReportRowClass = (function () {
                function ReportRowClass(odataObject) {
                    odataObject = odataObject || {};
                    this.RowData = undefined;
                    if (odataObject.RowData) {
                        this.RowData = [];
                        for (var i = 0; i < odataObject.RowData.length; i++) {
                            if (odataObject.RowData[i] != null) {
                                if (odataObject.RowData[i]['@odata.type'] != null) {
                                    var className = odataObject.RowData[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.RowData[i] = new Commerce.Proxy.Entities[className](odataObject.RowData[i]);
                                    }
                                }
                                else {
                                    this.RowData[i] = new CommercePropertyClass(odataObject.RowData[i]);
                                }
                            }
                            else {
                                this.RowData[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ReportRowClass;
            }());
            Entities.ReportRowClass = ReportRowClass;
            var FormAnnotationClass = (function (_super) {
                __extends(FormAnnotationClass, _super);
                function FormAnnotationClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.MenuItemLabel = odataObject.MenuItemLabel;
                    _this.MenuItemName = odataObject.MenuItemName;
                    _this.MenuItemType = odataObject.MenuItemType;
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.FormAnnotation";
                    return _this;
                }
                return FormAnnotationClass;
            }(AnnotationClass));
            Entities.FormAnnotationClass = FormAnnotationClass;
            var TaskGuideAnnotationClass = (function (_super) {
                __extends(TaskGuideAnnotationClass, _super);
                function TaskGuideAnnotationClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.RecordingValueType = odataObject.RecordingValueType;
                    _this.Title = odataObject.Title;
                    _this.ExampleText = odataObject.ExampleText;
                    _this.Hidden = odataObject.Hidden;
                    _this.GlobalId = odataObject.GlobalId;
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.TaskGuideAnnotation";
                    return _this;
                }
                return TaskGuideAnnotationClass;
            }(AnnotationClass));
            Entities.TaskGuideAnnotationClass = TaskGuideAnnotationClass;
            var CommandArgumentClass = (function () {
                function CommandArgumentClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Value = odataObject.Value;
                    this.IsReference = odataObject.IsReference;
                }
                return CommandArgumentClass;
            }());
            Entities.CommandArgumentClass = CommandArgumentClass;
            var PropertyUserActionClass = (function (_super) {
                __extends(PropertyUserActionClass, _super);
                function PropertyUserActionClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.Value = odataObject.Value;
                    _this.ValueLabel = odataObject.ValueLabel;
                    _this.PropertyName = odataObject.PropertyName;
                    _this.ControlName = odataObject.ControlName;
                    _this.ControlType = odataObject.ControlType;
                    _this.UserActionType = odataObject.UserActionType;
                    _this.IsReference = odataObject.IsReference;
                    _this.LabelId = odataObject.LabelId;
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.PropertyUserAction";
                    return _this;
                }
                return PropertyUserActionClass;
            }(FormUserActionClass));
            Entities.PropertyUserActionClass = PropertyUserActionClass;
            var InfoUserActionClass = (function (_super) {
                __extends(InfoUserActionClass, _super);
                function InfoUserActionClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.FormId = odataObject.FormId;
                    _this.ControlLabel = odataObject.ControlLabel;
                    _this.ControlLabelId = odataObject.ControlLabelId;
                    _this.ControlName = odataObject.ControlName;
                    _this.Text = odataObject.Text;
                    _this.Notes = odataObject.Notes;
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.InfoUserAction";
                    return _this;
                }
                return InfoUserActionClass;
            }(UserActionClass));
            Entities.InfoUserActionClass = InfoUserActionClass;
            var MenuItemUserActionClass = (function (_super) {
                __extends(MenuItemUserActionClass, _super);
                function MenuItemUserActionClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.MenuItemName = odataObject.MenuItemName;
                    _this.MenuItemType = odataObject.MenuItemType;
                    _this.NavigationPath = undefined;
                    if (odataObject.NavigationPath) {
                        _this.NavigationPath = [];
                        for (var i = 0; i < odataObject.NavigationPath.length; i++) {
                            if (odataObject.NavigationPath[i] != null) {
                                _this.NavigationPath[i] = odataObject.NavigationPath[i];
                            }
                            else {
                                _this.NavigationPath[i] = undefined;
                            }
                        }
                    }
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.MenuItemUserAction";
                    return _this;
                }
                return MenuItemUserActionClass;
            }(UserActionClass));
            Entities.MenuItemUserActionClass = MenuItemUserActionClass;
            var ValidationUserActionClass = (function (_super) {
                __extends(ValidationUserActionClass, _super);
                function ValidationUserActionClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.Name = odataObject.Name;
                    _this.Comment = odataObject.Comment;
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.ValidationUserAction";
                    return _this;
                }
                return ValidationUserActionClass;
            }(UserActionClass));
            Entities.ValidationUserActionClass = ValidationUserActionClass;
            var ArtifactSummaryClass = (function () {
                function ArtifactSummaryClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ArtifactType = odataObject.ArtifactType;
                    this.LanguageTags = undefined;
                    if (odataObject.LanguageTags) {
                        this.LanguageTags = [];
                        for (var i = 0; i < odataObject.LanguageTags.length; i++) {
                            if (odataObject.LanguageTags[i] != null) {
                                this.LanguageTags[i] = odataObject.LanguageTags[i];
                            }
                            else {
                                this.LanguageTags[i] = undefined;
                            }
                        }
                    }
                }
                return ArtifactSummaryClass;
            }());
            Entities.ArtifactSummaryClass = ArtifactSummaryClass;
            var MetadataPropertyValueClass = (function () {
                function MetadataPropertyValueClass(odataObject) {
                    odataObject = odataObject || {};
                    this.PropertyId = odataObject.PropertyId;
                    this.SingleValue = odataObject.SingleValue;
                    this.MultiValue = undefined;
                    if (odataObject.MultiValue) {
                        this.MultiValue = [];
                        for (var i = 0; i < odataObject.MultiValue.length; i++) {
                            if (odataObject.MultiValue[i] != null) {
                                if (odataObject.MultiValue[i]['@odata.type'] != null) {
                                    var className = odataObject.MultiValue[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.MultiValue[i] = new Commerce.Proxy.Entities[className](odataObject.MultiValue[i]);
                                    }
                                }
                                else {
                                    this.MultiValue[i] = new MetadataTextClass(odataObject.MultiValue[i]);
                                }
                            }
                            else {
                                this.MultiValue[i] = undefined;
                            }
                        }
                    }
                    this.Tags = undefined;
                    if (odataObject.Tags) {
                        this.Tags = [];
                        for (var i = 0; i < odataObject.Tags.length; i++) {
                            if (odataObject.Tags[i] != null) {
                                this.Tags[i] = odataObject.Tags[i];
                            }
                            else {
                                this.Tags[i] = undefined;
                            }
                        }
                    }
                    this.ComboBox = odataObject.ComboBox;
                    this.MultiSelect = undefined;
                    if (odataObject.MultiSelect) {
                        this.MultiSelect = [];
                        for (var i = 0; i < odataObject.MultiSelect.length; i++) {
                            if (odataObject.MultiSelect[i] != null) {
                                this.MultiSelect[i] = odataObject.MultiSelect[i];
                            }
                            else {
                                this.MultiSelect[i] = undefined;
                            }
                        }
                    }
                    this.Links = undefined;
                    if (odataObject.Links) {
                        this.Links = [];
                        for (var i = 0; i < odataObject.Links.length; i++) {
                            if (odataObject.Links[i] != null) {
                                if (odataObject.Links[i]['@odata.type'] != null) {
                                    var className = odataObject.Links[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.Links[i] = new Commerce.Proxy.Entities[className](odataObject.Links[i]);
                                    }
                                }
                                else {
                                    this.Links[i] = new MetadataHypertextLinkClass(odataObject.Links[i]);
                                }
                            }
                            else {
                                this.Links[i] = undefined;
                            }
                        }
                    }
                }
                return MetadataPropertyValueClass;
            }());
            Entities.MetadataPropertyValueClass = MetadataPropertyValueClass;
            var MetadataTextClass = (function () {
                function MetadataTextClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Id = odataObject.Id;
                    this.Text = odataObject.Text;
                }
                return MetadataTextClass;
            }());
            Entities.MetadataTextClass = MetadataTextClass;
            var MetadataHypertextLinkClass = (function () {
                function MetadataHypertextLinkClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Id = odataObject.Id;
                    this.DisplayName = odataObject.DisplayName;
                    this.Url = odataObject.Url;
                }
                return MetadataHypertextLinkClass;
            }());
            Entities.MetadataHypertextLinkClass = MetadataHypertextLinkClass;
            var FormContextClass = (function () {
                function FormContextClass(odataObject) {
                    odataObject = odataObject || {};
                    this.FormID = odataObject.FormID;
                    this.FormName = odataObject.FormName;
                    this.RecordingName = odataObject.RecordingName;
                    this.HasMetadata = odataObject.HasMetadata;
                    this.Sequence = odataObject.Sequence;
                    this.Annotations = undefined;
                    if (odataObject.Annotations) {
                        this.Annotations = [];
                        for (var i = 0; i < odataObject.Annotations.length; i++) {
                            if (odataObject.Annotations[i] != null) {
                                if (odataObject.Annotations[i]['@odata.type'] != null) {
                                    var className = odataObject.Annotations[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.Annotations[i] = new Commerce.Proxy.Entities[className](odataObject.Annotations[i]);
                                    }
                                }
                                else {
                                    this.Annotations[i] = new AnnotationClass(odataObject.Annotations[i]);
                                }
                            }
                            else {
                                this.Annotations[i] = undefined;
                            }
                        }
                    }
                }
                return FormContextClass;
            }());
            Entities.FormContextClass = FormContextClass;
            var SalesAffiliationLoyaltyTierClass = (function (_super) {
                __extends(SalesAffiliationLoyaltyTierClass, _super);
                function SalesAffiliationLoyaltyTierClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.TransactionId = odataObject.TransactionId;
                    _this.ChannelId = (odataObject.ChannelId != null) ? parseInt(odataObject.ChannelId, 10) : undefined;
                    _this.TerminalId = odataObject.TerminalId;
                    _this.ReceiptId = odataObject.ReceiptId;
                    _this.StaffId = odataObject.StaffId;
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.SalesAffiliationLoyaltyTier";
                    return _this;
                }
                return SalesAffiliationLoyaltyTierClass;
            }(AffiliationLoyaltyTierClass));
            Entities.SalesAffiliationLoyaltyTierClass = SalesAffiliationLoyaltyTierClass;
            var TaxViewLineClass = (function () {
                function TaxViewLineClass(odataObject) {
                    odataObject = odataObject || {};
                    this.TaxId = odataObject.TaxId;
                    this.TaxAmount = (odataObject.TaxAmount != null) ? parseFloat(odataObject.TaxAmount) : undefined;
                }
                return TaxViewLineClass;
            }());
            Entities.TaxViewLineClass = TaxViewLineClass;
            var CouponClass = (function () {
                function CouponClass(odataObject) {
                    odataObject = odataObject || {};
                    this.CodeId = odataObject.CodeId;
                    this.Code = odataObject.Code;
                    this.DiscountOfferId = odataObject.DiscountOfferId;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return CouponClass;
            }());
            Entities.CouponClass = CouponClass;
            var CustomerAccountDepositLineClass = (function () {
                function CustomerAccountDepositLineClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Amount = (odataObject.Amount != null) ? parseFloat(odataObject.Amount) : undefined;
                    this.CustomerAccount = odataObject.CustomerAccount;
                    this.Comment = odataObject.Comment;
                    this.StoreNumber = odataObject.StoreNumber;
                    this.Terminal = odataObject.Terminal;
                    this.Shift = odataObject.Shift;
                    this.TransactionStatusValue = odataObject.TransactionStatusValue;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return CustomerAccountDepositLineClass;
            }());
            Entities.CustomerAccountDepositLineClass = CustomerAccountDepositLineClass;
            var CustomerAttributeClass = (function () {
                function CustomerAttributeClass(odataObject) {
                    odataObject = odataObject || {};
                    if (odataObject.AttributeValue == null) {
                        this.AttributeValue = undefined;
                    }
                    else if (odataObject.AttributeValue['@odata.type'] == null) {
                        this.AttributeValue = new CommercePropertyValueClass(odataObject.AttributeValue);
                    }
                    else {
                        var className = odataObject.AttributeValue['@odata.type'];
                        className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                        if (Commerce.Proxy.Entities[className]) {
                            this.AttributeValue = new Commerce.Proxy.Entities[className](odataObject.AttributeValue);
                        }
                    }
                    this.Units = odataObject.Units;
                    this.RecordId = (odataObject.RecordId != null) ? parseInt(odataObject.RecordId, 10) : undefined;
                    this.Name = odataObject.Name;
                    this.KeyName = odataObject.KeyName;
                    this.DataTypeValue = odataObject.DataTypeValue;
                    this.NameTranslations = undefined;
                    if (odataObject.NameTranslations) {
                        this.NameTranslations = [];
                        for (var i = 0; i < odataObject.NameTranslations.length; i++) {
                            if (odataObject.NameTranslations[i] != null) {
                                if (odataObject.NameTranslations[i]['@odata.type'] != null) {
                                    var className = odataObject.NameTranslations[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.NameTranslations[i] = new Commerce.Proxy.Entities[className](odataObject.NameTranslations[i]);
                                    }
                                }
                                else {
                                    this.NameTranslations[i] = new TextValueTranslationClass(odataObject.NameTranslations[i]);
                                }
                            }
                            else {
                                this.NameTranslations[i] = undefined;
                            }
                        }
                    }
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return CustomerAttributeClass;
            }());
            Entities.CustomerAttributeClass = CustomerAttributeClass;
            var LoyaltyRewardPointLineClass = (function () {
                function LoyaltyRewardPointLineClass(odataObject) {
                    odataObject = odataObject || {};
                    this.TransactionId = odataObject.TransactionId;
                    this.LoyaltyGroupRecordId = (odataObject.LoyaltyGroupRecordId != null) ? parseInt(odataObject.LoyaltyGroupRecordId, 10) : undefined;
                    this.LoyaltyCardNumber = odataObject.LoyaltyCardNumber;
                    this.CustomerAccount = odataObject.CustomerAccount;
                    this.EntryDate = (odataObject.EntryDate instanceof Date) ? odataObject.EntryDate
                        : (odataObject.EntryDate != null) ? OData.jsonLightReadStringPropertyValue(odataObject.EntryDate, "Edm.DateTimeOffset", false) : undefined;
                    this.EntryTime = odataObject.EntryTime;
                    this.EntryTypeValue = odataObject.EntryTypeValue;
                    this.ExpirationDate = (odataObject.ExpirationDate instanceof Date) ? odataObject.ExpirationDate
                        : (odataObject.ExpirationDate != null) ? OData.jsonLightReadStringPropertyValue(odataObject.ExpirationDate, "Edm.DateTimeOffset", false) : undefined;
                    this.LineNumber = (odataObject.LineNumber != null) ? parseFloat(odataObject.LineNumber) : undefined;
                    this.LoyaltyTierRecordId = (odataObject.LoyaltyTierRecordId != null) ? parseInt(odataObject.LoyaltyTierRecordId, 10) : undefined;
                    this.RewardPointRecordId = (odataObject.RewardPointRecordId != null) ? parseInt(odataObject.RewardPointRecordId, 10) : undefined;
                    this.RewardPointAmountQuantity = (odataObject.RewardPointAmountQuantity != null) ? parseFloat(odataObject.RewardPointAmountQuantity) : undefined;
                    this.RewardPointId = odataObject.RewardPointId;
                    this.RewardPointIsRedeemable = odataObject.RewardPointIsRedeemable;
                    this.RewardPointType = odataObject.RewardPointType;
                    this.RewardPointCurrency = odataObject.RewardPointCurrency;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return LoyaltyRewardPointLineClass;
            }());
            Entities.LoyaltyRewardPointLineClass = LoyaltyRewardPointLineClass;
            var ShiftTaxLineClass = (function () {
                function ShiftTaxLineClass(odataObject) {
                    odataObject = odataObject || {};
                    this.TaxCode = odataObject.TaxCode;
                    this.TaxAmount = (odataObject.TaxAmount != null) ? parseFloat(odataObject.TaxAmount) : undefined;
                    this.TaxRate = (odataObject.TaxRate != null) ? parseFloat(odataObject.TaxRate) : undefined;
                    this.NetAmount = (odataObject.NetAmount != null) ? parseFloat(odataObject.NetAmount) : undefined;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ShiftTaxLineClass;
            }());
            Entities.ShiftTaxLineClass = ShiftTaxLineClass;
            var LinkedProductClass = (function () {
                function LinkedProductClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ProductRecordId = (odataObject.ProductRecordId != null) ? parseInt(odataObject.ProductRecordId, 10) : undefined;
                    this.LinkedProductRecordId = (odataObject.LinkedProductRecordId != null) ? parseInt(odataObject.LinkedProductRecordId, 10) : undefined;
                    this.Quantity = (odataObject.Quantity != null) ? parseFloat(odataObject.Quantity) : undefined;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return LinkedProductClass;
            }());
            Entities.LinkedProductClass = LinkedProductClass;
            var RelatedProductClass = (function () {
                function RelatedProductClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ProductRecordId = (odataObject.ProductRecordId != null) ? parseInt(odataObject.ProductRecordId, 10) : undefined;
                    this.RelatedProductRecordId = (odataObject.RelatedProductRecordId != null) ? parseInt(odataObject.RelatedProductRecordId, 10) : undefined;
                    this.CatalogId = (odataObject.CatalogId != null) ? parseInt(odataObject.CatalogId, 10) : undefined;
                    this.RelationName = odataObject.RelationName;
                    this.IsExcludedRelation = odataObject.IsExcludedRelation;
                    this.IsDirectRelation = odataObject.IsDirectRelation;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return RelatedProductClass;
            }());
            Entities.RelatedProductClass = RelatedProductClass;
            var KitComponentClass = (function () {
                function KitComponentClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return KitComponentClass;
            }());
            Entities.KitComponentClass = KitComponentClass;
            var ListingIdentityClass = (function () {
                function ListingIdentityClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ProductId = (odataObject.ProductId != null) ? parseInt(odataObject.ProductId, 10) : undefined;
                    this.LanguageId = odataObject.LanguageId;
                    this.CatalogId = (odataObject.CatalogId != null) ? parseInt(odataObject.CatalogId, 10) : undefined;
                    this.Tag = odataObject.Tag;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return ListingIdentityClass;
            }());
            Entities.ListingIdentityClass = ListingIdentityClass;
            var ExtensibleAuditEventTypeClass = (function (_super) {
                __extends(ExtensibleAuditEventTypeClass, _super);
                function ExtensibleAuditEventTypeClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.ExtensibleAuditEventType";
                    return _this;
                }
                return ExtensibleAuditEventTypeClass;
            }(ExtensibleEnumerationClass));
            Entities.ExtensibleAuditEventTypeClass = ExtensibleAuditEventTypeClass;
            var NotificationDetailClass = (function () {
                function NotificationDetailClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ActionProperty = odataObject.ActionProperty;
                    this.ItemCount = (odataObject.ItemCount != null) ? parseInt(odataObject.ItemCount, 10) : undefined;
                    this.DisplayText = odataObject.DisplayText;
                    this.IsNew = odataObject.IsNew;
                    this.LastUpdatedDateTimeStr = odataObject.LastUpdatedDateTimeStr;
                    this.IsSuccess = odataObject.IsSuccess;
                    this.IsLiveContentOnly = odataObject.IsLiveContentOnly;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return NotificationDetailClass;
            }());
            Entities.NotificationDetailClass = NotificationDetailClass;
            var AttachedServiceClass = (function () {
                function AttachedServiceClass(odataObject) {
                    odataObject = odataObject || {};
                    this.BaseUrl = odataObject.BaseUrl;
                    this.ServiceId = odataObject.ServiceId;
                    this.StatusValue = odataObject.StatusValue;
                    this.ExtensionProperties = undefined;
                    if (odataObject.ExtensionProperties) {
                        this.ExtensionProperties = [];
                        for (var i = 0; i < odataObject.ExtensionProperties.length; i++) {
                            if (odataObject.ExtensionProperties[i] != null) {
                                if (odataObject.ExtensionProperties[i]['@odata.type'] != null) {
                                    var className = odataObject.ExtensionProperties[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        this.ExtensionProperties[i] = new Commerce.Proxy.Entities[className](odataObject.ExtensionProperties[i]);
                                    }
                                }
                                else {
                                    this.ExtensionProperties[i] = new CommercePropertyClass(odataObject.ExtensionProperties[i]);
                                }
                            }
                            else {
                                this.ExtensionProperties[i] = undefined;
                            }
                        }
                    }
                }
                return AttachedServiceClass;
            }());
            Entities.AttachedServiceClass = AttachedServiceClass;
            var ParameterSetClass = (function () {
                function ParameterSetClass(odataObject) {
                    odataObject = odataObject || {};
                }
                return ParameterSetClass;
            }());
            Entities.ParameterSetClass = ParameterSetClass;
            var CommerceExceptionClass = (function () {
                function CommerceExceptionClass(odataObject) {
                    odataObject = odataObject || {};
                    this.LocalizedMessage = odataObject.LocalizedMessage;
                    this.ErrorResourceId = odataObject.ErrorResourceId;
                }
                return CommerceExceptionClass;
            }());
            Entities.CommerceExceptionClass = CommerceExceptionClass;
            var DataValidationExceptionClass = (function (_super) {
                __extends(DataValidationExceptionClass, _super);
                function DataValidationExceptionClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.ValidationResults = undefined;
                    if (odataObject.ValidationResults) {
                        _this.ValidationResults = [];
                        for (var i = 0; i < odataObject.ValidationResults.length; i++) {
                            if (odataObject.ValidationResults[i] != null) {
                                if (odataObject.ValidationResults[i]['@odata.type'] != null) {
                                    var className = odataObject.ValidationResults[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        _this.ValidationResults[i] = new Commerce.Proxy.Entities[className](odataObject.ValidationResults[i]);
                                    }
                                }
                                else {
                                    _this.ValidationResults[i] = new DataValidationFailureClass(odataObject.ValidationResults[i]);
                                }
                            }
                            else {
                                _this.ValidationResults[i] = undefined;
                            }
                        }
                    }
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DataValidationException";
                    return _this;
                }
                return DataValidationExceptionClass;
            }(CommerceExceptionClass));
            Entities.DataValidationExceptionClass = DataValidationExceptionClass;
            var MissingRequiredReasonCodeExceptionClass = (function (_super) {
                __extends(MissingRequiredReasonCodeExceptionClass, _super);
                function MissingRequiredReasonCodeExceptionClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.RequiredReasonCodes = undefined;
                    if (odataObject.RequiredReasonCodes) {
                        _this.RequiredReasonCodes = [];
                        for (var i = 0; i < odataObject.RequiredReasonCodes.length; i++) {
                            if (odataObject.RequiredReasonCodes[i] != null) {
                                if (odataObject.RequiredReasonCodes[i]['@odata.type'] != null) {
                                    var className = odataObject.RequiredReasonCodes[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        _this.RequiredReasonCodes[i] = new Commerce.Proxy.Entities[className](odataObject.RequiredReasonCodes[i]);
                                    }
                                }
                                else {
                                    _this.RequiredReasonCodes[i] = new ReasonCodeClass(odataObject.RequiredReasonCodes[i]);
                                }
                            }
                            else {
                                _this.RequiredReasonCodes[i] = undefined;
                            }
                        }
                    }
                    _this.TransactionRequiredReasonCodeIds = undefined;
                    if (odataObject.TransactionRequiredReasonCodeIds) {
                        _this.TransactionRequiredReasonCodeIds = [];
                        for (var i = 0; i < odataObject.TransactionRequiredReasonCodeIds.length; i++) {
                            if (odataObject.TransactionRequiredReasonCodeIds[i] != null) {
                                _this.TransactionRequiredReasonCodeIds[i] = odataObject.TransactionRequiredReasonCodeIds[i];
                            }
                            else {
                                _this.TransactionRequiredReasonCodeIds[i] = undefined;
                            }
                        }
                    }
                    _this.ReasonCodeRequirements = undefined;
                    if (odataObject.ReasonCodeRequirements) {
                        _this.ReasonCodeRequirements = [];
                        for (var i = 0; i < odataObject.ReasonCodeRequirements.length; i++) {
                            if (odataObject.ReasonCodeRequirements[i] != null) {
                                if (odataObject.ReasonCodeRequirements[i]['@odata.type'] != null) {
                                    var className = odataObject.ReasonCodeRequirements[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        _this.ReasonCodeRequirements[i] = new Commerce.Proxy.Entities[className](odataObject.ReasonCodeRequirements[i]);
                                    }
                                }
                                else {
                                    _this.ReasonCodeRequirements[i] = new ReasonCodeRequirementClass(odataObject.ReasonCodeRequirements[i]);
                                }
                            }
                            else {
                                _this.ReasonCodeRequirements[i] = undefined;
                            }
                        }
                    }
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.MissingRequiredReasonCodeException";
                    return _this;
                }
                return MissingRequiredReasonCodeExceptionClass;
            }(DataValidationExceptionClass));
            Entities.MissingRequiredReasonCodeExceptionClass = MissingRequiredReasonCodeExceptionClass;
            var SecurityExceptionClass = (function (_super) {
                __extends(SecurityExceptionClass, _super);
                function SecurityExceptionClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.SecurityException";
                    return _this;
                }
                return SecurityExceptionClass;
            }(CommerceExceptionClass));
            Entities.SecurityExceptionClass = SecurityExceptionClass;
            var DeviceAuthenticationExceptionClass = (function (_super) {
                __extends(DeviceAuthenticationExceptionClass, _super);
                function DeviceAuthenticationExceptionClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.DeviceAuthenticationException";
                    return _this;
                }
                return DeviceAuthenticationExceptionClass;
            }(SecurityExceptionClass));
            Entities.DeviceAuthenticationExceptionClass = DeviceAuthenticationExceptionClass;
            var HeadquarterTransactionServiceExceptionClass = (function (_super) {
                __extends(HeadquarterTransactionServiceExceptionClass, _super);
                function HeadquarterTransactionServiceExceptionClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.HeadquarterTransactionServiceException";
                    return _this;
                }
                return HeadquarterTransactionServiceExceptionClass;
            }(CommerceExceptionClass));
            Entities.HeadquarterTransactionServiceExceptionClass = HeadquarterTransactionServiceExceptionClass;
            var UserAuthenticationExceptionClass = (function (_super) {
                __extends(UserAuthenticationExceptionClass, _super);
                function UserAuthenticationExceptionClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.UserAuthenticationException";
                    return _this;
                }
                return UserAuthenticationExceptionClass;
            }(SecurityExceptionClass));
            Entities.UserAuthenticationExceptionClass = UserAuthenticationExceptionClass;
            var UserAuthorizationExceptionClass = (function (_super) {
                __extends(UserAuthorizationExceptionClass, _super);
                function UserAuthorizationExceptionClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.UserAuthorizationException";
                    return _this;
                }
                return UserAuthorizationExceptionClass;
            }(SecurityExceptionClass));
            Entities.UserAuthorizationExceptionClass = UserAuthorizationExceptionClass;
            var FeatureNotSupportedExceptionClass = (function (_super) {
                __extends(FeatureNotSupportedExceptionClass, _super);
                function FeatureNotSupportedExceptionClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.FeatureNotSupportedException";
                    return _this;
                }
                return FeatureNotSupportedExceptionClass;
            }(CommerceExceptionClass));
            Entities.FeatureNotSupportedExceptionClass = FeatureNotSupportedExceptionClass;
            var CartValidationExceptionClass = (function (_super) {
                __extends(CartValidationExceptionClass, _super);
                function CartValidationExceptionClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.CartValidationException";
                    return _this;
                }
                return CartValidationExceptionClass;
            }(DataValidationExceptionClass));
            Entities.CartValidationExceptionClass = CartValidationExceptionClass;
            var TenderValidationExceptionClass = (function (_super) {
                __extends(TenderValidationExceptionClass, _super);
                function TenderValidationExceptionClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.TenderTypeId = odataObject.TenderTypeId;
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.TenderValidationException";
                    return _this;
                }
                return TenderValidationExceptionClass;
            }(DataValidationExceptionClass));
            Entities.TenderValidationExceptionClass = TenderValidationExceptionClass;
            var PaymentExceptionClass = (function (_super) {
                __extends(PaymentExceptionClass, _super);
                function PaymentExceptionClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.PaymentSdkErrors = undefined;
                    if (odataObject.PaymentSdkErrors) {
                        _this.PaymentSdkErrors = [];
                        for (var i = 0; i < odataObject.PaymentSdkErrors.length; i++) {
                            if (odataObject.PaymentSdkErrors[i] != null) {
                                if (odataObject.PaymentSdkErrors[i]['@odata.type'] != null) {
                                    var className = odataObject.PaymentSdkErrors[i]['@odata.type'];
                                    className = className.substr(className.lastIndexOf('.') + 1).concat("Class");
                                    if (Commerce.Proxy.Entities[className]) {
                                        _this.PaymentSdkErrors[i] = new Commerce.Proxy.Entities[className](odataObject.PaymentSdkErrors[i]);
                                    }
                                }
                                else {
                                    _this.PaymentSdkErrors[i] = new PaymentErrorClass(odataObject.PaymentSdkErrors[i]);
                                }
                            }
                            else {
                                _this.PaymentSdkErrors[i] = undefined;
                            }
                        }
                    }
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.PaymentException";
                    return _this;
                }
                return PaymentExceptionClass;
            }(CommerceExceptionClass));
            Entities.PaymentExceptionClass = PaymentExceptionClass;
            var CommerceDataExchangeExceptionClass = (function (_super) {
                __extends(CommerceDataExchangeExceptionClass, _super);
                function CommerceDataExchangeExceptionClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.CommerceDataExchangeException";
                    return _this;
                }
                return CommerceDataExchangeExceptionClass;
            }(CommerceExceptionClass));
            Entities.CommerceDataExchangeExceptionClass = CommerceDataExchangeExceptionClass;
            var ExtensibleEnumerationExceptionClass = (function (_super) {
                __extends(ExtensibleEnumerationExceptionClass, _super);
                function ExtensibleEnumerationExceptionClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.ExtensibleEnumerationException";
                    return _this;
                }
                return ExtensibleEnumerationExceptionClass;
            }(CommerceExceptionClass));
            Entities.ExtensibleEnumerationExceptionClass = ExtensibleEnumerationExceptionClass;
            var DataValidationFailureClass = (function () {
                function DataValidationFailureClass(odataObject) {
                    odataObject = odataObject || {};
                    this.ErrorContext = odataObject.ErrorContext;
                    this.ErrorResourceId = odataObject.ErrorResourceId;
                    this.MemberNames = undefined;
                    if (odataObject.MemberNames) {
                        this.MemberNames = [];
                        for (var i = 0; i < odataObject.MemberNames.length; i++) {
                            if (odataObject.MemberNames[i] != null) {
                                this.MemberNames[i] = odataObject.MemberNames[i];
                            }
                            else {
                                this.MemberNames[i] = undefined;
                            }
                        }
                    }
                    this.LocalizedMessage = odataObject.LocalizedMessage;
                }
                return DataValidationFailureClass;
            }());
            Entities.DataValidationFailureClass = DataValidationFailureClass;
            var ItemDiscontinuedExceptionClass = (function (_super) {
                __extends(ItemDiscontinuedExceptionClass, _super);
                function ItemDiscontinuedExceptionClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.RemovedUnavailableItemIds = odataObject.RemovedUnavailableItemIds;
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.ItemDiscontinuedException";
                    return _this;
                }
                return ItemDiscontinuedExceptionClass;
            }(CommerceExceptionClass));
            Entities.ItemDiscontinuedExceptionClass = ItemDiscontinuedExceptionClass;
            var InsufficientCredentialLengthExceptionClass = (function (_super) {
                __extends(InsufficientCredentialLengthExceptionClass, _super);
                function InsufficientCredentialLengthExceptionClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.ActualLength = odataObject.ActualLength;
                    _this.MinLength = odataObject.MinLength;
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.InsufficientCredentialLengthException";
                    return _this;
                }
                return InsufficientCredentialLengthExceptionClass;
            }(DataValidationExceptionClass));
            Entities.InsufficientCredentialLengthExceptionClass = InsufficientCredentialLengthExceptionClass;
            var StaffPasswordExpiredExceptionClass = (function (_super) {
                __extends(StaffPasswordExpiredExceptionClass, _super);
                function StaffPasswordExpiredExceptionClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.StaffId = odataObject.StaffId;
                    _this["@odata.type"] = "#Microsoft.Dynamics.Commerce.Runtime.StaffPasswordExpiredException";
                    return _this;
                }
                return StaffPasswordExpiredExceptionClass;
            }(UserAuthenticationExceptionClass));
            Entities.StaffPasswordExpiredExceptionClass = StaffPasswordExpiredExceptionClass;
            var WrongEndpointExceptionClass = (function (_super) {
                __extends(WrongEndpointExceptionClass, _super);
                function WrongEndpointExceptionClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    odataObject = odataObject || {};
                    _this.RedirectUri = odataObject.RedirectUri;
                    _this["@odata.type"] = "#Microsoft.Dynamics.Retail.RetailServerLibrary.WrongEndpointException";
                    return _this;
                }
                return WrongEndpointExceptionClass;
            }(CommerceExceptionClass));
            Entities.WrongEndpointExceptionClass = WrongEndpointExceptionClass;
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        "use strict";
        var ObjectExtensions = (function () {
            function ObjectExtensions() {
            }
            ObjectExtensions.isNull = function (object) {
                return (object === null);
            };
            ObjectExtensions.isUndefined = function (object) {
                return (typeof object === 'undefined');
            };
            ObjectExtensions.isOfType = function (object, type) {
                return !ObjectExtensions.isUndefined(object) && object instanceof type;
            };
            ObjectExtensions.isNullOrUndefined = function (object) {
                return ObjectExtensions.isNull(object)
                    || ObjectExtensions.isUndefined(object);
            };
            ObjectExtensions.isFunction = function (object) {
                return typeof object === "function";
            };
            ObjectExtensions.isObject = function (variable) {
                return typeof variable === "object";
            };
            ObjectExtensions.convertToObservableProxyObject = function (obj) {
                if (ObjectExtensions.isNullOrUndefined(obj) || obj.__isObservableProxy ||
                    typeof obj === "string" || typeof obj === "number" || typeof obj === "boolean") {
                    return obj;
                }
                obj.__isObservableProxy = true;
                var keys = Object.keys(obj);
                for (var i = 0; i < keys.length; i++) {
                    var key = keys[i];
                    var keyValue = obj[key];
                    var keyType = typeof keyValue;
                    if (keyType === "string"
                        || keyType === "number"
                        || keyType === "boolean"
                        || keyType === "undefined"
                        || keyValue === null
                        || keyValue instanceof Date
                        || key === "CreatedDateTime") {
                        obj[key] = ko.observable(keyValue);
                    }
                    else if ($.isArray(keyValue)) {
                        keyValue.forEach(function (val) { return ObjectExtensions.convertToObservableProxyObject(val); });
                        obj[key] = ko.observableArray(keyValue);
                    }
                    else if (keyType == "object") {
                        obj[key] = keyValue || null;
                        ObjectExtensions.convertToObservableProxyObject(obj[key]);
                    }
                }
                obj.update = ObjectExtensions.updateObservableProxyObject;
                return obj;
            };
            ObjectExtensions.cloneToObservableProxyObject = function (obj) {
                if (ObjectExtensions.isNullOrUndefined(obj)) {
                    return obj;
                }
                var clone = ObjectExtensions.clone(obj);
                return ObjectExtensions.convertToObservableProxyObject(clone);
            };
            ObjectExtensions.updateObservableProxyObject = function (newValue) {
                if (ObjectExtensions.isNullOrUndefined(newValue)) {
                    return;
                }
                var keys = Object.keys(this);
                for (var i = 0; i < keys.length; i++) {
                    var key = keys[i];
                    var keyValue = this[key];
                    if (keyValue == null) {
                        continue;
                    }
                    else if ('subscribe' in keyValue) {
                        keyValue(newValue[key]);
                    }
                    else if (typeof keyValue == 'object' && newValue[key] != null) {
                        keyValue.update(newValue[key]);
                    }
                }
            };
            ObjectExtensions.unwrapObservableProxyObject = function (proxy) {
                if (!proxy.__isObservableProxy) {
                    return proxy;
                }
                var unwrappedObject = {};
                var keys = Object.keys(proxy);
                for (var i = 0; i < keys.length; i++) {
                    var key = keys[i];
                    var keyValue = proxy[key];
                    if (keyValue == null) {
                        continue;
                    }
                    else if (ko.isObservable(keyValue)) {
                        unwrappedObject[key] = keyValue();
                        if ($.isArray(unwrappedObject[key])) {
                            var array = unwrappedObject[key];
                            for (var j = 0; j < array.length; j++) {
                                array[j] = ObjectExtensions.unwrapObservableProxyObject(array[j]);
                            }
                        }
                    }
                    else if (typeof keyValue == 'object' && keyValue.__isObservableProxy) {
                        unwrappedObject[key] = ObjectExtensions.unwrapObservableProxyObject(keyValue);
                    }
                    else {
                        unwrappedObject[key] = keyValue;
                    }
                }
                delete unwrappedObject.__isObservableProxy;
                delete unwrappedObject.update;
                return unwrappedObject;
            };
            ObjectExtensions.clone = function (origObject) {
                return ObjectExtensions.safeClone(origObject, []);
            };
            ObjectExtensions.safeClone = function (origObject, cloneMap) {
                if (ObjectExtensions.isNullOrUndefined(origObject)) {
                    return origObject;
                }
                var newObj;
                if (origObject instanceof Array) {
                    if (!cloneMap.some(function (val) {
                        if (val.id === origObject) {
                            newObj = val.value;
                            return true;
                        }
                        return false;
                    })) {
                        newObj = [];
                        cloneMap.push({ id: origObject, value: newObj });
                        for (var i = 0; i < origObject.length; i++) {
                            if (typeof origObject[i] == "object") {
                                newObj.push(ObjectExtensions.safeClone(origObject[i], cloneMap));
                            }
                            else {
                                newObj.push(origObject[i]);
                            }
                        }
                    }
                }
                else if (origObject instanceof Date) {
                    newObj = new Date(origObject.valueOf());
                }
                else if (origObject instanceof Object) {
                    if (!cloneMap.some(function (val) {
                        if (val.id === origObject) {
                            newObj = val.value;
                            return true;
                        }
                        return false;
                    })) {
                        newObj = $.extend(false, {}, origObject);
                        cloneMap.push({ id: origObject, value: newObj });
                        for (var property in newObj) {
                            if (newObj.hasOwnProperty(property)) {
                                if (typeof newObj[property] == "object") {
                                    if (property === "__metadata") {
                                        newObj[property] = $.extend(false, {}, origObject[property]);
                                    }
                                    else {
                                        newObj[property] = ObjectExtensions.safeClone(origObject[property], cloneMap);
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    newObj = origObject;
                }
                return newObj;
            };
            ObjectExtensions.forEachAsync = function (array, iterator, then) {
                function next(i) {
                    if (i < array.length) {
                        iterator(array[i], function () { next(i + 1); }, i);
                    }
                    else {
                        if (then)
                            then();
                    }
                }
                ;
                next(0);
            };
            ObjectExtensions.groupBy = function (inputArray, keySelector) {
                var groupedArray = [];
                if (!Proxy.ArrayExtensions.hasElements(inputArray)) {
                    return groupedArray;
                }
                inputArray.forEach(function (element) {
                    var groupKey = keySelector(element);
                    if (typeof (groupedArray[groupKey]) === "undefined") {
                        groupedArray[groupKey] = [];
                    }
                    groupedArray[groupKey].push(element);
                });
                return groupedArray;
            };
            return ObjectExtensions;
        }());
        Proxy.ObjectExtensions = ObjectExtensions;
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var TsLogging = Microsoft.Dynamics.Diagnostics.TypeScriptCore;
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        function attachLoggingSink(sink) {
            Microsoft.Dynamics.Diagnostics.TypeScriptCore.LoggerBase.addLoggingSink(sink);
        }
        Proxy.attachLoggingSink = attachLoggingSink;
        var RetailLogger = (function () {
            function RetailLogger() {
            }
            RetailLogger.LogEvent = function (eventName, error) {
                error ? eventName(error) : eventName();
            };
            RetailLogger.genericError = function (message) {
                TsLogging.LoggerBase.writeEvent("GenericEvent", 44000, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "{0}");
            };
            RetailLogger.genericWarning = function (message) {
                TsLogging.LoggerBase.writeEvent("GenericWarning", 44001, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Warning, [], "", "", "{0}");
            };
            RetailLogger.genericInfo = function (message) {
                TsLogging.LoggerBase.writeEvent("GenericInfo", 44002, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Informational, [], "", "", "{0}");
            };
            RetailLogger.modelManagersRetailServerRequestStarted = function (requestId, requestUrl) {
                TsLogging.LoggerBase.writeEvent("ModelManagersRetailServerRequestStarted", 44004, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "The Retail Server Request with request id '{0}' and request url '{1}' started.");
            };
            RetailLogger.modelManagersRetailServerRequestError = function (requestId, requestUrl, error) {
                TsLogging.LoggerBase.writeEvent("ModelManagersRetailServerRequestError", 44005, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "The Retail Server Request with request id '{0}' and request url '{1}' failed.  Error: {2}.");
            };
            RetailLogger.modelManagersRetailServerRequestFinished = function (requestId, requestUrl) {
                TsLogging.LoggerBase.writeEvent("ModelManagersRetailServerRequestFinished", 44006, TsLogging.EventChannel.Debug, 1, TsLogging.EventLevel.Informational, [], "", "", "The Retail Server Request with request id '{0}' and request url '{1}' succeeded.");
            };
            RetailLogger.initEntitySetInvalidError = function (entitySetId) {
                TsLogging.LoggerBase.writeEvent("InitEntitySetInvalidError", 44007, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "A method with invalid InitEntitySet id '{0}' was reported.");
            };
            RetailLogger.initEntitySetMultipleTimesError = function (entitySetId) {
                TsLogging.LoggerBase.writeEvent("InitEntitySetMultipleTimesError", 44008, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "A method with InitEntitySet ID '{0}' was reported multiple times.");
            };
            RetailLogger.initEntitySetNoMethodNumberError = function () {
                TsLogging.LoggerBase.writeEvent("InitEntitySetNoMethodNumberError", 44009, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "The value InitEntitySet.All does not represent the number of methods that can be run");
            };
            RetailLogger.initPaymentEntitySetInvalidError = function (entitySetId) {
                TsLogging.LoggerBase.writeEvent("InitPaymentEntitySetInvalidError", 44010, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "A method with invalid InitPaymentEntitySet id '{0}' was reported.");
            };
            RetailLogger.initPaymentEntitySetMultipleTimesError = function (entitySetId) {
                TsLogging.LoggerBase.writeEvent("InitPaymentEntitySetMultipleTimesError", 44011, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "A method with InitPaymentEntitySet ID '{0}' was reported multiple times.");
            };
            RetailLogger.initPaymentEntitySetNoMethodNumberError = function () {
                TsLogging.LoggerBase.writeEvent("InitPaymentEntitySetNoMethodNumberError", 44012, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "The value InitPaymentEntitySet.All does not represent the number of methods that can be run");
            };
            RetailLogger.shoppingCartServiceGetShoppingCartStarted = function () {
                TsLogging.LoggerBase.writeEvent("ShoppingCartServiceGetShoppingCartStarted", 44100, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Get shopping cart started.");
            };
            RetailLogger.shoppingCartServiceGetShoppingCartError = function (error) {
                TsLogging.LoggerBase.writeEvent("ShoppingCartServiceGetShoppingCartError", 44101, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Get shopping cart failed with error {0}.");
            };
            RetailLogger.shoppingCartServiceGetShoppingCartFinished = function () {
                TsLogging.LoggerBase.writeEvent("ShoppingCartServiceGetShoppingCartFinished", 44102, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Get shopping cart finished.");
            };
            RetailLogger.shoppingCartServiceRemoveFromCartStarted = function () {
                TsLogging.LoggerBase.writeEvent("ShoppingCartServiceRemoveFromCartStarted", 44104, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Removing item from cart started.");
            };
            RetailLogger.shoppingCartServiceRemoveFromCartError = function (error) {
                TsLogging.LoggerBase.writeEvent("ShoppingCartServiceRemoveFromCartError", 44105, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Removing item from cart failed with error {0}.");
            };
            RetailLogger.shoppingCartServiceRemoveFromCartFinished = function () {
                TsLogging.LoggerBase.writeEvent("ShoppingCartServiceRemoveFromCartFinished", 44106, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Removing item from cart finished.");
            };
            RetailLogger.shoppingCartApplyPromotionCodeStarted = function () {
                TsLogging.LoggerBase.writeEvent("ShoppingCartApplyPromotionCodeStarted", 44108, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Applying promotion code started.");
            };
            RetailLogger.shoppingCartApplyPromotionCodeError = function (error) {
                TsLogging.LoggerBase.writeEvent("ShoppingCartApplyPromotionCodeError", 44109, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Applying promotion code failed with error {0}.");
            };
            RetailLogger.shoppingCartApplyPromotionCodeFinished = function () {
                TsLogging.LoggerBase.writeEvent("ShoppingCartApplyPromotionCodeFinished", 44110, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Applying promotion code finished.");
            };
            RetailLogger.shoppingCartUpdateQuantityStarted = function () {
                TsLogging.LoggerBase.writeEvent("ShoppingCartUpdateQuantityStarted", 44112, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Updating quantity started.");
            };
            RetailLogger.shoppingCartUpdateQuantityError = function (error) {
                TsLogging.LoggerBase.writeEvent("ShoppingCartUpdateQuantityError", 44113, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Updating quantity failed with error {0}.");
            };
            RetailLogger.shoppingCartUpdateQuantityFinished = function () {
                TsLogging.LoggerBase.writeEvent("ShoppingCartUpdateQuantityFinished", 44114, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Updating quantity finished.");
            };
            RetailLogger.shoppingCartRemovePromotionCodeStarted = function () {
                TsLogging.LoggerBase.writeEvent("ShoppingCartRemovePromotionCodeStarted", 44116, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Removing promotion code started.");
            };
            RetailLogger.shoppingCartRemovePromotionCodeError = function (error) {
                TsLogging.LoggerBase.writeEvent("ShoppingCartRemovePromotionCodeError", 44117, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Removing promotion code failed with error {0}.");
            };
            RetailLogger.shoppingCartRemovePromotionCodeFinished = function () {
                TsLogging.LoggerBase.writeEvent("ShoppingCartRemovePromotionCodeFinished", 44118, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Removing promotion code finished.");
            };
            RetailLogger.shoppingCartUpdateLoyaltyCardIdStarted = function () {
                TsLogging.LoggerBase.writeEvent("ShoppingCartUpdateLoyaltyCardIdStarted", 44120, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Updating loyalty card id started.");
            };
            RetailLogger.shoppingCartUpdateLoyaltyCardIdError = function (error) {
                TsLogging.LoggerBase.writeEvent("ShoppingCartUpdateLoyaltyCardIdError", 44121, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Updating loyalty card id failed with error {0}.");
            };
            RetailLogger.shoppingCartUpdateLoyaltyCardIdFinished = function () {
                TsLogging.LoggerBase.writeEvent("ShoppingCartUpdateLoyaltyCardIdFinished", 44122, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Updating loyalty card id finished.");
            };
            RetailLogger.shoppingCartCommenceCheckoutStarted = function () {
                TsLogging.LoggerBase.writeEvent("ShoppingCartCommenceCheckoutStarted", 44124, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Commence checkout started.");
            };
            RetailLogger.shoppingCartCommenceCheckoutError = function (error) {
                TsLogging.LoggerBase.writeEvent("ShoppingCartCommenceCheckoutError", 44125, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Commence checkout failed with error {0}.");
            };
            RetailLogger.shoppingCartCommenceCheckoutFinished = function () {
                TsLogging.LoggerBase.writeEvent("ShoppingCartCommenceCheckoutFinished", 44126, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Commence checkout finished.");
            };
            RetailLogger.shoppingCartGetPromotionsStarted = function () {
                TsLogging.LoggerBase.writeEvent("ShoppingCartGetPromotionsStarted", 44128, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Getting promotions started.");
            };
            RetailLogger.shoppingCartGetPromotionsError = function (error) {
                TsLogging.LoggerBase.writeEvent("ShoppingCartGetPromotionsError", 44129, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Getting promotions failed with error {0}.");
            };
            RetailLogger.shoppingCartGetPromotionsFinished = function () {
                TsLogging.LoggerBase.writeEvent("ShoppingCartGetPromotionsFinished", 44130, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Getting promotions finished.");
            };
            RetailLogger.getSimpleProductsByIdStarted = function () {
                TsLogging.LoggerBase.writeEvent("getSimpleProductsByIdStarted", 44132, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Getting simple products by ids started.");
            };
            RetailLogger.getSimpleProductsByIdError = function (error) {
                TsLogging.LoggerBase.writeEvent("getSimpleProductsByIdError", 44133, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Getting simple products by ids failed with error {0}.");
            };
            RetailLogger.getSimpleProductsByIdFinished = function () {
                TsLogging.LoggerBase.writeEvent("getSimpleProductsByIdFinished", 44134, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Getting simple products by ids finished.");
            };
            RetailLogger.getKitComponentsError = function () {
                TsLogging.LoggerBase.writeEvent("GetKitComponentsError", 44136, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "One of the kit components could not be retrieved.");
            };
            RetailLogger.searchProductsByProductIdsStarted = function () {
                TsLogging.LoggerBase.writeEvent("SearchProductsByProductIdsStarted", 44140, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Searching products by product ids started.");
            };
            RetailLogger.searchProductsByProductIdsError = function (error) {
                TsLogging.LoggerBase.writeEvent("SearchProductsByProductIdsError", 44141, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Searching products by product ids failed with error {0}.");
            };
            RetailLogger.searchProductsByProductIdsFinished = function () {
                TsLogging.LoggerBase.writeEvent("SearchProductsByProductIdsFinished", 44142, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Searching products by product ids finished.");
            };
            RetailLogger.checkoutServiceGetAllDeliveryOptionDescriptionsStarted = function () {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceGetAllDeliveryOptionDescriptionsStarted", 44200, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Get all delivery option descriptions started.");
            };
            RetailLogger.checkoutServiceGetAllDeliveryOptionDescriptionsError = function (error) {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceGetAllDeliveryOptionDescriptionsError", 44201, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Get all delivery option descriptions failed with error {0}.");
            };
            RetailLogger.checkoutServiceGetAllDeliveryOptionDescriptionsFinished = function () {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceGetAllDeliveryOptionDescriptionsFinished", 44202, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Get all delivery option descriptions finished.");
            };
            RetailLogger.checkoutServiceGetDeliveryPreferencesStarted = function () {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceGetDeliveryPreferencesStarted", 44204, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Getting delivery preferences started.");
            };
            RetailLogger.checkoutServiceGetDeliveryPreferencesError = function (error) {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceGetDeliveryPreferencesError", 44205, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Getting delivery preferences failed with error {0}.");
            };
            RetailLogger.checkoutServiceGetDeliveryPreferencesFinished = function () {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceGetDeliveryPreferencesFinished", 44206, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Getting delivery preferences finished.");
            };
            RetailLogger.checkoutServiceGetOrderDeliveryOptionsStarted = function () {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceGetOrderDeliveryOptionsStarted", 44208, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Getting order delivery options started.");
            };
            RetailLogger.checkoutServiceGetOrderDeliveryOptionsError = function (error) {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceGetOrderDeliveryOptionsError", 44209, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Getting order delivery options failed with error {0}.");
            };
            RetailLogger.checkoutServiceGetOrderDeliveryOptionsFinished = function () {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceGetOrderDeliveryOptionsFinished", 44210, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Getting order delivery options finished.");
            };
            RetailLogger.checkoutServiceGetItemDeliveryOptionsStarted = function () {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceGetItemDeliveryOptionsStarted", 44212, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Getting item delivery options started.");
            };
            RetailLogger.checkoutServiceGetItemDeliveryOptionsError = function (error) {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceGetItemDeliveryOptionsError", 44213, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Getting item delivery options failed with error {0}.");
            };
            RetailLogger.checkoutServiceGetItemDeliveryOptionsFinished = function () {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceGetItemDeliveryOptionsFinished", 44214, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Getting item delivery options finished.");
            };
            RetailLogger.checkoutServiceUpdateDeliverySpecificationsStarted = function () {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceUpdateDeliverySpecificationsStarted", 44216, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Update of order delivery specifications started.");
            };
            RetailLogger.checkoutServiceUpdateDeliverySpecificationsError = function (error) {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceUpdateDeliverySpecificationsError", 44217, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Update of order delivery specifications failed with error {0}.");
            };
            RetailLogger.checkoutServiceUpdateDeliverySpecificationsFinished = function () {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceUpdateDeliverySpecificationsFinished", 44218, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Update of order delivery specifications finished.");
            };
            RetailLogger.checkoutServiceUpdateLineDeliverySpecificationsStarted = function () {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceUpdateLineDeliverySpecificationsStarted", 44220, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Update of line delivery specifications started.");
            };
            RetailLogger.checkoutServiceUpdateLineDeliverySpecificationsError = function (error) {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceUpdateLineDeliverySpecificationsError", 44221, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Update of line delivery specifications failed with error {0}.");
            };
            RetailLogger.checkoutServiceUpdateLineDeliverySpecificationsFinished = function () {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceUpdateLineDeliverySpecificationsFinished", 44222, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Update of line delivery specifications finished.");
            };
            RetailLogger.checkoutServiceGetPaymentCardTypesStarted = function () {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceGetPaymentCardTypesStarted", 44224, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Getting payment card types started.");
            };
            RetailLogger.checkoutServiceGetPaymentCardTypesError = function (error) {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceGetPaymentCardTypesError", 44225, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Getting payment card types failed with error {0}.");
            };
            RetailLogger.checkoutServiceGetPaymentCardTypesFinished = function () {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceGetPaymentCardTypesFinished", 44226, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Getting payment card types finished.");
            };
            RetailLogger.checkoutServiceGetGiftCardBalanceStarted = function () {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceGetGiftCardBalanceStarted", 44228, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Getting gift card balance started.");
            };
            RetailLogger.checkoutServiceGetGiftCardBalanceError = function (error) {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceGetGiftCardBalanceError", 44229, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Getting gift card balance failed with error {0}.");
            };
            RetailLogger.checkoutServiceGetGiftCardBalanceFinished = function () {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceGetGiftCardBalanceFinished", 44230, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Getting gift card balance finished.");
            };
            RetailLogger.checkoutServiceSubmitOrderStarted = function () {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceSubmitOrderStarted", 44232, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Submit order started.");
            };
            RetailLogger.checkoutServiceSubmitOrderError = function (error) {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceSubmitOrderError", 44233, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Submit order failed with error {0}.");
            };
            RetailLogger.checkoutServiceSubmitOrderFinished = function () {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceSubmitOrderFinished", 44234, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Submit order finished.");
            };
            RetailLogger.checkoutServiceGetCardPaymentAcceptUrlStarted = function () {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceGetCardPaymentAcceptUrlStarted", 44235, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Get card payment accept url started.");
            };
            RetailLogger.checkoutServiceGetCardPaymentAcceptUrlFinished = function () {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceGetCardPaymentAcceptUrlFinished", 44236, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Get card payment accept url finished.");
            };
            RetailLogger.checkoutServiceGetCardPaymentAcceptUrlError = function (error) {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceGetCardPaymentAcceptUrlError", 44237, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Get card payment accept url failed with error {0}.");
            };
            RetailLogger.checkoutServiceRetrieveCardPaymentAcceptResultStarted = function () {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceRetrieveCardPaymentAcceptResultStarted", 44238, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Retrieve card payment accept result started.");
            };
            RetailLogger.checkoutServiceRetrieveCardPaymentAcceptResultFinished = function () {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceRetrieveCardPaymentAcceptResultFinished", 44239, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Retrieve card payment accept result finished.");
            };
            RetailLogger.checkoutServiceRetrieveCardPaymentAcceptResultError = function (error) {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceRetrieveCardPaymentAcceptResultError", 44240, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Retrieve card payment accept result failed with error {0}.");
            };
            RetailLogger.checkoutServiceCleanUpAfterSuccessfulOrderStarted = function () {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceCleanUpAfterSuccessfulOrderStarted", 44241, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Shopping cart clean failed post successful submit order started.");
            };
            RetailLogger.checkoutServiceCleanUpAfterSuccessfulOrderError = function (error) {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceCleanUpAfterSuccessfulOrderError", 44242, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Shopping cart clean failed post successful submit order with error {0}.");
            };
            RetailLogger.checkoutServiceCleanUpAfterSuccessfulOrderFinished = function () {
                TsLogging.LoggerBase.writeEvent("CheckoutServiceCleanUpAfterSuccessfulOrderFinished", 44243, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Shopping cart clean failed post successful submit order finished.");
            };
            RetailLogger.channelServiceGetChannelConfigurationStarted = function () {
                TsLogging.LoggerBase.writeEvent("ChannelServiceGetChannelConfigurationStarted", 44300, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Get channel Configuration started.");
            };
            RetailLogger.channelServiceGetChannelConfigurationError = function (error) {
                TsLogging.LoggerBase.writeEvent("ChannelServiceGetChannelConfigurationError", 44301, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Get channel Configuration failed with error {0}.");
            };
            RetailLogger.channelServiceGetChannelConfigurationFinished = function () {
                TsLogging.LoggerBase.writeEvent("ChannelServiceGetChannelConfigurationFinished", 44302, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Get channel Configuration finished.");
            };
            RetailLogger.channelServiceGetCountryRegionInfoStarted = function () {
                TsLogging.LoggerBase.writeEvent("ChannelServiceGetCountryRegionInfoStarted", 44304, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Get country region info started.");
            };
            RetailLogger.channelServiceGetCountryRegionInfoError = function (error) {
                TsLogging.LoggerBase.writeEvent("ChannelServiceGetCountryRegionInfoError", 44305, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Get country region info failed with error {0}.");
            };
            RetailLogger.channelServiceGetCountryRegionInfoFinished = function () {
                TsLogging.LoggerBase.writeEvent("ChannelServiceGetCountryRegionInfoFinished", 44306, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Get country region info finished.");
            };
            RetailLogger.channelServiceGetStateProvinceInfoStarted = function () {
                TsLogging.LoggerBase.writeEvent("ChannelServiceGetStateProvinceInfoStarted", 44308, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Get state province info started.");
            };
            RetailLogger.channelServiceGetStateProvinceInfoError = function (error) {
                TsLogging.LoggerBase.writeEvent("ChannelServiceGetStateProvinceInfoError", 44309, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Get state province info error {0}.");
            };
            RetailLogger.channelServiceGetStateProvinceInfoFinished = function () {
                TsLogging.LoggerBase.writeEvent("ChannelServiceGetStateProvinceInfoFinished", 44310, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Get state province info finished.");
            };
            RetailLogger.channelServiceGetTenderTypesStarted = function () {
                TsLogging.LoggerBase.writeEvent("ChannelServiceGetTenderTypesStarted", 44312, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Get tender types started.");
            };
            RetailLogger.channelServiceGetTenderTypesError = function (error) {
                TsLogging.LoggerBase.writeEvent("ChannelServiceGetTenderTypesError", 44313, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Get tender types failed with error {0}.");
            };
            RetailLogger.channelServiceGetTenderTypesFinished = function () {
                TsLogging.LoggerBase.writeEvent("ChannelServiceGetTenderTypesFinished", 44314, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Get tender types finished.");
            };
            RetailLogger.channelServiceGetCardTypesStarted = function () {
                TsLogging.LoggerBase.writeEvent("ChannelServiceGetCardTypesStarted", 44315, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Get card types started.");
            };
            RetailLogger.channelServiceGetCardTypesError = function (error) {
                TsLogging.LoggerBase.writeEvent("ChannelServiceGetCardTypesError", 44316, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Get card types failed with error {0}.");
            };
            RetailLogger.channelServiceGetCardTypesFinished = function () {
                TsLogging.LoggerBase.writeEvent("ChannelServiceGetCardTypesFinished", 44317, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Get card types finished.");
            };
            RetailLogger.storeProductAvailabilityServiceGetNearbyStoresWithAvailabilityStarted = function () {
                TsLogging.LoggerBase.writeEvent("StoreProductAvailabilityServiceGetNearbyStoresWithAvailabilityStarted", 44350, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Get nearby stores with availability started.");
            };
            RetailLogger.storeProductAvailabilityServiceGetNearbyStoresWithAvailabilityError = function (error) {
                TsLogging.LoggerBase.writeEvent("StoreProductAvailabilityServiceGetNearbyStoresWithAvailabilityError", 44351, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Get nearby stores with availability failed with error {0}.");
            };
            RetailLogger.storeProductAvailabilityServiceGetNearbyStoresWithAvailabilityFinished = function () {
                TsLogging.LoggerBase.writeEvent("StoreProductAvailabilityServiceGetNearbyStoresWithAvailabilityFinished", 44352, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Get nearby stores with availability finished.");
            };
            RetailLogger.storeProductAvailabilityServiceGetNearbyStoresStarted = function () {
                TsLogging.LoggerBase.writeEvent("StoreProductAvailabilityServiceGetNearbyStoresStarted", 44354, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Get nearby stores started.");
            };
            RetailLogger.storeProductAvailabilityServiceGetNearbyStoresError = function (error) {
                TsLogging.LoggerBase.writeEvent("StoreProductAvailabilityServiceGetNearbyStoresError", 44355, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Get nearby stores failed with error {0}.");
            };
            RetailLogger.storeProductAvailabilityServiceGetNearbyStoresFinished = function () {
                TsLogging.LoggerBase.writeEvent("StoreProductAvailabilityServiceGetNearbyStoresFinished", 44356, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Get nearby stores finished.");
            };
            RetailLogger.loyaltyServiceGetLoyaltyCardsStarted = function () {
                TsLogging.LoggerBase.writeEvent("LoyaltyServiceGetLoyaltyCardsStarted", 44370, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Get loyalty cards started.");
            };
            RetailLogger.loyaltyServiceGetLoyaltyCardsError = function (error) {
                TsLogging.LoggerBase.writeEvent("LoyaltyServiceGetLoyaltyCardsError", 44371, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Get loyalty cards failed with error {0}.");
            };
            RetailLogger.loyaltyServiceGetLoyaltyCardsFinished = function () {
                TsLogging.LoggerBase.writeEvent("LoyaltyServiceGetLoyaltyCardsFinished", 44372, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Get loyalty cards finished.");
            };
            RetailLogger.loyaltyServiceUpdateLoyaltyCardIdStarted = function () {
                TsLogging.LoggerBase.writeEvent("loyaltyServiceUpdateLoyaltyCardIdStarted", 44374, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Update loyalty card id started.");
            };
            RetailLogger.loyaltyServiceUpdateLoyaltyCardIdError = function (error) {
                TsLogging.LoggerBase.writeEvent("LoyaltyServiceUpdateLoyaltyCardIdError", 44375, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Update loyalty card id failed with error {0}.");
            };
            RetailLogger.loyaltyServiceUpdateLoyaltyCardIdFinished = function () {
                TsLogging.LoggerBase.writeEvent("LoyaltyServiceUpdateLoyaltyCardIdFinished", 44376, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Update loyalty card id finished.");
            };
            RetailLogger.customerServiceGetCustomerStarted = function () {
                TsLogging.LoggerBase.writeEvent("CustomerServiceGetCustomerStarted", 44400, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Get customer started.");
            };
            RetailLogger.customerServiceGetCustomerError = function (error) {
                TsLogging.LoggerBase.writeEvent("CustomerServiceGetCustomerError", 44401, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Get customer failed with error {0}.");
            };
            RetailLogger.customerServiceGetCustomerFinished = function () {
                TsLogging.LoggerBase.writeEvent("CustomerServiceGetCustomerFinished", 44402, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Get customer finished.");
            };
            RetailLogger.customerServiceIsAuthenticationSessionStarted = function () {
                TsLogging.LoggerBase.writeEvent("CustomerServiceIsAuthenticationSessionStarted", 44403, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Is authentication session started.");
            };
            RetailLogger.customerServiceIsAuthenticationSessionError = function (error) {
                TsLogging.LoggerBase.writeEvent("CustomerServiceIsAuthenticationSessionError", 44404, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Is authentication session failed with error {0}.");
            };
            RetailLogger.customerServiceIsAuthenticationSessionFinished = function () {
                TsLogging.LoggerBase.writeEvent("CustomerServiceIsAuthenticationSessionFinished", 44405, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Is authentication session finished.");
            };
            RetailLogger.getOrderHistoryStarted = function () {
                TsLogging.LoggerBase.writeEvent("GetOrderHistoryStarted", 44500, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Get order history started.");
            };
            RetailLogger.getOrderHistoryError = function (error) {
                TsLogging.LoggerBase.writeEvent("GetOrderHistoryError", 44501, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Get order history failed with error {0}.");
            };
            RetailLogger.getOrderHistoryFinished = function () {
                TsLogging.LoggerBase.writeEvent("GetOrderHistoryFinished", 44502, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Get order history finished.");
            };
            RetailLogger.getOrderDetailsStarted = function () {
                TsLogging.LoggerBase.writeEvent("GetOrderDetailsStarted", 44504, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Get order details started.");
            };
            RetailLogger.getOrderDetailsError = function (error) {
                TsLogging.LoggerBase.writeEvent("GetOrderDetailsError", 44505, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Get order details failed with error {0}.");
            };
            RetailLogger.getOrderDetailsFinished = function () {
                TsLogging.LoggerBase.writeEvent("GetOrderDetailsFinished", 44506, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Get order details finished.");
            };
            RetailLogger.createWishListStarted = function () {
                TsLogging.LoggerBase.writeEvent("CreateWishListStarted", 44600, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Create wish list started.");
            };
            RetailLogger.createWishListError = function (error) {
                TsLogging.LoggerBase.writeEvent("CreateWishListError", 44601, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Create wish list failed with error {0}.");
            };
            RetailLogger.createWishListFinished = function () {
                TsLogging.LoggerBase.writeEvent("CreateWishListFinished", 44602, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Create wish list finished.");
            };
            RetailLogger.deleteWishListStarted = function () {
                TsLogging.LoggerBase.writeEvent("DeleteWishListStarted", 44604, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Delete wish list started.");
            };
            RetailLogger.deleteWishListError = function (error) {
                TsLogging.LoggerBase.writeEvent("DeleteWishListError", 44605, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Delete wish list failed with error {0}.");
            };
            RetailLogger.deleteWishListFinished = function () {
                TsLogging.LoggerBase.writeEvent("DeleteWishListFinished", 44606, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Delete wish list finished.");
            };
            RetailLogger.updateWishListStarted = function () {
                TsLogging.LoggerBase.writeEvent("UpdateWishListStarted", 44608, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Update wish list started.");
            };
            RetailLogger.updateWishListError = function (error) {
                TsLogging.LoggerBase.writeEvent("UpdateWishListError", 44609, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Update wish list failed with error {0}.");
            };
            RetailLogger.updateWishListFinished = function () {
                TsLogging.LoggerBase.writeEvent("UpdateWishListFinished", 44610, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Update wish list finished.");
            };
            RetailLogger.getWishListsStarted = function () {
                TsLogging.LoggerBase.writeEvent("GetWishListsStarted", 44612, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Get wish lists started.");
            };
            RetailLogger.getWishListsError = function (error) {
                TsLogging.LoggerBase.writeEvent("GetWishListsError", 44613, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Get wish lists failed with error {0}.");
            };
            RetailLogger.getWishListsFinished = function () {
                TsLogging.LoggerBase.writeEvent("GetWishListsFinished", 44614, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Get wish lists finished.");
            };
            RetailLogger.getWishListStarted = function () {
                TsLogging.LoggerBase.writeEvent("GetWishListStarted", 44616, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Get wish list started.");
            };
            RetailLogger.getWishListError = function (error) {
                TsLogging.LoggerBase.writeEvent("GetWishListError", 44617, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Get wish list failed with error {0}.");
            };
            RetailLogger.getWishListFinished = function () {
                TsLogging.LoggerBase.writeEvent("GetWishListFinished", 44618, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Get wish list finished.");
            };
            RetailLogger.addLinesToWishListStarted = function () {
                TsLogging.LoggerBase.writeEvent("AddLinesToWishListStarted", 44620, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Add lines to wish list started.");
            };
            RetailLogger.addLinesToWishListError = function (error) {
                TsLogging.LoggerBase.writeEvent("AddLinesToWishListError", 44621, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Add lines to wish list failed with error {0}.");
            };
            RetailLogger.addLinesToWishListFinished = function () {
                TsLogging.LoggerBase.writeEvent("AddLinesToWishListFinished", 44622, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Add lines to wish list finished.");
            };
            RetailLogger.removeItemsFromWishListStarted = function () {
                TsLogging.LoggerBase.writeEvent("RemoveItemsFromWishListStarted", 44624, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Remove items from wish list started.");
            };
            RetailLogger.removeItemsFromWishListError = function (error) {
                TsLogging.LoggerBase.writeEvent("RemoveItemsFromWishListError", 44625, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Remove items from wish list failed with error {0}.");
            };
            RetailLogger.removeItemsFromWishListFinished = function () {
                TsLogging.LoggerBase.writeEvent("RemoveItemsFromWishListFinished", 44626, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Remove items from wish list finished.");
            };
            RetailLogger.updateLinesOnWishListStarted = function () {
                TsLogging.LoggerBase.writeEvent("UpdateLinesOnWishListStarted", 44628, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Update lines on wish list started.");
            };
            RetailLogger.updateLinesOnWishListError = function (error) {
                TsLogging.LoggerBase.writeEvent("UpdateLinesOnWishListError", 44629, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Update lines on wish list failed with error {0}.");
            };
            RetailLogger.updateLinesOnWishListFinished = function () {
                TsLogging.LoggerBase.writeEvent("UpdateLinesOnWishListFinished", 44630, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Update lines on wish list finished.");
            };
            RetailLogger.addItemsToCartStarted = function () {
                TsLogging.LoggerBase.writeEvent("AddItemsToCartStarted", 44632, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Add items to cart started.");
            };
            RetailLogger.addItemsToCartError = function (error) {
                TsLogging.LoggerBase.writeEvent("AddItemsToCartError", 44633, 1, TsLogging.EventChannel.Operational, TsLogging.EventLevel.Error, [], "", "", "Add items to cart failed with error {0}.");
            };
            RetailLogger.addItemsToCartFinished = function () {
                TsLogging.LoggerBase.writeEvent("AddItemsToCartFinished", 44634, 1, TsLogging.EventChannel.Debug, TsLogging.EventLevel.Informational, [], "", "", "Add items to cart finished.");
            };
            return RetailLogger;
        }());
        Proxy.RetailLogger = RetailLogger;
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        "use strict";
        var Tracer = (function () {
            function Tracer() {
            }
            Tracer.init = function () {
                Commerce.Proxy.attachLoggingSink(new Microsoft.Dynamics.Diagnostics.TypeScriptCore.DebuggingConsoleSink());
                return true;
            };
            Tracer.Information = function (format) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                if (Tracer.TracingOn) {
                    var newArgs = [Tracer.TracerDynamicsInformation, format].concat(args);
                    Proxy.RetailLogger.genericInfo(Tracer.GetMessage.apply(null, newArgs));
                }
            };
            Tracer.Warning = function (format) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                if (Tracer.TracingOn) {
                    var newArgs = [Tracer.TracerDynamicsWarning, format].concat(args);
                    Proxy.RetailLogger.genericWarning(Tracer.GetMessage.apply(null, newArgs));
                }
            };
            Tracer.Error = function (format) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                if (Tracer.TracingOn) {
                    var newArgs = [Tracer.TracerDynamicsError, format].concat(args);
                    Proxy.RetailLogger.genericError(Tracer.GetMessage.apply(null, newArgs));
                }
            };
            Tracer.Errors = function (errors, format) {
                var args = [];
                for (var _i = 2; _i < arguments.length; _i++) {
                    args[_i - 2] = arguments[_i];
                }
                if (Tracer.TracingOn && errors != null && errors.length > 0) {
                    var errorMessage = '';
                    var errorCode = '';
                    var errorString = '';
                    errors.forEach(function (error) {
                        errorMessage = error.ErrorMessage || Proxy.StringExtensions.EMPTY;
                        errorCode = error.ErrorCode || Proxy.StringExtensions.EMPTY;
                        errorString = JSON.stringify(error);
                        Tracer.Error(format + ' ' + Proxy.StringExtensions.format(" \n ErrorMessage: {0}; \n ErrorCode: {1}; \n ErrorObject: '{2}'", errorMessage, errorCode, errorString), args);
                    });
                }
            };
            Tracer.StartCounter = function (uniqueFunctionName) {
                var counter;
                if (Tracer.Counters[uniqueFunctionName] == undefined) {
                    counter = new PerformanceCounters();
                    counter.Name = uniqueFunctionName;
                }
                else {
                    counter = Tracer.Counters[uniqueFunctionName];
                }
                counter.Count += 1;
                Tracer.Counters[uniqueFunctionName] = counter;
                var now = new Date().getTime();
                Tracer.Timers.push(now);
            };
            Tracer.EndCounter = function (uniqueFunctionName) {
                var now = new Date().getTime();
                var startTime = Tracer.Timers.pop();
                var counter = Tracer.Counters[uniqueFunctionName];
                counter.TotalTime += (now - startTime);
            };
            Tracer.DumpCounters = function () {
                for (var item in Tracer.Counters) {
                    Tracer.Information("Method = {0} Number of calls = {1} TotalTime = {2}mS Avg = {3}mS", Tracer.Counters[item].Name, Tracer.Counters[item].Count, Tracer.Counters[item].TotalTime, (Tracer.Counters[item].TotalTime / Tracer.Counters[item].Count));
                }
            };
            Tracer.GetMessage = function (type, format) {
                var args = [];
                for (var _i = 2; _i < arguments.length; _i++) {
                    args[_i - 2] = arguments[_i];
                }
                var now = "" + new Date().getTime() + "mS";
                if (Tracer.TracingOn) {
                    if (Proxy.ObjectExtensions.isNullOrUndefined(args)) {
                        return Tracer.TracerDynamics + type + "\t" + format + "\t" + now;
                    }
                    else {
                        var newArgs = [format];
                        return Tracer.TracerDynamics + type + "\t" + Proxy.StringExtensions.format.apply(null, newArgs.concat(Array.prototype.slice.call(args))) + "\t" + now;
                    }
                }
            };
            return Tracer;
        }());
        Tracer.TracerDynamics = "Dynamics-";
        Tracer.TracerDynamicsInformation = "Information: ";
        Tracer.TracerDynamicsWarning = "Warning: ";
        Tracer.TracerDynamicsError = "Error: ";
        Tracer.TracerDynamicsException = "Exception: ";
        Tracer.TracingOn = true;
        Tracer.Counters = new Array();
        Tracer.Timers = new Array();
        Tracer._initialized = Tracer.init();
        Proxy.Tracer = Tracer;
        var PerformanceCounters = (function () {
            function PerformanceCounters() {
                this.Count = 0;
                this.TotalTime = 0;
            }
            return PerformanceCounters;
        }());
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        "use strict";
        var StringExtensions = (function () {
            function StringExtensions() {
            }
            StringExtensions.isEmpty = function (object) {
                if (!Proxy.ObjectExtensions.isNullOrUndefined(object) && typeof object !== "string") {
                    Proxy.Tracer.Error("StringExtensions.isEmpty() has received input parameter not of type string.");
                }
                return object != null && object.length == 0;
            };
            StringExtensions.isEmptyOrWhitespace = function (object) {
                if (!Proxy.ObjectExtensions.isNullOrUndefined(object) && typeof object !== "string") {
                    Proxy.Tracer.Error("StringExtensions.isEmptyOrWhitespace() has received input parameter not of type string.");
                }
                if (!Proxy.ObjectExtensions.isNullOrUndefined(object)) {
                    object = object.toString();
                    return typeof object.trim == 'function'
                        && (object.trim() || '').length == 0;
                }
                return false;
            };
            StringExtensions.isNullOrWhitespace = function (object) {
                if (!Proxy.ObjectExtensions.isNullOrUndefined(object) && typeof object !== "string") {
                    Proxy.Tracer.Error("StringExtensions.isNullOrWhitespace() has received input parameter not of type string.");
                }
                var returnValue = true;
                try {
                    returnValue = Proxy.ObjectExtensions.isNullOrUndefined(object);
                    if (!returnValue) {
                        object = object.toString();
                        returnValue = (object.trim().length == 0);
                    }
                }
                catch (err) {
                    Commerce.Proxy.Tracer.Error("StringExtensions.isNullOrWhitespace() caught exception = {0}", err.message);
                }
                return returnValue;
            };
            StringExtensions.padLeft = function (object, padString, length) {
                if (!Proxy.ObjectExtensions.isNullOrUndefined(object) && typeof object !== "string") {
                    Proxy.Tracer.Error("StringExtensions.padLeft() has received input parameter not of type string.");
                }
                if (Proxy.ObjectExtensions.isNullOrUndefined(padString) || Proxy.ObjectExtensions.isNullOrUndefined(object)) {
                    return object;
                }
                while (object.length < length) {
                    object = padString + object;
                }
                return object;
            };
            StringExtensions.padRight = function (object, padString, length) {
                if (!Proxy.ObjectExtensions.isNullOrUndefined(object) && typeof object !== "string") {
                    Proxy.Tracer.Error("StringExtensions.padRight() has received input parameter not of type string.");
                }
                if (Proxy.ObjectExtensions.isNullOrUndefined(padString) || Proxy.ObjectExtensions.isNullOrUndefined(object)) {
                    return object;
                }
                while (object.length < length) {
                    object += padString;
                }
                return object;
            };
            StringExtensions.format = function (object) {
                var params = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    params[_i - 1] = arguments[_i];
                }
                if (!Proxy.ObjectExtensions.isNullOrUndefined(object) && typeof object !== "string") {
                    Proxy.Tracer.Error("StringExtensions.isEmptyOrWhitespace has received input parameter not of type string.");
                }
                if (StringExtensions.isNullOrWhitespace(object)) {
                    return object;
                }
                if (params == null) {
                    throw new Error("StringExtensions::format Invalid parameter (params) cannot be null.");
                }
                for (var index = 0; index < params.length; index++) {
                    if (params[index] == null) {
                        throw new Error("StringExtensions::format Invalid parameter (at index " + index + ") cannot be null or undefined.");
                    }
                    var param = params[index].toString().replace(/\$/gi, '$$$$');
                    var regexp = new RegExp('\\{' + index + '\\}', 'gi');
                    object = object.replace(regexp, param);
                }
                return object;
            };
            StringExtensions.compare = function (object, comparisonObject, ignoreCase) {
                if (Proxy.ObjectExtensions.isNullOrUndefined(object) && Proxy.ObjectExtensions.isNullOrUndefined(comparisonObject)) {
                    return 0;
                }
                else if (Proxy.ObjectExtensions.isNullOrUndefined(object)) {
                    return -1;
                }
                else if (Proxy.ObjectExtensions.isNullOrUndefined(comparisonObject)) {
                    return 1;
                }
                var val1 = ignoreCase ? object.toLowerCase() : object;
                var val2 = ignoreCase ? comparisonObject.toLowerCase() : comparisonObject;
                return val1 < val2 ? -1 : val1 > val2 ? 1 : 0;
            };
            StringExtensions.replaceNewLineWithBr = function (text) {
                if (text) {
                    return StringExtensions.replaceAll(text, "\n", "<br />");
                }
                return text;
            };
            StringExtensions.replaceAll = function (txt, txtToReplace, valueToReplaceWith) {
                return txt.replace(new RegExp(txtToReplace, 'g'), valueToReplaceWith);
            };
            StringExtensions.escapeSingleQuote = function (text) {
                return text.replace(/(')/g, "\'$1");
            };
            StringExtensions.CleanUri = function (uri) {
                if (StringExtensions.isNullOrWhitespace(uri)) {
                    return StringExtensions.EMPTY;
                }
                var cutoffIndex = uri.length - 1;
                while (cutoffIndex >= 0
                    && (uri[cutoffIndex] == '/'
                        || uri[cutoffIndex] == '\\')) {
                    --cutoffIndex;
                }
                return uri.substr(0, cutoffIndex + 1);
            };
            StringExtensions.endsWith = function (str, suffix, caseSensitive) {
                if (caseSensitive === void 0) { caseSensitive = false; }
                if (Proxy.ObjectExtensions.isNullOrUndefined(str) || Proxy.ObjectExtensions.isNullOrUndefined(suffix)) {
                    return false;
                }
                if (suffix.length > str.length) {
                    return false;
                }
                var originalString = (caseSensitive) ? str : str.toLowerCase();
                var subString = (caseSensitive) ? suffix : suffix.toLowerCase();
                return originalString.indexOf(subString, originalString.length - subString.length) !== -1;
            };
            return StringExtensions;
        }());
        StringExtensions.EMPTY = '';
        Proxy.StringExtensions = StringExtensions;
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Common;
        (function (Common) {
            "use strict";
        })(Common = Proxy.Common || (Proxy.Common = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Common;
        (function (Common) {
            "use strict";
        })(Common = Proxy.Common || (Proxy.Common = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Common;
        (function (Common) {
            "use strict";
            var DataServiceQuery = (function () {
                function DataServiceQuery(dataServiceRequestFactory, entitySet, entityType, returnType, key) {
                    this._dataServiceRequestFactory = dataServiceRequestFactory;
                    this._query = {
                        entitySet: entitySet,
                        entityType: entityType,
                        key: key,
                        returnType: returnType,
                        tokens: {}
                    };
                    this._query.resultSettings = { Paging: {}, Sorting: {} };
                }
                DataServiceQuery.prototype.resultSettings = function (value) {
                    if (value == null) {
                        this._query.resultSettings = { Paging: {}, Sorting: {} };
                    }
                    else {
                        this._query.resultSettings = value;
                    }
                    return this;
                };
                DataServiceQuery.prototype.filter = function (value) {
                    this._query.filterSettings = value;
                    return this;
                };
                DataServiceQuery.prototype.top = function (value) {
                    this._query.resultSettings.Paging.Top = value;
                    return this;
                };
                DataServiceQuery.prototype.skip = function (value) {
                    this._query.resultSettings.Paging.Skip = value;
                    return this;
                };
                DataServiceQuery.prototype.expand = function (propertyName) {
                    if (this._query.expands == null) {
                        this._query.expands = [];
                    }
                    this._query.expands.push(propertyName);
                    return this;
                };
                DataServiceQuery.prototype.inlineCount = function () {
                    this._query.inlineCount = true;
                    return this;
                };
                DataServiceQuery.prototype.orderBy = function (value) {
                    if (!this._query.resultSettings.Sorting.Columns) {
                        this._query.resultSettings.Sorting.Columns = [];
                    }
                    this._query.resultSettings.Sorting.Columns.push({ ColumnName: value });
                    return this;
                };
                DataServiceQuery.prototype.create = function (object) {
                    this._query.action = "Create";
                    this._query.data = object;
                    return this._createRequest();
                };
                DataServiceQuery.prototype.read = function () {
                    if (this._query.key) {
                        this._query.action = "Read";
                    }
                    else {
                        this._query.action = "ReadAll";
                        this._query.isReturnTypeACollection = true;
                    }
                    return this._createRequest();
                };
                DataServiceQuery.prototype.update = function (object) {
                    this._query.action = "Update";
                    this._query.data = object;
                    return this._createRequest();
                };
                DataServiceQuery.prototype.delete = function () {
                    this._query.action = "Delete";
                    return this._createRequest();
                };
                DataServiceQuery.prototype.setGetAllRecords = function () {
                    this._query.resultSettings.Paging.Top = -1;
                };
                DataServiceQuery.prototype.isGetAllRecords = function () {
                    return this._query.resultSettings.Paging.Top === -1;
                };
                DataServiceQuery.prototype.createDataServiceRequestForOperation = function (operationName, isAction, returnType, isReturnTypeACollection, data) {
                    this._query.returnType = returnType;
                    this._query.isAction = isAction;
                    this._query.isReturnTypeACollection = isReturnTypeACollection === "true";
                    this._query.action = operationName;
                    this._query.data = data;
                    if (this._query.isReturnTypeACollection && Proxy.ObjectExtensions.isNullOrUndefined(this._query.resultSettings.Paging.Top)) {
                        this.setGetAllRecords();
                    }
                    return this._createRequest();
                };
                DataServiceQuery.prototype._createRequest = function () {
                    return this._dataServiceRequestFactory.create(this._query);
                };
                return DataServiceQuery;
            }());
            DataServiceQuery.AUTHENTICATION_TOKEN_NAME = "Authorization";
            DataServiceQuery.AUTHENTICATION_TOKEN_FORMAT = "Bearer {0}";
            Common.DataServiceQuery = DataServiceQuery;
            var ODataOperationParameters = (function () {
                function ODataOperationParameters() {
                }
                return ODataOperationParameters;
            }());
            Common.ODataOperationParameters = ODataOperationParameters;
        })(Common = Proxy.Common || (Proxy.Common = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        "use strict";
        var ProxyError = (function () {
            function ProxyError(errorCode, errorMessage, localizedErrorMessage, canRetry, extraData) {
                if (localizedErrorMessage === void 0) { localizedErrorMessage = Proxy.StringExtensions.EMPTY; }
                if (canRetry === void 0) { canRetry = false; }
                if (extraData === void 0) { extraData = null; }
                var formatData = [];
                for (var _i = 5; _i < arguments.length; _i++) {
                    formatData[_i - 5] = arguments[_i];
                }
                this._canRetry = false;
                this._errorCode = errorCode;
                this._errorMessage = errorMessage;
                this._localizedErrorMessage = localizedErrorMessage;
                this._canRetry = canRetry;
                this._commerceException = null;
                this._formatData = formatData;
                this._extraData = extraData;
            }
            Object.defineProperty(ProxyError.prototype, "commerceException", {
                get: function () {
                    return this._commerceException;
                },
                set: function (exception) {
                    this._commerceException = exception;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ProxyError.prototype, "ErrorCode", {
                get: function () {
                    return this._errorCode;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ProxyError.prototype, "ErrorMessage", {
                get: function () {
                    return this._errorMessage;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ProxyError.prototype, "LocalizedErrorMessage", {
                get: function () {
                    return this._localizedErrorMessage;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ProxyError.prototype, "formatData", {
                get: function () {
                    return this._formatData;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ProxyError.prototype, "extraData", {
                get: function () {
                    return this._extraData;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ProxyError.prototype, "ErrorTitleResourceId", {
                get: function () {
                    var errorTitleResourceId = "string_29004";
                    return errorTitleResourceId;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ProxyError.prototype, "CanRetry", {
                get: function () {
                    return this._canRetry;
                },
                enumerable: true,
                configurable: true
            });
            return ProxyError;
        }());
        Proxy.ProxyError = ProxyError;
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        "use strict";
        var FunctionQueueHelper = (function () {
            function FunctionQueueHelper() {
            }
            FunctionQueueHelper.callFunctions = function (functionQueue, callerContext, data) {
                if (functionQueue === undefined || functionQueue === null || functionQueue.length == 0) {
                    return;
                }
                for (var i = 0; i < functionQueue.length; i++) {
                    functionQueue[i].call(callerContext, data);
                }
                functionQueue = [];
            };
            FunctionQueueHelper.queueFunction = function (functionQueue, callback) {
                if (!(callback === undefined || callback === null)) {
                    functionQueue.push(callback);
                }
            };
            return FunctionQueueHelper;
        }());
        Proxy.FunctionQueueHelper = FunctionQueueHelper;
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        "use strict";
        var AsyncResult = (function () {
            function AsyncResult(callerContext) {
                this._callerContext = callerContext;
                this.clear();
            }
            AsyncResult.prototype.clear = function () {
                this._succeded = false;
                this._failed = false;
                this._result = undefined;
                this._successCallbacks = [];
                this._errorCallbacks = [];
            };
            AsyncResult.prototype.resolve = function (result) {
                this._succeded = true;
                this._result = result;
                this._errorCallbacks = [];
                Proxy.FunctionQueueHelper.callFunctions(this._successCallbacks, this._callerContext, this._result);
            };
            AsyncResult.prototype.reject = function (errors) {
                this._failed = true;
                this._errors = errors;
                this._successCallbacks = [];
                Proxy.FunctionQueueHelper.callFunctions(this._errorCallbacks, this._callerContext, this._errors);
            };
            AsyncResult.prototype.resolveOrRejectOn = function (asyncResult) {
                var _this = this;
                asyncResult
                    .done(function (result) { _this.resolve(result); })
                    .fail(function (errors) { _this.reject(errors); });
            };
            AsyncResult.prototype.done = function (callback) {
                if (this._succeded && callback) {
                    callback.call(this._callerContext, this._result);
                }
                else {
                    Proxy.FunctionQueueHelper.queueFunction(this._successCallbacks, callback);
                }
                return this;
            };
            AsyncResult.prototype.fail = function (callback) {
                if (this._failed && callback) {
                    callback.call(this._callerContext, this._errors);
                }
                else {
                    Proxy.FunctionQueueHelper.queueFunction(this._errorCallbacks, callback);
                }
                return this;
            };
            AsyncResult.prototype.map = function (mapFunction) {
                var _this = this;
                if (!mapFunction) {
                    throw "The map function is invalid.";
                }
                var asyncResult = new AsyncResult(null);
                this.done(function () { asyncResult.resolve(mapFunction(_this._result)); })
                    .fail(function (errors) { asyncResult.reject(errors); });
                return asyncResult;
            };
            AsyncResult.createResolved = function (result) {
                var asyncResult = new AsyncResult(null);
                asyncResult.resolve(result);
                return asyncResult;
            };
            AsyncResult.createRejected = function (errors) {
                var asyncResult = new AsyncResult(null);
                asyncResult.reject(errors || []);
                return asyncResult;
            };
            AsyncResult.join = function (asyncResults) {
                if (!Proxy.ArrayExtensions.hasElements(asyncResults)) {
                    return AsyncResult.createResolved();
                }
                asyncResults = asyncResults.filter(function (a) { return !Proxy.ObjectExtensions.isNullOrUndefined(a); });
                return new CompoundAsyncResult(asyncResults);
            };
            return AsyncResult;
        }());
        Proxy.AsyncResult = AsyncResult;
        var VoidAsyncResult = (function (_super) {
            __extends(VoidAsyncResult, _super);
            function VoidAsyncResult(callerContext) {
                return _super.call(this, callerContext) || this;
            }
            VoidAsyncResult.prototype.resolve = function () {
                _super.prototype.resolve.call(this, null);
            };
            VoidAsyncResult.prototype.done = function (callback) {
                return _super.prototype.done.call(this, callback);
            };
            VoidAsyncResult.prototype.map = function (mapFunction) {
                return _super.prototype.map.call(this, mapFunction);
            };
            return VoidAsyncResult;
        }(AsyncResult));
        Proxy.VoidAsyncResult = VoidAsyncResult;
        var CompoundAsyncResult = (function (_super) {
            __extends(CompoundAsyncResult, _super);
            function CompoundAsyncResult(asyncResults) {
                var _this = _super.call(this, null) || this;
                _this._asyncResultsCount = asyncResults.length;
                _this._succeedCount = 0;
                _this._failedCount = 0;
                _this._allErrors = [];
                _this.attachToCallbacks(asyncResults);
                return _this;
            }
            CompoundAsyncResult.prototype.attachToCallbacks = function (asyncResults) {
                var _this = this;
                asyncResults.forEach(function (asyncResult) {
                    asyncResult.done(function (result) {
                        _this._succeedCount++;
                        _this.resolveOrReject();
                    });
                    asyncResult.fail(function (errors) {
                        _this._failedCount++;
                        _this._allErrors = _this._allErrors.concat(errors);
                        _this.resolveOrReject();
                    });
                });
            };
            CompoundAsyncResult.prototype.resolveOrReject = function () {
                if ((this._succeedCount + this._failedCount) == this._asyncResultsCount) {
                    if (this._failedCount > 0) {
                        this.reject(this._allErrors);
                    }
                    else {
                        this.resolve();
                    }
                }
            };
            return CompoundAsyncResult;
        }(VoidAsyncResult));
        var AsyncQueue = (function () {
            function AsyncQueue() {
                this._asyncQueue = [];
                this._asyncResult = null;
                this._canceled = false;
            }
            AsyncQueue.prototype.enqueue = function (asyncCall) {
                if (!this._asyncResult) {
                    Proxy.FunctionQueueHelper.queueFunction(this._asyncQueue, asyncCall);
                }
                return this;
            };
            AsyncQueue.prototype.cancelOn = function (result) {
                var _this = this;
                if (result) {
                    result.done(function (cancelResult) {
                        if (cancelResult && cancelResult.canceled) {
                            _this.cancel();
                        }
                    });
                }
                return result;
            };
            AsyncQueue.prototype.cancel = function () {
                this._canceled = true;
            };
            AsyncQueue.prototype.run = function () {
                var _this = this;
                if (this._asyncResult) {
                    return this._asyncResult;
                }
                this._asyncResult = new AsyncResult(null);
                Proxy.ObjectExtensions.forEachAsync(this._asyncQueue, function (nextInQueue, moveNext) {
                    if (_this._canceled) {
                        moveNext();
                        return;
                    }
                    var result = nextInQueue();
                    if (result) {
                        result.done(function () { moveNext(); }).fail(function (errors) {
                            _this._asyncQueue = [];
                            _this._asyncResult.reject(errors);
                        });
                    }
                    else {
                        moveNext();
                    }
                }, function () {
                    _this._asyncQueue = [];
                    _this._asyncResult.resolve({ canceled: _this._canceled });
                });
                return this._asyncResult;
            };
            return AsyncQueue;
        }());
        Proxy.AsyncQueue = AsyncQueue;
        var AsyncWorkerQueue = (function () {
            function AsyncWorkerQueue() {
                this._processing = false;
                this._workerQueue = [];
            }
            AsyncWorkerQueue.prototype.enqueue = function (asyncCall) {
                var asyncResult = new AsyncResult(null);
                this._workerQueue.push({ asyncCall: asyncCall, asyncResult: asyncResult });
                if (!this._processing) {
                    this.processQueue();
                }
                return asyncResult;
            };
            AsyncWorkerQueue.prototype.processQueue = function () {
                this._processing = true;
            };
            return AsyncWorkerQueue;
        }());
        Proxy.AsyncWorkerQueue = AsyncWorkerQueue;
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var DataServiceQuery = Proxy.Common.DataServiceQuery;
        var ODataOperationParameters = Proxy.Common.ODataOperationParameters;
        var CommerceContext = (function () {
            function CommerceContext(dataServiceRequestFactory) {
                this._dataServiceRequestFactory = dataServiceRequestFactory;
            }
            Object.defineProperty(CommerceContext.prototype, "dataServiceRequestFactory", {
                get: function () {
                    return this._dataServiceRequestFactory;
                },
                set: function (dataServiceRequestFactory) {
                    this._dataServiceRequestFactory = dataServiceRequestFactory;
                },
                enumerable: true,
                configurable: true
            });
            CommerceContext.prototype.storeOperations = function () {
                return new StoreOperationsDataServiceQuery(this._dataServiceRequestFactory);
            };
            CommerceContext.prototype.categories = function (recordId) {
                var key = (recordId) ? { RecordId: recordId } : null;
                return new CategoriesDataServiceQuery(this._dataServiceRequestFactory, "Categories", "Category", Proxy.Entities.CategoryClass, key);
            };
            CommerceContext.prototype.carts = function (id) {
                var key = (id) ? { Id: id } : null;
                return new CartsDataServiceQuery(this._dataServiceRequestFactory, "Carts", "Cart", Proxy.Entities.CartClass, key);
            };
            CommerceContext.prototype.customers = function (accountNumber) {
                var key = (accountNumber) ? { AccountNumber: accountNumber } : null;
                return new CustomersDataServiceQuery(this._dataServiceRequestFactory, "Customers", "Customer", Proxy.Entities.CustomerClass, key);
            };
            CommerceContext.prototype.employees = function (staffId) {
                var key = (staffId) ? { StaffId: staffId } : null;
                return new EmployeesDataServiceQuery(this._dataServiceRequestFactory, "Employees", "Employee", Proxy.Entities.EmployeeClass, key);
            };
            CommerceContext.prototype.salesOrders = function (id) {
                var key = (id) ? { Id: id } : null;
                return new SalesOrdersDataServiceQuery(this._dataServiceRequestFactory, "SalesOrders", "SalesOrder", Proxy.Entities.SalesOrderClass, key);
            };
            CommerceContext.prototype.shifts = function (shiftId, terminalId) {
                var key = (shiftId && terminalId) ? { ShiftId: shiftId, TerminalId: terminalId } : null;
                return new ShiftsDataServiceQuery(this._dataServiceRequestFactory, "Shifts", "Shift", Proxy.Entities.ShiftClass, key);
            };
            CommerceContext.prototype.stockCountJournals = function (journalId) {
                var key = (journalId) ? { JournalId: journalId } : null;
                return new StockCountJournalsDataServiceQuery(this._dataServiceRequestFactory, "StockCountJournals", "StockCountJournal", Proxy.Entities.StockCountJournalClass, key);
            };
            CommerceContext.prototype.orgUnits = function (orgUnitNumber) {
                var key = (orgUnitNumber) ? { OrgUnitNumber: orgUnitNumber } : null;
                return new OrgUnitsDataServiceQuery(this._dataServiceRequestFactory, "OrgUnits", "OrgUnit", Proxy.Entities.OrgUnitClass, key);
            };
            CommerceContext.prototype.products = function (recordId) {
                var key = (recordId) ? { RecordId: recordId } : null;
                return new ProductsDataServiceQuery(this._dataServiceRequestFactory, "Products", "Product", Proxy.Entities.ProductClass, key);
            };
            CommerceContext.prototype.catalogs = function (recordId) {
                var key = (recordId) ? { RecordId: recordId } : null;
                return new CatalogsDataServiceQuery(this._dataServiceRequestFactory, "Catalogs", "ProductCatalog", Proxy.Entities.ProductCatalogClass, key);
            };
            CommerceContext.prototype.commerceLists = function (id) {
                var key = (id) ? { Id: id } : null;
                return new CommerceListsDataServiceQuery(this._dataServiceRequestFactory, "CommerceLists", "CommerceList", Proxy.Entities.CommerceListClass, key);
            };
            CommerceContext.prototype.transferOrders = function (orderId) {
                var key = (orderId) ? { OrderId: orderId } : null;
                return new TransferOrdersDataServiceQuery(this._dataServiceRequestFactory, "TransferOrders", "TransferOrder", Proxy.Entities.TransferOrderClass, key);
            };
            CommerceContext.prototype.purchaseOrders = function (orderId) {
                var key = (orderId) ? { OrderId: orderId } : null;
                return new PurchaseOrdersDataServiceQuery(this._dataServiceRequestFactory, "PurchaseOrders", "PurchaseOrder", Proxy.Entities.PurchaseOrderClass, key);
            };
            CommerceContext.prototype.pickingLists = function (orderId) {
                var key = (orderId) ? { OrderId: orderId } : null;
                return new PickingListsDataServiceQuery(this._dataServiceRequestFactory, "PickingLists", "PickingList", Proxy.Entities.PickingListClass, key);
            };
            CommerceContext.prototype.warehouses = function (inventLocation) {
                var key = (inventLocation) ? { InventLocation: inventLocation } : null;
                return new WarehousesDataServiceQuery(this._dataServiceRequestFactory, "Warehouses", "Warehouse", Proxy.Entities.WarehouseClass, key);
            };
            CommerceContext.prototype.scanResults = function (scannedText) {
                var key = (scannedText) ? { ScannedText: scannedText } : null;
                return new DataServiceQuery(this._dataServiceRequestFactory, "ScanResults", "ScanResult", Proxy.Entities.ScanResultClass, key);
            };
            return CommerceContext;
        }());
        CommerceContext.ApiVersion = "7.3";
        CommerceContext.DoNotLogTransactionId = "-1";
        Proxy.CommerceContext = CommerceContext;
        var StoreOperationsDataServiceQuery = (function (_super) {
            __extends(StoreOperationsDataServiceQuery, _super);
            function StoreOperationsDataServiceQuery(dataServiceRequestFactory) {
                return _super.call(this, dataServiceRequestFactory) || this;
            }
            StoreOperationsDataServiceQuery.prototype.roundAmountByTenderType = function (amount, tenderTypeId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { amount: amount, tenderTypeId: tenderTypeId };
                return this.createDataServiceRequestForOperation('RoundAmountByTenderType', true, '', 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getReceiptMasks = function (receiptTransactionType) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { receiptTransactionType: receiptTransactionType };
                return this.createDataServiceRequestForOperation('GetReceiptMasks', true, Proxy.Entities.ReceiptMaskClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.startSession = function (transactionId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { transactionId: transactionId };
                return this.createDataServiceRequestForOperation('StartSession', true, '', '', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.endSession = function (transactionId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { transactionId: transactionId };
                return this.createDataServiceRequestForOperation('EndSession', true, '', '', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.activateDevice = function (deviceNumber, terminalId, deviceId, forceActivate, deviceType) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { deviceNumber: deviceNumber, terminalId: terminalId, deviceId: deviceId, forceActivate: forceActivate, deviceType: deviceType };
                return this.createDataServiceRequestForOperation('ActivateDevice', true, Proxy.Entities.DeviceActivationResultClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.massActivateDevice = function (deviceNumber, terminalId, deviceId, deviceType) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { deviceNumber: deviceNumber, terminalId: terminalId, deviceId: deviceId, deviceType: deviceType };
                return this.createDataServiceRequestForOperation('MassActivateDevice', true, Proxy.Entities.DeviceActivationResultClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.deactivateDevice = function (transactionId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { transactionId: transactionId };
                return this.createDataServiceRequestForOperation('DeactivateDevice', true, '', '', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.createHardwareStationToken = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('CreateHardwareStationToken', true, Proxy.Entities.CreateHardwareStationTokenResultClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.validateHardwareStationToken = function (deviceNumber, hardwareStationToken) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { deviceNumber: deviceNumber, hardwareStationToken: hardwareStationToken };
                return this.createDataServiceRequestForOperation('ValidateHardwareStationToken', true, Proxy.Entities.ValidateHardwareStationTokenResultClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getBarcodeById = function (barcodeId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { barcodeId: barcodeId };
                return this.createDataServiceRequestForOperation('GetBarcodeById', true, Proxy.Entities.BarcodeClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getButtonGridById = function (buttonGridId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { buttonGridId: buttonGridId };
                return this.createDataServiceRequestForOperation('GetButtonGridById', true, Proxy.Entities.ButtonGridClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getButtonGridsByIds = function (getButtonGridsByIdsCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { getButtonGridsByIdsCriteria: getButtonGridsByIdsCriteria };
                return this.createDataServiceRequestForOperation('GetButtonGridsByIds', true, Proxy.Entities.ButtonGridClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getCardTypes = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetCardTypes', true, Proxy.Entities.CardTypeInfoClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getSupportedPaymentCardTypes = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetSupportedPaymentCardTypes', true, '', 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getCities = function (countryRegionId, stateProvinceId, countyId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { countryRegionId: countryRegionId, stateProvinceId: stateProvinceId, countyId: countyId };
                return this.createDataServiceRequestForOperation('GetCities', true, Proxy.Entities.CityInfoClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getCountryRegionsByLanguageId = function (languageId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { languageId: languageId };
                return this.createDataServiceRequestForOperation('GetCountryRegionsByLanguageId', true, Proxy.Entities.CountryRegionInfoClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getCounties = function (countryRegionId, stateProvinceId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { countryRegionId: countryRegionId, stateProvinceId: stateProvinceId };
                return this.createDataServiceRequestForOperation('GetCounties', true, Proxy.Entities.CountyInfoClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getCreditMemoById = function (creditMemoId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { creditMemoId: creditMemoId };
                return this.createDataServiceRequestForOperation('GetCreditMemoById', true, Proxy.Entities.CreditMemoClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getDownloadInterval = function (dataStoreName) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { dataStoreName: dataStoreName };
                return this.createDataServiceRequestForOperation('GetDownloadInterval', true, '', 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getTerminalDataStoreName = function (terminalId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { terminalId: terminalId };
                return this.createDataServiceRequestForOperation('GetTerminalDataStoreName', true, '', 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getDownloadLink = function (dataStoreName, downloadSessionId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { dataStoreName: dataStoreName, downloadSessionId: downloadSessionId };
                return this.createDataServiceRequestForOperation('GetDownloadLink', true, '', 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getDownloadSessions = function (dataStoreName) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { dataStoreName: dataStoreName };
                return this.createDataServiceRequestForOperation('GetDownloadSessions', true, Proxy.Entities.DownloadSessionClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getInitialDownloadSessions = function (dataStoreName) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { dataStoreName: dataStoreName };
                return this.createDataServiceRequestForOperation('GetInitialDownloadSessions', true, Proxy.Entities.DownloadSessionClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getUploadJobDefinitions = function (dataStoreName) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { dataStoreName: dataStoreName };
                return this.createDataServiceRequestForOperation('GetUploadJobDefinitions', true, '', 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getUploadInterval = function (dataStoreName) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { dataStoreName: dataStoreName };
                return this.createDataServiceRequestForOperation('GetUploadInterval', true, '', 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.postOfflineTransactions = function (offlineTransactionForMPOS) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { offlineTransactionForMPOS: offlineTransactionForMPOS };
                return this.createDataServiceRequestForOperation('PostOfflineTransactions', true, '', 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getRetailTrialPlanOffer = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetRetailTrialPlanOffer', true, '', 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getLatestNumberSequence = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetLatestNumberSequence', true, Proxy.Entities.NumberSequenceSeedDataClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.calculateTotalCurrencyAmount = function (currenciesAmount) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { currenciesAmount: currenciesAmount };
                return this.createDataServiceRequestForOperation('CalculateTotalCurrencyAmount', true, Proxy.Entities.CurrencyAmountClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getDiscountCode = function (discountCode) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { discountCode: discountCode };
                return this.createDataServiceRequestForOperation('GetDiscountCode', true, Proxy.Entities.DiscountCodeClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getDiscountCodesByOfferId = function (offerId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { offerId: offerId };
                return this.createDataServiceRequestForOperation('GetDiscountCodesByOfferId', true, Proxy.Entities.DiscountCodeClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getDiscountCodesByKeyword = function (keyword, activeDate) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { keyword: keyword, activeDate: activeDate };
                return this.createDataServiceRequestForOperation('GetDiscountCodesByKeyword', true, Proxy.Entities.DiscountCodeClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getDistricts = function (countryRegionId, stateProvinceId, countyId, cityName) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { countryRegionId: countryRegionId, stateProvinceId: stateProvinceId, countyId: countyId, cityName: cityName };
                return this.createDataServiceRequestForOperation('GetDistricts', true, Proxy.Entities.DistrictInfoClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getHardwareStationProfiles = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetHardwareStationProfiles', true, Proxy.Entities.HardwareStationProfileClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getHardwareProfileById = function (hardwareProfileId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { hardwareProfileId: hardwareProfileId };
                return this.createDataServiceRequestForOperation('GetHardwareProfileById', true, Proxy.Entities.HardwareProfileClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getLocalizedStrings = function (languageId, textId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { languageId: languageId, textId: textId };
                return this.createDataServiceRequestForOperation('GetLocalizedStrings', true, Proxy.Entities.LocalizedStringClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getOperationPermissionById = function (operationId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { operationId: operationId };
                return this.createDataServiceRequestForOperation('GetOperationPermissionById', true, Proxy.Entities.OperationPermissionClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getReasonCodesById = function (reasonCodeGroupId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { reasonCodeGroupId: reasonCodeGroupId };
                return this.createDataServiceRequestForOperation('GetReasonCodesById', true, Proxy.Entities.ReasonCodeClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.searchReportDataSet = function (reportId, parameters) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { reportId: reportId, parameters: parameters };
                return this.createDataServiceRequestForOperation('SearchReportDataSet', true, Proxy.Entities.ReportDataSetClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getReportDataSetById = function (reportId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { reportId: reportId };
                return this.createDataServiceRequestForOperation('GetReportDataSetById', true, Proxy.Entities.ReportDataSetClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getIncomeExpenseAccounts = function (incomeExpenseAccountType) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { incomeExpenseAccountType: incomeExpenseAccountType };
                return this.createDataServiceRequestForOperation('GetIncomeExpenseAccounts', true, Proxy.Entities.IncomeExpenseAccountClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getStateProvinces = function (countryRegionId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { countryRegionId: countryRegionId };
                return this.createDataServiceRequestForOperation('GetStateProvinces', true, Proxy.Entities.StateProvinceInfoClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getZipCodes = function (countryRegionId, stateProvinceId, countyId, cityName, district) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { countryRegionId: countryRegionId, stateProvinceId: stateProvinceId, countyId: countyId, cityName: cityName, district: district };
                return this.createDataServiceRequestForOperation('GetZipCodes', true, Proxy.Entities.ZipCodeInfoClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getAddressFromZipCode = function (countryRegionId, zipPostalCode) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { countryRegionId: countryRegionId, zipPostalCode: zipPostalCode };
                return this.createDataServiceRequestForOperation('GetAddressFromZipCode', true, Proxy.Entities.ZipCodeInfoClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.disassembleKitTransactions = function (kitTransaction) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { kitTransaction: kitTransaction };
                return this.createDataServiceRequestForOperation('DisassembleKitTransactions', true, Proxy.Entities.KitTransactionClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.issueLoyaltyCard = function (loyaltyCard) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { loyaltyCard: loyaltyCard };
                return this.createDataServiceRequestForOperation('IssueLoyaltyCard', true, Proxy.Entities.LoyaltyCardClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getLoyaltyCard = function (cardNumber) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { cardNumber: cardNumber };
                return this.createDataServiceRequestForOperation('GetLoyaltyCard', true, Proxy.Entities.LoyaltyCardClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getCustomerLoyaltyCards = function (accountNumber) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { accountNumber: accountNumber };
                return this.createDataServiceRequestForOperation('GetCustomerLoyaltyCards', true, Proxy.Entities.LoyaltyCardClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getLoyaltyCardTransactions = function (cardNumber, rewardPointId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { cardNumber: cardNumber, rewardPointId: rewardPointId };
                return this.createDataServiceRequestForOperation('GetLoyaltyCardTransactions', true, Proxy.Entities.LoyaltyCardTransactionClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.searchJournalTransactions = function (searchCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { searchCriteria: searchCriteria };
                return this.createDataServiceRequestForOperation('SearchJournalTransactions', true, Proxy.Entities.TransactionClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getGiftCard = function (giftCardId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { giftCardId: giftCardId };
                return this.createDataServiceRequestForOperation('GetGiftCard', true, Proxy.Entities.GiftCardClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getNonSalesTransactions = function (shiftId, shiftTerminalId, nonSalesTenderTypeValue) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { shiftId: shiftId, shiftTerminalId: shiftTerminalId, nonSalesTenderTypeValue: nonSalesTenderTypeValue };
                return this.createDataServiceRequestForOperation('GetNonSalesTransactions', true, Proxy.Entities.NonSalesTransactionClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.createNonSalesTransaction = function (nonSalesTransaction) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { nonSalesTransaction: nonSalesTransaction };
                return this.createDataServiceRequestForOperation('CreateNonSalesTransaction', true, Proxy.Entities.NonSalesTransactionClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.createDropAndDeclareTransaction = function (dropAndDeclareTransaction) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { dropAndDeclareTransaction: dropAndDeclareTransaction };
                return this.createDataServiceRequestForOperation('CreateDropAndDeclareTransaction', true, Proxy.Entities.DropAndDeclareTransactionClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getTaxOverrides = function (overrideBy) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { overrideBy: overrideBy };
                return this.createDataServiceRequestForOperation('GetTaxOverrides', true, Proxy.Entities.TaxOverrideClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getCustomerBalance = function (accountNumber, invoiceAccountNumber) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { accountNumber: accountNumber, invoiceAccountNumber: invoiceAccountNumber };
                return this.createDataServiceRequestForOperation('GetCustomerBalance', true, Proxy.Entities.CustomerBalancesClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.initiateLinkToExistingCustomer = function (email, emailTemplateId, emailProperties) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { email: email, emailTemplateId: emailTemplateId, emailProperties: emailProperties };
                return this.createDataServiceRequestForOperation('InitiateLinkToExistingCustomer', true, Proxy.Entities.LinkToExistingCustomerResultClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.finalizeLinkToExistingCustomer = function (email) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { email: email };
                return this.createDataServiceRequestForOperation('FinalizeLinkToExistingCustomer', true, Proxy.Entities.LinkToExistingCustomerResultClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.unlinkFromExistingCustomer = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('UnlinkFromExistingCustomer', true, '', '', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getOfflineSyncStatus = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetOfflineSyncStatus', true, Proxy.Entities.OfflineSyncStatsLineClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getOfflinePendingTransactionCount = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetOfflinePendingTransactionCount', true, '', 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.updateDownloadSession = function (downloadSession) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { downloadSession: downloadSession };
                return this.createDataServiceRequestForOperation('UpdateDownloadSession', true, '', 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.updateApplicationVersion = function (appVersion) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { appVersion: appVersion };
                return this.createDataServiceRequestForOperation('UpdateApplicationVersion', true, '', '', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getStorageAccessTokenForUpload = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetStorageAccessTokenForUpload', true, Proxy.Entities.StorageAccessTokenClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getBusinessProcessModelLibraries = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetBusinessProcessModelLibraries', true, Proxy.Entities.FrameworkClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getBusinessProcessModelLibrary = function (businessProcessModelFrameworkLineId, hierarchyDepth) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { businessProcessModelFrameworkLineId: businessProcessModelFrameworkLineId, hierarchyDepth: hierarchyDepth };
                return this.createDataServiceRequestForOperation('GetBusinessProcessModelLibrary', true, Proxy.Entities.FrameworkClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.searchTaskGuidesByTitle = function (businessProcessModelFrameworkLineId, taskGuideSearchText, queryTypeValue) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { businessProcessModelFrameworkLineId: businessProcessModelFrameworkLineId, taskGuideSearchText: taskGuideSearchText, queryTypeValue: queryTypeValue };
                return this.createDataServiceRequestForOperation('SearchTaskGuidesByTitle', true, Proxy.Entities.TaskGuidesSearchResultClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.generateBusinessProcessModelPackage = function (taskRecording) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { taskRecording: taskRecording };
                return this.createDataServiceRequestForOperation('GenerateBusinessProcessModelPackage', true, '', 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.downloadRecording = function (businessProcessModelLineId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { businessProcessModelLineId: businessProcessModelLineId };
                return this.createDataServiceRequestForOperation('DownloadRecording', true, Proxy.Entities.RecordingClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.loadRecordingFromFile = function (recordingUrl) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { recordingUrl: recordingUrl };
                return this.createDataServiceRequestForOperation('LoadRecordingFromFile', true, Proxy.Entities.RecordingClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.generateRecordingFile = function (taskRecording) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { taskRecording: taskRecording };
                return this.createDataServiceRequestForOperation('GenerateRecordingFile', true, '', 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.generateTrainingDocument = function (taskRecording) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { taskRecording: taskRecording };
                return this.createDataServiceRequestForOperation('GenerateTrainingDocument', true, '', 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.generateRecordingBundle = function (taskRecording) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { taskRecording: taskRecording };
                return this.createDataServiceRequestForOperation('GenerateRecordingBundle', true, '', 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.uploadRecording = function (taskRecording, businessProcessModelLineId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { taskRecording: taskRecording, businessProcessModelLineId: businessProcessModelLineId };
                return this.createDataServiceRequestForOperation('UploadRecording', true, '', '', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getAttributeDefinitions = function (attributeDefinitionCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { attributeDefinitionCriteria: attributeDefinitionCriteria };
                return this.createDataServiceRequestForOperation('GetAttributeDefinitions', true, Proxy.Entities.AttributeDefinitionClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.saveFiscalTransaction = function (fiscalTransaction) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { fiscalTransaction: fiscalTransaction };
                return this.createDataServiceRequestForOperation('SaveFiscalTransaction', true, '', '', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.validatePrintReceiptCopyAllowed = function (salesOrderToPrint) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { salesOrderToPrint: salesOrderToPrint };
                return this.createDataServiceRequestForOperation('ValidatePrintReceiptCopyAllowed', true, '', '', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.registerAuditEvent = function (auditEvent) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { auditEvent: auditEvent };
                return this.createDataServiceRequestForOperation('RegisterAuditEvent', true, '', '', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getInventoryAvailableToPromise = function (productId, itemId, inventLocationId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { productId: productId, itemId: itemId, inventLocationId: inventLocationId };
                return this.createDataServiceRequestForOperation('GetInventoryAvailableToPromise', true, Proxy.Entities.InventoryAvailableToPromiseClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getSalesOrdersWithNoFiscalTransactions = function (storeNumber, terminalId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { storeNumber: storeNumber, terminalId: terminalId };
                return this.createDataServiceRequestForOperation('GetSalesOrdersWithNoFiscalTransactions', true, Proxy.Entities.SalesOrderClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getNotifications = function (subscribedOperations) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { subscribedOperations: subscribedOperations };
                return this.createDataServiceRequestForOperation('GetNotifications', true, Proxy.Entities.NotificationItemClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.acknowledgeNotifications = function (lastPullDateTime) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { lastPullDateTime: lastPullDateTime };
                return this.createDataServiceRequestForOperation('AcknowledgeNotifications', true, '', '', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getButtonGrids = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetButtonGrids', false, Proxy.Entities.ButtonGridClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getButtonGridsByScreenSize = function (height, width) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { height: height, width: width };
                return this.createDataServiceRequestForOperation('GetButtonGridsByScreenSize', false, Proxy.Entities.ButtonGridClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getCashDeclarations = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetCashDeclarations', false, Proxy.Entities.CashDeclarationClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getCountryRegions = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetCountryRegions', false, Proxy.Entities.CountryRegionInfoClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getCustomerGroups = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetCustomerGroups', false, Proxy.Entities.CustomerGroupClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getDeliveryOptions = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetDeliveryOptions', false, Proxy.Entities.DeliveryOptionClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getEnvironmentConfiguration = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetEnvironmentConfiguration', false, Proxy.Entities.EnvironmentConfigurationClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getExtensionProfile = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetExtensionProfile', false, Proxy.Entities.ExtensionProfileClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getDeviceConfiguration = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetDeviceConfiguration', false, Proxy.Entities.DeviceConfigurationClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getLanguages = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetLanguages', false, Proxy.Entities.SupportedLanguageClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getAffiliations = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetAffiliations', false, Proxy.Entities.AffiliationClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getOperationPermissions = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetOperationPermissions', false, Proxy.Entities.OperationPermissionClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getReasonCodes = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetReasonCodes', false, Proxy.Entities.ReasonCodeClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getReturnOrderReasonCodes = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetReturnOrderReasonCodes', false, Proxy.Entities.ReasonCodeClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getSalesTaxGroups = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetSalesTaxGroups', false, Proxy.Entities.SalesTaxGroupClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getTenderTypes = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetTenderTypes', false, Proxy.Entities.TenderTypeClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getUnitsOfMeasure = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetUnitsOfMeasure', false, Proxy.Entities.UnitOfMeasureClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getDiscountCodes = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetDiscountCodes', false, Proxy.Entities.DiscountCodeClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getCurrencies = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetCurrencies', false, Proxy.Entities.CurrencyClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getCurrenciesAmount = function (currencyCode, amount) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { currencyCode: currencyCode, amount: amount };
                return this.createDataServiceRequestForOperation('GetCurrenciesAmount', false, Proxy.Entities.CurrencyAmountClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getCommissionSalesGroups = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetCommissionSalesGroups', false, Proxy.Entities.CommissionSalesGroupClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getPaymentMerchantInformation = function (hardwareProfileId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { hardwareProfileId: hardwareProfileId };
                return this.createDataServiceRequestForOperation('GetPaymentMerchantInformation', false, Proxy.Entities.PaymentMerchantInformationClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getOnlineChannelPublishStatus = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetOnlineChannelPublishStatus', false, '', 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.setOnlineChannelPublishStatus = function (publishingStatus, statusMessage) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { publishingStatus: publishingStatus, statusMessage: statusMessage };
                return this.createDataServiceRequestForOperation('SetOnlineChannelPublishStatus', true, '', '', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getAvailableDevices = function (deviceType) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { deviceType: deviceType };
                return this.createDataServiceRequestForOperation('GetAvailableDevices', false, Proxy.Entities.DeviceClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getImageBlob = function (imageId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { imageId: imageId };
                return this.createDataServiceRequestForOperation('GetImageBlob', false, Proxy.Entities.MediaBlobClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getExtensibleEnumerations = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetExtensibleEnumerations', false, Proxy.Entities.ExtensibleEnumerationContainerClass, 'true', oDataOperationParameters);
            };
            return StoreOperationsDataServiceQuery;
        }(DataServiceQuery));
        Proxy.StoreOperationsDataServiceQuery = StoreOperationsDataServiceQuery;
        var CategoriesDataServiceQuery = (function (_super) {
            __extends(CategoriesDataServiceQuery, _super);
            function CategoriesDataServiceQuery(dataServiceRequestFactory, entitySet, entityType, returnType, key) {
                return _super.call(this, dataServiceRequestFactory, entitySet, entityType, returnType, key) || this;
            }
            CategoriesDataServiceQuery.prototype.getCategories = function (channelId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId };
                return this.createDataServiceRequestForOperation('GetCategories', true, Proxy.Entities.CategoryClass, 'true', oDataOperationParameters);
            };
            CategoriesDataServiceQuery.prototype.getAttributes = function (categoryId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { categoryId: categoryId };
                return this.createDataServiceRequestForOperation('GetAttributes', false, Proxy.Entities.AttributeCategoryClass, 'true', oDataOperationParameters);
            };
            CategoriesDataServiceQuery.prototype.getChildren = function (channelId, categoryId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, categoryId: categoryId };
                return this.createDataServiceRequestForOperation('GetChildren', true, Proxy.Entities.CategoryClass, 'true', oDataOperationParameters);
            };
            return CategoriesDataServiceQuery;
        }(DataServiceQuery));
        Proxy.CategoriesDataServiceQuery = CategoriesDataServiceQuery;
        var CartsDataServiceQuery = (function (_super) {
            __extends(CartsDataServiceQuery, _super);
            function CartsDataServiceQuery(dataServiceRequestFactory, entitySet, entityType, returnType, key) {
                return _super.call(this, dataServiceRequestFactory, entitySet, entityType, returnType, key) || this;
            }
            CartsDataServiceQuery.prototype.checkout = function (receiptEmail, tokenizedPaymentCard, receiptNumberSequence, cartTenderLines, cartVersion) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { receiptEmail: receiptEmail, tokenizedPaymentCard: tokenizedPaymentCard, receiptNumberSequence: receiptNumberSequence, cartTenderLines: cartTenderLines, cartVersion: cartVersion };
                return this.createDataServiceRequestForOperation('Checkout', true, Proxy.Entities.SalesOrderClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.getPaymentsHistory = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetPaymentsHistory', true, Proxy.Entities.TenderLineClass, 'true', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.getLineDeliveryOptionsByChannelId = function (lineShippingAddresses, channelId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { lineShippingAddresses: lineShippingAddresses, channelId: channelId };
                return this.createDataServiceRequestForOperation('GetLineDeliveryOptionsByChannelId', true, Proxy.Entities.SalesLineDeliveryOptionClass, 'true', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.getLineDeliveryOptions = function (lineShippingAddresses) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { lineShippingAddresses: lineShippingAddresses };
                return this.createDataServiceRequestForOperation('GetLineDeliveryOptions', true, Proxy.Entities.SalesLineDeliveryOptionClass, 'true', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.getDeliveryPreferences = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetDeliveryPreferences', true, Proxy.Entities.CartDeliveryPreferencesClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.getDeliveryOptions = function (shippingAddress) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { shippingAddress: shippingAddress };
                return this.createDataServiceRequestForOperation('GetDeliveryOptions', true, Proxy.Entities.DeliveryOptionClass, 'true', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.updateLineDeliverySpecifications = function (lineDeliverySpecifications) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { lineDeliverySpecifications: lineDeliverySpecifications };
                return this.createDataServiceRequestForOperation('UpdateLineDeliverySpecifications', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.updateDeliverySpecification = function (deliverySpecification) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { deliverySpecification: deliverySpecification };
                return this.createDataServiceRequestForOperation('UpdateDeliverySpecification', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.void = function (reasonCodeLines) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { reasonCodeLines: reasonCodeLines };
                return this.createDataServiceRequestForOperation('Void', true, Proxy.Entities.SalesOrderClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.addCartLines = function (cartLines, cartVersion) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { cartLines: cartLines, cartVersion: cartVersion };
                return this.createDataServiceRequestForOperation('AddCartLines', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.updateCartLines = function (cartLines) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { cartLines: cartLines };
                return this.createDataServiceRequestForOperation('UpdateCartLines', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.voidCartLines = function (cartLines) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { cartLines: cartLines };
                return this.createDataServiceRequestForOperation('VoidCartLines', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.removeCartLines = function (cartLineIds) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { cartLineIds: cartLineIds };
                return this.createDataServiceRequestForOperation('RemoveCartLines', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.addTenderLine = function (cartTenderLine, cartVersion) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { cartTenderLine: cartTenderLine, cartVersion: cartVersion };
                return this.createDataServiceRequestForOperation('AddTenderLine', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.addPreprocessedTenderLine = function (preprocessedTenderLine, cartVersion) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { preprocessedTenderLine: preprocessedTenderLine, cartVersion: cartVersion };
                return this.createDataServiceRequestForOperation('AddPreprocessedTenderLine', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.validateTenderLineForAdd = function (tenderLine) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { tenderLine: tenderLine };
                return this.createDataServiceRequestForOperation('ValidateTenderLineForAdd', true, '', '', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.updateTenderLineSignature = function (tenderLineId, signatureData) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { tenderLineId: tenderLineId, signatureData: signatureData };
                return this.createDataServiceRequestForOperation('UpdateTenderLineSignature', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.copy = function (targetCartType) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { targetCartType: targetCartType };
                return this.createDataServiceRequestForOperation('Copy', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.voidTenderLine = function (tenderLineId, reasonCodeLines, isPreprocessed, forceVoid) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { tenderLineId: tenderLineId, reasonCodeLines: reasonCodeLines, isPreprocessed: isPreprocessed, forceVoid: forceVoid };
                return this.createDataServiceRequestForOperation('VoidTenderLine', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.issueGiftCard = function (giftCardId, amount, currencyCode, lineDescription) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { giftCardId: giftCardId, amount: amount, currencyCode: currencyCode, lineDescription: lineDescription };
                return this.createDataServiceRequestForOperation('IssueGiftCard', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.refillGiftCard = function (giftCardId, amount, currencyCode, lineDescription) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { giftCardId: giftCardId, amount: amount, currencyCode: currencyCode, lineDescription: lineDescription };
                return this.createDataServiceRequestForOperation('RefillGiftCard', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.suspend = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('Suspend', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.resume = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('Resume', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.removeDiscountCodes = function (discountCodes) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { discountCodes: discountCodes };
                return this.createDataServiceRequestForOperation('RemoveDiscountCodes', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.getSuspended = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetSuspended', true, Proxy.Entities.CartClass, 'true', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.search = function (cartSearchCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { cartSearchCriteria: cartSearchCriteria };
                return this.createDataServiceRequestForOperation('Search', true, Proxy.Entities.CartClass, 'true', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.overrideCartLinePrice = function (cartLineId, price) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { cartLineId: cartLineId, price: price };
                return this.createDataServiceRequestForOperation('OverrideCartLinePrice', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.getCardPaymentAcceptPoint = function (cardPaymentAcceptSettings) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { cardPaymentAcceptSettings: cardPaymentAcceptSettings };
                return this.createDataServiceRequestForOperation('GetCardPaymentAcceptPoint', true, Proxy.Entities.CardPaymentAcceptPointClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.retrieveCardPaymentAcceptResult = function (resultAccessCode) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { resultAccessCode: resultAccessCode };
                return this.createDataServiceRequestForOperation('RetrieveCardPaymentAcceptResult', true, Proxy.Entities.CardPaymentAcceptResultClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.recallOrder = function (transactionId, salesId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { transactionId: transactionId, salesId: salesId };
                return this.createDataServiceRequestForOperation('RecallOrder', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.recallQuote = function (transactionId, quoteId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { transactionId: transactionId, quoteId: quoteId };
                return this.createDataServiceRequestForOperation('RecallQuote', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.recalculateOrder = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('RecalculateOrder', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.getPromotions = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetPromotions', true, Proxy.Entities.CartPromotionsClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.recallSalesInvoice = function (transactionId, invoiceId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { transactionId: transactionId, invoiceId: invoiceId };
                return this.createDataServiceRequestForOperation('RecallSalesInvoice', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.addOrderInvoice = function (invoiceId, lineDescription) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { invoiceId: invoiceId, lineDescription: lineDescription };
                return this.createDataServiceRequestForOperation('AddOrderInvoice', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.updateCommissionSalesGroup = function (transactionId, cartLineId, commissionSalesGroup, isUserInitiated) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { transactionId: transactionId, cartLineId: cartLineId, commissionSalesGroup: commissionSalesGroup, isUserInitiated: isUserInitiated };
                return this.createDataServiceRequestForOperation('UpdateCommissionSalesGroup', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.addCoupons = function (couponCodes, isLegacyDiscountCode) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { couponCodes: couponCodes, isLegacyDiscountCode: isLegacyDiscountCode };
                return this.createDataServiceRequestForOperation('AddCoupons', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.removeCoupons = function (couponCodes) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { couponCodes: couponCodes };
                return this.createDataServiceRequestForOperation('RemoveCoupons', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.addDiscountCode = function (discountCode) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { discountCode: discountCode };
                return this.createDataServiceRequestForOperation('AddDiscountCode', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            return CartsDataServiceQuery;
        }(DataServiceQuery));
        Proxy.CartsDataServiceQuery = CartsDataServiceQuery;
        var CustomersDataServiceQuery = (function (_super) {
            __extends(CustomersDataServiceQuery, _super);
            function CustomersDataServiceQuery(dataServiceRequestFactory, entitySet, entityType, returnType, key) {
                return _super.call(this, dataServiceRequestFactory, entitySet, entityType, returnType, key) || this;
            }
            CustomersDataServiceQuery.prototype.search = function (customerSearchCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { customerSearchCriteria: customerSearchCriteria };
                return this.createDataServiceRequestForOperation('Search', true, Proxy.Entities.GlobalCustomerClass, 'true', oDataOperationParameters);
            };
            CustomersDataServiceQuery.prototype.getByAccountNumbers = function (accountNumbers, searchLocationValue) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { accountNumbers: accountNumbers, searchLocationValue: searchLocationValue };
                return this.createDataServiceRequestForOperation('GetByAccountNumbers', true, Proxy.Entities.CustomerClass, 'true', oDataOperationParameters);
            };
            CustomersDataServiceQuery.prototype.getOrderHistory = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetOrderHistory', true, Proxy.Entities.SalesOrderClass, 'true', oDataOperationParameters);
            };
            CustomersDataServiceQuery.prototype.getPurchaseHistory = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetPurchaseHistory', false, Proxy.Entities.PurchaseHistoryClass, 'true', oDataOperationParameters);
            };
            return CustomersDataServiceQuery;
        }(DataServiceQuery));
        Proxy.CustomersDataServiceQuery = CustomersDataServiceQuery;
        var EmployeesDataServiceQuery = (function (_super) {
            __extends(EmployeesDataServiceQuery, _super);
            function EmployeesDataServiceQuery(dataServiceRequestFactory, entitySet, entityType, returnType, key) {
                return _super.call(this, dataServiceRequestFactory, entitySet, entityType, returnType, key) || this;
            }
            EmployeesDataServiceQuery.prototype.getActivities = function (employeeActivitySearchCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { employeeActivitySearchCriteria: employeeActivitySearchCriteria };
                return this.createDataServiceRequestForOperation('GetActivities', true, Proxy.Entities.EmployeeActivityClass, 'true', oDataOperationParameters);
            };
            EmployeesDataServiceQuery.prototype.getManagerActivityView = function (employeeActivitySearchCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { employeeActivitySearchCriteria: employeeActivitySearchCriteria };
                return this.createDataServiceRequestForOperation('GetManagerActivityView', true, Proxy.Entities.EmployeeActivityClass, 'true', oDataOperationParameters);
            };
            EmployeesDataServiceQuery.prototype.registerActivity = function (employeeActivityType) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { employeeActivityType: employeeActivityType };
                return this.createDataServiceRequestForOperation('RegisterActivity', true, '', 'false', oDataOperationParameters);
            };
            EmployeesDataServiceQuery.prototype.getAccessibleOrgUnits = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetAccessibleOrgUnits', true, Proxy.Entities.OrgUnitClass, 'true', oDataOperationParameters);
            };
            EmployeesDataServiceQuery.prototype.getLatestActivity = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetLatestActivity', true, Proxy.Entities.EmployeeActivityClass, 'false', oDataOperationParameters);
            };
            EmployeesDataServiceQuery.prototype.getCurrentEmployee = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetCurrentEmployee', false, Proxy.Entities.EmployeeClass, 'false', oDataOperationParameters);
            };
            return EmployeesDataServiceQuery;
        }(DataServiceQuery));
        Proxy.EmployeesDataServiceQuery = EmployeesDataServiceQuery;
        var SalesOrdersDataServiceQuery = (function (_super) {
            __extends(SalesOrdersDataServiceQuery, _super);
            function SalesOrdersDataServiceQuery(dataServiceRequestFactory, entitySet, entityType, returnType, key) {
                return _super.call(this, dataServiceRequestFactory, entitySet, entityType, returnType, key) || this;
            }
            SalesOrdersDataServiceQuery.prototype.searchSalesTransactionsByReceiptId = function (receiptId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { receiptId: receiptId };
                return this.createDataServiceRequestForOperation('SearchSalesTransactionsByReceiptId', true, Proxy.Entities.SalesOrderClass, 'true', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.search = function (salesOrderSearchCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { salesOrderSearchCriteria: salesOrderSearchCriteria };
                return this.createDataServiceRequestForOperation('Search', true, Proxy.Entities.SalesOrderClass, 'true', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.searchOrders = function (orderSearchCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { orderSearchCriteria: orderSearchCriteria };
                return this.createDataServiceRequestForOperation('SearchOrders', true, Proxy.Entities.SalesOrderClass, 'true', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.getReceipts = function (receiptRetrievalCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { receiptRetrievalCriteria: receiptRetrievalCriteria };
                return this.createDataServiceRequestForOperation('GetReceipts', true, Proxy.Entities.ReceiptClass, 'true', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.getGiftReceipts = function (SalesLineNumbers, receiptRetrievalCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { SalesLineNumbers: SalesLineNumbers, receiptRetrievalCriteria: receiptRetrievalCriteria };
                return this.createDataServiceRequestForOperation('GetGiftReceipts', true, Proxy.Entities.ReceiptClass, 'true', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.getByReceiptId = function (receiptId, orderStoreNumber, orderTerminalId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { receiptId: receiptId, orderStoreNumber: orderStoreNumber, orderTerminalId: orderTerminalId };
                return this.createDataServiceRequestForOperation('GetByReceiptId', true, Proxy.Entities.SalesOrderClass, 'true', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.getSalesOrderDetailsByTransactionId = function (transactionId, searchLocationValue) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { transactionId: transactionId, searchLocationValue: searchLocationValue };
                return this.createDataServiceRequestForOperation('GetSalesOrderDetailsByTransactionId', false, Proxy.Entities.SalesOrderClass, 'false', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.getSalesOrderDetailsBySalesId = function (salesId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { salesId: salesId };
                return this.createDataServiceRequestForOperation('GetSalesOrderDetailsBySalesId', false, Proxy.Entities.SalesOrderClass, 'false', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.getSalesOrderDetailsByQuotationId = function (quotationId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { quotationId: quotationId };
                return this.createDataServiceRequestForOperation('GetSalesOrderDetailsByQuotationId', false, Proxy.Entities.SalesOrderClass, 'false', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.shipFulfillmentLines = function (ShipFulfillmentLines) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { ShipFulfillmentLines: ShipFulfillmentLines };
                return this.createDataServiceRequestForOperation('ShipFulfillmentLines', true, '', '', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.acceptFulfillmentLines = function (FulfillmentLineParameter) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { FulfillmentLineParameter: FulfillmentLineParameter };
                return this.createDataServiceRequestForOperation('AcceptFulfillmentLines', true, '', '', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.pickFulfillmentLines = function (FulfillmentLineParameter) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { FulfillmentLineParameter: FulfillmentLineParameter };
                return this.createDataServiceRequestForOperation('PickFulfillmentLines', true, '', '', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.packFulfillmentLines = function (FulfillmentLineParameter) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { FulfillmentLineParameter: FulfillmentLineParameter };
                return this.createDataServiceRequestForOperation('PackFulfillmentLines', true, '', '', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.markFulfillmentLinesAsPacked = function (FulfillmentLineParameter) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { FulfillmentLineParameter: FulfillmentLineParameter };
                return this.createDataServiceRequestForOperation('MarkFulfillmentLinesAsPacked', true, '', 'false', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.markAsPicked = function (FulfillmentLineParameter) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { FulfillmentLineParameter: FulfillmentLineParameter };
                return this.createDataServiceRequestForOperation('MarkAsPicked', true, '', '', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.getFulfillmentPickingLists = function (pickingListFulfillmentLine, hardwareProfileId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { pickingListFulfillmentLine: pickingListFulfillmentLine, hardwareProfileId: hardwareProfileId };
                return this.createDataServiceRequestForOperation('GetFulfillmentPickingLists', true, Proxy.Entities.ReceiptClass, 'true', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.getFulfillmentLines = function (fulfillmentLineSearchCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { fulfillmentLineSearchCriteria: fulfillmentLineSearchCriteria };
                return this.createDataServiceRequestForOperation('GetFulfillmentLines', true, Proxy.Entities.FulfillmentLineClass, 'true', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.getFulfillmentPackingSlips = function (packFulfillmentLines, hardwareProfileId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { packFulfillmentLines: packFulfillmentLines, hardwareProfileId: hardwareProfileId };
                return this.createDataServiceRequestForOperation('GetFulfillmentPackingSlips', true, Proxy.Entities.ReceiptClass, 'true', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.getFulfillmentPackingSlipsById = function (salesId, PackingSlipId, hardwareProfileId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { salesId: salesId, PackingSlipId: PackingSlipId, hardwareProfileId: hardwareProfileId };
                return this.createDataServiceRequestForOperation('GetFulfillmentPackingSlipsById', true, Proxy.Entities.ReceiptClass, 'true', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.rejectFulfillmentLines = function (RejectFulfillmentLines) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { RejectFulfillmentLines: RejectFulfillmentLines };
                return this.createDataServiceRequestForOperation('RejectFulfillmentLines', true, '', '', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.getInvoicesBySalesId = function (salesId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { salesId: salesId };
                return this.createDataServiceRequestForOperation('GetInvoicesBySalesId', true, Proxy.Entities.SalesInvoiceClass, 'true', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.getOrderInvoices = function (customerId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { customerId: customerId };
                return this.createDataServiceRequestForOperation('GetOrderInvoices', true, Proxy.Entities.OrderInvoiceClass, 'true', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.createPickingList = function (salesId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { salesId: salesId };
                return this.createDataServiceRequestForOperation('CreatePickingList', true, '', '', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.createPickingListForItems = function (salesId, pickAndPackSalesLineParameters) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { salesId: salesId, pickAndPackSalesLineParameters: pickAndPackSalesLineParameters };
                return this.createDataServiceRequestForOperation('CreatePickingListForItems', true, '', 'false', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.getPickingLists = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetPickingLists', false, Proxy.Entities.PickingListClass, 'true', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.createPackingSlip = function (salesId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { salesId: salesId };
                return this.createDataServiceRequestForOperation('CreatePackingSlip', true, '', '', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.getPackingSlipsData = function (salesId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { salesId: salesId };
                return this.createDataServiceRequestForOperation('GetPackingSlipsData', false, Proxy.Entities.PackingSlipDataClass, 'true', oDataOperationParameters);
            };
            return SalesOrdersDataServiceQuery;
        }(DataServiceQuery));
        Proxy.SalesOrdersDataServiceQuery = SalesOrdersDataServiceQuery;
        var ShiftsDataServiceQuery = (function (_super) {
            __extends(ShiftsDataServiceQuery, _super);
            function ShiftsDataServiceQuery(dataServiceRequestFactory, entitySet, entityType, returnType, key) {
                return _super.call(this, dataServiceRequestFactory, entitySet, entityType, returnType, key) || this;
            }
            ShiftsDataServiceQuery.prototype.upsertShifts = function (shifts) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { shifts: shifts };
                return this.createDataServiceRequestForOperation('UpsertShifts', true, '', 'false', oDataOperationParameters);
            };
            ShiftsDataServiceQuery.prototype.deleteShifts = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('DeleteShifts', true, '', 'false', oDataOperationParameters);
            };
            ShiftsDataServiceQuery.prototype.open = function (shiftId, cashDrawer, isShared) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { shiftId: shiftId, cashDrawer: cashDrawer, isShared: isShared };
                return this.createDataServiceRequestForOperation('Open', true, Proxy.Entities.ShiftClass, 'false', oDataOperationParameters);
            };
            ShiftsDataServiceQuery.prototype.close = function (transactionId, forceClose) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { transactionId: transactionId, forceClose: forceClose };
                return this.createDataServiceRequestForOperation('Close', true, Proxy.Entities.ShiftClass, 'false', oDataOperationParameters);
            };
            ShiftsDataServiceQuery.prototype.blindClose = function (transactionId, forceClose) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { transactionId: transactionId, forceClose: forceClose };
                return this.createDataServiceRequestForOperation('BlindClose', true, Proxy.Entities.ShiftClass, 'false', oDataOperationParameters);
            };
            ShiftsDataServiceQuery.prototype.resume = function (cashDrawer) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { cashDrawer: cashDrawer };
                return this.createDataServiceRequestForOperation('Resume', true, Proxy.Entities.ShiftClass, 'false', oDataOperationParameters);
            };
            ShiftsDataServiceQuery.prototype.use = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('Use', true, Proxy.Entities.ShiftClass, 'false', oDataOperationParameters);
            };
            ShiftsDataServiceQuery.prototype.suspend = function (transactionId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { transactionId: transactionId };
                return this.createDataServiceRequestForOperation('Suspend', true, Proxy.Entities.ShiftClass, 'false', oDataOperationParameters);
            };
            ShiftsDataServiceQuery.prototype.getByStatus = function (statusValue) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { statusValue: statusValue };
                return this.createDataServiceRequestForOperation('GetByStatus', false, Proxy.Entities.ShiftClass, 'true', oDataOperationParameters);
            };
            ShiftsDataServiceQuery.prototype.getByStatusFilterByUserRole = function (statusValue, filterByUserRole) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { statusValue: statusValue, filterByUserRole: filterByUserRole };
                return this.createDataServiceRequestForOperation('GetByStatusFilterByUserRole', false, Proxy.Entities.ShiftClass, 'true', oDataOperationParameters);
            };
            ShiftsDataServiceQuery.prototype.getXReport = function (transactionId, hardwareProfileId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { transactionId: transactionId, hardwareProfileId: hardwareProfileId };
                return this.createDataServiceRequestForOperation('GetXReport', false, Proxy.Entities.ReceiptClass, 'false', oDataOperationParameters);
            };
            ShiftsDataServiceQuery.prototype.getZReport = function (transactionId, hardwareProfileId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { transactionId: transactionId, hardwareProfileId: hardwareProfileId };
                return this.createDataServiceRequestForOperation('GetZReport', false, Proxy.Entities.ReceiptClass, 'false', oDataOperationParameters);
            };
            return ShiftsDataServiceQuery;
        }(DataServiceQuery));
        Proxy.ShiftsDataServiceQuery = ShiftsDataServiceQuery;
        var StockCountJournalsDataServiceQuery = (function (_super) {
            __extends(StockCountJournalsDataServiceQuery, _super);
            function StockCountJournalsDataServiceQuery(dataServiceRequestFactory, entitySet, entityType, returnType, key) {
                return _super.call(this, dataServiceRequestFactory, entitySet, entityType, returnType, key) || this;
            }
            StockCountJournalsDataServiceQuery.prototype.sync = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('Sync', true, Proxy.Entities.StockCountJournalClass, 'true', oDataOperationParameters);
            };
            StockCountJournalsDataServiceQuery.prototype.syncTransactions = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('SyncTransactions', true, Proxy.Entities.StockCountJournalTransactionClass, 'true', oDataOperationParameters);
            };
            StockCountJournalsDataServiceQuery.prototype.removeJournal = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('RemoveJournal', true, '', '', oDataOperationParameters);
            };
            StockCountJournalsDataServiceQuery.prototype.removeTransaction = function (itemId, inventSizeId, inventColorId, inventStyleId, configurationId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { itemId: itemId, inventSizeId: inventSizeId, inventColorId: inventColorId, inventStyleId: inventStyleId, configurationId: configurationId };
                return this.createDataServiceRequestForOperation('RemoveTransaction', true, '', '', oDataOperationParameters);
            };
            StockCountJournalsDataServiceQuery.prototype.removeStockCountLineByLineId = function (stockCountLineId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { stockCountLineId: stockCountLineId };
                return this.createDataServiceRequestForOperation('RemoveStockCountLineByLineId', true, '', '', oDataOperationParameters);
            };
            StockCountJournalsDataServiceQuery.prototype.removeStockCountLineByProductRecId = function (productId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { productId: productId };
                return this.createDataServiceRequestForOperation('RemoveStockCountLineByProductRecId', true, '', '', oDataOperationParameters);
            };
            StockCountJournalsDataServiceQuery.prototype.commit = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('Commit', true, '', '', oDataOperationParameters);
            };
            return StockCountJournalsDataServiceQuery;
        }(DataServiceQuery));
        Proxy.StockCountJournalsDataServiceQuery = StockCountJournalsDataServiceQuery;
        var OrgUnitsDataServiceQuery = (function (_super) {
            __extends(OrgUnitsDataServiceQuery, _super);
            function OrgUnitsDataServiceQuery(dataServiceRequestFactory, entitySet, entityType, returnType, key) {
                return _super.call(this, dataServiceRequestFactory, entitySet, entityType, returnType, key) || this;
            }
            OrgUnitsDataServiceQuery.prototype.getTillLayout = function (height, width) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { height: height, width: width };
                return this.createDataServiceRequestForOperation('GetTillLayout', true, Proxy.Entities.TillLayoutClass, 'false', oDataOperationParameters);
            };
            OrgUnitsDataServiceQuery.prototype.search = function (storeSearchCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { storeSearchCriteria: storeSearchCriteria };
                return this.createDataServiceRequestForOperation('Search', true, Proxy.Entities.OrgUnitClass, 'true', oDataOperationParameters);
            };
            OrgUnitsDataServiceQuery.prototype.getOrgUnitLocationsByArea = function (searchArea) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { searchArea: searchArea };
                return this.createDataServiceRequestForOperation('GetOrgUnitLocationsByArea', true, Proxy.Entities.OrgUnitLocationClass, 'true', oDataOperationParameters);
            };
            OrgUnitsDataServiceQuery.prototype.getOrgUnitConfiguration = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetOrgUnitConfiguration', true, Proxy.Entities.ChannelConfigurationClass, 'false', oDataOperationParameters);
            };
            OrgUnitsDataServiceQuery.prototype.getAvailableInventory = function (itemId, variantId, barcode) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { itemId: itemId, variantId: variantId, barcode: barcode };
                return this.createDataServiceRequestForOperation('GetAvailableInventory', true, Proxy.Entities.OrgUnitAvailabilityClass, 'true', oDataOperationParameters);
            };
            OrgUnitsDataServiceQuery.prototype.getAvailableInventoryNearby = function (itemIds, searchArea) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { itemIds: itemIds, searchArea: searchArea };
                return this.createDataServiceRequestForOperation('GetAvailableInventoryNearby', true, Proxy.Entities.OrgUnitAvailabilityClass, 'true', oDataOperationParameters);
            };
            OrgUnitsDataServiceQuery.prototype.getProductAvailabilityByDimensions = function (inventLocationIds, productId, productDimensionCombinations) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { inventLocationIds: inventLocationIds, productId: productId, productDimensionCombinations: productDimensionCombinations };
                return this.createDataServiceRequestForOperation('GetProductAvailabilityByDimensions', true, Proxy.Entities.OrgUnitAvailabilityClass, 'true', oDataOperationParameters);
            };
            OrgUnitsDataServiceQuery.prototype.getTerminalInfo = function (deviceType) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { deviceType: deviceType };
                return this.createDataServiceRequestForOperation('GetTerminalInfo', false, Proxy.Entities.TerminalInfoClass, 'true', oDataOperationParameters);
            };
            OrgUnitsDataServiceQuery.prototype.getProductAvailability = function (productId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { productId: productId };
                return this.createDataServiceRequestForOperation('GetProductAvailability', false, Proxy.Entities.OrgUnitAvailabilityClass, 'true', oDataOperationParameters);
            };
            return OrgUnitsDataServiceQuery;
        }(DataServiceQuery));
        Proxy.OrgUnitsDataServiceQuery = OrgUnitsDataServiceQuery;
        var ProductsDataServiceQuery = (function (_super) {
            __extends(ProductsDataServiceQuery, _super);
            function ProductsDataServiceQuery(dataServiceRequestFactory, entitySet, entityType, returnType, key) {
                return _super.call(this, dataServiceRequestFactory, entitySet, entityType, returnType, key) || this;
            }
            ProductsDataServiceQuery.prototype.getDimensionValues = function (channelId, dimension, matchingDimensionValues, kitVariantResolutionContext) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, dimension: dimension, matchingDimensionValues: matchingDimensionValues, kitVariantResolutionContext: kitVariantResolutionContext };
                return this.createDataServiceRequestForOperation('GetDimensionValues', true, Proxy.Entities.ProductDimensionValueClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getVariantsByDimensionValues = function (channelId, matchingDimensionValues) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, matchingDimensionValues: matchingDimensionValues };
                return this.createDataServiceRequestForOperation('GetVariantsByDimensionValues', true, Proxy.Entities.SimpleProductClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getVariantsByComponentsInSlots = function (channelId, matchingSlotToComponentRelationship) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, matchingSlotToComponentRelationship: matchingSlotToComponentRelationship };
                return this.createDataServiceRequestForOperation('GetVariantsByComponentsInSlots', true, Proxy.Entities.SimpleProductClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getByIds = function (channelId, productIds) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, productIds: productIds };
                return this.createDataServiceRequestForOperation('GetByIds', true, Proxy.Entities.SimpleProductClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.compare = function (channelId, catalogId, productIds) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, catalogId: catalogId, productIds: productIds };
                return this.createDataServiceRequestForOperation('Compare', true, Proxy.Entities.ProductComparisonLineClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getRecommendedProducts = function (productIds, customerId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { productIds: productIds, customerId: customerId };
                return this.createDataServiceRequestForOperation('GetRecommendedProducts', true, Proxy.Entities.ProductSearchResultClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.refineSearchByCategory = function (channelId, catalogId, categoryId, refinementCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, catalogId: catalogId, categoryId: categoryId, refinementCriteria: refinementCriteria };
                return this.createDataServiceRequestForOperation('RefineSearchByCategory', true, Proxy.Entities.ProductSearchResultClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.refineSearchByText = function (channelId, catalogId, searchText, refinementCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, catalogId: catalogId, searchText: searchText, refinementCriteria: refinementCriteria };
                return this.createDataServiceRequestForOperation('RefineSearchByText', true, Proxy.Entities.ProductSearchResultClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.search = function (productSearchCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { productSearchCriteria: productSearchCriteria };
                return this.createDataServiceRequestForOperation('Search', true, Proxy.Entities.ProductClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getRefiners = function (productSearchCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { productSearchCriteria: productSearchCriteria };
                return this.createDataServiceRequestForOperation('GetRefiners', true, Proxy.Entities.ProductRefinerClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.changes = function (productSearchCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { productSearchCriteria: productSearchCriteria };
                return this.createDataServiceRequestForOperation('Changes', true, Proxy.Entities.ProductClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.beginReadChangedProducts = function (changedProductSearchCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { changedProductSearchCriteria: changedProductSearchCriteria };
                return this.createDataServiceRequestForOperation('BeginReadChangedProducts', true, Proxy.Entities.ReadChangedProductsSessionClass, 'false', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.readChangedProducts = function (productSearchCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { productSearchCriteria: productSearchCriteria };
                return this.createDataServiceRequestForOperation('ReadChangedProducts', true, Proxy.Entities.ProductClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getDeletedListings = function (catalogId, skip, top) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { catalogId: catalogId, skip: skip, top: top };
                return this.createDataServiceRequestForOperation('GetDeletedListings', true, Proxy.Entities.DeletedListingsResultClass, 'false', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getDeletedCatalogs = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetDeletedCatalogs', false, '', 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getDeletedLanguages = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetDeletedLanguages', false, '', 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.deleteListingsByCatalogs = function (catalogIds) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { catalogIds: catalogIds };
                return this.createDataServiceRequestForOperation('DeleteListingsByCatalogs', true, '', '', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.deleteListingsByLanguages = function (languages) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { languages: languages };
                return this.createDataServiceRequestForOperation('DeleteListingsByLanguages', true, '', '', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.endReadChangedProducts = function (session) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { session: session };
                return this.createDataServiceRequestForOperation('EndReadChangedProducts', true, '', '', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.updateListingPublishingStatus = function (publishingStatuses) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { publishingStatuses: publishingStatuses };
                return this.createDataServiceRequestForOperation('UpdateListingPublishingStatus', true, '', '', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getPrices = function (itemId, inventoryDimensionId, barcode, customerAccountNumber, unitOfMeasureSymbol, quantity) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { itemId: itemId, inventoryDimensionId: inventoryDimensionId, barcode: barcode, customerAccountNumber: customerAccountNumber, unitOfMeasureSymbol: unitOfMeasureSymbol, quantity: quantity };
                return this.createDataServiceRequestForOperation('GetPrices', true, Proxy.Entities.ProductPriceClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getProductAvailabilities = function (itemIds, channelId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { itemIds: itemIds, channelId: channelId };
                return this.createDataServiceRequestForOperation('GetProductAvailabilities', true, Proxy.Entities.ProductAvailableQuantityClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getActivePrices = function (projectDomain, productIds, activeDate, customerId, affiliationLoyaltyTiers) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { projectDomain: projectDomain, productIds: productIds, activeDate: activeDate, customerId: customerId, affiliationLoyaltyTiers: affiliationLoyaltyTiers };
                return this.createDataServiceRequestForOperation('GetActivePrices', true, Proxy.Entities.ProductPriceClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getFilteredSlotComponents = function (channelId, slotId, selectedComponents) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, slotId: slotId, selectedComponents: selectedComponents };
                return this.createDataServiceRequestForOperation('GetFilteredSlotComponents', true, Proxy.Entities.ProductComponentClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getComponentByProductSlotRelation = function (channelId, componentRelation) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, componentRelation: componentRelation };
                return this.createDataServiceRequestForOperation('GetComponentByProductSlotRelation', true, Proxy.Entities.ProductComponentClass, 'false', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.searchByCategory = function (channelId, catalogId, categoryId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, catalogId: catalogId, categoryId: categoryId };
                return this.createDataServiceRequestForOperation('SearchByCategory', false, Proxy.Entities.ProductSearchResultClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.searchByText = function (channelId, catalogId, searchText) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, catalogId: catalogId, searchText: searchText };
                return this.createDataServiceRequestForOperation('SearchByText', false, Proxy.Entities.ProductSearchResultClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getSearchSuggestions = function (channelId, catalogId, searchText, hitPrefix, hitSuffix) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, catalogId: catalogId, searchText: searchText, hitPrefix: hitPrefix, hitSuffix: hitSuffix };
                return this.createDataServiceRequestForOperation('GetSearchSuggestions', false, Proxy.Entities.SearchSuggestionClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getRefinersByCategory = function (catalogId, categoryId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { catalogId: catalogId, categoryId: categoryId };
                return this.createDataServiceRequestForOperation('GetRefinersByCategory', false, Proxy.Entities.ProductRefinerClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getRefinersByText = function (catalogId, searchText) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { catalogId: catalogId, searchText: searchText };
                return this.createDataServiceRequestForOperation('GetRefinersByText', false, Proxy.Entities.ProductRefinerClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getRefinerValuesByCategory = function (catalogId, categoryId, refinerId, refinerSourceValue) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { catalogId: catalogId, categoryId: categoryId, refinerId: refinerId, refinerSourceValue: refinerSourceValue };
                return this.createDataServiceRequestForOperation('GetRefinerValuesByCategory', false, Proxy.Entities.ProductRefinerValueClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getRefinerValuesByText = function (catalogId, searchText, refinerId, refinerSourceValue) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { catalogId: catalogId, searchText: searchText, refinerId: refinerId, refinerSourceValue: refinerSourceValue };
                return this.createDataServiceRequestForOperation('GetRefinerValuesByText', false, Proxy.Entities.ProductRefinerValueClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getChannelProductAttributes = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetChannelProductAttributes', false, Proxy.Entities.AttributeProductClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getById = function (channelId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId };
                return this.createDataServiceRequestForOperation('GetById', false, Proxy.Entities.SimpleProductClass, 'false', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getAttributeValues = function (channelId, catalogId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, catalogId: catalogId };
                return this.createDataServiceRequestForOperation('GetAttributeValues', false, Proxy.Entities.AttributeValueClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getMediaLocations = function (channelId, catalogId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, catalogId: catalogId };
                return this.createDataServiceRequestForOperation('GetMediaLocations', false, Proxy.Entities.MediaLocationClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getMediaBlobs = function (channelId, catalogId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, catalogId: catalogId };
                return this.createDataServiceRequestForOperation('GetMediaBlobs', false, Proxy.Entities.MediaBlobClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getDefaultComponents = function (channelId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId };
                return this.createDataServiceRequestForOperation('GetDefaultComponents', false, Proxy.Entities.ProductComponentClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getSlotComponents = function (channelId, slotId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, slotId: slotId };
                return this.createDataServiceRequestForOperation('GetSlotComponents', false, Proxy.Entities.ProductComponentClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getRelationTypes = function (channelId, catalogId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, catalogId: catalogId };
                return this.createDataServiceRequestForOperation('GetRelationTypes', false, Proxy.Entities.ProductRelationTypeClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getRelatedProducts = function (channelId, catalogId, relationTypeId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, catalogId: catalogId, relationTypeId: relationTypeId };
                return this.createDataServiceRequestForOperation('GetRelatedProducts', false, Proxy.Entities.ProductSearchResultClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getUnitsOfMeasure = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetUnitsOfMeasure', false, Proxy.Entities.UnitOfMeasureClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getPrice = function (customerAccountNumber, unitOfMeasureSymbol) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { customerAccountNumber: customerAccountNumber, unitOfMeasureSymbol: unitOfMeasureSymbol };
                return this.createDataServiceRequestForOperation('GetPrice', false, Proxy.Entities.ProductPriceClass, 'false', oDataOperationParameters);
            };
            return ProductsDataServiceQuery;
        }(DataServiceQuery));
        Proxy.ProductsDataServiceQuery = ProductsDataServiceQuery;
        var CatalogsDataServiceQuery = (function (_super) {
            __extends(CatalogsDataServiceQuery, _super);
            function CatalogsDataServiceQuery(dataServiceRequestFactory, entitySet, entityType, returnType, key) {
                return _super.call(this, dataServiceRequestFactory, entitySet, entityType, returnType, key) || this;
            }
            CatalogsDataServiceQuery.prototype.getCatalogs = function (channelId, activeOnly) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, activeOnly: activeOnly };
                return this.createDataServiceRequestForOperation('GetCatalogs', true, Proxy.Entities.ProductCatalogClass, 'true', oDataOperationParameters);
            };
            return CatalogsDataServiceQuery;
        }(DataServiceQuery));
        Proxy.CatalogsDataServiceQuery = CatalogsDataServiceQuery;
        var CommerceListsDataServiceQuery = (function (_super) {
            __extends(CommerceListsDataServiceQuery, _super);
            function CommerceListsDataServiceQuery(dataServiceRequestFactory, entitySet, entityType, returnType, key) {
                return _super.call(this, dataServiceRequestFactory, entitySet, entityType, returnType, key) || this;
            }
            CommerceListsDataServiceQuery.prototype.getByCustomer = function (customerId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { customerId: customerId };
                return this.createDataServiceRequestForOperation('GetByCustomer', true, Proxy.Entities.CommerceListClass, 'true', oDataOperationParameters);
            };
            CommerceListsDataServiceQuery.prototype.addLines = function (commerceListLines) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { commerceListLines: commerceListLines };
                return this.createDataServiceRequestForOperation('AddLines', true, Proxy.Entities.CommerceListClass, 'false', oDataOperationParameters);
            };
            CommerceListsDataServiceQuery.prototype.updateLines = function (commerceListLines) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { commerceListLines: commerceListLines };
                return this.createDataServiceRequestForOperation('UpdateLines', true, Proxy.Entities.CommerceListClass, 'false', oDataOperationParameters);
            };
            CommerceListsDataServiceQuery.prototype.removeLines = function (commerceListLines) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { commerceListLines: commerceListLines };
                return this.createDataServiceRequestForOperation('RemoveLines', true, Proxy.Entities.CommerceListClass, 'false', oDataOperationParameters);
            };
            CommerceListsDataServiceQuery.prototype.moveLines = function (commerceListLines, destinationId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { commerceListLines: commerceListLines, destinationId: destinationId };
                return this.createDataServiceRequestForOperation('MoveLines', true, Proxy.Entities.CommerceListClass, 'false', oDataOperationParameters);
            };
            CommerceListsDataServiceQuery.prototype.copyLines = function (commerceListLines, destinationId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { commerceListLines: commerceListLines, destinationId: destinationId };
                return this.createDataServiceRequestForOperation('CopyLines', true, Proxy.Entities.CommerceListClass, 'false', oDataOperationParameters);
            };
            CommerceListsDataServiceQuery.prototype.addContributors = function (commerceListContributors) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { commerceListContributors: commerceListContributors };
                return this.createDataServiceRequestForOperation('AddContributors', true, Proxy.Entities.CommerceListClass, 'false', oDataOperationParameters);
            };
            CommerceListsDataServiceQuery.prototype.removeContributors = function (commerceListContributors) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { commerceListContributors: commerceListContributors };
                return this.createDataServiceRequestForOperation('RemoveContributors', true, Proxy.Entities.CommerceListClass, 'false', oDataOperationParameters);
            };
            CommerceListsDataServiceQuery.prototype.createInvitations = function (commerceListInvitations) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { commerceListInvitations: commerceListInvitations };
                return this.createDataServiceRequestForOperation('CreateInvitations', true, Proxy.Entities.CommerceListClass, 'false', oDataOperationParameters);
            };
            CommerceListsDataServiceQuery.prototype.acceptInvitation = function (invitationToken, customerId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { invitationToken: invitationToken, customerId: customerId };
                return this.createDataServiceRequestForOperation('AcceptInvitation', true, '', '', oDataOperationParameters);
            };
            return CommerceListsDataServiceQuery;
        }(DataServiceQuery));
        Proxy.CommerceListsDataServiceQuery = CommerceListsDataServiceQuery;
        var TransferOrdersDataServiceQuery = (function (_super) {
            __extends(TransferOrdersDataServiceQuery, _super);
            function TransferOrdersDataServiceQuery(dataServiceRequestFactory, entitySet, entityType, returnType, key) {
                return _super.call(this, dataServiceRequestFactory, entitySet, entityType, returnType, key) || this;
            }
            TransferOrdersDataServiceQuery.prototype.commit = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('Commit', true, '', '', oDataOperationParameters);
            };
            TransferOrdersDataServiceQuery.prototype.getTransferOrderLines = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetTransferOrderLines', true, Proxy.Entities.TransferOrderLineClass, 'true', oDataOperationParameters);
            };
            TransferOrdersDataServiceQuery.prototype.createTransferOrderLines = function (transferOrderLines) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { transferOrderLines: transferOrderLines };
                return this.createDataServiceRequestForOperation('CreateTransferOrderLines', true, Proxy.Entities.TransferOrderLineClass, 'true', oDataOperationParameters);
            };
            TransferOrdersDataServiceQuery.prototype.updateTransferOrderLines = function (transferOrderLines) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { transferOrderLines: transferOrderLines };
                return this.createDataServiceRequestForOperation('UpdateTransferOrderLines', true, Proxy.Entities.TransferOrderLineClass, 'true', oDataOperationParameters);
            };
            TransferOrdersDataServiceQuery.prototype.getTransferOrderComments = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetTransferOrderComments', true, Proxy.Entities.CommentClass, 'true', oDataOperationParameters);
            };
            TransferOrdersDataServiceQuery.prototype.addTransferOrderComment = function (AuthorStaffId, CommentText) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { AuthorStaffId: AuthorStaffId, CommentText: CommentText };
                return this.createDataServiceRequestForOperation('AddTransferOrderComment', true, Proxy.Entities.CommentClass, 'false', oDataOperationParameters);
            };
            TransferOrdersDataServiceQuery.prototype.deleteTransferOrderLines = function (transferOrderLines) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { transferOrderLines: transferOrderLines };
                return this.createDataServiceRequestForOperation('DeleteTransferOrderLines', true, Proxy.Entities.TransferOrderLineClass, 'true', oDataOperationParameters);
            };
            TransferOrdersDataServiceQuery.prototype.getTransferOrderJournals = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetTransferOrderJournals', true, Proxy.Entities.TransferOrderJournalClass, 'true', oDataOperationParameters);
            };
            TransferOrdersDataServiceQuery.prototype.getTransferPackingSlip = function (voucherId, receiptRetrievalCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { voucherId: voucherId, receiptRetrievalCriteria: receiptRetrievalCriteria };
                return this.createDataServiceRequestForOperation('GetTransferPackingSlip', true, Proxy.Entities.ReceiptClass, 'true', oDataOperationParameters);
            };
            return TransferOrdersDataServiceQuery;
        }(DataServiceQuery));
        Proxy.TransferOrdersDataServiceQuery = TransferOrdersDataServiceQuery;
        var PurchaseOrdersDataServiceQuery = (function (_super) {
            __extends(PurchaseOrdersDataServiceQuery, _super);
            function PurchaseOrdersDataServiceQuery(dataServiceRequestFactory, entitySet, entityType, returnType, key) {
                return _super.call(this, dataServiceRequestFactory, entitySet, entityType, returnType, key) || this;
            }
            PurchaseOrdersDataServiceQuery.prototype.commit = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('Commit', true, '', '', oDataOperationParameters);
            };
            return PurchaseOrdersDataServiceQuery;
        }(DataServiceQuery));
        Proxy.PurchaseOrdersDataServiceQuery = PurchaseOrdersDataServiceQuery;
        var PickingListsDataServiceQuery = (function (_super) {
            __extends(PickingListsDataServiceQuery, _super);
            function PickingListsDataServiceQuery(dataServiceRequestFactory, entitySet, entityType, returnType, key) {
                return _super.call(this, dataServiceRequestFactory, entitySet, entityType, returnType, key) || this;
            }
            PickingListsDataServiceQuery.prototype.commit = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('Commit', true, '', '', oDataOperationParameters);
            };
            return PickingListsDataServiceQuery;
        }(DataServiceQuery));
        Proxy.PickingListsDataServiceQuery = PickingListsDataServiceQuery;
        var WarehousesDataServiceQuery = (function (_super) {
            __extends(WarehousesDataServiceQuery, _super);
            function WarehousesDataServiceQuery(dataServiceRequestFactory, entitySet, entityType, returnType, key) {
                return _super.call(this, dataServiceRequestFactory, entitySet, entityType, returnType, key) || this;
            }
            WarehousesDataServiceQuery.prototype.getWarehouseById = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetWarehouseById', false, Proxy.Entities.WarehouseClass, 'false', oDataOperationParameters);
            };
            WarehousesDataServiceQuery.prototype.getLocations = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetLocations', false, Proxy.Entities.WarehouseLocationClass, 'true', oDataOperationParameters);
            };
            return WarehousesDataServiceQuery;
        }(DataServiceQuery));
        Proxy.WarehousesDataServiceQuery = WarehousesDataServiceQuery;
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        "use strict";
        var ErrorTypeEnum = (function () {
            function ErrorTypeEnum() {
            }
            return ErrorTypeEnum;
        }());
        ErrorTypeEnum.Cash = "1";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDDEVICETOKEN = "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDDEVICE";
        ErrorTypeEnum.APPLICATION_ERROR = "string_29000";
        ErrorTypeEnum.APPLICATION_STORE_INITIALIZATION_DATA_FAILED_TO_LOAD = "string_29007";
        ErrorTypeEnum.PRICE_CHECK_INITIALIZATION_DATA_FAILED_TO_LOAD = "string_29022";
        ErrorTypeEnum.CART_LINE_MISSING_PRODUCT_NAME_ERROR = "string_1242";
        ErrorTypeEnum.OPERATOR_ID_PASSWORD_NOT_SPECIFIED = "string_29001";
        ErrorTypeEnum.OPERATOR_PASSWORD_NOT_SPECIFIED = "string_29019";
        ErrorTypeEnum.SERVER_ERROR = "string_29002";
        ErrorTypeEnum.INVALID_URL = "string_1330";
        ErrorTypeEnum.INVALID_EMAIL = "string_1331";
        ErrorTypeEnum.INVALID_PHONE = "string_1332";
        ErrorTypeEnum.INVALID_NAME = "string_1360";
        ErrorTypeEnum.INVALID_NAME_FORMAT = "string_1361";
        ErrorTypeEnum.EMPTY_STREET = "string_1333";
        ErrorTypeEnum.EMPTY_CITY = "string_1334";
        ErrorTypeEnum.EMPTY_STATE = "string_1335";
        ErrorTypeEnum.EMPTY_COUNTRY = "string_1336";
        ErrorTypeEnum.EMPTY_ZIPCODE = "string_1337";
        ErrorTypeEnum.EMPTY_NAME = "string_1338";
        ErrorTypeEnum.LINE_ITEM_MISSING_PRODUCT_NAME_ERROR = "string_3204";
        ErrorTypeEnum.LOGOFF_ERROR = "string_1353";
        ErrorTypeEnum.AAD_AUTHENTICATION_FAILED = "string_1442";
        ErrorTypeEnum.DEVICE_ACTIVATION_DETAILS_NOT_SPECIFIED = "string_1407";
        ErrorTypeEnum.DEVICE_DEACTIVATION_INCOMPLETE_TRANSACTION_ERROR = "string_1421";
        ErrorTypeEnum.CHANGE_PASSWORD_DETAILS_NOT_SPECIFIED = "string_6805";
        ErrorTypeEnum.NEW_PASSWORD_AND_CONFIRMATION_NOT_MATCHING_ERROR = "string_6806";
        ErrorTypeEnum.RESET_PASSWORD_DETAILS_NOT_SPECIFIED = "string_6810";
        ErrorTypeEnum.OLD_AND_NEW_PASSWORD_MATCHING_ERROR = "string_6607";
        ErrorTypeEnum.OPERATION_ISSUE_CREDIT_MEMO_NOT_AVAILABLE = "string_29801";
        ErrorTypeEnum.PAYMENT_INFORMATION_INCOMPLETE = "string_1137";
        ErrorTypeEnum.PAYMENT_INVALID_NUMBER = "string_1138";
        ErrorTypeEnum.PAYMENT_CARD_NOT_SUPPORTED = "string_1139";
        ErrorTypeEnum.PAYMENT_CASH_PAYMENT_NOT_AVAILABLE = "string_1142";
        ErrorTypeEnum.PAYMENT_CARD_PAYMENT_NOT_AVAILABLE = "string_1158";
        ErrorTypeEnum.PAYMENT_UNABLE_TO_LOAD_CURRENCY_AMOUNTS = "string_1143";
        ErrorTypeEnum.PAYMENT_CUSTOMER_ACCOUNT_NOT_SET = "string_1154";
        ErrorTypeEnum.PAYMENT_AMOUNT_CANNOT_BE_EMPTY = "string_1159";
        ErrorTypeEnum.PAYMENT_CARD_TRACK_DATA_EMPTY = "string_1166";
        ErrorTypeEnum.PAYMENT_CARD_NUMBER_EMPTY = "string_1167";
        ErrorTypeEnum.PAYMENT_CARD_SECURITY_CODE_EMPTY = "string_1168";
        ErrorTypeEnum.PAYMENT_CREDIT_MEMO_NUMBER_EMPTY = "string_1169";
        ErrorTypeEnum.PAYMENT_LOYALTY_CARD_NUMBER_EMPTY = "string_1170";
        ErrorTypeEnum.PAYMENT_GIFT_CARD_NUMBER_EMPTY = "string_1171";
        ErrorTypeEnum.PAYMENT_CUSTOMER_ACCOUNT_EMPTY = "string_1172";
        ErrorTypeEnum.PAYMENT_INVALID_CARD_NUMBER = "string_1175";
        ErrorTypeEnum.PAYMENT_INVALID_SECURITY_CODE = "string_1176";
        ErrorTypeEnum.PAYMENT_INVALID_ZIP_CODE = "string_1177";
        ErrorTypeEnum.CART_IS_EMPTY = "string_29008";
        ErrorTypeEnum.RETAIL_SERVER_REDIRECT_ERROR = "RETAIL_SERVER_REDIRECT_ERROR";
        ErrorTypeEnum.OPERATION_NOT_VALID_FOR_BIG_ENDIAN_SYSTEM = "string_29824";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_MANUALCARDNUMBERNOTALLOWED = "string_29825";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_TENDERLINECANNOTBEVOIDED = "string_29826";
        ErrorTypeEnum.INVALID_INCOME_EXPENSE_LINE_COLLECTION = "string_4122";
        ErrorTypeEnum.CARTLINE_DISCOUNTINUED = "string_4452";
        ErrorTypeEnum.SCALE_UNSPECIFIED_WITHOUT_MANUAL_ENTRY = "string_5316";
        ErrorTypeEnum.SCALE_RETURNED_ZERO_WITHOUT_MANUAL_ENTRY = "string_5317";
        ErrorTypeEnum.APPLICATION_CONFIGURATION_LOADING_ERROR = "string_29951";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_DEMOMODEOPERATIONNOTSUPPORTED = "string_29952";
        ErrorTypeEnum.MANAGER_OVERRIDE_CANCELED_ERROR = "string_29029";
        ErrorTypeEnum.SELECTED_CARTLINES_CONTAINS_VOIDED_PRODUCTS = "string_29832";
        ErrorTypeEnum.CUSTOMERORDER_MANUAL_DEPOSIT_REQUIRED = "string_29833";
        ErrorTypeEnum.STORE_NOT_FOUND = "string_29016";
        ErrorTypeEnum.DIMENSION_SELECTION_NOT_COMPLETED = "string_821";
        ErrorTypeEnum.RETURN_MULTIPLE_REASON_CODE_SETS_ARE_DEFINED = "RETURN_MULTIPLE_REASON_CODE_SETS_ARE_DEFINED";
        ErrorTypeEnum.RETURN_NO_ORDERS_FOUND = "string_1218";
        ErrorTypeEnum.RETURN_NO_SALES_LINES_IN_ORDER = "string_1220";
        ErrorTypeEnum.RETURN_ALL_SALES_LINES_IN_ORDER_RETURN = "string_1237";
        ErrorTypeEnum.RETURN_NO_REASON_CODES_ARE_DEFINED = "string_1244";
        ErrorTypeEnum.RETURN_NO_ITEM_SELECTED = "string_1246";
        ErrorTypeEnum.RETURN_MAX_RETURN_LINE_AMOUNT_EXCEEDED = "string_29370";
        ErrorTypeEnum.RETURN_MAX_RETURN_TOTAL_AMOUNT_EXCEEDED = "string_29371";
        ErrorTypeEnum.CREDIT_MEMO_INVALID_AMOUNT = "string_29800";
        ErrorTypeEnum.NO_PRICECHECK_ON_PRODUCTS = "string_3523";
        ErrorTypeEnum.NO_PRODUCT_INFORMATION = "string_3873";
        ErrorTypeEnum.CART_UNAVAILABLE_FOR_PICK_UP = "string_4539";
        ErrorTypeEnum.CART_LINES_UNAVAILABLE_FOR_PICK_UP = "string_4540";
        ErrorTypeEnum.PICK_LIST_CAN_NOT_BE_CREATED = "string_4544";
        ErrorTypeEnum.PACK_SLIP_CAN_NOT_BE_CREATED = "string_4546";
        ErrorTypeEnum.CUSTOMER_ORDER_OPERATION_INVOICE_NOT_SUPPORTED = "string_29028";
        ErrorTypeEnum.CREATE_OR_EDIT_CUSTOMER_ORDER_OR_QUOTATION_ONLY = "string_29032";
        ErrorTypeEnum.EDIT_CUSTOMER_ORDER_OR_QUOTATION_ONLY = "string_29033";
        ErrorTypeEnum.NO_STORE_SELECTED_FOR_PICKUP = "string_29034";
        ErrorTypeEnum.ALL_PRODUCTS_SELECTED_PICKUP_OR_SHIP_SELECTED = "string_29035";
        ErrorTypeEnum.INVALID_SHIPPING_CHARGES = "string_2543";
        ErrorTypeEnum.NO_ADDRESSES_SELECTED_FOR_SHIP = "string_29036";
        ErrorTypeEnum.NO_SHIPPING_METHODS_SELECTED_FOR_SHIP = "string_29037";
        ErrorTypeEnum.CREATE_OR_EDIT_QUOTATION_ONLY = "string_29042";
        ErrorTypeEnum.EDIT_CUSTOMER_ORDER_ONLY = "string_29043";
        ErrorTypeEnum.CANCELLATION_CHARGE_IS_NOT_VALID = "string_4542";
        ErrorTypeEnum.CANCELLATION_CHARGE_INVALID_NEGATIVE_AMOUNT = "string_29026";
        ErrorTypeEnum.CANCELLATION_CHARGE_INVALID_OPERATION = "string_29027";
        ErrorTypeEnum.CART_UNAVAILABLE_FOR_CANCEL = "string_4541";
        ErrorTypeEnum.UNSUPPORTED_APPLY_DISCOUNT_OPERATION = "string_5600";
        ErrorTypeEnum.MISSING_CARTLINE_ON_APPLY_DISCOUNT = "string_5601";
        ErrorTypeEnum.MAXIMUM_LINE_DISCOUNT_AMOUNT_EXCEEDED = "string_5602";
        ErrorTypeEnum.MAXIMUM_LINE_DISCOUNT_PERCENT_EXCEEDED = "string_5603";
        ErrorTypeEnum.MAXIMUM_TOTAL_DISCOUNT_AMOUNT_EXCEEDED = "string_5604";
        ErrorTypeEnum.MAXIMUM_TOTAL_DISCOUNT_PERCENT_EXCEEDED = "string_5605";
        ErrorTypeEnum.MAXIMUM_LINE_DISCOUNT_AMOUNT_EXCEEDED_PRICE = "string_5617";
        ErrorTypeEnum.MAXIMUM_TOTAL_DISCOUNT_AMOUNT_EXCEEDED_SUBTOTAL = "string_5618";
        ErrorTypeEnum.PRICE_OVERRIDE_NOT_VALID_ONE_OR_MORE_ITEMS = "string_5705";
        ErrorTypeEnum.PRICE_OVERRIDE_PRICE_EXCEEDS_MAXIMUM_DEVICE_PRICE = "string_5715";
        ErrorTypeEnum.PRICE_OVERRIDE_NO_ITEM_SELECTED = "string_5716";
        ErrorTypeEnum.PRICE_OVERRIDE_PRODUCT_IS_VOIDED = "string_29803";
        ErrorTypeEnum.PRICE_OVERRIDE_PRICE_CANNOT_BE_NEGATIVE = "string_29009";
        ErrorTypeEnum.PRICE_OVERRIDE_INVALID_PRICE = "string_29010";
        ErrorTypeEnum.PRICE_OVERRIDE_PRICE_NOT_A_NUMBER = "string_29011";
        ErrorTypeEnum.PRICE_OVERRIDE_PRODUCT_IS_FOR_A_RECEIPT = "string_29804";
        ErrorTypeEnum.PRICE_OVERRIDE_PRODUCT_IS_FOR_A_GIFT_CERTIFICATE = "string_29805";
        ErrorTypeEnum.PRICE_OVERRIDE_PRICE_CANNOT_BE_ZERO = "string_5717";
        ErrorTypeEnum.PRICE_OVERRIDE_PRICE_MUST_BE_POSITIVE = "string_29020";
        ErrorTypeEnum.PRICE_OVERRIDE_ONLY_LOWER_AMOUNTS_ALLOWED = "string_5718";
        ErrorTypeEnum.PRICE_OVERRIDE_ONLY_HIGHER_AMOUNTS_ALLOWED = "string_5719";
        ErrorTypeEnum.PRICE_OVERRIDE_ONLY_LOWER_OR_EQUAL_AMOUNTS_ALLOWED = "string_5720";
        ErrorTypeEnum.PRICE_OVERRIDE_ONLY_HIGHER_OR_EQUAL_AMOUNTS_ALLOWED = "string_5721";
        ErrorTypeEnum.PRICE_OVERRIDE_NOT_ALLOWED_FOR_PRODUCT = "string_5722";
        ErrorTypeEnum.PRICE_OVERRIDE_NONE_ALLOWED = "string_5723";
        ErrorTypeEnum.CHANGE_SALES_PERSON_INVALID_CART_MODE = "string_5733";
        ErrorTypeEnum.SET_QUANTITY_NOT_VALID_ONE_OR_MORE_ITEMS = "string_5305";
        ErrorTypeEnum.SET_QUANTITY_NOT_GREATER_THAN_ZERO = "string_5308";
        ErrorTypeEnum.SET_QUANTITY_NOT_IN_RANGE = "string_5309";
        ErrorTypeEnum.SET_QUANTITY_NOT_VALID_NO_ITEM_SELECTED = "string_5310";
        ErrorTypeEnum.SET_QUANTITY_NOT_A_NUMBER = "string_5311";
        ErrorTypeEnum.SET_QUANTITY_NOT_ZERO = "string_5312";
        ErrorTypeEnum.SET_QUANTITY_QUANTITY_EXCEEDS_MAXIMUM_DEVICE_QUANTITY = "string_5313";
        ErrorTypeEnum.SET_QUANTITY_NOT_VALID_FOR_UNIT_OF_MEASURE = "string_5314";
        ErrorTypeEnum.SET_QUANTITY_NOT_VALID_FOR_SERIALIZED_ITEM = "string_5315";
        ErrorTypeEnum.UNIT_OF_MEASURE_NOT_VALID_ONE_OR_MORE_ITEMS = "string_3205";
        ErrorTypeEnum.UNIT_OF_MEASURE_NOT_VALID_NO_ITEM_SELECTED = "string_3206";
        ErrorTypeEnum.UNIT_OF_MEASURE_NOT_VALID_NO_UNIT_OF_MEASURE = "string_3207";
        ErrorTypeEnum.UNIT_OF_MEASURE_NOT_VALID_NO_UNIT_OF_MEASURE_CONVERSIONS = "string_3208";
        ErrorTypeEnum.NOT_IMPLEMENTED = "string_29003";
        ErrorTypeEnum.KIT_BLOCKED_FOR_DISASSEMBLY_AT_REGISTER = "string_420";
        ErrorTypeEnum.PERIPHERALS_HARDWARESTATION_NOTCONFIGURED = "string_4908";
        ErrorTypeEnum.PERIPHERALS_BARCODE_SCANNER_NOTFOUND = "string_4900";
        ErrorTypeEnum.PERIPHERALS_BARCODE_SCANNER_ENABLE_FAILED = "string_4901";
        ErrorTypeEnum.PERIPHERALS_MSR_NOTFOUND = "string_4902";
        ErrorTypeEnum.PERIPHERALS_MSR_ENABLE_FAILED = "string_4903";
        ErrorTypeEnum.PERIPHERALS_PRINTER_FAILED = "string_4904";
        ErrorTypeEnum.PERIPHERAL_PAYMENT_UNKNOWN_ERROR = "string_4919";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_PRINTER_ERROR = "string_4904";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_CASHDRAWER_ERROR = "string_4905";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_SCALE_ERROR = "string_4906";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_PAYMENTTERMINAL_ERROR = "string_4907";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_DUALDISPLAY_ERROR = "string_4918";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_PERIPHERALNOTFOUND = "string_4917";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_PAIRINGERROR = "string_6011";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_TOKENVALIDATIONFAILED = "string_6011";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_PINPAD_ERROR = "string_4923";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_SIGNATURECAPTURE_ERROR = "string_4924";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_LINEDISPLAY_ERROR = "string_4925";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_LINEDISPLAY_CHARACTERSETNOTSUPPORTED = "string_4926";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_PERIPHERALISLOCKED = "string_4927";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTCONNECTORNOTFOUND = "string_4929";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CUSTOMERACCOUNTPAYMENTISNOTALLOWEDFORCUSTOMERORDERDEPOSITANDCANCELLATION = "string_29021";
        ErrorTypeEnum.AMOUNT_IS_NOT_VALID = "string_4102";
        ErrorTypeEnum.SHIFT_IS_NOT_VALID = "string_4103";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_PRODUCT_IS_VOIDED = "string_29803";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_PRODUCT_IS_FOR_A_RECEIPT = "string_29804";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_PRODUCT_IS_FOR_A_GIFT_CERTIFICATE = "string_29805";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_LINKED_PRODUCT = "string_29806";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_MULTIPLE_CART_LINES = "string_29807";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_INCOME_EXPENSE_TRANSACTION = "string_29808";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_TIME_CLOCK_DISABLED = "string_29809";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_FINISH_CURRENT_TRANSACTION = "string_4125";
        ErrorTypeEnum.RECEIPT_EMAIL_IS_EMPTY = "string_4126";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_PERMISSION_DENIED = "string_511";
        ErrorTypeEnum.OPERATION_VALIDATION_INVALID_ARGUMENTS = "string_29018";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_NO_CART_LINE_SELECTED = "string_29822";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_IN_NONDRAWER_MODE = "string_4141";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_NO_PAYMENT_LINE_SELECTED = "string_29828";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_MULTIPLE_PAYMENT_LINES = "string_29829";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_IN_OFFLINE_STATE = "string_29831";
        ErrorTypeEnum.INVALID_AFFILIATION_COLLECTION = "string_5205";
        ErrorTypeEnum.MISSING_CARTLINE_ON_APPLY_TAX_OVERRDE = "string_4423";
        ErrorTypeEnum.NO_TAX_OVERRIDE_REASON_CODES_CONFIGURED = "string_4422";
        ErrorTypeEnum.CANNOT_SWITCH_ONLINE_CART_IN_PROGRESS = "string_6607";
        ErrorTypeEnum.CANNOT_SWITCH_OFFLINE_NOT_AVAILABLE = "string_6608";
        ErrorTypeEnum.CANNOT_SWITCH_TRANSFER_FAILED = "string_6609";
        ErrorTypeEnum.SIGNATURE_INVALID_FORMAT = "string_6906";
        ErrorTypeEnum.ASYNC_CLIENT_ZERO_DOWNLOAD_SESSION = "string_29375";
        ErrorTypeEnum.ASYNC_CLIENT_EMPTY_UPLOAD_JOB_DEFINITION = "string_29376";
        ErrorTypeEnum.ASYNC_CLIENT_NO_TRANSACTION_DATA = "string_29377";
        ErrorTypeEnum.ASYNC_CLIENT_CANNOT_LOAD_OFFLINE_TRANSACTION_DATA = "string_29378";
        ErrorTypeEnum.ASYNC_CLIENT_FAIL_PURGE_OFFLINE_TRANSACTION_DATA = "string_29379";
        ErrorTypeEnum.ASYNC_CLIENT_FAIL_DOWNLOAD_FILE = "string_29380";
        ErrorTypeEnum.ASYNC_CLIENT_FAIL_APPLY_FILE_TO_OFFLINE_DATABASE = "string_29381";
        ErrorTypeEnum.ASYNC_CLIENT_FAIL_UPDATE_DOWNLOAD_SESSION_STATUS = "string_29382";
        ErrorTypeEnum.ASYNC_CLIENT_FAIL_RETRIEVE_INITIAL_DATA_SYNC_INDICATOR = "string_29383";
        ErrorTypeEnum.ASYNC_CLIENT_OFFLINE_NOT_ENABLED_ON_TERMINAL = "string_29384";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_HEADQUARTERTRANSACTIONSERVICEMETHODCALLFAILURE = "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_HEADQUARTERTRANSACTIONSERVICEMETHODCALLFAILURE";
        ErrorTypeEnum.EMPLOYEE_NOT_FOUND = "string_29320";
        ErrorTypeEnum.GENERICCOMMERCEERROR = "string_29200";
        ErrorTypeEnum.GENERICERRORMESSAGE = "string_29201";
        ErrorTypeEnum.GENERICVALIDATIONERROR = "string_29202";
        ErrorTypeEnum.ISASSOCIATEDVALIDATIONERROR = "string_29203";
        ErrorTypeEnum.ISNOTASSOCIATEDVALIDATIONERROR = "string_29204";
        ErrorTypeEnum.ISNOTAUTHENTICATEDVALIDATIONERROR = "string_29205";
        ErrorTypeEnum.ITEMSVALIDATIONERROR = "string_29206";
        ErrorTypeEnum.LINEIDSVALIDATIONERROR = "string_29207";
        ErrorTypeEnum.LISTINGSVALIDATIONERROR = "string_29208";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_DUPLICATEOBJECT = "string_29209";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INSUFFICIENTQUANTITYONHAND = "string_29210";
        ErrorTypeEnum.INVALID_CURRENCY_AMOUNT = "string_29012";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDCARTSALESLINEADD = "string_29211";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDFORMAT = "string_29212";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_LASTCHANGEVERSIONMISMATCH = "string_29213";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_OBJECTNOTFOUND = "string_29214";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_REQUIREDVALUENOTFOUND = "string_29215";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNKNOWNREQUEST = "string_29216";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNSUPPORTEDLANGUAGE = "string_29217";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_VALUEOUTOFRANGE = "string_29218";
        ErrorTypeEnum.NAMEVALIDATIONERROR = "string_29219";
        ErrorTypeEnum.PAYMENTSVALIDATIONERROR = "string_29220";
        ErrorTypeEnum.PROMOTIONCODEVALIDATIONERROR = "string_29221";
        ErrorTypeEnum.SAVEDSHOPPINGCARTIDVALIDATIONERROR = "string_29222";
        ErrorTypeEnum.SHIPPINGOPTIONSLINEITEMSELECTION = "string_29223";
        ErrorTypeEnum.SHIPPINGOPTIONSPICKUP = "string_29224";
        ErrorTypeEnum.SHIPPINGOPTIONSSHIPTONEWADDRESS = "string_29225";
        ErrorTypeEnum.SHIPPINGOPTIONSVALIDATIONERROR = "string_29226";
        ErrorTypeEnum.SHOPPINGCARTIDSVALIDATIONERROR = "string_29227";
        ErrorTypeEnum.SHOPPINGCARTIDVALIDATIONERROR = "string_29228";
        ErrorTypeEnum.STORELOCATORBINGMAPSTOKENEMPTY = "string_29229";
        ErrorTypeEnum.STORELOCATORINVALIDDISTANCE = "string_29230";
        ErrorTypeEnum.STORELOCATORINVALIDLOCATION = "string_29231";
        ErrorTypeEnum.STORELOCATORUNABLETOGETCOORDINATES = "string_29232";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDCARTVERSION = "string_29233";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_AGGREGATECOMMUNICATIONERROR = "string_29234";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_APPLICATIONCOMPOSITIONFAILED = "string_29235";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CANNOTRETURNMORETHANPURCHASED = "string_5303";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CONFIGURATIONSETTINGNOTFOUND = "string_29236";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_DUPLICATEDEFAULTNOTIFICATIONHANDLERENCOUNTERED = "string_29237";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_EMPTYINVENTORYUNITOFMEASUREFORITEM = "string_29238";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_EXTERNALPROVIDERERROR = "string_29239";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_HEADQUARTERCOMMUNICATIONFAILURE = "string_29240";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_HEADQUARTERRESPONSEPARSINGERROR = "string_29241";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDCARTSTATE = "string_29008";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDCHANNELCONFIGURATION = "string_29242";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDCONFIGURATIONKEYFORMAT = "string_29243";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDCONNECTIONSTRING = "string_29244";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDPIPELINECONFIGURATION = "string_29245";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDPROVIDERCONFIGURATION = "string_29246";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDRUNTIMECONTEXT = "string_29247";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDSERVERRESPONSE = "string_29248";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_SERVICEINITIALIZATIONFAILED = "string_29249";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_SERVICENOTFOUND = "string_29250";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNABLETOCOMPUTESALESTAXGROUPFORADDRESS = "string_29251";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNABLETOFINDDEFAULTHANDLER = "string_29252";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNABLETOFINDDELIVERYOPTIONS = "string_29253";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNABLETOFINDINVENTORYFORITEM = "string_29254";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_AGGREGATEVALIDATIONERROR = "string_29255";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_AUTHENTICATIONFAILED = "string_29256";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_AUTHORIZATIONFAILED = "string_29257";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_COUPONISVALIDFORCURRENTSESSION = "string_29258";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CRITICALSTORAGEERROR = "string_29259";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_DISCOUNTAMOUNTINVALIDATED = "string_29260";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_DISCOUNTISALLOWEDONLYFORCREATIONANDEDITION = "string_5613";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_IDMISMATCH = "string_29261";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INSUFFICIENTQUANTITYAVAILABLE = "string_29262";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDCHANGETRACKINGCONFIGURATION = "string_29263";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDPRICEENCOUNTERED = "string_29264";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDREQUEST = "string_29265";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDSHIPPINGADDRESS = "string_29266";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDSQLCOMMAND = "string_29267";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_ITEMDISCONTINUEDFROMCHANNEL = "string_29268";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_OBJECTVERSIONMISMATCHERROR = "string_29269";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PROVIDERCOMMUNICATIONFAILURE = "string_29270";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_REQUESTEDITEMISOUTOFSTOCK = "string_29271";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNITOFMEASURECONVERSIONNOTFOUND = "string_29272";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_DEFAULTCUSTOMERNOTFOUND = "string_29273";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_BARCODENOTFOUND = "string_29368";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_LINKEDITEMSEARCHBYBARCODENOTSUPPORTED = "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_LINKEDITEMSEARCHBYBARCODENOTSUPPORTED";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_QUOTEMUSTNOTHAVEDEPOSITOVERRIDE = "string_29282";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_QUOTEMUSTHAVEVALIDQUOTATIONEXPIRYDATE = "string_4321";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDPICKUPDEPOSITOVERRIDEAMOUNT = "string_29283";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_SALESLINEMUSTHAVEPICKUPDELIVERYMODE = "string_29820";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNABLETOPICKUPMORETHANQTYREMAINING = "string_29821";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_ORDERWASNOTCREATEDWITHDEPOSITOVERRIDE = "string_29299";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_MULTIPLEEMPLOYEETOTALDISCOUNTSNOTALLOWED = "string_29294";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_MULTIPLEEMPLOYEELINEDISCOUNTSNOTALLOWED = "string_29295";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CANNOTSUSPENDCARTWITHACTIVETENDERLINES = "string_29304";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_TERMINALHASANOPENSHIFT = "string_29338";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CASHDRAWERHASANOPENSHIFT = "string_29306";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_SHIFTVALIDATIONERROR = "string_29307";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_SHIFTALREADYOPENONDIFFERENTTERMINAL = "string_29334";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_SHIFTSTARTINGAMOUNTNOTENTERED = "string_29308";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_SHIFTTENDERDECLARATIONAMOUNTNOTENTERED = "string_29309";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CANNOTCHANGECUSTOMERIDWHENEDITINGCUSTOMERORDER = "string_4420";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDSHIPPINGDATE = "string_29810";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CURRENCYCHANNELORDERMISMATCH = "string_29319";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CURRENCYNOTFOUND = "string_29374";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_DEPOSITMUSTBEGREATERTHANZERO = "string_29325";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_DEPOSITOVERRIDEMUSTNOTBEGREATERTHANTOTALAMOUNT = "string_29324";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_DEPOSITOVERRIDEMAYNOTBECHANGED = "string_29326";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_DEPOSITOVERRIDEMAYNOTBECLEARED = "string_29327";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTUSINGUNAUTHORIZEDACCOUNT = "string_29351";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_EMPLOYEEDISCOUNTEXCEEDED = "string_29346";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_MAXCOUNTINGDIFFERENCEEXCEEDED = "string_29367";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CHANGETENDERTYPENOTSUPPORTED = "string_29369";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_ELEVATEDUSERSAMEASLOGGEDONUSER = "string_29256";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNABLETOGENERATETOKEN = "string_1175";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTKEYNOTFOUND = "string_1195";
        ErrorTypeEnum.BAD_REQUEST = "string_29274";
        ErrorTypeEnum.NOT_AUTHORIZIED = "string_29275";
        ErrorTypeEnum.FORBIDDEN = "string_29276";
        ErrorTypeEnum.PRECONDITION_FAILED = "string_29277";
        ErrorTypeEnum.SERVICE_UNAVAILABLE = "string_29278";
        ErrorTypeEnum.SERVER_TIMEOUT = "string_29279";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDCARDEXPIRATIONDATE = "string_1180";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNABLETOAUTHORIZEPAYMENT = "string_29280";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_VOIDTRANSACTIONCONTAINSTENDEREDLINES = "string_29281";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_LOYALTYCARDALREADYISSUED = "string_29284";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CUSTOMERNOTFOUND = "string_29285";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDLOYALTYCARDNUMBER = "string_29286";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_BLOCKEDLOYALTYCARD = "string_29287";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_NOTENDERLOYALTYCARD = "string_29322";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CONFLICTLOYALTYCARDCUSTOMERANDTRANSACTIONCUSTOMER = "string_29288";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDDEVICE = "string_507";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CDXREALTIMESERVICEFAILURE = "string_29289";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_NOTENOUGHREWARDPOINTS = "string_29290";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_NOMORETHANONELOYALTYTENDER = "string_29291";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_AMOUNTDUEMUSTBEPAIDBEFORECHECKOUT = "string_29292";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDPAYMENTREQUEST = "string_29293";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTALREADYVOIDED = "string_29293";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDADDRESS = "string_29296";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_NOPRICEOVERRIDEFORRETURNS = "string_29297";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_NOPRICEOVERRIDEFORGIFTCARDS = "string_29298";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTAMOUNTEXCEEDSGIFTBALANCE = "string_29301";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_NOMORETHANONEOPERATIONWITHAGIFTCARD = "string_29302";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CANNOTADDNONPRODUCTITEMTOCUSTOMERORDER = "string_29811";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_USEEXISTINGSHIFTPERMISSIONDENIED = "string_29303";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_SHIFTNOTFOUND = "string_29336";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CUSTOMERACCOUNTDEPOSITMULTIPLECARTLINESNOTALLOWED = "string_29340";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CUSTOMERACCOUNTNUMBERISNOTSET = "string_29341";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CANNOTPAYFORCUSTOMERACCOUNTDEPOSITWITHCUSTOMERACCOUNTPAYMENTMETHOD = "string_29342";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CUSTOMERACCOUNTDEPOSITCANNOTBEVOIDED = "string_29344";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CUSTOMERACCOUNTDEPOSITCARTTYPEMISMATCH = "string_29345";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_NONDRAWEROPERATIONSONLY = "string_2123";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CANNOTSUSPENDCARTWITHACTIVEGIFTCARDSALESLINES = "string_29305";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_RETURNITEMPRICEEXCEEDED = "string_29310";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_RETURNTRANSACTIONTOTALEXCEEDED = "string_29311";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PROPERTYUPDATENOTALLOWED = "string_29312";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDQUANTITY = "string_29313";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDCUSTOMERORDERMODEFORADDCARTLINE = "string_29314";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDCUSTOMERORDERMODEFORVOIDPRODUCTS = "string_29335";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_REMOTEPRODUCTSNOTSUPPORTEDWITHCURRENTTRANSACTIONTYPE = "string_29315";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_REFUNDAMOUNTMORETHANALLOWED = "string_29316";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_VIEWTIMECLOCKNOTENABLED = "string_29317";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_ITEMQUANTITYEXCEEDED = "string_29318";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_TIMECLOCKNOTENABLED = "string_29321";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDUNITOFMEASURE = "string_29323";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_SETTLEINVOICEFAILED = "string_29330";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_NOPRICEOVERRIDEFORINVOICELINES = "string_29331";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_SERVER_INTERNAL_ERROR = ErrorTypeEnum.GENERICERRORMESSAGE;
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CARTNOTFOUND = "string_29314";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CARTNOTACTIVE = "string_29834";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INCOMEEXPENSECARTDOESNOTALLOWSALESLINE = "string_29337";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INCOMEEXPENSECARTDOESNOTALLOWCUSTOMER = "string_29348";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_GIFTCARDUNLOCKFAILED = "string_29339";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNLOCKREGISTERFAILED = "string_29352";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_OFFLINEDATABASECHUNKFILENOTFOUND = "string_29830";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CHANGEPASSWORDFAILED = "string_6613";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_RESETPASSWORDFAILED = "string_6614";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CHANNELDATABASECONNECTIONFAILED = "string_1429";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_REALTIMESERVICECONNECTIONFAILED = "string_1429";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_SALESMUSTHAVEQUANTITYGREATERTHANZERO = "string_29353";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNABLETOCAPTUREPAYMENT = "string_29354";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_SESSIONEXPIRED = "string_29256";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDAMOUNT = "string_29372";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDBAGNUMBER = "string_29373";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_BALANCEAMOUNTEXCEEDSMAXIMUMALLOWEDVALUE = "string_29355";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CHANGEBACKISNOTALLOWED = "string_29356";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INCORRECTPAYMENTAMOUNTSIGN = "string_29357";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_OVERTENDERAMOUNTEXCEEDSMAXIMUMALLOWEDVALUE = "string_29358";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEEDSMAXIMUMAMOUNTPERLINE = "string_29359";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEEDSMAXIMUMAMOUNTPERTRANSACTION = "string_29360";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEEDSMINIMUMAMOUNTPERLINE = "string_29361";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEEDSMINIMUMAMOUNTPERTRANSACTION = "string_29362";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTMUSTBEUSEDTOFINALIZETRANSACTION = "string_29363";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PRODUCTISNOTACTIVE = "string_29364";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PRODUCTISBLOCKED = "string_29365";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CANNOTRETURNMULTIPLETRANSACTIONS = "string_29366";
        Proxy.ErrorTypeEnum = ErrorTypeEnum;
        var DeviceActivationErrorsForwardLinks = (function () {
            function DeviceActivationErrorsForwardLinks() {
            }
            return DeviceActivationErrorsForwardLinks;
        }());
        DeviceActivationErrorsForwardLinks.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CHANNELDATABASECONNECTIONFAILED = "http://go.microsoft.com/fwlink/?LinkId=403590";
        DeviceActivationErrorsForwardLinks.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_REALTIMESERVICECONNECTIONFAILED = "http://go.microsoft.com/fwlink/?LinkId=403591";
        DeviceActivationErrorsForwardLinks.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_TERMINALNOTASSIGNEDTOSTORE = "http://go.microsoft.com/fwlink/?LinkId=403592";
        DeviceActivationErrorsForwardLinks.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_USERNOTASSIGNEDTOSTORE = "http://go.microsoft.com/fwlink/?LinkId=403593";
        DeviceActivationErrorsForwardLinks.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INCORRECTSTAFFIDORPASSWORD = "http://go.microsoft.com/fwlink/?LinkId=403594";
        DeviceActivationErrorsForwardLinks.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_DEVICEALREADYACTIVATED = "http://go.microsoft.com/fwlink/?LinkId=519136";
        DeviceActivationErrorsForwardLinks.SERVER_ERROR = "http://go.microsoft.com/fwlink/?LinkId=519137";
        Proxy.DeviceActivationErrorsForwardLinks = DeviceActivationErrorsForwardLinks;
        var ErrorHelper = (function () {
            function ErrorHelper() {
            }
            ErrorHelper.isAggregatedErrorResourceId = function (errorResourceId) {
                return ErrorHelper.AGGREGATED_ERROR_RESOUCEIDS.indexOf(errorResourceId) != -1;
            };
            ErrorHelper.MapResponseStatusCodeToError = function (errorMessage, statusCode, err) {
                var errorCode = "";
                var canRetry = false;
                switch (statusCode) {
                    case 400:
                        errorCode = ErrorTypeEnum.BAD_REQUEST;
                        break;
                    case 401:
                        errorCode = ErrorTypeEnum.NOT_AUTHORIZIED;
                        break;
                    case 403:
                        errorCode = ErrorTypeEnum.FORBIDDEN;
                        break;
                    case 412:
                        errorCode = ErrorTypeEnum.PRECONDITION_FAILED;
                        break;
                    case 503:
                        errorCode = ErrorTypeEnum.SERVICE_UNAVAILABLE;
                        canRetry = true;
                        break;
                    case 500:
                    default:
                        errorCode = ErrorTypeEnum.SERVER_ERROR;
                        errorMessage = "The server error format is not supported or it does not have enough information.";
                        if (err && err.response && err.response.body && err.response.requestUri) {
                            if (err.response.requestUri.indexOf("GetOrderByReceiptId") > -1) {
                                if (err.response.body.indexOf("No orders were found") > -1) {
                                    errorMessage = Commerce.Proxy.ErrorTypeEnum.RETURN_NO_ORDERS_FOUND;
                                }
                            }
                        }
                        break;
                }
                if (errorMessage && errorMessage.toUpperCase() == "TIMEOUT") {
                    errorCode = ErrorTypeEnum.SERVER_TIMEOUT;
                }
                return new Proxy.ProxyError(errorCode, errorMessage || Proxy.StringExtensions.EMPTY, Proxy.StringExtensions.EMPTY, canRetry);
            };
            ErrorHelper.hasError = function (errors, errorType) {
                if (Proxy.ArrayExtensions.hasElements(errors)) {
                    for (var i = 0; i < errors.length; i++) {
                        var error = errors[i];
                        var errorTypeValue = error.ErrorCode != null
                            ? ErrorTypeEnum[error.ErrorCode.toUpperCase()]
                            : null;
                        if (!Proxy.StringExtensions.compare(errorType, error.ErrorCode, true) || !Proxy.StringExtensions.compare(errorType, errorTypeValue, true)) {
                            return true;
                        }
                    }
                }
                return false;
            };
            ErrorHelper.isRetryable = function (errors) {
                var numErrors = Proxy.ObjectExtensions.isNullOrUndefined(errors) ? 0 : errors.length;
                var isRetryable = numErrors > 0;
                for (var i = 0; i < numErrors; i++) {
                    if (!Proxy.ObjectExtensions.isNullOrUndefined(errors[i])) {
                        isRetryable = isRetryable && errors[i].CanRetry;
                    }
                    else {
                        isRetryable = false;
                    }
                }
                return isRetryable;
            };
            ErrorHelper.getErrorResourceIds = function (errors) {
                var result = "";
                if (Proxy.ArrayExtensions.hasElements(errors)) {
                    var errorResourceIds = [];
                    for (var i = 0; i < errors.length; i++) {
                        errorResourceIds.push(errors[i].ErrorCode);
                    }
                    result = errorResourceIds.join(", ");
                }
                return result;
            };
            ErrorHelper.getErrorMessages = function (errors) {
                var result = "";
                if (Proxy.ArrayExtensions.hasElements(errors)) {
                    var errorResourceIds = [];
                    for (var i = 0; i < errors.length; i++) {
                        errorResourceIds.push(errors[i].LocalizedErrorMessage);
                    }
                    result = errorResourceIds.join(", ");
                }
                return result;
            };
            return ErrorHelper;
        }());
        ErrorHelper.AGGREGATED_ERROR_RESOUCEIDS = [
            "Microsoft_Dynamics_Commerce_Runtime_AggregateValidationError",
            "Microsoft_Dynamics_Commerce_Runtime_AggregateCommunicationError",
            "Microsoft_Dynamics_Commerce_Runtime_InvalidCartLinesAggregateError"
        ];
        ErrorHelper.MICROSOFT_DYNAMICS_SERVER_INTERNAL_ERROR = 'Microsoft_Dynamics_Server_Internal_Error';
        Proxy.ErrorHelper = ErrorHelper;
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        "use strict";
        var MessageType;
        (function (MessageType) {
            MessageType[MessageType["Info"] = 0] = "Info";
            MessageType[MessageType["Error"] = 1] = "Error";
        })(MessageType = Proxy.MessageType || (Proxy.MessageType = {}));
        var MessageBoxButtons;
        (function (MessageBoxButtons) {
            MessageBoxButtons[MessageBoxButtons["Default"] = 0] = "Default";
            MessageBoxButtons[MessageBoxButtons["OKCancel"] = 1] = "OKCancel";
            MessageBoxButtons[MessageBoxButtons["YesNo"] = 2] = "YesNo";
            MessageBoxButtons[MessageBoxButtons["RetryNo"] = 3] = "RetryNo";
        })(MessageBoxButtons = Proxy.MessageBoxButtons || (Proxy.MessageBoxButtons = {}));
        var DialogResult;
        (function (DialogResult) {
            DialogResult[DialogResult["Close"] = 0] = "Close";
            DialogResult[DialogResult["OK"] = 1] = "OK";
            DialogResult[DialogResult["Cancel"] = 2] = "Cancel";
            DialogResult[DialogResult["Yes"] = 3] = "Yes";
            DialogResult[DialogResult["No"] = 4] = "No";
        })(DialogResult = Proxy.DialogResult || (Proxy.DialogResult = {}));
        var NotificationHandler = (function () {
            function NotificationHandler() {
            }
            NotificationHandler.displayClientErrors = function (errors, titleResourceId) {
                var errorMessage = "";
                var limitOfErrorLines = 5;
                var previousMessageCodes = [];
                if (Proxy.ArrayExtensions.hasElements(errors)) {
                    for (var i = 0; i < errors.length && i < limitOfErrorLines; i++) {
                        var error = errors[i];
                        Commerce.Proxy.Tracer.Error("NotificationHandler.displayMultipleErrorMessages() ErrorCode {0} ErrorMessage {1}", error.ErrorCode, error.ErrorMessage);
                        if (errors.length > 1 && Proxy.ErrorHelper.isAggregatedErrorResourceId(error.ErrorCode)) {
                            continue;
                        }
                        if (previousMessageCodes.indexOf(error.ErrorCode) != -1) {
                            continue;
                        }
                        previousMessageCodes.push(error.ErrorCode);
                        errorMessage += NotificationHandler.clientError(error);
                        if (i != errors.length - 1) {
                            errorMessage += "\n";
                        }
                    }
                    return null;
                }
                var asyncResult = new Proxy.AsyncResult(null);
                var dialogResult = DialogResult.Close;
                asyncResult.resolve(dialogResult);
                return asyncResult;
            };
            NotificationHandler.displayErrorMessage = function (resourceId) {
                var params = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    params[_i - 1] = arguments[_i];
                }
                var errorMessage = Proxy.StringExtensions.format("NotImplemented", params);
                Commerce.Proxy.Tracer.Error("NotificationHandler.displayErrorMessage() ErrorMessage {0}", errorMessage);
                return null;
            };
            NotificationHandler.getErrorMessage = function (errors) {
                return NotificationHandler.clientError(errors);
            };
            NotificationHandler.clientError = function (clientError) {
                var localeStringReference;
                var message;
                var errorCode = clientError.ErrorCode.toUpperCase();
                if (errorCode == Proxy.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_HEADQUARTERTRANSACTIONSERVICEMETHODCALLFAILURE) {
                    message = clientError.ErrorMessage;
                }
                else {
                    var getEnum = Proxy.ErrorTypeEnum[errorCode];
                    if (!Proxy.StringExtensions.isNullOrWhitespace(getEnum)) {
                        localeStringReference = getEnum;
                    }
                    else {
                        localeStringReference = clientError.ErrorCode;
                    }
                    message = "NotImplemented";
                    if ((errorCode === Proxy.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNABLETOCAPTUREPAYMENT.toUpperCase())
                        || (errorCode === Proxy.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNABLETOAUTHORIZEPAYMENT.toUpperCase())
                        || (errorCode === Proxy.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_MANUALCARDNUMBERNOTALLOWED.toUpperCase())
                        || (errorCode === Proxy.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_TENDERLINECANNOTBEVOIDED.toUpperCase())
                        || (errorCode === Proxy.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDPAYMENTREQUEST.toUpperCase())
                        || (errorCode === Proxy.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTUSINGUNAUTHORIZEDACCOUNT.toUpperCase())
                        || (errorCode === Proxy.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTKEYNOTFOUND.toUpperCase())) {
                        var errors = clientError.ErrorMessage.match(/ErrorCode:(.*)\r\n /g);
                        for (var i in errors) {
                            message += "\n" + errors[i];
                        }
                        Commerce.Proxy.Tracer.Error("NotificationHandler.DisplayClientError() payment errors: {0}", clientError.ErrorMessage);
                    }
                }
                if (Proxy.StringExtensions.isNullOrWhitespace(message) || message == localeStringReference) {
                    Commerce.Proxy.Tracer.Warning("NotificationHandler.DisplayClientError() ErrorCode not found {0}", clientError.ErrorCode);
                    message = "NotImplemented";
                }
                if (!Proxy.ObjectExtensions.isNullOrUndefined(clientError.formatData)) {
                    message = Proxy.StringExtensions.format(message, clientError.formatData);
                }
                return message;
            };
            return NotificationHandler;
        }());
        Proxy.NotificationHandler = NotificationHandler;
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        "use strict";
        var ErrorParser = (function () {
            function ErrorParser() {
            }
            ErrorParser.parseErrorMessage = function (error) {
                var response = error.response;
                var errors = [];
                if (!Proxy.ObjectExtensions.isNullOrUndefined(response)) {
                    var handled = true;
                    Proxy.Tracer.Information("Server response status code is '{0}'", response.statusCode);
                    switch (response.statusCode) {
                        case 306:
                            var redirectUrl = response.headers['Location'];
                            errors = [new Proxy.ProxyError(Proxy.ErrorTypeEnum.RETAIL_SERVER_REDIRECT_ERROR, response.statusText, Proxy.StringExtensions.EMPTY, false, redirectUrl)];
                            break;
                        case 401:
                            break;
                        case 408:
                            errors = [new Proxy.ProxyError(Proxy.ErrorTypeEnum.SERVER_TIMEOUT, response.statusText, Proxy.StringExtensions.EMPTY, false)];
                            break;
                        case 0:
                        case 502:
                        case 503:
                        case 504:
                            errors = [new Proxy.ProxyError(Proxy.ErrorTypeEnum.SERVICE_UNAVAILABLE, response.statusText, Proxy.StringExtensions.EMPTY, false)];
                            break;
                        default:
                            handled = false;
                            break;
                    }
                    if (!handled) {
                        errors = ErrorParser.parseError(error);
                    }
                }
                if ((!errors) || (!errors.length)) {
                    errors = [new Proxy.ProxyError(Proxy.ErrorTypeEnum.SERVER_ERROR, 'Could not parse error message sent by the server.')];
                }
                return errors;
            };
            ErrorParser.parseHardwareStationErrorMessage = function (error) {
                var errors;
                if (!Proxy.ObjectExtensions.isNullOrUndefined(error)) {
                    try {
                        var response = error.responseText;
                        if (response) {
                            var jsonResponse = JSON.parse(response);
                            if (jsonResponse) {
                                errors = [new Proxy.ProxyError(jsonResponse.ErrorResourceId ? jsonResponse.ErrorResourceId : Proxy.ErrorTypeEnum.SERVER_ERROR, jsonResponse.Message || '')];
                            }
                            else {
                                errors = [new Proxy.ProxyError(Proxy.ErrorTypeEnum.SERVER_ERROR, 'The value of Content-Type on server response is not supported.')];
                            }
                        }
                        else {
                            errors = [Proxy.ErrorHelper.MapResponseStatusCodeToError(error.statusText, error.status, error)];
                        }
                    }
                    catch (ex) {
                        var errorMessage = "parseHardwareStationErrorMessage: Failed parse error message '{0}'.";
                        Proxy.Tracer.Error(errorMessage, ex);
                    }
                }
                if ((!errors) || (!errors.length)) {
                    errors = [new Proxy.ProxyError(Proxy.ErrorTypeEnum.SERVER_ERROR, 'Could not parse error message sent by the server.')];
                }
                return errors;
            };
            ErrorParser.parseJSONError = function (errorString) {
                var commerceErrors;
                try {
                    var odataError = JSON.parse(errorString);
                    var serializedException = odataError.error.message;
                    var exceptionType = odataError.error.code;
                    if (exceptionType === Proxy.ErrorHelper.MICROSOFT_DYNAMICS_SERVER_INTERNAL_ERROR) {
                        commerceErrors = [new Proxy.ProxyError(Proxy.ErrorHelper.MICROSOFT_DYNAMICS_SERVER_INTERNAL_ERROR, 'Server failed with uncaught exception. Please report this failure.')];
                    }
                    else if (serializedException != null && exceptionType != null) {
                        var commerceException = JSON.parse(serializedException) || {};
                        commerceErrors = ErrorParser.convertExceptionToErrors(commerceException, exceptionType);
                    }
                    else {
                        throw 'Server exception is not in expected format.';
                    }
                }
                catch (ex) {
                    var errorMessage = "DataServiceRequest::parseJSONError: Invalid json format from server. It was not possible to parse error message. {0}";
                    Proxy.Tracer.Error(errorMessage, ex);
                }
                if (!Proxy.ArrayExtensions.hasElements(commerceErrors)) {
                    commerceErrors = [new Proxy.ProxyError(Proxy.ErrorTypeEnum.GENERICERRORMESSAGE, 'Could not parse error message from server. Possible invalid OData request, please check your request.')];
                }
                return commerceErrors;
            };
            ErrorParser.convertExceptionToErrors = function (serverException, exceptionType) {
                var errors = [];
                switch (exceptionType) {
                    case ErrorParser.DataValidationExceptionType:
                    case ErrorParser.CartValidationExceptionType:
                        var dataValidation = serverException;
                        errors = ErrorParser.getErrorsFromDataValidationFailures(dataValidation.ValidationResults);
                        errors.push(new Proxy.ProxyError(dataValidation.ErrorResourceId, Proxy.StringExtensions.EMPTY, dataValidation.LocalizedMessage));
                        break;
                    case ErrorParser.BarcodeWithLinkedItemNotSupportedExceptionType:
                    case ErrorParser.MissingRequiredReasonCodeExceptionType:
                        var exception = serverException;
                        var error = new Proxy.ProxyError(exception.ErrorResourceId, Proxy.StringExtensions.EMPTY, exception.LocalizedMessage);
                        error.commerceException = exception;
                        errors.push(error);
                        break;
                    case ErrorParser.StorageExceptionType:
                        errors.push(new Proxy.ProxyError(Proxy.ErrorTypeEnum.SERVICE_UNAVAILABLE, Proxy.StringExtensions.EMPTY, serverException.LocalizedMessage, false));
                        break;
                    case ErrorParser.PaymentExceptionType:
                        var paymentException = serverException;
                        var paymentError = new Proxy.ProxyError(paymentException.ErrorResourceId, Proxy.StringExtensions.EMPTY, paymentException.LocalizedMessage);
                        paymentError.commerceException = paymentException;
                        errors.push(paymentError);
                        break;
                    case ErrorParser.CommerceExceptionType:
                    default:
                        var commerceException = serverException;
                        errors.push(new Proxy.ProxyError(commerceException.ErrorResourceId, Proxy.StringExtensions.EMPTY, serverException.LocalizedMessage));
                        break;
                }
                return errors;
            };
            ErrorParser.getErrorsFromDataValidationFailures = function (failures) {
                var errors = [];
                failures = failures || [];
                for (var i = 0; i < failures.length; i++) {
                    var failure = failures[i];
                    errors.push(new Proxy.ProxyError(failure.ErrorResourceId, failure.ErrorContext || '', failure.LocalizedMessage));
                }
                return errors;
            };
            ErrorParser.parseError = function (error) {
                var response = error.response;
                var errors = [];
                if (!Proxy.ObjectExtensions.isNullOrUndefined(response.body)) {
                    var contentType = (response.headers["Content-Type"] || response.headers["content-type"]) || "";
                    var bodyString = response.body;
                    if (contentType.toLowerCase().indexOf("application/json") != -1) {
                        errors = ErrorParser.parseJSONError(bodyString);
                    }
                    else {
                        var message = Proxy.StringExtensions.format("Server error has been received with unsupported content type: '{0}'.", contentType);
                        Proxy.RetailLogger.genericWarning(message);
                    }
                }
                if (!Proxy.ArrayExtensions.hasElements(errors)) {
                    errors = [Proxy.ErrorHelper.MapResponseStatusCodeToError(response.statusText, response.statusCode, error)];
                }
                return errors;
            };
            return ErrorParser;
        }());
        ErrorParser.CommerceExceptionType = "Microsoft.Dynamics.Commerce.Runtime.CommerceException";
        ErrorParser.DataValidationExceptionType = "Microsoft.Dynamics.Commerce.Runtime.DataValidationException";
        ErrorParser.CartValidationExceptionType = "Microsoft.Dynamics.Commerce.Runtime.CartValidationException";
        ErrorParser.StorageExceptionType = "Microsoft.Dynamics.Commerce.Runtime.StorageException";
        ErrorParser.PaymentExceptionType = "PaymentException";
        ErrorParser.BarcodeWithLinkedItemNotSupportedExceptionType = "Microsoft.Dynamics.Commerce.Runtime.BarcodeWithLinkedItemNotSupportedException";
        ErrorParser.MissingRequiredReasonCodeExceptionType = "Microsoft.Dynamics.Commerce.Runtime.MissingRequiredReasonCodeException";
        Proxy.ErrorParser = ErrorParser;
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        "use strict";
        var ArrayExtensions = (function () {
            function ArrayExtensions() {
            }
            ArrayExtensions.hasElements = function (array) {
                return !Proxy.ObjectExtensions.isNullOrUndefined(array) && array.length > 0;
            };
            ArrayExtensions.hasElement = function (array, element, equalityComparer) {
                if (!ArrayExtensions.hasElements(array)) {
                    return false;
                }
                var equals = ArrayExtensions._getEqualityComparer(equalityComparer);
                for (var i in array) {
                    if (equals(array[i], element))
                        return true;
                }
                return false;
            };
            ArrayExtensions.distinct = function (array, equalityComparer) {
                if (!ArrayExtensions.hasElements(array)) {
                    return array;
                }
                var equals = ArrayExtensions._getEqualityComparer(equalityComparer);
                var distinct = [];
                o: for (var i = 0, n = array.length; i < n; i++) {
                    for (var x = 0, y = distinct.length; x < y; x++) {
                        if (equals(distinct[x], array[i])) {
                            continue o;
                        }
                    }
                    distinct.push(array[i]);
                }
                return distinct;
            };
            ArrayExtensions.intersect = function (left, right, equalityComparer) {
                return ArrayExtensions._differenceOrIntersect(left, right, false, equalityComparer);
            };
            ArrayExtensions.intersectMultiple = function (equalityComparer) {
                var arrays = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    arrays[_i - 1] = arguments[_i];
                }
                if (!Proxy.ObjectExtensions.isNullOrUndefined(arrays)) {
                    return [];
                }
                if (arrays.length == 1) {
                    return arrays[0];
                }
                var result = arrays[0];
                for (var i = 1; i < arrays.length; i++) {
                    result = ArrayExtensions.intersect(result, arrays[i], equalityComparer);
                }
                return result;
            };
            ArrayExtensions.difference = function (left, right, equalityComparer) {
                return ArrayExtensions._differenceOrIntersect(left, right, true, equalityComparer);
            };
            ArrayExtensions.union = function (left, right, equalityComparer) {
                if (Proxy.ObjectExtensions.isNullOrUndefined(left) || Proxy.ObjectExtensions.isNullOrUndefined(right)) {
                    return null;
                }
                return ArrayExtensions.distinct(left.concat(right), equalityComparer);
            };
            ArrayExtensions.symmetricDifference = function (left, right, equalityComparer) {
                if (!ArrayExtensions.hasElements(left)) {
                    return ArrayExtensions.distinct(right, equalityComparer);
                }
                if (!ArrayExtensions.hasElements(right)) {
                    return ArrayExtensions.distinct(left, equalityComparer);
                }
                var union = ArrayExtensions.union(left, right, equalityComparer);
                var intersect = ArrayExtensions.intersect(left, right);
                return ArrayExtensions.difference(union, intersect);
            };
            ArrayExtensions.firstOrUndefined = function (array, predicate) {
                if (!ArrayExtensions.hasElements(array)) {
                    return undefined;
                }
                if (Proxy.ObjectExtensions.isFunction(predicate)) {
                    for (var i = 0; i < array.length; i++) {
                        if (predicate(array[i])) {
                            return array[i];
                        }
                    }
                    return undefined;
                }
                else {
                    return array[0];
                }
            };
            ArrayExtensions.lastOrUndefined = function (array, predicate) {
                if (!ArrayExtensions.hasElements(array)) {
                    return undefined;
                }
                if (Proxy.ObjectExtensions.isFunction(predicate)) {
                    for (var i = array.length - 1; i >= 0; i--) {
                        if (predicate(array[i])) {
                            return array[i];
                        }
                    }
                    return undefined;
                }
                else {
                    return array[array.length - 1];
                }
            };
            ArrayExtensions.where = function (array, predicate) {
                if (!ArrayExtensions.hasElements(array)) {
                    return [];
                }
                return array.filter(predicate);
            };
            ArrayExtensions.sum = function (array, selector, predicate) {
                var usePredicate = false;
                if (predicate) {
                    usePredicate = Proxy.ObjectExtensions.isFunction(predicate);
                }
                if (!Proxy.ObjectExtensions.isFunction(selector)) {
                    throw "Selector is not a Function";
                }
                if (!ArrayExtensions.hasElements(array)) {
                    return 0;
                }
                return array.reduce(function (accumulator, element) {
                    var elementValue;
                    if (usePredicate) {
                        elementValue = predicate(element) ? selector(element) : 0;
                    }
                    else {
                        elementValue = selector(element);
                    }
                    return accumulator + elementValue;
                }, 0);
            };
            ArrayExtensions._differenceOrIntersect = function (left, right, difference, equalityComparer) {
                if (Proxy.ObjectExtensions.isNullOrUndefined(left) || Proxy.ObjectExtensions.isNullOrUndefined(right)) {
                    return null;
                }
                return left.filter(function (value) {
                    var existsInRight = ArrayExtensions.hasElement(right, value, equalityComparer);
                    return difference ? !existsInRight : existsInRight;
                });
            };
            ArrayExtensions._getDefaultEqualityComparer = function () {
                return function (left, right) { return left === right; };
            };
            ArrayExtensions._getEqualityComparer = function (equalityComparer) {
                return (equalityComparer) ? equalityComparer : ArrayExtensions._getDefaultEqualityComparer();
            };
            return ArrayExtensions;
        }());
        Proxy.ArrayExtensions = ArrayExtensions;
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        "use strict";
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        "use strict";
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        "use strict";
        Proxy.IStoreOperationsManagerName = "IStoreOperationsManager";
        Proxy.ICategoryManagerName = "ICategoryManager";
        Proxy.ICartManagerName = "ICartManager";
        Proxy.ICustomerManagerName = "ICustomerManager";
        Proxy.IEmployeeManagerName = "IEmployeeManager";
        Proxy.ISalesOrderManagerName = "ISalesOrderManager";
        Proxy.IShiftManagerName = "IShiftManager";
        Proxy.IStockCountJournalManagerName = "IStockCountJournalManager";
        Proxy.IOrgUnitManagerName = "IOrgUnitManager";
        Proxy.IProductManagerName = "IProductManager";
        Proxy.IProductCatalogManagerName = "IProductCatalogManager";
        Proxy.ICommerceListManagerName = "ICommerceListManager";
        Proxy.ITransferOrderManagerName = "ITransferOrderManager";
        Proxy.IPurchaseOrderManagerName = "IPurchaseOrderManager";
        Proxy.IPickingListManagerName = "IPickingListManager";
        Proxy.IWarehouseManagerName = "IWarehouseManager";
        Proxy.IScanResultManagerName = "IScanResultManager";
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        "use strict";
        var RetailServerRequestFactory = (function () {
            function RetailServerRequestFactory(serverUri, operatingUnitNumber, authToken) {
                this.locale = "";
                this._serverUri = serverUri;
                this._operatingUnitNumber = operatingUnitNumber;
                this._authToken = authToken;
            }
            RetailServerRequestFactory.prototype.create = function (dataServiceQuery) {
                return new Proxy.DataServiceRequest(this._serverUri, dataServiceQuery, this._operatingUnitNumber, this._authToken, this.locale);
            };
            return RetailServerRequestFactory;
        }());
        Proxy.RetailServerRequestFactory = RetailServerRequestFactory;
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        "use strict";
        var XhrHelper = (function () {
            function XhrHelper() {
            }
            XhrHelper.SetupAjaxParameters = function () {
                $.support.cors = true;
                $.ajaxSetup({
                    cache: false,
                    xhrFields: {
                        withCredentials: "true"
                    }
                });
            };
            XhrHelper.SetupODataParameters = function () {
                OData.jsonHandler.accept = 'application/json;odata=nometadata';
                OData.defaultHttpClient = (function () {
                    var readResponseHeaders = function (xhr, headers) {
                        var responseHeaders = xhr.getAllResponseHeaders().split(/\r?\n/);
                        responseHeaders.forEach(function (value) {
                            if (value) {
                                var pair = value.split(": ");
                                headers[pair[0]] = pair[1];
                            }
                        });
                    };
                    return {
                        request: function (request, success, error) {
                            var timeoutHandle = 0;
                            var handleTimeout = function () {
                                if (xhr != null) {
                                    xhr.abort();
                                    xhr = null;
                                    var statusText = "Request Timeout";
                                    var response = { requestUri: request.requestUri, statusCode: 408, statusText: statusText, headers: [], body: "" };
                                    error({ message: statusText, request: request, response: response });
                                }
                            };
                            var xhr = new XMLHttpRequest();
                            xhr.onreadystatechange = function () {
                                if (xhr === null || xhr.readyState != 4) {
                                    return;
                                }
                                clearTimeout(timeoutHandle);
                                var statusText = xhr.statusText;
                                var statusCode = xhr.status;
                                if (statusCode === 1223) {
                                    statusCode = 204;
                                    statusText = "No Content";
                                }
                                var headers = [];
                                readResponseHeaders(xhr, headers);
                                var response = { requestUri: request.requestUri, statusCode: statusCode, statusText: statusText, headers: headers, body: xhr.responseText };
                                xhr = null;
                                if (statusCode >= 200 && statusCode <= 299) {
                                    success(response);
                                }
                                else {
                                    error({ message: statusText, request: request, response: response });
                                }
                            };
                            xhr.open(request.method || "GET", request.requestUri, true);
                            xhr.withCredentials = true;
                            if (request.headers) {
                                for (var name in request.headers) {
                                    xhr.setRequestHeader(name, request.headers[name]);
                                }
                            }
                            xhr.send(request.body);
                        }
                    };
                })();
            };
            XhrHelper.parseOdataResult = function (data, resultType) {
                var result = data;
                if (data) {
                    if (data.value) {
                        var resultSet = data.value;
                        if (data[XhrHelper.ODATA_TOTAL_COUNT_PROPERTY]) {
                            var totalCount = data[XhrHelper.ODATA_TOTAL_COUNT_PROPERTY];
                        }
                        var hasNextPage = false;
                        if (data[XhrHelper.ODATA_HAS_NEXT_PAGE_PROPERTY]) {
                            hasNextPage = true;
                        }
                        if (resultType) {
                            if (Object.prototype.toString.call(resultSet) === '[object Array]') {
                                for (var i = 0; i < resultSet.length; i++) {
                                    resultSet[i] = new resultType(resultSet[i]);
                                }
                            }
                        }
                        resultSet.totalCount = totalCount;
                        resultSet.hasNextPage = hasNextPage;
                        result = resultSet;
                    }
                    else {
                        if (resultType) {
                            result = new resultType(result);
                        }
                    }
                }
                return result;
            };
            return XhrHelper;
        }());
        XhrHelper.ODATA_TOTAL_COUNT_PROPERTY = '@odata.count';
        XhrHelper.ODATA_HAS_NEXT_PAGE_PROPERTY = '@odata.nextLink';
        Proxy.XhrHelper = XhrHelper;
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        "use strict";
        var ManagerFactory = (function () {
            function ManagerFactory(retailServerUrl, operatingUnitNumber, authToken, locale) {
                if (locale === void 0) { locale = ""; }
                this._odataEndpoint = Proxy.StringExtensions.CleanUri(retailServerUrl);
                this._operatingUnitNumber = operatingUnitNumber;
                this._authToken = authToken;
                this._locale = locale;
                Proxy.XhrHelper.SetupAjaxParameters();
                Proxy.XhrHelper.SetupODataParameters();
                this._commerceContext = new Commerce.Proxy.CommerceContext(this.createDataServiceFactory());
            }
            ManagerFactory.prototype.updateServerUriInCommerceContext = function (retailServerUri) {
                this._odataEndpoint = Proxy.StringExtensions.CleanUri(retailServerUri);
                this._commerceContext.dataServiceRequestFactory = this.createDataServiceFactory();
            };
            ManagerFactory.prototype.updateLocaleInCommerceContext = function (locale) {
                this._locale = locale;
                this._commerceContext.dataServiceRequestFactory = this.createDataServiceFactory();
            };
            ManagerFactory.prototype.getManager = function (entityManagerInterface) {
                return this.GetManager(entityManagerInterface);
            };
            ManagerFactory.prototype.GetManager = function (entityManagerInterface, callerContext) {
                var dataManager;
                switch (entityManagerInterface) {
                    case Commerce.Proxy.ICartManagerName:
                        dataManager = new Commerce.Proxy.CartManager(this._commerceContext, callerContext);
                        break;
                    case Commerce.Proxy.ICustomerManagerName:
                        dataManager = new Commerce.Proxy.CustomerManager(this._commerceContext, callerContext);
                        break;
                    case Commerce.Proxy.IProductManagerName:
                        dataManager = new Commerce.Proxy.ProductManager(this._commerceContext, callerContext);
                        break;
                    case Commerce.Proxy.ISalesOrderManagerName:
                        dataManager = new Commerce.Proxy.SalesOrderManager(this._commerceContext, callerContext);
                        break;
                    case Commerce.Proxy.IStockCountJournalManagerName:
                        dataManager = new Commerce.Proxy.StockCountJournalManager(this._commerceContext, callerContext);
                        break;
                    case Commerce.Proxy.IStoreOperationsManagerName:
                        dataManager = new Commerce.Proxy.StoreOperationsManager(this._commerceContext, callerContext);
                        break;
                    case Commerce.Proxy.IOrgUnitManagerName:
                        dataManager = new Commerce.Proxy.OrgUnitManager(this._commerceContext, callerContext);
                        break;
                    case Commerce.Proxy.ICategoryManagerName:
                        dataManager = new Commerce.Proxy.CategoryManager(this._commerceContext, callerContext);
                        break;
                    default:
                        throw entityManagerInterface + " is not supported.";
                }
                return dataManager;
            };
            ManagerFactory.prototype.createDataServiceFactory = function () {
                var onlineConfigurationName = "online";
                var offlineConfigurationName = "offline";
                var dataServiceRequestFactory;
                dataServiceRequestFactory = new Commerce.Proxy.RetailServerRequestFactory(this._odataEndpoint, this._operatingUnitNumber, this._authToken);
                dataServiceRequestFactory.locale = this._locale;
                return dataServiceRequestFactory;
            };
            return ManagerFactory;
        }());
        Proxy.ManagerFactory = ManagerFactory;
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        "use strict";
        var StoreOperationsManager = (function () {
            function StoreOperationsManager(commerceContext, callerContext) {
                this._commerceContext = null;
                this._commerceContext = commerceContext;
                this._callerContext = callerContext;
            }
            StoreOperationsManager.prototype.roundAmountByTenderTypeAsync = function (amount, tenderTypeId) {
                var request = this._commerceContext.storeOperations().roundAmountByTenderType(amount, tenderTypeId);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getReceiptMasksAsync = function (receiptTransactionType, queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getReceiptMasks(receiptTransactionType);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.startSessionAsync = function (transactionId) {
                var request = this._commerceContext.storeOperations().startSession(transactionId);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.endSessionAsync = function (transactionId) {
                var request = this._commerceContext.storeOperations().endSession(transactionId);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.activateDeviceAsync = function (deviceNumber, terminalId, deviceId, forceActivate, deviceType) {
                var request = this._commerceContext.storeOperations().activateDevice(deviceNumber, terminalId, deviceId, forceActivate, deviceType);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.massActivateDeviceAsync = function (deviceNumber, terminalId, deviceId, deviceType) {
                var request = this._commerceContext.storeOperations().massActivateDevice(deviceNumber, terminalId, deviceId, deviceType);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.deactivateDeviceAsync = function (transactionId) {
                var request = this._commerceContext.storeOperations().deactivateDevice(transactionId);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.createHardwareStationTokenAsync = function () {
                var request = this._commerceContext.storeOperations().createHardwareStationToken();
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.validateHardwareStationTokenAsync = function (deviceNumber, hardwareStationToken) {
                var request = this._commerceContext.storeOperations().validateHardwareStationToken(deviceNumber, hardwareStationToken);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getBarcodeByIdAsync = function (barcodeId) {
                var request = this._commerceContext.storeOperations().getBarcodeById(barcodeId);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getButtonGridByIdAsync = function (buttonGridId) {
                var request = this._commerceContext.storeOperations().getButtonGridById(buttonGridId);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getButtonGridsByIdsAsync = function (getButtonGridsByIdsCriteria, queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getButtonGridsByIds(getButtonGridsByIdsCriteria);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getCardTypesAsync = function (queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getCardTypes();
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getSupportedPaymentCardTypesAsync = function (queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getSupportedPaymentCardTypes();
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getCitiesAsync = function (countryRegionId, stateProvinceId, countyId, queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getCities(countryRegionId, stateProvinceId, countyId);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getCountryRegionsByLanguageIdAsync = function (languageId, queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getCountryRegionsByLanguageId(languageId);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getCountiesAsync = function (countryRegionId, stateProvinceId, queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getCounties(countryRegionId, stateProvinceId);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getCreditMemoByIdAsync = function (creditMemoId) {
                var request = this._commerceContext.storeOperations().getCreditMemoById(creditMemoId);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getDownloadIntervalAsync = function (dataStoreName) {
                var request = this._commerceContext.storeOperations().getDownloadInterval(dataStoreName);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getTerminalDataStoreNameAsync = function (terminalId) {
                var request = this._commerceContext.storeOperations().getTerminalDataStoreName(terminalId);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getDownloadLinkAsync = function (dataStoreName, downloadSessionId) {
                var request = this._commerceContext.storeOperations().getDownloadLink(dataStoreName, downloadSessionId);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getDownloadSessionsAsync = function (dataStoreName, queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getDownloadSessions(dataStoreName);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getInitialDownloadSessionsAsync = function (dataStoreName, queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getInitialDownloadSessions(dataStoreName);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getUploadJobDefinitionsAsync = function (dataStoreName, queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getUploadJobDefinitions(dataStoreName);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getUploadIntervalAsync = function (dataStoreName) {
                var request = this._commerceContext.storeOperations().getUploadInterval(dataStoreName);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.postOfflineTransactionsAsync = function (offlineTransactionForMPOS) {
                var request = this._commerceContext.storeOperations().postOfflineTransactions(offlineTransactionForMPOS);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getRetailTrialPlanOfferAsync = function () {
                var request = this._commerceContext.storeOperations().getRetailTrialPlanOffer();
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getLatestNumberSequenceAsync = function (queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getLatestNumberSequence();
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.calculateTotalCurrencyAmountAsync = function (currenciesAmount) {
                var request = this._commerceContext.storeOperations().calculateTotalCurrencyAmount(currenciesAmount);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getDiscountCodeAsync = function (discountCode) {
                var request = this._commerceContext.storeOperations().getDiscountCode(discountCode);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getDiscountCodesByOfferIdAsync = function (offerId, queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getDiscountCodesByOfferId(offerId);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getDiscountCodesByKeywordAsync = function (keyword, activeDate, queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getDiscountCodesByKeyword(keyword, activeDate);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getDistrictsAsync = function (countryRegionId, stateProvinceId, countyId, cityName, queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getDistricts(countryRegionId, stateProvinceId, countyId, cityName);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getHardwareStationProfilesAsync = function (queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getHardwareStationProfiles();
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getHardwareProfileByIdAsync = function (hardwareProfileId) {
                var request = this._commerceContext.storeOperations().getHardwareProfileById(hardwareProfileId);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getLocalizedStringsAsync = function (languageId, textId, queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getLocalizedStrings(languageId, textId);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getOperationPermissionByIdAsync = function (operationId) {
                var request = this._commerceContext.storeOperations().getOperationPermissionById(operationId);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getReasonCodesByIdAsync = function (reasonCodeGroupId, queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getReasonCodesById(reasonCodeGroupId);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.searchReportDataSetAsync = function (reportId, parameters) {
                var request = this._commerceContext.storeOperations().searchReportDataSet(reportId, parameters);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getReportDataSetByIdAsync = function (reportId) {
                var request = this._commerceContext.storeOperations().getReportDataSetById(reportId);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getIncomeExpenseAccountsAsync = function (incomeExpenseAccountType, queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getIncomeExpenseAccounts(incomeExpenseAccountType);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getStateProvincesAsync = function (countryRegionId, queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getStateProvinces(countryRegionId);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getZipCodesAsync = function (countryRegionId, stateProvinceId, countyId, cityName, district, queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getZipCodes(countryRegionId, stateProvinceId, countyId, cityName, district);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getAddressFromZipCodeAsync = function (countryRegionId, zipPostalCode, queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getAddressFromZipCode(countryRegionId, zipPostalCode);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.disassembleKitTransactionsAsync = function (kitTransaction) {
                var request = this._commerceContext.storeOperations().disassembleKitTransactions(kitTransaction);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.issueLoyaltyCardAsync = function (loyaltyCard) {
                var request = this._commerceContext.storeOperations().issueLoyaltyCard(loyaltyCard);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getLoyaltyCardAsync = function (cardNumber) {
                var request = this._commerceContext.storeOperations().getLoyaltyCard(cardNumber);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getCustomerLoyaltyCardsAsync = function (accountNumber, queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getCustomerLoyaltyCards(accountNumber);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getLoyaltyCardTransactionsAsync = function (cardNumber, rewardPointId, queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getLoyaltyCardTransactions(cardNumber, rewardPointId);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.searchJournalTransactionsAsync = function (searchCriteria, queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.searchJournalTransactions(searchCriteria);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getGiftCardAsync = function (giftCardId) {
                var request = this._commerceContext.storeOperations().getGiftCard(giftCardId);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getNonSalesTransactionsAsync = function (shiftId, shiftTerminalId, nonSalesTenderTypeValue, queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getNonSalesTransactions(shiftId, shiftTerminalId, nonSalesTenderTypeValue);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.createNonSalesTransactionAsync = function (nonSalesTransaction) {
                var request = this._commerceContext.storeOperations().createNonSalesTransaction(nonSalesTransaction);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.createDropAndDeclareTransactionAsync = function (dropAndDeclareTransaction) {
                var request = this._commerceContext.storeOperations().createDropAndDeclareTransaction(dropAndDeclareTransaction);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getTaxOverridesAsync = function (overrideBy, queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getTaxOverrides(overrideBy);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getCustomerBalanceAsync = function (accountNumber, invoiceAccountNumber) {
                var request = this._commerceContext.storeOperations().getCustomerBalance(accountNumber, invoiceAccountNumber);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.initiateLinkToExistingCustomerAsync = function (email, emailTemplateId, emailProperties) {
                var request = this._commerceContext.storeOperations().initiateLinkToExistingCustomer(email, emailTemplateId, emailProperties);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.finalizeLinkToExistingCustomerAsync = function (email) {
                var request = this._commerceContext.storeOperations().finalizeLinkToExistingCustomer(email);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.unlinkFromExistingCustomerAsync = function () {
                var request = this._commerceContext.storeOperations().unlinkFromExistingCustomer();
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getOfflineSyncStatusAsync = function (queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getOfflineSyncStatus();
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getOfflinePendingTransactionCountAsync = function () {
                var request = this._commerceContext.storeOperations().getOfflinePendingTransactionCount();
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.updateDownloadSessionAsync = function (downloadSession) {
                var request = this._commerceContext.storeOperations().updateDownloadSession(downloadSession);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.updateApplicationVersionAsync = function (appVersion) {
                var request = this._commerceContext.storeOperations().updateApplicationVersion(appVersion);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getStorageAccessTokenForUploadAsync = function () {
                var request = this._commerceContext.storeOperations().getStorageAccessTokenForUpload();
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getBusinessProcessModelLibrariesAsync = function (queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getBusinessProcessModelLibraries();
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getBusinessProcessModelLibraryAsync = function (businessProcessModelFrameworkLineId, hierarchyDepth) {
                var request = this._commerceContext.storeOperations().getBusinessProcessModelLibrary(businessProcessModelFrameworkLineId, hierarchyDepth);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.searchTaskGuidesByTitleAsync = function (businessProcessModelFrameworkLineId, taskGuideSearchText, queryTypeValue, queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.searchTaskGuidesByTitle(businessProcessModelFrameworkLineId, taskGuideSearchText, queryTypeValue);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.generateBusinessProcessModelPackageAsync = function (taskRecording) {
                var request = this._commerceContext.storeOperations().generateBusinessProcessModelPackage(taskRecording);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.downloadRecordingAsync = function (businessProcessModelLineId) {
                var request = this._commerceContext.storeOperations().downloadRecording(businessProcessModelLineId);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.loadRecordingFromFileAsync = function (recordingUrl) {
                var request = this._commerceContext.storeOperations().loadRecordingFromFile(recordingUrl);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.generateRecordingFileAsync = function (taskRecording) {
                var request = this._commerceContext.storeOperations().generateRecordingFile(taskRecording);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.generateTrainingDocumentAsync = function (taskRecording) {
                var request = this._commerceContext.storeOperations().generateTrainingDocument(taskRecording);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.generateRecordingBundleAsync = function (taskRecording) {
                var request = this._commerceContext.storeOperations().generateRecordingBundle(taskRecording);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.uploadRecordingAsync = function (taskRecording, businessProcessModelLineId) {
                var request = this._commerceContext.storeOperations().uploadRecording(taskRecording, businessProcessModelLineId);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getAttributeDefinitionsAsync = function (attributeDefinitionCriteria, queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getAttributeDefinitions(attributeDefinitionCriteria);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.saveFiscalTransactionAsync = function (fiscalTransaction) {
                var request = this._commerceContext.storeOperations().saveFiscalTransaction(fiscalTransaction);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.validatePrintReceiptCopyAllowedAsync = function (salesOrderToPrint) {
                var request = this._commerceContext.storeOperations().validatePrintReceiptCopyAllowed(salesOrderToPrint);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.registerAuditEventAsync = function (auditEvent) {
                var request = this._commerceContext.storeOperations().registerAuditEvent(auditEvent);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getInventoryAvailableToPromiseAsync = function (productId, itemId, inventLocationId, queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getInventoryAvailableToPromise(productId, itemId, inventLocationId);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getSalesOrdersWithNoFiscalTransactionsAsync = function (storeNumber, terminalId, queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getSalesOrdersWithNoFiscalTransactions(storeNumber, terminalId);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getNotificationsAsync = function (subscribedOperations, queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getNotifications(subscribedOperations);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.acknowledgeNotificationsAsync = function (lastPullDateTime) {
                var request = this._commerceContext.storeOperations().acknowledgeNotifications(lastPullDateTime);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getButtonGridsAsync = function (queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getButtonGrids();
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getButtonGridsByScreenSizeAsync = function (height, width, queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getButtonGridsByScreenSize(height, width);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getCashDeclarationsAsync = function (queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getCashDeclarations();
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getCountryRegionsAsync = function (queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getCountryRegions();
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getCustomerGroupsAsync = function (queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getCustomerGroups();
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getDeliveryOptionsAsync = function (queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getDeliveryOptions();
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getEnvironmentConfigurationAsync = function () {
                var request = this._commerceContext.storeOperations().getEnvironmentConfiguration();
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getExtensionProfileAsync = function () {
                var request = this._commerceContext.storeOperations().getExtensionProfile();
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getDeviceConfigurationAsync = function () {
                var request = this._commerceContext.storeOperations().getDeviceConfiguration();
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getLanguagesAsync = function (queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getLanguages();
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getAffiliationsAsync = function (queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getAffiliations();
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getOperationPermissionsAsync = function (queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getOperationPermissions();
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getReasonCodesAsync = function (queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getReasonCodes();
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getReturnOrderReasonCodesAsync = function (queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getReturnOrderReasonCodes();
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getSalesTaxGroupsAsync = function (queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getSalesTaxGroups();
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getTenderTypesAsync = function (queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getTenderTypes();
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getUnitsOfMeasureAsync = function (queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getUnitsOfMeasure();
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getDiscountCodesAsync = function (queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getDiscountCodes();
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getCurrenciesAsync = function (queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getCurrencies();
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getCurrenciesAmountAsync = function (currencyCode, amount, queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getCurrenciesAmount(currencyCode, amount);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getCommissionSalesGroupsAsync = function (queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getCommissionSalesGroups();
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getPaymentMerchantInformationAsync = function (hardwareProfileId) {
                var request = this._commerceContext.storeOperations().getPaymentMerchantInformation(hardwareProfileId);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getOnlineChannelPublishStatusAsync = function () {
                var request = this._commerceContext.storeOperations().getOnlineChannelPublishStatus();
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.setOnlineChannelPublishStatusAsync = function (publishingStatus, statusMessage) {
                var request = this._commerceContext.storeOperations().setOnlineChannelPublishStatus(publishingStatus, statusMessage);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getAvailableDevicesAsync = function (deviceType, queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getAvailableDevices(deviceType);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getImageBlobAsync = function (imageId) {
                var request = this._commerceContext.storeOperations().getImageBlob(imageId);
                return request.execute(this._callerContext);
            };
            StoreOperationsManager.prototype.getExtensibleEnumerationsAsync = function (queryResultSettings) {
                var query = this._commerceContext.storeOperations();
                query.resultSettings(queryResultSettings);
                var request = query.getExtensibleEnumerations();
                return request.execute(this._callerContext);
            };
            return StoreOperationsManager;
        }());
        Proxy.StoreOperationsManager = StoreOperationsManager;
        var CategoryManager = (function () {
            function CategoryManager(commerceContext, callerContext) {
                this._commerceContext = null;
                this._commerceContext = commerceContext;
                this._callerContext = callerContext;
            }
            CategoryManager.prototype.createAsync = function (entity) {
                var request = this._commerceContext.categories().create(entity);
                return request.execute(this._callerContext);
            };
            CategoryManager.prototype.readAsync = function (recordId) {
                var request = this._commerceContext.categories(recordId).read();
                return request.execute(this._callerContext);
            };
            CategoryManager.prototype.readAllAsync = function (queryResultSettings) {
                var request = this._commerceContext.categories().resultSettings(queryResultSettings).read();
                return request.execute(this._callerContext);
            };
            CategoryManager.prototype.updateAsync = function (entity) {
                var request = this._commerceContext.categories(entity.RecordId).update(entity);
                return request.execute(this._callerContext);
            };
            CategoryManager.prototype.deleteAsync = function (entity) {
                var request = this._commerceContext.categories(entity.RecordId).delete();
                return request.execute(this._callerContext);
            };
            CategoryManager.prototype.getCategoriesAsync = function (channelId, queryResultSettings) {
                var query = this._commerceContext.categories();
                query.resultSettings(queryResultSettings);
                var request = query.getCategories(channelId);
                return request.execute(this._callerContext);
            };
            CategoryManager.prototype.getAttributesAsync = function (categoryId, queryResultSettings) {
                var query = this._commerceContext.categories();
                query.resultSettings(queryResultSettings);
                var request = query.getAttributes(categoryId);
                return request.execute(this._callerContext);
            };
            CategoryManager.prototype.getChildrenAsync = function (channelId, categoryId, queryResultSettings) {
                var query = this._commerceContext.categories();
                query.resultSettings(queryResultSettings);
                var request = query.getChildren(channelId, categoryId);
                return request.execute(this._callerContext);
            };
            return CategoryManager;
        }());
        Proxy.CategoryManager = CategoryManager;
        var CartManager = (function () {
            function CartManager(commerceContext, callerContext) {
                this._commerceContext = null;
                this._commerceContext = commerceContext;
                this._callerContext = callerContext;
            }
            CartManager.prototype.createAsync = function (entity) {
                var request = this._commerceContext.carts().create(entity);
                return request.execute(this._callerContext);
            };
            CartManager.prototype.readAsync = function (id) {
                var request = this._commerceContext.carts(id).read();
                return request.execute(this._callerContext);
            };
            CartManager.prototype.readAllAsync = function (queryResultSettings) {
                var request = this._commerceContext.carts().resultSettings(queryResultSettings).read();
                return request.execute(this._callerContext);
            };
            CartManager.prototype.updateAsync = function (entity) {
                var request = this._commerceContext.carts(entity.Id).update(entity);
                return request.execute(this._callerContext);
            };
            CartManager.prototype.deleteAsync = function (entity) {
                var request = this._commerceContext.carts(entity.Id).delete();
                return request.execute(this._callerContext);
            };
            CartManager.prototype.checkoutAsync = function (id, receiptEmail, tokenizedPaymentCard, receiptNumberSequence, cartTenderLines, cartVersion) {
                var request = this._commerceContext.carts(id).checkout(receiptEmail, tokenizedPaymentCard, receiptNumberSequence, cartTenderLines, cartVersion);
                return request.execute(this._callerContext);
            };
            CartManager.prototype.getPaymentsHistoryAsync = function (id, queryResultSettings) {
                var query = this._commerceContext.carts(id);
                query.resultSettings(queryResultSettings);
                var request = query.getPaymentsHistory();
                return request.execute(this._callerContext);
            };
            CartManager.prototype.getLineDeliveryOptionsByChannelIdAsync = function (id, lineShippingAddresses, channelId, queryResultSettings) {
                var query = this._commerceContext.carts(id);
                query.resultSettings(queryResultSettings);
                var request = query.getLineDeliveryOptionsByChannelId(lineShippingAddresses, channelId);
                return request.execute(this._callerContext);
            };
            CartManager.prototype.getLineDeliveryOptionsAsync = function (id, lineShippingAddresses, queryResultSettings) {
                var query = this._commerceContext.carts(id);
                query.resultSettings(queryResultSettings);
                var request = query.getLineDeliveryOptions(lineShippingAddresses);
                return request.execute(this._callerContext);
            };
            CartManager.prototype.getDeliveryPreferencesAsync = function (id) {
                var request = this._commerceContext.carts(id).getDeliveryPreferences();
                return request.execute(this._callerContext);
            };
            CartManager.prototype.getDeliveryOptionsAsync = function (id, shippingAddress, queryResultSettings) {
                var query = this._commerceContext.carts(id);
                query.resultSettings(queryResultSettings);
                var request = query.getDeliveryOptions(shippingAddress);
                return request.execute(this._callerContext);
            };
            CartManager.prototype.updateLineDeliverySpecificationsAsync = function (id, lineDeliverySpecifications) {
                var request = this._commerceContext.carts(id).updateLineDeliverySpecifications(lineDeliverySpecifications);
                return request.execute(this._callerContext);
            };
            CartManager.prototype.updateDeliverySpecificationAsync = function (id, deliverySpecification) {
                var request = this._commerceContext.carts(id).updateDeliverySpecification(deliverySpecification);
                return request.execute(this._callerContext);
            };
            CartManager.prototype.voidAsync = function (id, reasonCodeLines) {
                var request = this._commerceContext.carts(id).void(reasonCodeLines);
                return request.execute(this._callerContext);
            };
            CartManager.prototype.addCartLinesAsync = function (id, cartLines, cartVersion) {
                var request = this._commerceContext.carts(id).addCartLines(cartLines, cartVersion);
                return request.execute(this._callerContext);
            };
            CartManager.prototype.updateCartLinesAsync = function (id, cartLines) {
                var request = this._commerceContext.carts(id).updateCartLines(cartLines);
                return request.execute(this._callerContext);
            };
            CartManager.prototype.voidCartLinesAsync = function (id, cartLines) {
                var request = this._commerceContext.carts(id).voidCartLines(cartLines);
                return request.execute(this._callerContext);
            };
            CartManager.prototype.removeCartLinesAsync = function (id, cartLineIds) {
                var request = this._commerceContext.carts(id).removeCartLines(cartLineIds);
                return request.execute(this._callerContext);
            };
            CartManager.prototype.addTenderLineAsync = function (id, cartTenderLine, cartVersion) {
                var request = this._commerceContext.carts(id).addTenderLine(cartTenderLine, cartVersion);
                return request.execute(this._callerContext);
            };
            CartManager.prototype.addPreprocessedTenderLineAsync = function (id, preprocessedTenderLine, cartVersion) {
                var request = this._commerceContext.carts(id).addPreprocessedTenderLine(preprocessedTenderLine, cartVersion);
                return request.execute(this._callerContext);
            };
            CartManager.prototype.validateTenderLineForAddAsync = function (id, tenderLine) {
                var request = this._commerceContext.carts(id).validateTenderLineForAdd(tenderLine);
                return request.execute(this._callerContext);
            };
            CartManager.prototype.updateTenderLineSignatureAsync = function (id, tenderLineId, signatureData) {
                var request = this._commerceContext.carts(id).updateTenderLineSignature(tenderLineId, signatureData);
                return request.execute(this._callerContext);
            };
            CartManager.prototype.copyAsync = function (id, targetCartType) {
                var request = this._commerceContext.carts(id).copy(targetCartType);
                return request.execute(this._callerContext);
            };
            CartManager.prototype.voidTenderLineAsync = function (id, tenderLineId, reasonCodeLines, isPreprocessed, forceVoid) {
                var request = this._commerceContext.carts(id).voidTenderLine(tenderLineId, reasonCodeLines, isPreprocessed, forceVoid);
                return request.execute(this._callerContext);
            };
            CartManager.prototype.issueGiftCardAsync = function (id, giftCardId, amount, currencyCode, lineDescription) {
                var request = this._commerceContext.carts(id).issueGiftCard(giftCardId, amount, currencyCode, lineDescription);
                return request.execute(this._callerContext);
            };
            CartManager.prototype.refillGiftCardAsync = function (id, giftCardId, amount, currencyCode, lineDescription) {
                var request = this._commerceContext.carts(id).refillGiftCard(giftCardId, amount, currencyCode, lineDescription);
                return request.execute(this._callerContext);
            };
            CartManager.prototype.suspendAsync = function (id) {
                var request = this._commerceContext.carts(id).suspend();
                return request.execute(this._callerContext);
            };
            CartManager.prototype.resumeAsync = function (id) {
                var request = this._commerceContext.carts(id).resume();
                return request.execute(this._callerContext);
            };
            CartManager.prototype.removeDiscountCodesAsync = function (id, discountCodes) {
                var request = this._commerceContext.carts(id).removeDiscountCodes(discountCodes);
                return request.execute(this._callerContext);
            };
            CartManager.prototype.getSuspendedAsync = function (queryResultSettings) {
                var query = this._commerceContext.carts();
                query.resultSettings(queryResultSettings);
                var request = query.getSuspended();
                return request.execute(this._callerContext);
            };
            CartManager.prototype.searchAsync = function (cartSearchCriteria, queryResultSettings) {
                var query = this._commerceContext.carts();
                query.resultSettings(queryResultSettings);
                var request = query.search(cartSearchCriteria);
                return request.execute(this._callerContext);
            };
            CartManager.prototype.overrideCartLinePriceAsync = function (id, cartLineId, price) {
                var request = this._commerceContext.carts(id).overrideCartLinePrice(cartLineId, price);
                return request.execute(this._callerContext);
            };
            CartManager.prototype.getCardPaymentAcceptPointAsync = function (id, cardPaymentAcceptSettings) {
                var request = this._commerceContext.carts(id).getCardPaymentAcceptPoint(cardPaymentAcceptSettings);
                return request.execute(this._callerContext);
            };
            CartManager.prototype.retrieveCardPaymentAcceptResultAsync = function (resultAccessCode) {
                var request = this._commerceContext.carts().retrieveCardPaymentAcceptResult(resultAccessCode);
                return request.execute(this._callerContext);
            };
            CartManager.prototype.recallOrderAsync = function (transactionId, salesId) {
                var request = this._commerceContext.carts().recallOrder(transactionId, salesId);
                return request.execute(this._callerContext);
            };
            CartManager.prototype.recallQuoteAsync = function (transactionId, quoteId) {
                var request = this._commerceContext.carts().recallQuote(transactionId, quoteId);
                return request.execute(this._callerContext);
            };
            CartManager.prototype.recalculateOrderAsync = function (id) {
                var request = this._commerceContext.carts(id).recalculateOrder();
                return request.execute(this._callerContext);
            };
            CartManager.prototype.getPromotionsAsync = function (id) {
                var request = this._commerceContext.carts(id).getPromotions();
                return request.execute(this._callerContext);
            };
            CartManager.prototype.recallSalesInvoiceAsync = function (transactionId, invoiceId) {
                var request = this._commerceContext.carts().recallSalesInvoice(transactionId, invoiceId);
                return request.execute(this._callerContext);
            };
            CartManager.prototype.addOrderInvoiceAsync = function (id, invoiceId, lineDescription) {
                var request = this._commerceContext.carts(id).addOrderInvoice(invoiceId, lineDescription);
                return request.execute(this._callerContext);
            };
            CartManager.prototype.updateCommissionSalesGroupAsync = function (transactionId, cartLineId, commissionSalesGroup, isUserInitiated) {
                var request = this._commerceContext.carts().updateCommissionSalesGroup(transactionId, cartLineId, commissionSalesGroup, isUserInitiated);
                return request.execute(this._callerContext);
            };
            CartManager.prototype.addCouponsAsync = function (id, couponCodes, isLegacyDiscountCode) {
                var request = this._commerceContext.carts(id).addCoupons(couponCodes, isLegacyDiscountCode);
                return request.execute(this._callerContext);
            };
            CartManager.prototype.removeCouponsAsync = function (id, couponCodes) {
                var request = this._commerceContext.carts(id).removeCoupons(couponCodes);
                return request.execute(this._callerContext);
            };
            CartManager.prototype.addDiscountCodeAsync = function (id, discountCode) {
                var request = this._commerceContext.carts(id).addDiscountCode(discountCode);
                return request.execute(this._callerContext);
            };
            return CartManager;
        }());
        Proxy.CartManager = CartManager;
        var CustomerManager = (function () {
            function CustomerManager(commerceContext, callerContext) {
                this._commerceContext = null;
                this._commerceContext = commerceContext;
                this._callerContext = callerContext;
            }
            CustomerManager.prototype.createAsync = function (entity) {
                var request = this._commerceContext.customers().create(entity);
                return request.execute(this._callerContext);
            };
            CustomerManager.prototype.readAsync = function (accountNumber) {
                var request = this._commerceContext.customers(accountNumber).read();
                return request.execute(this._callerContext);
            };
            CustomerManager.prototype.readAllAsync = function (queryResultSettings) {
                var request = this._commerceContext.customers().resultSettings(queryResultSettings).read();
                return request.execute(this._callerContext);
            };
            CustomerManager.prototype.updateAsync = function (entity) {
                var request = this._commerceContext.customers(entity.AccountNumber).update(entity);
                return request.execute(this._callerContext);
            };
            CustomerManager.prototype.deleteAsync = function (entity) {
                var request = this._commerceContext.customers(entity.AccountNumber).delete();
                return request.execute(this._callerContext);
            };
            CustomerManager.prototype.searchAsync = function (customerSearchCriteria, queryResultSettings) {
                var query = this._commerceContext.customers();
                query.resultSettings(queryResultSettings);
                var request = query.search(customerSearchCriteria);
                return request.execute(this._callerContext);
            };
            CustomerManager.prototype.getByAccountNumbersAsync = function (accountNumbers, searchLocationValue, queryResultSettings) {
                var query = this._commerceContext.customers();
                query.resultSettings(queryResultSettings);
                var request = query.getByAccountNumbers(accountNumbers, searchLocationValue);
                return request.execute(this._callerContext);
            };
            CustomerManager.prototype.getOrderHistoryAsync = function (accountNumber, queryResultSettings) {
                var query = this._commerceContext.customers(accountNumber);
                query.resultSettings(queryResultSettings);
                var request = query.getOrderHistory();
                return request.execute(this._callerContext);
            };
            CustomerManager.prototype.getPurchaseHistoryAsync = function (accountNumber, queryResultSettings) {
                var query = this._commerceContext.customers(accountNumber);
                query.resultSettings(queryResultSettings);
                var request = query.getPurchaseHistory();
                return request.execute(this._callerContext);
            };
            return CustomerManager;
        }());
        Proxy.CustomerManager = CustomerManager;
        var EmployeeManager = (function () {
            function EmployeeManager(commerceContext, callerContext) {
                this._commerceContext = null;
                this._commerceContext = commerceContext;
                this._callerContext = callerContext;
            }
            EmployeeManager.prototype.createAsync = function (entity) {
                var request = this._commerceContext.employees().create(entity);
                return request.execute(this._callerContext);
            };
            EmployeeManager.prototype.readAsync = function (staffId) {
                var request = this._commerceContext.employees(staffId).read();
                return request.execute(this._callerContext);
            };
            EmployeeManager.prototype.readAllAsync = function (queryResultSettings) {
                var request = this._commerceContext.employees().resultSettings(queryResultSettings).read();
                return request.execute(this._callerContext);
            };
            EmployeeManager.prototype.updateAsync = function (entity) {
                var request = this._commerceContext.employees(entity.StaffId).update(entity);
                return request.execute(this._callerContext);
            };
            EmployeeManager.prototype.deleteAsync = function (entity) {
                var request = this._commerceContext.employees(entity.StaffId).delete();
                return request.execute(this._callerContext);
            };
            EmployeeManager.prototype.getActivitiesAsync = function (employeeActivitySearchCriteria, queryResultSettings) {
                var query = this._commerceContext.employees();
                query.resultSettings(queryResultSettings);
                var request = query.getActivities(employeeActivitySearchCriteria);
                return request.execute(this._callerContext);
            };
            EmployeeManager.prototype.getManagerActivityViewAsync = function (employeeActivitySearchCriteria, queryResultSettings) {
                var query = this._commerceContext.employees();
                query.resultSettings(queryResultSettings);
                var request = query.getManagerActivityView(employeeActivitySearchCriteria);
                return request.execute(this._callerContext);
            };
            EmployeeManager.prototype.registerActivityAsync = function (staffId, employeeActivityType) {
                var request = this._commerceContext.employees(staffId).registerActivity(employeeActivityType);
                return request.execute(this._callerContext);
            };
            EmployeeManager.prototype.getAccessibleOrgUnitsAsync = function (queryResultSettings) {
                var query = this._commerceContext.employees();
                query.resultSettings(queryResultSettings);
                var request = query.getAccessibleOrgUnits();
                return request.execute(this._callerContext);
            };
            EmployeeManager.prototype.getLatestActivityAsync = function () {
                var request = this._commerceContext.employees().getLatestActivity();
                return request.execute(this._callerContext);
            };
            EmployeeManager.prototype.getCurrentEmployeeAsync = function () {
                var request = this._commerceContext.employees().getCurrentEmployee();
                return request.execute(this._callerContext);
            };
            return EmployeeManager;
        }());
        Proxy.EmployeeManager = EmployeeManager;
        var SalesOrderManager = (function () {
            function SalesOrderManager(commerceContext, callerContext) {
                this._commerceContext = null;
                this._commerceContext = commerceContext;
                this._callerContext = callerContext;
            }
            SalesOrderManager.prototype.createAsync = function (entity) {
                var request = this._commerceContext.salesOrders().create(entity);
                return request.execute(this._callerContext);
            };
            SalesOrderManager.prototype.readAsync = function (id) {
                var request = this._commerceContext.salesOrders(id).read();
                return request.execute(this._callerContext);
            };
            SalesOrderManager.prototype.readAllAsync = function (queryResultSettings) {
                var request = this._commerceContext.salesOrders().resultSettings(queryResultSettings).read();
                return request.execute(this._callerContext);
            };
            SalesOrderManager.prototype.updateAsync = function (entity) {
                var request = this._commerceContext.salesOrders(entity.Id).update(entity);
                return request.execute(this._callerContext);
            };
            SalesOrderManager.prototype.deleteAsync = function (entity) {
                var request = this._commerceContext.salesOrders(entity.Id).delete();
                return request.execute(this._callerContext);
            };
            SalesOrderManager.prototype.searchSalesTransactionsByReceiptIdAsync = function (receiptId, queryResultSettings) {
                var query = this._commerceContext.salesOrders();
                query.resultSettings(queryResultSettings);
                var request = query.searchSalesTransactionsByReceiptId(receiptId);
                return request.execute(this._callerContext);
            };
            SalesOrderManager.prototype.searchAsync = function (salesOrderSearchCriteria, queryResultSettings) {
                var query = this._commerceContext.salesOrders();
                query.resultSettings(queryResultSettings);
                var request = query.search(salesOrderSearchCriteria);
                return request.execute(this._callerContext);
            };
            SalesOrderManager.prototype.searchOrdersAsync = function (orderSearchCriteria, queryResultSettings) {
                var query = this._commerceContext.salesOrders();
                query.resultSettings(queryResultSettings);
                var request = query.searchOrders(orderSearchCriteria);
                return request.execute(this._callerContext);
            };
            SalesOrderManager.prototype.getReceiptsAsync = function (id, receiptRetrievalCriteria, queryResultSettings) {
                var query = this._commerceContext.salesOrders(id);
                query.resultSettings(queryResultSettings);
                var request = query.getReceipts(receiptRetrievalCriteria);
                return request.execute(this._callerContext);
            };
            SalesOrderManager.prototype.getGiftReceiptsAsync = function (id, salesLineNumbers, receiptRetrievalCriteria, queryResultSettings) {
                var query = this._commerceContext.salesOrders(id);
                query.resultSettings(queryResultSettings);
                var request = query.getGiftReceipts(salesLineNumbers, receiptRetrievalCriteria);
                return request.execute(this._callerContext);
            };
            SalesOrderManager.prototype.getByReceiptIdAsync = function (receiptId, orderStoreNumber, orderTerminalId, queryResultSettings) {
                var query = this._commerceContext.salesOrders();
                query.resultSettings(queryResultSettings);
                var request = query.getByReceiptId(receiptId, orderStoreNumber, orderTerminalId);
                return request.execute(this._callerContext);
            };
            SalesOrderManager.prototype.getSalesOrderDetailsByTransactionIdAsync = function (transactionId, searchLocationValue) {
                var request = this._commerceContext.salesOrders().getSalesOrderDetailsByTransactionId(transactionId, searchLocationValue);
                return request.execute(this._callerContext);
            };
            SalesOrderManager.prototype.getSalesOrderDetailsBySalesIdAsync = function (salesId) {
                var request = this._commerceContext.salesOrders().getSalesOrderDetailsBySalesId(salesId);
                return request.execute(this._callerContext);
            };
            SalesOrderManager.prototype.getSalesOrderDetailsByQuotationIdAsync = function (quotationId) {
                var request = this._commerceContext.salesOrders().getSalesOrderDetailsByQuotationId(quotationId);
                return request.execute(this._callerContext);
            };
            SalesOrderManager.prototype.shipFulfillmentLinesAsync = function (shipFulfillmentLines) {
                var request = this._commerceContext.salesOrders().shipFulfillmentLines(shipFulfillmentLines);
                return request.execute(this._callerContext);
            };
            SalesOrderManager.prototype.acceptFulfillmentLinesAsync = function (fulfillmentLineParameter) {
                var request = this._commerceContext.salesOrders().acceptFulfillmentLines(fulfillmentLineParameter);
                return request.execute(this._callerContext);
            };
            SalesOrderManager.prototype.pickFulfillmentLinesAsync = function (fulfillmentLineParameter) {
                var request = this._commerceContext.salesOrders().pickFulfillmentLines(fulfillmentLineParameter);
                return request.execute(this._callerContext);
            };
            SalesOrderManager.prototype.packFulfillmentLinesAsync = function (fulfillmentLineParameter) {
                var request = this._commerceContext.salesOrders().packFulfillmentLines(fulfillmentLineParameter);
                return request.execute(this._callerContext);
            };
            SalesOrderManager.prototype.markFulfillmentLinesAsPackedAsync = function (fulfillmentLineParameter) {
                var request = this._commerceContext.salesOrders().markFulfillmentLinesAsPacked(fulfillmentLineParameter);
                return request.execute(this._callerContext);
            };
            SalesOrderManager.prototype.markAsPickedAsync = function (fulfillmentLineParameter) {
                var request = this._commerceContext.salesOrders().markAsPicked(fulfillmentLineParameter);
                return request.execute(this._callerContext);
            };
            SalesOrderManager.prototype.getFulfillmentPickingListsAsync = function (pickingListFulfillmentLine, hardwareProfileId, queryResultSettings) {
                var query = this._commerceContext.salesOrders();
                query.resultSettings(queryResultSettings);
                var request = query.getFulfillmentPickingLists(pickingListFulfillmentLine, hardwareProfileId);
                return request.execute(this._callerContext);
            };
            SalesOrderManager.prototype.getFulfillmentLinesAsync = function (fulfillmentLineSearchCriteria, queryResultSettings) {
                var query = this._commerceContext.salesOrders();
                query.resultSettings(queryResultSettings);
                var request = query.getFulfillmentLines(fulfillmentLineSearchCriteria);
                return request.execute(this._callerContext);
            };
            SalesOrderManager.prototype.getFulfillmentPackingSlipsAsync = function (packFulfillmentLines, hardwareProfileId, queryResultSettings) {
                var query = this._commerceContext.salesOrders();
                query.resultSettings(queryResultSettings);
                var request = query.getFulfillmentPackingSlips(packFulfillmentLines, hardwareProfileId);
                return request.execute(this._callerContext);
            };
            SalesOrderManager.prototype.getFulfillmentPackingSlipsByIdAsync = function (salesId, packingSlipId, hardwareProfileId, queryResultSettings) {
                var query = this._commerceContext.salesOrders();
                query.resultSettings(queryResultSettings);
                var request = query.getFulfillmentPackingSlipsById(salesId, packingSlipId, hardwareProfileId);
                return request.execute(this._callerContext);
            };
            SalesOrderManager.prototype.rejectFulfillmentLinesAsync = function (rejectFulfillmentLines) {
                var request = this._commerceContext.salesOrders().rejectFulfillmentLines(rejectFulfillmentLines);
                return request.execute(this._callerContext);
            };
            SalesOrderManager.prototype.getInvoicesBySalesIdAsync = function (salesId, queryResultSettings) {
                var query = this._commerceContext.salesOrders();
                query.resultSettings(queryResultSettings);
                var request = query.getInvoicesBySalesId(salesId);
                return request.execute(this._callerContext);
            };
            SalesOrderManager.prototype.getOrderInvoicesAsync = function (customerId, queryResultSettings) {
                var query = this._commerceContext.salesOrders();
                query.resultSettings(queryResultSettings);
                var request = query.getOrderInvoices(customerId);
                return request.execute(this._callerContext);
            };
            SalesOrderManager.prototype.createPickingListAsync = function (salesId) {
                var request = this._commerceContext.salesOrders().createPickingList(salesId);
                return request.execute(this._callerContext);
            };
            SalesOrderManager.prototype.createPickingListForItemsAsync = function (salesId, pickAndPackSalesLineParameters) {
                var request = this._commerceContext.salesOrders().createPickingListForItems(salesId, pickAndPackSalesLineParameters);
                return request.execute(this._callerContext);
            };
            SalesOrderManager.prototype.getPickingListsAsync = function (id, queryResultSettings) {
                var query = this._commerceContext.salesOrders(id);
                query.resultSettings(queryResultSettings);
                var request = query.getPickingLists();
                return request.execute(this._callerContext);
            };
            SalesOrderManager.prototype.createPackingSlipAsync = function (salesId) {
                var request = this._commerceContext.salesOrders().createPackingSlip(salesId);
                return request.execute(this._callerContext);
            };
            SalesOrderManager.prototype.getPackingSlipsDataAsync = function (salesId, queryResultSettings) {
                var query = this._commerceContext.salesOrders();
                query.resultSettings(queryResultSettings);
                var request = query.getPackingSlipsData(salesId);
                return request.execute(this._callerContext);
            };
            return SalesOrderManager;
        }());
        Proxy.SalesOrderManager = SalesOrderManager;
        var ShiftManager = (function () {
            function ShiftManager(commerceContext, callerContext) {
                this._commerceContext = null;
                this._commerceContext = commerceContext;
                this._callerContext = callerContext;
            }
            ShiftManager.prototype.createAsync = function (entity) {
                var request = this._commerceContext.shifts().create(entity);
                return request.execute(this._callerContext);
            };
            ShiftManager.prototype.readAsync = function (shiftId, terminalId) {
                var request = this._commerceContext.shifts(shiftId, terminalId).read();
                return request.execute(this._callerContext);
            };
            ShiftManager.prototype.readAllAsync = function (queryResultSettings) {
                var request = this._commerceContext.shifts().resultSettings(queryResultSettings).read();
                return request.execute(this._callerContext);
            };
            ShiftManager.prototype.updateAsync = function (entity) {
                var request = this._commerceContext.shifts(entity.ShiftId, entity.TerminalId).update(entity);
                return request.execute(this._callerContext);
            };
            ShiftManager.prototype.deleteAsync = function (entity) {
                var request = this._commerceContext.shifts(entity.ShiftId, entity.TerminalId).delete();
                return request.execute(this._callerContext);
            };
            ShiftManager.prototype.upsertShiftsAsync = function (shifts) {
                var request = this._commerceContext.shifts().upsertShifts(shifts);
                return request.execute(this._callerContext);
            };
            ShiftManager.prototype.deleteShiftsAsync = function () {
                var request = this._commerceContext.shifts().deleteShifts();
                return request.execute(this._callerContext);
            };
            ShiftManager.prototype.openAsync = function (shiftId, cashDrawer, isShared) {
                var request = this._commerceContext.shifts().open(shiftId, cashDrawer, isShared);
                return request.execute(this._callerContext);
            };
            ShiftManager.prototype.closeAsync = function (shiftId, terminalId, transactionId, forceClose) {
                var request = this._commerceContext.shifts(shiftId, terminalId).close(transactionId, forceClose);
                return request.execute(this._callerContext);
            };
            ShiftManager.prototype.blindCloseAsync = function (shiftId, terminalId, transactionId, forceClose) {
                var request = this._commerceContext.shifts(shiftId, terminalId).blindClose(transactionId, forceClose);
                return request.execute(this._callerContext);
            };
            ShiftManager.prototype.resumeAsync = function (shiftId, terminalId, cashDrawer) {
                var request = this._commerceContext.shifts(shiftId, terminalId).resume(cashDrawer);
                return request.execute(this._callerContext);
            };
            ShiftManager.prototype.useAsync = function (shiftId, terminalId) {
                var request = this._commerceContext.shifts(shiftId, terminalId).use();
                return request.execute(this._callerContext);
            };
            ShiftManager.prototype.suspendAsync = function (shiftId, terminalId, transactionId) {
                var request = this._commerceContext.shifts(shiftId, terminalId).suspend(transactionId);
                return request.execute(this._callerContext);
            };
            ShiftManager.prototype.getByStatusAsync = function (statusValue, queryResultSettings) {
                var query = this._commerceContext.shifts();
                query.resultSettings(queryResultSettings);
                var request = query.getByStatus(statusValue);
                return request.execute(this._callerContext);
            };
            ShiftManager.prototype.getByStatusFilterByUserRoleAsync = function (statusValue, filterByUserRole, queryResultSettings) {
                var query = this._commerceContext.shifts();
                query.resultSettings(queryResultSettings);
                var request = query.getByStatusFilterByUserRole(statusValue, filterByUserRole);
                return request.execute(this._callerContext);
            };
            ShiftManager.prototype.getXReportAsync = function (shiftId, terminalId, transactionId, hardwareProfileId) {
                var request = this._commerceContext.shifts(shiftId, terminalId).getXReport(transactionId, hardwareProfileId);
                return request.execute(this._callerContext);
            };
            ShiftManager.prototype.getZReportAsync = function (transactionId, hardwareProfileId) {
                var request = this._commerceContext.shifts().getZReport(transactionId, hardwareProfileId);
                return request.execute(this._callerContext);
            };
            return ShiftManager;
        }());
        Proxy.ShiftManager = ShiftManager;
        var StockCountJournalManager = (function () {
            function StockCountJournalManager(commerceContext, callerContext) {
                this._commerceContext = null;
                this._commerceContext = commerceContext;
                this._callerContext = callerContext;
            }
            StockCountJournalManager.prototype.createAsync = function (entity) {
                var request = this._commerceContext.stockCountJournals().create(entity);
                return request.execute(this._callerContext);
            };
            StockCountJournalManager.prototype.readAsync = function (journalId) {
                var request = this._commerceContext.stockCountJournals(journalId).read();
                return request.execute(this._callerContext);
            };
            StockCountJournalManager.prototype.readAllAsync = function (queryResultSettings) {
                var request = this._commerceContext.stockCountJournals().resultSettings(queryResultSettings).read();
                return request.execute(this._callerContext);
            };
            StockCountJournalManager.prototype.updateAsync = function (entity) {
                var request = this._commerceContext.stockCountJournals(entity.JournalId).update(entity);
                return request.execute(this._callerContext);
            };
            StockCountJournalManager.prototype.deleteAsync = function (entity) {
                var request = this._commerceContext.stockCountJournals(entity.JournalId).delete();
                return request.execute(this._callerContext);
            };
            StockCountJournalManager.prototype.syncAsync = function (queryResultSettings) {
                var query = this._commerceContext.stockCountJournals();
                query.resultSettings(queryResultSettings);
                var request = query.sync();
                return request.execute(this._callerContext);
            };
            StockCountJournalManager.prototype.syncTransactionsAsync = function (journalId, queryResultSettings) {
                var query = this._commerceContext.stockCountJournals(journalId);
                query.resultSettings(queryResultSettings);
                var request = query.syncTransactions();
                return request.execute(this._callerContext);
            };
            StockCountJournalManager.prototype.removeJournalAsync = function (journalId) {
                var request = this._commerceContext.stockCountJournals(journalId).removeJournal();
                return request.execute(this._callerContext);
            };
            StockCountJournalManager.prototype.removeTransactionAsync = function (journalId, itemId, inventSizeId, inventColorId, inventStyleId, configurationId) {
                var request = this._commerceContext.stockCountJournals(journalId).removeTransaction(itemId, inventSizeId, inventColorId, inventStyleId, configurationId);
                return request.execute(this._callerContext);
            };
            StockCountJournalManager.prototype.removeStockCountLineByLineIdAsync = function (journalId, stockCountLineId) {
                var request = this._commerceContext.stockCountJournals(journalId).removeStockCountLineByLineId(stockCountLineId);
                return request.execute(this._callerContext);
            };
            StockCountJournalManager.prototype.removeStockCountLineByProductRecIdAsync = function (journalId, productId) {
                var request = this._commerceContext.stockCountJournals(journalId).removeStockCountLineByProductRecId(productId);
                return request.execute(this._callerContext);
            };
            StockCountJournalManager.prototype.commitAsync = function (journalId) {
                var request = this._commerceContext.stockCountJournals(journalId).commit();
                return request.execute(this._callerContext);
            };
            return StockCountJournalManager;
        }());
        Proxy.StockCountJournalManager = StockCountJournalManager;
        var OrgUnitManager = (function () {
            function OrgUnitManager(commerceContext, callerContext) {
                this._commerceContext = null;
                this._commerceContext = commerceContext;
                this._callerContext = callerContext;
            }
            OrgUnitManager.prototype.createAsync = function (entity) {
                var request = this._commerceContext.orgUnits().create(entity);
                return request.execute(this._callerContext);
            };
            OrgUnitManager.prototype.readAsync = function (orgUnitNumber) {
                var request = this._commerceContext.orgUnits(orgUnitNumber).read();
                return request.execute(this._callerContext);
            };
            OrgUnitManager.prototype.readAllAsync = function (queryResultSettings) {
                var request = this._commerceContext.orgUnits().resultSettings(queryResultSettings).read();
                return request.execute(this._callerContext);
            };
            OrgUnitManager.prototype.updateAsync = function (entity) {
                var request = this._commerceContext.orgUnits(entity.OrgUnitNumber).update(entity);
                return request.execute(this._callerContext);
            };
            OrgUnitManager.prototype.deleteAsync = function (entity) {
                var request = this._commerceContext.orgUnits(entity.OrgUnitNumber).delete();
                return request.execute(this._callerContext);
            };
            OrgUnitManager.prototype.getTillLayoutAsync = function (height, width) {
                var request = this._commerceContext.orgUnits().getTillLayout(height, width);
                return request.execute(this._callerContext);
            };
            OrgUnitManager.prototype.searchAsync = function (storeSearchCriteria, queryResultSettings) {
                var query = this._commerceContext.orgUnits();
                query.resultSettings(queryResultSettings);
                var request = query.search(storeSearchCriteria);
                return request.execute(this._callerContext);
            };
            OrgUnitManager.prototype.getOrgUnitLocationsByAreaAsync = function (searchArea, queryResultSettings) {
                var query = this._commerceContext.orgUnits();
                query.resultSettings(queryResultSettings);
                var request = query.getOrgUnitLocationsByArea(searchArea);
                return request.execute(this._callerContext);
            };
            OrgUnitManager.prototype.getOrgUnitConfigurationAsync = function () {
                var request = this._commerceContext.orgUnits().getOrgUnitConfiguration();
                return request.execute(this._callerContext);
            };
            OrgUnitManager.prototype.getAvailableInventoryAsync = function (itemId, variantId, barcode, queryResultSettings) {
                var query = this._commerceContext.orgUnits();
                query.resultSettings(queryResultSettings);
                var request = query.getAvailableInventory(itemId, variantId, barcode);
                return request.execute(this._callerContext);
            };
            OrgUnitManager.prototype.getAvailableInventoryNearbyAsync = function (itemIds, searchArea, queryResultSettings) {
                var query = this._commerceContext.orgUnits();
                query.resultSettings(queryResultSettings);
                var request = query.getAvailableInventoryNearby(itemIds, searchArea);
                return request.execute(this._callerContext);
            };
            OrgUnitManager.prototype.getProductAvailabilityByDimensionsAsync = function (inventLocationIds, productId, productDimensionCombinations, queryResultSettings) {
                var query = this._commerceContext.orgUnits();
                query.resultSettings(queryResultSettings);
                var request = query.getProductAvailabilityByDimensions(inventLocationIds, productId, productDimensionCombinations);
                return request.execute(this._callerContext);
            };
            OrgUnitManager.prototype.getTerminalInfoAsync = function (orgUnitNumber, deviceType, queryResultSettings) {
                var query = this._commerceContext.orgUnits(orgUnitNumber);
                query.resultSettings(queryResultSettings);
                var request = query.getTerminalInfo(deviceType);
                return request.execute(this._callerContext);
            };
            OrgUnitManager.prototype.getProductAvailabilityAsync = function (productId, queryResultSettings) {
                var query = this._commerceContext.orgUnits();
                query.resultSettings(queryResultSettings);
                var request = query.getProductAvailability(productId);
                return request.execute(this._callerContext);
            };
            return OrgUnitManager;
        }());
        Proxy.OrgUnitManager = OrgUnitManager;
        var ProductManager = (function () {
            function ProductManager(commerceContext, callerContext) {
                this._commerceContext = null;
                this._commerceContext = commerceContext;
                this._callerContext = callerContext;
            }
            ProductManager.prototype.createAsync = function (entity) {
                var request = this._commerceContext.products().create(entity);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.readAsync = function (recordId) {
                var request = this._commerceContext.products(recordId).read();
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.readAllAsync = function (queryResultSettings) {
                var request = this._commerceContext.products().resultSettings(queryResultSettings).read();
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.updateAsync = function (entity) {
                var request = this._commerceContext.products(entity.RecordId).update(entity);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.deleteAsync = function (entity) {
                var request = this._commerceContext.products(entity.RecordId).delete();
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.getDimensionValuesAsync = function (recordId, channelId, dimension, matchingDimensionValues, kitVariantResolutionContext, queryResultSettings) {
                var query = this._commerceContext.products(recordId);
                query.resultSettings(queryResultSettings);
                var request = query.getDimensionValues(channelId, dimension, matchingDimensionValues, kitVariantResolutionContext);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.getVariantsByDimensionValuesAsync = function (recordId, channelId, matchingDimensionValues, queryResultSettings) {
                var query = this._commerceContext.products(recordId);
                query.resultSettings(queryResultSettings);
                var request = query.getVariantsByDimensionValues(channelId, matchingDimensionValues);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.getVariantsByComponentsInSlotsAsync = function (recordId, channelId, matchingSlotToComponentRelationship, queryResultSettings) {
                var query = this._commerceContext.products(recordId);
                query.resultSettings(queryResultSettings);
                var request = query.getVariantsByComponentsInSlots(channelId, matchingSlotToComponentRelationship);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.getByIdsAsync = function (channelId, productIds, queryResultSettings) {
                var query = this._commerceContext.products();
                query.resultSettings(queryResultSettings);
                var request = query.getByIds(channelId, productIds);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.compareAsync = function (channelId, catalogId, productIds, queryResultSettings) {
                var query = this._commerceContext.products();
                query.resultSettings(queryResultSettings);
                var request = query.compare(channelId, catalogId, productIds);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.getRecommendedProductsAsync = function (productIds, customerId, queryResultSettings) {
                var query = this._commerceContext.products();
                query.resultSettings(queryResultSettings);
                var request = query.getRecommendedProducts(productIds, customerId);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.refineSearchByCategoryAsync = function (channelId, catalogId, categoryId, refinementCriteria, queryResultSettings) {
                var query = this._commerceContext.products();
                query.resultSettings(queryResultSettings);
                var request = query.refineSearchByCategory(channelId, catalogId, categoryId, refinementCriteria);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.refineSearchByTextAsync = function (channelId, catalogId, searchText, refinementCriteria, queryResultSettings) {
                var query = this._commerceContext.products();
                query.resultSettings(queryResultSettings);
                var request = query.refineSearchByText(channelId, catalogId, searchText, refinementCriteria);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.searchAsync = function (productSearchCriteria, queryResultSettings) {
                var query = this._commerceContext.products();
                query.resultSettings(queryResultSettings);
                var request = query.search(productSearchCriteria);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.getRefinersAsync = function (productSearchCriteria, queryResultSettings) {
                var query = this._commerceContext.products();
                query.resultSettings(queryResultSettings);
                var request = query.getRefiners(productSearchCriteria);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.changesAsync = function (productSearchCriteria, queryResultSettings) {
                var query = this._commerceContext.products();
                query.resultSettings(queryResultSettings);
                var request = query.changes(productSearchCriteria);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.beginReadChangedProductsAsync = function (changedProductSearchCriteria) {
                var request = this._commerceContext.products().beginReadChangedProducts(changedProductSearchCriteria);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.readChangedProductsAsync = function (productSearchCriteria, queryResultSettings) {
                var query = this._commerceContext.products();
                query.resultSettings(queryResultSettings);
                var request = query.readChangedProducts(productSearchCriteria);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.getDeletedListingsAsync = function (catalogId, skip, top) {
                var request = this._commerceContext.products().getDeletedListings(catalogId, skip, top);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.getDeletedCatalogsAsync = function (queryResultSettings) {
                var query = this._commerceContext.products();
                query.resultSettings(queryResultSettings);
                var request = query.getDeletedCatalogs();
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.getDeletedLanguagesAsync = function (queryResultSettings) {
                var query = this._commerceContext.products();
                query.resultSettings(queryResultSettings);
                var request = query.getDeletedLanguages();
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.deleteListingsByCatalogsAsync = function (catalogIds) {
                var request = this._commerceContext.products().deleteListingsByCatalogs(catalogIds);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.deleteListingsByLanguagesAsync = function (languages) {
                var request = this._commerceContext.products().deleteListingsByLanguages(languages);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.endReadChangedProductsAsync = function (session) {
                var request = this._commerceContext.products().endReadChangedProducts(session);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.updateListingPublishingStatusAsync = function (publishingStatuses) {
                var request = this._commerceContext.products().updateListingPublishingStatus(publishingStatuses);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.getPricesAsync = function (itemId, inventoryDimensionId, barcode, customerAccountNumber, unitOfMeasureSymbol, quantity, queryResultSettings) {
                var query = this._commerceContext.products();
                query.resultSettings(queryResultSettings);
                var request = query.getPrices(itemId, inventoryDimensionId, barcode, customerAccountNumber, unitOfMeasureSymbol, quantity);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.getProductAvailabilitiesAsync = function (itemIds, channelId, queryResultSettings) {
                var query = this._commerceContext.products();
                query.resultSettings(queryResultSettings);
                var request = query.getProductAvailabilities(itemIds, channelId);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.getActivePricesAsync = function (projectDomain, productIds, activeDate, customerId, affiliationLoyaltyTiers, queryResultSettings) {
                var query = this._commerceContext.products();
                query.resultSettings(queryResultSettings);
                var request = query.getActivePrices(projectDomain, productIds, activeDate, customerId, affiliationLoyaltyTiers);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.getFilteredSlotComponentsAsync = function (recordId, channelId, slotId, selectedComponents, queryResultSettings) {
                var query = this._commerceContext.products(recordId);
                query.resultSettings(queryResultSettings);
                var request = query.getFilteredSlotComponents(channelId, slotId, selectedComponents);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.getComponentByProductSlotRelationAsync = function (channelId, componentRelation) {
                var request = this._commerceContext.products().getComponentByProductSlotRelation(channelId, componentRelation);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.searchByCategoryAsync = function (channelId, catalogId, categoryId, queryResultSettings) {
                var query = this._commerceContext.products();
                query.resultSettings(queryResultSettings);
                var request = query.searchByCategory(channelId, catalogId, categoryId);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.searchByTextAsync = function (channelId, catalogId, searchText, queryResultSettings) {
                var query = this._commerceContext.products();
                query.resultSettings(queryResultSettings);
                var request = query.searchByText(channelId, catalogId, searchText);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.getSearchSuggestionsAsync = function (channelId, catalogId, searchText, hitPrefix, hitSuffix, queryResultSettings) {
                var query = this._commerceContext.products();
                query.resultSettings(queryResultSettings);
                var request = query.getSearchSuggestions(channelId, catalogId, searchText, hitPrefix, hitSuffix);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.getRefinersByCategoryAsync = function (catalogId, categoryId, queryResultSettings) {
                var query = this._commerceContext.products();
                query.resultSettings(queryResultSettings);
                var request = query.getRefinersByCategory(catalogId, categoryId);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.getRefinersByTextAsync = function (catalogId, searchText, queryResultSettings) {
                var query = this._commerceContext.products();
                query.resultSettings(queryResultSettings);
                var request = query.getRefinersByText(catalogId, searchText);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.getRefinerValuesByCategoryAsync = function (catalogId, categoryId, refinerId, refinerSourceValue, queryResultSettings) {
                var query = this._commerceContext.products();
                query.resultSettings(queryResultSettings);
                var request = query.getRefinerValuesByCategory(catalogId, categoryId, refinerId, refinerSourceValue);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.getRefinerValuesByTextAsync = function (catalogId, searchText, refinerId, refinerSourceValue, queryResultSettings) {
                var query = this._commerceContext.products();
                query.resultSettings(queryResultSettings);
                var request = query.getRefinerValuesByText(catalogId, searchText, refinerId, refinerSourceValue);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.getChannelProductAttributesAsync = function (queryResultSettings) {
                var query = this._commerceContext.products();
                query.resultSettings(queryResultSettings);
                var request = query.getChannelProductAttributes();
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.getByIdAsync = function (recordId, channelId) {
                var request = this._commerceContext.products(recordId).getById(channelId);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.getAttributeValuesAsync = function (recordId, channelId, catalogId, queryResultSettings) {
                var query = this._commerceContext.products(recordId);
                query.resultSettings(queryResultSettings);
                var request = query.getAttributeValues(channelId, catalogId);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.getMediaLocationsAsync = function (recordId, channelId, catalogId, queryResultSettings) {
                var query = this._commerceContext.products(recordId);
                query.resultSettings(queryResultSettings);
                var request = query.getMediaLocations(channelId, catalogId);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.getMediaBlobsAsync = function (recordId, channelId, catalogId, queryResultSettings) {
                var query = this._commerceContext.products(recordId);
                query.resultSettings(queryResultSettings);
                var request = query.getMediaBlobs(channelId, catalogId);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.getDefaultComponentsAsync = function (recordId, channelId, queryResultSettings) {
                var query = this._commerceContext.products(recordId);
                query.resultSettings(queryResultSettings);
                var request = query.getDefaultComponents(channelId);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.getSlotComponentsAsync = function (recordId, channelId, slotId, queryResultSettings) {
                var query = this._commerceContext.products(recordId);
                query.resultSettings(queryResultSettings);
                var request = query.getSlotComponents(channelId, slotId);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.getRelationTypesAsync = function (recordId, channelId, catalogId, queryResultSettings) {
                var query = this._commerceContext.products(recordId);
                query.resultSettings(queryResultSettings);
                var request = query.getRelationTypes(channelId, catalogId);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.getRelatedProductsAsync = function (recordId, channelId, catalogId, relationTypeId, queryResultSettings) {
                var query = this._commerceContext.products(recordId);
                query.resultSettings(queryResultSettings);
                var request = query.getRelatedProducts(channelId, catalogId, relationTypeId);
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.getUnitsOfMeasureAsync = function (recordId, queryResultSettings) {
                var query = this._commerceContext.products(recordId);
                query.resultSettings(queryResultSettings);
                var request = query.getUnitsOfMeasure();
                return request.execute(this._callerContext);
            };
            ProductManager.prototype.getPriceAsync = function (recordId, customerAccountNumber, unitOfMeasureSymbol) {
                var request = this._commerceContext.products(recordId).getPrice(customerAccountNumber, unitOfMeasureSymbol);
                return request.execute(this._callerContext);
            };
            return ProductManager;
        }());
        Proxy.ProductManager = ProductManager;
        var ProductCatalogManager = (function () {
            function ProductCatalogManager(commerceContext, callerContext) {
                this._commerceContext = null;
                this._commerceContext = commerceContext;
                this._callerContext = callerContext;
            }
            ProductCatalogManager.prototype.createAsync = function (entity) {
                var request = this._commerceContext.catalogs().create(entity);
                return request.execute(this._callerContext);
            };
            ProductCatalogManager.prototype.readAsync = function (recordId) {
                var request = this._commerceContext.catalogs(recordId).read();
                return request.execute(this._callerContext);
            };
            ProductCatalogManager.prototype.readAllAsync = function (queryResultSettings) {
                var request = this._commerceContext.catalogs().resultSettings(queryResultSettings).read();
                return request.execute(this._callerContext);
            };
            ProductCatalogManager.prototype.updateAsync = function (entity) {
                var request = this._commerceContext.catalogs(entity.RecordId).update(entity);
                return request.execute(this._callerContext);
            };
            ProductCatalogManager.prototype.deleteAsync = function (entity) {
                var request = this._commerceContext.catalogs(entity.RecordId).delete();
                return request.execute(this._callerContext);
            };
            ProductCatalogManager.prototype.getCatalogsAsync = function (channelId, activeOnly, queryResultSettings) {
                var query = this._commerceContext.catalogs();
                query.resultSettings(queryResultSettings);
                var request = query.getCatalogs(channelId, activeOnly);
                return request.execute(this._callerContext);
            };
            return ProductCatalogManager;
        }());
        Proxy.ProductCatalogManager = ProductCatalogManager;
        var CommerceListManager = (function () {
            function CommerceListManager(commerceContext, callerContext) {
                this._commerceContext = null;
                this._commerceContext = commerceContext;
                this._callerContext = callerContext;
            }
            CommerceListManager.prototype.createAsync = function (entity) {
                var request = this._commerceContext.commerceLists().create(entity);
                return request.execute(this._callerContext);
            };
            CommerceListManager.prototype.readAsync = function (id) {
                var request = this._commerceContext.commerceLists(id).read();
                return request.execute(this._callerContext);
            };
            CommerceListManager.prototype.readAllAsync = function (queryResultSettings) {
                var request = this._commerceContext.commerceLists().resultSettings(queryResultSettings).read();
                return request.execute(this._callerContext);
            };
            CommerceListManager.prototype.updateAsync = function (entity) {
                var request = this._commerceContext.commerceLists(entity.Id).update(entity);
                return request.execute(this._callerContext);
            };
            CommerceListManager.prototype.deleteAsync = function (entity) {
                var request = this._commerceContext.commerceLists(entity.Id).delete();
                return request.execute(this._callerContext);
            };
            CommerceListManager.prototype.getByCustomerAsync = function (customerId, queryResultSettings) {
                var query = this._commerceContext.commerceLists();
                query.resultSettings(queryResultSettings);
                var request = query.getByCustomer(customerId);
                return request.execute(this._callerContext);
            };
            CommerceListManager.prototype.addLinesAsync = function (id, commerceListLines) {
                var request = this._commerceContext.commerceLists(id).addLines(commerceListLines);
                return request.execute(this._callerContext);
            };
            CommerceListManager.prototype.updateLinesAsync = function (id, commerceListLines) {
                var request = this._commerceContext.commerceLists(id).updateLines(commerceListLines);
                return request.execute(this._callerContext);
            };
            CommerceListManager.prototype.removeLinesAsync = function (id, commerceListLines) {
                var request = this._commerceContext.commerceLists(id).removeLines(commerceListLines);
                return request.execute(this._callerContext);
            };
            CommerceListManager.prototype.moveLinesAsync = function (commerceListLines, destinationId) {
                var request = this._commerceContext.commerceLists().moveLines(commerceListLines, destinationId);
                return request.execute(this._callerContext);
            };
            CommerceListManager.prototype.copyLinesAsync = function (commerceListLines, destinationId) {
                var request = this._commerceContext.commerceLists().copyLines(commerceListLines, destinationId);
                return request.execute(this._callerContext);
            };
            CommerceListManager.prototype.addContributorsAsync = function (id, commerceListContributors) {
                var request = this._commerceContext.commerceLists(id).addContributors(commerceListContributors);
                return request.execute(this._callerContext);
            };
            CommerceListManager.prototype.removeContributorsAsync = function (id, commerceListContributors) {
                var request = this._commerceContext.commerceLists(id).removeContributors(commerceListContributors);
                return request.execute(this._callerContext);
            };
            CommerceListManager.prototype.createInvitationsAsync = function (id, commerceListInvitations) {
                var request = this._commerceContext.commerceLists(id).createInvitations(commerceListInvitations);
                return request.execute(this._callerContext);
            };
            CommerceListManager.prototype.acceptInvitationAsync = function (invitationToken, customerId) {
                var request = this._commerceContext.commerceLists().acceptInvitation(invitationToken, customerId);
                return request.execute(this._callerContext);
            };
            return CommerceListManager;
        }());
        Proxy.CommerceListManager = CommerceListManager;
        var TransferOrderManager = (function () {
            function TransferOrderManager(commerceContext, callerContext) {
                this._commerceContext = null;
                this._commerceContext = commerceContext;
                this._callerContext = callerContext;
            }
            TransferOrderManager.prototype.createAsync = function (entity) {
                var request = this._commerceContext.transferOrders().create(entity);
                return request.execute(this._callerContext);
            };
            TransferOrderManager.prototype.readAsync = function (orderId) {
                var request = this._commerceContext.transferOrders(orderId).read();
                return request.execute(this._callerContext);
            };
            TransferOrderManager.prototype.readAllAsync = function (queryResultSettings) {
                var request = this._commerceContext.transferOrders().resultSettings(queryResultSettings).read();
                return request.execute(this._callerContext);
            };
            TransferOrderManager.prototype.updateAsync = function (entity) {
                var request = this._commerceContext.transferOrders(entity.OrderId).update(entity);
                return request.execute(this._callerContext);
            };
            TransferOrderManager.prototype.deleteAsync = function (entity) {
                var request = this._commerceContext.transferOrders(entity.OrderId).delete();
                return request.execute(this._callerContext);
            };
            TransferOrderManager.prototype.commitAsync = function (orderId) {
                var request = this._commerceContext.transferOrders(orderId).commit();
                return request.execute(this._callerContext);
            };
            TransferOrderManager.prototype.getTransferOrderLinesAsync = function (orderId, queryResultSettings) {
                var query = this._commerceContext.transferOrders(orderId);
                query.resultSettings(queryResultSettings);
                var request = query.getTransferOrderLines();
                return request.execute(this._callerContext);
            };
            TransferOrderManager.prototype.createTransferOrderLinesAsync = function (orderId, transferOrderLines, queryResultSettings) {
                var query = this._commerceContext.transferOrders(orderId);
                query.resultSettings(queryResultSettings);
                var request = query.createTransferOrderLines(transferOrderLines);
                return request.execute(this._callerContext);
            };
            TransferOrderManager.prototype.updateTransferOrderLinesAsync = function (orderId, transferOrderLines, queryResultSettings) {
                var query = this._commerceContext.transferOrders(orderId);
                query.resultSettings(queryResultSettings);
                var request = query.updateTransferOrderLines(transferOrderLines);
                return request.execute(this._callerContext);
            };
            TransferOrderManager.prototype.getTransferOrderCommentsAsync = function (orderId, queryResultSettings) {
                var query = this._commerceContext.transferOrders(orderId);
                query.resultSettings(queryResultSettings);
                var request = query.getTransferOrderComments();
                return request.execute(this._callerContext);
            };
            TransferOrderManager.prototype.addTransferOrderCommentAsync = function (orderId, authorStaffId, commentText) {
                var request = this._commerceContext.transferOrders(orderId).addTransferOrderComment(authorStaffId, commentText);
                return request.execute(this._callerContext);
            };
            TransferOrderManager.prototype.deleteTransferOrderLinesAsync = function (orderId, transferOrderLines, queryResultSettings) {
                var query = this._commerceContext.transferOrders(orderId);
                query.resultSettings(queryResultSettings);
                var request = query.deleteTransferOrderLines(transferOrderLines);
                return request.execute(this._callerContext);
            };
            TransferOrderManager.prototype.getTransferOrderJournalsAsync = function (orderId, queryResultSettings) {
                var query = this._commerceContext.transferOrders(orderId);
                query.resultSettings(queryResultSettings);
                var request = query.getTransferOrderJournals();
                return request.execute(this._callerContext);
            };
            TransferOrderManager.prototype.getTransferPackingSlipAsync = function (orderId, voucherId, receiptRetrievalCriteria, queryResultSettings) {
                var query = this._commerceContext.transferOrders(orderId);
                query.resultSettings(queryResultSettings);
                var request = query.getTransferPackingSlip(voucherId, receiptRetrievalCriteria);
                return request.execute(this._callerContext);
            };
            return TransferOrderManager;
        }());
        Proxy.TransferOrderManager = TransferOrderManager;
        var PurchaseOrderManager = (function () {
            function PurchaseOrderManager(commerceContext, callerContext) {
                this._commerceContext = null;
                this._commerceContext = commerceContext;
                this._callerContext = callerContext;
            }
            PurchaseOrderManager.prototype.createAsync = function (entity) {
                var request = this._commerceContext.purchaseOrders().create(entity);
                return request.execute(this._callerContext);
            };
            PurchaseOrderManager.prototype.readAsync = function (orderId) {
                var request = this._commerceContext.purchaseOrders(orderId).read();
                return request.execute(this._callerContext);
            };
            PurchaseOrderManager.prototype.readAllAsync = function (queryResultSettings) {
                var request = this._commerceContext.purchaseOrders().resultSettings(queryResultSettings).read();
                return request.execute(this._callerContext);
            };
            PurchaseOrderManager.prototype.updateAsync = function (entity) {
                var request = this._commerceContext.purchaseOrders(entity.OrderId).update(entity);
                return request.execute(this._callerContext);
            };
            PurchaseOrderManager.prototype.deleteAsync = function (entity) {
                var request = this._commerceContext.purchaseOrders(entity.OrderId).delete();
                return request.execute(this._callerContext);
            };
            PurchaseOrderManager.prototype.commitAsync = function (orderId) {
                var request = this._commerceContext.purchaseOrders(orderId).commit();
                return request.execute(this._callerContext);
            };
            return PurchaseOrderManager;
        }());
        Proxy.PurchaseOrderManager = PurchaseOrderManager;
        var PickingListManager = (function () {
            function PickingListManager(commerceContext, callerContext) {
                this._commerceContext = null;
                this._commerceContext = commerceContext;
                this._callerContext = callerContext;
            }
            PickingListManager.prototype.createAsync = function (entity) {
                var request = this._commerceContext.pickingLists().create(entity);
                return request.execute(this._callerContext);
            };
            PickingListManager.prototype.readAsync = function (orderId) {
                var request = this._commerceContext.pickingLists(orderId).read();
                return request.execute(this._callerContext);
            };
            PickingListManager.prototype.readAllAsync = function (queryResultSettings) {
                var request = this._commerceContext.pickingLists().resultSettings(queryResultSettings).read();
                return request.execute(this._callerContext);
            };
            PickingListManager.prototype.updateAsync = function (entity) {
                var request = this._commerceContext.pickingLists(entity.OrderId).update(entity);
                return request.execute(this._callerContext);
            };
            PickingListManager.prototype.deleteAsync = function (entity) {
                var request = this._commerceContext.pickingLists(entity.OrderId).delete();
                return request.execute(this._callerContext);
            };
            PickingListManager.prototype.commitAsync = function (orderId) {
                var request = this._commerceContext.pickingLists(orderId).commit();
                return request.execute(this._callerContext);
            };
            return PickingListManager;
        }());
        Proxy.PickingListManager = PickingListManager;
        var WarehouseManager = (function () {
            function WarehouseManager(commerceContext, callerContext) {
                this._commerceContext = null;
                this._commerceContext = commerceContext;
                this._callerContext = callerContext;
            }
            WarehouseManager.prototype.createAsync = function (entity) {
                var request = this._commerceContext.warehouses().create(entity);
                return request.execute(this._callerContext);
            };
            WarehouseManager.prototype.readAsync = function (inventLocation) {
                var request = this._commerceContext.warehouses(inventLocation).read();
                return request.execute(this._callerContext);
            };
            WarehouseManager.prototype.readAllAsync = function (queryResultSettings) {
                var request = this._commerceContext.warehouses().resultSettings(queryResultSettings).read();
                return request.execute(this._callerContext);
            };
            WarehouseManager.prototype.updateAsync = function (entity) {
                var request = this._commerceContext.warehouses(entity.InventLocation).update(entity);
                return request.execute(this._callerContext);
            };
            WarehouseManager.prototype.deleteAsync = function (entity) {
                var request = this._commerceContext.warehouses(entity.InventLocation).delete();
                return request.execute(this._callerContext);
            };
            WarehouseManager.prototype.getWarehouseByIdAsync = function (inventLocation) {
                var request = this._commerceContext.warehouses(inventLocation).getWarehouseById();
                return request.execute(this._callerContext);
            };
            WarehouseManager.prototype.getLocationsAsync = function (inventLocation, queryResultSettings) {
                var query = this._commerceContext.warehouses(inventLocation);
                query.resultSettings(queryResultSettings);
                var request = query.getLocations();
                return request.execute(this._callerContext);
            };
            return WarehouseManager;
        }());
        Proxy.WarehouseManager = WarehouseManager;
        var ScanResultManager = (function () {
            function ScanResultManager(commerceContext, callerContext) {
                this._commerceContext = null;
                this._commerceContext = commerceContext;
                this._callerContext = callerContext;
            }
            ScanResultManager.prototype.createAsync = function (entity) {
                var request = this._commerceContext.scanResults().create(entity);
                return request.execute(this._callerContext);
            };
            ScanResultManager.prototype.readAsync = function (scannedText) {
                var request = this._commerceContext.scanResults(scannedText).read();
                return request.execute(this._callerContext);
            };
            ScanResultManager.prototype.readAllAsync = function (queryResultSettings) {
                var request = this._commerceContext.scanResults().resultSettings(queryResultSettings).read();
                return request.execute(this._callerContext);
            };
            ScanResultManager.prototype.updateAsync = function (entity) {
                var request = this._commerceContext.scanResults(entity.ScannedText).update(entity);
                return request.execute(this._callerContext);
            };
            ScanResultManager.prototype.deleteAsync = function (entity) {
                var request = this._commerceContext.scanResults(entity.ScannedText).delete();
                return request.execute(this._callerContext);
            };
            return ScanResultManager;
        }());
        Proxy.ScanResultManager = ScanResultManager;
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        "use strict";
        var DataServiceRequest = (function () {
            function DataServiceRequest(serverUri, query, operatingUnitNumber, authToken, locale) {
                if (locale === void 0) { locale = ""; }
                Commerce.Proxy.Tracer.Information("DataServiceRequest.constructor()");
                this._serverUri = serverUri;
                this._query = query;
                this._operatingUnitNumber = operatingUnitNumber;
                this._authToken = authToken;
                this._hasOperationName = false;
                this._locale = locale;
                switch (query.action) {
                    case "Read":
                    case "ReadAll":
                        this._method = DataServiceRequest.GET;
                        break;
                    case "Create":
                        this._method = DataServiceRequest.POST;
                        break;
                    case "Update":
                        this._method = DataServiceRequest.PATCH;
                        break;
                    case "Delete":
                        this._method = DataServiceRequest.DELETE;
                        break;
                    default:
                        if (query.isAction) {
                            this._method = DataServiceRequest.POST;
                        }
                        else {
                            this._method = DataServiceRequest.GET;
                        }
                        this._hasOperationName = true;
                        break;
                }
                this._requestUri = this.getRequestUri(query);
            }
            Object.defineProperty(DataServiceRequest.prototype, "batchRequestUri", {
                get: function () {
                    return this._serverUri + "/$batch";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataServiceRequest.prototype, "locale", {
                get: function () {
                    return this._locale;
                },
                set: function (locale) {
                    this._locale = locale;
                },
                enumerable: true,
                configurable: true
            });
            DataServiceRequest.prototype.id = function () {
                return this._id;
            };
            DataServiceRequest.prototype.getRequestUri = function (query) {
                var requestUri = this._serverUri + (query.entitySet
                    ? "/" + query.entitySet + (query.key
                        ? "(" + DataServiceRequest.formatKey(query.key) + ")"
                        : Proxy.StringExtensions.EMPTY)
                    : Proxy.StringExtensions.EMPTY);
                if (this._hasOperationName) {
                    requestUri += "/" + query.action;
                    if (!query.isAction && query.data instanceof Proxy.Common.ODataOperationParameters) {
                        requestUri += "(" + DataServiceRequest.formatFunctionParameter(query.data.parameters) + ")";
                    }
                }
                if (query.isReturnTypeACollection) {
                    requestUri = DataServiceRequest.addParameter(requestUri, "$top", query.resultSettings ? query.resultSettings.Paging.Top : 1000);
                    requestUri = DataServiceRequest.addParameter(requestUri, "$skip", query.resultSettings ? query.resultSettings.Paging.Skip : 0);
                    requestUri = DataServiceRequest.addParameter(requestUri, "$inlinecount", query.inlineCount ? "allpages" : null);
                    requestUri = DataServiceRequest.addParameter(requestUri, "$filter", query.filterSettings ? query.filterSettings : 0);
                    if (query.resultSettings && query.resultSettings.Sorting.Columns) {
                        query.resultSettings.Sorting.Columns.forEach(function (column) {
                            requestUri = DataServiceRequest.addParameter(requestUri, "$orderby", column.ColumnName);
                        });
                    }
                }
                if (Proxy.ArrayExtensions.hasElements(query.expands)) {
                    requestUri = DataServiceRequest.addParameter(requestUri, "$expand", query.expands.join());
                }
                if (!Proxy.StringExtensions.isNullOrWhitespace(Proxy.CommerceContext.ApiVersion)) {
                    requestUri = DataServiceRequest.addParameter(requestUri, "api-version", Proxy.CommerceContext.ApiVersion);
                }
                return requestUri;
            };
            DataServiceRequest.prototype.execute = function (callerContext) {
                var asyncResult = new Proxy.AsyncResult(callerContext);
                var headers = this.buildQueryHeader();
                if (!this._query.isReturnTypeACollection || this._query.resultSettings.Paging.Top >= 0) {
                    this.loadPage(asyncResult, headers);
                }
                else {
                    this.getAllPages(asyncResult, headers, 0);
                }
                return asyncResult;
            };
            DataServiceRequest.prototype.getAllPages = function (asyncResult, headers, skip, results) {
                var _this = this;
                skip = skip || 0;
                var top = 1000;
                var getPageAsyncResult = new Proxy.AsyncResult();
                this._query.resultSettings.Paging.Top = top;
                results = results || [];
                getPageAsyncResult.done(function (pageResult) {
                    if (pageResult) {
                        if (typeof pageResult.length === "number") {
                            results = results.concat(pageResult);
                            if (pageResult.length < top) {
                                if (pageResult.hasNextPage) {
                                    skip += pageResult.length;
                                    _this.getAllPages(asyncResult, headers, skip, results);
                                }
                                else {
                                    asyncResult.resolve(results);
                                }
                            }
                            else {
                                skip += top;
                                _this.getAllPages(asyncResult, headers, skip, results);
                            }
                        }
                        else {
                            results.push(pageResult);
                            asyncResult.resolve(results);
                        }
                    }
                }).fail(function (errors) {
                    asyncResult.reject(errors);
                });
                this.loadPage(getPageAsyncResult, headers, skip);
            };
            DataServiceRequest.prototype.buildQueryHeader = function () {
                var headers = {};
                for (var headerName in DataServiceRequest.DEFAULT_HEADER) {
                    headers[headerName] = DataServiceRequest.DEFAULT_HEADER[headerName];
                }
                if (!Proxy.StringExtensions.isNullOrWhitespace(this._operatingUnitNumber)) {
                    headers[DataServiceRequest.OPERATINGUNITNUMBER_HEADERNAME] = this._operatingUnitNumber;
                }
                headers[DataServiceRequest.ACCEPT_LANGUAGE] = this._locale;
                for (var tokenName in this._query.tokens) {
                    var tokenValue = this._query.tokens[tokenName];
                    if (!Proxy.StringExtensions.isNullOrWhitespace(tokenValue)) {
                        headers[tokenName] = tokenValue;
                    }
                }
                if (!Proxy.StringExtensions.isNullOrWhitespace(this._authToken)) {
                    headers[DataServiceRequest.AUTHORIZATION_HEADERNAME] = this._authToken;
                }
                return headers;
            };
            DataServiceRequest.prototype.loadPage = function (asyncResult, headers, skip) {
                var _this = this;
                if (!Proxy.ObjectExtensions.isNullOrUndefined(skip)) {
                    this._query.resultSettings.Paging.Skip = skip;
                }
                var requestId = Microsoft.Dynamics.Diagnostics.TypeScriptCore.Utils.generateGuid();
                Proxy.RetailLogger.modelManagersRetailServerRequestStarted(requestId, this._requestUri);
                OData.request({
                    requestUri: this.getRequestUri(this._query),
                    method: this._method,
                    data: DataServiceRequest.toJson(this._query.data),
                    headers: headers,
                }, function (data) {
                    Proxy.RetailLogger.modelManagersRetailServerRequestFinished(requestId, _this._requestUri);
                    asyncResult.resolve(Proxy.XhrHelper.parseOdataResult(data, _this._query.returnType));
                }, function (error) {
                    Proxy.RetailLogger.modelManagersRetailServerRequestError(requestId, _this._requestUri, error.message);
                    asyncResult.reject(Proxy.ErrorParser.parseErrorMessage(error));
                }, OData.jsonHandler);
            };
            DataServiceRequest.prototype.executeBatch = function (requests, callerContext) {
                var _this = this;
                var asyncResult = new Proxy.AsyncResult(callerContext);
                OData.request(DataServiceRequest.buildBatchRequest(this.batchRequestUri, requests), function (data) {
                    var responses = new Array();
                    var errors = DataServiceRequest.parseBatchResponses(data.__batchResponses, requests, responses);
                    if (errors.length == 0) {
                        Commerce.Proxy.Tracer.Information(_this.batchRequestUri + " success");
                        asyncResult.resolve(responses);
                    }
                    else {
                        Commerce.Proxy.Tracer.Errors(errors, _this.batchRequestUri + " failed.");
                        asyncResult.reject(errors);
                    }
                }, function (error) {
                    Commerce.Proxy.Tracer.Error(_this.batchRequestUri + " failed");
                    asyncResult.reject(Proxy.ErrorParser.parseErrorMessage(error));
                }, OData.batchHandler);
                return asyncResult;
            };
            DataServiceRequest.buildBatchRequest = function (batchRequestUri, requests) {
                var requestId = 1;
                var odataBatchRequest = {
                    requestUri: batchRequestUri,
                    method: DataServiceRequest.POST,
                    data: { __batchRequests: [] }
                };
                var batchRequests = odataBatchRequest.data.__batchRequests;
                var changeRequests;
                requests.forEach(function (request) {
                    request._id = requestId++;
                    var odataRequest = {
                        requestUri: request._requestUri,
                        method: request._method,
                        data: DataServiceRequest.toJson(request._query.data),
                        headers: { "Content-ID": request.id(), "Prefer": "return=representation" }
                    };
                    if (request._method == DataServiceRequest.GET) {
                        batchRequests.push(odataRequest);
                    }
                    else {
                        if (!changeRequests) {
                            changeRequests = [];
                            batchRequests.push({ __changeRequests: changeRequests });
                        }
                        changeRequests.push(odataRequest);
                    }
                });
                return odataBatchRequest;
            };
            DataServiceRequest.parseBatchResponses = function (batchResponses, requests, responses) {
                var errors = new Array();
                batchResponses.forEach(function (response) {
                    if (response.__changeResponses) {
                        errors = errors.concat(DataServiceRequest.parseBatchResponses(response.__changeResponses, requests, responses));
                    }
                    else {
                        if (Proxy.ObjectExtensions.isNullOrUndefined(response.message)) {
                            var requestId = parseInt(response.headers["Content-ID"]);
                            responses[requestId] = Proxy.XhrHelper.parseOdataResult(response.data, requests[requestId - 1]._query.returnType);
                        }
                        else {
                            errors = errors.concat(Proxy.ErrorParser.parseErrorMessage(response));
                        }
                    }
                });
                return errors;
            };
            DataServiceRequest.toJson = function (data, parent, modifyDataInPlace) {
                var clone = data;
                if (data == null) {
                    return null;
                }
                else if (typeof (data) !== "object") {
                    return data;
                }
                if (data instanceof Proxy.Common.ODataOperationParameters) {
                    data = data.parameters;
                    parent = null;
                }
                else {
                    parent = data;
                }
                if (!modifyDataInPlace) {
                    clone = $.extend({}, data);
                }
                for (var prop in clone) {
                    if (clone.hasOwnProperty(prop)) {
                        var property = clone[prop];
                        var isUndefined = Proxy.ObjectExtensions.isUndefined(property);
                        if (!isUndefined) {
                            var value;
                            var isNull = Proxy.ObjectExtensions.isNull(property);
                            var isObject = Proxy.ObjectExtensions.isObject(property);
                            if (isNull) {
                                value = null;
                            }
                            else if (isObject) {
                                if (property instanceof Array) {
                                    value = DataServiceRequest.arrayToJson(property, parent, modifyDataInPlace);
                                }
                                else if (property instanceof Date) {
                                    value = DataServiceRequest.toDateTimeOffset(property);
                                }
                                else {
                                    value = DataServiceRequest.toJson(property, clone, modifyDataInPlace);
                                }
                            }
                            else {
                                value = property;
                            }
                            clone[prop] = value;
                        }
                    }
                }
                return clone;
            };
            DataServiceRequest.arrayToJson = function (array, parent, modifyDataInPlace) {
                var data = [];
                for (var i = 0; i < array.length; i++) {
                    data[i] = DataServiceRequest.toJson(array[i], array, modifyDataInPlace);
                }
                return data;
            };
            DataServiceRequest.toDateTimeOffset = function (dateTime) {
                if (!dateTime["__edmType"] || !dateTime["__offset"]) {
                    var pad = function (val) { return val < 10 ? "0" + val : val.toString(); };
                    var sign = (dateTime.getTimezoneOffset() > 0) ? "-" : "+";
                    var offset = Math.abs(dateTime.getTimezoneOffset());
                    var hours = pad(Math.floor(offset / 60));
                    var minutes = pad(offset % 60);
                    dateTime["__edmType"] = "Edm.DateTimeOffset";
                    dateTime["__offset"] = sign + hours + ":" + minutes;
                }
                return dateTime;
            };
            DataServiceRequest.formatKey = function (key) {
                var result = null;
                if (key) {
                    var formattedKey = [];
                    var propertyName;
                    for (var property in key) {
                        if (key.hasOwnProperty(property)) {
                            propertyName = property;
                            if (typeof key[propertyName] == 'string') {
                                formattedKey.push(propertyName + "='" + key[propertyName] + "'");
                            }
                            else {
                                formattedKey.push(propertyName + "=" + key[propertyName]);
                            }
                        }
                    }
                    if (formattedKey.length == 1) {
                        if (typeof key[propertyName] == 'string') {
                            result = "'" + key[propertyName] + "'";
                        }
                        else {
                            result = key[propertyName];
                        }
                    }
                    else {
                        result = formattedKey.join();
                    }
                }
                return result;
            };
            DataServiceRequest.formatFunctionParameter = function (parameters) {
                var result = Proxy.StringExtensions.EMPTY;
                if (parameters) {
                    for (var parameter in parameters) {
                        var paramName = parameter;
                        var paramValue = parameters[paramName];
                        if (!Proxy.StringExtensions.isEmpty(result)) {
                            result += ",";
                        }
                        if (Proxy.ObjectExtensions.isUndefined(paramValue)) {
                            continue;
                        }
                        else if (typeof paramValue == 'string') {
                            result += paramName + "='" + encodeURIComponent(paramValue) + "'";
                        }
                        else {
                            result += paramName + "=" + encodeURIComponent(paramValue);
                        }
                    }
                }
                return result;
            };
            DataServiceRequest.addParameter = function (requestUri, key, value) {
                if (value) {
                    var parameterSeparator = "?";
                    if (requestUri.indexOf(parameterSeparator) > 0) {
                        parameterSeparator = "&";
                    }
                    return requestUri + parameterSeparator + key + "=" + value;
                }
                else {
                    return requestUri;
                }
            };
            return DataServiceRequest;
        }());
        DataServiceRequest.GET = "GET";
        DataServiceRequest.POST = "POST";
        DataServiceRequest.PATCH = "PATCH";
        DataServiceRequest.DELETE = "DELETE";
        DataServiceRequest.DEFAULT_HEADER = {
            "Prefer": "return=representation"
        };
        DataServiceRequest.OPERATINGUNITNUMBER_HEADERNAME = "OUN";
        DataServiceRequest.AUTHORIZATION_HEADERNAME = "Authorization";
        DataServiceRequest.ACCEPT_LANGUAGE = "Accept-Language";
        Proxy.DataServiceRequest = DataServiceRequest;
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
//# sourceMappingURL=E:/bt/148265/drop/AXRetail/retail/amd64/B/R T/Proxies/Proxies.Retail.TypeScript/Libraries.Proxies.Retail.TypeScript.js.map
// SIG // Begin signature block
// SIG // MIIkDgYJKoZIhvcNAQcCoIIj/zCCI/sCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // TGOpELJaaWM0jBJj1lX1hvRrzT+0ddLN7scvKgY5FMag
// SIG // gg2FMIIGAzCCA+ugAwIBAgITMwAAAYivUta5km3o+QAA
// SIG // AAABiDANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExMB4XDTIwMDMwNDE4Mzk0OFoX
// SIG // DTIxMDMwMzE4Mzk0OFowdDELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // kgja8hPgnsMtpuLf2u+MGewvWE8L9T8guAbzP5EljzbP
// SIG // J9EU3vhb2H1PhPbn9Le52JQMx4yvqZYn9gYQ/jYHYSFE
// SIG // PLFcFjt/bY70ER4z9v/70ryH5ppEaDC9SIZ47PZEImUM
// SIG // 2EQ2GEafcUkGJkcEI5OYZfP1O0YDokA4rVR2lOwU9TCP
// SIG // dpX2UbiCAw2AXb17W3JWCTFTsKmbb9Dvc0Aq3rekfn0U
// SIG // hmgzXxBKXCCy/g+0VdzOLmiROE2uigDnb1fjFWiadWFx
// SIG // U2TyraYxzunfaR0D2YhuzXQukG50RprGuPLjUK2+gH5i
// SIG // ygyNS6d9VjKIE2l+bWX/gmU/T0rr4zgizQIDAQABo4IB
// SIG // gjCCAX4wHwYDVR0lBBgwFgYKKwYBBAGCN0wIAQYIKwYB
// SIG // BQUHAwMwHQYDVR0OBBYEFI/USS/czaz3C9dEWXTECF2T
// SIG // ezBvMFQGA1UdEQRNMEukSTBHMS0wKwYDVQQLEyRNaWNy
// SIG // b3NvZnQgSXJlbGFuZCBPcGVyYXRpb25zIExpbWl0ZWQx
// SIG // FjAUBgNVBAUTDTIzMDAxMis0NTgzODYwHwYDVR0jBBgw
// SIG // FoAUSG5k5VAF04KqFzc3IrVtqMp1ApUwVAYDVR0fBE0w
// SIG // SzBJoEegRYZDaHR0cDovL3d3dy5taWNyb3NvZnQuY29t
// SIG // L3BraW9wcy9jcmwvTWljQ29kU2lnUENBMjAxMV8yMDEx
// SIG // LTA3LTA4LmNybDBhBggrBgEFBQcBAQRVMFMwUQYIKwYB
// SIG // BQUHMAKGRWh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9w
// SIG // a2lvcHMvY2VydHMvTWljQ29kU2lnUENBMjAxMV8yMDEx
// SIG // LTA3LTA4LmNydDAMBgNVHRMBAf8EAjAAMA0GCSqGSIb3
// SIG // DQEBCwUAA4ICAQAp16PIY6exXk/h+okJVdwnBp5Emxby
// SIG // KSmGn4M2AhaN1B2NVR2CVW+YxxDvKBtukKgRC5mpOjEy
// SIG // Pq2t1ijExoRNbBCJaME3KeCALPGucKQoelX+Gf2wLSKa
// SIG // T96d4F5Nl/FF03PlsY0GLA5BYks6PzgWuYZHVtYOBKTu
// SIG // N5fZo06AXahD7SF7Gex4tf+suICtD5jIsBvCzKUp9J/6
// SIG // Ehxo61DQYByT8YLOt0pX+fEBgc57l4kWl5n01A3a74Ua
// SIG // HHcSDIvJ10MFgAjIkMyUkcwT+UtsFKu5zAKo2k23l4Sa
// SIG // g9khVR3VGJSq7r7T0sG56kkVkxiPLOBRF7fky98OSZ8F
// SIG // WZmZFBaIqEAzDIxcmirq3SeqZ8269YekFtEfe31nPMRC
// SIG // MyyDolNq48FgLZUKhTvCjYspI2BshH+S8gCSgDvqyXfX
// SIG // 7GEflQWriBEKGJo51G01zEmNi3+SjJblpQzhlYfKul45
// SIG // gXHKWk/vLQn8aWlWD4tZ3J8E8Gj0L1avEY1g0Qez2vK7
// SIG // h4I9hyRYuvfoXKu5lseZ01Lc8xWu0UmXxOWtWuQLgZhj
// SIG // Ua+3/HDX2tNfrYlo1SpNWvoCVAUj9LCMXnBW1Ul02e26
// SIG // nmpeOV0gyIrGQZFm/vN0213UxjA0lBSkwHbQvq9+Rn7D
// SIG // fEFcufR2+WWMwF3M4YEZpOzchOow9GJuUyoluTCCB3ow
// SIG // ggVioAMCAQICCmEOkNIAAAAAAAMwDQYJKoZIhvcNAQEL
// SIG // BQAwgYgxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNo
// SIG // aW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQK
// SIG // ExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xMjAwBgNVBAMT
// SIG // KU1pY3Jvc29mdCBSb290IENlcnRpZmljYXRlIEF1dGhv
// SIG // cml0eSAyMDExMB4XDTExMDcwODIwNTkwOVoXDTI2MDcw
// SIG // ODIxMDkwOVowfjELMAkGA1UEBhMCVVMxEzARBgNVBAgT
// SIG // Cldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAc
// SIG // BgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEoMCYG
// SIG // A1UEAxMfTWljcm9zb2Z0IENvZGUgU2lnbmluZyBQQ0Eg
// SIG // MjAxMTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoC
// SIG // ggIBAKvw+nIQHC6t2G6qghBNNLrytlghn0IbKmvpWlCq
// SIG // uAY4GgRJun/DDB7dN2vGEtgL8DjCmQawyDnVARQxQtOJ
// SIG // DXlkh36UYCRsr55JnOloXtLfm1OyCizDr9mpK656Ca/X
// SIG // llnKYBoF6WZ26DJSJhIv56sIUM+zRLdd2MQuA3WraPPL
// SIG // bfM6XKEW9Ea64DhkrG5kNXimoGMPLdNAk/jj3gcN1Vx5
// SIG // pUkp5w2+oBN3vpQ97/vjK1oQH01WKKJ6cuASOrdJXtjt
// SIG // 7UORg9l7snuGG9k+sYxd6IlPhBryoS9Z5JA7La4zWMW3
// SIG // Pv4y07MDPbGyr5I4ftKdgCz1TlaRITUlwzluZH9TupwP
// SIG // rRkjhMv0ugOGjfdf8NBSv4yUh7zAIXQlXxgotswnKDgl
// SIG // mDlKNs98sZKuHCOnqWbsYR9q4ShJnV+I4iVd0yFLPlLE
// SIG // tVc/JAPw0XpbL9Uj43BdD1FGd7P4AOG8rAKCX9vAFbO9
// SIG // G9RVS+c5oQ/pI0m8GLhEfEXkwcNyeuBy5yTfv0aZxe/C
// SIG // HFfbg43sTUkwp6uO3+xbn6/83bBm4sGXgXvt1u1L50kp
// SIG // pxMopqd9Z4DmimJ4X7IvhNdXnFy/dygo8e1twyiPLI9A
// SIG // N0/B4YVEicQJTMXUpUMvdJX3bvh4IFgsE11glZo+TzOE
// SIG // 2rCIF96eTvSWsLxGoGyY0uDWiIwLAgMBAAGjggHtMIIB
// SIG // 6TAQBgkrBgEEAYI3FQEEAwIBADAdBgNVHQ4EFgQUSG5k
// SIG // 5VAF04KqFzc3IrVtqMp1ApUwGQYJKwYBBAGCNxQCBAwe
// SIG // CgBTAHUAYgBDAEEwCwYDVR0PBAQDAgGGMA8GA1UdEwEB
// SIG // /wQFMAMBAf8wHwYDVR0jBBgwFoAUci06AjGQQ7kUBU7h
// SIG // 6qfHMdEjiTQwWgYDVR0fBFMwUTBPoE2gS4ZJaHR0cDov
// SIG // L2NybC5taWNyb3NvZnQuY29tL3BraS9jcmwvcHJvZHVj
// SIG // dHMvTWljUm9vQ2VyQXV0MjAxMV8yMDExXzAzXzIyLmNy
// SIG // bDBeBggrBgEFBQcBAQRSMFAwTgYIKwYBBQUHMAKGQmh0
// SIG // dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMv
// SIG // TWljUm9vQ2VyQXV0MjAxMV8yMDExXzAzXzIyLmNydDCB
// SIG // nwYDVR0gBIGXMIGUMIGRBgkrBgEEAYI3LgMwgYMwPwYI
// SIG // KwYBBQUHAgEWM2h0dHA6Ly93d3cubWljcm9zb2Z0LmNv
// SIG // bS9wa2lvcHMvZG9jcy9wcmltYXJ5Y3BzLmh0bTBABggr
// SIG // BgEFBQcCAjA0HjIgHQBMAGUAZwBhAGwAXwBwAG8AbABp
// SIG // AGMAeQBfAHMAdABhAHQAZQBtAGUAbgB0AC4gHTANBgkq
// SIG // hkiG9w0BAQsFAAOCAgEAZ/KGpZjgVHkaLtPYdGcimwuW
// SIG // EeFjkplCln3SeQyQwWVfLiw++MNy0W2D/r4/6ArKO79H
// SIG // qaPzadtjvyI1pZddZYSQfYtGUFXYDJJ80hpLHPM8QotS
// SIG // 0LD9a+M+By4pm+Y9G6XUtR13lDni6WTJRD14eiPzE32m
// SIG // kHSDjfTLJgJGKsKKELukqQUMm+1o+mgulaAqPyprWElj
// SIG // HwlpblqYluSD9MCP80Yr3vw70L01724lruWvJ+3Q3fMO
// SIG // r5kol5hNDj0L8giJ1h/DMhji8MUtzluetEk5CsYKwsat
// SIG // ruWy2dsViFFFWDgycScaf7H0J/jeLDogaZiyWYlobm+n
// SIG // t3TDQAUGpgEqKD6CPxNNZgvAs0314Y9/HG8VfUWnduVA
// SIG // KmWjw11SYobDHWM2l4bf2vP48hahmifhzaWX0O5dY0Hj
// SIG // Wwechz4GdwbRBrF1HxS+YWG18NzGGwS+30HHDiju3mUv
// SIG // 7Jf2oVyW2ADWoUa9WfOXpQlLSBCZgB/QACnFsZulP0V3
// SIG // HjXG0qKin3p6IvpIlR+r+0cjgPWe+L9rt0uX4ut1eBrs
// SIG // 6jeZeRhL/9azI2h15q/6/IvrC4DqaTuv/DDtBEyO3991
// SIG // bWORPdGdVk5Pv4BXIqF4ETIheu9BCrE/+6jMpF3BoYib
// SIG // V3FWTkhFwELJm3ZbCoBIa/15n8G9bW1qyVJzEw16UM0x
// SIG // ghXhMIIV3QIBATCBlTB+MQswCQYDVQQGEwJVUzETMBEG
// SIG // A1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9u
// SIG // ZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBTaWduaW5n
// SIG // IFBDQSAyMDExAhMzAAABiK9S1rmSbej5AAAAAAGIMA0G
// SIG // CWCGSAFlAwQCAQUAoIIBJzAZBgkqhkiG9w0BCQMxDAYK
// SIG // KwYBBAGCNwIBBDAcBgorBgEEAYI3AgELMQ4wDAYKKwYB
// SIG // BAGCNwIBFTAvBgkqhkiG9w0BCQQxIgQgM+4xfAOKVgXD
// SIG // XGQ7iroHoqnzov4mvz2f+wakytlPQGEwgboGCisGAQQB
// SIG // gjcCAQwxgaswgaiggYmAgYYAUwBpAG0AcABsAGkAZgB5
// SIG // AEMAbwBtAG0AZQByAGMAZQAuAE0AaQBjAHIAbwBzAG8A
// SIG // ZgB0AEQAeQBuAGEAbQBpAGMAcwAuAEMAbwBuAG4AZQBj
// SIG // AHQAbwByAC4AUABvAHIAdABhAGIAbABlAC4AcgBlAHMA
// SIG // bwB1AHIAYwBlAHMALgBkAGwAbKEagBhodHRwOi8vd3d3
// SIG // Lm1pY3Jvc29mdC5jb20wDQYJKoZIhvcNAQEBBQAEggEA
// SIG // S1lutyuNY+6c0DwQIjbxqhg1xXrJAaTGk9WiN39bAhDH
// SIG // mWnNK3fNleUoqiXDofMX4qe1n0peWYv1UqYcT2tR2I7R
// SIG // ntT0BdE6daqYH455WDA4vE/Xof8FkMYRSLfpEf+MLd9W
// SIG // t3rPOTzzJOTi+aZQsoDggufsRXCsvw8MpErKLe4bstZH
// SIG // bJOQd3Mlc/TXnIn/9dwz+q6KussfOex0fb7dteYT6dOH
// SIG // zh7zyleGCGijOTXdCtHtiU1D4LS090tLp9FRLkdvklrz
// SIG // 9tX3NFwP0g1iZpAFDmeRcfgbLEiR1VJYdAqF2CraYKVp
// SIG // lP0GyghUk8BgJhF4KxcbeB6fXWAR2+pm56GCEvEwghLt
// SIG // BgorBgEEAYI3AwMBMYIS3TCCEtkGCSqGSIb3DQEHAqCC
// SIG // EsowghLGAgEDMQ8wDQYJYIZIAWUDBAIBBQAwggFVBgsq
// SIG // hkiG9w0BCRABBKCCAUQEggFAMIIBPAIBAQYKKwYBBAGE
// SIG // WQoDATAxMA0GCWCGSAFlAwQCAQUABCAoGI24lphXw+EP
// SIG // khmGo07LP6+sOqb+EvxiDlREvfooFwIGXzvk2832GBMy
// SIG // MDIwMDgyMzA0MDI1MC42NDVaMASAAgH0oIHUpIHRMIHO
// SIG // MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3Rv
// SIG // bjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWlj
// SIG // cm9zb2Z0IENvcnBvcmF0aW9uMSkwJwYDVQQLEyBNaWNy
// SIG // b3NvZnQgT3BlcmF0aW9ucyBQdWVydG8gUmljbzEmMCQG
// SIG // A1UECxMdVGhhbGVzIFRTUyBFU046RjdBNi1FMjUxLTE1
// SIG // MEExJTAjBgNVBAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1w
// SIG // IFNlcnZpY2Wggg5EMIIE9TCCA92gAwIBAgITMwAAASWL
// SIG // 3otsciYx3QAAAAABJTANBgkqhkiG9w0BAQsFADB8MQsw
// SIG // CQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQ
// SIG // MA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9z
// SIG // b2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3Nv
// SIG // ZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDAeFw0xOTEyMTkw
// SIG // MTE0NThaFw0yMTAzMTcwMTE0NThaMIHOMQswCQYDVQQG
// SIG // EwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UE
// SIG // BxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENv
// SIG // cnBvcmF0aW9uMSkwJwYDVQQLEyBNaWNyb3NvZnQgT3Bl
// SIG // cmF0aW9ucyBQdWVydG8gUmljbzEmMCQGA1UECxMdVGhh
// SIG // bGVzIFRTUyBFU046RjdBNi1FMjUxLTE1MEExJTAjBgNV
// SIG // BAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZpY2Uw
// SIG // ggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQ
// SIG // ex9jdmBb7OHJwSYmMUorZNwAcv8Vy36TlJuzcVx7G+lF
// SIG // qt2zjWOMlSOMkm1XoAuJ8VZ5ShBedADXDGDKxHNZhLu3
// SIG // EW8x5ot/IOk6izLTlAFtvIXOgzXs/HaOM72XHKykMZHA
// SIG // dL/fpZtASM5PalmsXX4Ol8lXkm9jR55K56C7q9+hDU+2
// SIG // tjGHaE1ZWlablNUXBhaZgtCJCd60UyZvgI7/uNzcafj0
// SIG // /Vw2bait9nDAVd24yt/XCZnHY3yX7ZsHjIuHpsl+PpDX
// SIG // ai1Dwe9p0ryCZsl9SOMHextIHe9qlTbtWYJ8WtWLoH9d
// SIG // EMQxVLnmPPDOVmBj7LZhSji38N9Vpz/FAgMBAAGjggEb
// SIG // MIIBFzAdBgNVHQ4EFgQU86rK5Qcm+QE5NBXGCPIiCBdD
// SIG // JPgwHwYDVR0jBBgwFoAU1WM6XIoxkPNDe3xGG8UzaFqF
// SIG // bVUwVgYDVR0fBE8wTTBLoEmgR4ZFaHR0cDovL2NybC5t
// SIG // aWNyb3NvZnQuY29tL3BraS9jcmwvcHJvZHVjdHMvTWlj
// SIG // VGltU3RhUENBXzIwMTAtMDctMDEuY3JsMFoGCCsGAQUF
// SIG // BwEBBE4wTDBKBggrBgEFBQcwAoY+aHR0cDovL3d3dy5t
// SIG // aWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNUaW1TdGFQ
// SIG // Q0FfMjAxMC0wNy0wMS5jcnQwDAYDVR0TAQH/BAIwADAT
// SIG // BgNVHSUEDDAKBggrBgEFBQcDCDANBgkqhkiG9w0BAQsF
// SIG // AAOCAQEAkxxZPGEgIgAhsqZNTZk58V1vQiJ5ja2xHl5T
// SIG // qGA6Hwj5SioLg3FSLiTmGV+BtFlpYUtkneB4jrZsuNpM
// SIG // tfbTMdG7p/xAyIVtwvXnTXqKlCD1T9Lcr94pVedzHGJz
// SIG // L1TYNQyZJBouCfzkgkzccOuFOfeWPfnMTiI5UBW5Odmo
// SIG // yHPQWDSGHoboW1dTKqXeJtuVDTYbHTKs4zjfCBMFjmyl
// SIG // Ru52Zpiz+9MBeRj4iAeou0F/3xvIzepoIKgUWCZ9mmVi
// SIG // WEkVwCtTGbV8eK73KeEE0tfMU/YY2UmoGPc8YwburDEf
// SIG // elegLW+YHkfrcGAGlftCmqtOdOLeghLoG0Ubx/B7sTCC
// SIG // BnEwggRZoAMCAQICCmEJgSoAAAAAAAIwDQYJKoZIhvcN
// SIG // AQELBQAwgYgxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpX
// SIG // YXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYD
// SIG // VQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xMjAwBgNV
// SIG // BAMTKU1pY3Jvc29mdCBSb290IENlcnRpZmljYXRlIEF1
// SIG // dGhvcml0eSAyMDEwMB4XDTEwMDcwMTIxMzY1NVoXDTI1
// SIG // MDcwMTIxNDY1NVowfDELMAkGA1UEBhMCVVMxEzARBgNV
// SIG // BAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQx
// SIG // HjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEm
// SIG // MCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENB
// SIG // IDIwMTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
// SIG // AoIBAQCpHQ28dxGKOiDs/BOX9fp/aZRrdFQQ1aUKAIKF
// SIG // ++18aEssX8XD5WHCdrc+Zitb8BVTJwQxH0EbGpUdzgkT
// SIG // jnxhMFmxMEQP8WCIhFRDDNdNuDgIs0Ldk6zWczBXJoKj
// SIG // RQ3Q6vVHgc2/JGAyWGBG8lhHhjKEHnRhZ5FfgVSxz5NM
// SIG // ksHEpl3RYRNuKMYa+YaAu99h/EbBJx0kZxJyGiGKr0tk
// SIG // iVBisV39dx898Fd1rL2KQk1AUdEPnAY+Z3/1ZsADlkR+
// SIG // 79BL/W7lmsqxqPJ6Kgox8NpOBpG2iAg16HgcsOmZzTzn
// SIG // L0S6p/TcZL2kAcEgCZN4zfy8wMlEXV4WnAEFTyJNAgMB
// SIG // AAGjggHmMIIB4jAQBgkrBgEEAYI3FQEEAwIBADAdBgNV
// SIG // HQ4EFgQU1WM6XIoxkPNDe3xGG8UzaFqFbVUwGQYJKwYB
// SIG // BAGCNxQCBAweCgBTAHUAYgBDAEEwCwYDVR0PBAQDAgGG
// SIG // MA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAU1fZW
// SIG // y4/oolxiaNE9lJBb186aGMQwVgYDVR0fBE8wTTBLoEmg
// SIG // R4ZFaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraS9j
// SIG // cmwvcHJvZHVjdHMvTWljUm9vQ2VyQXV0XzIwMTAtMDYt
// SIG // MjMuY3JsMFoGCCsGAQUFBwEBBE4wTDBKBggrBgEFBQcw
// SIG // AoY+aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraS9j
// SIG // ZXJ0cy9NaWNSb29DZXJBdXRfMjAxMC0wNi0yMy5jcnQw
// SIG // gaAGA1UdIAEB/wSBlTCBkjCBjwYJKwYBBAGCNy4DMIGB
// SIG // MD0GCCsGAQUFBwIBFjFodHRwOi8vd3d3Lm1pY3Jvc29m
// SIG // dC5jb20vUEtJL2RvY3MvQ1BTL2RlZmF1bHQuaHRtMEAG
// SIG // CCsGAQUFBwICMDQeMiAdAEwAZQBnAGEAbABfAFAAbwBs
// SIG // AGkAYwB5AF8AUwB0AGEAdABlAG0AZQBuAHQALiAdMA0G
// SIG // CSqGSIb3DQEBCwUAA4ICAQAH5ohRDeLG4Jg/gXEDPZ2j
// SIG // oSFvs+umzPUxvs8F4qn++ldtGTCzwsVmyWrf9efweL3H
// SIG // qJ4l4/m87WtUVwgrUYJEEvu5U4zM9GASinbMQEBBm9xc
// SIG // F/9c+V4XNZgkVkt070IQyK+/f8Z/8jd9Wj8c8pl5SpFS
// SIG // AK84Dxf1L3mBZdmptWvkx872ynoAb0swRCQiPM/tA6WW
// SIG // j1kpvLb9BOFwnzJKJ/1Vry/+tuWOM7tiX5rbV0Dp8c6Z
// SIG // ZpCM/2pif93FSguRJuI57BlKcWOdeyFtw5yjojz6f32W
// SIG // apB4pm3S4Zz5Hfw42JT0xqUKloakvZ4argRCg7i1gJsi
// SIG // OCC1JeVk7Pf0v35jWSUPei45V3aicaoGig+JFrphpxHL
// SIG // mtgOR5qAxdDNp9DvfYPw4TtxCd9ddJgiCGHasFAeb73x
// SIG // 4QDf5zEHpJM692VHeOj4qEir995yfmFrb3epgcunCaw5
// SIG // u+zGy9iCtHLNHfS4hQEegPsbiSpUObJb2sgNVZl6h3M7
// SIG // COaYLeqN4DMuEin1wC9UJyH3yKxO2ii4sanblrKnQqLJ
// SIG // zxlBTeCG+SqaoxFmMNO7dDJL32N79ZmKLxvHIa9Zta7c
// SIG // RDyXUHHXodLFVeNp3lfB0d4wwP3M5k37Db9dT+mdHhk4
// SIG // L7zPWAUu7w2gUDXa7wknHNWzfjUeCLraNtvTX4/edIhJ
// SIG // EqGCAtIwggI7AgEBMIH8oYHUpIHRMIHOMQswCQYDVQQG
// SIG // EwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UE
// SIG // BxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENv
// SIG // cnBvcmF0aW9uMSkwJwYDVQQLEyBNaWNyb3NvZnQgT3Bl
// SIG // cmF0aW9ucyBQdWVydG8gUmljbzEmMCQGA1UECxMdVGhh
// SIG // bGVzIFRTUyBFU046RjdBNi1FMjUxLTE1MEExJTAjBgNV
// SIG // BAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZpY2Wi
// SIG // IwoBATAHBgUrDgMCGgMVAEXTL+FQbc2G+3MXXvIRKVr2
// SIG // oXCnoIGDMIGApH4wfDELMAkGA1UEBhMCVVMxEzARBgNV
// SIG // BAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQx
// SIG // HjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEm
// SIG // MCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENB
// SIG // IDIwMTAwDQYJKoZIhvcNAQEFBQACBQDi7FH6MCIYDzIw
// SIG // MjAwODIzMDYyNDU4WhgPMjAyMDA4MjQwNjI0NThaMHcw
// SIG // PQYKKwYBBAGEWQoEATEvMC0wCgIFAOLsUfoCAQAwCgIB
// SIG // AAICHPkCAf8wBwIBAAICEZowCgIFAOLto3oCAQAwNgYK
// SIG // KwYBBAGEWQoEAjEoMCYwDAYKKwYBBAGEWQoDAqAKMAgC
// SIG // AQACAwehIKEKMAgCAQACAwGGoDANBgkqhkiG9w0BAQUF
// SIG // AAOBgQCU8FVIW29vUzOBCeDgXvm86i70+HyZlIP1nEW6
// SIG // ifuXuAk1tNgYp/gccaT4xtlkdvYBLru91J8o4o2yDbAG
// SIG // XjfzL/c7mfHUMhZEtcYgDEMcML7EirACrlTiqcY6Ogiv
// SIG // uNCCd9NpaU+un8wtkAo28hM8pcaLyl45vC9dBptIZ6NL
// SIG // RzGCAw0wggMJAgEBMIGTMHwxCzAJBgNVBAYTAlVTMRMw
// SIG // EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
// SIG // b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
// SIG // b24xJjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1w
// SIG // IFBDQSAyMDEwAhMzAAABJYvei2xyJjHdAAAAAAElMA0G
// SIG // CWCGSAFlAwQCAQUAoIIBSjAaBgkqhkiG9w0BCQMxDQYL
// SIG // KoZIhvcNAQkQAQQwLwYJKoZIhvcNAQkEMSIEIEtYVZXK
// SIG // Vn+S7Bb0JWyVtxYERqr6KuFg9kS85e1eB4yaMIH6Bgsq
// SIG // hkiG9w0BCRACLzGB6jCB5zCB5DCBvQQgXd/Gsi5vMF/6
// SIG // iX2CDh+VfmL5RvqaFkFwluiyje9B9w4wgZgwgYCkfjB8
// SIG // MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3Rv
// SIG // bjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWlj
// SIG // cm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNy
// SIG // b3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMAITMwAAASWL
// SIG // 3otsciYx3QAAAAABJTAiBCBcjAJ7/n1HI5lkgBqtqy8n
// SIG // K6V1W1gjGBCZC6wDmP1ZyzANBgkqhkiG9w0BAQsFAASC
// SIG // AQAAZ1dR3Kl+vZGrh1nIZOWsFVRPlg4GO9yHA/rO75H4
// SIG // h09v/w8y6YgWsCYMG7RiX6/M0de8TBu9VR3x78EwTDGx
// SIG // VRARcsW1u0kFfbL1fRN/9VhHShG0DViVx18GyV/e+1I/
// SIG // D2YhLSoBdMc0X1VMgRw1TNoDn15zJu1AF+0Ar1u5eEii
// SIG // gaDqhwSJN6gpIOyEysLp0Lg+We7G1w6H8GMxLJHKAl/F
// SIG // v5fBTu23TeRASsMz68ig0CVZax6hGug7NZPjR/QzRLYb
// SIG // uyuc17qvDTPPWXUJkEvpSAz3NgS2a7MUsv25/LrXjxSz
// SIG // KFdtZ8YBIQ3jaQ2BzBiJZVNYcZ30TABPgGJt
// SIG // End signature block
