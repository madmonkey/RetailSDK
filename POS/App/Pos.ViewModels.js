"use strict";
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var Managers = Commerce.Model.Managers;
        var ViewModelBase = (function () {
            function ViewModelBase(context) {
                var _this = this;
                this._asyncServiceManager = new Commerce.Lazy(function () {
                    return context.managerFactory.getManager(Managers.IAsyncServiceManagerName);
                });
                this._authenticationManager = new Commerce.Lazy(function () {
                    return context.managerFactory.getManager(Managers.IAuthenticationManagerName);
                });
                this._cartManager = new Commerce.Lazy(function () {
                    return context.managerFactory.getManager(Managers.ICartManagerName);
                });
                this._suspendedCartManager = new Commerce.Lazy(function () {
                    return context.managerFactory.getManager(Managers.ISuspendedCartManagerName);
                });
                this._channelManager = new Commerce.Lazy(function () {
                    return context.managerFactory.getManager(Managers.IChannelManagerName);
                });
                this._customerManager = new Commerce.Lazy(function () {
                    return context.managerFactory.getManager(Managers.ICustomerManagerName);
                });
                this._employeeManager = new Commerce.Lazy(function () {
                    return Managers.Factory.getManager(Managers.IEmployeeManagerName);
                });
                this._inventoryManager = new Commerce.Lazy(function () {
                    return context.managerFactory.getManager(Managers.IInventoryManagerName);
                });
                this._notificationManager = new Commerce.Lazy(function () {
                    return context.managerFactory.getManager(Managers.INotificationManagerName);
                });
                this._operatorManager = new Commerce.Lazy(function () {
                    return context.managerFactory.getManager(Managers.IOperatorManagerName);
                });
                this._paymentManager = new Commerce.Lazy(function () {
                    return context.managerFactory.getManager(Managers.IPaymentManagerName);
                });
                this._productManager = new Commerce.Lazy(function () {
                    return context.managerFactory.getManager(Managers.IProductManagerName);
                });
                this._checklistManager = new Commerce.Lazy(function () {
                    return Managers.Factory.getManager(Managers.IChecklistManagerName);
                });
                this._reportManager = new Commerce.Lazy(function () {
                    return context.managerFactory.getManager(Managers.IReportManagerName);
                });
                this._salesOrderManager = new Commerce.Lazy(function () {
                    return context.managerFactory.getManager(Managers.ISalesOrderManagerName);
                });
                this._stockCountJournalManager = new Commerce.Lazy(function () {
                    return context.managerFactory.getManager(Managers.IStockCountJournalManagerName);
                });
                this._storeOperationsManager = new Commerce.Lazy(function () {
                    return context.managerFactory.getManager(Managers.IStoreOperationsManagerName);
                });
                this._tillLayoutManager = new Commerce.Lazy(function () {
                    return context.managerFactory.getManager(Managers.ITillLayoutManagerName);
                });
                this._auditEventManager = new Commerce.Lazy(function () {
                    return context.managerFactory.getManager(Managers.IAuditEventManagerName);
                });
                this._fulfillmentManager = new Commerce.Lazy(function () {
                    return context.managerFactory.getManager(Managers.IFulfillmentManagerName);
                });
                this._warehouseManager = new Commerce.Lazy(function () {
                    return context.managerFactory.getManager(Managers.IWarehouseManagerName);
                });
                this._isBusyUntilCounter = ko.observable(0);
                this._isBusyWhenComputeds = ko.observableArray([]);
                this._isBusy = ko.computed(function () {
                    return _this._isBusyUntilCounter() > 0
                        || _this._isBusyWhenComputeds().some(function (isBusyWhenComputed) { return isBusyWhenComputed(); });
                });
                this.context = context;
            }
            ViewModelBase.prototype.dispose = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._isBusyWhenComputeds)) {
                    this._isBusyWhenComputeds.removeAll();
                }
                Commerce.ObjectExtensions.disposeAllProperties(this);
            };
            Object.defineProperty(ViewModelBase.prototype, "isBusy", {
                get: function () {
                    return this._isBusy;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ViewModelBase.prototype, "applicationContext", {
                get: function () {
                    return Commerce.ApplicationContext.Instance;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ViewModelBase.prototype, "asyncServiceManager", {
                get: function () {
                    return this._asyncServiceManager.value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ViewModelBase.prototype, "authenticationManager", {
                get: function () {
                    return this._authenticationManager.value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ViewModelBase.prototype, "cartManager", {
                get: function () {
                    return this._cartManager.value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ViewModelBase.prototype, "suspendedCartManager", {
                get: function () {
                    return this._suspendedCartManager.value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ViewModelBase.prototype, "channelManager", {
                get: function () {
                    return this._channelManager.value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ViewModelBase.prototype, "customerManager", {
                get: function () {
                    return this._customerManager.value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ViewModelBase.prototype, "employeeManager", {
                get: function () {
                    return this._employeeManager.value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ViewModelBase.prototype, "inventoryManager", {
                get: function () {
                    return this._inventoryManager.value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ViewModelBase.prototype, "notificationManager", {
                get: function () {
                    return this._notificationManager.value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ViewModelBase.prototype, "operatorManager", {
                get: function () {
                    return this._operatorManager.value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ViewModelBase.prototype, "operationsManager", {
                get: function () {
                    return Commerce.Operations.OperationsManager.instance;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ViewModelBase.prototype, "paymentManager", {
                get: function () {
                    return this._paymentManager.value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ViewModelBase.prototype, "productManager", {
                get: function () {
                    return this._productManager.value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ViewModelBase.prototype, "checklistManager", {
                get: function () {
                    return this._checklistManager.value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ViewModelBase.prototype, "reportManager", {
                get: function () {
                    return this._reportManager.value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ViewModelBase.prototype, "salesOrderManager", {
                get: function () {
                    return this._salesOrderManager.value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ViewModelBase.prototype, "stockCountJournalManager", {
                get: function () {
                    return this._stockCountJournalManager.value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ViewModelBase.prototype, "storeOperationsManager", {
                get: function () {
                    return this._storeOperationsManager.value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ViewModelBase.prototype, "tillLayoutManager", {
                get: function () {
                    return this._tillLayoutManager.value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ViewModelBase.prototype, "auditEventManager", {
                get: function () {
                    return this._auditEventManager.value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ViewModelBase.prototype, "fulfillmentManager", {
                get: function () {
                    return this._fulfillmentManager.value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ViewModelBase.prototype, "warehouseManager", {
                get: function () {
                    return this._warehouseManager.value;
                },
                enumerable: true,
                configurable: true
            });
            ViewModelBase.prototype.logNavigationEnd = function () {
                Commerce.PerformanceLogger.logNavigationEnd();
            };
            ViewModelBase.prototype._isBusyUntil = function (asyncResult) {
                var _this = this;
                this._isBusyUntilCounter(this._isBusyUntilCounter() + 1);
                return asyncResult.always(function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(_this._isBusyUntilCounter)) {
                        _this._isBusyUntilCounter(_this._isBusyUntilCounter() - 1);
                    }
                });
            };
            ViewModelBase.prototype._isBusyWhen = function (isBusyComputed) {
                this._isBusyWhenComputeds.push(isBusyComputed);
            };
            return ViewModelBase;
        }());
        ViewModels.ViewModelBase = ViewModelBase;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var ActivationViewModel = (function (_super) {
            __extends(ActivationViewModel, _super);
            function ActivationViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this.dbConnectivityStatus = ko.observable(Commerce.Proxy.Entities.HealthCheckConnectivityStatus.None);
                _this.rtsConnectivityStatus = ko.observable(Commerce.Proxy.Entities.HealthCheckConnectivityStatus.None);
                return _this;
            }
            ActivationViewModel.prototype.pingHealthCheck = function (healthCheckUrl) {
                var _this = this;
                this.setAllHealthCheckStatuses(Commerce.Proxy.Entities.HealthCheckConnectivityStatus.Connecting);
                this.checkServerConnectivityAsync(healthCheckUrl)
                    .done(function (healthCheckEntities) {
                    if (!Commerce.ArrayExtensions.hasElements(healthCheckEntities)) {
                        _this.setAllHealthCheckStatuses(Commerce.Proxy.Entities.HealthCheckConnectivityStatus.Failed);
                        return;
                    }
                    for (var i = 0; i < healthCheckEntities.length; i++) {
                        var entity = healthCheckEntities[i];
                        if (Commerce.ObjectExtensions.isNullOrUndefined(entity) ||
                            Commerce.StringExtensions.isNullOrWhitespace(entity.data)) {
                            continue;
                        }
                        if (entity.data.toLowerCase() === Commerce.HealthCheckParser.DB_CHECK) {
                            _this.dbConnectivityStatus(entity.success.toLowerCase() === true.toString() ?
                                Commerce.Proxy.Entities.HealthCheckConnectivityStatus.Succeeded : Commerce.Proxy.Entities.HealthCheckConnectivityStatus.Failed);
                        }
                        else if (entity.data.toLowerCase() === Commerce.HealthCheckParser.RTS_CHECK) {
                            _this.rtsConnectivityStatus(entity.success.toLowerCase() === true.toString() ?
                                Commerce.Proxy.Entities.HealthCheckConnectivityStatus.Succeeded : Commerce.Proxy.Entities.HealthCheckConnectivityStatus.Failed);
                        }
                    }
                    _this.setUnknownHealthCheck(_this.dbConnectivityStatus);
                    _this.setUnknownHealthCheck(_this.rtsConnectivityStatus);
                }).fail(function (errors) {
                    _this.setAllHealthCheckStatuses(Commerce.Proxy.Entities.HealthCheckConnectivityStatus.Failed);
                });
            };
            ActivationViewModel.prototype.checkServerConnectivityAsync = function (serverUrl) {
                return Commerce.Operations.CheckServerConnectivityOperation.operationProcessImpl(serverUrl);
            };
            ActivationViewModel.prototype.setAllHealthCheckStatuses = function (newStatus) {
                this.dbConnectivityStatus(newStatus);
                this.rtsConnectivityStatus(newStatus);
            };
            ActivationViewModel.prototype.getEmployeeStoresAsync = function () {
                return this.storeOperationsManager.getEmployeeStores();
            };
            ActivationViewModel.prototype.getTerminalInfoAsync = function (orgUnitNumber, deviceType) {
                return this.channelManager.getTerminalInfoAsync(orgUnitNumber, deviceType);
            };
            ActivationViewModel.prototype.getAvailableDevicesAsync = function () {
                return this.storeOperationsManager.getAvailableDevices(Commerce.Host.instance.application.getApplicationType());
            };
            ActivationViewModel.prototype.setUnknownHealthCheck = function (connectivityStatus) {
                if (connectivityStatus() === Commerce.Proxy.Entities.HealthCheckConnectivityStatus.Connecting) {
                    connectivityStatus(Commerce.Proxy.Entities.HealthCheckConnectivityStatus.Unknown);
                }
            };
            return ActivationViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.ActivationViewModel = ActivationViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var AddressAddEditViewModel = (function (_super) {
            __extends(AddressAddEditViewModel, _super);
            function AddressAddEditViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                _this.countryRegions = Commerce.ApplicationContext.Instance.countryRegions;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw new Error("Invalid options passed to the AddressAddEditViewModel constructor: options cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.saveAddressSelectionHandler)) {
                    throw new Error("Invalid options passed to the AddressAddEditViewModel constructor: options.saveAddressSelectionHandler cannot be null or undefined.");
                }
                _this._saveAddressSelectionHandler = options.saveAddressSelectionHandler;
                _this._saveAddressIsProcessing = ko.observable(false);
                _this._isBusyWhen(_this._saveAddressIsProcessing);
                var changeCallback = function () {
                    var clonedAddress = Commerce.ObjectExtensions.clone(ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(_this.addressProxy));
                    _this._sendMessageToExtensions("AddressUpdated", { address: clonedAddress });
                };
                _this.states = ko.observableArray([]);
                _this.addressProxy = ViewModels.Utilities.ObservableProxyHelper.cloneToObservableProxyObject(options.address || new Commerce.Proxy.Entities.AddressClass(), changeCallback);
                _this.customerProxy = ViewModels.Utilities.ObservableProxyHelper.cloneToObservableProxyObject(options.customer || new Commerce.Proxy.Entities.CustomerClass());
                if (Commerce.ObjectExtensions.isNullOrUndefined(_this.addressProxy.ThreeLetterISORegionName())) {
                    _this.addressProxy.ThreeLetterISORegionName(Commerce.ApplicationContext.Instance.storeInformation.OrgUnitAddress.ThreeLetterISORegionName);
                }
                _this.addressProxy.ThreeLetterISORegionName.subscribe(_this._countryChanged, _this);
                if (Commerce.StringExtensions.isNullOrWhitespace(_this.addressProxy.Name())) {
                    _this.addressProxy.Name = ko.observable(_this._getAddressName());
                }
                var isMarketingOptInEnable = Commerce.ApplicationSession.instance.featureStateContext.isFeatureEnabled(Commerce.Client.Entities.FeatureNameEnum.MarketingOptInFeature);
                if (Commerce.StringExtensions.isNullOrWhitespace(_this.addressProxy.Phone()) && isMarketingOptInEnable) {
                    _this.addressProxy.Phone = ko.observable(_this._getAddressPhone());
                }
                if (Commerce.StringExtensions.isNullOrWhitespace(_this.addressProxy.Email()) && isMarketingOptInEnable) {
                    _this.addressProxy.Email = ko.observable(_this._getAddressEmail());
                }
                _this.canSave = ko.computed(function () {
                    return _this._canSaveAddress();
                });
                _this._isExtensionCommandViewModelBusy = ko.observable(false);
                if (Commerce.ObjectExtensions.isNullOrUndefined(AddressAddEditViewModel._viewExtensionsManager)) {
                    _this._customControlViewModels = [];
                    _this._extensionCommandViewModels = [];
                }
                else {
                    _this._extensionCommandViewModels = AddressAddEditViewModel._viewExtensionsManager.getAppBarCommands()
                        .map(function (command) {
                        var commandVM = new ViewModels.CommandViewModel(command);
                        commandVM.addMessageHandler("UpdateAddress", _this._addressAddEditUpdateAddress.bind(_this));
                        commandVM.addMessageHandler("IsProcessingChanged", function (isProcessing) {
                            if (isProcessing) {
                                _this._isExtensionCommandViewModelBusy(true);
                            }
                            else {
                                var isAnyCommandProcessing = _this._extensionCommandViewModels.some(function (vm) {
                                    return vm.isProcessing;
                                });
                                _this._isExtensionCommandViewModelBusy(isAnyCommandProcessing);
                            }
                        });
                        return commandVM;
                    });
                    _this._isBusyWhen(_this._isExtensionCommandViewModelBusy);
                    _this._customControlViewModels = AddressAddEditViewModel._viewExtensionsManager.getCustomControls(_this._addressAddEditUpdateAddress.bind(_this));
                    var isCustomControlViewModelBusy = ko.computed(function () {
                        return _this._customControlViewModels.some(function (customControlViewModel) {
                            return customControlViewModel.isBusy();
                        });
                    });
                    _this._isBusyWhen(isCustomControlViewModelBusy);
                }
                _this._options = options;
                _this.showMultipleAddressTypes = ko.observable(false);
                _this.addressPurposes = ko.observableArray([]);
                _this.multiAddressPurposes = ko.observableArray([]);
                return _this;
            }
            AddressAddEditViewModel.prototype.loadAsync = function () {
                var _this = this;
                var state = this.addressProxy.State();
                var logisticsLocationRoleId = this.addressProxy.LogisticsLocationRoleRecordId();
                this._extensionCommandViewModels.forEach(function (vm) {
                    vm.sendMessage("Initialize", {
                        address: ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(_this.addressProxy),
                        customer: ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(_this.customerProxy)
                    });
                });
                this._customControlViewModels.forEach(function (vm) {
                    vm.init({
                        address: ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(_this.addressProxy),
                        customer: ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(_this.customerProxy)
                    });
                });
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue
                    .enqueue(function () {
                    return _this._isBusyUntil(_this._refreshStatesAsync(_this.addressProxy.ThreeLetterISORegionName()))
                        .done(function (states) {
                        _this.states(states);
                        _this.addressProxy.State(state || null);
                    });
                }).enqueue(function () {
                    return _this._setAddressPurposeAsync(logisticsLocationRoleId);
                });
                return asyncQueue.run();
            };
            AddressAddEditViewModel.prototype.cancelAddressAddEdit = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._saveAddressSelectionHandler)) {
                    this._saveAddressSelectionHandler.cancel();
                }
            };
            Object.defineProperty(AddressAddEditViewModel, "viewExtensionManager", {
                set: function (manager) {
                    AddressAddEditViewModel._viewExtensionsManager = manager;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AddressAddEditViewModel.prototype, "extensionCommandViewModels", {
                get: function () {
                    return this._extensionCommandViewModels;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AddressAddEditViewModel.prototype, "customControlViewModels", {
                get: function () {
                    return this._customControlViewModels;
                },
                enumerable: true,
                configurable: true
            });
            AddressAddEditViewModel.prototype.saveAddressAsync = function () {
                var _this = this;
                if (!this.canSave()) {
                    return Commerce.AsyncResult.createResolved({ canceled: true });
                }
                this._saveAddressIsProcessing(true);
                var saveAddressQueue = new Commerce.AsyncQueue();
                saveAddressQueue.enqueue(function () {
                    if (!_this._hasConflictedPrimaryAddress()) {
                        return Commerce.AsyncResult.createResolved();
                    }
                    return saveAddressQueue.cancelOn(Commerce.ViewModelAdapter.displayMessage("string_4847", Commerce.MessageType.Info, Commerce.MessageBoxButtons.YesNo)
                        .map(function (result) {
                        return { canceled: result !== Commerce.DialogResult.Yes };
                    }));
                }).enqueue(function () {
                    var preTriggerOptions = {
                        customer: ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(_this.customerProxy),
                        address: ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(_this.addressProxy)
                    };
                    return saveAddressQueue
                        .cancelOn(Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreSaveCustomerAddress, preTriggerOptions));
                }).enqueue(function (triggerResult) {
                    return saveAddressQueue.cancelOn(_this._updateAddress(triggerResult.data.customer, triggerResult.data.address));
                });
                return saveAddressQueue.run()
                    .done(function (result) {
                    if (!result.canceled) {
                        var options = {
                            customer: ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(_this.customerProxy),
                            address: ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(_this.addressProxy)
                        };
                        _this._saveAddressSelectionHandler.select(options, function () {
                            _this._saveAddressIsProcessing(false);
                        }, function (errors) {
                            _this._saveAddressIsProcessing(false);
                            Commerce.NotificationHandler.displayClientErrors(errors);
                        });
                    }
                }).fail(function (errors) {
                    _this._saveAddressIsProcessing(false);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            AddressAddEditViewModel.prototype.getSalesTaxGroups = function () {
                return this.channelManager.getSalesTaxGroups();
            };
            AddressAddEditViewModel.prototype.zipCodeChangedAsync = function () {
                var _this = this;
                if (!Commerce.StringExtensions.isEmptyOrWhitespace(this.addressProxy.ZipCode())) {
                    var asyncQueue_1 = new Commerce.AsyncQueue();
                    asyncQueue_1.enqueue(function () {
                        return _this.channelManager.getAddressFromZipCodeAsync(_this.addressProxy.ThreeLetterISORegionName(), _this.addressProxy.ZipCode());
                    }).enqueue(function (newZipCodeInfoCollection) {
                        if (Commerce.ArrayExtensions.hasElements(newZipCodeInfoCollection)) {
                            if (newZipCodeInfoCollection.length > 1) {
                                var selectZipCodeInfoClientRequest = new Commerce.SelectZipCodeInfoClientRequest(Commerce.LoggerHelper.getNewCorrelationId(), newZipCodeInfoCollection);
                                return asyncQueue_1.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(selectZipCodeInfoClientRequest)))
                                    .done(function (response) {
                                    if (!response.canceled) {
                                        _this._zipCodeInfoToAddress(response.data.result);
                                    }
                                });
                            }
                            else {
                                var zipCodeInfoItem = newZipCodeInfoCollection[0];
                                _this._zipCodeInfoToAddress(zipCodeInfoItem);
                            }
                        }
                        return Commerce.AsyncResult.createResolved();
                    });
                    return this._isBusyUntil(asyncQueue_1.run())
                        .fail(function (errors) {
                        Commerce.RetailLogger.viewModelAddressAddEditGetAddressFromZipCodeFailed();
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }
                else {
                    return Commerce.AsyncResult.createResolved();
                }
            };
            AddressAddEditViewModel.prototype._updateAddress = function (customer, address) {
                var _this = this;
                var matchingAddressFound = false;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                if (!Commerce.ArrayExtensions.hasElements(customer.Addresses)) {
                    customer.Addresses = [address];
                }
                else {
                    for (var i = 0; i < customer.Addresses.length; i++) {
                        if (customer.Addresses[i].RecordId === address.RecordId) {
                            customer.Addresses[i] = address;
                            matchingAddressFound = true;
                        }
                        else {
                            if (address.IsPrimary === true) {
                                customer.Addresses[i].IsPrimary = false;
                            }
                        }
                    }
                    if (!matchingAddressFound) {
                        customer.Addresses.push(address);
                    }
                }
                var accountNumber = customer.AccountNumber;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue
                    .enqueue(function () {
                    var updateCustomerServiceRequest = new Commerce.UpdateCustomerServiceRequest(correlationId, customer);
                    return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(updateCustomerServiceRequest)));
                }).enqueue(function () {
                    return _this.customerManager.getCustomerDetailsAsync(accountNumber)
                        .done(function (customerDetails) {
                        var address = matchingAddressFound
                            ? customerDetails.customer.Addresses.filter(function (address) {
                                return address.DirectoryPartyLocationRecordId === address.DirectoryPartyLocationRecordId;
                            })[0]
                            : customerDetails.customer.Addresses[customerDetails.customer.Addresses.length - 1];
                        _this.customerProxy.update(customerDetails.customer);
                        _this.addressProxy.update(address);
                    });
                });
                return asyncQueue.run();
            };
            AddressAddEditViewModel.prototype._hasConflictedPrimaryAddress = function () {
                var customerProxy = this.customerProxy;
                if (Commerce.ObjectExtensions.isNullOrUndefined(customerProxy)) {
                    return false;
                }
                var customer = ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(customerProxy);
                var addresses = customer.Addresses;
                if (Commerce.ObjectExtensions.isNullOrUndefined(addresses)) {
                    return false;
                }
                var updatedAddress = ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(this.addressProxy);
                return updatedAddress.IsPrimary &&
                    !Commerce.ObjectExtensions.isUndefined(Commerce.ArrayExtensions.firstOrUndefined(addresses, function (address) {
                        return address.RecordId !== updatedAddress.RecordId && address.IsPrimary === true;
                    }));
            };
            AddressAddEditViewModel.prototype._setAddressPurposeAsync = function (logisticsLocationRoleId) {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var getAddressPurposesServiceRequest = new Commerce.GetAddressPurposesServiceRequest(correlationId);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getAddressPurposesServiceRequest))
                    .done(function (addressPurposesResult) {
                    if (addressPurposesResult.canceled) {
                        return;
                    }
                    _this.addressPurposes(addressPurposesResult.data.addressPurposes);
                    _this.addressProxy.LogisticsLocationRoleRecordId(logisticsLocationRoleId);
                    _this.showMultipleAddressTypes(false);
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this._options.address)) {
                        var addressPurpose = null;
                        var addressTypeValue_1;
                        if (_this.customerProxy.CustomerTypeValue() === Commerce.Proxy.Entities.CustomerType.Organization) {
                            addressTypeValue_1 = Commerce.Client.Entities.ExtensibleAddressType.Business.Value;
                        }
                        else {
                            addressTypeValue_1 = Commerce.Client.Entities.ExtensibleAddressType.Home.Value;
                        }
                        addressPurpose = Commerce.ArrayExtensions.firstOrUndefined(addressPurposesResult.data.addressPurposes, function (purpose) {
                            return purpose.AddressType === addressTypeValue_1;
                        });
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(addressPurpose)) {
                            _this.addressProxy.LogisticsLocationRoleRecordId(addressPurpose.RecordId);
                        }
                    }
                    if (_this.addressProxy.RoleCount() > 1) {
                        _this.showMultipleAddressTypes(true);
                        _this._setMultiAddressPurposeText();
                    }
                });
            };
            AddressAddEditViewModel.prototype._setMultiAddressPurposeText = function () {
                var _this = this;
                var addressPurpose;
                addressPurpose = Commerce.ArrayExtensions.firstOrUndefined(this.addressPurposes(), function (purpose) {
                    return purpose.RecordId === _this.addressProxy.LogisticsLocationRoleRecordId();
                });
                if (!Commerce.ObjectExtensions.isNullOrUndefined(addressPurpose)) {
                    this.multiAddressPurposes.removeAll();
                    this.multiAddressPurposes.push({
                        RecordId: addressPurpose.RecordId,
                        Description: Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_4849"), addressPurpose.Description, (this.addressProxy.RoleCount() - 1)),
                        AddressType: addressPurpose.AddressType
                    });
                }
            };
            AddressAddEditViewModel.prototype._getAddressName = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.customerProxy)) {
                    if (Commerce.StringExtensions.isNullOrWhitespace(this.customerProxy.FirstName())) {
                        return !Commerce.StringExtensions.isNullOrWhitespace(this.customerProxy.Name()) ? this.customerProxy.Name() :
                            !Commerce.StringExtensions.isNullOrWhitespace(this.customerProxy.LastName()) ? this.customerProxy.LastName() : Commerce.StringExtensions.EMPTY;
                    }
                    var nameFormat = Commerce.ViewModelAdapter.getResourceString("string_1366");
                    return Commerce.StringExtensions.format(nameFormat, (this.customerProxy.FirstName() || ""), (this.customerProxy.LastName() || ""));
                }
                else {
                    return Commerce.StringExtensions.EMPTY;
                }
            };
            AddressAddEditViewModel.prototype._getAddressPhone = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.customerProxy) && !Commerce.StringExtensions.isNullOrWhitespace(this.customerProxy.Phone())) {
                    return this.customerProxy.Phone();
                }
                else {
                    return Commerce.StringExtensions.EMPTY;
                }
            };
            AddressAddEditViewModel.prototype._getAddressEmail = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.customerProxy) && !Commerce.StringExtensions.isNullOrWhitespace(this.customerProxy.Email())) {
                    return this.customerProxy.Email();
                }
                else {
                    return Commerce.StringExtensions.EMPTY;
                }
            };
            AddressAddEditViewModel.prototype._countryChanged = function () {
                var _this = this;
                this.states([]);
                this.addressProxy.State(null);
                this._isBusyUntil(this._refreshStatesAsync(this.addressProxy.ThreeLetterISORegionName()))
                    .done(function (states) {
                    _this.states(states);
                });
            };
            AddressAddEditViewModel.prototype._refreshStatesAsync = function (countryId) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(countryId)) {
                    return Commerce.AsyncResult.createResolved([]);
                }
                return this.channelManager.getStateProvincesAsync(countryId);
            };
            AddressAddEditViewModel.prototype._zipCodeInfoToAddress = function (zipCodeItem) {
                this.addressProxy.State(zipCodeItem.StateId);
                this.addressProxy.County(zipCodeItem.CountyId);
                this.addressProxy.City(zipCodeItem.CityName);
                this.addressProxy.DistrictName(zipCodeItem.District);
                if (Commerce.StringExtensions.isNullOrWhitespace(this.addressProxy.Street())) {
                    this.addressProxy.Street(zipCodeItem.StreetName);
                }
            };
            AddressAddEditViewModel.prototype._canSaveAddress = function () {
                var logisticsLocationRoleRecordId = this.addressProxy.LogisticsLocationRoleRecordId();
                return !Commerce.ObjectExtensions.isNullOrUndefined(logisticsLocationRoleRecordId) && logisticsLocationRoleRecordId !== 0;
            };
            AddressAddEditViewModel.prototype._addressAddEditUpdateAddress = function (data) {
                this.addressProxy.update(data.address);
            };
            AddressAddEditViewModel.prototype._sendMessageToExtensions = function (messageType, messageData) {
                if (Commerce.ArrayExtensions.hasElements(this.extensionCommandViewModels)) {
                    this.extensionCommandViewModels.forEach(function (vm) {
                        vm.sendMessage(messageType, messageData);
                    });
                }
                if (Commerce.ArrayExtensions.hasElements(this.customControlViewModels)) {
                    this.customControlViewModels.forEach(function (vm) {
                        vm.sendMessage(messageType, messageData);
                    });
                }
            };
            return AddressAddEditViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.AddressAddEditViewModel = AddressAddEditViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var AffiliationsViewModel = (function (_super) {
            __extends(AffiliationsViewModel, _super);
            function AffiliationsViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this._selectedAffiliations = ko.observableArray([]);
                _this.affiliations = ko.observableArray([]);
                return _this;
            }
            AffiliationsViewModel.prototype.loadAsync = function () {
                var _this = this;
                return this._isBusyUntil(this.cartManager.getAffiliationsAsync())
                    .done(function (affiliations) {
                    _this.affiliations(affiliations || []);
                })
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            AffiliationsViewModel.prototype.addAffiliationsToCartAsync = function () {
                var options = {
                    affiliationNames: [], affiliations: this._selectedAffiliations()
                };
                var operationResult = Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.AddAffiliation, options);
                return this._isBusyUntil(operationResult)
                    .done(function (result) {
                    if (!result.canceled) {
                        Commerce.ViewModelAdapter.navigate("CartView");
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            AffiliationsViewModel.prototype.selectAffiliations = function (selectedItems) {
                this._selectedAffiliations(selectedItems);
            };
            AffiliationsViewModel.prototype.preSelectAffiliations = function (dataListViewModel) {
                var indexes = [];
                var cartAffiliations = Commerce.Session.instance.cart.AffiliationLines;
                if (Commerce.ArrayExtensions.hasElements(cartAffiliations)) {
                    var affiliationIndexMap_1 = new Commerce.Dictionary();
                    var affiliations = this.affiliations();
                    for (var i = 0; i < affiliations.length; i++) {
                        affiliationIndexMap_1.setItem(affiliations[i].RecordId, i);
                    }
                    cartAffiliations.forEach(function (cartAffilition) {
                        var index = affiliationIndexMap_1.getItem(cartAffilition.AffiliationId);
                        if (!Commerce.ObjectExtensions.isUndefined(index)) {
                            indexes.push(index);
                        }
                    });
                }
                dataListViewModel.selectIndexes(indexes);
            };
            return AffiliationsViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.AffiliationsViewModel = AffiliationsViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var AllDiscountsViewModel = (function (_super) {
            __extends(AllDiscountsViewModel, _super);
            function AllDiscountsViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this._selectedLines = ko.observableArray([]);
                _this.isDetailsVisible = ko.observable(true);
                _this.reloadDiscountLinesCallback = ko.observable(function () { return; });
                _this.numberOfSelectedLines = ko.computed(function () {
                    return _this._selectedLines().length;
                });
                _this.discountsSearchCriteria = {};
                _this.selectedLineForDetail = ko.observable(null);
                _this.canViewLineDetails = ko.computed(function () {
                    var canViewLineDetails = false;
                    if (Commerce.ArrayExtensions.hasElements(_this._selectedLines()) && _this._selectedLines().length === 1) {
                        _this.selectedLineForDetail(_this._selectedLines()[0]);
                        canViewLineDetails = true;
                    }
                    else {
                        _this.selectedLineForDetail(null);
                    }
                    return canViewLineDetails;
                });
                _this._isBusyFlag = ko.observable(false);
                _this._isBusyWhen(ko.computed(function () { return _this._isBusyFlag(); }));
                return _this;
            }
            AllDiscountsViewModel.prototype.getAllDiscounts = function (pageSize, skip) {
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                this.discountsSearchCriteria.ChannelId = Commerce.Session.instance.productCatalogStore.Context.ChannelId;
                var activeDate = Commerce.DateExtensions.now;
                this.discountsSearchCriteria.StartDate = activeDate;
                this.discountsSearchCriteria.EndDate = activeDate;
                var getDiscountLinesRequest = new Commerce.StoreOperations.GetAllDiscountsClientRequest(correlationId, this.discountsSearchCriteria, pageSize, skip);
                Commerce.RetailLogger.GetAllDiscountsViewModelStarted(correlationId);
                return this._isBusyUntil(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getDiscountLinesRequest)))
                    .map(function (result) {
                    if (result.canceled || !Commerce.ArrayExtensions.hasElements(result.data.result)) {
                        Commerce.RetailLogger.GetAllDiscountsViewModelCanceled(correlationId);
                        return [];
                    }
                    Commerce.RetailLogger.GetAllDiscountsViewModelSucceeded(correlationId);
                    return result.data.result;
                }).fail(function (errors) {
                    Commerce.RetailLogger.GetAllDiscountsViewModelFailed(correlationId, Commerce.ErrorHelper.getErrorMessages(errors));
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            Object.defineProperty(AllDiscountsViewModel.prototype, "isBusyFlag", {
                get: function () {
                    return this._isBusyFlag;
                },
                enumerable: true,
                configurable: true
            });
            AllDiscountsViewModel.prototype.onSelectionChanged = function (promotions) {
                this._selectedLines(promotions);
            };
            AllDiscountsViewModel.prototype.filterDiscountLines = function () {
                var _this = this;
                var refiners = Commerce.DiscountsSearchCriteriaConverter.getRefiners(this.discountsSearchCriteria);
                var getRefinerValuesRequest = new Commerce.Refiners.GetRefinerValuesClientRequest(refiners, "string_4189", false, Commerce.ErrorTypeEnum.INVALID_SEARCH_CRITERIA);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getRefinerValuesRequest))
                    .done(function (result) {
                    if (!result.canceled) {
                        _this.discountsSearchCriteria = Commerce.DiscountsSearchCriteriaConverter.getDiscountsSearchCriteria(result.data.refiners);
                        _this._selectedLines([]);
                        _this.reloadDiscountLinesCallback()();
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            AllDiscountsViewModel.prototype.toggleDetails = function () {
                this.isDetailsVisible(!this.isDetailsVisible());
            };
            return AllDiscountsViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.AllDiscountsViewModel = AllDiscountsViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var AllStoresViewModel = (function (_super) {
            __extends(AllStoresViewModel, _super);
            function AllStoresViewModel() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AllStoresViewModel.prototype.isBusyWhen = function (isBusyComputed) {
                this._isBusyWhen(isBusyComputed);
            };
            return AllStoresViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.AllStoresViewModel = AllStoresViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var AvailableDiscountsViewModel = (function (_super) {
            __extends(AvailableDiscountsViewModel, _super);
            function AvailableDiscountsViewModel(context, cartLine) {
                var _this = _super.call(this, context) || this;
                _this.selectedCartLine = cartLine;
                return _this;
            }
            AvailableDiscountsViewModel.prototype.getCartPromotionsAsync = function (pageSize, skip) {
                return this._isBusyUntil(this.cartManager.getAvailablePromotionsAsync(Commerce.Session.instance.cart.Id, Commerce.StringExtensions.EMPTY, pageSize, skip)
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                }));
            };
            AvailableDiscountsViewModel.prototype.getSelectedCartLinePromotionsAsync = function (pageSize, skip) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.selectedCartLine) || this.selectedCartLine.IsVoided) {
                    return Commerce.AsyncResult.createResolved([]);
                }
                else {
                    return this._isBusyUntil(this.cartManager.getAvailablePromotionsAsync(Commerce.Session.instance.cart.Id, this.selectedCartLine.LineId, pageSize, skip)
                        .fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    }));
                }
            };
            AvailableDiscountsViewModel.prototype.addCouponCodeAsync = function (couponCodes, isLegacyDiscountCode) {
                if (isLegacyDiscountCode === void 0) { isLegacyDiscountCode = false; }
                return this._isBusyUntil(this.cartManager.addCouponsToCartAsync(couponCodes, isLegacyDiscountCode)
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                }));
            };
            AvailableDiscountsViewModel.prototype.removeCouponsAsync = function (couponCodes) {
                return this._isBusyUntil(this.cartManager.removeCouponsFromCartAsync(couponCodes)
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                }));
            };
            return AvailableDiscountsViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.AvailableDiscountsViewModel = AvailableDiscountsViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var RetailOperation = Commerce.Operations.RetailOperation;
        var CartViewTransactionDetailViewMode = (function () {
            function CartViewTransactionDetailViewMode() {
            }
            CartViewTransactionDetailViewMode.items = "items";
            CartViewTransactionDetailViewMode.payments = "payments";
            CartViewTransactionDetailViewMode.delivery = "delivery";
            return CartViewTransactionDetailViewMode;
        }());
        ViewModels.CartViewTransactionDetailViewMode = CartViewTransactionDetailViewMode;
        var CartViewModel = (function (_super) {
            __extends(CartViewModel, _super);
            function CartViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                _this._knockoutSubscriptions = [];
                _this._isBusyFlag = ko.observable(false);
                _this._isBusyWhen(ko.computed(function () { return _this._isBusyFlag(); }));
                _this._isBusyUntilCounterInternal = ko.observable(0);
                _this._isBusyWhen(ko.computed(function () { return _this._isBusyUntilCounterInternal() > 0; }));
                _this._isExtensionControllerProcessing = ko.observable(false);
                _this._isBusyWhen(ko.computed(function () { return _this._isExtensionControllerProcessing(); }));
                var subscription = _this.isBusy.subscribe(function (isBusy) {
                    if (!isBusy && !Commerce.Session.instance.isCartUpToDate(_this.cart())) {
                        _this.cart(Commerce.Session.instance.cart);
                    }
                });
                _this._knockoutSubscriptions.push(subscription);
                _this.isProcessTextRunning = ko.observable(false);
                subscription = _this.isProcessTextRunning.subscribe(function (newValue) {
                    _this.customerCardViewModel.setPreventInteraction(newValue);
                    _this._sendMessageToExtensions("ProcessingAddItemOrCustomerChanged", newValue);
                });
                _this._knockoutSubscriptions.push(subscription);
                _this._processTextWorkerQueue = new Commerce.CancellableAsyncWorkerQueue(_this._processTextWorkerQueueStatusCallback.bind(_this), true, true);
                var customerCardViewModelOptions = {
                    isLoyaltyCardDataReadOnly: false,
                    onAddressEditClicked: Commerce.ObjectExtensions.isNullOrUndefined(options) ? null : options.onAddressEditClicked
                };
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options) && Commerce.ObjectExtensions.isFunction(options.selectLoyaltyCardHandler)) {
                    customerCardViewModelOptions.chooseCardClick = options.selectLoyaltyCardHandler;
                }
                _this._customerCardViewModel = new ViewModels.CustomerCardViewModel(_this.context, customerCardViewModelOptions);
                _this.customerAccountDepositLines = ko.observableArray([]);
                _this.cart = ko.observable(Commerce.Session.instance.cart);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    _this._addSessionCartStateUpdateHandler = options.addSessionCartStateUpdateHandler;
                    _this._removeSessionCartStateUpdateHandler = options.removeSessionCartStateUpdateHandler;
                }
                _this._sessionCartStateUpdateHandler = function () {
                    if (!_this.isBusy()) {
                        _this.cart(Commerce.Session.instance.cart);
                    }
                };
                _this.selectedCartLines = ko.observableArray([]);
                _this.selectedTenderLines = ko.observableArray([]);
                _this.productRecommendationsPlaceholderMessage = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.updatingCartLines = ko.observable(false);
                _this.originalCartLines = ko.observableArray([]);
                _this.cartLinesTotalCount = ko.computed(_this.computedCartLinesTotalCount, _this);
                _this.incomeExpenseAccountLines = ko.observableArray(_this.cart().IncomeExpenseLines);
                _this.isGridBusy = ko.computed(function () {
                    return (_this.isProcessTextRunning() || _this.updatingCartLines()) && !_this.isBusy();
                });
                _this.subtotalAmountWithoutTax = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.cart()) ? _this.cart().SubtotalAmountWithoutTax : 0;
                });
                _this.discountAmount = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.cart()) ? _this.cart().DiscountAmount : 0;
                });
                _this.taxAmount = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.cart()) ? _this.cart().TaxAmount : 0;
                });
                _this.amountDue = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.cart()) ? _this.cart().AmountDue : 0;
                });
                _this.chargeAmount = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.cart()) ? _this.cart().ChargeAmount : 0;
                });
                _this.amountPaid = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.cart()) ? _this.cart().AmountPaid : 0;
                });
                _this.totalItems = ko.computed(function () {
                    return (!Commerce.ObjectExtensions.isNullOrUndefined(_this.cart()) &&
                        !Commerce.ObjectExtensions.isNullOrUndefined(_this.cart().TotalItems)) ?
                        _this.cart().TotalItems : 0;
                });
                _this.totalReturnAmount = ko.computed(function () {
                    return (!Commerce.ObjectExtensions.isNullOrUndefined(_this.cart()) &&
                        !Commerce.ObjectExtensions.isNullOrUndefined(_this.cart().TotalReturnAmount)) ?
                        _this.cart().TotalReturnAmount : 0;
                });
                _this.totalCarryoutAmount = ko.computed(function () {
                    return (!Commerce.ObjectExtensions.isNullOrUndefined(_this.cart()) &&
                        !Commerce.ObjectExtensions.isNullOrUndefined(_this.cart().TotalCarryoutSalesAmount)) ?
                        _this.cart().TotalCarryoutSalesAmount : 0;
                });
                _this.requiredDepositAmount = ko.computed(function () {
                    return (!Commerce.ObjectExtensions.isNullOrUndefined(_this.cart()) &&
                        !Commerce.ObjectExtensions.isNullOrUndefined(_this.cart().RequiredDepositWithoutCarryoutAmount)) ?
                        _this.cart().RequiredDepositWithoutCarryoutAmount : 0;
                });
                _this.totalAmount = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.cart()) ? _this.cart().TotalAmount : 0;
                });
                _this.taxOnCancellationCharge = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.cart()) ? _this.cart().TaxOnCancellationCharge : 0;
                });
                _this.cartHasCharges = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.cart()) &&
                        !Commerce.ObjectExtensions.isNullOrUndefined(_this.cart().ChargeAmount) &&
                        _this.cart().ChargeAmount !== 0;
                });
                _this.isCustomerOrderCancellation = ko.computed(function () {
                    return Commerce.CustomerOrderHelper.isCustomerOrderCancellation(_this.cart());
                });
                _this.isCustomerOrderCreationOrEdition = ko.computed(function () {
                    return Commerce.CustomerOrderHelper.isCustomerOrderCreationOrEdition(_this.cart());
                });
                _this.isCustomerOrderPickup = ko.computed(function () {
                    return Commerce.CustomerOrderHelper.isCustomerOrderPickup(_this.cart());
                });
                _this.isCustomerOrderExchange = ko.computed(function () {
                    return Commerce.CustomerOrderHelper.isCustomerOrderWithExchange(_this.cart());
                });
                _this.isCustomerOrderEdit = ko.computed(function () {
                    return Commerce.CustomerOrderHelper.isCustomerOrderEdition(_this.cart());
                });
                _this.isCustomerOrder = ko.computed(function () {
                    return Commerce.CustomerOrderHelper.isCustomerOrder(_this.cart());
                });
                _this.tenderLines = ko.observableArray([]);
                _this.depositPaid = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.cart()) &&
                        !Commerce.ObjectExtensions.isNullOrUndefined(_this.cart().PrepaymentAmountPaid) ?
                        _this.cart().PrepaymentAmountPaid : 0;
                }, _this);
                _this.depositApplied = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.cart()) &&
                        !Commerce.ObjectExtensions.isNullOrUndefined(_this.cart().PrepaymentAppliedOnPickup) ?
                        _this.cart().PrepaymentAppliedOnPickup : 0;
                }, _this);
                _this._reasonCodesInCartByReasonCodeId = new Commerce.Dictionary();
                subscription = _this.cart.subscribe(_this._cartViewModelCartUpdateCallback, _this);
                _this._knockoutSubscriptions.push(subscription);
                _this.buttonGrids = ko.observableArray([]);
                _this.buttonGridNames = ko.observableArray([]);
                _this.countUsableButtonGrids = ko.computed(function () {
                    var count = 0;
                    _this.buttonGrids().forEach(function (buttonGrid) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(buttonGrid)) {
                            count++;
                        }
                    });
                    return count;
                });
                _this.recommendedProducts = ko.observableArray([]);
                _this.maxNumberOfRecommendedProducts = ko.observable(null);
                _this.productIdsUsedToRetrieveRecommendedProducts = new Array();
                _this.customerIdUsedToRetrieveRecommendedProducts = Commerce.StringExtensions.EMPTY;
                _this.viewMode = ko.observable(null);
                _this._isProcessingPayment = false;
                var customLinesGridColumns;
                var customPaymentsGridColumns;
                var customDeliveryGridColumns;
                var customLinesGridItemSubfields;
                var customPaymentsGridItemSubfields;
                var customDeliveryGridItemSubfields;
                if (Commerce.ObjectExtensions.isNullOrUndefined(CartViewModel._viewExtensionsManager)) {
                    _this._extensionViewControllers = [];
                    _this._customControlViewModels = [];
                    _this._totalsPanelCustomFieldViewModels = [];
                    customLinesGridColumns = new Commerce.Extensibility.CustomGridColumnsViewModel(Object.create(null), "LinesGrid", "CartView");
                    customPaymentsGridColumns = new Commerce.Extensibility.CustomGridColumnsViewModel(Object.create(null), "PaymentsGrid", "CartView");
                    customDeliveryGridColumns = new Commerce.Extensibility.CustomGridColumnsViewModel(Object.create(null), "DeliveryGrid", "CartView");
                    customPaymentsGridItemSubfields = new Commerce.Extensibility.CustomGridItemSubfieldsViewModel([]);
                    customLinesGridItemSubfields = new Commerce.Extensibility.CustomGridItemSubfieldsViewModel([]);
                    customDeliveryGridItemSubfields = new Commerce.Extensibility.CustomGridItemSubfieldsViewModel([]);
                }
                else {
                    _this._extensionViewControllers = CartViewModel._viewExtensionsManager.getExtensionViewControllers();
                    _this._customControlViewModels = CartViewModel._viewExtensionsManager.getCustomControls(_this._setSelectedCartLines.bind(_this));
                    _this._extensionViewControllers.forEach(function (vc) {
                        vc.addMessageHandler("SetSelectedCartLines", _this._setSelectedCartLines.bind(_this));
                        vc.addMessageHandler("IsProcessingChanged", function (isProcessing) {
                            _this._isExtensionControllerProcessing(isProcessing);
                        });
                    });
                    var isACustomControlBusy = ko.computed(function () {
                        return _this._customControlViewModels.some(function (vm) {
                            return vm.isBusy();
                        });
                    });
                    _this._isBusyWhen(isACustomControlBusy);
                    _this._totalsPanelCustomFieldViewModels = CartViewModel._viewExtensionsManager.getTotalsPanelCustomFields().map(function (field) {
                        return new Commerce.Extensibility.CartViewTotalsPanelCustomFieldViewModel(field);
                    });
                    customLinesGridColumns = CartViewModel._viewExtensionsManager.getCustomLinesGridColumns();
                    customPaymentsGridColumns = CartViewModel._viewExtensionsManager.getCustomPaymentsGridColumns();
                    customDeliveryGridColumns = CartViewModel._viewExtensionsManager.getCustomDeliveryGridColumns();
                    customPaymentsGridItemSubfields = new Commerce.Extensibility.CustomGridItemSubfieldsViewModel([]);
                    customLinesGridItemSubfields = CartViewModel._viewExtensionsManager.getCustomLinesGridItemSubfields();
                    customDeliveryGridItemSubfields = new Commerce.Extensibility.CustomGridItemSubfieldsViewModel([]);
                    _this._subscribeSelectedLinesChanges();
                }
                _this._lineGridViewModel = new Commerce.Extensibility.DesignerGridViewModel(Commerce.ApplicationContext.Instance.tillLayoutProxy.transactionScreenLayout, customLinesGridColumns, customLinesGridItemSubfields);
                _this._paymentGridViewModel = new Commerce.Extensibility.DesignerGridViewModel(Commerce.ApplicationContext.Instance.tillLayoutProxy.transactionScreenLayout, customPaymentsGridColumns, customPaymentsGridItemSubfields);
                _this._deliveryGridViewModel = new Commerce.Extensibility.DesignerGridViewModel(Commerce.ApplicationContext.Instance.tillLayoutProxy.transactionScreenLayout, customDeliveryGridColumns, customDeliveryGridItemSubfields);
                _this.ariaLabelAmountDue = ko.computed(function () {
                    var linkLabel = Commerce.ObjectExtensions.isNumber(_this.cart().AmountDue) && _this.cart().AmountDue <= 0 ? "string_1816" : "string_123";
                    return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_1831"), Commerce.ViewModelAdapter.getResourceString(linkLabel), (Commerce.NumberExtensions.formatCurrency(_this.cart().AmountDue || 0)));
                });
                var salesOrderAttributesViewModelOptions = {};
                _this._salesOrderAttributesViewModel = new ViewModels.SalesOrderAttributesViewModel(_this.context, salesOrderAttributesViewModelOptions);
                _this._isBusyWhen(ko.computed(function () { return _this.salesOrderAttributesViewModel.isBusy(); }));
                _this.textProcessingIsEnabled = true;
                return _this;
            }
            Object.defineProperty(CartViewModel, "viewExtensionManager", {
                set: function (manager) {
                    CartViewModel._viewExtensionsManager = manager;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CartViewModel.prototype, "customerCardViewModel", {
                get: function () {
                    return this._customerCardViewModel;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CartViewModel.prototype, "customer", {
                get: function () {
                    return this._customerCardViewModel.customer;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CartViewModel.prototype, "customerLoyaltyCards", {
                get: function () {
                    return this._customerCardViewModel.customerLoyaltyCards;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CartViewModel.prototype, "canAddPayment", {
                get: function () {
                    var cart = Commerce.Session.instance.cart;
                    var balanceDue = cart.AmountDue;
                    return !this._isProcessingPayment
                        && ((Commerce.ArrayExtensions.hasElements(cart.CartLines)
                            || Commerce.ArrayExtensions.hasElements(cart.IncomeExpenseLines)
                            || Commerce.ArrayExtensions.hasElements(cart.CustomerAccountDepositLines))
                            && balanceDue !== 0);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CartViewModel.prototype, "canCheckout", {
                get: function () {
                    var validationErrors = Commerce.Operations.CartValidators.cartIsReadyForCheckout(Commerce.Session.instance.cart);
                    return !Commerce.ArrayExtensions.hasElements(validationErrors);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CartViewModel.prototype, "cartHasCustomer", {
                get: function () {
                    var cart = Commerce.Session.instance.cart;
                    var customer = this.customer();
                    var isCartCreated = !Commerce.ObjectExtensions.isNullOrUndefined(cart) && !Commerce.StringExtensions.isNullOrWhitespace(cart.Id);
                    var cartHasCustomer = !Commerce.ObjectExtensions.isNullOrUndefined(customer) && !Commerce.StringExtensions.isNullOrWhitespace(customer.AccountNumber);
                    return isCartCreated && cartHasCustomer;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CartViewModel.prototype, "customControlViewModels", {
                get: function () {
                    return this._customControlViewModels;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CartViewModel.prototype, "totalsPanelCustomFieldViewModels", {
                get: function () {
                    return this._totalsPanelCustomFieldViewModels;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CartViewModel.prototype, "lineGridViewModel", {
                get: function () {
                    return this._lineGridViewModel;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CartViewModel.prototype, "paymentGridViewModel", {
                get: function () {
                    return this._paymentGridViewModel;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CartViewModel.prototype, "deliveryGridViewModel", {
                get: function () {
                    return this._deliveryGridViewModel;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CartViewModel.prototype, "salesOrderAttributesViewModel", {
                get: function () {
                    return this._salesOrderAttributesViewModel;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CartViewModel.prototype, "textProcessingIsEnabled", {
                get: function () {
                    return this._textProcessingIsEnabled;
                },
                set: function (value) {
                    this._textProcessingIsEnabled = value;
                },
                enumerable: true,
                configurable: true
            });
            CartViewModel.prototype.dispose = function () {
                this._knockoutSubscriptions.forEach(function (subscription) {
                    subscription.dispose();
                });
                this._knockoutSubscriptions.splice(0, this._knockoutSubscriptions.length);
                _super.prototype.dispose.call(this);
            };
            CartViewModel.prototype.setCart = function (newCart) {
                this.cart(newCart);
            };
            CartViewModel.prototype.load = function () {
                var _this = this;
                var transactionViewButtonGridZones = ["TransactionScreen1", "TransactionScreen2", "TransactionScreen3", "TransactionScreen4", "TransactionScreen5", "TransactionScreen6",
                    "TransactionScreen7", "TransactionScreen8", "TransactionScreen9", "TransactionScreen10"];
                var buttonGridDictionary = this.applicationContext.tillLayoutProxy.getButtonGridByZoneIds(transactionViewButtonGridZones);
                transactionViewButtonGridZones.forEach(function (buttonGridId) {
                    var buttonGrid = buttonGridDictionary.getItem(buttonGridId);
                    _this.buttonGrids.push(buttonGrid);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(buttonGrid)) {
                        _this.buttonGridNames.push(buttonGrid.Name);
                    }
                    else {
                        _this.buttonGridNames.push(Commerce.StringExtensions.EMPTY);
                    }
                });
                var cartUpdateAsyncResult = this._cartUpdateHandlerAsync(this.cart()).done(function () {
                    var cart = _this.cart();
                    var customer = _this.customer();
                    var loyaltyCard = _this._getSelectedLoyaltyCard();
                    var products = _this._getProductsInCart();
                    _this._customControlViewModels.forEach(function (vm) {
                        vm.init({ cart: cart, customer: customer, loyaltyCard: loyaltyCard, products: products });
                    });
                    _this._extensionViewControllers.forEach(function (vc) {
                        vc.init({ cart: cart, customer: customer, loyaltyCard: loyaltyCard, products: products });
                    });
                });
                var salesOrderAttributesViewModelLoadResult = this.salesOrderAttributesViewModel.loadAsync().done(function () {
                    _this.salesOrderAttributesViewModel.updateCart(_this.cart());
                    _this.salesOrderAttributesViewModel.updateCartLine(Commerce.ArrayExtensions.hasElements(_this.selectedCartLines())
                        ? _this.selectedCartLines()[0]
                        : null);
                });
                return Commerce.VoidAsyncResult.join([cartUpdateAsyncResult, salesOrderAttributesViewModelLoadResult]);
            };
            CartViewModel.prototype.onShown = function () {
                this._addSessionCartStateUpdateHandler(this._sessionCartStateUpdateHandler);
                this.textProcessingIsEnabled = true;
            };
            CartViewModel.prototype.onHidden = function () {
                this._removeSessionCartStateUpdateHandler(this._sessionCartStateUpdateHandler);
            };
            CartViewModel.prototype.processText = function (searchText, quantity, itemEntryType) {
                var _this = this;
                return this._processTextWorkerQueue.enqueue(function () {
                    var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                    if (!_this.textProcessingIsEnabled) {
                        Commerce.RetailLogger.viewModelCartProcessTextSkipped(correlationId, searchText);
                        return Commerce.AsyncResult.createResolved({ canceled: true, data: null });
                    }
                    else {
                        Commerce.RetailLogger.viewModelCartProcessTextStarted(correlationId, searchText);
                        var processTextResult_1 = { cartUpdated: false };
                        var scanResult_1 = null;
                        var processTextInstanceQueue_1 = new Commerce.AsyncQueue();
                        processTextInstanceQueue_1.enqueue(function () {
                            var request = new Commerce.GetScanResultClientRequest(searchText, correlationId);
                            return processTextInstanceQueue_1.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request)))
                                .done(function (result) {
                                if (!result.canceled) {
                                    scanResult_1 = result.data.result;
                                }
                            });
                        }).enqueue(function () {
                            var barcodeMaskType = scanResult_1.MaskTypeValue;
                            var processingResult;
                            switch (barcodeMaskType) {
                                case Commerce.Proxy.Entities.BarcodeMaskType.Item:
                                    Commerce.RetailLogger.viewModelCartProcessItemScanStarted(correlationId);
                                    processingResult = _this.processItemScan(scanResult_1, processTextResult_1, correlationId, itemEntryType, quantity)
                                        .done(function () {
                                        Commerce.RetailLogger.viewModelCartProcessItemScanFinished(correlationId);
                                    }).fail(function (errors) {
                                        Commerce.RetailLogger.viewModelCartProcessItemScanFailed(correlationId);
                                    });
                                    break;
                                case Commerce.Proxy.Entities.BarcodeMaskType.Customer:
                                    if (Commerce.ObjectExtensions.isNullOrUndefined(scanResult_1.Customer)) {
                                        var customerNotFoundError = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CUSTOMER_ASSOCIATED_WITH_BARCODE_NOT_FOUND);
                                        return Commerce.VoidAsyncResult.createRejected([customerNotFoundError]);
                                    }
                                    Commerce.RetailLogger.viewModelCartProcessCustomerScanResultStarted(correlationId);
                                    var customerOptions = {
                                        cartAffiliations: undefined,
                                        customerId: scanResult_1.Customer.AccountNumber,
                                        customer: scanResult_1.Customer,
                                        correlationId: correlationId
                                    };
                                    var setCustomerOperationResult = _this.operationsManager.runOperation(RetailOperation.SetCustomer, customerOptions);
                                    processingResult = _this.handleCartUpdateScanResult(setCustomerOperationResult, processTextResult_1);
                                    break;
                                case Commerce.Proxy.Entities.BarcodeMaskType.LoyaltyCard:
                                    Commerce.RetailLogger.viewModelCartProcessLoyaltyCardScanResultStarted(correlationId);
                                    var loyaltyOptions = {
                                        loyaltyCard: scanResult_1.LoyaltyCard,
                                        customer: scanResult_1.Customer
                                    };
                                    var loyaltyRequestOperationResult = _this.operationsManager.runOperation(RetailOperation.LoyaltyRequest, loyaltyOptions);
                                    processingResult = _this.handleCartUpdateScanResult(loyaltyRequestOperationResult, processTextResult_1);
                                    break;
                                case Commerce.Proxy.Entities.BarcodeMaskType.DiscountCode:
                                    Commerce.RetailLogger.viewModelCartProcessDiscountCodeScanResultStarted(correlationId);
                                    var discountCodeOptions = {
                                        couponCode: scanResult_1.Barcode.DiscountCode,
                                        isLegacyDiscountCode: true
                                    };
                                    var addDiscountCodeOperationResult = _this.operationsManager.runOperation(RetailOperation.AddCoupons, discountCodeOptions);
                                    processingResult = _this.handleCartUpdateScanResult(addDiscountCodeOperationResult, processTextResult_1);
                                    break;
                                case Commerce.Proxy.Entities.BarcodeMaskType.Coupon:
                                    Commerce.RetailLogger.viewModelCartProcessCouponCodeScanResultStarted(correlationId);
                                    var request = new Commerce.AddCouponsOperationRequest(correlationId, scanResult_1.Barcode.CouponId);
                                    var addCouponOperationResult = Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request));
                                    processingResult = _this.handleCartUpdateScanResult(addCouponOperationResult, processTextResult_1);
                                    break;
                                case Commerce.Proxy.Entities.BarcodeMaskType.None:
                                    return _this.searchProductsAndCustomers(searchText, processTextResult_1);
                                default:
                                    Commerce.RetailLogger.viewModelUnsupportedBarcodeMaskType(Commerce.Proxy.Entities.BarcodeMaskType[barcodeMaskType]);
                                    var barcodeTypeNotSupportedError = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.BARCODE_TYPE_NOT_SUPPORTED);
                                    return Commerce.VoidAsyncResult.createRejected([barcodeTypeNotSupportedError]);
                            }
                            return processTextInstanceQueue_1.cancelOn(processingResult);
                        });
                        return processTextInstanceQueue_1.run().map(function (queueResult) {
                            Commerce.RetailLogger.viewModelCartProcessTextFinished(correlationId);
                            return { canceled: queueResult.canceled, data: processTextResult_1 };
                        }).fail(function (processTextErrors) {
                            Commerce.RetailLogger.viewModelCartProcessTextFailed(correlationId, Commerce.ErrorHelper.getErrorMessages(processTextErrors));
                        });
                    }
                });
            };
            CartViewModel.prototype.addLoyaltyCardToCartAsync = function (correlationId, loyaltyCardId) {
                var operationRequest = new Commerce.AddLoyaltyCardToCartOperationRequest(correlationId, loyaltyCardId);
                return this.isBusyUntil(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(operationRequest)));
            };
            CartViewModel.prototype.canAddIncomeExpenseLine = function () {
                var cart = Commerce.Session.instance.cart;
                if (Commerce.StringExtensions.isNullOrWhitespace(cart.Id)
                    || !(Commerce.ArrayExtensions.hasElements(cart.CartLines)
                        || Commerce.ArrayExtensions.hasElements(cart.CustomerAccountDepositLines)
                        || Commerce.StringExtensions.isNullOrWhitespace(cart.CustomerId)
                        || Commerce.ArrayExtensions.hasElements(cart.IncomeExpenseLines))) {
                    return true;
                }
                else {
                    return false;
                }
            };
            CartViewModel.prototype.isTransactionGridRowExpandable = function (observableItem) {
                var cartLine = observableItem.item();
                var product = Commerce.Session.instance.getFromProductsInCartCache(cartLine.ProductId);
                var isVariant = !Commerce.ObjectExtensions.isNullOrUndefined(product) && product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Variant;
                var isKitVariant = !Commerce.ObjectExtensions.isNullOrUndefined(product) && product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.KitVariant;
                var isExpandable = isVariant ||
                    isKitVariant ||
                    cartLine.IsPriceOverridden ||
                    !Commerce.StringExtensions.isNullOrWhitespace(cartLine.Comment) ||
                    !Commerce.StringExtensions.isNullOrWhitespace(cartLine.SerialNumber) ||
                    !Commerce.StringExtensions.isNullOrWhitespace(cartLine.WarrantableSerialNumber) ||
                    !Commerce.StringExtensions.isNullOrWhitespace(cartLine.Barcode) ||
                    (Commerce.ApplicationContext.Instance.deviceConfiguration.DisplayTaxExemptInLineDetails &&
                        !Commerce.StringExtensions.isNullOrWhitespace(cartLine.TaxOverrideCode) && cartLine.IsTaxOverideCodeTaxExempt) ||
                    Commerce.ArrayExtensions.hasElements(cartLine.ReasonCodeLines) ||
                    Commerce.ArrayExtensions.hasElements(cartLine.DiscountLines) ||
                    this.isSerialNumberWarningVisible(cartLine, product) ||
                    this.lineGridViewModel.customItemSubfieldsViewModel.hasVisibleCustomGridItemSubfields(cartLine);
                return isExpandable;
            };
            CartViewModel.prototype.isCartLineVoided = function (observableItem) {
                var cartLine = observableItem.item();
                return cartLine.IsVoided === true;
            };
            CartViewModel.prototype.isCartTenderLineVoided = function (tenderLine) {
                return tenderLine.StatusValue === Commerce.Proxy.Entities.TenderLineStatus.Voided;
            };
            CartViewModel.prototype.payCashAsync = function (tenderType, maxRefund) {
                var options = { tenderType: tenderType, correlationId: Commerce.StringExtensions.EMPTY, maxRefundAmount: maxRefund };
                return this.payAsync(Commerce.Operations.RetailOperation.PayCash, options);
            };
            CartViewModel.prototype.payCashQuickAsync = function (tenderType) {
                var _this = this;
                var options = { tenderType: tenderType, correlationId: Commerce.StringExtensions.EMPTY };
                this._isProcessingPayment = true;
                return this.payAsync(Commerce.Operations.RetailOperation.PayCashQuick, options).always(function () {
                    _this._isProcessingPayment = false;
                });
            };
            CartViewModel.prototype.payCheckAsync = function (tenderType, maxRefund) {
                var options = { tenderType: tenderType, correlationId: Commerce.StringExtensions.EMPTY, maxRefundAmount: maxRefund };
                return this.payAsync(Commerce.Operations.RetailOperation.PayCheck, options);
            };
            CartViewModel.prototype.payCurrencyAsync = function (tenderType, maxRefund) {
                var options = {
                    tenderType: tenderType, correlationId: Commerce.StringExtensions.EMPTY, maxRefundAmount: maxRefund
                };
                return this.payAsync(Commerce.Operations.RetailOperation.PayCurrency, options);
            };
            CartViewModel.prototype.payCustomerAccountAsync = function (tenderType, maxRefund) {
                var options = {
                    tenderType: tenderType, correlationId: Commerce.StringExtensions.EMPTY, maxRefundAmount: maxRefund
                };
                return this.payAsync(Commerce.Operations.RetailOperation.PayCustomerAccount, options);
            };
            CartViewModel.prototype.payCreditMemoAsync = function (correlationId, tenderType, maxRefund) {
                var options = { tenderType: tenderType, correlationId: correlationId, maxRefundAmount: maxRefund };
                return this.payAsync(Commerce.Operations.RetailOperation.PayCreditMemo, options);
            };
            CartViewModel.prototype.voidTransaction = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var options = { cart: Commerce.Session.instance.cart };
                    return asyncQueue.cancelOn(_this.operationsManager.runOperation(Commerce.Operations.RetailOperation.VoidTransaction, options));
                }).enqueue(function () {
                    return Commerce.Utilities.LogonHelper.exitAfterTransactionIfConfiguredAsync().recoverOnFailure(function () {
                        return Commerce.VoidAsyncResult.createResolved();
                    });
                });
                return asyncQueue.run();
            };
            CartViewModel.prototype.calculateTotalAsync = function (correlationId) {
                var request = new Commerce.CalculateTotalOperationRequest(correlationId);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request));
            };
            CartViewModel.prototype.recalculateCustomerOrder = function () {
                var recalculateOperationParameters = {
                    cart: Commerce.Session.instance.cart
                };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.RecalculateCustomerOrder, recalculateOperationParameters);
            };
            CartViewModel.prototype.recalculateCharges = function (correlationId) {
                var request = new Commerce.RecalculateChargesOperationRequest(correlationId);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request)).map(function () { return void 0; });
            };
            CartViewModel.prototype.suspendTransaction = function () {
                var suspendCurrentCartOperationRequest = new Commerce.SuspendCurrentCartOperationRequest(Commerce.LoggerHelper.getNewCorrelationId());
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(suspendCurrentCartOperationRequest));
            };
            CartViewModel.prototype.voidProducts = function (cartLines) {
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.viewModelCartVoidProductsStarted(correlationId);
                var options = { cartLines: cartLines };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.VoidItem, options)
                    .done(function (result) {
                    if (!result.canceled) {
                        Commerce.RetailLogger.viewModelCartVoidProductsFinished(correlationId, true);
                    }
                }).fail(function (errors) {
                    Commerce.RetailLogger.viewModelCartVoidProductsFinished(correlationId, false);
                });
            };
            CartViewModel.prototype.overrideTransactionTaxFromList = function () {
                var options = { cart: Commerce.Session.instance.cart };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.OverrideTaxTransactionList, options);
            };
            CartViewModel.prototype.overrideTransactionTax = function (taxOverride) {
                var request = new Commerce.OverrideTransactionTaxOperationRequest(Commerce.LoggerHelper.getNewCorrelationId(), taxOverride.Code);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request));
            };
            CartViewModel.prototype.overrideLineTax = function (taxOverride, correlationId) {
                var cartLine = Commerce.ArrayExtensions.firstOrUndefined(this.selectedCartLines());
                var overrideLineTaxOperationRequest = new Commerce.OverrideLineTaxOperationRequest(correlationId, cartLine.LineId, taxOverride.Code);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(overrideLineTaxOperationRequest));
            };
            CartViewModel.prototype.overrideLineTaxFromList = function (correlationId) {
                var cartLine = Commerce.ArrayExtensions.firstOrUndefined(this.selectedCartLines());
                var overrideLineTaxFromListOperationRequest = new Commerce.OverrideLineTaxFromListOperationRequest(correlationId, cartLine.LineId);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(overrideLineTaxFromListOperationRequest));
            };
            CartViewModel.prototype.voidPayment = function (tenderLines, correlationId) {
                var options = { tenderLines: tenderLines, correlationId: correlationId };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.VoidPayment, options);
            };
            CartViewModel.prototype.addTransactionComment = function (correlationId) {
                var setTransactionCommentOperationRequest = new Commerce.SetTransactionCommentOperationRequest(correlationId);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(setTransactionCommentOperationRequest));
            };
            CartViewModel.prototype.addCustomerAccountDepositComment = function (comment) {
                var cart = Commerce.Session.instance.cart;
                var options = {
                    cart: cart,
                    cartLineComments: null,
                    customerAccountDepositLineComment: { line: cart.CustomerAccountDepositLines[0], comment: comment }
                };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.ItemComment, options);
            };
            CartViewModel.prototype.addProductComments = function (comments) {
                comments = comments || [];
                var options = {
                    cart: Commerce.Session.instance.cart,
                    cartLineComments: this.selectedCartLines()
                        .map(function (cartLine, index) {
                        return { cartLine: cartLine, comment: comments[index] };
                    }),
                    customerAccountDepositLineComment: null
                };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.ItemComment, options);
            };
            CartViewModel.prototype.addIncomeAccountComment = function (comments) {
                var options = {
                    cart: Commerce.Session.instance.cart,
                    cartLineComments: null,
                    customerAccountDepositLineComment: null
                };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.ItemComment, options);
            };
            CartViewModel.prototype.addInvoiceComment = function (comment) {
                var options = { cart: Commerce.Session.instance.cart, comment: comment };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.InvoiceComment, options);
            };
            CartViewModel.prototype.addLineDiscountAmount = function (discounts) {
                discounts = discounts || [];
                var options = {
                    cartLineDiscounts: this.selectedCartLines()
                        .map(function (cartLine, index) {
                        return { cartLine: cartLine, discountValue: discounts[index] };
                    })
                };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.LineDiscountAmount, options);
            };
            CartViewModel.prototype.addLineDiscountPercent = function (discounts) {
                discounts = discounts || [];
                var options = {
                    cartLineDiscounts: this.selectedCartLines()
                        .map(function (cartLine, index) {
                        return { cartLine: cartLine, discountValue: discounts[index] };
                    })
                };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.LineDiscountPercent, options);
            };
            CartViewModel.prototype.addTransactionDiscountAmount = function (discount) {
                var options = {
                    cart: Commerce.Session.instance.cart,
                    discountValue: discount
                };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.TotalDiscountAmount, options);
            };
            CartViewModel.prototype.addTransactionDiscountPercent = function (discount) {
                var options = {
                    cart: Commerce.Session.instance.cart,
                    discountValue: discount
                };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.TotalDiscountPercent, options);
            };
            CartViewModel.prototype.addDiscountCode = function (discountCode) {
                var options = {
                    couponCode: discountCode,
                    isLegacyDiscountCode: true
                };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.AddCoupons, options);
            };
            CartViewModel.prototype.setQuantities = function (quantities) {
                quantities = quantities || [];
                var options = {
                    cartLineQuantities: this.selectedCartLines()
                        .map(function (cartLine, index) {
                        return { cartLine: cartLine, quantity: quantities[index] };
                    }),
                    correlationId: Commerce.LoggerHelper.getNewCorrelationId()
                };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.SetQuantity, options);
            };
            CartViewModel.prototype.addSerialNumberAsync = function () {
                var cart = Commerce.Session.instance.cart;
                var cartType = !Commerce.ObjectExtensions.isNullOrUndefined(cart)
                    ? cart.CartTypeValue
                    : null;
                var options = {
                    cartType: cartType,
                    cartLines: this.selectedCartLines()
                };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.AddSerialNumber, options);
            };
            CartViewModel.prototype.clearQuantities = function () {
                var options = {
                    cartLines: this.selectedCartLines().map(function (cartLine) {
                        return cartLine;
                    })
                };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.ClearQuantity, options);
            };
            CartViewModel.prototype.viewProductDetails = function () {
                var options = {
                    cartLine: Commerce.ArrayExtensions.firstOrUndefined(this.selectedCartLines())
                };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.ViewProductDetails, options);
            };
            CartViewModel.prototype.addWarrantyToAnExistingTransactionAsync = function () {
                var request = new Commerce.Operations.AddWarrantyToAnExistingTransactionOperationRequest(Commerce.LoggerHelper.getNewCorrelationId());
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request));
            };
            CartViewModel.prototype.buyWarrantyAsync = function () {
                var selectedItemLines = this.selectedCartLines().map(function (cartLine) {
                    return {
                        product: Commerce.Session.instance.getFromProductsInCartCache(cartLine.ProductId),
                        SerialNumber: cartLine.SerialNumber,
                        LineNumber: cartLine.LineNumber
                    };
                });
                var request = new Commerce.Operations.BuyWarrantyOperationRequest(Commerce.LoggerHelper.getNewCorrelationId(), Commerce.Session.instance.productCatalogStore.Context.CatalogId, Commerce.Session.instance.cart.Id, selectedItemLines, true);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request));
            };
            CartViewModel.prototype.changeUnitOfMeasures = function (unitOfMeasures) {
                unitOfMeasures = unitOfMeasures || [];
                var options = {
                    cartLineUnitOfMeasures: this.selectedCartLines()
                        .map(function (cartLine, index) {
                        return { cartLine: cartLine, unitOfMeasure: unitOfMeasures[index] };
                    })
                };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.ChangeUnitOfMeasure, options);
            };
            CartViewModel.prototype.clearCommissionSalesGroupOnLineOperationAsync = function () {
                var options = {
                    cartLines: this.selectedCartLines()
                };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.ClearCommissionSalesGroupOnLine, options);
            };
            CartViewModel.prototype.clearCommissionSalesGroupOnTransactionOperationAsync = function () {
                var options = {};
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.ClearCommissionSalesGroupOnTransaction, options);
            };
            CartViewModel.prototype.setCommissionSalesGroupOnLineOperationAsync = function () {
                var options = {
                    cartLines: this.selectedCartLines()
                };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.SetCommissionSalesGroupOnLine, options);
            };
            CartViewModel.prototype.setCommissionSalesGroupOnTransactionOperationAsync = function () {
                var options = {};
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.SetCommissionSalesGroupOnTransaction, options);
            };
            CartViewModel.prototype.priceCheckAsync = function (correlationId) {
                var priceCheckOptions = {
                    correlationId: correlationId
                };
                return this.handleVoidAsyncResult(this.operationsManager.runOperation(Commerce.Operations.RetailOperation.PriceCheck, priceCheckOptions));
            };
            CartViewModel.prototype.getCustomerDetails = function (customerAccount) {
                return this._customerCardViewModel.loadCustomerAsync(customerAccount);
            };
            CartViewModel.prototype.updateRecommendedProducts = function () {
                var _this = this;
                if (!this.applicationContext.channelConfiguration.EnableProductRecommendations) {
                    this.productRecommendationsPlaceholderMessage(Commerce.ViewModelAdapter.getResourceString("string_4391"));
                    return Commerce.VoidAsyncResult.createResolved();
                }
                var productIds = new Array();
                Commerce.Session.instance.cart.CartLines.forEach(function (cartLine) {
                    if (!cartLine.IsVoided) {
                        var simpleProduct = Commerce.Session.instance.getFromProductsInCartCache(cartLine.ProductId);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(simpleProduct) && !Commerce.ObjectExtensions.isNullOrUndefined(simpleProduct.MasterProductId)) {
                            productIds.push(simpleProduct.MasterProductId);
                        }
                        else {
                            productIds.push(cartLine.ProductId);
                        }
                    }
                });
                if ((productIds.toString() === this.productIdsUsedToRetrieveRecommendedProducts.toString() &&
                    Commerce.Session.instance.cart.CustomerId === this.customerIdUsedToRetrieveRecommendedProducts)) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                if (!Commerce.ArrayExtensions.hasElements(productIds)) {
                    this.recommendedProducts([]);
                    this.productRecommendationsPlaceholderMessage(Commerce.ViewModelAdapter.getResourceString("string_4389"));
                    this.productIdsUsedToRetrieveRecommendedProducts = productIds;
                    this.customerIdUsedToRetrieveRecommendedProducts = Commerce.Session.instance.cart.CustomerId;
                    return Commerce.VoidAsyncResult.createResolved();
                }
                else {
                    return this.productManager.getRecommendedProductsAsync(productIds, Commerce.Session.instance.cart.CustomerId, this.maxNumberOfRecommendedProducts(), 0)
                        .done(function (products) {
                        if (!Commerce.ArrayExtensions.hasElements(products)) {
                            _this.productRecommendationsPlaceholderMessage(Commerce.ViewModelAdapter.getResourceString("string_4392"));
                        }
                        else {
                            _this.productRecommendationsPlaceholderMessage(Commerce.StringExtensions.EMPTY);
                        }
                        _this.recommendedProducts(products);
                        _this.productIdsUsedToRetrieveRecommendedProducts = productIds;
                        _this.customerIdUsedToRetrieveRecommendedProducts = Commerce.Session.instance.cart.CustomerId;
                        var trackingId = !Commerce.ArrayExtensions.hasElements(products) ? Commerce.StringExtensions.EMPTY : products[0].TrackingId;
                        Commerce.RetailLogger.viewModelCartRecommendedProductsView(trackingId, productIds.length, products.length);
                    }).fail(function (errors) {
                        Commerce.RetailLogger.viewModelCartUpdateRecommendedProductsFailed(Commerce.ErrorHelper.getErrorMessages(errors));
                        _this.productRecommendationsPlaceholderMessage(Commerce.ViewModelAdapter.getResourceString("string_4390"));
                    });
                }
            };
            CartViewModel.prototype.getEmployeeNameAsync = function (staffId) {
                return this.operatorManager.getEmployeeAsync(staffId)
                    .map(function (employee) {
                    var name = Commerce.StringExtensions.EMPTY;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(employee)) {
                        name = employee.Name;
                    }
                    return name;
                });
            };
            CartViewModel.prototype.issueGiftCardOperationAsync = function (tenderTypeId) {
                var request = new Commerce.IssueGiftCardOperationRequest(Commerce.LoggerHelper.getNewCorrelationId());
                request.tenderTypeId = tenderTypeId;
                var asyncResult = Commerce.VoidAsyncResult.fromPromise(Commerce.Runtime.executeAsync(request).then(function () { return void 0; }))
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
                return this.isBusyUntil(asyncResult);
            };
            CartViewModel.prototype.addToGiftCardOperationAsync = function (tenderTypeId) {
                var request = new Commerce.AddToGiftCardOperationRequest(Commerce.LoggerHelper.getNewCorrelationId());
                request.tenderTypeId = tenderTypeId;
                var asyncResult = Commerce.VoidAsyncResult.fromPromise(Commerce.Runtime.executeAsync(request).then(function () { return void 0; }))
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
                return this.isBusyUntil(asyncResult);
            };
            CartViewModel.prototype.checkGiftCardBalanceOperationAsync = function (tenderTypeId) {
                var request = new Commerce.CheckGiftCardBalanceOperationRequest(Commerce.LoggerHelper.getNewCorrelationId());
                request.tenderTypeId = tenderTypeId;
                var asyncResult = Commerce.VoidAsyncResult.fromPromise(Commerce.Runtime.executeAsync(request)
                    .then(function () { return void 0; })
                    .catch(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                }));
                return this.isBusyUntil(asyncResult);
            };
            CartViewModel.prototype.addCouponsOperationAsync = function (correlationId, couponCode) {
                var request = new Commerce.AddCouponsOperationRequest(correlationId, couponCode);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request));
            };
            CartViewModel.prototype.removeCouponsOperationAsync = function () {
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.RemoveCoupons, null);
            };
            CartViewModel.prototype.availableDiscountsOperationAsync = function () {
                var options;
                if (Commerce.ArrayExtensions.hasElements(this.selectedCartLines())) {
                    options = {
                        cartLine: Commerce.ArrayExtensions.firstOrUndefined(this.selectedCartLines()),
                        product: Commerce.Session.instance.getFromProductsInCartCache(Commerce.ArrayExtensions.firstOrUndefined(this.selectedCartLines()).ProductId)
                    };
                }
                else {
                    options = { cartLine: null, product: null };
                }
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.ViewAvailableDiscounts, options);
            };
            CartViewModel.prototype.addProductsToCart = function (productSaleDetails, correlationId) {
                productSaleDetails = productSaleDetails || [];
                var options = {
                    productSaleDetails: productSaleDetails,
                    correlationId: correlationId
                };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.ItemSale, options);
            };
            CartViewModel.prototype.returnCartLines = function () {
                var options = {
                    customerId: Commerce.Session.instance.cart.CustomerId,
                    productReturnDetails: this.selectedCartLines().map(function (cartLine) {
                        return { cartLine: cartLine };
                    })
                };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.ReturnItem, options);
            };
            CartViewModel.prototype.salesInvoiceAsync = function () {
                var salesInvoiceOptions = { customerId: Commerce.Session.instance.cart.CustomerId };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.SalesInvoice, salesInvoiceOptions);
            };
            CartViewModel.prototype.customerAccountDeposit = function (correlationId) {
                var request = new Commerce.CustomerAccountDepositOperationRequest(correlationId);
                return this.isBusyUntil(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request)));
            };
            CartViewModel.prototype.priceOverride = function (newPrices) {
                newPrices = newPrices || [];
                var options = {
                    cartLinePrices: this.selectedCartLines().map(function (c, index) {
                        return { cartLine: c, price: newPrices[index] };
                    })
                };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.PriceOverride, options);
            };
            CartViewModel.prototype.changeSalesPerson = function () {
                var changeSalesPersonOperationParameters = {
                    cart: Commerce.Session.instance.cart
                };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.SalesPerson, changeSalesPersonOperationParameters);
            };
            CartViewModel.prototype.customerOrderPreExecuteOperation = function (cartLines, retailOperationId, correlationId) {
                var _this = this;
                var cart = Commerce.Session.instance.cart;
                var errors = Commerce.CustomerOrderHelper.preCreateCustomerOrderValidation(cart);
                if (Commerce.ArrayExtensions.hasElements(errors)) {
                    return Commerce.AsyncResult.createRejected(errors);
                }
                if (retailOperationId === Commerce.Operations.RetailOperation.PickupSelectedProducts
                    || retailOperationId === Commerce.Operations.RetailOperation.ShipSelectedProducts
                    || retailOperationId === Commerce.Operations.RetailOperation.CarryoutSelectedProducts) {
                    errors = Commerce.Operations.Validators.includeOnlyNonReturnLinesOnCustomerOrder(cartLines);
                    if (Commerce.ArrayExtensions.hasElements(errors)) {
                        return Commerce.AsyncResult.createRejected(errors);
                    }
                }
                var asyncQueue = new Commerce.AsyncQueue();
                var customerOrderType;
                var isOperationsForShipOrPickup = retailOperationId === Commerce.Operations.RetailOperation.PickupAllProducts
                    || retailOperationId === Commerce.Operations.RetailOperation.PickupSelectedProducts
                    || retailOperationId === Commerce.Operations.RetailOperation.ShipAllProducts
                    || retailOperationId === Commerce.Operations.RetailOperation.ShipSelectedProducts;
                var isAllCarriedout = (retailOperationId === Commerce.Operations.RetailOperation.CarryoutAllProducts
                    || retailOperationId === Commerce.Operations.RetailOperation.CarryoutSelectedProducts)
                    && Commerce.CartHelper.areAllCartLinesSelected(cart, cartLines);
                var isShipOrPickupSelected = retailOperationId === Commerce.Operations.RetailOperation.PickupSelectedProducts
                    || retailOperationId === Commerce.Operations.RetailOperation.ShipSelectedProducts;
                if (isOperationsForShipOrPickup) {
                    asyncQueue.enqueue(function () {
                        return Commerce.DeliveryHelper.validateCartForShippingOrPickup(cart, false);
                    });
                }
                if (retailOperationId === Commerce.Operations.RetailOperation.CarryoutSelectedProducts
                    || retailOperationId === Commerce.Operations.RetailOperation.CarryoutAllProducts) {
                    asyncQueue.enqueue(function () {
                        return Commerce.DeliveryHelper.validateCartForCarryout(cart, false);
                    });
                }
                if (isShipOrPickupSelected && Commerce.DeliveryHelper.mustClearHeaderDeliveryInfo(cart, cartLines)) {
                    asyncQueue.enqueue(function () {
                        return Commerce.ViewModelAdapter.displayMessage("string_4450", Commerce.MessageType.Info, Commerce.MessageBoxButtons.YesNo)
                            .done(function (result) {
                            if (result === Commerce.DialogResult.No) {
                                asyncQueue.cancel();
                                return;
                            }
                        });
                    });
                }
                if (!Commerce.CustomerOrderHelper.isCustomerOrderOrQuoteCreationOrEdition(cart) && !isAllCarriedout) {
                    asyncQueue.enqueue(function () {
                        if (retailOperationId === Commerce.Operations.RetailOperation.CarryoutSelectedProducts) {
                            customerOrderType = Commerce.Proxy.Entities.CustomerOrderType.SalesOrder;
                            return Commerce.VoidAsyncResult.createResolved();
                        }
                        else {
                            var selectOrderTypeRequest = new Commerce.SalesOrders.SelectCustomerOrderTypeClientRequest(correlationId);
                            return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(selectOrderTypeRequest)))
                                .done(function (customerOrderTypeResult) {
                                if (!customerOrderTypeResult.canceled) {
                                    customerOrderType = customerOrderTypeResult.data.result;
                                }
                            });
                        }
                    }).enqueue(function () {
                        switch (customerOrderType) {
                            case Commerce.Proxy.Entities.CustomerOrderType.SalesOrder:
                                return _this.createCustomerOrder();
                            case Commerce.Proxy.Entities.CustomerOrderType.Quote:
                                return asyncQueue.cancelOn(_this.createQuotationAndSetExpirationDateAsync(correlationId));
                            default:
                                asyncQueue.cancel();
                                return Commerce.VoidAsyncResult.createResolved();
                        }
                    });
                }
                return asyncQueue.run();
            };
            CartViewModel.prototype.createCustomerOrder = function () {
                var options = {
                    cart: Commerce.Session.instance.cart
                };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.CreateCustomerOrder, options);
            };
            CartViewModel.prototype.createRetailTransaction = function () {
                var proceedWithOperation = false;
                var cart = Commerce.Session.instance.cart;
                if (Commerce.CustomerOrderHelper.isCustomerOrder(cart)) {
                    proceedWithOperation = true;
                }
                else if (Commerce.CustomerOrderHelper.isQuote(cart)) {
                    proceedWithOperation = true;
                }
                else {
                    proceedWithOperation = false;
                }
                if (!proceedWithOperation) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                else {
                    var options = {
                        cart: Commerce.Session.instance.cart
                    };
                    return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.CreateRetailTransaction, options);
                }
            };
            CartViewModel.prototype.setQuotationExpirationDate = function (correlationId, requestedExpirationDate) {
                var options = {
                    cart: Commerce.Session.instance.cart,
                    requestedExpirationDate: requestedExpirationDate,
                    correlationId: correlationId
                };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.SetQuotationExpirationDate, options);
            };
            CartViewModel.prototype.createQuotationAndSetExpirationDateAsync = function (correlationId) {
                var createCustomerQuoteOperationRequest = new Commerce.CreateCustomerQuoteOperationRequest(correlationId);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(createCustomerQuoteOperationRequest));
            };
            CartViewModel.prototype.removeCustomerFromCart = function () {
                var customerClearOptions = {
                    correlationId: Commerce.LoggerHelper.getNewCorrelationId()
                };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.CustomerClear, customerClearOptions);
            };
            CartViewModel.prototype.addLineChargeAsync = function (correlationId) {
                if (!Commerce.ArrayExtensions.hasElements(this.selectedCartLines())) {
                    return Commerce.AsyncResult.createResolved({ canceled: true });
                }
                var options = {
                    cartLine: this.selectedCartLines()[0],
                    correlationId: correlationId
                };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.AddLineCharge, options);
            };
            CartViewModel.prototype.addHeaderChargeAsync = function (correlationId) {
                var options = {
                    correlationId: correlationId
                };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.AddHeaderCharge, options);
            };
            CartViewModel.prototype.displayLoyaltyCardBalance = function (correlationId, cardNumber) {
                var loyaltyCardPointsBalanceOperationRequest = new Commerce.LoyaltyCardPointsBalanceOperationRequest(correlationId, cardNumber);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(loyaltyCardPointsBalanceOperationRequest));
            };
            CartViewModel.prototype.getKitComponentDescriptions = function (cartLine) {
                var product = Commerce.Session.instance.getFromProductsInCartCache(cartLine.ProductId);
                var kitComponentDescriptions = [];
                var isKit = !Commerce.ObjectExtensions.isNullOrUndefined(product)
                    && (product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.KitMaster || product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.KitVariant);
                if (isKit) {
                    var componentDescriptionFormatString_1 = Commerce.ViewModelAdapter.getResourceString("string_4386");
                    var componentVariantDescriptionFormatString_1 = Commerce.ViewModelAdapter.getResourceString("string_4387");
                    product.Components.forEach(function (component) {
                        var variantInformation = Commerce.SimpleProductHelper.getVariantDescription(component);
                        if (!Commerce.StringExtensions.isNullOrWhitespace(variantInformation)) {
                            variantInformation = Commerce.StringExtensions.format(componentVariantDescriptionFormatString_1, variantInformation);
                        }
                        var quantity = Commerce.ObjectExtensions.isNullOrUndefined(component.Quantity) ? Commerce.StringExtensions.EMPTY : component.Quantity.toString();
                        var unitOfMeasure = component.UnitOfMeasure || Commerce.StringExtensions.EMPTY;
                        var name = component.Name || Commerce.StringExtensions.EMPTY;
                        var componentDescription = Commerce.StringExtensions.format(componentDescriptionFormatString_1, quantity, unitOfMeasure, name, variantInformation);
                        kitComponentDescriptions.push(componentDescription);
                    });
                }
                return ko.observableArray(kitComponentDescriptions);
            };
            CartViewModel.prototype.formatReasonCodeLineDescriptions = function (reasonCodeLines) {
                var _this = this;
                var reasonCodeLineDescriptions = [];
                var separatorFormat = Commerce.ViewModelAdapter.getResourceString("string_198");
                var formatInfoCodeDescription = function (reasonCode, reasonCodeLine) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(reasonCode)) {
                        var reasonCodeInfo = [];
                        if (!Commerce.StringExtensions.isEmptyOrWhitespace(reasonCode.Prompt)) {
                            reasonCodeInfo.push(reasonCode.Prompt);
                        }
                        if (!Commerce.StringExtensions.isEmptyOrWhitespace(reasonCodeLine.SubReasonCodeId)) {
                            reasonCodeInfo.push(reasonCodeLine.SubReasonCodeId);
                        }
                        if (!Commerce.StringExtensions.isEmptyOrWhitespace(reasonCodeLine.Information)) {
                            reasonCodeInfo.push(reasonCodeLine.Information);
                        }
                        if (Commerce.ArrayExtensions.hasElements(reasonCodeInfo)) {
                            var displayString = reasonCodeInfo[0];
                            for (var i = 1; i < reasonCodeInfo.length; i++) {
                                displayString = Commerce.StringExtensions.format(separatorFormat, displayString, reasonCodeInfo[i]);
                            }
                            return displayString;
                        }
                    }
                    return Commerce.StringExtensions.EMPTY;
                };
                reasonCodeLines.forEach(function (reasonCodeLine) {
                    var reasonCodeDescription = ko.observable("");
                    var cachedReasonCode = _this._reasonCodesInCartByReasonCodeId.getItem(reasonCodeLine.ReasonCodeId);
                    if (Commerce.ObjectExtensions.isNullOrUndefined(cachedReasonCode)) {
                        _this.getReasonCodeById(reasonCodeLine.ReasonCodeId).done(function (reasonCode) {
                            reasonCodeDescription(formatInfoCodeDescription(reasonCode, reasonCodeLine));
                        });
                    }
                    else {
                        reasonCodeDescription(formatInfoCodeDescription(cachedReasonCode, reasonCodeLine));
                    }
                    reasonCodeLineDescriptions.push(reasonCodeDescription);
                });
                return reasonCodeLineDescriptions;
            };
            CartViewModel.prototype.changeDeliveryModeForSelectedLines = function (selectedCartLines, operation, correlationId) {
                switch (operation) {
                    case Commerce.Operations.RetailOperation.ShipAllProducts:
                        return this._shipAllProducts(correlationId);
                    case Commerce.Operations.RetailOperation.ShipSelectedProducts:
                        return this._shipSelectedProducts(selectedCartLines, correlationId);
                    case Commerce.Operations.RetailOperation.PickupAllProducts:
                    case Commerce.Operations.RetailOperation.PickupSelectedProducts:
                        this._navigateToPickUpInStoreView(selectedCartLines);
                        return Commerce.VoidAsyncResult.createResolved();
                    case Commerce.Operations.RetailOperation.CarryoutAllProducts:
                    case Commerce.Operations.RetailOperation.CarryoutSelectedProducts:
                        return this._carryOutProducts(selectedCartLines, correlationId);
                    default:
                        return Commerce.VoidAsyncResult.createResolved();
                }
            };
            CartViewModel.prototype.issueCreditMemo = function (correlationId) {
                var _this = this;
                this._isProcessingPayment = true;
                var request = new Commerce.IssueCreditMemoClientRequest(correlationId);
                var asyncResult = Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request)).always(function () {
                    _this._isProcessingPayment = false;
                }).fail(function (errors) {
                    _this.setIsBusy(false);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
                return this.isBusyUntil(asyncResult);
            };
            CartViewModel.prototype.concludeTransaction = function (correlationId) {
                var _this = this;
                correlationId = Commerce.LoggerHelper.resolveCorrelationId(correlationId);
                var request = new Commerce.ConcludeTransactionClientRequest(correlationId);
                var asyncResult = Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request)).fail(function (errors) {
                    _this.setIsBusy(false);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
                return this.isBusyUntil(asyncResult)
                    .map(function (result) {
                    return {
                        canceled: result.canceled,
                        data: result.canceled ? null : result.data.salesOrder
                    };
                }).done(function (queueResult) {
                    if (queueResult.canceled) {
                        Commerce.RetailLogger.viewsCartCartViewCartConcludeTransactionCancel(correlationId);
                    }
                    else {
                        Commerce.RetailLogger.viewsCartCartViewCartConcludeTransactionSuccessful(correlationId);
                    }
                }).fail(function (errors) {
                    Commerce.RetailLogger.viewsCartCartViewCartConcludeTransactionFailure(correlationId);
                });
            };
            CartViewModel.prototype.handleVoidAsyncResult = function (asyncResult, continueProcessingOnDone) {
                var _this = this;
                if (continueProcessingOnDone === void 0) { continueProcessingOnDone = false; }
                if (!continueProcessingOnDone) {
                    this.isBusyUntil(asyncResult).done(function () {
                        Commerce.RetailLogger.viewModelCartViewAsynchronousProcessingIsCompletedAndViewIsReady();
                    });
                }
                return asyncResult.fail(function (errors) {
                    _this.setIsBusy(false);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            CartViewModel.prototype.isBusyUntil = function (asyncResult) {
                var _this = this;
                this._isBusyUntilCounterInternal(this._isBusyUntilCounterInternal() + 1);
                return asyncResult.always(function () {
                    _this._isBusyUntilCounterInternal(Math.max(0, _this._isBusyUntilCounterInternal() - 1));
                    if (_this._isBusyUntilCounterInternal() === 0) {
                        _this._isBusyFlag(false);
                    }
                });
            };
            CartViewModel.prototype.setIsBusy = function (isBusy) {
                if (!isBusy) {
                    this._isBusyUntilCounterInternal(0);
                }
                this._isBusyFlag(isBusy);
            };
            CartViewModel.prototype.isSerialNumberWarningVisible = function (cartLine, product) {
                if (cartLine.IsGiftCardLine || cartLine.IsInvoiceLine) {
                    return false;
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(product)) {
                    product = Commerce.Session.instance.getFromProductsInCartCache(cartLine.ProductId);
                }
                return !Commerce.ObjectExtensions.isNullOrUndefined(product)
                    && product.Behavior.HasSerialNumber && Commerce.StringExtensions.isNullOrWhitespace(cartLine.SerialNumber);
            };
            CartViewModel.prototype.cancelQueuedProcessTextOperations = function () {
                this._processTextWorkerQueue.cancel();
            };
            CartViewModel.prototype.selectLastCartLine = function () {
                if (Commerce.ArrayExtensions.hasElements(this.originalCartLines())) {
                    var lastLine = this.originalCartLines()[this.originalCartLines().length - 1];
                    this.selectedCartLines([lastLine.item()]);
                }
            };
            CartViewModel.prototype.selectCartLinesIfDifferent = function (newSelectedCartLines) {
                newSelectedCartLines = Commerce.ObjectExtensions.isNullOrUndefined(newSelectedCartLines) ? [] : newSelectedCartLines;
                var isEqual;
                var oldSelectedCartLines = this.selectedCartLines();
                if (Commerce.ArrayExtensions.hasElements(newSelectedCartLines)) {
                    isEqual = newSelectedCartLines.every(function (newSelectedCartLine) {
                        return oldSelectedCartLines.indexOf(newSelectedCartLine) > -1;
                    });
                }
                else {
                    isEqual = !Commerce.ArrayExtensions.hasElements(oldSelectedCartLines);
                }
                if (!isEqual) {
                    this.selectedCartLines(newSelectedCartLines);
                }
            };
            CartViewModel.prototype.switchToCurrentStoreCatalog = function (correlationId) {
                var switchProductCatalogClientRequest = new Commerce.Products.SwitchProductCatalogClientRequest(correlationId, Commerce.Proxy.Entities.StoreButtonControlType.CurrentStore);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(switchProductCatalogClientRequest))
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            CartViewModel.prototype._shipAllProducts = function (correlationId) {
                var operationShipAllOptions = {
                    shippingAddress: null,
                    correlationId: correlationId
                };
                return this.handleVoidAsyncResult(Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.ShipAllProducts, operationShipAllOptions));
            };
            CartViewModel.prototype._shipSelectedProducts = function (selectedCartLines, correlationId) {
                var operationShipSelectedOptions = {
                    cartLines: selectedCartLines,
                    shippingAddress: null,
                    correlationId: correlationId
                };
                return this.handleVoidAsyncResult(Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.ShipSelectedProducts, operationShipSelectedOptions));
            };
            CartViewModel.prototype._navigateToPickUpInStoreView = function (selectedCartLines) {
                var iPickUpInStoreViewControllerOptions = {
                    isForPickUp: true,
                    cartLines: selectedCartLines
                };
                Commerce.ViewModelAdapter.navigate("PickUpInStoreView", iPickUpInStoreViewControllerOptions);
            };
            CartViewModel.prototype._carryOutProducts = function (selectedCartLines, correlationId) {
                var request = new Commerce.CarryoutSelectedProductsOperationRequest(correlationId, selectedCartLines);
                return this.isBusyUntil(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request)));
            };
            CartViewModel.prototype.payAsync = function (operationId, options) {
                return this.operationsManager.runOperation(operationId, options);
            };
            CartViewModel.prototype.processItemScan = function (scanResult, processTextResult, correlationId, itemEntryType, quantity) {
                var _this = this;
                var product = scanResult.Product;
                if (Commerce.ObjectExtensions.isNullOrUndefined(scanResult.Product)) {
                    var itemNotOnFileQueue = new Commerce.AsyncQueue();
                    itemNotOnFileQueue.enqueue(function () {
                        var productNotFoundError = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PRODUCT_ASSOCIATED_WITH_BARCODE_NOT_FOUND);
                        return Commerce.NotificationHandler.displayClientErrors([productNotFoundError]);
                    }).enqueue(function () {
                        var previousNumberOfReasonCodeLines = Commerce.ArrayExtensions.hasElements(Commerce.Session.instance.cart.ReasonCodeLines) ? Commerce.Session.instance.cart.ReasonCodeLines.length : 0;
                        return Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cart: Commerce.Session.instance.cart }, function (context) {
                            if (Commerce.ArrayExtensions.hasElements(context.cart.ReasonCodeLines)
                                && context.cart.ReasonCodeLines.length > previousNumberOfReasonCodeLines) {
                                return _this.cartManager.createOrUpdateCartAsync(context.cart);
                            }
                            return Commerce.VoidAsyncResult.createResolved();
                        }, Commerce.Proxy.Entities.ReasonCodeSourceType.ItemNotOnFile).run();
                    });
                    return itemNotOnFileQueue.run().done(function (reasonCodeResult) {
                        if (reasonCodeResult && !reasonCodeResult.canceled) {
                            processTextResult.cartUpdated = true;
                        }
                    });
                }
                Commerce.RetailLogger.viewModelCartProcessItemScanResultStarted(correlationId, Commerce.Proxy.Entities.ProductType[scanResult.Product.ProductTypeValue], this.originalCartLines().length);
                if (product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.KitMaster) {
                    processTextResult.product = product;
                    return Commerce.VoidAsyncResult.createResolved();
                }
                if (!Commerce.NumberExtensions.isNullNaNOrZero(quantity) && product.Behavior.KeyInQuantityValue === Commerce.Proxy.Entities.KeyInQuantityRestriction.NotAllowed) {
                    var noQuantityChangeEntryError = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.SET_QUANTITY_NOT_VALID_ONE_OR_MORE_ITEMS);
                    return Commerce.VoidAsyncResult.createRejected([noQuantityChangeEntryError]);
                }
                var barcode = scanResult.Barcode;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(barcode)) {
                    if (!Commerce.NumberExtensions.isNullNaNOrZero(quantity) &&
                        !Commerce.NumberExtensions.isNullNaNOrZero(barcode.Quantity) &&
                        !Commerce.NumberExtensions.isNullNaNOrZero(barcode.BarcodePrice) &&
                        !Commerce.NumberExtensions.isNullNaNOrZero(product.AdjustedPrice)) {
                        var noManualEntryError = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MANUAL_QUANTITY_NOT_ALLOWED_ON_PRICE_EMBEDDED_BARCODE);
                        return Commerce.VoidAsyncResult.createRejected([noManualEntryError]);
                    }
                    else if (!Commerce.NumberExtensions.isNullOrZero(quantity) && !Commerce.NumberExtensions.isNullOrZero(barcode.Quantity)) {
                        quantity *= barcode.Quantity;
                    }
                    else if (!Commerce.NumberExtensions.isNullOrZero(barcode.Quantity)) {
                        quantity = barcode.Quantity;
                    }
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(quantity)) {
                    quantity = 0;
                }
                var productSaleReturnDetail = {
                    product: product,
                    quantity: quantity,
                    barcode: barcode,
                    entryType: itemEntryType
                };
                var productSaleReturnDetails = [productSaleReturnDetail];
                var addToSaleResult;
                if (quantity >= 0) {
                    addToSaleResult = this.addProductsToCart(productSaleReturnDetails, correlationId);
                }
                else {
                    addToSaleResult = this.returnProducts(productSaleReturnDetails);
                }
                return addToSaleResult.done(function (result) {
                    if (result && !result.canceled) {
                        processTextResult.cartUpdated = true;
                    }
                });
            };
            CartViewModel.prototype.handleCartUpdateScanResult = function (asyncResult, processTextResult) {
                return asyncResult.done(function (result) {
                    if (result && !result.canceled) {
                        processTextResult.cartUpdated = true;
                    }
                });
            };
            CartViewModel.prototype._processTextWorkerQueueStatusCallback = function (processing) {
                this.isProcessTextRunning(processing);
            };
            CartViewModel.prototype.searchProductsAndCustomers = function (searchText, processTextResult) {
                var catalogId = 0;
                var skip = 0;
                var pageSize = 2;
                var productResult = this.productManager.searchByTextAsync(searchText, Commerce.Session.instance.productCatalogStore.Context.ChannelId, catalogId, pageSize, skip)
                    .done(function (productSearchResults) {
                    processTextResult.productSearchResults = productSearchResults;
                });
                var customerSearchResult = this.searchCustomers(searchText, pageSize, skip).done(function (customerResult) {
                    processTextResult.customers = customerResult;
                });
                return Commerce.VoidAsyncResult.join([productResult, customerSearchResult]);
            };
            CartViewModel.prototype.searchCustomers = function (searchText, pageSize, skip) {
                if (Commerce.StringExtensions.isNullOrWhitespace(searchText)) {
                    return Commerce.AsyncResult.createResolved([]);
                }
                return this.customerManager.searchCustomersAsync(searchText, pageSize, skip);
            };
            CartViewModel.prototype.refreshCartTenderTypes = function (cart) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(cart)
                    && Commerce.ArrayExtensions.hasElements(cart.TenderLines)) {
                    var updatedTenderLines_1 = [];
                    cart.TenderLines.forEach(function (tenderLine) {
                        var tenderType = null;
                        if (!tenderLine.IsHistorical
                            && !(tenderLine.ProcessingTypeValue === Commerce.Proxy.Entities.PaymentProcessingType.Deferred
                                && tenderLine.Amount === 0
                                && (tenderLine.PaymentRefRecId !== 0 || tenderLine.StatusValue === Commerce.Proxy.Entities.TenderLineStatus.NotProcessed))) {
                            tenderType = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderByTypeId(tenderLine.TenderTypeId);
                            var cartTenderLineTenderType = __assign({ TenderType: tenderType }, tenderLine);
                            updatedTenderLines_1.push(cartTenderLineTenderType);
                        }
                    });
                    this.tenderLines(updatedTenderLines_1);
                }
                else if (Commerce.ArrayExtensions.hasElements(this.tenderLines())) {
                    this.tenderLines([]);
                }
            };
            CartViewModel.prototype.loadListingsFromCartLinesAsync = function (cart) {
                var _this = this;
                this.updatingCartLines(true);
                var asyncResult = new Commerce.VoidAsyncResult();
                if (Commerce.ObjectExtensions.isNullOrUndefined(cart) || Commerce.ObjectExtensions.isNullOrUndefined(cart.CartTypeValue)) {
                    this.originalCartLines([]);
                    asyncResult.resolve();
                }
                else if (cart.CartTypeValue === Commerce.Proxy.Entities.CartType.IncomeExpense && Commerce.ArrayExtensions.hasElements(cart.IncomeExpenseLines)) {
                    this.incomeExpenseAccountLines(cart.IncomeExpenseLines);
                    this.originalCartLines([]);
                    asyncResult.resolve();
                }
                else if (Commerce.CartHelper.isCartType(cart, Commerce.Proxy.Entities.CartType.AccountDeposit)) {
                    this.customerAccountDepositLines(cart.CustomerAccountDepositLines);
                    this.originalCartLines([]);
                    asyncResult.resolve();
                }
                else if (Commerce.ArrayExtensions.hasElements(cart.CartLines)) {
                    var missingProductIds_1 = [];
                    cart.CartLines.forEach(function (cartLine) {
                        var productId = cartLine.ProductId;
                        if (Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.getFromProductsInCartCache(productId)) && Commerce.CartLineHelper.IsProduct(cartLine)) {
                            missingProductIds_1.push(productId);
                        }
                    });
                    var updateItemPredicate_1 = function (oldItem, newItem) {
                        var replacer = function (key, value) {
                            return (key === "ValidFrom" || key === "ValidTo") ? "" : value;
                        };
                        return (cart.TotalManualDiscountAmount !== 0) || (JSON.stringify(oldItem, replacer) !== JSON.stringify(newItem, replacer));
                    };
                    var oldLengh = this.originalCartLines().length;
                    if (Commerce.ArrayExtensions.hasElements(missingProductIds_1)) {
                        var allStoreChannelId_1 = 0;
                        var channelId_1;
                        if (Commerce.CustomerOrderHelper.isCustomerOrder(cart)) {
                            channelId_1 = allStoreChannelId_1;
                        }
                        else {
                            channelId_1 = Commerce.Session.instance.productCatalogStore.Context.ChannelId;
                        }
                        this.productManager.getByIdsAsync(missingProductIds_1, channelId_1)
                            .done(function (products) {
                            if (!Commerce.ArrayExtensions.hasElements(products) && channelId_1 !== allStoreChannelId_1) {
                                _this.productManager.getByIdsAsync(missingProductIds_1, allStoreChannelId_1)
                                    .done(function (products) {
                                    products.forEach(function (product) {
                                        Commerce.Session.instance.addToProductsInCartCache(product);
                                    });
                                    _this.originalCartLines.update(cart.CartLines, updateItemPredicate_1);
                                    asyncResult.resolve();
                                }).fail(function (errors) {
                                    asyncResult.reject(errors);
                                });
                            }
                            else {
                                products.forEach(function (product) {
                                    Commerce.Session.instance.addToProductsInCartCache(product);
                                });
                                _this.originalCartLines.update(cart.CartLines, updateItemPredicate_1);
                                asyncResult.resolve();
                            }
                        }).fail(function (errors) {
                            asyncResult.reject(errors);
                        });
                    }
                    else {
                        this.originalCartLines.update(cart.CartLines, updateItemPredicate_1);
                        asyncResult.resolve();
                    }
                    if (this.originalCartLines().length > oldLengh) {
                        this.selectLastCartLine();
                    }
                }
                else {
                    this.originalCartLines([]);
                    asyncResult.resolve();
                }
                return asyncResult.always(function () {
                    _this.updatingCartLines(false);
                });
            };
            CartViewModel.prototype.computedCartLinesTotalCount = function () {
                var cart = this.cart();
                var count = 0;
                if (Commerce.CartHelper.isCartType(cart, Commerce.Proxy.Entities.CartType.IncomeExpense)) {
                    count = Commerce.ArrayExtensions.hasElements(cart.IncomeExpenseLines) ? cart.IncomeExpenseLines.length : 0;
                }
                else if (Commerce.CartHelper.isCartType(cart, Commerce.Proxy.Entities.CartType.AccountDeposit)) {
                    count = Commerce.ArrayExtensions.hasElements(cart.CustomerAccountDepositLines) ? cart.CustomerAccountDepositLines.length : 0;
                }
                else {
                    count = Commerce.ArrayExtensions.hasElements(cart.CartLines) ? Commerce.CartHelper.GetNonVoidedCartLines(cart.CartLines).length : 0;
                }
                return count;
            };
            CartViewModel.prototype.returnProducts = function (productReturnDetails) {
                productReturnDetails = productReturnDetails || [];
                var options = {
                    customerId: Commerce.Session.instance.cart.CustomerId,
                    productReturnDetails: productReturnDetails.map(function (p) {
                        return { manualReturn: p };
                    })
                };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.ReturnItem, options);
            };
            CartViewModel.prototype._cartUpdateHandlerAsync = function (newCart) {
                var _this = this;
                var asyncResults = [];
                if (Commerce.ArrayExtensions.hasElements(this.selectedTenderLines())) {
                    this.selectedTenderLines([]);
                }
                if ((Commerce.ObjectExtensions.isNullOrUndefined(newCart) || !Commerce.ArrayExtensions.hasElements(newCart.CartLines))
                    && Commerce.ArrayExtensions.hasElements(this.originalCartLines())) {
                    this.originalCartLines([]);
                }
                if ((Commerce.ObjectExtensions.isNullOrUndefined(newCart) || !Commerce.ArrayExtensions.hasElements(newCart.IncomeExpenseLines))
                    && Commerce.ArrayExtensions.hasElements(this.incomeExpenseAccountLines())) {
                    this.incomeExpenseAccountLines([]);
                }
                if ((Commerce.ObjectExtensions.isNullOrUndefined(newCart) || !Commerce.ArrayExtensions.hasElements(newCart.CustomerAccountDepositLines))
                    && Commerce.ArrayExtensions.hasElements(this.customerAccountDepositLines())) {
                    this.customerAccountDepositLines([]);
                }
                var expectedCustomerLoyaltyCardLabel = Commerce.ObjectExtensions.isNullOrUndefined(newCart) ? Commerce.StringExtensions.EMPTY : newCart.LoyaltyCardId;
                if (this._customerCardViewModel.customerLoyaltyCardLabel() !== expectedCustomerLoyaltyCardLabel) {
                    this._customerCardViewModel.customerLoyaltyCardLabel(expectedCustomerLoyaltyCardLabel);
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.customer()) || this.customer().AccountNumber !== newCart.CustomerId) {
                    var getCustomerResult = this.getCustomerDetails(newCart.CustomerId).done(function () {
                        Commerce.Session.instance.customerContext.update(_this.customer());
                    });
                    asyncResults.push(getCustomerResult);
                }
                else if (!Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.customerContext.customer)
                    && Commerce.Session.instance.customerContext.customer.AccountNumber === newCart.CustomerId) {
                    this.customer(Commerce.Session.instance.customerContext.customer);
                }
                if (!Commerce.Session.instance.isCartInProgress) {
                    this._reasonCodesInCartByReasonCodeId.clear();
                }
                if (!Commerce.CartHelper.isInProgress(newCart)) {
                    this.viewMode(Commerce.ViewModels.CartViewTransactionDetailViewMode.items);
                }
                asyncResults.push(this.loadListingsFromCartLinesAsync(newCart));
                this.refreshCartTenderTypes(newCart);
                return Commerce.VoidAsyncResult.join(asyncResults).done(function () {
                    var newSelectedCartLines = _this.originalCartLines()
                        .map(function (row) { return row.item(); })
                        .filter(function (originalCartLine) {
                        return _this.selectedCartLines().some(function (selectedCartLine) {
                            return selectedCartLine.LineId === originalCartLine.LineId;
                        });
                    });
                    _this.selectedCartLines(newSelectedCartLines);
                });
            };
            CartViewModel.prototype.getReasonCodeById = function (reasonCodeId) {
                var _this = this;
                return this.salesOrderManager.getReasonCodeAsync(reasonCodeId).done(function (reasonCode) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(reasonCode) && !Commerce.StringExtensions.isNullOrWhitespace(reasonCode.ReasonCodeId)) {
                        _this._reasonCodesInCartByReasonCodeId.setItem(reasonCode.ReasonCodeId, reasonCode);
                    }
                });
            };
            CartViewModel.prototype._cartViewModelCartUpdateCallback = function (newCart) {
                var _this = this;
                this.refreshCartTenderTypes(newCart);
                this.totalsPanelCustomFieldViewModels.forEach(function (vm) {
                    vm.updateValue(newCart);
                });
                var asyncResults = [];
                asyncResults.push(this.handleVoidAsyncResult(this._cartUpdateHandlerAsync(newCart).done(function () {
                    _this._sendCartChangedMessage();
                }), this.isBusy()));
                asyncResults.push(this.updateRecommendedProducts());
                Commerce.VoidAsyncResult.join(asyncResults).always(function () {
                    Commerce.RetailLogger.viewModelCartUpdateHasCompleted();
                });
                this.salesOrderAttributesViewModel.updateCart(newCart);
            };
            CartViewModel.prototype._getProductsInCart = function () {
                var productCartLines = [];
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.cart()) &&
                    Commerce.ArrayExtensions.hasElements(this.cart().CartLines)) {
                    productCartLines = this.cart().CartLines.filter(function (cartLine) { return Commerce.ObjectExtensions.isNumber(cartLine.ProductId); });
                }
                return productCartLines.map(function (cartLine) { return Commerce.Session.instance.getFromProductsInCartCache(cartLine.ProductId); });
            };
            CartViewModel.prototype._getSelectedLoyaltyCard = function () {
                var customerLoyaltyCards = this.customerLoyaltyCards();
                if (!Commerce.ArrayExtensions.hasElements(customerLoyaltyCards) ||
                    Commerce.ObjectExtensions.isNullOrUndefined(this.cart()) ||
                    Commerce.StringExtensions.isNullOrWhitespace(this.cart().LoyaltyCardId)) {
                    return undefined;
                }
                var selectedLoyaltyCardId = this.cart().LoyaltyCardId;
                return Commerce.ArrayExtensions.firstOrUndefined(customerLoyaltyCards, function (card) { return card.CardNumber === selectedLoyaltyCardId; });
            };
            CartViewModel.prototype._sendMessageToExtensions = function (messageType, messageData) {
                if (Commerce.ArrayExtensions.hasElements(this._extensionViewControllers)) {
                    this._extensionViewControllers.forEach(function (vc) {
                        vc.sendMessage(messageType, messageData);
                    });
                }
                if (Commerce.ArrayExtensions.hasElements(this._customControlViewModels)) {
                    this._customControlViewModels.forEach(function (vm) {
                        vm.sendMessage(messageType, messageData);
                    });
                }
            };
            CartViewModel.prototype._subscribeSelectedLinesChanges = function () {
                var _this = this;
                var subscription = this.selectedCartLines.subscribe(function (cartLines) {
                    var line = Commerce.ArrayExtensions.hasElements(cartLines)
                        ? cartLines[0]
                        : null;
                    _this.salesOrderAttributesViewModel.updateCartLine(line);
                    if (Commerce.ArrayExtensions.hasElements(cartLines)) {
                        _this._sendMessageToExtensions("CartLineSelected", { cartLines: cartLines });
                    }
                    else {
                        _this._sendMessageToExtensions("CartLineSelectionCleared", undefined);
                    }
                });
                this._knockoutSubscriptions.push(subscription);
                subscription = this.selectedTenderLines.subscribe(function (tenderLines) {
                    if (Commerce.ArrayExtensions.hasElements(tenderLines)) {
                        _this._sendMessageToExtensions("TenderLineSelected", { tenderLines: tenderLines });
                    }
                    else {
                        _this._sendMessageToExtensions("TenderLineSelectionCleared", undefined);
                    }
                });
                this._knockoutSubscriptions.push(subscription);
            };
            CartViewModel.prototype._sendCartChangedMessage = function () {
                var cart = this.cart();
                var customer = this.customer();
                var loyaltyCard = this._getSelectedLoyaltyCard();
                var products = this._getProductsInCart();
                this._sendMessageToExtensions("CartChanged", { cart: cart, customer: customer, loyaltyCard: loyaltyCard, products: products });
            };
            CartViewModel.prototype._setSelectedCartLines = function (setSelectedCartLinesData) {
                var numberOfCartLinesToSelect = Commerce.ArrayExtensions.countElements(setSelectedCartLinesData.cartLines);
                if (numberOfCartLinesToSelect > 1) {
                    Commerce.RetailLogger.viewModelCartSetSelectedCartLinesSkipped(numberOfCartLinesToSelect);
                }
                else {
                    this.selectCartLinesIfDifferent(setSelectedCartLinesData.cartLines);
                }
            };
            return CartViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.CartViewModel = CartViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var CashManagementViewModel = (function (_super) {
            __extends(CashManagementViewModel, _super);
            function CashManagementViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw new Error("Invalid options passed to the CashManagementViewModel constructor: options cannot be null or undefined.");
                }
                else if (!Commerce.ExtensibleEnumerations.ExtensibleTransactionType.FloatEntry.equals(options.transactionType)
                    && !Commerce.ExtensibleEnumerations.ExtensibleTransactionType.StartingAmount.equals(options.transactionType)
                    && !Commerce.ExtensibleEnumerations.ExtensibleTransactionType.RemoveTender.equals(options.transactionType)) {
                    throw new Error("Invalid options passed to the CashManagementViewModel constructor: options.transactionType is not a supported transaction type.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.selectionHandler)) {
                    throw new Error("Invalid options passed to the CashManagementViewModel constructor: options.selectionHandler cannot be null or undefined.");
                }
                _this.amountToChange = ko.observable("0");
                _this.operationComment = ko.observable("");
                _this.totalAmountToDeclare = ko.observable(0);
                _this.storeCurrency = ko.observable(Commerce.ApplicationContext.Instance.deviceConfiguration.Currency);
                _this.isSaveDisabled = ko.observable(true);
                _this.isDenominationAvailable = ko.observable(false);
                _this._initializeInternalState(options);
                _this.title = Commerce.ViewModelAdapter.getResourceString("string_4007");
                if (Commerce.ExtensibleEnumerations.ExtensibleTransactionType.StartingAmount.equals(options.transactionType)) {
                    _this.title = Commerce.ViewModelAdapter.getResourceString("string_4008");
                }
                else if (Commerce.ExtensibleEnumerations.ExtensibleTransactionType.FloatEntry.equals(options.transactionType)) {
                    _this.title = Commerce.ViewModelAdapter.getResourceString("string_4009");
                }
                else if (Commerce.ExtensibleEnumerations.ExtensibleTransactionType.RemoveTender.equals(options.transactionType)) {
                    _this.title = Commerce.ViewModelAdapter.getResourceString("string_4186");
                }
                return _this;
            }
            CashManagementViewModel.prototype.loadAsync = function () {
                var _this = this;
                if (Commerce.ExtensibleEnumerations.ExtensibleTransactionType.StartingAmount.equals(this._cashManagementType)) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this._newDenominationsAmountEntered)) {
                        this._overrideTotalAmount(this._newDenominationsAmountEntered);
                        if (this._startAmountCalculationType === CashManagementViewModel.STARTAMOUNTSUM) {
                            return this._isBusyUntil(this._setDenominationsToShow()).done(function () {
                                _this._setCountButton();
                            });
                        }
                    }
                    else {
                        return this._isBusyUntil(this._getDeclaredStartingAmount(Commerce.LoggerHelper.getNewCorrelationId()))
                            .done(function (queueResult) {
                            if (!queueResult.canceled
                                && !Commerce.ObjectExtensions.isNullOrUndefined(queueResult.data)
                                && !Commerce.ObjectExtensions.isNullOrUndefined(queueResult.data.result)) {
                                var startAmountDetails = queueResult.data.result;
                                _this._setDenominationDetailsForView(startAmountDetails.denominationDetails);
                                _this.totalAmountToDeclare(startAmountDetails.startAmount);
                            }
                        }).fail(function (errors) {
                            Commerce.NotificationHandler.displayClientErrors(errors, "string_4179");
                        });
                    }
                }
                else {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this._newDenominationsAmountEntered)) {
                        this._overrideTotalAmount(this._newDenominationsAmountEntered);
                        return this._isBusyUntil(this._setDenominationsToShow()).done(function () {
                            _this._setCountButton();
                        });
                    }
                    else {
                        this._setDefaultDenominationDetails();
                    }
                }
                this._setCountButton();
                return Commerce.VoidAsyncResult.createResolved();
            };
            CashManagementViewModel.prototype.enterAmount = function () {
                var _this = this;
                var amount = Commerce.NumberExtensions.parseNumber(this.amountToChange());
                var isStartAmountDeclared = this.totalAmountToDeclare() > 0 &&
                    Commerce.ExtensibleEnumerations.ExtensibleTransactionType.StartingAmount.equals(this._cashManagementType);
                if (isNaN(amount) || amount < 0) {
                    Commerce.NotificationHandler.displayClientErrors([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.AMOUNT_IS_NOT_VALID)]);
                }
                else {
                    if (isStartAmountDeclared && this._startAmountCalculationType === CashManagementViewModel.STARTAMOUNTLAST) {
                        Commerce.ViewModelAdapter.displayMessage("string_13256", Commerce.MessageType.Info, Commerce.MessageBoxButtons.YesNo)
                            .done(function (result) {
                            if (result === Commerce.DialogResult.Yes) {
                                _this._overrideTotalAmount(amount);
                                _this._clearDenominationDetails();
                            }
                        });
                    }
                    else if (isStartAmountDeclared && this._startAmountCalculationType === CashManagementViewModel.STARTAMOUNTSUM) {
                        Commerce.ViewModelAdapter.displayMessage("string_4155", Commerce.MessageType.Info, Commerce.MessageBoxButtons.YesNo)
                            .done(function (result) {
                            if (result === Commerce.DialogResult.Yes) {
                                _this._overrideTotalAmount(amount);
                            }
                        });
                    }
                    else {
                        this._overrideTotalAmount(amount);
                    }
                }
            };
            CashManagementViewModel.prototype.setNumPadPublisher = function (value) {
                this._numPadPublisher = value;
            };
            CashManagementViewModel.prototype.onShown = function () {
                this._cancelSelectionHandlerOnHidden = true;
                Commerce.Peripherals.instance.numPad.enable(this._numPadPublisher);
            };
            CashManagementViewModel.prototype.onHidden = function () {
                Commerce.Peripherals.instance.numPad.disable();
                if (this._cancelSelectionHandlerOnHidden && !this._operationCompleted) {
                    this._cancelSelectionHandler();
                }
            };
            CashManagementViewModel.prototype.onNavigateBack = function () {
                if (!this._operationCompleted && !this._isOperationAborted) {
                    this.operationComment(Commerce.StringExtensions.EMPTY);
                    this._abortOperationAsync();
                }
                return true;
            };
            CashManagementViewModel.prototype.navigateToDenominationView = function () {
                var _this = this;
                var isStartAmountDeclared = this.totalAmountToDeclare() > 0 &&
                    Commerce.ExtensibleEnumerations.ExtensibleTransactionType.StartingAmount.equals(this._cashManagementType);
                if (isStartAmountDeclared && this._startAmountCalculationType === CashManagementViewModel.STARTAMOUNTLAST) {
                    Commerce.ViewModelAdapter.displayMessage("string_13256", Commerce.MessageType.Info, Commerce.MessageBoxButtons.YesNo)
                        .done(function (result) {
                        if (result === Commerce.DialogResult.Yes) {
                            _this._openDenominationView();
                        }
                    });
                }
                else if (isStartAmountDeclared && this._startAmountCalculationType === CashManagementViewModel.STARTAMOUNTSUM) {
                    Commerce.ViewModelAdapter.displayMessage("string_4155", Commerce.MessageType.Info, Commerce.MessageBoxButtons.YesNo)
                        .done(function (result) {
                        if (result === Commerce.DialogResult.Yes) {
                            _this._openDenominationView();
                        }
                    });
                }
                else {
                    this._openDenominationView();
                }
            };
            CashManagementViewModel.prototype.processOperationAsync = function () {
                var _this = this;
                return this._processOperationInternalAsync().done(function (result) {
                    if (!_this._operationCompleted) {
                        var selectionHandler = _this._selectionHandler;
                        _this._selectionHandler = null;
                        selectionHandler.select(result.data, function () { return void 0; }, function () { return void 0; });
                    }
                });
            };
            CashManagementViewModel.prototype._abortOperationAsync = function () {
                var _this = this;
                this._isOperationAborted = true;
                return this._processOperationInternalAsync().done(function (result) {
                    if (!_this._operationCompleted) {
                        _this._cancelSelectionHandler();
                    }
                });
            };
            CashManagementViewModel.prototype._cancelSelectionHandler = function () {
                var selectionHandler = this._selectionHandler;
                this._selectionHandler = null;
                selectionHandler.cancel();
            };
            CashManagementViewModel.prototype._initializeInternalState = function (options) {
                this._cashManagementType = options.transactionType;
                this._selectionHandler = options.selectionHandler;
                this._processingOperation = false;
                this._shiftToUse = Commerce.ObjectExtensions.isNullOrUndefined(options.shift) ? Commerce.Session.instance.Shift : options.shift;
                this._primaryCurrencyCode = Commerce.ApplicationContext.Instance.deviceConfiguration.Currency;
                this._isOperationAborted = false;
                this._denominationDetailsToShow = [];
                if (Commerce.ObjectExtensions.isNullOrUndefined(Commerce.ApplicationContext.Instance.deviceConfiguration.StartAmountCalculation)) {
                    this._startAmountCalculationType = CashManagementViewModel.STARTAMOUNTSUM;
                }
                else {
                    this._startAmountCalculationType = Commerce.ApplicationContext.Instance.deviceConfiguration.StartAmountCalculation;
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options.denominationDetails)) {
                    this._denominationDetailsToSave = options.denominationDetails;
                    this._newDenominationsAmountEntered = options.newDenominationAmountEntered;
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options.totalAmountDeclared)) {
                    this.totalAmountToDeclare(options.totalAmountDeclared);
                }
                this._amountEntered = !Commerce.ObjectExtensions.isNullOrUndefined(options.amountEntered) ? (options.amountEntered) : 0;
            };
            CashManagementViewModel.prototype._getTenderTypeId = function () {
                var tenderType = this._getTenderType();
                return Commerce.ObjectExtensions.isNullOrUndefined(tenderType) ? Commerce.StringExtensions.EMPTY : tenderType.TenderTypeId;
            };
            CashManagementViewModel.prototype._getTenderType = function () {
                var tenderType = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderTypeByOperationId(Commerce.Operations.RetailOperation.PayCash);
                return tenderType;
            };
            Object.defineProperty(CashManagementViewModel.prototype, "_operationCompleted", {
                get: function () {
                    return Commerce.ObjectExtensions.isNullOrUndefined(this._selectionHandler);
                },
                enumerable: true,
                configurable: true
            });
            CashManagementViewModel.prototype._processOperationInternalAsync = function () {
                var _this = this;
                if (this._processingOperation) {
                    return Commerce.AsyncResult.createResolved({ canceled: false, data: null });
                }
                this._processingOperation = true;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var processOperationResult;
                if (Commerce.ExtensibleEnumerations.ExtensibleTransactionType.RemoveTender.equals(this._cashManagementType)) {
                    processOperationResult = this._removeTenderAsync(correlationId);
                }
                else if (Commerce.ExtensibleEnumerations.ExtensibleTransactionType.FloatEntry.equals(this._cashManagementType)) {
                    processOperationResult = this._floatEntryAsync(correlationId);
                }
                else if (Commerce.ExtensibleEnumerations.ExtensibleTransactionType.StartingAmount.equals(this._cashManagementType)) {
                    processOperationResult = this._startingAmountAsync(correlationId);
                }
                return this._isBusyUntil(processOperationResult).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                }).always(function () {
                    _this._processingOperation = false;
                });
            };
            CashManagementViewModel.prototype._removeTenderAsync = function (correlationId) {
                var request = new Commerce.CashManagement.CreateTenderRemovalTransactionClientRequest(this._isOperationAborted, this._amountEntered, this._denominationDetailsToSave, Commerce.ObjectExtensions.isNullOrUndefined(this.operationComment()) ? Commerce.StringExtensions.EMPTY : this.operationComment(), this._shiftToUse, correlationId);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                    .map(function (result) {
                    return {
                        canceled: result.canceled,
                        data: result.canceled ? undefined : result.data.result
                    };
                });
            };
            CashManagementViewModel.prototype._startingAmountAsync = function (correlationId) {
                var request = new Commerce.CashManagement.CreateStartingAmountTransactionClientRequest(this._isOperationAborted, this._amountEntered, this._denominationDetailsToSave, Commerce.ObjectExtensions.isNullOrUndefined(this.operationComment()) ? Commerce.StringExtensions.EMPTY : this.operationComment(), this._shiftToUse, correlationId);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                    .map(function (result) {
                    return {
                        canceled: result.canceled,
                        data: result.canceled ? undefined : result.data.result
                    };
                });
            };
            CashManagementViewModel.prototype._floatEntryAsync = function (correlationId) {
                var request = new Commerce.CashManagement.CreateFloatEntryTransactionClientRequest(this._isOperationAborted, this._amountEntered, this._denominationDetailsToSave, Commerce.ObjectExtensions.isNullOrUndefined(this.operationComment()) ? Commerce.StringExtensions.EMPTY : this.operationComment(), this._shiftToUse, correlationId);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                    .map(function (result) {
                    return {
                        canceled: result.canceled,
                        data: result.canceled ? undefined : result.data.result
                    };
                });
            };
            CashManagementViewModel.prototype._getDeclaredStartingAmount = function (correlationId) {
                var request = new Commerce.CashManagement.GetStartingAmountClientRequest(correlationId, this._shiftToUse.ShiftId.toString(), this._shiftToUse.TerminalId);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request));
            };
            CashManagementViewModel.prototype._overrideTotalAmount = function (amount) {
                if (Commerce.ExtensibleEnumerations.ExtensibleTransactionType.StartingAmount.equals(this._cashManagementType)) {
                    if (this._startAmountCalculationType === CashManagementViewModel.STARTAMOUNTLAST) {
                        this.totalAmountToDeclare(amount);
                        this._amountEntered = Commerce.NumberExtensions.roundToNDigits(amount, Commerce.NumberExtensions.getDecimalPrecision());
                    }
                    else {
                        this.totalAmountToDeclare(this.totalAmountToDeclare() + amount);
                        this._amountEntered = Commerce.NumberExtensions.roundToNDigits(this._amountEntered + amount, Commerce.NumberExtensions.getDecimalPrecision());
                    }
                }
                else {
                    this.totalAmountToDeclare(this.totalAmountToDeclare() + amount);
                    this._amountEntered = Commerce.NumberExtensions.roundToNDigits(this._amountEntered + amount, Commerce.NumberExtensions.getDecimalPrecision());
                }
                this.amountToChange("0");
                this.isSaveDisabled(false);
            };
            CashManagementViewModel.prototype._setDenominationDetailsForView = function (denominationDetails) {
                if (Commerce.ArrayExtensions.hasElements(denominationDetails)) {
                    this._denominationDetailsToSave = denominationDetails;
                    this._setCountButton();
                }
                else {
                    this._setDefaultDenominationDetails();
                }
            };
            CashManagementViewModel.prototype._setDefaultDenominationDetails = function () {
                var _this = this;
                var cashDeclaration;
                Commerce.ApplicationContext.Instance.cashDeclarationsMapAsync.value.done(function (map) {
                    if (map.hasItem(_this._primaryCurrencyCode)) {
                        cashDeclaration = map.getItem(_this._primaryCurrencyCode);
                        var denominationDetails_1 = [];
                        cashDeclaration.forEach(function (cashDeclaration) {
                            var denominationDetail = {};
                            denominationDetail.Type = cashDeclaration.CashTypeValue;
                            denominationDetail.Currency = cashDeclaration.Currency;
                            denominationDetail.DenominationAmount = cashDeclaration.Amount;
                            denominationDetail.QuantityDeclared = 0;
                            denominationDetail.AmountDeclared = 0;
                            denominationDetails_1.push(denominationDetail);
                        });
                        _this._denominationDetailsToSave = denominationDetails_1;
                        _this._denominationDetailsToShow = denominationDetails_1;
                        _this._setCountButton();
                    }
                });
            };
            CashManagementViewModel.prototype._setCountButton = function () {
                if ((!Commerce.ObjectExtensions.isNullOrUndefined(this._denominationDetailsToSave) &&
                    Commerce.ArrayExtensions.hasElements(this._denominationDetailsToSave))) {
                    this.isDenominationAvailable(true);
                }
            };
            CashManagementViewModel.prototype._getDenominationDetailsToShow = function () {
                if ((!Commerce.ObjectExtensions.isNullOrUndefined(this._denominationDetailsToSave) &&
                    Commerce.ArrayExtensions.hasElements(this._denominationDetailsToSave)) &&
                    Commerce.ExtensibleEnumerations.ExtensibleTransactionType.StartingAmount.equals(this._cashManagementType) &&
                    this._startAmountCalculationType === CashManagementViewModel.STARTAMOUNTLAST) {
                    return this._denominationDetailsToSave;
                }
                return this._denominationDetailsToShow;
            };
            CashManagementViewModel.prototype._clearDenominationDetails = function () {
                var denominationDetails = [];
                if ((!Commerce.ObjectExtensions.isNullOrUndefined(this._denominationDetailsToSave))) {
                    this._denominationDetailsToSave.forEach(function (savedDetail) {
                        var denominationDetail = {};
                        denominationDetail.Type = savedDetail.Type;
                        denominationDetail.Currency = savedDetail.Currency;
                        denominationDetail.DenominationAmount = savedDetail.DenominationAmount;
                        denominationDetail.QuantityDeclared = 0;
                        denominationDetail.AmountDeclared = 0;
                        denominationDetails.push(denominationDetail);
                    });
                    this._denominationDetailsToSave = denominationDetails;
                }
            };
            CashManagementViewModel.prototype._openDenominationView = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.navigatetoDenominationViewClicked(correlationId);
                this._cancelSelectionHandlerOnHidden = false;
                var activity = new Commerce.Activities.GetDenominationTotalsActivity({
                    pageTitle: this.title,
                    denominationDetails: this._getDenominationDetailsToShow(),
                    tenderTypeId: this._getTenderTypeId(),
                    correlationId: correlationId
                });
                activity.execute().done(function () {
                    var wasCanceled = Commerce.ObjectExtensions.isNullOrUndefined(activity.response);
                    if (!wasCanceled) {
                        var newDenominationAmountEntered = Commerce.Helpers.CurrencyHelper.getTotalDenominationAmountDeclaredInCurrency(activity.response.denominationDetails, _this._primaryCurrencyCode);
                        var denominationDetails = _this._getDetailsFromDenominationsView(activity.response.denominationDetails);
                        var cashManagementViewControllerOptions = {
                            transactionType: _this._cashManagementType,
                            shift: _this._shiftToUse,
                            selectionHandler: _this._selectionHandler,
                            amountEntered: _this._amountEntered,
                            totalAmountDeclared: _this.totalAmountToDeclare(),
                            denominationDetails: denominationDetails,
                            newDenominationAmountEntered: newDenominationAmountEntered
                        };
                        Commerce.ViewModelAdapter.collapseAndNavigate("CashManagementView", cashManagementViewControllerOptions);
                    }
                    else {
                        if (Commerce.ViewModelAdapter.isInView("CashManagementView")) {
                            return;
                        }
                        else {
                            _this._cancelSelectionHandler();
                        }
                    }
                });
            };
            CashManagementViewModel.prototype._getDetailsFromDenominationsView = function (result) {
                var _this = this;
                if (Commerce.ExtensibleEnumerations.ExtensibleTransactionType.StartingAmount.equals(this._cashManagementType) &&
                    this._startAmountCalculationType === CashManagementViewModel.STARTAMOUNTLAST) {
                    return result;
                }
                else {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this._denominationDetailsToSave) && Commerce.ArrayExtensions.hasElements(this._denominationDetailsToSave)) {
                        var denominationDetails_2 = [];
                        result.forEach(function (detail) {
                            _this._denominationDetailsToSave.forEach(function (savedDetail) {
                                var newDenominationDetail = {};
                                if (detail.DenominationAmount === savedDetail.DenominationAmount) {
                                    newDenominationDetail.AmountDeclared = detail.AmountDeclared + savedDetail.AmountDeclared;
                                    newDenominationDetail.QuantityDeclared = detail.QuantityDeclared + savedDetail.QuantityDeclared;
                                    newDenominationDetail.Currency = savedDetail.Currency;
                                    newDenominationDetail.ExtensionProperties = savedDetail.ExtensionProperties;
                                    newDenominationDetail.Type = savedDetail.Type;
                                    newDenominationDetail.DenominationAmount = savedDetail.DenominationAmount;
                                    denominationDetails_2.push(newDenominationDetail);
                                }
                            });
                        });
                        return denominationDetails_2;
                    }
                    return result;
                }
            };
            CashManagementViewModel.prototype._setDenominationsToShow = function () {
                var _this = this;
                var cashDeclaration;
                return Commerce.ApplicationContext.Instance.cashDeclarationsMapAsync.value.done(function (map) {
                    if (map.hasItem(_this._primaryCurrencyCode)) {
                        cashDeclaration = map.getItem(_this._primaryCurrencyCode);
                        var denominationDetails_3 = [];
                        cashDeclaration.forEach(function (cashDeclaration) {
                            var denominationDetail = {};
                            denominationDetail.Type = cashDeclaration.CashTypeValue;
                            denominationDetail.Currency = cashDeclaration.Currency;
                            denominationDetail.DenominationAmount = cashDeclaration.Amount;
                            denominationDetail.QuantityDeclared = 0;
                            denominationDetail.AmountDeclared = 0;
                            denominationDetails_3.push(denominationDetail);
                        });
                        _this._denominationDetailsToShow = denominationDetails_3;
                    }
                });
            };
            CashManagementViewModel.NOTES_MAX_LENGTH = 150;
            CashManagementViewModel.STARTAMOUNTLAST = 1;
            CashManagementViewModel.STARTAMOUNTSUM = 0;
            return CashManagementViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.CashManagementViewModel = CashManagementViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var CatalogViewModel = (function (_super) {
            __extends(CatalogViewModel, _super);
            function CatalogViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this.catalogs = ko.observableArray([]);
                return _this;
            }
            CatalogViewModel.prototype.getCatalogs = function () {
                var _this = this;
                this._channelId = Commerce.Session.instance.productCatalogStore.Context.ChannelId;
                return this._isBusyUntil(this.productManager.getCatalogsAsync(this._channelId))
                    .done(function (result) {
                    var defaultCatalogImageFormat = Commerce.Session.instance.defaultCatalogImageFormat;
                    var allStoreProductImage = Commerce.StringExtensions.EMPTY;
                    if (!Commerce.StringExtensions.isNullOrWhitespace(defaultCatalogImageFormat)) {
                        allStoreProductImage = defaultCatalogImageFormat
                            .replace("{LanguageId}", Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName)
                            .replace("{CatalogName}", Commerce.ViewModelAdapter.getResourceString("string_33"))
                            .replace("{ChannelName}", Commerce.Session.instance.productCatalogStore.Store.OrgUnitName);
                    }
                    result.splice(0, 0, new Commerce.Proxy.Entities.ProductCatalogClass({
                        RecordId: 0,
                        Name: Commerce.ViewModelAdapter.getResourceString("string_33"),
                        IsSnapshotEnabled: false,
                        ValidFrom: new Date(),
                        ValidTo: new Date(),
                        CreatedOn: new Date(),
                        ModifiedOn: new Date(),
                        PublishedOn: new Date(),
                        Images: [{ Uri: allStoreProductImage }]
                    }));
                    _this.catalogs(result);
                });
            };
            CatalogViewModel.prototype.getCategories = function () {
                return this.productManager.getCategoriesAsync(Commerce.Session.instance.productCatalogStore.Context.ChannelId)
                    .done(function (result) { Commerce.Session.instance.CurrentCategoryList = result; });
            };
            CatalogViewModel.prototype.setVirtualCatalog = function (correlationId, catalogType, storeEntity) {
                var switchProductCatalogClientRequest = new Commerce.Products.SwitchProductCatalogClientRequest(correlationId, catalogType, storeEntity);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(switchProductCatalogClientRequest));
            };
            return CatalogViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.CatalogViewModel = CatalogViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var CategoriesViewModel = (function (_super) {
            __extends(CategoriesViewModel, _super);
            function CategoriesViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this.rootCategoryRecordId = ko.observable(0);
                _this.categories = ko.observableArray([]);
                return _this;
            }
            CategoriesViewModel.prototype.load = function () {
                return this.GetCategoriesAsync();
            };
            CategoriesViewModel.prototype.GetCategoriesAsync = function (skip, pageSize) {
                var _this = this;
                return this.productManager.getCategoriesAsync(Commerce.Session.instance.productCatalogStore.Context.ChannelId, skip, pageSize)
                    .done(function (result) { _this.GetCategoriesSuccessCallBack(result); });
            };
            CategoriesViewModel.prototype.GetCategoriesSuccessCallBack = function (categories) {
                var items = categories.filter(function (c) {
                    return Commerce.NumberExtensions.isNullOrZero(c.ParentCategory);
                });
                if (Commerce.ArrayExtensions.hasElements(items) && !Commerce.ObjectExtensions.isNullOrUndefined(items[0].RecordId)) {
                    this.rootCategoryRecordId(items[0].RecordId);
                }
                this.categories(categories);
            };
            CategoriesViewModel.prototype.GetChildCategoriesAsync = function (categoryId, skip, pageSize) {
                return this.productManager.getChildCategoriesAsync(Commerce.Session.instance.productCatalogStore.Context.ChannelId, categoryId, skip, pageSize);
            };
            return CategoriesViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.CategoriesViewModel = CategoriesViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        var ChangeDeliveryModeViewModel = (function (_super) {
            __extends(ChangeDeliveryModeViewModel, _super);
            function ChangeDeliveryModeViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this.subTitle = Commerce.ViewModelAdapter.getResourceString("string_5740");
                _this.deliveredSalesLines = ko.observableArray([]);
                _this.selectedSalesLines = ko.observableArray([]);
                _this.hasSelectedAllSalesLines = ko.computed(function () {
                    return _this.deliveredSalesLines().length === _this.selectedSalesLines().length;
                }, _this);
                _this.atLeastOneSalesLineSelected = ko.computed(function () {
                    return _this.selectedSalesLines().length !== 0;
                }, _this);
                return _this;
            }
            ChangeDeliveryModeViewModel.prototype.loadAsync = function () {
                var _this = this;
                var salesLinesForDisplay = [];
                var deliveredCartLines = Commerce.Session.instance.cart.CartLines
                    .filter(function (cartLine) {
                    return !(Commerce.StringExtensions.isNullOrWhitespace(cartLine.DeliveryMode)
                        || cartLine.DeliveryMode === Commerce.ApplicationContext.Instance.channelConfiguration.PickupDeliveryModeCode
                        || cartLine.DeliveryMode === Commerce.ApplicationContext.Instance.channelConfiguration.CarryoutDeliveryModeCode);
                });
                var productIds = deliveredCartLines
                    .map(function (cartLine) {
                    return cartLine.ProductId;
                });
                var productDictionary = new Commerce.Dictionary();
                return Commerce.CustomerOrderHelper.createSimpleProductDictionaryFromProductIds(productIds, productDictionary)
                    .done(function () {
                    salesLinesForDisplay = deliveredCartLines.map(function (cartLine) {
                        return new Commerce.Proxy.Entities.SalesLineForDisplay(cartLine, productDictionary.getItem(cartLine.ProductId));
                    });
                    _this.deliveredSalesLines(salesLinesForDisplay);
                    if (_this.deliveredSalesLines().length === 0) {
                        Commerce.NotificationHandler.displayErrorMessage(Commerce.ViewModelAdapter.getResourceString("string_5746"));
                    }
                });
            };
            ChangeDeliveryModeViewModel.prototype.selectSalesLines = function (salesLines) {
                var selectedSalesLines = [];
                if (Commerce.ArrayExtensions.hasElements(salesLines)) {
                    salesLines.forEach(function (salesLines) {
                        selectedSalesLines.push(salesLines);
                    });
                }
                this.selectedSalesLines(selectedSalesLines);
            };
            ChangeDeliveryModeViewModel.prototype.getDeliveryOptions = function () {
                var _this = this;
                this.cartManager.getDeliveryModesByCartLines(this.selectedSalesLines(), Commerce.Proxy.Entities.FilterDeliveryModeOption.FilterOutNonCarrierDeliveryMode)
                    .done(function (deliveryModes) {
                    var activity = new Commerce.Activities.SelectDeliveryModeActivity({
                        deliveryModes: deliveryModes
                    });
                    activity.execute()
                        .done(function () {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(activity.response)) {
                            _this._changeDeliveryMode(activity.response.selectedDeliveryMode);
                        }
                    });
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            ChangeDeliveryModeViewModel.prototype._changeDeliveryMode = function (deliveryMode) {
                var lineSpecifications = this.selectedSalesLines()
                    .map(function (cartLine) {
                    return {
                        LineId: cartLine.LineId,
                        DeliverySpecification: {
                            DeliveryModeId: deliveryMode.Code,
                            DeliveryPreferenceTypeValue: Commerce.Proxy.Entities.DeliveryPreferenceType.ShipToAddress,
                            ShipFromStoreId: cartLine.FulfillmentStoreId,
                            DeliveryAddress: cartLine.ShippingAddress
                        }
                    };
                });
                this.cartManager.updateLineDeliverySpecifications(lineSpecifications)
                    .done(function () {
                    Commerce.ViewModelAdapter.navigate("CartView");
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            return ChangeDeliveryModeViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.ChangeDeliveryModeViewModel = ChangeDeliveryModeViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var ChangePasswordViewModel = (function (_super) {
            __extends(ChangePasswordViewModel, _super);
            function ChangePasswordViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options) && !Commerce.StringExtensions.isNullOrWhitespace(options.staffId)) {
                    _this._staffId = options.staffId;
                }
                else if (!Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.CurrentEmployee)
                    && !Commerce.StringExtensions.isNullOrWhitespace(Commerce.Session.instance.CurrentEmployee.StaffId)) {
                    _this._staffId = Commerce.Session.instance.CurrentEmployee.StaffId;
                }
                else {
                    throw "ChangePasswordViewModel::ctor could not properly initialize the staff id, which is a required value.";
                }
                _this._oldPassword = ko.observable("");
                _this._newPassword = ko.observable("");
                _this._confirmedNewPassword = ko.observable("");
                return _this;
            }
            ChangePasswordViewModel.prototype.changePassword = function () {
                var errors = this.validateFields();
                if (Commerce.ArrayExtensions.hasElements(errors)) {
                    Commerce.NotificationHandler.displayClientErrors(errors, "string_6804");
                    return;
                }
                var options = {
                    staffId: this._staffId,
                    oldPassword: this._oldPassword(),
                    newPassword: this._newPassword()
                };
                this._isBusyUntil(Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.ChangePassword, options))
                    .done(function (operationResult) {
                    if (Commerce.Session.instance.isLoggedOn) {
                        Commerce.ViewModelAdapter.navigate("HomeView");
                    }
                    else {
                        Commerce.ViewModelAdapter.navigate("LoginView");
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            ChangePasswordViewModel.prototype.clearPasswordFields = function () {
                this._oldPassword("");
                this._newPassword("");
                this._confirmedNewPassword("");
            };
            ChangePasswordViewModel.prototype.cancelHandler = function () {
                Commerce.ViewModelAdapter.navigateBack();
            };
            ChangePasswordViewModel.prototype.validateFields = function () {
                var errors = [];
                if (Commerce.StringExtensions.isEmptyOrWhitespace(this._oldPassword())
                    || Commerce.StringExtensions.isEmptyOrWhitespace(this._newPassword())
                    || Commerce.StringExtensions.isEmptyOrWhitespace(this._confirmedNewPassword())) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CHANGE_PASSWORD_DETAILS_NOT_SPECIFIED));
                }
                if (Commerce.StringExtensions.compare(this._newPassword(), this._confirmedNewPassword())) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.NEW_PASSWORD_AND_CONFIRMATION_NOT_MATCHING_ERROR));
                }
                return errors;
            };
            return ChangePasswordViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.ChangePasswordViewModel = ChangePasswordViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var ClockViewModel = (function (_super) {
            __extends(ClockViewModel, _super);
            function ClockViewModel(context, dateFormat, timeFormat) {
                if (dateFormat === void 0) { dateFormat = Commerce.Host.Globalization.DateTimeFormat.SHORT_DATE; }
                if (timeFormat === void 0) { timeFormat = Commerce.Host.Globalization.DateTimeFormat.SHORT_TIME; }
                var _this = _super.call(this, context) || this;
                _this._dateFormatter = new Commerce.Host.Globalization.TimeZoneDateTimeFormatter(dateFormat, Commerce.Host.instance.globalization.getApplicationLanguage());
                _this._timeFormatter = new Commerce.Host.Globalization.TimeZoneDateTimeFormatter(timeFormat, Commerce.Host.instance.globalization.getApplicationLanguage());
                _this._currentDateTime = ko.observable(new Date());
                _this.currentDate = ko.computed(function () { return _this._dateFormatter.format(_this._currentDateTime()); });
                _this.currentTime = ko.computed(function () { return _this._timeFormatter.format(_this._currentDateTime()); });
                return _this;
            }
            ClockViewModel.prototype.start = function () {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._intervalId)) {
                    this._intervalId = window.setInterval(function () {
                        _this._currentDateTime(new Date());
                    }, ClockViewModel.CURRENT_DATE_TIME_UPDATE_INTERVAL_IN_MILLISECONDS);
                }
            };
            ClockViewModel.prototype.stop = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._intervalId)) {
                    window.clearInterval(this._intervalId);
                    this._intervalId = undefined;
                }
            };
            ClockViewModel.prototype.dispose = function () {
                this.stop();
                _super.prototype.dispose.call(this);
            };
            ClockViewModel.CURRENT_DATE_TIME_UPDATE_INTERVAL_IN_MILLISECONDS = 1000;
            return ClockViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.ClockViewModel = ClockViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var CompareProductsViewModel = (function (_super) {
            __extends(CompareProductsViewModel, _super);
            function CompareProductsViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw "Invalid options passed to the CompareProductsViewModel constructor: options cannot be null or undefined.";
                }
                _this.products = ko.observableArray([]);
                _this.productComparisonLines = ko.observableArray([]);
                _this.isAddProductsVisible = ko.computed(function () {
                    return _this.products().length < CompareProductsViewModel.MAX_NUMBER_OF_PRODUCTS;
                }, _this);
                _this.storeNumber = ko.observable(Commerce.ApplicationContext.Instance.deviceConfiguration.StoreNumber);
                _this.sectionInfo = ko.computed(function () {
                    var storeInfoStringFormat = Commerce.ViewModelAdapter.getResourceString("string_707");
                    return Commerce.StringExtensions.format(storeInfoStringFormat, _this.storeNumber(), Commerce.ViewModelAdapter.getResourceString("string_700"));
                }, _this);
                _this._productIds = options.productIds;
                return _this;
            }
            Object.defineProperty(CompareProductsViewModel.prototype, "_channelId", {
                get: function () {
                    return Commerce.Session.instance.productCatalogStore.Context.ChannelId;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CompareProductsViewModel.prototype, "_catalogId", {
                get: function () {
                    return Commerce.Session.instance.productCatalogStore.Context.CatalogId;
                },
                enumerable: true,
                configurable: true
            });
            CompareProductsViewModel.prototype.loadAsync = function () {
                var _this = this;
                if (!Commerce.ArrayExtensions.hasElements(this._productIds)) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                var productPrices;
                var productRatings;
                var loadResults = [];
                var products;
                var getProductsResult = this.getProductDetailsAsync(this._productIds)
                    .done(function (results) {
                    products = results;
                });
                loadResults.push(getProductsResult);
                var loadComparisionLinesResult = this.loadProductComparisonLinesAsync(this._productIds);
                loadResults.push(loadComparisionLinesResult);
                var getActivePricesResult = Commerce.ProductPropertiesHelper.getActivePricesUsingCart(this._productIds)
                    .done(function (results) {
                    productPrices = results;
                });
                loadResults.push(getActivePricesResult);
                if (Commerce.ApplicationContext.Instance.channelConfiguration.EnableProductRatingsForRetailStores) {
                    var getActiveRatingsResult = Commerce.ProductPropertiesHelper.getProductRatingsUsingCart(this._productIds)
                        .done(function (results) {
                        productRatings = results;
                    });
                    loadResults.push(getActiveRatingsResult);
                }
                return this._isBusyUntil(Commerce.VoidAsyncResult.join(loadResults)).done(function () {
                    Commerce.ProductPropertiesHelper.updatePricesOnSimpleProducts(products, productPrices);
                    var productRatingsByItemId = new Commerce.Dictionary();
                    if (Commerce.ApplicationContext.Instance.channelConfiguration.EnableProductRatingsForRetailStores) {
                        productRatings.forEach(function (productRating) {
                            productRatingsByItemId.setItem(productRating.ProductId, productRating);
                        });
                    }
                    var productInfos = products.map(function (product) {
                        return {
                            product: product,
                            image: {
                                source: product.PrimaryImageUrl,
                                altText: product.Name
                            },
                            rating: Commerce.ApplicationContext.Instance.channelConfiguration.EnableProductRatingsForRetailStores ?
                                productRatingsByItemId.getItem(product.RecordId) : null
                        };
                    });
                    _this.products(_this._productIds.map(function (id) {
                        return Commerce.ArrayExtensions.firstOrUndefined(productInfos, function (product) {
                            return product.product.RecordId === id;
                        });
                    }));
                    if (Commerce.Session.instance.connectionStatus !== Commerce.Client.Entities.ConnectionStatusType.Online) {
                        _this._getOfflineImagesAsync();
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            CompareProductsViewModel.prototype.addProductToCartHandlerAsync = function (product) {
                var options = { productSaleDetails: [{ productId: product.RecordId, quantity: 0 }] };
                var operationResult = Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.ItemSale, options);
                return this._isBusyUntil(operationResult).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            CompareProductsViewModel.prototype.removeProductAsync = function (product) {
                this.products(this.products().filter(function (item) {
                    return item.product.RecordId !== product.RecordId;
                }));
                var productIds = this.products().map(function (productInfo) {
                    return productInfo.product.RecordId;
                });
                this.productComparisonLines.removeAll();
                this._productIds = productIds;
                return this.loadAsync();
            };
            CompareProductsViewModel.prototype.viewProductDetails = function (product) {
                var productDetailsOptions = {
                    product: product,
                    productId: product.RecordId,
                    isSelectionMode: false,
                    correlationId: Commerce.StringExtensions.EMPTY
                };
                Commerce.ViewModelAdapter.navigate("SimpleProductDetailsView", productDetailsOptions);
            };
            CompareProductsViewModel.prototype.loadProductComparisonLinesAsync = function (productIds) {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                if (Commerce.ArrayExtensions.hasElements(productIds)) {
                    asyncQueue.enqueue(function () {
                        return _this._getProductComparisonLinesAsync(productIds)
                            .done(function (productComparisonLines) {
                            _this.productComparisonLines(_this.productComparisonLines().concat(productComparisonLines));
                        });
                    });
                }
                return asyncQueue.run();
            };
            CompareProductsViewModel.prototype.getProductDetailsAsync = function (productIds) {
                return this.productManager.getByIdsAsync(productIds, this._channelId);
            };
            CompareProductsViewModel.prototype._getProductComparisonLinesAsync = function (productIds) {
                return this.productManager.getProductComparisonLinesAsync(this._channelId, this._catalogId, productIds)
                    .done(function (productComparisonLines) {
                    for (var i = 0; i < productComparisonLines.length; i++) {
                        for (var j = 0; j < productComparisonLines[i].ProductAttributeComparisonEntries.length; j++) {
                            var entry = productComparisonLines[i].ProductAttributeComparisonEntries[j];
                            if (Commerce.ObjectExtensions.isNullOrUndefined(entry.AttributeValue)) {
                                entry.AttributeValue = new Commerce.Proxy.Entities.AttributeValueClass();
                            }
                            else {
                                switch (entry.AttributeValue.DataTypeValue) {
                                    case Commerce.Proxy.Entities.AttributeDataType.Currency:
                                        if (!Commerce.ObjectExtensions.isNullOrUndefined(entry.AttributeValue.CurrencyValue)) {
                                            entry.AttributeValue.displayText =
                                                Commerce.NumberExtensions.formatCurrency(entry.AttributeValue.CurrencyValue);
                                        }
                                        break;
                                    case Commerce.Proxy.Entities.AttributeDataType.DateTime:
                                        if (!Commerce.ObjectExtensions.isNullOrUndefined(entry.AttributeValue.DateTimeOffsetValue)) {
                                            var formatter = Commerce.Host.instance.globalization.getDateTimeFormatter(Commerce.Host.Globalization.DateTimeFormat.DATE_TIME);
                                            entry.AttributeValue.displayText = formatter.format(entry.AttributeValue.DateTimeOffsetValue);
                                        }
                                        break;
                                    case Commerce.Proxy.Entities.AttributeDataType.Text:
                                        if (!Commerce.ObjectExtensions.isNullOrUndefined(entry.AttributeValue.TextValue)) {
                                            entry.AttributeValue.displayText = entry.AttributeValue.TextValue;
                                        }
                                        break;
                                    case Commerce.Proxy.Entities.AttributeDataType.Decimal:
                                        if (!Commerce.ObjectExtensions.isNullOrUndefined(entry.AttributeValue.FloatValue)) {
                                            entry.AttributeValue.displayText =
                                                Commerce.NumberExtensions.formatNumber(entry.AttributeValue.FloatValue, Commerce.NumberExtensions.getDecimalPrecision());
                                        }
                                        break;
                                    case Commerce.Proxy.Entities.AttributeDataType.Integer:
                                        if (!Commerce.ObjectExtensions.isNullOrUndefined(entry.AttributeValue.IntegerValue)) {
                                            entry.AttributeValue.displayText =
                                                Commerce.NumberExtensions.formatNumber(entry.AttributeValue.IntegerValue, 0);
                                        }
                                        break;
                                    case Commerce.Proxy.Entities.AttributeDataType.TrueFalse:
                                        if (!Commerce.ObjectExtensions.isNullOrUndefined(entry.AttributeValue.BooleanValue)) {
                                            entry.AttributeValue.displayText = entry.AttributeValue.BooleanValue.toLocaleString();
                                        }
                                        break;
                                }
                                if (!entry.AttributeValue.displayText) {
                                    entry.AttributeValue.displayText = Commerce.ViewModelAdapter.getResourceString("string_705");
                                }
                            }
                        }
                    }
                });
            };
            CompareProductsViewModel.prototype._getOfflineImagesAsync = function () {
                var _this = this;
                var pageSize = 1;
                var skip = 0;
                var getProductOfflineImageResults = [];
                var blobsByProductId = new Commerce.Dictionary();
                this._productIds.forEach(function (productId) {
                    var productImageResult = _this.productManager.getMediaBlobsAsync(productId, _this._channelId, _this._catalogId, pageSize, skip)
                        .done(function (mediaBlobs) {
                        if (Commerce.ArrayExtensions.hasElements(mediaBlobs)) {
                            blobsByProductId.setItem(productId, Commerce.ArrayExtensions.firstOrUndefined(mediaBlobs));
                        }
                    });
                    getProductOfflineImageResults.push(productImageResult);
                });
                return Commerce.VoidAsyncResult.join(getProductOfflineImageResults).done(function () {
                    var productInfos = Commerce.ObjectExtensions.clone(_this.products());
                    productInfos.forEach(function (productInfo) {
                        var mediaBlob = blobsByProductId.getItem(productInfo.product.RecordId);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(mediaBlob)) {
                            productInfo.image = {
                                source: mediaBlob.Content,
                                altText: mediaBlob.AltText
                            };
                        }
                    });
                    _this.products(productInfos);
                });
            };
            CompareProductsViewModel.MAX_NUMBER_OF_PRODUCTS = 3;
            return CompareProductsViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.CompareProductsViewModel = CompareProductsViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var CostAccountMode;
        (function (CostAccountMode) {
            CostAccountMode[CostAccountMode["AccountSelection"] = 0] = "AccountSelection";
            CostAccountMode[CostAccountMode["AmountEntry"] = 1] = "AmountEntry";
        })(CostAccountMode = ViewModels.CostAccountMode || (ViewModels.CostAccountMode = {}));
        var CostAccountViewModel = (function (_super) {
            __extends(CostAccountViewModel, _super);
            function CostAccountViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw "Invalid options passed to the CostAccountViewModel constructor: options cannot be null or undefined.";
                }
                else if (options.accountType !== Commerce.Proxy.Entities.IncomeExpenseAccountType.Income
                    && options.accountType !== Commerce.Proxy.Entities.IncomeExpenseAccountType.Expense) {
                    throw "Invalid options passed to the CostAccountViewModel constructor: options.accountType is not a supported account type.";
                }
                else if (!(options.selectionHandler instanceof Commerce.CancelableSelectionHandler)) {
                    throw new Error("Invalid options passed to the CostAccountViewModel constructor: selectionHandler is not a CancelableSelectionHandler.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.accounts)) {
                    throw new Error("Invalid options passed to the CostAccountViewModel constructor: accounts field cannot be null or undefined.");
                }
                _this.isAccountSelected = ko.observable(true);
                _this.viewMode = ko.observable(CostAccountMode.AccountSelection);
                _this.amountInput = ko.observable("");
                _this.accounts = ko.observableArray(options.accounts);
                _this._isLineSelectionInProgress = ko.observable(false);
                _this._isBusyWhen(ko.computed(function () { return _this._isLineSelectionInProgress(); }));
                _this._accountType = options.accountType;
                _this._selectedAccount = null;
                _this._selectionHandler = options.selectionHandler;
                return _this;
            }
            CostAccountViewModel.prototype.setNumPadPublisher = function (value) {
                this._numPadPublisher = value;
            };
            CostAccountViewModel.prototype.onShown = function () {
                Commerce.Peripherals.instance.numPad.enable(this._numPadPublisher);
            };
            CostAccountViewModel.prototype.onHidden = function () {
                Commerce.Peripherals.instance.numPad.disable();
                if (!this._isLineSelectionInProgress()) {
                    this._selectionHandler.cancel();
                }
            };
            CostAccountViewModel.prototype.onAccountSelectionChanged = function (accounts) {
                this._selectedAccount = Commerce.ArrayExtensions.firstOrUndefined(accounts);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._selectedAccount)) {
                    this.isAccountSelected(false);
                }
                else {
                    this.isAccountSelected(true);
                }
            };
            CostAccountViewModel.prototype.onConfirmSelectAccount = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._selectedAccount)) {
                    this.viewMode(CostAccountMode.AmountEntry);
                    this.isAccountSelected(true);
                }
            };
            CostAccountViewModel.prototype.onSaveAccountAsync = function () {
                var _this = this;
                var numberEntered = Commerce.NumberExtensions.parseNumber(this.amountInput());
                this.amountInput("");
                if (isNaN(numberEntered)) {
                    Commerce.NotificationHandler.displayClientErrors([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.AMOUNT_IS_NOT_VALID)]);
                    return;
                }
                var incomeExpenseLine = {};
                incomeExpenseLine.AccountTypeValue = this._accountType;
                incomeExpenseLine.IncomeExpenseAccount = this._selectedAccount.AccountNumber;
                if (this._accountType === Commerce.Proxy.Entities.IncomeExpenseAccountType.Expense) {
                    incomeExpenseLine.Amount = (-1) * numberEntered;
                }
                else {
                    incomeExpenseLine.Amount = numberEntered;
                }
                var onCanceled = function () {
                    _this._isLineSelectionInProgress(false);
                };
                var onFailed = function (errors) {
                    _this._isLineSelectionInProgress(false);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                };
                this._selectionHandler.select(incomeExpenseLine, onCanceled, onFailed);
            };
            return CostAccountViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.CostAccountViewModel = CostAccountViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var CommandBase = (function () {
            function CommandBase(name) {
                this.name = name;
            }
            CommandBase.prototype.dispose = function () {
                Commerce.ObjectExtensions.disposeAllProperties(this);
            };
            return CommandBase;
        }());
        ViewModels.CommandBase = CommandBase;
        var Command = (function (_super) {
            __extends(Command, _super);
            function Command(context, name, icon, labelResourceId) {
                var _this = _super.call(this, name) || this;
                _this.context = context;
                _this._canExecute = true;
                _this._isVisible = true;
                _this._isProcessing = false;
                _this.icon = icon;
                _this._labelResourceId = labelResourceId;
                _this.context.messageChannel.addMessageHandler("Initialize", function (data) {
                    _this.init(data);
                });
                _this.context.messageChannel.start();
                return _this;
            }
            Object.defineProperty(Command.prototype, "label", {
                get: function () {
                    return this.context.stringResourceManager.getString(this._labelResourceId);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Command.prototype, "canExecute", {
                get: function () {
                    return this._canExecute;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Command.prototype, "isVisible", {
                get: function () {
                    return this._isVisible;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Command.prototype, "isProcessing", {
                get: function () {
                    return this._isProcessing;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Command.prototype, "extraClass", {
                get: function () {
                    return Commerce.CSSHelpers.getIconClass(this.icon);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Command.prototype, "contextualActions", {
                get: function () {
                    return [];
                },
                enumerable: true,
                configurable: true
            });
            Command.prototype.setIsProcessing = function (value) {
                if (value !== this._isProcessing) {
                    this._isProcessing = value;
                    var messageChannel = this.context.messageChannel;
                    messageChannel.sendMessage("IsProcessingChanged", this._isProcessing);
                }
            };
            Command.prototype.setIsVisible = function (value) {
                if (value !== this._isVisible) {
                    this._isVisible = value;
                    var messageChannel = this.context.messageChannel;
                    messageChannel.sendMessage("VisibilityChanged", this._isVisible);
                }
            };
            Command.prototype.setCanExecute = function (value) {
                if (value !== this._canExecute) {
                    this._canExecute = value;
                    var messageChannel = this.context.messageChannel;
                    messageChannel.sendMessage("CanExecuteChanged", this._canExecute);
                }
            };
            return Command;
        }(CommandBase));
        ViewModels.Command = Command;
        var CommandViewModel = (function () {
            function CommandViewModel(command, messageChannel) {
                this.name = command.name;
                this.label = command.label;
                this._command = command;
                if (Commerce.ObjectExtensions.isNullOrUndefined(messageChannel) && command instanceof Commerce.Extensibility.ExtensionCommand) {
                    messageChannel = command.messageChannel;
                }
                this.extraClass = command.extraClass;
                this._messageChannel = messageChannel;
                this._messageChannel.start();
            }
            Object.defineProperty(CommandViewModel.prototype, "canExecute", {
                get: function () {
                    return this._command.canExecute;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CommandViewModel.prototype, "isVisible", {
                get: function () {
                    return this._command.isVisible;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CommandViewModel.prototype, "isProcessing", {
                get: function () {
                    return this._command.isProcessing;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CommandViewModel.prototype, "contextualActions", {
                get: function () {
                    if (this._command instanceof Command) {
                        return this._command.contextualActions;
                    }
                    else {
                        return [];
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CommandViewModel.prototype, "id", {
                get: function () {
                    return Commerce.StringExtensions.format(CommandViewModel.ID_FORMAT_STRING, Commerce.ViewModelAdapter.getCurrentViewName(), this.name);
                },
                enumerable: true,
                configurable: true
            });
            CommandViewModel.prototype.execute = function (args) {
                var _this = this;
                if (!this.canExecute) {
                    return Promise.resolve();
                }
                Commerce.RetailLogger.viewModelCommandExecutionStarted(args.correlationId, this.id);
                return this._command.execute(args).then(function () {
                    Commerce.RetailLogger.viewModelCommandExecutionFinished(args.correlationId, _this.id);
                }).catch(function (reason) {
                    var errors = Commerce.ErrorHelper.toProxyErrors(reason);
                    var errorCodes = Commerce.ErrorHelper.getErrorResourceIds(errors);
                    Commerce.RetailLogger.viewModelCommandExecutionFailed(args.correlationId, _this.id, errorCodes, Commerce.ErrorHelper.serializeError(reason));
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            CommandViewModel.prototype.addMessageHandler = function (messageType, handler) {
                return this._messageChannel.addMessageHandler(messageType, handler);
            };
            CommandViewModel.prototype.sendMessage = function (messageType, data) {
                this._messageChannel.sendMessage(messageType, data);
                if (messageType === "Initialize" && this._command instanceof Commerce.Extensibility.ExtensionCommand) {
                    Commerce.RetailLogger.viewModelExtensionCommandIntialized(this._command.name, this._command.extensionPublisher, this._command.extensionPackageName, this._command.extensionPackageVersion);
                }
            };
            CommandViewModel.prototype.dispose = function () {
                Commerce.ObjectExtensions.disposeAllProperties(this);
            };
            CommandViewModel.ID_FORMAT_STRING = "{0}_{1}Command";
            return CommandViewModel;
        }());
        ViewModels.CommandViewModel = CommandViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var CustomViewControllerAdapterViewModel = (function (_super) {
            __extends(CustomViewControllerAdapterViewModel, _super);
            function CustomViewControllerAdapterViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                _this.implementsICommandHostViewModel = true;
                _this._isBusyFlag = ko.observable(options.isProcessing);
                _this._isBusyWhen(_this._isBusyFlag);
                _this._messageChannel = options.messageChannel;
                _this._messageChannel.addMessageHandler("IsProcessingChanged", function (newIsProcessing) {
                    _this._isBusyFlag(newIsProcessing);
                });
                if (Commerce.ArrayExtensions.hasElements(options.commands)) {
                    var commandsByName_1 = new Commerce.Dictionary();
                    _this._commands = options.commands.map(function (def) {
                        var posToCommandPort = new Commerce.Messaging.PosMessagePort();
                        var commandToPosPort = new Commerce.Messaging.PosMessagePort();
                        var command = new CustomViewControllerCommand(new Commerce.Messaging.MessageChannelEndpoint(commandToPosPort, posToCommandPort), def, _this._sendExecuteCommandMessage.bind(_this));
                        commandsByName_1.setItem(command.name, command);
                        return new ViewModels.CommandViewModel(command, new Commerce.Messaging.MessageChannelEndpoint(posToCommandPort, commandToPosPort));
                    });
                    _this._messageChannel.addMessageHandler("CommandCanExecuteChanged", function (data) {
                        var command = commandsByName_1.getItem(data.commandName);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(command)) {
                            command.canExecute = data.canExecute;
                        }
                    });
                    _this._messageChannel.addMessageHandler("CommandIsVisibleChanged", function (data) {
                        var command = commandsByName_1.getItem(data.commandName);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(command)) {
                            command.isVisible = data.isVisible;
                        }
                    });
                }
                else {
                    _this._commands = [];
                }
                _this._messageChannel.start();
                return _this;
            }
            Object.defineProperty(CustomViewControllerAdapterViewModel.prototype, "commands", {
                get: function () {
                    return this._commands;
                },
                enumerable: true,
                configurable: true
            });
            CustomViewControllerAdapterViewModel.prototype._sendExecuteCommandMessage = function (correlationId, name) {
                var commandVm = Commerce.ArrayExtensions.firstOrUndefined(this.commands, function (vm) {
                    return vm.name === name;
                });
                var commandId = Commerce.ObjectExtensions.isNullOrUndefined(commandVm) ? "" : commandVm.id;
                this._messageChannel.sendMessage("ExecuteCommand", { commandId: commandId, commandName: name, correlationId: correlationId });
            };
            return CustomViewControllerAdapterViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.CustomViewControllerAdapterViewModel = CustomViewControllerAdapterViewModel;
        var CustomViewControllerCommand = (function (_super) {
            __extends(CustomViewControllerCommand, _super);
            function CustomViewControllerCommand(messageChannel, commandDefinition, executeImpl) {
                var _this = _super.call(this, commandDefinition.name) || this;
                _this.label = commandDefinition.label;
                _this._canExecute = commandDefinition.canExecute;
                _this._isVisible = commandDefinition.isVisible;
                _this.extraClass = Commerce.CSSHelpers.getIconClass(commandDefinition.icon);
                _this._messageChannel = messageChannel;
                _this._exeucteImpl = executeImpl;
                _this._messageChannel.start();
                return _this;
            }
            Object.defineProperty(CustomViewControllerCommand.prototype, "isVisible", {
                get: function () {
                    return this._isVisible;
                },
                set: function (value) {
                    if (value !== this._isVisible) {
                        this._isVisible = value;
                        this._messageChannel.sendMessage("VisibilityChanged", this._isVisible);
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CustomViewControllerCommand.prototype, "canExecute", {
                get: function () {
                    return this._canExecute;
                },
                set: function (value) {
                    if (value !== this._canExecute) {
                        this._canExecute = value;
                        this._messageChannel.sendMessage("CanExecuteChanged", this._canExecute);
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CustomViewControllerCommand.prototype, "isProcessing", {
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            CustomViewControllerCommand.prototype.execute = function (args) {
                if (this.canExecute) {
                    this._exeucteImpl(args.correlationId, this.name);
                }
                return Promise.resolve();
            };
            return CustomViewControllerCommand;
        }(ViewModels.CommandBase));
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var CustomerAddEditViewModelEnum;
        (function (CustomerAddEditViewModelEnum) {
            CustomerAddEditViewModelEnum[CustomerAddEditViewModelEnum["Add"] = 1] = "Add";
            CustomerAddEditViewModelEnum[CustomerAddEditViewModelEnum["Edit"] = 2] = "Edit";
        })(CustomerAddEditViewModelEnum = ViewModels.CustomerAddEditViewModelEnum || (ViewModels.CustomerAddEditViewModelEnum = {}));
        var CustomerAddEditViewModel = (function (_super) {
            __extends(CustomerAddEditViewModel, _super);
            function CustomerAddEditViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                _this.currencies = Commerce.ApplicationContext.Instance.Currencies;
                options = options || { customer: null };
                _this._isSelectionMode = !Commerce.ObjectExtensions.isNullOrUndefined(options.customerCreatedOrUpdatedHandler);
                _this._customerCreatedOrUpdatedHandler = options.customerCreatedOrUpdatedHandler;
                _this._customerAddEditOperationHandler = options.customerAddEditOperationHandler;
                _this.mode = ko.observable(-1);
                _this.customerProxy = ViewModels.Utilities.ObservableProxyHelper.cloneToObservableProxyObject(options.customer || new Commerce.Proxy.Entities.CustomerClass, _this._notifyChangeToExtensionsCallback.bind(_this));
                _this.canSave = ko.computed(function () {
                    return _this._canSaveCustomer();
                });
                _this.customer = ko.observable(null);
                _this.customerGroups = ko.observableArray([]);
                _this.customerTypes = ko.observableArray([]);
                _this.languages = ko.observableArray([]);
                _this.customerTitles = ko.observableArray([]);
                _this.primaryEmailMarketingOptIn = ko.observable(false);
                _this.primaryPhoneNumberMarketingOptIn = ko.observable(false);
                var receiptPreferences = [
                    { code: Commerce.Proxy.Entities.CustomerReceiptPreferenceEnum.POS, description: Commerce.ViewModelAdapter.getResourceString("string_1363") },
                    { code: Commerce.Proxy.Entities.CustomerReceiptPreferenceEnum.Email, description: Commerce.ViewModelAdapter.getResourceString("string_1364") },
                    { code: Commerce.Proxy.Entities.CustomerReceiptPreferenceEnum.Both, description: Commerce.ViewModelAdapter.getResourceString("string_1365") }
                ];
                _this.receiptPreferences = ko.observableArray(receiptPreferences);
                _this.customerIsPerson = ko.computed(function () {
                    return _this.customerProxy.CustomerTypeValue() === Commerce.Proxy.Entities.CustomerType.Person;
                }, _this);
                _this.addressFilled = ko.computed(_this._computeAddressFilled, _this);
                _this.numberOfAddressesText = ko.computed(function () {
                    var customer = _this.customer();
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(customer)) {
                        var addresses = customer.Addresses;
                        var numberOfAddresses = Commerce.ArrayExtensions.countElements(addresses);
                        return numberOfAddresses === 1
                            ? Commerce.ViewModelAdapter.getResourceString("string_4843")
                            : Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_4844"), numberOfAddresses);
                    }
                    return Commerce.StringExtensions.EMPTY;
                }, _this);
                _this._initialCustomerAccountNumber = options.customer ? options.customer.AccountNumber : undefined;
                if (Commerce.StringExtensions.isNullOrWhitespace(_this._initialCustomerAccountNumber) || _this._initialCustomerAccountNumber === "0") {
                    _this.mode(CustomerAddEditViewModelEnum.Add);
                }
                else {
                    _this.mode(CustomerAddEditViewModelEnum.Edit);
                }
                _this.allowChangeCustomerType = ko.observable(_this.mode() === CustomerAddEditViewModelEnum.Add);
                var customerCardViewModelOptions = {
                    isLoyaltyCardDataReadOnly: true,
                    onAddressEditClicked: function (address) {
                        _this._goToAddEditAddressView(Commerce.LoggerHelper.getNewCorrelationId(), address);
                    }
                };
                _this._customerCardViewModel = new ViewModels.CustomerCardViewModel(context, customerCardViewModelOptions);
                _this._customerAttributeViewModels = ko.observableArray([]);
                _this._customerAttributeDefinitions = [];
                _this._clientBookAttributeDefinitions = [];
                _this.hasCustomerAttributes = ko.computed(function () {
                    return Commerce.ArrayExtensions.hasElements(_this._customerAttributeViewModels());
                }, _this);
                _this.isMarketingOptInFeatureEnabled = ko.computed(function () {
                    return Commerce.CustomerHelper.isMarketingOptInFeatureEnabled(_this.customer());
                }, _this);
                _this.shouldShowNumberOfAddresses = ko.computed(function () {
                    return _this.canSave() && _this.isMarketingOptInFeatureEnabled();
                }, _this);
                _this.customerAttributesForDisplay = ko.computed(function () {
                    return _this._customerAttributeViewModels().filter(function (customerAttributeViewModel) {
                        return (!customerAttributeViewModel.attributeDefinition.IsHidden);
                    }).sort(function (firstAttribute, secondAttribute) {
                        var firstDisplayOrder = firstAttribute.attributeDefinition.DisplayOrder === 0 ?
                            Number.MAX_VALUE : firstAttribute.attributeDefinition.DisplayOrder;
                        var secondDisplayOrder = secondAttribute.attributeDefinition.DisplayOrder === 0 ?
                            Number.MAX_VALUE : secondAttribute.attributeDefinition.DisplayOrder;
                        return firstDisplayOrder - secondDisplayOrder;
                    });
                }, _this);
                _this._isExtensionCommandViewModelBusy = ko.observable(false);
                if (Commerce.ObjectExtensions.isNullOrUndefined(CustomerAddEditViewModel._viewExtensionsManager)) {
                    _this._extensionCommandViewModels = [];
                    _this._customControlViewModels = [];
                }
                else {
                    _this._extensionCommandViewModels = CustomerAddEditViewModel._viewExtensionsManager.getAppBarCommands()
                        .map(function (command) {
                        var commandVM = new ViewModels.CommandViewModel(command);
                        commandVM.addMessageHandler("CustomerChanged", _this._customerAddEditCustomerChangedData.bind(_this));
                        commandVM.addMessageHandler("IsProcessingChanged", function (isProcessing) {
                            if (isProcessing) {
                                _this._isExtensionCommandViewModelBusy(true);
                            }
                            else {
                                var isAnyCommandProcessing = _this._extensionCommandViewModels.some(function (vm) {
                                    return vm.isProcessing;
                                });
                                _this._isExtensionCommandViewModelBusy(isAnyCommandProcessing);
                            }
                        });
                        return commandVM;
                    });
                    _this._isBusyWhen(_this._isExtensionCommandViewModelBusy);
                    _this._customControlViewModels = CustomerAddEditViewModel._viewExtensionsManager.getCustomControls();
                    _this._customControlViewModels.forEach(function (vm) {
                        vm.addMessageHandlerForCustomerChanged(_this._customerAddEditCustomerChangedData.bind(_this));
                    });
                    var isCustomControlViewModelsBusy = ko.computed(function () {
                        return _this._customControlViewModels.some(function (customControlViewModel) {
                            return customControlViewModel.isBusy();
                        });
                    });
                    _this._isBusyWhen(isCustomControlViewModelsBusy);
                }
                _this.numberOfEmailAddressesText = ko.computed(function () {
                    return _this._getNumberOfEmailAddressesText(_this.customer());
                }, _this);
                _this.numberOfPhoneNumbersText = ko.computed(function () {
                    return _this._getNumberOfPhoneNumbersText(_this.customer());
                }, _this);
                _this.emailAddresses = ko.computed(function () {
                    return _this._getDisplayedEmails(_this.customer());
                }, _this);
                _this.phoneNumbers = ko.computed(function () {
                    return _this._getDisplayedPhones(_this.customer());
                }, _this);
                return _this;
            }
            CustomerAddEditViewModel.prototype.contactInfoTitleClicked = function (contactInfo) {
                this._showAddEditContactInfoDialog(Commerce.LoggerHelper.getNewCorrelationId(), contactInfo);
            };
            Object.defineProperty(CustomerAddEditViewModel, "viewExtensionManager", {
                set: function (manager) {
                    CustomerAddEditViewModel._viewExtensionsManager = manager;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CustomerAddEditViewModel.prototype, "isSelectionMode", {
                get: function () {
                    return this._isSelectionMode;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CustomerAddEditViewModel.prototype, "customerCardViewModel", {
                get: function () {
                    return this._customerCardViewModel;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CustomerAddEditViewModel.prototype, "extensionCommandViewModels", {
                get: function () {
                    return this._extensionCommandViewModels;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CustomerAddEditViewModel.prototype, "customControlViewModels", {
                get: function () {
                    return this._customControlViewModels;
                },
                enumerable: true,
                configurable: true
            });
            CustomerAddEditViewModel.prototype.onShown = function () {
                this._cancelSelectionHandlerOnHidden = true;
                this._cancelOperationHandlerOnHidden = true;
            };
            CustomerAddEditViewModel.prototype.onNavigateBack = function () {
                this._cancelSelectionHandlerOnHidden = false;
                this._cancelOperationHandlerOnHidden = true;
                return true;
            };
            CustomerAddEditViewModel.prototype.onHidden = function () {
                if (this._cancelSelectionHandlerOnHidden && !Commerce.ObjectExtensions.isNullOrUndefined(this._customerCreatedOrUpdatedHandler)) {
                    this._customerCreatedOrUpdatedHandler.cancel();
                }
                if (this._cancelOperationHandlerOnHidden && !Commerce.ObjectExtensions.isNullOrUndefined(this._customerAddEditOperationHandler)) {
                    this._customerAddEditOperationHandler.cancel();
                }
            };
            CustomerAddEditViewModel.prototype.loadAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return _this._setCustomerOptions().done(function () {
                        var customer = ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(_this.customerProxy);
                        _this._initializeCustomerAttributes(customer.Attributes);
                    });
                }).enqueue(function () {
                    return _this._loadCustomerImpl(_this._initialCustomerAccountNumber);
                });
                return this._isBusyUntil(asyncQueue.run()).done(function () {
                    _this._customerCardViewModel.customer(_this.customer());
                    _this.extensionCommandViewModels.forEach(function (vm) {
                        vm.sendMessage("Initialize", {
                            isNewCustomer: _this.mode() === CustomerAddEditViewModelEnum.Add,
                            customer: _this._getCurrentCustomerData(),
                            isSelectionMode: _this.isSelectionMode
                        });
                    });
                    _this._customControlViewModels.forEach(function (vm) {
                        vm.init({
                            isNewCustomer: _this.mode() === CustomerAddEditViewModelEnum.Add,
                            customer: _this._getCurrentCustomerData(),
                            isSelectionMode: _this.isSelectionMode
                        });
                    });
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            CustomerAddEditViewModel.prototype.onBlurContactEmail = function () {
                var customer = this.customerProxy;
                if (!Commerce.StringExtensions.isNullOrWhitespace(customer.Email())
                    && Commerce.StringExtensions.isNullOrWhitespace(customer.ReceiptEmail())) {
                    customer.ReceiptEmail(customer.Email());
                }
            };
            CustomerAddEditViewModel.prototype.saveAndAddCustomerToSale = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return asyncQueue.cancelOn(_this._addUpdateNewCustomer(correlationId));
                });
                asyncQueue.enqueue(function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(_this._customerAddEditOperationHandler)) {
                        _this._customerAddEditOperationHandler.cancel();
                    }
                    return _this._addCustomerToCart(correlationId, _this.customerProxy.AccountNumber(), Commerce.Session.instance.cart.AffiliationLines);
                });
                return this._isBusyUntil(asyncQueue.run())
                    .done(function (result) {
                    if (!result.canceled) {
                        Commerce.ViewModelAdapter.navigate("CartView");
                    }
                }).fail(function (errors) {
                    Commerce.RetailLogger.viewsCustomerAddEditViewAddCustomerFailed(correlationId);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            CustomerAddEditViewModel.prototype.saveCustomer = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                if (this._canSaveCustomer()) {
                    return this._isBusyUntil(this._addUpdateNewCustomer(correlationId))
                        .done(function (result) {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(result) || result.canceled) {
                            return;
                        }
                        var newCustomer = ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(_this.customerProxy);
                        var viewOptions = {
                            accountNumber: newCustomer.AccountNumber,
                            correlationId: Commerce.StringExtensions.EMPTY
                        };
                        if (_this._isSelectionMode) {
                            viewOptions.customerSelectionOptions = {
                                customerSelectionHandler: _this._customerCreatedOrUpdatedHandler
                            };
                            _this._cancelSelectionHandlerOnHidden = false;
                        }
                        _this._cancelOperationHandlerOnHidden = true;
                        Commerce.ViewModelAdapter.navigate(CustomerAddEditViewModel.SAVE_CUSTOMER_DESTINATION, viewOptions);
                    }).fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }
                else {
                    return Commerce.AsyncResult.createResolved();
                }
            };
            CustomerAddEditViewModel.prototype.gotoAddNewAddress = function () {
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                return this._goToAddEditAddressView(correlationId);
            };
            CustomerAddEditViewModel.prototype.gotoAddressesView = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                return this._saveCustomerBeforeNavigation(correlationId)
                    .done(function (result) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(result) && !result.canceled) {
                        _this._cancelSelectionHandlerOnHidden = false;
                        var customerAddEditSelectionHandler = new Commerce.CancelableSelectionHandler(function () {
                            var returnOptions = {
                                customer: _this.customer(),
                                customerCreatedOrUpdatedHandler: _this._customerCreatedOrUpdatedHandler
                            };
                            _this._cancelSelectionHandlerOnHidden = false;
                            _this._cancelOperationHandlerOnHidden = false;
                            Commerce.ViewModelAdapter.collapseAndNavigate(CustomerAddEditViewModel.CUSTOMER_ADD_EDIT_VIEW_NAME, returnOptions);
                        }, function () {
                            if (_this._isSelectionMode && !Commerce.ViewModelAdapter.isInView(CustomerAddEditViewModel.CUSTOMER_ADD_EDIT_VIEW_NAME)) {
                                _this._customerCreatedOrUpdatedHandler.cancel();
                            }
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(_this._customerAddEditOperationHandler)
                                && !Commerce.ViewModelAdapter.isInView(CustomerAddEditViewModel.CUSTOMER_ADD_EDIT_VIEW_NAME)) {
                                _this._customerAddEditOperationHandler.cancel();
                            }
                        });
                        var options = {
                            customer: _this.customer(),
                            selectionMode: false,
                            addressSelectionHandler: customerAddEditSelectionHandler
                        };
                        Commerce.ViewModelAdapter.navigate("CustomerAddressesView", options);
                    }
                });
            };
            CustomerAddEditViewModel.prototype.viewEmailAddresses = function () {
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                return this._saveCustomerAndNavigateToContactInfoView(correlationId, Commerce.Proxy.Entities.ContactInfoType.Email);
            };
            CustomerAddEditViewModel.prototype.viewPhoneNumbers = function () {
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                return this._saveCustomerAndNavigateToContactInfoView(correlationId, Commerce.Proxy.Entities.ContactInfoType.Phone);
            };
            CustomerAddEditViewModel.prototype.addNewEmailAddress = function () {
                var newEmail = {
                    Value: Commerce.StringExtensions.EMPTY,
                    IsPrimary: false,
                    IsOptedInMarketing: false,
                    AddressTypeValue: Commerce.Proxy.Entities.ContactInfoType.Email
                };
                return this._showAddEditContactInfoDialog(Commerce.LoggerHelper.getNewCorrelationId(), newEmail);
            };
            CustomerAddEditViewModel.prototype.addNewPhoneNumber = function () {
                var newPhone = {
                    Value: Commerce.StringExtensions.EMPTY,
                    IsPrimary: false,
                    IsOptedInMarketing: false,
                    AddressTypeValue: Commerce.Proxy.Entities.ContactInfoType.Phone
                };
                return this._showAddEditContactInfoDialog(Commerce.LoggerHelper.getNewCorrelationId(), newPhone);
            };
            CustomerAddEditViewModel.prototype.togglePrimaryEmailMarketingOptIn = function (isOptIn) {
                this.primaryEmailMarketingOptIn(isOptIn);
            };
            CustomerAddEditViewModel.prototype.togglePrimaryPhoneNumberMarketingOptIn = function (isOptIn) {
                this.primaryPhoneNumberMarketingOptIn(isOptIn);
            };
            CustomerAddEditViewModel.prototype._showAddEditContactInfoDialog = function (correlationId, contactInfo) {
                var _this = this;
                var customer = ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(this.customerProxy);
                var isReceiptEmail = false;
                if (Commerce.CustomerHelper.isEmailContactInfo(contactInfo)) {
                    isReceiptEmail = contactInfo.isReceiptEmail;
                }
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var getCustomerInfoRequest = new Commerce.Customers.GetContactInfoAndUpdateCustomerClientRequest(correlationId, contactInfo, customer, isReceiptEmail);
                    return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getCustomerInfoRequest)));
                }).enqueue(function (result) {
                    _this.customerProxy.update(result.data.result);
                    return _this._addUpdateNewCustomer(correlationId).done(function () {
                        _this._viewModelChanged = false;
                        _this.mode(ViewModels.CustomerAddEditViewModelEnum.Edit);
                    });
                });
                return this._isBusyUntil(asyncQueue.run())
                    .fail(function (errors) {
                    Commerce.RetailLogger.viewsCustomerAddEditViewAddUpdateContactInfoFailed(correlationId);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            CustomerAddEditViewModel.prototype._goToAddEditAddressView = function (correlationId, address) {
                var _this = this;
                return this._saveCustomerBeforeNavigation(correlationId)
                    .done(function (result) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(result) && !result.canceled) {
                        _this._navigateToAddressAddEditView(address);
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            CustomerAddEditViewModel.prototype._saveCustomerAndNavigateToContactInfoView = function (correlationId, contactInfoType) {
                var _this = this;
                return this._saveCustomerBeforeNavigation(correlationId)
                    .done(function (result) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(result) && !result.canceled) {
                        _this._navigateToCustomerContactInfoView(contactInfoType);
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            CustomerAddEditViewModel.prototype._updateCustomerAsync = function (correlationId, customer) {
                var _this = this;
                var accountNumber = customer.AccountNumber;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue
                    .enqueue(function () {
                    var updateCustomerServiceRequest = new Commerce.UpdateCustomerServiceRequest(correlationId, customer);
                    return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(updateCustomerServiceRequest)));
                }).enqueue(function () {
                    return _this.customerManager.getCustomerDetailsAsync(accountNumber)
                        .done(function (customerDetails) {
                        _this.customer(customerDetails.customer);
                        _this.customerProxy.update(customerDetails.customer);
                    });
                });
                return asyncQueue.run();
            };
            CustomerAddEditViewModel.prototype._addCustomerToCart = function (correlationId, customerId, cartAffiliationLines) {
                var options = {
                    customerId: customerId,
                    cartAffiliations: cartAffiliationLines,
                    correlationId: correlationId
                };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.SetCustomer, options);
            };
            CustomerAddEditViewModel.prototype._revertChanges = function () {
                this.customerProxy.update(this.customer());
                this._viewModelChanged = false;
            };
            CustomerAddEditViewModel.prototype._navigateToAddressAddEditView = function (address) {
                var _this = this;
                this._cancelSelectionHandlerOnHidden = false;
                this._cancelOperationHandlerOnHidden = false;
                var saveAddressSelectionHandler = new Commerce.CancelableSelectionHandler(function (selection) {
                    _this._onAddressCreated(selection.customer);
                }, function () {
                    if (_this._isSelectionMode && !Commerce.ViewModelAdapter.isInView(CustomerAddEditViewModel.CUSTOMER_ADD_EDIT_VIEW_NAME)) {
                        _this._customerCreatedOrUpdatedHandler.cancel();
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(_this._customerAddEditOperationHandler)
                        && !Commerce.ViewModelAdapter.isInView(CustomerAddEditViewModel.CUSTOMER_ADD_EDIT_VIEW_NAME)) {
                        _this._customerAddEditOperationHandler.cancel();
                    }
                });
                var options = {
                    customer: ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(this.customerProxy),
                    address: address,
                    saveAddressSelectionHandler: saveAddressSelectionHandler
                };
                Commerce.ViewModelAdapter.navigate("AddressAddEditView", options);
            };
            CustomerAddEditViewModel.prototype._navigateToCustomerContactInfoView = function (type) {
                var _this = this;
                this._cancelSelectionHandlerOnHidden = false;
                var saveAddressSelectionHandler = new Commerce.CancelableSelectionHandler(function (selection) {
                    var returnOptions = {
                        customer: selection,
                        customerCreatedOrUpdatedHandler: _this._customerCreatedOrUpdatedHandler
                    };
                    Commerce.ViewModelAdapter.collapseAndNavigate(CustomerAddEditViewModel.CUSTOMER_ADD_EDIT_VIEW_NAME, returnOptions);
                }, function () {
                    if (_this._isSelectionMode && !Commerce.ViewModelAdapter.isInView(CustomerAddEditViewModel.CUSTOMER_ADD_EDIT_VIEW_NAME)) {
                        _this._customerCreatedOrUpdatedHandler.cancel();
                    }
                });
                var options = {
                    customer: ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(this.customerProxy),
                    contactInfoType: type,
                    saveContactInfoSelectionHandler: saveAddressSelectionHandler
                };
                Commerce.ViewModelAdapter.navigate("CustomerContactInfoView", options);
            };
            CustomerAddEditViewModel.prototype._onAddressCreated = function (customer) {
                var returnOptions = {
                    customer: customer,
                    customerCreatedOrUpdatedHandler: this._customerCreatedOrUpdatedHandler,
                    customerAddEditOperationHandler: this._customerAddEditOperationHandler
                };
                this._cancelSelectionHandlerOnHidden = false;
                this._cancelOperationHandlerOnHidden = false;
                Commerce.ViewModelAdapter.navigate(CustomerAddEditViewModel.CUSTOMER_ADD_EDIT_VIEW_NAME, returnOptions);
            };
            CustomerAddEditViewModel.prototype._addNewCustomer = function (correlationId, customer) {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var createCustomerServiceRequest = new Commerce.CreateCustomerServiceRequest(correlationId, customer);
                    return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(createCustomerServiceRequest)))
                        .done(function (response) {
                        customer = response.data.customer;
                        _this.customer(customer);
                        _this.customerProxy.update(customer);
                    });
                }).enqueue(function () {
                    return _this.customerManager.getCustomerDetailsAsync(customer.AccountNumber)
                        .done(function (customerDetails) {
                        _this._updateCustomerDetails(customerDetails.customer, customerDetails.primaryAddress);
                    });
                }).enqueue(function () {
                    var postTriggerOptions = { cart: Commerce.Session.instance.cart, customer: customer };
                    return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostCustomerAdd, postTriggerOptions);
                });
                return asyncQueue.run();
            };
            CustomerAddEditViewModel.prototype._addUpdateNewCustomer = function (correlationId) {
                var _this = this;
                var customer = ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(this.customerProxy);
                this._updateCustomerAttributes(customer);
                var isNewCustomer = this.mode() === CustomerAddEditViewModelEnum.Add;
                if (isNewCustomer) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(customer.Addresses)) {
                        customer.Addresses = [];
                    }
                    this._updateCustomerContactInfo(customer);
                }
                return Commerce.Triggers.TriggerHelper.executeTriggerWorkflowAsync(function () {
                    var preTriggerOptions = {
                        isNewCustomer: isNewCustomer,
                        customer: customer
                    };
                    return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreCustomerSave, preTriggerOptions);
                }, function () {
                    return isNewCustomer ? _this._addNewCustomer(correlationId, customer) : _this._updateCustomerAsync(correlationId, customer);
                }, function () {
                    var updatedCustomer = ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(_this.customerProxy);
                    var postTriggerOptions = {
                        isNewCustomer: isNewCustomer,
                        customer: updatedCustomer
                    };
                    return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostCustomerSave, postTriggerOptions);
                });
            };
            CustomerAddEditViewModel.prototype._updateCustomerContactInfo = function (customer) {
                if (!Commerce.StringExtensions.isNullOrWhitespace(customer.Email)) {
                    var primaryEmail = {
                        AddressTypeValue: Commerce.Proxy.Entities.ContactInfoType.Email,
                        Value: customer.Email,
                        IsPrimary: true,
                        IsOptedInMarketing: this.primaryEmailMarketingOptIn()
                    };
                    if (Commerce.ArrayExtensions.hasElements(customer.Contacts)) {
                        var primaryContactInfo = Commerce.ArrayExtensions.firstOrUndefined(customer.Contacts, (function (contact) { return contact.AddressTypeValue === Commerce.Proxy.Entities.ContactInfoType.Email && contact.IsPrimary; }));
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(primaryContactInfo)) {
                            primaryEmail.IsPrimary = false;
                            customer.Email = primaryContactInfo.Value;
                            customer.EmailRecordId = Commerce.ObjectExtensions.isNullOrUndefined(primaryContactInfo.RecordId) ? 0 : primaryContactInfo.RecordId;
                        }
                        customer.Contacts.push(primaryEmail);
                    }
                    else {
                        customer.Contacts = [primaryEmail];
                    }
                }
                if (!Commerce.StringExtensions.isNullOrWhitespace(customer.Phone)) {
                    var primaryPhone = {
                        AddressTypeValue: Commerce.Proxy.Entities.ContactInfoType.Phone,
                        Value: customer.Phone,
                        ValueExtension: customer.PhoneExt,
                        IsPrimary: true,
                        IsOptedInMarketing: this.primaryPhoneNumberMarketingOptIn()
                    };
                    if (Commerce.ArrayExtensions.hasElements(customer.Contacts)) {
                        var primaryContactInfo = Commerce.ArrayExtensions.firstOrUndefined(customer.Contacts, (function (contact) { return contact.AddressTypeValue === Commerce.Proxy.Entities.ContactInfoType.Phone
                            && contact.IsPrimary; }));
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(primaryContactInfo)) {
                            primaryPhone.IsPrimary = false;
                            customer.Phone = primaryContactInfo.Value;
                            customer.PhoneExt = Commerce.StringExtensions.EMPTY;
                            customer.PhoneRecordId = Commerce.ObjectExtensions.isNullOrUndefined(primaryContactInfo.RecordId) ? 0 : primaryContactInfo.RecordId;
                        }
                        customer.Contacts.push(primaryPhone);
                    }
                    else {
                        customer.Contacts = [primaryPhone];
                    }
                }
            };
            CustomerAddEditViewModel.prototype._updateCustomerAttributes = function (customer) {
                for (var i = 0; i < this._customerAttributeViewModels().length; i++) {
                    if (this._customerAttributeViewModels()[i].attributeDefinition.DataTypeValue === Commerce.Proxy.Entities.AttributeDataType.DateTime) {
                        var dateTime = this.getDateTimeValueHandler(i);
                        this._customerAttributeViewModels()[i].attributeValue.dateTimeOffsetValue(dateTime);
                    }
                }
                customer.Attributes = this._customerAttributeViewModels().filter(function (customerAttributeViewModel) {
                    return customerAttributeViewModel.hasValidValue();
                }).map(function (customerAttributeViewModel) {
                    var customerAttribute = Commerce.CustomerHelper.createCustomerAttribute(customerAttributeViewModel.attributeDefinition);
                    customerAttribute.AttributeValue = customerAttributeViewModel.attributeValueAsCommercePropertyValue;
                    return customerAttribute;
                });
            };
            CustomerAddEditViewModel.prototype._computeAddressFilled = function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.customer()) || !Commerce.ArrayExtensions.hasElements(this.customer().Addresses)) {
                    return false;
                }
                var primaryAddress = Commerce.ArrayExtensions.firstOrUndefined(this.customer().Addresses, function (address) {
                    return address.IsPrimary;
                });
                return !Commerce.ObjectExtensions.isNullOrUndefined(primaryAddress)
                    && !Commerce.StringExtensions.isNullOrWhitespace(primaryAddress.Street)
                    && !Commerce.StringExtensions.isNullOrWhitespace(primaryAddress.City)
                    && !Commerce.StringExtensions.isNullOrWhitespace(primaryAddress.ZipCode);
            };
            CustomerAddEditViewModel.prototype._canSaveCustomer = function () {
                var customerType = Commerce.CustomerHelper.getCustomerType(this.customerProxy.CustomerTypeValue());
                var isNameValid = false;
                switch (customerType) {
                    case Commerce.Proxy.Entities.CustomerType.Organization:
                        isNameValid = !Commerce.StringExtensions.isNullOrWhitespace(this.customerProxy.Name());
                        break;
                    case Commerce.Proxy.Entities.CustomerType.Person:
                        isNameValid = !Commerce.StringExtensions.isNullOrWhitespace(this.customerProxy.FirstName()) &&
                            !Commerce.StringExtensions.isNullOrWhitespace(this.customerProxy.LastName());
                        break;
                    default:
                        Commerce.RetailLogger.viewModelCustomerAddEditUnknownCustomerType(this.customerProxy.CustomerTypeValue());
                }
                var result = isNameValid &&
                    customerType !== Commerce.Proxy.Entities.CustomerType.None &&
                    !Commerce.StringExtensions.isNullOrWhitespace(this.customerProxy.CurrencyCode()) &&
                    !Commerce.StringExtensions.isNullOrWhitespace(this.customerProxy.CustomerGroup()) &&
                    !Commerce.StringExtensions.isNullOrWhitespace(this.customerProxy.Language());
                return result;
            };
            CustomerAddEditViewModel.prototype._setCustomerOptions = function () {
                var _this = this;
                var customerGroupsResult = Commerce.ApplicationContext.Instance.customerGroupsAsync.value
                    .done(function (groups) {
                    _this.customerGroups(groups);
                });
                var customerTypesResult = Commerce.ApplicationContext.Instance.customerTypesAsync.value
                    .done(function (types) {
                    _this.customerTypes(types);
                });
                var customerAttributeDefinitionsResult = Commerce.ApplicationContext.Instance.customerAttributeDefinitionsAsync.value
                    .done(function (customerAttributeDefinitions) {
                    _this._customerAttributeDefinitions = customerAttributeDefinitions;
                });
                var clientBookAttributeDefinitionsResult = Commerce.ApplicationContext.Instance.clientBookAttributeDefinitionsAsync.value
                    .done(function (clientBookAttributeDefinitions) {
                    _this._clientBookAttributeDefinitions = clientBookAttributeDefinitions;
                });
                var languagesResult = Commerce.ApplicationContext.Instance.languagesAsync.value
                    .done(function (languages) {
                    _this.languages(languages);
                });
                var customerTitlesResult = Commerce.ApplicationContext.Instance.customerTitlesAsync.value
                    .done(function (titles) {
                    _this.customerTitles(titles);
                });
                var asyncResults = [
                    customerGroupsResult,
                    customerTypesResult,
                    customerAttributeDefinitionsResult,
                    clientBookAttributeDefinitionsResult,
                    languagesResult,
                    customerTitlesResult
                ];
                return Commerce.VoidAsyncResult.join(asyncResults);
            };
            CustomerAddEditViewModel.prototype._loadCustomerImpl = function (accountNumber) {
                var _this = this;
                var customerAddress;
                var asyncResult;
                if (Commerce.StringExtensions.isNullOrWhitespace(accountNumber) || accountNumber === "0") {
                    var defaultCustomerId = Commerce.ApplicationContext.Instance.storeInformation.DefaultCustomerAccount;
                    return this.customerManager.getCustomerDetailsAsync(defaultCustomerId).done(function (customerDetails) {
                        _this.customerProxy.CustomerTypeValue(customerDetails.customer.CustomerTypeValue);
                        _this.customerProxy.CustomerGroup(customerDetails.customer.CustomerGroup);
                        _this.customerProxy.Language(customerDetails.customer.Language);
                        _this.customerProxy.ReceiptSettings(customerDetails.customer.ReceiptSettings);
                        _this.customerProxy.CurrencyCode(customerDetails.customer.CurrencyCode);
                        _this.customerProxy.TitleRecordId(customerDetails.customer.TitleRecordId);
                        _this.mode(CustomerAddEditViewModelEnum.Add);
                    });
                }
                else {
                    this.mode(CustomerAddEditViewModelEnum.Edit);
                    var asyncQueue = new Commerce.AsyncQueue();
                    asyncQueue.enqueue(function () {
                        return _this.customerManager.getCustomerDetailsAsync(accountNumber)
                            .done(function (customerDetails) {
                            _this.customer(customerDetails.customer);
                            customerAddress = customerDetails.primaryAddress;
                            if (customerAddress == null) {
                                customerAddress = new Commerce.Proxy.Entities.AddressClass();
                                customerAddress.ThreeLetterISORegionName =
                                    Commerce.ApplicationContext.Instance.storeInformation.OrgUnitAddress.ThreeLetterISORegionName;
                            }
                            _this._updateCustomerDetails(_this.customer(), customerAddress);
                        });
                    });
                    asyncResult = asyncQueue.run();
                }
                if (this.mode() === CustomerAddEditViewModelEnum.Add) {
                    this.customerProxy.CurrencyCode(this.customerProxy.CurrencyCode() || Commerce.ApplicationContext.Instance.deviceConfiguration.Currency);
                    this.customerProxy.Language(this.customerProxy.Language() || Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName);
                }
                return asyncResult;
            };
            CustomerAddEditViewModel.prototype._getNumberOfEmailAddressesText = function (customer) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(customer) || !Commerce.ArrayExtensions.hasElements(customer.Contacts)) {
                    return Commerce.StringExtensions.EMPTY;
                }
                var emails = customer.Contacts.filter(function (contact) {
                    return contact.AddressTypeValue === Commerce.Proxy.Entities.ContactInfoType.Email;
                });
                var isNumberOfEmailsTextVisible = Commerce.ArrayExtensions.hasElements(emails.filter(function (contact) {
                    return !contact.IsPrimary;
                }));
                if (!isNumberOfEmailsTextVisible) {
                    return Commerce.StringExtensions.EMPTY;
                }
                var numberOfEmails = emails.length;
                if (!Commerce.StringExtensions.isNullOrWhitespace(customer.ReceiptEmail)) {
                    numberOfEmails++;
                }
                var numberOfEmailsText = numberOfEmails > 1 ?
                    Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_4860"), numberOfEmails) :
                    Commerce.ViewModelAdapter.getResourceString("string_4859");
                return numberOfEmailsText;
            };
            CustomerAddEditViewModel.prototype._getNumberOfPhoneNumbersText = function (customer) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(customer) || !Commerce.ArrayExtensions.hasElements(customer.Contacts)) {
                    return Commerce.StringExtensions.EMPTY;
                }
                var phones = customer.Contacts.filter(function (contact) {
                    return contact.AddressTypeValue === Commerce.Proxy.Entities.ContactInfoType.Phone;
                });
                var isNumberOfPhonesTextVisible = Commerce.ArrayExtensions.hasElements(phones.filter(function (contact) {
                    return !contact.IsPrimary;
                }));
                if (!isNumberOfPhonesTextVisible) {
                    return Commerce.StringExtensions.EMPTY;
                }
                var numberOfPhones = phones.length;
                var numberOfPhonesText = numberOfPhones > 1 ?
                    Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_4862"), numberOfPhones) :
                    Commerce.ViewModelAdapter.getResourceString("string_4861");
                return numberOfPhonesText;
            };
            CustomerAddEditViewModel.prototype._getDisplayedPhones = function (customer) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(customer) || !Commerce.ArrayExtensions.hasElements(customer.Contacts)) {
                    return [];
                }
                var displayedPhones = customer.Contacts.filter(function (contact) {
                    return contact.AddressTypeValue === Commerce.Proxy.Entities.ContactInfoType.Phone && contact.IsPrimary;
                });
                return displayedPhones;
            };
            CustomerAddEditViewModel.prototype._getDisplayedEmails = function (customer) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(customer)) {
                    return [];
                }
                var displayedEmails = [];
                if (Commerce.ArrayExtensions.hasElements(customer.Contacts)) {
                    var primaryEmails = customer.Contacts.filter(function (contact) {
                        return contact.AddressTypeValue === Commerce.Proxy.Entities.ContactInfoType.Email && contact.IsPrimary;
                    });
                    if (Commerce.ArrayExtensions.hasElements(primaryEmails)) {
                        displayedEmails = displayedEmails.concat(primaryEmails);
                    }
                }
                var receiptEmail = {
                    Value: customer.ReceiptEmail,
                    IsPrimary: false,
                    IsOptedInMarketing: false,
                    AddressTypeValue: Commerce.Proxy.Entities.ContactInfoType.Email,
                    isReceiptEmail: true
                };
                displayedEmails.push(receiptEmail);
                return displayedEmails;
            };
            CustomerAddEditViewModel.prototype._updateCustomerDetails = function (customerFound, address) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(customerFound)) {
                    customerFound = new Commerce.Proxy.Entities.CustomerClass();
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(address)) {
                    address = new Commerce.Proxy.Entities.AddressClass();
                }
                this.customerProxy.update(customerFound);
                this._viewModelChanged = false;
            };
            CustomerAddEditViewModel.prototype._initializeCustomerAttributes = function (existingCustomerAttributes) {
                var _this = this;
                this._customerAttributeViewModels.removeAll();
                existingCustomerAttributes = Commerce.ObjectExtensions.isNullOrUndefined(existingCustomerAttributes) ? [] : existingCustomerAttributes;
                var attributeRecIdToCutomerAttribute = new Commerce.Dictionary();
                existingCustomerAttributes.forEach(function (existingCustomerAttribute) {
                    attributeRecIdToCutomerAttribute.setItem(existingCustomerAttribute.RecordId, existingCustomerAttribute);
                });
                var attributeDefinitions = this._getMergedAttributeDefinitions();
                attributeDefinitions.forEach(function (customerAttributeDefinition) {
                    var matchingCustomerAttribute = attributeRecIdToCutomerAttribute.getItem(customerAttributeDefinition.RecordId);
                    if (Commerce.ObjectExtensions.isNullOrUndefined(matchingCustomerAttribute)) {
                        matchingCustomerAttribute = Commerce.CustomerHelper.createCustomerAttribute(customerAttributeDefinition);
                    }
                    var customerAttributeViewModel = new ViewModels.CustomerAttributeViewModel(_this.context, {
                        attributeDefinition: customerAttributeDefinition,
                        attribute: matchingCustomerAttribute
                    });
                    customerAttributeViewModel.addChangeCallback(_this._notifyChangeToExtensionsCallback.bind(_this));
                    _this._customerAttributeViewModels.push(customerAttributeViewModel);
                }, this);
            };
            CustomerAddEditViewModel.prototype._getCurrentCustomerData = function () {
                var customer = ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(this.customerProxy);
                this._updateCustomerAttributes(customer);
                return customer;
            };
            CustomerAddEditViewModel.prototype._notifyChangeToExtensionsCallback = function () {
                this._viewModelChanged = true;
                this._sendMessageToExtensions("CustomerUpdated", { customer: this._getCurrentCustomerData() });
            };
            CustomerAddEditViewModel.prototype._sendMessageToExtensions = function (messageType, messageData) {
                this.extensionCommandViewModels.forEach(function (vm) {
                    vm.sendMessage(messageType, messageData);
                });
                this.customControlViewModels.forEach(function (vm) {
                    vm.sendMessage(messageType, messageData);
                });
            };
            CustomerAddEditViewModel.prototype._customerAddEditCustomerChangedData = function (data) {
                this.customer(data.customer);
                this.customerProxy.update(data.customer);
                if (Commerce.StringExtensions.isNullOrWhitespace(data.customer.AccountNumber) || data.customer.AccountNumber === "0") {
                    this.mode(CustomerAddEditViewModelEnum.Add);
                }
                else {
                    this.mode(CustomerAddEditViewModelEnum.Edit);
                }
                this.customerCardViewModel.customer(data.customer);
                this._initializeCustomerAttributes(data.customer.Attributes);
                this._notifyChangeToExtensionsCallback();
            };
            CustomerAddEditViewModel.prototype._getMergedAttributeDefinitions = function () {
                var attributeDefinitions = this._customerAttributeDefinitions;
                this._clientBookAttributeDefinitions.forEach(function (clientBookDefinition) {
                    if (!attributeDefinitions.some(function (d) { return d.RecordId === clientBookDefinition.RecordId; })) {
                        attributeDefinitions.push(clientBookDefinition);
                    }
                });
                return attributeDefinitions;
            };
            CustomerAddEditViewModel.prototype._saveCustomerBeforeNavigation = function (correlationId) {
                var _this = this;
                if (this.mode() === ViewModels.CustomerAddEditViewModelEnum.Add) {
                    return this._isBusyUntil(this._addUpdateNewCustomer(correlationId))
                        .done(function (result) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(result) && !result.canceled) {
                            _this.mode(ViewModels.CustomerAddEditViewModelEnum.Edit);
                        }
                    }).fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }
                else {
                    var saveCustomerResult_1 = new Commerce.AsyncResult();
                    if (this._viewModelChanged) {
                        var options = new Commerce.MessageOptions();
                        options.titleResx = "string_4846";
                        options.messageButtons = Commerce.MessageBoxButtons.YesNo;
                        options.primaryButtonIndex = 0;
                        Commerce.ViewModelAdapter.displayMessageWithOptions(Commerce.StringExtensions.EMPTY, options).done(function (result) {
                            if (result.dialogResult === Commerce.DialogResult.Yes) {
                                _this._isBusyUntil(_this._addUpdateNewCustomer(correlationId))
                                    .done(function (result) {
                                    if (!Commerce.ObjectExtensions.isNullOrUndefined(result) && !result.canceled) {
                                        saveCustomerResult_1.resolve({ canceled: false });
                                    }
                                    else {
                                        saveCustomerResult_1.resolve({ canceled: true });
                                    }
                                }).fail(function (errors) {
                                    Commerce.NotificationHandler.displayClientErrors(errors);
                                    Commerce.RetailLogger.viewsCustomerAddEditViewAddUpdateNewCustomerFailed(correlationId);
                                    saveCustomerResult_1.reject(errors);
                                });
                            }
                            else {
                                _this._revertChanges();
                                saveCustomerResult_1.resolve({ canceled: false });
                            }
                        });
                    }
                    else {
                        saveCustomerResult_1.resolve({ canceled: false });
                    }
                    return saveCustomerResult_1;
                }
            };
            CustomerAddEditViewModel.CUSTOMER_ADD_EDIT_VIEW_NAME = "CustomerAddEditView";
            CustomerAddEditViewModel.SAVE_CUSTOMER_DESTINATION = "CustomerDetailsView";
            return CustomerAddEditViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.CustomerAddEditViewModel = CustomerAddEditViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var CustomerAddressesViewModel = (function (_super) {
            __extends(CustomerAddressesViewModel, _super);
            function CustomerAddressesViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw "Invalid options provided to the CustomerAddressesViewModel. Options cannot be null or undefined.";
                }
                _this.showOkButton = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(options.addressSelectionHandler);
                }, _this);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options.addressSelectionHandler)) {
                    _this._addressSelectionHandler = options.addressSelectionHandler;
                }
                _this._isSelectionMode = options.selectionMode;
                _this._customer = options.customer;
                _this.customer = options.customer;
                _this.isMarketingOptInEnable = ko.observable(Commerce.ApplicationSession.instance.featureStateContext.isFeatureEnabled(Commerce.Client.Entities.FeatureNameEnum.MarketingOptInFeature));
                return _this;
            }
            CustomerAddressesViewModel.prototype.onShown = function () {
                this._cancelSelectionHandlerOnHidden = true;
            };
            CustomerAddressesViewModel.prototype.onNavigateBack = function () {
                if (!this._isSelectionMode && !Commerce.ObjectExtensions.isNullOrUndefined(this._addressSelectionHandler)) {
                    this.allAddressessViewActionCompleted();
                    return false;
                }
                return true;
            };
            CustomerAddressesViewModel.prototype.allAddressessViewActionCompleted = function () {
                this._addressSelectionHandler.select(void 0, function () { return void 0; }, function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            CustomerAddressesViewModel.prototype.onHidden = function () {
                if (this._cancelSelectionHandlerOnHidden && !Commerce.ObjectExtensions.isNullOrUndefined(this._addressSelectionHandler)) {
                    this._addressSelectionHandler.cancel();
                }
            };
            CustomerAddressesViewModel.prototype.navigateToAddressAddEditView = function (address) {
                var _this = this;
                this._cancelSelectionHandlerOnHidden = false;
                var saveAddressSelectionHandler = new Commerce.CancelableSelectionHandler(function (selection) {
                    var returnOptions = {
                        customer: selection.customer,
                        selectionMode: _this._isSelectionMode,
                        addressSelectionHandler: _this._addressSelectionHandler,
                    };
                    Commerce.ViewModelAdapter.collapseAndNavigate(CustomerAddressesViewModel.CUSTOMER_ADDRESSES_VIEW_NAME, returnOptions);
                }, function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(_this._addressSelectionHandler) &&
                        _this._isSelectionMode && !Commerce.ViewModelAdapter.isInView(CustomerAddressesViewModel.CUSTOMER_ADDRESSES_VIEW_NAME)) {
                        _this._addressSelectionHandler.cancel();
                    }
                });
                var addressAddEditViewOptions = {
                    customer: this._customer,
                    address: address,
                    saveAddressSelectionHandler: saveAddressSelectionHandler
                };
                Commerce.ViewModelAdapter.navigate("AddressAddEditView", addressAddEditViewOptions);
            };
            CustomerAddressesViewModel.CUSTOMER_ADDRESSES_VIEW_NAME = "CustomerAddressesView";
            return CustomerAddressesViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.CustomerAddressesViewModel = CustomerAddressesViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var CustomerAffiliationsViewModel = (function (_super) {
            __extends(CustomerAffiliationsViewModel, _super);
            function CustomerAffiliationsViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw "Invalid options passed to the CustomerAffiliationsViewModel constructor: options cannot be null or undefined.";
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.customer)) {
                    throw "Invalid options passed to the CustomerAffiliationsViewModel constructor: options.customer must be defined.";
                }
                _this.customer = ko.observable(options.customer);
                _this.customerAffiliations = ko.observableArray(options.customerAffiliations);
                _this.canSelectCustomerAffiliations = ko.observable(false);
                return _this;
            }
            CustomerAffiliationsViewModel.prototype.loadAsync = function () {
                var _this = this;
                return this._isBusyUntil(this.cartManager.getAffiliationsAsync())
                    .done(function (affiliations) {
                    _this._affiliations = affiliations || [];
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            CustomerAffiliationsViewModel.prototype.customerAffiliationsSelectionChangedHandler = function (selectedItems) {
                this.canSelectCustomerAffiliations((Commerce.ArrayExtensions.hasElements(selectedItems)));
                this._selectedCustomerAffiliations = selectedItems || [];
            };
            CustomerAffiliationsViewModel.prototype.hasAffiliation = function (affiliationId) {
                if (Commerce.ArrayExtensions.hasElements(this.customerAffiliations())) {
                    return this.customerAffiliations().some(function (value) {
                        return value.RetailAffiliationId === affiliationId;
                    });
                }
                return false;
            };
            CustomerAffiliationsViewModel.prototype.deleteAffiliationsFromCustomerAsync = function () {
                var _this = this;
                if (!Commerce.ArrayExtensions.hasElements(this._selectedCustomerAffiliations)) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                var affiliationsToKeep = Commerce.ArrayExtensions.difference(this.customerAffiliations(), this._selectedCustomerAffiliations, function (left, right) {
                    return left.RecordId === right.RecordId;
                });
                var options = {
                    affiliationsToKeep: affiliationsToKeep,
                    customer: this.customer()
                };
                return this._isBusyUntil(this.operationsManager.runOperation(Commerce.Operations.RetailOperation.RemoveAffiliationFromCustomer, options))
                    .done(function (updatedCustomerResult) {
                    var updatedCustomer = updatedCustomerResult.data;
                    _this.customer(updatedCustomer);
                    _this.customerAffiliations(updatedCustomer.CustomerAffiliations);
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            CustomerAffiliationsViewModel.prototype.addAffiliationToCustomerAsync = function () {
                var _this = this;
                var options = {
                    customer: this.customer(),
                    customerAffiliations: this.customerAffiliations(),
                    allAffiliations: this._affiliations
                };
                return this._isBusyUntil(this.operationsManager.runOperation(Commerce.Operations.RetailOperation.AddAffiliationToCustomer, options))
                    .done(function (updateCustomerResult) {
                    if (!updateCustomerResult.canceled) {
                        var updatedCustomer = updateCustomerResult.data;
                        _this.customer(updatedCustomer);
                        _this.customerAffiliations(updatedCustomer.CustomerAffiliations);
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            return CustomerAffiliationsViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.CustomerAffiliationsViewModel = CustomerAffiliationsViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var CustomerAttributeForDisplayViewModel = (function (_super) {
            __extends(CustomerAttributeForDisplayViewModel, _super);
            function CustomerAttributeForDisplayViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    _this.translatedName = Commerce.ArrayExtensions.hasElements(options.attributeDefinition.TranslationDetails) ?
                        options.attributeDefinition.TranslationDetails[0].FriendlyName : options.attributeDefinition.Name;
                    _this.valueAsString = Commerce.CustomerHelper.getCommercePropertyFormattedValue(options.attribute.AttributeValue, options.attribute.DataTypeValue);
                    _this.displayOrder = options.attributeDefinition.DisplayOrder;
                }
                return _this;
            }
            return CustomerAttributeForDisplayViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.CustomerAttributeForDisplayViewModel = CustomerAttributeForDisplayViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var CustomerAttributeViewModel = (function (_super) {
            __extends(CustomerAttributeViewModel, _super);
            function CustomerAttributeViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options)
                    && !Commerce.ObjectExtensions.isNullOrUndefined(options.attributeDefinition)
                    && !Commerce.ObjectExtensions.isNullOrUndefined(options.attribute)) {
                    _this.attributeDefinition = options.attributeDefinition;
                    var nonObservableAttributeValue = Commerce.ObjectExtensions.isNullOrUndefined(options.attribute.AttributeValue) ?
                        new Commerce.Proxy.Entities.CommercePropertyValueClass() : options.attribute.AttributeValue;
                    switch (_this.attributeDefinition.DataTypeValue) {
                        case Commerce.Proxy.Entities.AttributeDataType.Text:
                            _this.attributeValue = {
                                booleanValue: null,
                                dateTimeOffsetValue: null,
                                stringValue: ko.observable(nonObservableAttributeValue.StringValue)
                            };
                            break;
                        case Commerce.Proxy.Entities.AttributeDataType.Integer:
                            _this.attributeValue = {
                                booleanValue: null,
                                dateTimeOffsetValue: null,
                                stringValue: ko.observable(Commerce.NumberExtensions.formatNumber(nonObservableAttributeValue.IntegerValue, 0))
                            };
                            break;
                        case Commerce.Proxy.Entities.AttributeDataType.Decimal:
                            _this.attributeValue = {
                                booleanValue: null,
                                dateTimeOffsetValue: null,
                                stringValue: ko.observable(Commerce.NumberExtensions.formatNumber(nonObservableAttributeValue.DecimalValue, 2))
                            };
                            break;
                        case Commerce.Proxy.Entities.AttributeDataType.TrueFalse:
                            _this.attributeValue = {
                                booleanValue: ko.observable(nonObservableAttributeValue.BooleanValue),
                                dateTimeOffsetValue: null,
                                stringValue: null
                            };
                            break;
                        case Commerce.Proxy.Entities.AttributeDataType.DateTime:
                            _this.attributeValue = {
                                booleanValue: null,
                                dateTimeOffsetValue: ko.observable(nonObservableAttributeValue.DateTimeOffsetValue),
                                stringValue: null
                            };
                            break;
                    }
                }
                return _this;
            }
            Object.defineProperty(CustomerAttributeViewModel.prototype, "attributeValueAsCommercePropertyValue", {
                get: function () {
                    var commercePropertyValue = new Commerce.Proxy.Entities.CommercePropertyValueClass();
                    switch (this.attributeDefinition.DataTypeValue) {
                        case Commerce.Proxy.Entities.AttributeDataType.Text:
                            commercePropertyValue.StringValue = this.attributeValue.stringValue();
                            break;
                        case Commerce.Proxy.Entities.AttributeDataType.Integer:
                            if (!Commerce.StringExtensions.isNullOrWhitespace(this.attributeValue.stringValue())) {
                                commercePropertyValue.IntegerValue = Commerce.NumberExtensions.parseNumber(this.attributeValue.stringValue());
                                commercePropertyValue.IntegerValue = Commerce.NumberExtensions.roundToNDigits(commercePropertyValue.IntegerValue, 0);
                            }
                            break;
                        case Commerce.Proxy.Entities.AttributeDataType.Decimal:
                            if (!Commerce.StringExtensions.isNullOrWhitespace(this.attributeValue.stringValue())) {
                                commercePropertyValue.DecimalValue = Commerce.NumberExtensions.parseNumber(this.attributeValue.stringValue());
                                commercePropertyValue.DecimalValue = Commerce.NumberExtensions.roundToNDigits(commercePropertyValue.DecimalValue, 2);
                            }
                            break;
                        case Commerce.Proxy.Entities.AttributeDataType.TrueFalse:
                            commercePropertyValue.BooleanValue = this.attributeValue.booleanValue();
                            break;
                        case Commerce.Proxy.Entities.AttributeDataType.DateTime:
                            commercePropertyValue.DateTimeOffsetValue = this.attributeValue.dateTimeOffsetValue();
                            break;
                    }
                    return commercePropertyValue;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CustomerAttributeViewModel.prototype, "attributeFriendlyName", {
                get: function () {
                    var friendlyName;
                    if (Commerce.ArrayExtensions.hasElements(this.attributeDefinition.TranslationDetails)) {
                        friendlyName = this.attributeDefinition.TranslationDetails[0].FriendlyName;
                    }
                    else {
                        friendlyName = this.attributeDefinition.Name;
                    }
                    return friendlyName;
                },
                enumerable: true,
                configurable: true
            });
            CustomerAttributeViewModel.getTranslatedEnumerationValue = function (attributeEnumeration) {
                var translatedEnumerationValue = Commerce.StringExtensions.EMPTY;
                if (Commerce.ArrayExtensions.hasElements(attributeEnumeration.AttributeEnumerationTranslations)
                    && !Commerce.ObjectExtensions.isNullOrUndefined(attributeEnumeration.AttributeEnumerationTranslations[0].EnumerationTranslationValue)) {
                    translatedEnumerationValue = attributeEnumeration.AttributeEnumerationTranslations[0].EnumerationTranslationValue;
                }
                else if (!Commerce.ObjectExtensions.isNullOrUndefined(attributeEnumeration.EnumerationValue)) {
                    translatedEnumerationValue = attributeEnumeration.EnumerationValue;
                }
                return translatedEnumerationValue;
            };
            CustomerAttributeViewModel.formatIntegerString = function (integerString) {
                return this.formatNumberString(integerString, 0);
            };
            CustomerAttributeViewModel.formatDecimalString = function (decimalString) {
                return this.formatNumberString(decimalString, 2);
            };
            CustomerAttributeViewModel.prototype.hasValidValue = function () {
                var hasValidValue = !Commerce.ObjectExtensions.isNullOrUndefined(this.attributeValue);
                switch (this.attributeDefinition.DataTypeValue) {
                    case Commerce.Proxy.Entities.AttributeDataType.Text:
                        var textValue = this.attributeValueAsCommercePropertyValue.StringValue;
                        hasValidValue = hasValidValue && !Commerce.ObjectExtensions.isNullOrUndefined(textValue);
                        break;
                    case Commerce.Proxy.Entities.AttributeDataType.Integer:
                        var integerValue = this.attributeValueAsCommercePropertyValue.IntegerValue;
                        hasValidValue = hasValidValue
                            && !Commerce.ObjectExtensions.isNullOrUndefined(integerValue)
                            && !isNaN(integerValue);
                        break;
                    case Commerce.Proxy.Entities.AttributeDataType.Decimal:
                        var decimalValue = this.attributeValueAsCommercePropertyValue.DecimalValue;
                        hasValidValue = hasValidValue
                            && !Commerce.ObjectExtensions.isNullOrUndefined(decimalValue)
                            && !isNaN(decimalValue);
                        break;
                }
                return hasValidValue;
            };
            CustomerAttributeViewModel.prototype.addChangeCallback = function (callback) {
                switch (this.attributeDefinition.DataTypeValue) {
                    case Commerce.Proxy.Entities.AttributeDataType.Text:
                    case Commerce.Proxy.Entities.AttributeDataType.Integer:
                    case Commerce.Proxy.Entities.AttributeDataType.Decimal:
                        this.attributeValue.stringValue.subscribe(callback);
                        break;
                    case Commerce.Proxy.Entities.AttributeDataType.TrueFalse:
                        this.attributeValue.booleanValue.subscribe(callback);
                        break;
                    case Commerce.Proxy.Entities.AttributeDataType.DateTime:
                        this.attributeValue.dateTimeOffsetValue.subscribe(callback);
                        break;
                }
            };
            CustomerAttributeViewModel.formatNumberString = function (numberString, decimalPrecision) {
                var parsedNumber = Commerce.NumberExtensions.parseNumber(numberString);
                var formattedString = Commerce.StringExtensions.EMPTY;
                if (!isNaN(parsedNumber)) {
                    formattedString = Commerce.NumberExtensions.formatNumber(parsedNumber, decimalPrecision);
                }
                return formattedString;
            };
            return CustomerAttributeViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.CustomerAttributeViewModel = CustomerAttributeViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var CustomerCardViewModel = (function (_super) {
            __extends(CustomerCardViewModel, _super);
            function CustomerCardViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    _this._onAddressEditClicked = options.onAddressEditClicked;
                    _this.chooseCardClick = options.chooseCardClick;
                }
                _this.customer = ko.observable(null);
                _this.customerPrimaryAddress = ko.observable(null);
                _this.customerInvoiceAddress = ko.observable(null);
                _this.customerBalance = ko.observable(0);
                _this.customerCreditLimit = ko.observable(0);
                _this.customer.subscribe(function (newValue) {
                    var primaryAddress;
                    var invoiceAddress;
                    if (Commerce.ObjectExtensions.isNullOrUndefined(newValue)) {
                        _this._lastRequestCustomerAccountStateNumber = null;
                        _this.customerLoyaltyCards([]);
                    }
                    else if (Commerce.ArrayExtensions.hasElements(newValue.Addresses)) {
                        primaryAddress = Commerce.ArrayExtensions.firstOrUndefined(newValue.Addresses, function (address) {
                            return address.IsPrimary;
                        });
                        invoiceAddress = Commerce.ArrayExtensions.firstOrUndefined(newValue.Addresses, function (address) {
                            return Commerce.ExtensibleEnumerations.ExtensibleAddressType.Invoice.equals(address.AddressTypeValue);
                        });
                    }
                    _this.customerPrimaryAddress(primaryAddress);
                    _this.customerInvoiceAddress(invoiceAddress);
                }, _this);
                _this.customer.extend({ notify: "always" });
                _this.customerLoyaltyCards = ko.observableArray([]);
                _this.customerLoyaltyCardLabel = ko.observable(Commerce.StringExtensions.EMPTY);
                _this._areCustomerAttributeDefinitionsLoaded = false;
                _this._customerAttributeDefinitions = ko.observableArray([]);
                _this.isLoyaltyCardLabelActionable = ko.observable(false);
                _this.isLoyaltyCardDataReadOnly = ko.observable(options ? options.isLoyaltyCardDataReadOnly : true);
                _this._preventInteraction = ko.observable(false);
                _this._lastRequestCustomerAccountStateNumber = null;
                _this._attributeNameAndTypeNameToAttributeDefinitionCache = new Commerce.Dictionary();
                _this.preventInteraction = ko.computed(function () {
                    return _this._preventInteraction();
                });
                _this.hasCustomer = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.customer());
                });
                return _this;
            }
            CustomerCardViewModel.prototype.loadCustomerAsync = function (customerAccountNumber) {
                var _this = this;
                this.customer(undefined);
                this._lastRequestCustomerAccountStateNumber = customerAccountNumber;
                var loadQueue = new Commerce.AsyncQueue();
                var customer;
                if (!Commerce.StringExtensions.isNullOrWhitespace(customerAccountNumber)) {
                    loadQueue.enqueue(function () {
                        return _this.customerManager.getCustomerDetailsAsync(customerAccountNumber)
                            .done(function (customerDetails) {
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(customerDetails)
                                && !Commerce.ObjectExtensions.isNullOrUndefined(customerDetails.customer)
                                && customerDetails.customer.AccountNumber === _this._lastRequestCustomerAccountStateNumber) {
                                customer = customerDetails.customer;
                            }
                        });
                    });
                }
                loadQueue.enqueue(function () {
                    return _this.updateCustomerAsync(customer);
                });
                var loadCustomerAttributeDefinitionsResult = this._loadCustomerAttributeDefinitions();
                return Commerce.VoidAsyncResult.join([loadQueue.run(), loadCustomerAttributeDefinitionsResult]);
            };
            CustomerCardViewModel.prototype.addressEditClickHandler = function (data) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._onAddressEditClicked) || !Commerce.ObjectExtensions.isFunction(this._onAddressEditClicked)) {
                    throw "CustomerCardViewModel::addressEditClickHandler was not provided.";
                }
                this._onAddressEditClicked(data);
            };
            CustomerCardViewModel.prototype.issueLoyaltyCardAsync = function () {
                var options = {
                    customer: this.customer(),
                    correlationId: Commerce.LoggerHelper.getNewCorrelationId(),
                    allowSwitchCustomer: true,
                    allowAddToTransaction: true
                };
                return Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.LoyaltyIssueCard, options)
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            CustomerCardViewModel.prototype.getAttributeFriendlyName = function (selectedCustomerField) {
                var _this = this;
                return ko.computed(function () {
                    var friendlyName = Commerce.StringExtensions.EMPTY;
                    var matchingAttributeDefinition = _this.getMatchingAttributeDefinition(selectedCustomerField);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(matchingAttributeDefinition())
                        && matchingAttributeDefinition().TranslationDetails.length > 0
                        && !Commerce.StringExtensions.isNullOrWhitespace(matchingAttributeDefinition().TranslationDetails[0].FriendlyName)) {
                        friendlyName = matchingAttributeDefinition().TranslationDetails[0].FriendlyName;
                    }
                    else if (!Commerce.ObjectExtensions.isNullOrUndefined(selectedCustomerField)
                        && !Commerce.ObjectExtensions.isNullOrUndefined(selectedCustomerField.AttributeName)) {
                        friendlyName = selectedCustomerField.AttributeName;
                    }
                    return friendlyName;
                });
            };
            CustomerCardViewModel.prototype.getAttributeFormattedValue = function (selectedField) {
                var _this = this;
                return ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(selectedField)) {
                        return Commerce.StringExtensions.EMPTY;
                    }
                    var matchingAttributeDefinition = _this.getMatchingAttributeDefinition(selectedField);
                    var matchingCustomerAttribute;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(matchingAttributeDefinition())
                        && !Commerce.ObjectExtensions.isNullOrUndefined(_this.customer())) {
                        if (Commerce.ArrayExtensions.hasElements(_this.customer().Attributes)) {
                            var customerAttributes = _this.customer().Attributes;
                            for (var i = 0; i < customerAttributes.length; i++) {
                                if (customerAttributes[i].RecordId === matchingAttributeDefinition().RecordId) {
                                    matchingCustomerAttribute = customerAttributes[i];
                                    break;
                                }
                            }
                        }
                        if (Commerce.ObjectExtensions.isNullOrUndefined(matchingCustomerAttribute)
                            || Commerce.ObjectExtensions.isNullOrUndefined(matchingCustomerAttribute.AttributeValue)) {
                            matchingCustomerAttribute = Commerce.CustomerHelper.createCustomerAttribute(matchingAttributeDefinition());
                        }
                    }
                    var attributeDataType = -1;
                    var attributeValue;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(matchingCustomerAttribute)) {
                        attributeDataType = matchingCustomerAttribute.DataTypeValue;
                        attributeValue = matchingCustomerAttribute.AttributeValue;
                    }
                    var attributeTextValue = Commerce.StringExtensions.EMPTY;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(attributeValue)) {
                        attributeTextValue = Commerce.CustomerHelper.getCommercePropertyFormattedValue(attributeValue, attributeDataType);
                        if (Commerce.StringExtensions.isNullOrWhitespace(attributeTextValue)) {
                            attributeTextValue = Commerce.StringExtensions.EMPTY;
                            Commerce.RetailLogger.viewModelCustomerCardViewModelUnsupportedAttributeType(Commerce.Proxy.Entities.AttributeDataType[attributeDataType], matchingAttributeDefinition().RecordId);
                        }
                    }
                    return attributeTextValue;
                });
            };
            CustomerCardViewModel.prototype.setPreventInteraction = function (prevent) {
                this._preventInteraction(prevent);
            };
            CustomerCardViewModel.prototype.shouldShowCustomerAddAddress = function (addressType) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.customer())) {
                    return false;
                }
                var displayAddressIsMissing = (((addressType === 1 && Commerce.ObjectExtensions.isNullOrUndefined(this.customerPrimaryAddress()))
                    || (addressType === 2 && Commerce.ObjectExtensions.isNullOrUndefined(this.customerInvoiceAddress()))));
                return displayAddressIsMissing;
            };
            CustomerCardViewModel.prototype.updateCustomerAsync = function (customer) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(customer)) {
                    this.customer(customer);
                    return Commerce.VoidAsyncResult.createResolved();
                }
                this.customer(customer);
                this.customerBalance(0);
                this.customerCreditLimit(0);
                var getBalanceResult = null;
                var customerAccountNumber = customer.AccountNumber;
                if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online
                    && !this.customer().IsAsyncCustomer) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.customerContext.customer) ||
                        Commerce.Session.instance.customerContext.customer.AccountNumber !== customerAccountNumber ||
                        Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.customerContext.customerBalance)) {
                        var currentCustomer_1 = this.customer();
                        getBalanceResult = this.customerManager.getCustomerBalanceAsync(customerAccountNumber, this.customer().InvoiceAccount)
                            .done(function (customerBalances) {
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(currentCustomer_1) && (currentCustomer_1.AccountNumber === customerAccountNumber)) {
                                _this.customerBalance(Commerce.CustomerHelper.getCustomerBalance(currentCustomer_1, customerBalances));
                                _this.customerCreditLimit(Commerce.CustomerHelper.getCustomerCreditLimit(currentCustomer_1, customerBalances));
                                _this.customer(currentCustomer_1);
                            }
                        }).recoverOnFailure(function (errors) {
                            if (!Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_HEADQUARTERCOMMUNICATIONFAILURE.serverErrorCode)) {
                                return Commerce.VoidAsyncResult.createRejected(errors);
                            }
                            return Commerce.VoidAsyncResult.createResolved();
                        });
                    }
                    else if (!Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.customerContext.customerBalance)) {
                        var customer_1 = Commerce.Session.instance.customerContext.customer;
                        var balance = Commerce.Session.instance.customerContext.customerBalance;
                        this.customerBalance(Commerce.CustomerHelper.getCustomerBalance(customer_1, balance));
                        this.customerCreditLimit(Commerce.CustomerHelper.getCustomerCreditLimit(customer_1, balance));
                    }
                }
                var getLoyaltyCardsResult = this.customerManager.getCustomerLoyaltyCardsAsync(customer.AccountNumber)
                    .done(function (loyaltyCards) {
                    var currentCustomer = _this.customer();
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(currentCustomer) && (currentCustomer.AccountNumber === customerAccountNumber)) {
                        _this.customerLoyaltyCards(loyaltyCards);
                    }
                });
                return Commerce.VoidAsyncResult.join([getLoyaltyCardsResult, getBalanceResult]);
            };
            CustomerCardViewModel.prototype.getMatchingAttributeDefinition = function (selectedCustomerField) {
                var _this = this;
                return ko.computed(function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(selectedCustomerField) && _this._areCustomerAttributeDefinitionsLoaded) {
                        var attributeNameAndTypeNameKey = JSON.stringify([selectedCustomerField.AttributeName, selectedCustomerField.AttributeTypeName]);
                        if (!_this._attributeNameAndTypeNameToAttributeDefinitionCache.hasItem(attributeNameAndTypeNameKey)) {
                            var customerAttributeDefinitions = _this._customerAttributeDefinitions();
                            var matchingAttributeDefinition = null;
                            for (var i = 0; i < customerAttributeDefinitions.length; i++) {
                                var currentCustomerAttributeDefinition = customerAttributeDefinitions[i];
                                if (currentCustomerAttributeDefinition.Name === selectedCustomerField.AttributeName
                                    && currentCustomerAttributeDefinition.AttributeTypeName === selectedCustomerField.AttributeTypeName) {
                                    matchingAttributeDefinition = currentCustomerAttributeDefinition;
                                    break;
                                }
                            }
                            _this._attributeNameAndTypeNameToAttributeDefinitionCache.setItem(attributeNameAndTypeNameKey, matchingAttributeDefinition);
                            if (Commerce.ObjectExtensions.isNullOrUndefined(matchingAttributeDefinition)) {
                                Commerce.RetailLogger.viewModelCustomerCardViewModelNoAttributeDefinitionFound(selectedCustomerField.AttributeName, selectedCustomerField.AttributeTypeName);
                            }
                        }
                        return _this._attributeNameAndTypeNameToAttributeDefinitionCache.getItem(attributeNameAndTypeNameKey);
                    }
                    else {
                        return null;
                    }
                });
            };
            CustomerCardViewModel.prototype._loadCustomerAttributeDefinitions = function () {
                var _this = this;
                if (!this._areCustomerAttributeDefinitionsLoaded) {
                    return Commerce.ApplicationContext.Instance.customerAttributeDefinitionsAsync.value
                        .done(function (customerAttributeDefinitions) {
                        if (!_this._areCustomerAttributeDefinitionsLoaded) {
                            _this._attributeNameAndTypeNameToAttributeDefinitionCache.clear();
                            _this._customerAttributeDefinitions(customerAttributeDefinitions);
                            _this._areCustomerAttributeDefinitionsLoaded = true;
                        }
                    });
                }
                else {
                    return Commerce.VoidAsyncResult.createResolved();
                }
            };
            return CustomerCardViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.CustomerCardViewModel = CustomerCardViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var CustomerContactInfoViewModel = (function (_super) {
            __extends(CustomerContactInfoViewModel, _super);
            function CustomerContactInfoViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                _this._validateViewModelOptions(options);
                _this.contactInfoType = options.contactInfoType;
                _this._saveContactInfoSelectionHandler = options.saveContactInfoSelectionHandler;
                _this._customer = options.customer;
                _this._cancelSelectionHandlerOnHidden = true;
                _this._saveAddressIsProcessing = ko.observable(false);
                _this._isBusyWhen(_this._saveAddressIsProcessing);
                _this.contactInfoList = ko.observableArray(_this._getContactInfoList(_this._customer));
                return _this;
            }
            CustomerContactInfoViewModel.prototype.onShown = function () {
                this._cancelSelectionHandlerOnHidden = true;
            };
            CustomerContactInfoViewModel.prototype.onHidden = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._saveContactInfoSelectionHandler) && this._cancelSelectionHandlerOnHidden) {
                    this._saveContactInfoSelectionHandler.cancel();
                }
            };
            CustomerContactInfoViewModel.prototype.cancelAddressAddEdit = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._saveContactInfoSelectionHandler)) {
                    this._saveContactInfoSelectionHandler.cancel();
                }
            };
            CustomerContactInfoViewModel.prototype.contactInfoTitleClicked = function (contactInfo) {
                this._addUpdateContactInfo(contactInfo);
            };
            CustomerContactInfoViewModel.prototype.addContactInfo = function () {
                var newContactInfo = {
                    Value: Commerce.StringExtensions.EMPTY,
                    IsPrimary: false,
                    IsOptedInMarketing: false,
                    AddressTypeValue: this.contactInfoType
                };
                return this._addUpdateContactInfo(newContactInfo);
            };
            CustomerContactInfoViewModel.prototype.onNavigateBack = function () {
                this._cancelSelectionHandlerOnHidden = false;
                return true;
            };
            CustomerContactInfoViewModel.prototype._validateViewModelOptions = function (options) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw new Error("Invalid options passed to the CustomerContactInfoViewModel constructor: options cannot be null or undefined.");
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.saveContactInfoSelectionHandler)) {
                    throw new Error("Invalid options passed to the viewModel constructor: options.saveContactInfoSelectionHandler is required.");
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.customer)) {
                    throw new Error("Invalid options passed to the viewModel constructor: options.customer is required.");
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.contactInfoType)) {
                    throw new Error("Invalid options passed to the viewModel constructor: options.contactInfoType is required.");
                }
                var supportedContactInfoTypes = [
                    Commerce.Proxy.Entities.ContactInfoType.Email,
                    Commerce.Proxy.Entities.ContactInfoType.Phone
                ];
                var isContactInfoTypeSupported = supportedContactInfoTypes.some(function (type) {
                    return type === options.contactInfoType;
                });
                if (!isContactInfoTypeSupported) {
                    throw new Error(Commerce.StringExtensions.format("Contact info type {0} is not supported.", options.contactInfoType));
                }
            };
            CustomerContactInfoViewModel.prototype._addUpdateContactInfo = function (contactInfo) {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var isReceiptEmail = false;
                if (Commerce.CustomerHelper.isEmailContactInfo(contactInfo)) {
                    isReceiptEmail = contactInfo.isReceiptEmail;
                }
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var getCustomerInfoRequest = new Commerce.Customers.GetContactInfoAndUpdateCustomerClientRequest(correlationId, contactInfo, _this._customer, isReceiptEmail);
                    return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getCustomerInfoRequest)));
                }).enqueue(function (result) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(result.data)) {
                        _this._customer = result.data.result;
                        return _this._saveAddressAsync(correlationId);
                    }
                    return Commerce.AsyncResult.createResolved();
                });
                return this._isBusyUntil(asyncQueue.run())
                    .fail(function (errors) {
                    Commerce.RetailLogger.viewsCustomerContactInfoViewAddUpdateContactInfoFailed(correlationId);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            CustomerContactInfoViewModel.prototype._saveAddressAsync = function (correlationId) {
                var _this = this;
                this._saveAddressIsProcessing(true);
                return this._updateContactInfo(correlationId, this._customer)
                    .done(function (result) {
                    if (!result.canceled) {
                        _this._saveContactInfoSelectionHandler.select(_this._customer, function () {
                            _this._saveAddressIsProcessing(false);
                        }, function (errors) {
                            _this._saveAddressIsProcessing(false);
                            Commerce.NotificationHandler.displayClientErrors(errors);
                        });
                    }
                }).fail(function (errors) {
                    _this._saveAddressIsProcessing(false);
                });
            };
            CustomerContactInfoViewModel.prototype._updateContactInfo = function (correlationId, customer) {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue
                    .enqueue(function () {
                    var updateCustomerServiceRequest = new Commerce.UpdateCustomerServiceRequest(correlationId, customer);
                    return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(updateCustomerServiceRequest)));
                }).enqueue(function () {
                    return _this.customerManager.getCustomerDetailsAsync(customer.AccountNumber)
                        .done(function (customerDetails) {
                        _this._customer = customerDetails.customer;
                    });
                });
                return asyncQueue.run();
            };
            CustomerContactInfoViewModel.prototype._getContactInfoList = function (customer) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(customer)) {
                    return [];
                }
                var contacts = customer.Contacts.filter(function (contact) {
                    return contact.AddressTypeValue === _this.contactInfoType && contact.IsPrimary;
                });
                if (this.contactInfoType === Commerce.Proxy.Entities.ContactInfoType.Email && !Commerce.StringExtensions.isNullOrWhitespace(this._customer.ReceiptEmail)) {
                    var receiptEmail = {
                        Value: this._customer.ReceiptEmail,
                        IsPrimary: false,
                        IsOptedInMarketing: false,
                        AddressTypeValue: Commerce.Proxy.Entities.ContactInfoType.Email,
                        isReceiptEmail: true
                    };
                    contacts.push(receiptEmail);
                }
                var otherContact = customer.Contacts.filter(function (contact) {
                    return contact.AddressTypeValue === _this.contactInfoType && !contact.IsPrimary;
                });
                contacts = contacts.concat(otherContact);
                return contacts;
            };
            return CustomerContactInfoViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.CustomerContactInfoViewModel = CustomerContactInfoViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var OrderHistorySortField;
        (function (OrderHistorySortField) {
            OrderHistorySortField[OrderHistorySortField["Date"] = 0] = "Date";
            OrderHistorySortField[OrderHistorySortField["Number"] = 1] = "Number";
            OrderHistorySortField[OrderHistorySortField["Total"] = 2] = "Total";
        })(OrderHistorySortField = ViewModels.OrderHistorySortField || (ViewModels.OrderHistorySortField = {}));
        var CustomerDetailsViewModel = (function (_super) {
            __extends(CustomerDetailsViewModel, _super);
            function CustomerDetailsViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                _this._isBusyFlag = ko.observable(false);
                _this._isBusyWhen(ko.computed(function () { return _this._isBusyFlag(); }));
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw "Invalid options provided to the CustomerDetailsViewModel. Options cannot be null or undefined.";
                }
                else if (Commerce.StringExtensions.isNullOrWhitespace(options.accountNumber)) {
                    throw "Invalid options provided to the CustomerDetailsViewModel. options.customerAccountNumber is a required field";
                }
                _this._customerAccountNumber = options.accountNumber;
                _this._cancelSelectionHandlerOnHidden = true;
                _this.isSelectionMode = !Commerce.ObjectExtensions.isNullOrUndefined(options.customerSelectionOptions);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options.customerSelectionOptions)) {
                    _this._customerSelectionHandler = options.customerSelectionOptions.customerSelectionHandler;
                }
                _this._viewModelDataShownCorrelationId = Commerce.LoggerHelper.getFormattedCorrelationId(options);
                _this.customerEmail = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.customerPhone = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.customer = ko.observable(null);
                _this.isCustomerLoaded = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.customer());
                });
                _this.viewTitle = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.recentPurchasesIsBusy = ko.observable(false);
                _this.wishListIsBusy = ko.observable(false);
                _this.recommendedProductsIsBusy = ko.observable(false);
                _this.orderHistoryIsBusy = ko.observable(false);
                _this.affiliationsIsBusy = ko.observable(false);
                _this.customerAttributesAreBusy = ko.observable(false);
                _this.loyaltyCardsIsBusy = ko.observable(false);
                _this.shortDateFormatter = Commerce.Host.instance.globalization.getDateTimeFormatter(Commerce.Host.Globalization.DateTimeFormat.DATE_TIME);
                _this.customerImage = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.customerAddress = ko.observable(null);
                _this.salesLines = ko.observableArray([]);
                _this.recentPurchases = ko.observableArray([]);
                _this.recommendedProducts = ko.observableArray([]);
                _this.recommendedProductsForDisplay = ko.observableArray([]);
                _this._recommendedProductsTrackingId = Commerce.StringExtensions.EMPTY;
                _this.salesOrders = ko.observableArray([]);
                _this.loyaltyCards = ko.observableArray([]);
                _this.customerAffiliations = ko.observableArray([]);
                _this.customerAccount = ko.computed(function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.customer())) {
                        return _this.customer().IsAsyncCustomer ? Commerce.ViewModelAdapter.getResourceString("string_213") : _this.customer().AccountNumber;
                    }
                    else {
                        return Commerce.StringExtensions.EMPTY;
                    }
                }, _this);
                _this.isDefaultCustomer = ko.computed(function () {
                    return _this._customerAccountNumber === Commerce.ApplicationContext.Instance.storeInformation.DefaultCustomerAccount;
                }, _this);
                _this.invoiceAccount = ko.computed(function () {
                    return _this.customer() ? _this.customer().InvoiceAccount : Commerce.StringExtensions.EMPTY;
                }, _this);
                _this.dateOfLastVisit = ko.observable(null);
                _this.dateOfLastVisitString = ko.computed(function () {
                    return _this.dateOfLastVisit() ? _this.shortDateFormatter.format(_this.dateOfLastVisit()) : Commerce.StringExtensions.EMPTY;
                }, _this);
                _this.dateCreatedString = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.placeOfLastVisitString = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.placeOfLastVisitId = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.customerDurationString = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this.customer())) {
                        return Commerce.StringExtensions.EMPTY;
                    }
                    var currentDate = new Date();
                    var durationInMonths = Commerce.Utilities.DateTimeHelper.getTimeDifferenceInUnit(_this.customer().CreatedDateTime, currentDate, Commerce.Client.Entities.UnitOfTime.Months);
                    return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_216"), Math.floor(durationInMonths / 12), durationInMonths % 12);
                }, _this);
                _this.isMarketingOptInFeatureEnabled = ko.computed(function () {
                    return Commerce.CustomerHelper.isMarketingOptInFeatureEnabled(_this.customer());
                }, _this);
                _this.wishLists = ko.observableArray([]);
                _this.totalWishListsString = ko.computed(function () {
                    return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_256"), _this.wishLists().length);
                }, _this);
                _this.zeroWishListVisible = ko.computed(function () {
                    return !Commerce.ArrayExtensions.hasElements(_this.wishLists());
                });
                _this._totalRecommendedProducts = ko.observable(0);
                _this.totalRecommendedProductsString = ko.computed(function () {
                    return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_252"), _this._totalRecommendedProducts());
                }, _this);
                _this.displayZeroProductsText = ko.computed(function () { return !Commerce.ArrayExtensions.hasElements(_this.recentPurchases()); });
                _this.zeroRecommendedProductsVisible = ko.computed(function () {
                    return !Commerce.ArrayExtensions.hasElements(_this.recommendedProducts());
                });
                _this.totalLoyaltyCardsString = ko.computed(function () {
                    var numberOfCards = _this.loyaltyCards().length;
                    var formatString = numberOfCards === 1 ? "string_275" : "string_271";
                    return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString(formatString), numberOfCards);
                }, _this);
                _this.zeroLoyaltyCardVisible = ko.computed(function () {
                    return !Commerce.ArrayExtensions.hasElements(_this.loyaltyCards());
                });
                _this.salesOrdersToDisplay = ko.observableArray([]);
                _this._totalSalesOrders = ko.observable(0);
                _this._orderHistorySortColumn = OrderHistorySortField.Date;
                _this.totalSalesOrdersString = ko.computed(function () {
                    return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_243"), _this._totalSalesOrders());
                }, _this);
                _this._orderHistorySortColumnName = ko.observable(Commerce.ViewModelAdapter.getResourceString("string_244"));
                _this._isOrderHistorySortingDescending = true;
                _this.displayZeroSalesOrdersText = ko.observable(false);
                _this.displaySalesOrdersGrid = ko.observable(false);
                _this.displaySalesOrdersSortByMenu = ko.observable(false);
                _this._countOfSalesOrdersToLoad = CustomerDetailsViewModel.SALES_ORDERS_FOR_INITIAL_DISPLAY;
                _this.totalCustomerAffiliationsString = ko.computed(function () {
                    return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString(_this.customerAffiliations().length !== 1
                        ? "string_6302"
                        : "string_6308"), _this.customerAffiliations().length);
                }, _this);
                _this.hasCustomerAffiliations = ko.computed(function () {
                    return Commerce.ArrayExtensions.hasElements(_this.customerAffiliations());
                }, _this);
                _this.customerAffiliationsToDisplay = ko.observableArray([]);
                _this._customerAttributeDefinitions = ko.observableArray([]);
                _this._clientBookAttributeDefinitions = ko.observableArray([]);
                _this.customerAttributeForDisplayViewModels = ko.computed(function () {
                    var computedValue = [];
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.customer())) {
                        var attributeRecIdToCutomerAttribute_1 = new Commerce.Dictionary();
                        if (Commerce.ArrayExtensions.hasElements(_this.customer().Attributes)) {
                            _this.customer().Attributes.forEach(function (customerAttribute) {
                                attributeRecIdToCutomerAttribute_1.setItem(customerAttribute.RecordId, customerAttribute);
                            });
                        }
                        var attributeDefinitions = _this._getMergedAttributeDefinitions();
                        attributeDefinitions.forEach(function (customerAttributeDefinition) {
                            var customerAttribute;
                            if (attributeRecIdToCutomerAttribute_1.hasItem(customerAttributeDefinition.RecordId)) {
                                customerAttribute = attributeRecIdToCutomerAttribute_1.getItem(customerAttributeDefinition.RecordId);
                            }
                            else {
                                customerAttribute = Commerce.CustomerHelper.createCustomerAttribute(customerAttributeDefinition);
                            }
                            if (!customerAttributeDefinition.IsHidden) {
                                computedValue.push(new ViewModels.CustomerAttributeForDisplayViewModel(_this.context, { attributeDefinition: customerAttributeDefinition, attribute: customerAttribute }));
                            }
                        });
                    }
                    return computedValue.sort(function (firstAttribute, secondAttribute) {
                        var firstDisplayOrder = firstAttribute.displayOrder === 0 ? Number.MAX_VALUE : firstAttribute.displayOrder;
                        var secondDisplayOrder = secondAttribute.displayOrder === 0 ? Number.MAX_VALUE : secondAttribute.displayOrder;
                        return firstDisplayOrder - secondDisplayOrder;
                    });
                }, _this);
                _this.hasCustomerAttributes = ko.computed(function () {
                    return Commerce.ArrayExtensions.hasElements(_this.customerAttributeForDisplayViewModels());
                }, _this);
                _this.numberOfAddressesText = ko.computed(function () {
                    var customer = _this.customer();
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(customer)) {
                        var addresses = customer.Addresses;
                        if (Commerce.ArrayExtensions.hasElements(addresses)) {
                            var numberOfAddresses = addresses.length;
                            return numberOfAddresses === 1
                                ? Commerce.ViewModelAdapter.getResourceString("string_4843")
                                : Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_4844"), numberOfAddresses);
                        }
                    }
                    return Commerce.StringExtensions.EMPTY;
                }, _this);
                _this.addressFilled = ko.computed(function () {
                    return !Commerce.StringExtensions.isNullOrWhitespace(_this.numberOfAddressesText());
                }, _this);
                var customerCardViewModelOptions = {
                    isLoyaltyCardDataReadOnly: true,
                    onAddressEditClicked: function (address) { _this.onAddressAddEditClicked(address); }
                };
                _this._customerCardViewModel = new ViewModels.CustomerCardViewModel(_this.context, customerCardViewModelOptions);
                _this._isExtensionCommandViewModelBusy = ko.observable(false);
                if (Commerce.ObjectExtensions.isNullOrUndefined(CustomerDetailsViewModel._viewExtensionsManager)) {
                    _this._customControlViewModels = [];
                    _this._extensionCommandViewModels = [];
                }
                else {
                    _this._extensionCommandViewModels = CustomerDetailsViewModel._viewExtensionsManager.getAppBarCommands()
                        .map(function (command) {
                        var commandVM = new ViewModels.CommandViewModel(command);
                        commandVM.addMessageHandler("IsProcessingChanged", function (isProcessing) {
                            if (isProcessing) {
                                _this._isExtensionCommandViewModelBusy(true);
                            }
                            else {
                                var isAnyCommandProcessing = _this._extensionCommandViewModels.some(function (vm) {
                                    return vm.isProcessing;
                                });
                                _this._isExtensionCommandViewModelBusy(isAnyCommandProcessing);
                            }
                        });
                        return commandVM;
                    });
                    _this._isBusyWhen(_this._isExtensionCommandViewModelBusy);
                    _this._customControlViewModels = CustomerDetailsViewModel._viewExtensionsManager.getCustomControls();
                    var isCustomControlViewModelBusy = ko.computed(function () {
                        return _this._customControlViewModels.some(function (customControlViewModel) {
                            return customControlViewModel.isBusy();
                        });
                    });
                    _this._isBusyWhen(isCustomControlViewModelBusy);
                }
                _this._timelineTypeDictionary = new Commerce.Dictionary();
                _this.timelineItemTypes = ko.observableArray([]);
                _this.timelineIsBusy = ko.observable(false);
                _this.timelineHasTypes = ko.computed(function () {
                    return _this.timelineItemTypes().length > 0;
                });
                _this.totalTimelineItemsCount = ko.observable(0);
                _this.timelineTitle = ko.computed(function () {
                    return Commerce.StringExtensions.format(Commerce.StringResourceManager.getString("string_30225"), _this.totalTimelineItemsCount());
                });
                _this.timelineFiltersData = ko.observableArray([]);
                _this.timelineGroupsData = ko.observableArray([]);
                _this._employeeDictionary = new Commerce.Dictionary();
                _this._isClientelingEnabled = ko.observable(false);
                _this.timelineIsEmpty = ko.computed(function () {
                    return !_this._isClientelingEnabled || _this.totalTimelineItemsCount() < 1;
                });
                return _this;
            }
            Object.defineProperty(CustomerDetailsViewModel, "viewExtensionManager", {
                set: function (manager) {
                    CustomerDetailsViewModel._viewExtensionsManager = manager;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CustomerDetailsViewModel.prototype, "customerCardViewModel", {
                get: function () {
                    return this._customerCardViewModel;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CustomerDetailsViewModel.prototype, "extensionCommandViewModels", {
                get: function () {
                    return this._extensionCommandViewModels;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CustomerDetailsViewModel.prototype, "customPanelViewModels", {
                get: function () {
                    return this._customControlViewModels;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CustomerDetailsViewModel.prototype, "refreshOrderHistoryList", {
                set: function (refreshFunction) {
                    this._refreshOrderHistoryList = refreshFunction;
                },
                enumerable: true,
                configurable: true
            });
            CustomerDetailsViewModel.prototype.loadAsync = function () {
                var _this = this;
                var loadResults = [];
                this.affiliationsIsBusy(true);
                var getAffiliationsResult = this.cartManager.getAffiliationsAsync()
                    .done(function (affiliations) {
                    _this.affiliationsIsBusy(false);
                    _this._allAffiliations = affiliations || [];
                }).fail(function (affiliationErrors) {
                    _this.affiliationsIsBusy(false);
                    _this._errorCallback(affiliationErrors);
                });
                loadResults.push(getAffiliationsResult);
                var loadCustomerResult = this._loadCustomer();
                loadResults.push(loadCustomerResult);
                var loadCustomerAttributeDefinitionsResult = this._loadCustomerAttributeDefinitions();
                loadResults.push(loadCustomerAttributeDefinitionsResult);
                var loadClientBookAttributeDefinitionsResult = this._loadClientBookAttributeDefinitions();
                loadResults.push(loadClientBookAttributeDefinitionsResult);
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var getAddressPurposesServiceRequest = new Commerce.GetAddressPurposesServiceRequest(correlationId);
                var loadAddressPurpose = Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getAddressPurposesServiceRequest));
                loadResults.push(loadAddressPurpose);
                if (!this.isDefaultCustomer()) {
                    this._loadRecentPurchasesAndWishListsThenPopulateRecommendedProducts();
                    this.refreshLoyaltyCards().done(function () {
                        _this._sendMessageToExtensions("LoyaltyCardsLoaded", { loyaltyCards: _this.loyaltyCards() });
                    });
                    this.orderHistoryIsBusy(true);
                    this._getSalesOrdersByCustomerAsync(this._customerAccountNumber, ViewModels.CustomerDetailsViewModel.SALES_ORDERS_FOR_INITIAL_DISPLAY, ViewModels.CustomerDetailsViewModel.RECENT_PURCHASES_TO_INITIAL_DISPLAY)
                        .done(function () {
                        _this.orderHistoryIsBusy(false);
                        if (Commerce.ObjectExtensions.isFunction(_this._refreshOrderHistoryList)) {
                            _this._refreshOrderHistoryList();
                        }
                    }).fail(function (errors) {
                        _this.orderHistoryIsBusy(false);
                        _this._errorCallback(errors);
                    });
                    this._loadTimelineData();
                }
                return this._isBusyUntil(Commerce.VoidAsyncResult.join(loadResults)).done(function () {
                    var customer = _this.customer();
                    if (!Commerce.StringExtensions.isNullOrWhitespace(customer.Email)) {
                        _this.customerEmail(customer.Email);
                    }
                    else if (!Commerce.StringExtensions.isNullOrWhitespace(customer.ReceiptEmail)) {
                        _this.customerEmail(customer.ReceiptEmail);
                    }
                    else {
                        _this.customerEmail(Commerce.StringExtensions.EMPTY);
                    }
                    _this.customerPhone(customer.Phone);
                    _this._customerCardViewModel.customer(customer);
                    _this.extensionCommandViewModels.forEach(function (vm) {
                        vm.sendMessage("Initialize", { customer: _this.customer(), isSelectionMode: _this.isSelectionMode });
                    });
                    _this._customControlViewModels.forEach(function (vm) {
                        vm.init({ customer: _this.customer(), isSelectionMode: _this.isSelectionMode });
                    });
                }).fail(function (errors) {
                    _this._errorCallback(errors);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            CustomerDetailsViewModel.prototype.onShown = function () {
                this._cancelSelectionHandlerOnHidden = true;
            };
            CustomerDetailsViewModel.prototype.onHidden = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._customerSelectionHandler) && this._cancelSelectionHandlerOnHidden) {
                    this._customerSelectionHandler.cancel();
                }
            };
            CustomerDetailsViewModel.prototype.afterShown = function () {
                Commerce.RetailLogger.viewsCustomerDetailsIsVisible(this._viewModelDataShownCorrelationId);
                this._viewModelDataShownCorrelationId = Commerce.StringExtensions.EMPTY;
            };
            CustomerDetailsViewModel.prototype.onNavigateBack = function () {
                this._cancelSelectionHandlerOnHidden = false;
                return true;
            };
            CustomerDetailsViewModel.prototype.addToCartClick = function () {
                if (Commerce.StringExtensions.isNullOrWhitespace(this._customerAccountNumber)) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var setCustomerOnCartOperationRequest = new Commerce.SetCustomerOnCartOperationRequest(correlationId, this._customerAccountNumber);
                return this._isBusyUntil(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(setCustomerOnCartOperationRequest)))
                    .done(function (result) {
                    if (!result.canceled) {
                        Commerce.ViewModelAdapter.navigate("CartView");
                    }
                }).fail(function (errors) {
                    Commerce.RetailLogger.viewsCustomerDetailsAddCustomerFailed(correlationId);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            CustomerDetailsViewModel.prototype.editCustomerClick = function () {
                this._cancelSelectionHandlerOnHidden = false;
                var options = {
                    customer: ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(this.customer())
                };
                if (this.isSelectionMode) {
                    options.customerSelectionHandler = this._customerSelectionHandler;
                    this._cancelSelectionHandlerOnHidden = false;
                }
                return Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.CustomerEdit, options)
                    .fail(function (error) {
                    Commerce.NotificationHandler.displayClientErrors(error);
                });
            };
            CustomerDetailsViewModel.prototype.addCustomerToClientBookAsync = function () {
                var options = {
                    customerAccountNumbers: [this._customerAccountNumber]
                };
                return this._isBusyUntil(Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.AddCustomerToClientBook, options))
                    .fail(function (error) {
                    Commerce.NotificationHandler.displayClientErrors(error);
                });
            };
            CustomerDetailsViewModel.prototype.showAllRecommendedProducts = function () {
                var recommendedProducts = this.recommendedProducts();
                var recommendedProductsTrackingId = this._recommendedProductsTrackingId;
                Commerce.RetailLogger.viewsCustomerDetailsSeeAllRecommendedProductsLinkClicked(recommendedProductsTrackingId, recommendedProducts.length);
                var options = {
                    productSearchResults: recommendedProducts,
                    searchEntity: ViewModels.SearchViewSearchEntity.Product,
                    selectionMode: ViewModels.SearchViewSelectionMode.None,
                    trackingId: recommendedProductsTrackingId,
                    correlationId: Commerce.StringExtensions.EMPTY
                };
                Commerce.ViewModelAdapter.navigate("SearchView", options);
            };
            CustomerDetailsViewModel.prototype.showAllCustomerAffiliations = function () {
                var options = {
                    customerAffiliations: this.customerAffiliations(),
                    customer: this.customer()
                };
                Commerce.ViewModelAdapter.navigate("CustomerAffiliationsView", options);
            };
            CustomerDetailsViewModel.prototype.showAllOrderHistory = function () {
                if (!Commerce.StringExtensions.isNullOrWhitespace(this._customerAccountNumber)) {
                    var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                    Commerce.RetailLogger.viewsCustomerDetailsShowAllOrderHistoryStarted(correlationId);
                    Commerce.RetailLogger.viewsCustomerDetailsShowAllOrderHistoryCustomer(correlationId, this._customerAccountNumber);
                    var options = {
                        customerAccountNumber: this._customerAccountNumber,
                        mode: ViewModels.ShowJournalMode.CustomerSalesOrders,
                        correlationId: correlationId
                    };
                    Commerce.ViewModelAdapter.navigate("ShowJournalView", options);
                }
            };
            CustomerDetailsViewModel.prototype.viewAllRecentPurchases = function () {
                var options = {
                    sourceType: ViewModels.RecentPurchasesViewModelMode.RecentPurchases,
                    customerAccountNumber: this._customerAccountNumber,
                    customerName: this.customer().Name
                };
                Commerce.ViewModelAdapter.navigate("RecentPurchasesView", options);
            };
            CustomerDetailsViewModel.prototype.wishListItemInvokedHandler = function (item) {
                var options = {
                    sourceType: ViewModels.RecentPurchasesViewModelMode.Wishlist,
                    customerAccountNumber: this._customerAccountNumber,
                    customerName: this.customer().Name,
                    wishlist: item
                };
                Commerce.ViewModelAdapter.navigate("RecentPurchasesView", options);
            };
            CustomerDetailsViewModel.prototype.gotoAddressesView = function () {
                var _this = this;
                this._cancelSelectionHandlerOnHidden = false;
                var addressSelectionHandler = new Commerce.CancelableSelectionHandler(function () {
                    var returnOptions = {
                        accountNumber: _this._customerAccountNumber,
                        correlationId: Commerce.StringExtensions.EMPTY
                    };
                    if (_this.isSelectionMode) {
                        returnOptions.customerSelectionOptions = {
                            customerSelectionHandler: _this._customerSelectionHandler
                        };
                    }
                    Commerce.ViewModelAdapter.collapseAndNavigate(CustomerDetailsViewModel.CUSTOMER_DETAILS_VIEW_NAME, returnOptions);
                }, function () {
                    if (_this.isSelectionMode && !Commerce.ViewModelAdapter.isInView(CustomerDetailsViewModel.CUSTOMER_DETAILS_VIEW_NAME)) {
                        _this._customerSelectionHandler.cancel();
                    }
                });
                this._cancelSelectionHandlerOnHidden = false;
                var options = {
                    customer: this.customer(),
                    selectionMode: false,
                    addressSelectionHandler: addressSelectionHandler
                };
                Commerce.ViewModelAdapter.navigate("CustomerAddressesView", options);
            };
            CustomerDetailsViewModel.prototype.viewSalesOrderDetails = function (selectedSalesOrder) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(selectedSalesOrder)) {
                    var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                    Commerce.RetailLogger.viewsCustomerDetailsShowSalesOrderDetailsStarted(correlationId);
                    var options = {
                        selectedSalesOrderHeader: selectedSalesOrder,
                        mode: ViewModels.ShowJournalMode.SingleCustomerSalesOrder,
                        correlationId: correlationId
                    };
                    Commerce.ViewModelAdapter.navigate("ShowJournalView", options);
                }
            };
            CustomerDetailsViewModel.prototype.loyaltyCardItemInvokedHandler = function (item) {
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var loyaltyCardPointsBalanceOperationRequest = new Commerce.LoyaltyCardPointsBalanceOperationRequest(correlationId, item.CardNumber);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(loyaltyCardPointsBalanceOperationRequest))
                    .fail(function (error) {
                    Commerce.NotificationHandler.displayClientErrors(error);
                });
            };
            CustomerDetailsViewModel.prototype.performCustomerSelection = function () {
                var _this = this;
                this._isBusyFlag(true);
                this._cancelSelectionHandlerOnHidden = false;
                this._customerSelectionHandler.select(this.customer(), function () {
                    _this._cancelSelectionHandlerOnHidden = true;
                    _this._isBusyFlag(false);
                }, function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                    _this._isBusyFlag(false);
                });
            };
            CustomerDetailsViewModel.prototype.recommendedProductInvokedHandler = function (product) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(product.RecordId)) {
                    var trackingId = this._recommendedProductsTrackingId;
                    this._navigateToProductDetailsView(product.RecordId, null, trackingId);
                }
            };
            CustomerDetailsViewModel.prototype.recentPurchaseInvokedHandler = function (recentPurchase) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(recentPurchase.ProductId)) {
                    this._navigateToProductDetailsView(recentPurchase.ProductId, recentPurchase.ChannelId);
                }
            };
            CustomerDetailsViewModel.prototype.onAddressAddEditClicked = function (address) {
                var _this = this;
                this._cancelSelectionHandlerOnHidden = false;
                var saveAddressSelectionHandler = new Commerce.CancelableSelectionHandler(function (selection) {
                    var returnOptions = {
                        accountNumber: _this._customerAccountNumber,
                        correlationId: Commerce.StringExtensions.EMPTY
                    };
                    if (_this.isSelectionMode) {
                        returnOptions.customerSelectionOptions = {
                            customerSelectionHandler: _this._customerSelectionHandler
                        };
                    }
                    Commerce.ViewModelAdapter.collapseAndNavigate(CustomerDetailsViewModel.CUSTOMER_DETAILS_VIEW_NAME, returnOptions);
                }, function () {
                    if (_this.isSelectionMode && !Commerce.ViewModelAdapter.isInView(CustomerDetailsViewModel.CUSTOMER_DETAILS_VIEW_NAME)) {
                        _this._customerSelectionHandler.cancel();
                    }
                });
                var options = {
                    customer: ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(this.customer()),
                    address: address,
                    saveAddressSelectionHandler: saveAddressSelectionHandler
                };
                Commerce.ViewModelAdapter.navigate("AddressAddEditView", options);
            };
            CustomerDetailsViewModel.prototype.addAffiliationToCustomerAsync = function () {
                var _this = this;
                if (!Commerce.ArrayExtensions.hasElements(this._allAffiliations)) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                var options = {
                    customer: this.customer(),
                    customerAffiliations: this.customerAffiliations(),
                    allAffiliations: this._allAffiliations
                };
                return this._isBusyUntil(this.operationsManager.runOperation(Commerce.Operations.RetailOperation.AddAffiliationToCustomer, options))
                    .done(function (updateCustomerResult) {
                    if (!updateCustomerResult.canceled) {
                        var updatedCustomer = updateCustomerResult.data;
                        _this.customer(updatedCustomer);
                        _this._populateCustomerAffiliations(updatedCustomer.CustomerAffiliations);
                        _this._sendMessageToExtensions("AffiliationAdded", { affiliations: updatedCustomer.CustomerAffiliations });
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            CustomerDetailsViewModel.prototype.refreshWishListPanel = function () {
                var _this = this;
                this.wishListIsBusy(true);
                return this.customerManager.getWishListsByCustomerIdAsync(this._customerAccountNumber)
                    .done(function (wishLists) {
                    _this.wishLists(wishLists);
                }).always(function () {
                    _this.wishListIsBusy(false);
                }).fail(function (errors) {
                    _this._errorCallback(errors);
                });
            };
            CustomerDetailsViewModel.prototype.refreshLoyaltyCards = function () {
                var _this = this;
                this.loyaltyCardsIsBusy(true);
                return this.customerManager.getCustomerLoyaltyCardsAsync(this._customerAccountNumber)
                    .done(function (loyaltyCards) {
                    _this.loyaltyCards(loyaltyCards);
                }).always(function () {
                    _this.loyaltyCardsIsBusy(false);
                }).fail(function (errors) {
                    _this._errorCallback(errors);
                });
            };
            CustomerDetailsViewModel.prototype.onTimelineItemCreateInvoked = function () {
                var _this = this;
                if (!this._isClientelingEnabled()) {
                    Commerce.NotificationHandler.displayErrorMessage("string_30261");
                    return Promise.resolve();
                }
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var request = new Commerce.Timeline.CreateTimelineItemClientRequest(correlationId, this._customerAccountNumber, this._timelineItemTypeMaps);
                return Commerce.Runtime.executeAsync(request)
                    .then(function (result) {
                    if (!result.canceled) {
                        _this._timelineItems = null;
                        _this.timelineFiltersData([]);
                        _this._loadTimelineData(_this._currentFilter);
                    }
                })
                    .catch(function (error) {
                    _this.timelineIsBusy(false);
                    Commerce.NotificationHandler.displayClientErrors(error);
                });
            };
            CustomerDetailsViewModel.prototype.onTimelineItemFilterInvoked = function (args) {
                this._loadTimelineData(args.filter);
                return Promise.resolve(true);
            };
            CustomerDetailsViewModel.prototype.onTimelineItemActionInvoked = function (args) {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var timelineItem = Commerce.ArrayExtensions.firstOrUndefined(this._timelineItems, function (element) {
                    var typeKey = Commerce.TimelineHelper.getTypeKey(element.EntityType, element.TypeId);
                    return element.Id === args.timelineItem.id && typeKey === args.timelineItem.type;
                });
                if (Commerce.ObjectExtensions.isNullOrUndefined(timelineItem)) {
                    throw "onTimelineItemActionInvoked: Unable to find atem for edit.";
                }
                var request = new Commerce.Timeline.EditTimelineItemClientRequest(correlationId, timelineItem, this._timelineItemTypeMaps);
                this.timelineIsBusy(true);
                return Commerce.Runtime.executeAsync(request)
                    .then(function (result) {
                    _this.timelineIsBusy(false);
                    if (!result.canceled) {
                        _this._timelineItems = null;
                        _this._loadTimelineData(_this._currentFilter);
                    }
                })
                    .catch(function (error) {
                    _this.timelineIsBusy(false);
                    Commerce.NotificationHandler.displayClientErrors(error);
                });
            };
            CustomerDetailsViewModel.prototype.onTimelineItemInvoked = function (args) {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var timelineItem = Commerce.TimelineHelper.findTimelineItem(this._timelineItems, args.timelineItem.type, args.timelineItem.id);
                if (Commerce.ObjectExtensions.isNullOrUndefined(timelineItem)) {
                    throw "onTimelineItemActionInvoked: Unable to find atem for edit.";
                }
                var request = new Commerce.Timeline.ViewTimelineItemClientRequest(correlationId, timelineItem, this._timelineItemTypeMaps);
                return Commerce.Runtime.executeAsync(request)
                    .then(function (result) {
                    if (!result.canceled) {
                        _this._timelineItems = null;
                        _this._loadTimelineData(_this._currentFilter);
                    }
                })
                    .catch(function (error) {
                    Commerce.NotificationHandler.displayClientErrors(error);
                });
            };
            CustomerDetailsViewModel.prototype._populateRecommendedProductsAsync = function (wishListAsyncResult, recentPurchasesAsyncResult) {
                var _this = this;
                var channelId = Commerce.Session.instance.productCatalogStore.Context.ChannelId;
                var catalogId = Commerce.Session.instance.productCatalogStore.Context.CatalogId;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return wishListAsyncResult;
                }).enqueue(function () {
                    return _this.productManager.getRecommendedProductsAsync(_this._getWishListProductIds(), _this._customerAccountNumber, CustomerDetailsViewModel.MAXIMUM_NUMBER_OF_RECOMMENDED_PRODUCTS, 0)
                        .fail(function (errors) {
                        Commerce.RetailLogger.viewsCustomerDetailsLoadRecommendedProductsFailed(Commerce.ErrorHelper.getErrorMessages(errors));
                    });
                }).enqueue(function (results) {
                    var trackingId = !Commerce.ArrayExtensions.hasElements(results) ? Commerce.StringExtensions.EMPTY : results[0].TrackingId;
                    _this._recommendedProductsTrackingId = trackingId;
                    var recommendedProductIds = results.map(function (p) { return p.RecordId; });
                    var numberOfRecommendedProductsShown = Math.min(recommendedProductIds.length, CustomerDetailsViewModel.RECENT_PURCHASES_TO_INITIAL_DISPLAY);
                    Commerce.RetailLogger.viewsCustomerDetailsLoadRecommendedProductsSucceeded(trackingId, results.length, numberOfRecommendedProductsShown);
                    return Commerce.AsyncResult.createResolved(recommendedProductIds);
                }).enqueue(function (recommendedProductIds) {
                    if (Commerce.ArrayExtensions.hasElements(recommendedProductIds)) {
                        return Commerce.AsyncResult.createResolved(recommendedProductIds);
                    }
                    var relatedProductIds = new Commerce.Dictionary();
                    var relatedProductsQueue = new Commerce.AsyncQueue();
                    relatedProductsQueue.enqueue(function () {
                        return recentPurchasesAsyncResult;
                    }).enqueue(function () {
                        var relatedPurchaseProductIds = new Commerce.Dictionary();
                        var asyncResults = [];
                        _this.recentPurchases().forEach(function (p) { return relatedPurchaseProductIds.setItem(p.ProductId, p.ProductId); });
                        relatedPurchaseProductIds.forEach(function (key, productId) {
                            var getRelatedProductsQueue = new Commerce.AsyncQueue();
                            getRelatedProductsQueue.enqueue(function () {
                                return _this.productManager.getRelationTypesAsync(productId, channelId, catalogId);
                            }).enqueue(function (relations) {
                                var asyncResults = [];
                                relations.forEach(function (prt) {
                                    var asyncResult = _this.productManager.getRelatedProductsAsync(productId, channelId, catalogId, prt.RecordId)
                                        .done(function (results) {
                                        if (Commerce.ArrayExtensions.hasElements(results)) {
                                            results.forEach(function (psr) { return relatedProductIds.setItem(psr.RecordId, psr.RecordId); });
                                        }
                                    });
                                    asyncResults.push(asyncResult);
                                });
                                return Commerce.VoidAsyncResult.join(asyncResults);
                            });
                            asyncResults.push(getRelatedProductsQueue.run());
                        });
                        return Commerce.VoidAsyncResult.join(asyncResults);
                    });
                    return relatedProductsQueue.run().map(function (result) { return relatedProductIds.getItems(); });
                }).cancel(function (recommendedProductIds) {
                    return !Commerce.ArrayExtensions.hasElements(recommendedProductIds);
                }).enqueue(function (recommendedProductIds) {
                    return _this.productManager.getByIdsAsync(recommendedProductIds, channelId).done(function (products) {
                        _this.recommendedProducts(products);
                        _this.recommendedProductsForDisplay(products.slice(0, CustomerDetailsViewModel.RECENT_PURCHASES_TO_INITIAL_DISPLAY));
                        _this._totalRecommendedProducts(products.length);
                    });
                });
                return asyncQueue.run();
            };
            CustomerDetailsViewModel.prototype._loadCustomer = function () {
                var _this = this;
                if (Commerce.StringExtensions.isNullOrWhitespace(this._customerAccountNumber)) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                return this.customerManager.getCustomerDetailsAsync(this._customerAccountNumber)
                    .done(function (customerDetails) {
                    _this.customer(customerDetails.customer);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(customerDetails.customer)) {
                        _this.dateCreatedString(_this.shortDateFormatter.format(customerDetails.customer.CreatedDateTime));
                    }
                    _this.customerImage(Commerce.ImageDisplayHelper.GetCustomerImageContent(customerDetails.customer));
                    if (customerDetails.primaryAddress) {
                        _this.customerAddress(customerDetails.primaryAddress);
                    }
                    _this._populateCustomerAffiliations(customerDetails.customer.CustomerAffiliations);
                    _this._setViewTitle(customerDetails.customer);
                });
            };
            CustomerDetailsViewModel.prototype._loadCustomerAttributeDefinitions = function () {
                var _this = this;
                this.customerAttributesAreBusy(true);
                var customerAttributeDefinitionsResult = Commerce.ApplicationContext.Instance.customerAttributeDefinitionsAsync.value
                    .done(function (customerAttributeDefinitions) {
                    _this._customerAttributeDefinitions(customerAttributeDefinitions);
                }).always(function () {
                    _this.customerAttributesAreBusy(false);
                });
                return customerAttributeDefinitionsResult;
            };
            CustomerDetailsViewModel.prototype._loadClientBookAttributeDefinitions = function () {
                var _this = this;
                var clientBookAttributeDefinitionsResult = Commerce.ApplicationContext.Instance.clientBookAttributeDefinitionsAsync.value
                    .done(function (customerAttributeDefinitions) {
                    _this._clientBookAttributeDefinitions(customerAttributeDefinitions);
                });
                return clientBookAttributeDefinitionsResult;
            };
            CustomerDetailsViewModel.prototype._getSalesOrdersByCustomerAsync = function (customerAccountNumber, countOfSalesOrdersToLoad, countOfRecentPurchasesToLoad) {
                var _this = this;
                var salesOrders;
                return this.salesOrderManager.getSalesOrdersByCustomerIdAsync(customerAccountNumber, countOfSalesOrdersToLoad)
                    .done(function (salesOrderByCustomerId) {
                    salesOrders = salesOrderByCustomerId;
                    _this._populateSalesOrders(salesOrders, countOfSalesOrdersToLoad);
                });
            };
            CustomerDetailsViewModel.prototype._loadRecentPurchasesAndWishListsThenPopulateRecommendedProducts = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                this.recentPurchasesIsBusy(true);
                this.recommendedProductsIsBusy(true);
                asyncQueue.enqueue(function () {
                    var skip = 0;
                    var pageSize = CustomerDetailsViewModel.RECENT_PURCHASES_TO_INITIAL_DISPLAY;
                    var purchaseHistoryResult = _this.customerManager.getPurchaseHistoryAsync(_this._customerAccountNumber, pageSize, skip)
                        .done(function (purchaseHistoryResults) {
                        _this.recentPurchases(purchaseHistoryResults);
                    }).fail(function (errors) {
                        if (errors[0].ErrorCode.toUpperCase() !==
                            Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_REALTIMESERVICENOTSUPPORTED.serverErrorCode) {
                            Commerce.NotificationHandler.displayClientErrors(errors);
                        }
                        _this._errorCallback(errors);
                    }).always(function () {
                        _this.recentPurchasesIsBusy(false);
                    });
                    var wishListResult = _this.refreshWishListPanel().done(function () {
                        _this._sendMessageToExtensions("WishListsLoaded", { wishLists: _this.wishLists() });
                    });
                    var recommendedProductsResult = _this._populateRecommendedProductsAsync(wishListResult, purchaseHistoryResult);
                    return Commerce.VoidAsyncResult.join([purchaseHistoryResult, wishListResult, recommendedProductsResult]);
                });
                return asyncQueue.run().always(function () {
                    _this.recommendedProductsIsBusy(false);
                });
            };
            CustomerDetailsViewModel.prototype._errorCallback = function (errors) {
                Commerce.RetailLogger.viewsCustomerDetailsError(errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
            };
            CustomerDetailsViewModel.prototype._getWishListProductIds = function () {
                var productIds = [];
                if (Commerce.ArrayExtensions.hasElements(this.wishLists())) {
                    for (var listIndex = 0; listIndex < this.wishLists().length; listIndex++) {
                        for (var lineIndex = 0; lineIndex < this.wishLists()[listIndex].CommerceListLines.length; lineIndex++) {
                            productIds.push(this.wishLists()[listIndex].CommerceListLines[lineIndex].ProductId);
                        }
                    }
                }
                return productIds;
            };
            CustomerDetailsViewModel.prototype._populateSalesOrders = function (salesOrders, countOfSalesOrdersToLoad) {
                this._totalSalesOrders(salesOrders.length);
                this.displayZeroSalesOrdersText(!Commerce.ArrayExtensions.hasElements(salesOrders));
                this.displaySalesOrdersGrid(Commerce.ArrayExtensions.hasElements(salesOrders));
                this.displaySalesOrdersSortByMenu(Commerce.ArrayExtensions.hasElements(salesOrders));
                this.salesOrders(salesOrders);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(countOfSalesOrdersToLoad) && countOfSalesOrdersToLoad > 0) {
                    this._countOfSalesOrdersToLoad = countOfSalesOrdersToLoad;
                }
                this._sortSalesOrders();
            };
            CustomerDetailsViewModel.prototype._sortSalesOrders = function () {
                var sortList = this.salesOrders();
                var directionSign = this._isOrderHistorySortingDescending ? -1 : 1;
                switch (this._orderHistorySortColumn) {
                    case OrderHistorySortField.Date:
                        sortList = sortList.sort(function (item1, item2) {
                            return directionSign * Commerce.NumberExtensions.compare(item1.CreatedDateTime.getTime(), item2.CreatedDateTime.getTime());
                        });
                        this._orderHistorySortColumnName(Commerce.ViewModelAdapter.getResourceString("string_244"));
                        break;
                    case OrderHistorySortField.Number:
                        sortList = sortList.sort(function (item1, item2) {
                            return directionSign * Commerce.StringExtensions.compare(item1.ReceiptId, item2.ReceiptId);
                        });
                        this._orderHistorySortColumnName(Commerce.ViewModelAdapter.getResourceString("string_245"));
                        break;
                    case OrderHistorySortField.Total:
                        sortList = sortList.sort(function (item1, item2) {
                            return directionSign * Commerce.NumberExtensions.compare(item1.TotalAmount, item2.TotalAmount);
                        });
                        this._orderHistorySortColumnName(Commerce.ViewModelAdapter.getResourceString("string_246"));
                        break;
                }
                this.salesOrders(sortList);
                if (this.salesOrders().length === this.salesOrdersToDisplay().length) {
                    this.salesOrdersToDisplay(this.salesOrders());
                }
                else {
                    this.salesOrdersToDisplay(this.salesOrders().slice(0, this._countOfSalesOrdersToLoad));
                }
            };
            CustomerDetailsViewModel.prototype._populateCustomerAffiliations = function (customerAffiliations) {
                this.customerAffiliations(customerAffiliations.filter(function (affiliation) {
                    return !affiliation.HideInChannels;
                }));
                this.customerAffiliationsToDisplay(!Commerce.ObjectExtensions.isNullOrUndefined(this.customerAffiliations())
                    ? this.customerAffiliations().slice(0, CustomerDetailsViewModel.CUSTOMER_AFFILIATIONS_FOR_INITIAL_DISPLAY)
                    : new Array());
            };
            CustomerDetailsViewModel.prototype._navigateToProductDetailsView = function (productId, channelId, trackingId) {
                var simpleProductDetailsViewModelOptions = {
                    productId: productId,
                    product: undefined,
                    isSelectionMode: false,
                    channelId: channelId,
                    addToCartOptions: {
                        trackingId: trackingId
                    },
                    correlationId: Commerce.StringExtensions.EMPTY
                };
                Commerce.ViewModelAdapter.navigate("SimpleProductDetailsView", simpleProductDetailsViewModelOptions);
            };
            CustomerDetailsViewModel.prototype._sendMessageToExtensions = function (messageType, messageData) {
                this.extensionCommandViewModels.forEach(function (vm) {
                    vm.sendMessage(messageType, messageData);
                });
                this._customControlViewModels.forEach(function (vm) {
                    vm.sendMessage(messageType, messageData);
                });
            };
            CustomerDetailsViewModel.prototype._loadEmployeesDictianary = function () {
                var _this = this;
                return Commerce.ApplicationContext.Instance.storeEmployeeListAsync.value.map(function (employeeList) {
                    employeeList.forEach(function (value) {
                        _this._employeeDictionary.setItem(value.StaffId, value);
                    });
                });
            };
            CustomerDetailsViewModel.prototype._loadTimelineTypes = function () {
                var _this = this;
                this._timelineTypeDictionary.clear();
                return this.customerManager.getCustomerTimelineItemTypes()
                    .map(function (results) {
                    var typesBuffer = [];
                    _this._timelineItemTypeMaps = results;
                    results.forEach(function (typeMap) {
                        if (Commerce.ArrayExtensions.hasElements(typeMap.Types)) {
                            typesBuffer = typesBuffer.concat(typeMap.Types.map(function (value) {
                                var typeKey = Commerce.TimelineHelper.getTypeKey(typeMap.EntityType, value.TypeId);
                                _this._timelineTypeDictionary.setItem(typeKey, { sourceType: typeMap.EntityType, type: value });
                                return {
                                    label: value.Description,
                                    type: typeKey,
                                    iconCssClass: Commerce.TimelineHelper.getTypeCssClassByKey(typeKey)
                                };
                            }));
                        }
                    });
                    typesBuffer.push({
                        label: Commerce.StringExtensions.EMPTY,
                        type: CustomerDetailsViewModel.TIMELINE_TYPE_SHOWALL,
                        iconAriaLabel: Commerce.StringResourceManager.getString("string_30241"),
                        iconCssClass: "iconViewAll"
                    });
                    _this.timelineItemTypes(typesBuffer);
                })
                    .fail(function (errors) {
                    Commerce.RetailLogger.viewsCustomerDetailsLoadTimelineTypesFailed(Commerce.ErrorHelper.getErrorMessages(errors));
                });
            };
            CustomerDetailsViewModel.prototype._loadTimelineFilters = function () {
                var _this = this;
                return this.customerManager.getCustomerTimelineRefiners(this._customerAccountNumber)
                    .map(function (results) {
                    if (Commerce.ArrayExtensions.hasElements(results)) {
                        var filters_1 = [];
                        if (results.length > 1) {
                            filters_1.push({
                                label: Commerce.StringResourceManager.getString("string_30241"),
                                ariaLabel: Commerce.StringResourceManager.getString("string_30241"),
                                type: CustomerDetailsViewModel.TIMELINE_TYPE_SHOWALL
                            });
                        }
                        results.forEach(function (value) {
                            var typeKey = Commerce.TimelineHelper.getTypeKey(value.EntityType, value.TypeId);
                            var itemSourceAndType = _this._timelineTypeDictionary.getItem(typeKey);
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(itemSourceAndType)) {
                                filters_1.push({
                                    label: Commerce.StringExtensions.format(Commerce.StringResourceManager.getString("string_30239"), value.RefinedResultsCount, itemSourceAndType.type.Description),
                                    ariaLabel: Commerce.StringExtensions.format(Commerce.StringResourceManager.getString("string_30240"), itemSourceAndType.type.Description),
                                    type: typeKey
                                });
                            }
                        });
                        _this.timelineFiltersData(filters_1);
                    }
                })
                    .fail(function (errors) {
                    Commerce.RetailLogger.viewsCustomerDetailsLoadTimelineRefinersFailed(Commerce.ErrorHelper.getErrorMessages(errors));
                });
            };
            CustomerDetailsViewModel.prototype._loadTimelineItems = function () {
                var _this = this;
                return this.customerManager.getCustomerTimelineItems(this._customerAccountNumber, 100, 0)
                    .map(function (results) {
                    _this.totalTimelineItemsCount(results.length);
                    _this._timelineItems = results;
                })
                    .fail(function (errors) {
                    Commerce.RetailLogger.viewsCustomerDetailsLoadTimelineItemsFailed(Commerce.ErrorHelper.getErrorMessages(errors));
                });
            };
            CustomerDetailsViewModel.prototype._getMergedAttributeDefinitions = function () {
                var attributeDefinitions = this._customerAttributeDefinitions();
                this._clientBookAttributeDefinitions().forEach(function (clientBookDefinition) {
                    if (!attributeDefinitions.some(function (d) { return d.RecordId === clientBookDefinition.RecordId; })) {
                        attributeDefinitions.push(clientBookDefinition);
                    }
                });
                return attributeDefinitions;
            };
            CustomerDetailsViewModel.prototype._loadTimelineData = function (filter) {
                var _this = this;
                if (Commerce.StringExtensions.isNullOrWhitespace(this._customerAccountNumber)) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                var asyncQueue = new Commerce.AsyncQueue();
                this.timelineIsBusy(true);
                this._currentFilter = filter;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.viewsCustomerDetailsLoadTimelineRequestStarted(correlationId);
                if (this._employeeDictionary.length() <= 0) {
                    asyncQueue.enqueue(function () {
                        return _this._loadEmployeesDictianary();
                    });
                }
                if (!Commerce.ArrayExtensions.hasElements(this.timelineItemTypes())) {
                    asyncQueue.enqueue(function () {
                        return _this._loadTimelineTypes()
                            .done(function () {
                            _this._isClientelingEnabled(true);
                        })
                            .fail(function () {
                            _this._isClientelingEnabled(false);
                        });
                    });
                }
                if (!Commerce.ArrayExtensions.hasElements(this.timelineFiltersData())) {
                    asyncQueue.enqueue(function () {
                        return _this._loadTimelineFilters();
                    });
                }
                if (!Commerce.ArrayExtensions.hasElements(this._timelineItems)) {
                    asyncQueue.enqueue(function () {
                        return _this._loadTimelineItems();
                    });
                }
                asyncQueue.enqueue(function () {
                    var groups = [];
                    var fiveDaysAgo = Commerce.DateExtensions.addDays(new Date(), -5);
                    var groupLastFiveDaysItems = { label: Commerce.StringResourceManager.getString("string_30242"), items: [] };
                    var groupOlderItems = { label: Commerce.StringResourceManager.getString("string_30243"), items: [] };
                    if (Commerce.ArrayExtensions.hasElements(_this._timelineItems)) {
                        var employeeName_1;
                        var secondaryText_1;
                        _this._timelineItems.forEach(function (value) {
                            var typeKey = Commerce.TimelineHelper.getTypeKey(value.EntityType, value.TypeId);
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(filter) &&
                                filter.type !== CustomerDetailsViewModel.TIMELINE_TYPE_SHOWALL &&
                                filter.type !== typeKey) {
                                return;
                            }
                            employeeName_1 = _this._employeeDictionary.hasItem(value.StaffId) ?
                                _this._employeeDictionary.getItem(value.StaffId).Name : value.StaffId;
                            secondaryText_1 = Commerce.StringExtensions.isNullOrWhitespace(employeeName_1) ?
                                Commerce.StringExtensions.EMPTY : Commerce.StringExtensions.format(Commerce.StringResourceManager.getString("string_30244"), employeeName_1);
                            var item = {
                                id: value.Id,
                                type: typeKey,
                                dateTime: value.StartDateTime,
                                headerSecondaryText: secondaryText_1,
                                title: value.Title
                            };
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(value.StartDateTime) &&
                                value.StartDateTime.getTime() > fiveDaysAgo.getTime()) {
                                groupLastFiveDaysItems.items.push(item);
                            }
                            else {
                                groupOlderItems.items.push(item);
                            }
                        });
                    }
                    if (Commerce.ArrayExtensions.hasElements(groupLastFiveDaysItems.items)) {
                        groups.push(groupLastFiveDaysItems);
                    }
                    if (Commerce.ArrayExtensions.hasElements(groupOlderItems.items)) {
                        groups.push(groupOlderItems);
                    }
                    _this.timelineGroupsData(groups);
                    return Commerce.AsyncResult.createResolved();
                });
                return asyncQueue.run().map(function () { return void 0; }).always(function () {
                    _this.timelineIsBusy(false);
                    Commerce.RetailLogger.viewsCustomerDetailsLoadTimelineRequestFinished(correlationId);
                });
            };
            CustomerDetailsViewModel.prototype._setViewTitle = function (customer) {
                var _this = this;
                if (!Commerce.ApplicationSession.instance.featureStateContext.isFeatureEnabled(Commerce.Client.Entities.FeatureNameEnum.MarketingOptInFeature)
                    || customer.TitleRecordId === 0 || customer.IsAsyncCustomer) {
                    this.viewTitle(customer.Name);
                    return;
                }
                Commerce.ApplicationContext.Instance.customerTitlesAsync.value
                    .done(function (titles) {
                    var title = Commerce.ArrayExtensions.firstOrUndefined(titles, function (title) {
                        return title.RecordId === customer.TitleRecordId;
                    });
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(title)) {
                        var formatString = Commerce.ViewModelAdapter.getResourceString("string_215");
                        _this.viewTitle(Commerce.StringExtensions.format(formatString, title.Text, customer.Name));
                    }
                    else {
                        _this.viewTitle(customer.Name);
                    }
                });
            };
            CustomerDetailsViewModel.RECENT_PURCHASES_TO_INITIAL_DISPLAY = 4;
            CustomerDetailsViewModel.SALES_ORDERS_FOR_INITIAL_DISPLAY = 10;
            CustomerDetailsViewModel.CUSTOMER_AFFILIATIONS_FOR_INITIAL_DISPLAY = 5;
            CustomerDetailsViewModel.MAXIMUM_NUMBER_OF_RECOMMENDED_PRODUCTS = 50;
            CustomerDetailsViewModel.CUSTOMER_DETAILS_VIEW_NAME = "CustomerDetailsView";
            CustomerDetailsViewModel.TIMELINE_TYPE_SHOWALL = "_SHOWALLTIMELINEITEMS";
            return CustomerDetailsViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.CustomerDetailsViewModel = CustomerDetailsViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var CustomerOrderInvoicesViewModel = (function (_super) {
            __extends(CustomerOrderInvoicesViewModel, _super);
            function CustomerOrderInvoicesViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                _this._customerId = options.customerId;
                _this.openInvoices = ko.observableArray([]);
                _this.selectedInvoices = ko.observableArray([]);
                _this.addInvoicesDisabled = ko.computed(function () { return !Commerce.ArrayExtensions.hasElements(_this.selectedInvoices()); }, _this);
                return _this;
            }
            CustomerOrderInvoicesViewModel.prototype.load = function () {
                var _this = this;
                return this._isBusyUntil(this.getOrderInvoices())
                    .done(function (invoices) {
                    _this.openInvoices(invoices);
                })
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            CustomerOrderInvoicesViewModel.prototype.onSelectionChanged = function (invoices) {
                this.selectedInvoices(Commerce.ArrayExtensions.hasElements(invoices) ? invoices : []);
            };
            CustomerOrderInvoicesViewModel.prototype.addInvoicesToCart = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                var invoiceIds = this.selectedInvoices().map(function (invoice) {
                    return invoice.Id;
                });
                if (!Commerce.Session.instance.isCartInProgress) {
                    asyncQueue.enqueue(function () {
                        var reasonCodeQueue = Commerce.ActivityHelper.getStartOfTransactionReasonCodesAsyncQueue(Commerce.Session.instance.cart);
                        return asyncQueue.cancelOn(reasonCodeQueue.run());
                    }).enqueue(function () {
                        return _this.cartManager.createOrUpdateCartAsync(Commerce.Session.instance.cart);
                    });
                }
                asyncQueue.enqueue(function () {
                    return _this.cartManager.addInvoicesToCartAsync(invoiceIds).done(function () {
                        Commerce.ViewModelAdapter.navigate("CartView");
                    }).fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                });
                return this._isBusyUntil(asyncQueue.run());
            };
            CustomerOrderInvoicesViewModel.prototype.getOrderInvoices = function () {
                var searchCriteria = new Commerce.Proxy.Entities.InvoiceSearchCriteriaClass();
                searchCriteria.CustomerId = this._customerId;
                searchCriteria.InvoiceTypeValues = [];
                var deviceConfiguration = Commerce.ApplicationContext.Instance.deviceConfiguration;
                if (deviceConfiguration.IncludeSalesOrderInvoices) {
                    searchCriteria.InvoiceTypeValues.push(Commerce.Proxy.Entities.InvoiceType.SalesOrderInvoice);
                    if (deviceConfiguration.IncludeCreditNoteInvoices) {
                        searchCriteria.InvoiceTypeValues.push(Commerce.Proxy.Entities.InvoiceType.CreditNoteInvoice);
                    }
                }
                if (deviceConfiguration.IncludeFreeTextInvoices) {
                    searchCriteria.InvoiceTypeValues.push(Commerce.Proxy.Entities.InvoiceType.FreeTextInvoice);
                    if (deviceConfiguration.IncludeCreditNoteInvoices) {
                        searchCriteria.InvoiceTypeValues.push(Commerce.Proxy.Entities.InvoiceType.FreeTextCreditNoteInvoice);
                    }
                }
                if (deviceConfiguration.IncludeProjectInvoices) {
                    searchCriteria.InvoiceTypeValues.push(Commerce.Proxy.Entities.InvoiceType.ProjectInvoice);
                    if (deviceConfiguration.IncludeCreditNoteInvoices) {
                        searchCriteria.InvoiceTypeValues.push(Commerce.Proxy.Entities.InvoiceType.ProjectCreditNoteInvoice);
                    }
                }
                return this.salesOrderManager.getInvoicesAsync(searchCriteria);
            };
            return CustomerOrderInvoicesViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.CustomerOrderInvoicesViewModel = CustomerOrderInvoicesViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var CustomerSearchViewModel = (function (_super) {
            __extends(CustomerSearchViewModel, _super);
            function CustomerSearchViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this.isBusyFlag = ko.observable(false);
                _this._isBusyWhen(ko.computed(function () { return _this.isBusyFlag(); }));
                _this.hasCustomerSearchResults = ko.observable(false);
                return _this;
            }
            Object.defineProperty(CustomerSearchViewModel.prototype, "CustomerSearchCriteria", {
                get: function () {
                    return this._customerSearchCriteria;
                },
                set: function (customerSearchCriteria) {
                    this._customerSearchCriteria = customerSearchCriteria;
                    if (this._customerSearchCriteria) {
                        this._customerSearchCriteria.DataLevelValue = 1;
                        if (CustomerSearchViewModel._isCustomerSearchCriteria(this._customerSearchCriteria)) {
                            if (this._customerSearchCriteria.SearchLocationValue === Commerce.Proxy.Entities.SearchLocation.Local) {
                                var customerSearchByFieldCriterion = {
                                    SearchTerm: this._customerSearchCriteria.Keyword,
                                    SearchField: Commerce.ExtensibleEnumerations.CustomerSearchFieldType.getByValue(Commerce.ExtensibleEnumerations.CustomerSearchFieldType.Default.Value)
                                };
                                var customerSearchByFieldCriteria = {
                                    Criteria: [customerSearchByFieldCriterion],
                                    DataLevelValue: this._customerSearchCriteria.DataLevelValue
                                };
                                this._customerSearchCriteria = customerSearchByFieldCriteria;
                            }
                        }
                    }
                },
                enumerable: true,
                configurable: true
            });
            CustomerSearchViewModel.prototype.hasSearchValueSet = function () {
                if (CustomerSearchViewModel._isCustomerSearchCriteria(this._customerSearchCriteria)) {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(this._customerSearchCriteria) &&
                        !Commerce.StringExtensions.isNullOrWhitespace(this._customerSearchCriteria.Keyword);
                }
                else {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(this._customerSearchCriteria) &&
                        Commerce.ArrayExtensions.hasElements(this._customerSearchCriteria.Criteria) &&
                        !(this._customerSearchCriteria.Criteria.length === 1 &&
                            (Commerce.ObjectExtensions.isNullOrUndefined(this._customerSearchCriteria.Criteria[0].SearchField) ||
                                this._customerSearchCriteria.Criteria[0].SearchField.Name === Commerce.ExtensibleEnumerations.CustomerSearchFieldType.getByValue(Commerce.ExtensibleEnumerations.CustomerSearchFieldType.Default.Value).Name) &&
                            Commerce.StringExtensions.isNullOrWhitespace(this._customerSearchCriteria.Criteria[0].SearchTerm));
                }
            };
            CustomerSearchViewModel.prototype.searchCustomers = function (pageSize, skip) {
                if (CustomerSearchViewModel._isCustomerSearchCriteria(this._customerSearchCriteria)) {
                    return this._searchCustomersBySearchCriteria(this._customerSearchCriteria, pageSize, skip);
                }
                else {
                    return this._searchCustomersBySearchByFieldCriteria(this._customerSearchCriteria, pageSize, skip);
                }
            };
            CustomerSearchViewModel._isCustomerSearchCriteria = function (arg) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(arg)) {
                    return false;
                }
                var criteria = arg;
                return criteria.Keyword !== undefined ||
                    criteria.SearchLocationValue !== undefined ||
                    criteria.SearchOnlyCurrentCompany !== undefined;
            };
            CustomerSearchViewModel.prototype._searchCustomersBySearchCriteria = function (customerSearchCriteria, pageSize, skip) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(customerSearchCriteria)
                    || Commerce.StringExtensions.isNullOrWhitespace(customerSearchCriteria.Keyword)) {
                    return Commerce.AsyncResult.createResolved([]);
                }
                Commerce.RetailLogger.viewsMerchandisingCustomerSearchViewModelSearchCustomersBySearchCriteria(pageSize, skip);
                var searchResult;
                if (Commerce.NumberExtensions.isNullNaNOrZero(skip)) {
                    searchResult = Commerce.Triggers.TriggerHelper.executeTriggerWorkflowAsync(function () {
                        var preTriggerOptions = {
                            cart: Commerce.Session.instance.cart,
                            searchText: customerSearchCriteria.Keyword
                        };
                        return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreCustomerSearch, preTriggerOptions);
                    }, function () {
                        return _this.customerManager.getRecordsPage(customerSearchCriteria, pageSize, skip);
                    }, function (customers) {
                        var postTriggerOptions = { cart: Commerce.Session.instance.cart, customers: customers };
                        return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostCustomerSearch, postTriggerOptions);
                    }).map(function (result) {
                        var searchResult = result && !result.canceled ? result.data : [];
                        _this.hasCustomerSearchResults(searchResult.length > 0);
                        return searchResult;
                    });
                }
                else {
                    searchResult = this.customerManager.getRecordsPage(customerSearchCriteria, pageSize, skip);
                }
                return searchResult.fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            CustomerSearchViewModel.prototype._searchCustomersBySearchByFieldCriteria = function (customerSearchByFieldCriteria, pageSize, skip) {
                var _this = this;
                if (!this.hasSearchValueSet()) {
                    return Commerce.AsyncResult.createResolved([]);
                }
                var searchFields = JSON.stringify(customerSearchByFieldCriteria.Criteria.map(function (criterion) {
                    return criterion.SearchField ? criterion.SearchField.Name : CustomerSearchViewModel.DEFAULT_CUSTOMER_SEARCH_FIELD;
                }));
                Commerce.RetailLogger.viewsMerchandisingCustomerSearchViewModelSearchCustomersBySearchFieldCriteria(pageSize, skip, customerSearchByFieldCriteria.Criteria.length, searchFields);
                var searchResult;
                if (Commerce.NumberExtensions.isNullNaNOrZero(skip)) {
                    searchResult = Commerce.Triggers.TriggerHelper.executeTriggerWorkflowAsync(function () {
                        var preTriggerOptions = {
                            cart: Commerce.Session.instance.cart,
                            searchText: null,
                            searchFieldCriteria: customerSearchByFieldCriteria
                        };
                        return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreCustomerSearch, preTriggerOptions);
                    }, function () {
                        return _this.customerManager.getRecordsPageByFieldsAsync(customerSearchByFieldCriteria, pageSize, skip);
                    }, function (customers) {
                        var postTriggerOptions = { cart: Commerce.Session.instance.cart, customers: customers };
                        return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostCustomerSearch, postTriggerOptions);
                    }).map(function (result) {
                        var searchResult = result && !result.canceled ? result.data : [];
                        _this.hasCustomerSearchResults(searchResult.length > 0);
                        return searchResult;
                    });
                }
                else {
                    searchResult = this.customerManager.getRecordsPageByFieldsAsync(customerSearchByFieldCriteria, pageSize, skip);
                }
                return searchResult.fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            CustomerSearchViewModel.DEFAULT_CUSTOMER_SEARCH_FIELD = "Default";
            return CustomerSearchViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.CustomerSearchViewModel = CustomerSearchViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var DatabaseConnectionStatusViewModel = (function (_super) {
            __extends(DatabaseConnectionStatusViewModel, _super);
            function DatabaseConnectionStatusViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this.lastSyncDateTime = Commerce.DateExtensions.getMinDate();
                _this.retentionDay = 7;
                _this.status = ko.observable("");
                _this.pendingTransactionCount = ko.observable("0");
                _this.offlineSyncStatus = ko.observable(Commerce.ViewModelAdapter.getResourceString("string_6636"));
                _this.downloadSessionStatusTable = ko.observableArray([]);
                _this.uploadSessionStatusTable = ko.observableArray([]);
                _this.pendingDownloadSessionCount = ko.observable("0");
                _this.offlineDatabaseConnectionString = Commerce.Config.offlineDatabase;
                _this._shouldLoadOfflineSyncStats = true;
                _this.updateState();
                _this._showOfflineSyncStatus(Commerce.AsyncService.instance.offlineSyncing);
                _this._onOfflineSyncingStatusChangedHandler = function (eventData) {
                    _this._showOfflineSyncStatus(eventData);
                    _this._loadOfflineSyncStats();
                    _this._loadPendingTransactionCount();
                };
                _this.pendingDownloadSessionCount(Commerce.AsyncService.instance.pendingDownloadSessionCount.toString());
                _this._onPendingDownloadSessionCountChangedHandler = function (eventData) {
                    _this.pendingDownloadSessionCount(eventData.toString());
                    _this._limitLoadOfflineSyncStats();
                };
                Commerce.AsyncService.instance.addOfflineSyncingStatusChangedHandler(_this._onOfflineSyncingStatusChangedHandler);
                Commerce.AsyncService.instance.addPendingDownloadSessionCountChangedHandler(_this._onPendingDownloadSessionCountChangedHandler);
                _this.syncOfflineData();
                return _this;
            }
            DatabaseConnectionStatusViewModel.prototype.dispose = function () {
                Commerce.AsyncService.instance.removeOfflineSyncingStatusChangedHandler(this._onOfflineSyncingStatusChangedHandler);
                Commerce.AsyncService.instance.removePendingDownloadSessionCountChangedHandler(this._onPendingDownloadSessionCountChangedHandler);
                window.clearTimeout(this._shouldLoadOfflineSyncStatsTimeoutId);
                this._shouldLoadOfflineSyncStatsTimeoutId = 0;
                _super.prototype.dispose.call(this);
            };
            DatabaseConnectionStatusViewModel.prototype.toggleConnection = function () {
                var _this = this;
                var CORRELATION_ID = Commerce.LoggerHelper.getNewCorrelationId();
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var request = new Commerce.ToggleConnectionRequest(CORRELATION_ID);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request)).done(function () {
                        _this.updateState();
                    });
                });
                asyncQueue.enqueue(function () {
                    return _this.refreshCart();
                });
                return this._isBusyUntil(asyncQueue.run());
            };
            DatabaseConnectionStatusViewModel.prototype.syncOfflineData = function () {
                if (!Commerce.StringExtensions.isNullOrWhitespace(Commerce.Config.offlineDatabase)) {
                    Commerce.AsyncService.instance.executeManualOfflineSync();
                    return Commerce.VoidAsyncResult.createResolved();
                }
                else {
                    return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OFFLINE_MODE_NOT_SUPPORTED)]);
                }
            };
            DatabaseConnectionStatusViewModel.prototype._limitLoadOfflineSyncStats = function () {
                var _this = this;
                if (this._shouldLoadOfflineSyncStats) {
                    this._shouldLoadOfflineSyncStats = false;
                    this._shouldLoadOfflineSyncStatsTimeoutId = window.setTimeout(function () { return _this._shouldLoadOfflineSyncStats = true; }, DatabaseConnectionStatusViewModel.LOAD_OFFLINE_SYNC_STATS_IN_MILLISECONDS);
                    return this._loadOfflineSyncStats();
                }
                else {
                    return Commerce.AsyncResult.createResolved();
                }
            };
            DatabaseConnectionStatusViewModel.prototype._loadOfflineSyncStats = function () {
                var _this = this;
                if (!Commerce.StringExtensions.isNullOrWhitespace(Commerce.Config.offlineDatabase)) {
                    var terminalId = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.REGISTER_ID_KEY);
                    return Commerce.AsyncService.instance.getOfflineSyncStatsAsync(this.offlineDatabaseConnectionString, terminalId)
                        .done(function (status) {
                        _this.downloadSessionStatusTable(status.downloadSessions);
                        _this.uploadSessionStatusTable(status.uploadSessions);
                        if (status.lastSyncDateTime > _this.lastSyncDateTime) {
                            _this.lastSyncDateTime = status.lastSyncDateTime;
                        }
                    }).map(function () { return void 0; });
                }
                else {
                    return Commerce.AsyncResult.createResolved();
                }
            };
            DatabaseConnectionStatusViewModel.prototype._loadPendingTransactionCount = function () {
                var _this = this;
                if (Commerce.Session.instance.isOfflineAvailable && !Commerce.StringExtensions.isNullOrWhitespace(Commerce.Config.offlineDatabase)) {
                    return this.storeOperationsManager.getOfflinePendingTransactionCount()
                        .done(function (numberOfTransactions) {
                        if (!isNaN(numberOfTransactions)) {
                            _this.pendingTransactionCount(numberOfTransactions.toString());
                        }
                        else {
                            _this.pendingTransactionCount(Commerce.ViewModelAdapter.getResourceString("string_6621"));
                        }
                    }).map(function () { return void 0; });
                }
                else {
                    return Commerce.AsyncResult.createResolved();
                }
            };
            DatabaseConnectionStatusViewModel.prototype._showOfflineSyncStatus = function (offlineSyncing) {
                if (!Commerce.Utilities.OfflineHelper.isOfflineEnabled() || Commerce.AsyncService.instance.offlineModeDisabled) {
                    this.offlineSyncStatus(Commerce.ViewModelAdapter.getResourceString("string_6628"));
                }
                else if (offlineSyncing) {
                    this.offlineSyncStatus(Commerce.ViewModelAdapter.getResourceString("string_6626"));
                }
                else {
                    this.offlineSyncStatus(this.getOfflineSyncStatusMessage());
                }
            };
            DatabaseConnectionStatusViewModel.prototype.getOfflineSyncStatusMessage = function () {
                var lastSyncDateTimeNumber = this.lastSyncDateTime.getTime();
                if (lastSyncDateTimeNumber < 0) {
                    return Commerce.ViewModelAdapter.getResourceString("string_6627");
                }
                var timeDiffInSeconds = Commerce.DateExtensions.now.getTime() / 1000 - lastSyncDateTimeNumber / 1000;
                if (timeDiffInSeconds < 0) {
                    return Commerce.ViewModelAdapter.getResourceString("string_6635");
                }
                else if (timeDiffInSeconds / (3600 * 24) > this.retentionDay) {
                    return Commerce.ViewModelAdapter.getResourceString("string_6630");
                }
                else if (timeDiffInSeconds / (3600 * 24) > 1) {
                    return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_6631"), Math.floor(timeDiffInSeconds / (3600 * 24)));
                }
                else {
                    if (timeDiffInSeconds / 3600 > 1) {
                        return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_6632"), Math.floor(timeDiffInSeconds / 3600));
                    }
                    else {
                        if (timeDiffInSeconds / 60 > 1) {
                            return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_6633"), Math.floor(timeDiffInSeconds / 60));
                        }
                        else {
                            return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_6634"), Math.floor(timeDiffInSeconds));
                        }
                    }
                }
            };
            DatabaseConnectionStatusViewModel.prototype.updateState = function () {
                if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                    this.status(Commerce.ViewModelAdapter.getResourceString("string_77"));
                }
                else {
                    this.status(Commerce.ViewModelAdapter.getResourceString("string_78"));
                }
            };
            DatabaseConnectionStatusViewModel.prototype.refreshCart = function () {
                if (Commerce.Session.instance.isCartInProgress) {
                    var cartManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
                    return cartManager.getCartByCartIdAsync(Commerce.Session.instance.cart.Id);
                }
                return Commerce.VoidAsyncResult.createResolved();
            };
            DatabaseConnectionStatusViewModel.LOAD_OFFLINE_SYNC_STATS_IN_MILLISECONDS = 5000;
            return DatabaseConnectionStatusViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.DatabaseConnectionStatusViewModel = DatabaseConnectionStatusViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var IDenominationLineDetailsMode;
        (function (IDenominationLineDetailsMode) {
            IDenominationLineDetailsMode[IDenominationLineDetailsMode["Quantity"] = 0] = "Quantity";
            IDenominationLineDetailsMode[IDenominationLineDetailsMode["Amount"] = 1] = "Amount";
        })(IDenominationLineDetailsMode = ViewModels.IDenominationLineDetailsMode || (ViewModels.IDenominationLineDetailsMode = {}));
        var DenominationLineDetailsViewModel = (function (_super) {
            __extends(DenominationLineDetailsViewModel, _super);
            function DenominationLineDetailsViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw new Error("Invalid options passed to the DenominationLineDetailsViewModel constructor: options cannot be null or undefined.");
                }
                else if (Commerce.StringExtensions.isNullOrWhitespace(options.currency)) {
                    throw new Error("Invalid options passed to the DenominationLineDetailsViewModel constructor: currency cannot be empty or null.");
                }
                else if (options.denomination <= 0) {
                    throw new Error("Invalid denomination passed to the DenominationLineDetailsViewModel constructor: denomination cannot be 0 or negative.");
                }
                else if (options.value < 0) {
                    throw new Error("Invalid denomination passed to the DenominationLineDetailsViewModel constructor: value cannot be negative.");
                }
                else if (options.currencyTotal < 0) {
                    throw new Error("Invalid denomination passed to the DenominationLineDetailsViewModel constructor: value cannot be negative.");
                }
                _this.currency = options.currency;
                _this._denominationAmount = 0;
                _this._denominationQuantity = 0;
                _this._denominationMode = options.denominationMode;
                _this._denomination = options.denomination;
                _this._denominationTotal = options.currencyTotal;
                _this._decimalPrecision = Commerce.NumberExtensions.getDecimalPrecision(_this.currency);
                _this._isInValidState = false;
                _this._dialogError = [];
                _this.denominationLabel = Commerce.NumberExtensions.formatNumber(_this._denomination, _this._decimalPrecision);
                _this.denominationValue = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.denominationTotalValue = ko.observable(Commerce.StringExtensions.EMPTY);
                if (_this._denominationMode === IDenominationLineDetailsMode.Quantity) {
                    _this._denominationTotal = _this._denominationTotal - options.value * _this._denomination;
                    _this.denominationValueLabel = Commerce.ViewModelAdapter.getResourceString("string_13252");
                }
                else {
                    _this._denominationTotal = _this._denominationTotal - options.value;
                    _this.denominationValueLabel = Commerce.ViewModelAdapter.getResourceString("string_13253");
                }
                _this._value = options.value;
                return _this;
            }
            Object.defineProperty(DenominationLineDetailsViewModel.prototype, "quantity", {
                get: function () {
                    return this._denominationQuantity;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DenominationLineDetailsViewModel.prototype, "amount", {
                get: function () {
                    return this._denominationAmount;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DenominationLineDetailsViewModel.prototype, "total", {
                get: function () {
                    return this._denominationTotal;
                },
                enumerable: true,
                configurable: true
            });
            DenominationLineDetailsViewModel.prototype.onValueChanged = function (newValue) {
                var value = 0;
                if (!Commerce.StringExtensions.isNullOrWhitespace(newValue)) {
                    value = Commerce.NumberExtensions.parseNumber(newValue);
                }
                if (!isNaN(value)) {
                    this._value = value;
                }
            };
            DenominationLineDetailsViewModel.prototype.onBeforeClose = function (dialogResult) {
                if (dialogResult === Commerce.DialogResult.Cancel || this._isInValidState) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                else {
                    return Commerce.VoidAsyncResult.createRejected(this._dialogError);
                }
            };
            DenominationLineDetailsViewModel.prototype.updateDenominationWithQuantity = function (quantity) {
                if (this._validateQuantity(quantity)) {
                    var previousAmount = this._denominationAmount;
                    this._denominationQuantity = quantity;
                    this._denominationAmount = Commerce.NumberExtensions.roundToCurrencyPrecision((quantity * this._denomination), this.currency);
                    this._denominationTotal = Commerce.NumberExtensions.roundToCurrencyPrecision((this._denominationTotal - previousAmount + this._denominationAmount), this.currency);
                    this.denominationValue(Commerce.NumberExtensions.formatCurrency(this._denominationAmount, this.currency));
                    this.denominationTotalValue(Commerce.NumberExtensions.formatCurrency(this._denominationTotal, this.currency));
                }
                else {
                    this.denominationValue(Commerce.ViewModelAdapter.getResourceString("string_13254"));
                    this.denominationTotalValue(Commerce.ViewModelAdapter.getResourceString("string_13254"));
                }
            };
            DenominationLineDetailsViewModel.prototype.updateDenominationWithAmount = function (amount) {
                if (this._validateAmount(amount)) {
                    var previousAmount = this._denominationAmount;
                    this._denominationAmount = amount;
                    this._denominationTotal = Commerce.NumberExtensions.roundToCurrencyPrecision((this._denominationTotal - previousAmount + this._denominationAmount), this.currency);
                    this._denominationQuantity = Commerce.NumberExtensions.roundToNDigits((amount / this._denomination), 0);
                    this.denominationValue(Commerce.NumberExtensions.formatNumber(this._denominationQuantity, 0));
                    this.denominationTotalValue(Commerce.NumberExtensions.formatCurrency(this._denominationTotal, this.currency));
                }
                else {
                    this._denominationQuantity = 0;
                    this.denominationValue(Commerce.ViewModelAdapter.getResourceString("string_13254"));
                    this.denominationTotalValue(Commerce.ViewModelAdapter.getResourceString("string_13254"));
                }
            };
            Object.defineProperty(DenominationLineDetailsViewModel.prototype, "_value", {
                set: function (value) {
                    if (this._denominationMode === IDenominationLineDetailsMode.Quantity) {
                        value = Commerce.NumberExtensions.roundToNDigits(value, 0);
                        this.updateDenominationWithQuantity(value);
                    }
                    else {
                        value = Commerce.NumberExtensions.roundToCurrencyPrecision(value, this.currency);
                        this.updateDenominationWithAmount(value);
                    }
                },
                enumerable: true,
                configurable: true
            });
            DenominationLineDetailsViewModel.prototype._validateAmount = function (amount) {
                var multiplier = Math.pow(10, this._decimalPrecision);
                this._isInValidState = ((Math.round(amount * multiplier) % Math.round(this._denomination * multiplier) === 0) && (amount >= 0));
                if (this._isInValidState) {
                    this._dialogError = [];
                    return true;
                }
                else if (amount < 0) {
                    this._dialogError = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.AMOUNT_CANNOT_BE_NEGATIVE)];
                    return false;
                }
                else {
                    this._dialogError = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.DENOMINATIONS_QUANTITY_HAS_REMAINDER_FOR_TOTAL_AMOUNT)];
                    return false;
                }
            };
            DenominationLineDetailsViewModel.prototype._validateQuantity = function (quantity) {
                this._isInValidState = ((quantity === Math.floor(quantity)) && (quantity >= 0));
                if (this._isInValidState) {
                    this._dialogError = [];
                    return true;
                }
                else if (quantity < 0) {
                    this._dialogError = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.AMOUNT_CANNOT_BE_NEGATIVE)];
                    return false;
                }
                else {
                    this._dialogError = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.DENOMINATIONS_QUANTITY_HAS_TO_BE_INTEGER_NUMBER)];
                    return false;
                }
            };
            return DenominationLineDetailsViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.DenominationLineDetailsViewModel = DenominationLineDetailsViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var DenominationLine = (function () {
            function DenominationLine(denominationDetail, index) {
                this.currency = denominationDetail.Currency;
                this.denominationAmount = denominationDetail.DenominationAmount;
                this.denominationType = denominationDetail.Type;
                this.countedAmount = denominationDetail.AmountDeclared;
                this.countedQuantity = denominationDetail.QuantityDeclared;
                this.denominationAmountToDisplay = Commerce.NumberExtensions.formatNumber(this.denominationAmount, Commerce.NumberExtensions.getDecimalPrecision(this.currency));
                this.countedAmountToDisplay = Commerce.NumberExtensions.formatCurrency(this.countedAmount, this.currency);
                this.denominationIndex = index;
            }
            Object.defineProperty(DenominationLine.prototype, "denominationDetail", {
                get: function () {
                    var denominationDetail = {
                        Currency: this.currency,
                        Type: this.denominationType,
                        AmountDeclared: this.countedAmount,
                        QuantityDeclared: this.countedQuantity,
                        DenominationAmount: this.denominationAmount
                    };
                    return denominationDetail;
                },
                enumerable: true,
                configurable: true
            });
            return DenominationLine;
        }());
        ViewModels.DenominationLine = DenominationLine;
        var DenominationsViewModel = (function (_super) {
            __extends(DenominationsViewModel, _super);
            function DenominationsViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw new Error("Invalid options passed to the DenominationsViewModel constructor: options cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.operationTitle)) {
                    throw new Error("Invalid options passed to the DenominationsViewModel constructor: options.operationTitle cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.tenderName)) {
                    throw new Error("Invalid options passed to the DenominationsViewModel constructor: options.tenderName cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.denominationDetails) || options.denominationDetails.length === 0) {
                    throw new Error("Invalid options passed to the DenominationsViewModel constructor: options.denominationDetails cannot be null or empty.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.selectionHandler)) {
                    throw new Error("Invalid options passed to the DenominationsViewModel constructor: options.selectionHandler cannot be null or undefined.");
                }
                _this._selectionHandler = options.selectionHandler;
                _this.operationTitle = Commerce.ViewModelAdapter.getResourceString(options.operationTitle);
                _this.tenderName = ko.observable(options.tenderName);
                _this.denominationLines = ko.observableArray(options.denominationDetails.map(function (denominationDetail, index) {
                    return new DenominationLine(denominationDetail, index);
                }));
                _this._selectedDenominationLine = _this.denominationLines()[0];
                _this._currency = _this._selectedDenominationLine.currency;
                _this.totalAmountToDisplay = ko.computed(function () {
                    return Commerce.NumberExtensions.formatCurrency(_this._currencyTotal, _this._currency);
                }, _this);
                return _this;
            }
            DenominationsViewModel.prototype.onHidden = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._selectionHandler)) {
                    var selectionHandler = this._selectionHandler;
                    this._selectionHandler = null;
                    selectionHandler.cancel();
                }
            };
            DenominationsViewModel.prototype.onSave = function () {
                var selectionHandler = this._selectionHandler;
                this._selectionHandler = null;
                selectionHandler.select(this._denominationDetails, function () { return; }, function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            DenominationsViewModel.prototype.quantityClicked = function (denominationLine) {
                this._selectedDenominationLine = denominationLine;
                return this._autoOpenQuantityActivity().fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            DenominationsViewModel.prototype.amountClicked = function (denominationLine) {
                this._selectedDenominationLine = denominationLine;
                return this._autoOpenAmountActivity().fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            Object.defineProperty(DenominationsViewModel.prototype, "_currencyTotal", {
                get: function () {
                    var denominationDetails = this.denominationLines().map(function (denominationLine) {
                        return denominationLine.denominationDetail;
                    });
                    var currencyTotal = Commerce.Helpers.CurrencyHelper.getTotalDenominationAmountDeclaredInCurrency(denominationDetails, this._currency);
                    return currencyTotal;
                },
                enumerable: true,
                configurable: true
            });
            DenominationsViewModel.prototype._autoOpenQuantityActivity = function () {
                var _this = this;
                var asyncResult = new Commerce.VoidAsyncResult();
                this._getDenominationQuantity().done(function (openNext) {
                    if (openNext) {
                        _this._autoOpenQuantityActivity().done(function () {
                            asyncResult.resolve();
                        }).fail(function (error) {
                            asyncResult.reject(error);
                        });
                    }
                    else {
                        asyncResult.resolve();
                    }
                }).fail(function (error) {
                    asyncResult.reject(error);
                });
                return asyncResult;
            };
            DenominationsViewModel.prototype._autoOpenAmountActivity = function () {
                var _this = this;
                var asyncResult = new Commerce.VoidAsyncResult();
                this._getDenominationAmount().done(function (openNext) {
                    if (openNext) {
                        _this._autoOpenAmountActivity().done(function () {
                            asyncResult.resolve();
                        }).fail(function (error) {
                            asyncResult.reject(error);
                        });
                    }
                    else {
                        asyncResult.resolve();
                    }
                }).fail(function (error) {
                    asyncResult.reject(error);
                });
                return asyncResult;
            };
            DenominationsViewModel.prototype._getDenominationQuantity = function () {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._selectedDenominationLine)) {
                    var asyncResult_1 = new Commerce.AsyncResult();
                    var getDenominationQuantityActivity_1 = new Commerce.Activities.GetDenominationQuantityActivity({
                        title: this.operationTitle,
                        currency: this._currency,
                        currencyTotal: this._currencyTotal,
                        denomination: this._selectedDenominationLine.denominationAmount,
                        quantity: this._selectedDenominationLine.countedQuantity
                    });
                    getDenominationQuantityActivity_1.execute().done(function () {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(getDenominationQuantityActivity_1.response)) {
                            _this._selectedDenominationLine.countedAmount = getDenominationQuantityActivity_1.response.amount;
                            _this._selectedDenominationLine.countedQuantity = getDenominationQuantityActivity_1.response.quantity;
                            _this._selectedDenominationLine.countedAmountToDisplay =
                                Commerce.NumberExtensions.formatCurrency(_this._selectedDenominationLine.countedAmount, _this._currency);
                            asyncResult_1.resolve(_this._updateAndSelectNextDenominationLine());
                        }
                        else {
                            asyncResult_1.resolve(false);
                        }
                    }).fail(function (errors) {
                        asyncResult_1.reject(errors);
                    });
                    return asyncResult_1;
                }
                else {
                    return Commerce.AsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.DENOMINATION_LINE_NOT_SELECTED)]);
                }
            };
            DenominationsViewModel.prototype._getDenominationAmount = function () {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._selectedDenominationLine)) {
                    var asyncResult_2 = new Commerce.AsyncResult();
                    var getDenominationAmountActivity_1 = new Commerce.Activities.GetDenominationAmountActivity({
                        title: this.operationTitle,
                        currency: this._currency,
                        currencyTotal: this._currencyTotal,
                        denomination: this._selectedDenominationLine.denominationAmount,
                        amount: this._selectedDenominationLine.countedAmount
                    });
                    getDenominationAmountActivity_1.execute().done(function () {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(getDenominationAmountActivity_1.response)) {
                            _this._selectedDenominationLine.countedQuantity = getDenominationAmountActivity_1.response.quantity;
                            _this._selectedDenominationLine.countedAmount = getDenominationAmountActivity_1.response.amount;
                            _this._selectedDenominationLine.countedAmountToDisplay =
                                Commerce.NumberExtensions.formatCurrency(_this._selectedDenominationLine.countedAmount, _this._selectedDenominationLine.currency);
                            asyncResult_2.resolve(_this._updateAndSelectNextDenominationLine());
                        }
                        else {
                            asyncResult_2.resolve(false);
                        }
                    }).fail(function (errors) {
                        asyncResult_2.reject(errors);
                    });
                    return asyncResult_2;
                }
                else {
                    return Commerce.AsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.DENOMINATION_LINE_NOT_SELECTED)]);
                }
            };
            DenominationsViewModel.prototype._updateAndSelectNextDenominationLine = function () {
                var nextIsSelected = false;
                var index = this._selectedDenominationLine.denominationIndex;
                if (index < this.denominationLines().length - 1) {
                    index++;
                    this._selectedDenominationLine = this.denominationLines()[index];
                    nextIsSelected = true;
                }
                var denominationHolder = this.denominationLines();
                this.denominationLines([]);
                this.denominationLines(denominationHolder);
                return nextIsSelected;
            };
            Object.defineProperty(DenominationsViewModel.prototype, "_denominationDetails", {
                get: function () {
                    return this.denominationLines().map(function (denominationLine) {
                        return denominationLine.denominationDetail;
                    });
                },
                enumerable: true,
                configurable: true
            });
            return DenominationsViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.DenominationsViewModel = DenominationsViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var DepositOverrideViewModel = (function (_super) {
            __extends(DepositOverrideViewModel, _super);
            function DepositOverrideViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                var cart = Commerce.Session.instance.cart;
                _this._numpadBroker = options.numpadBroker;
                _this._selectionHandler = options.selectionHandler;
                _this.isCustomerOrderPickup = Commerce.CustomerOrderHelper.isCustomerOrderPickup(cart);
                _this.isCustomerOrderCreateOrEdit = Commerce.CustomerOrderHelper.isCustomerOrderCreationOrEdition(cart);
                _this.availableDepositAmount = cart.AvailableDepositAmount;
                _this.maximumOverrideAmount = cart.TotalCustomerOrderSalesAmount;
                _this.currentDeposit = Commerce.ObjectExtensions.isNullOrUndefined(cart.OverriddenDepositWithoutCarryoutAmount) ?
                    cart.RequiredDepositWithoutCarryoutAmount : cart.OverriddenDepositWithoutCarryoutAmount;
                _this.totalSalesAmountDue = cart.TotalCustomerOrderSalesAmount;
                _this.depositAmountToOverride = ko.observable(Commerce.NumberExtensions.formatNumber(cart.OverriddenDepositWithoutCarryoutAmount, Commerce.NumberExtensions.getDecimalPrecision()));
                if (cart.OverriddenDepositWithoutCarryoutAmount > 0) {
                    _this.setDepositAmountToOverride(cart.OverriddenDepositWithoutCarryoutAmount);
                }
                else {
                    var initialOverrideAmount = Math.min(_this.totalSalesAmountDue, _this.availableDepositAmount);
                    _this.setDepositAmountToOverride(initialOverrideAmount);
                }
                _this.ariaLabelAmountDueNow = _this.formatAriaCurrencyLabels("string_4608", _this.totalSalesAmountDue);
                _this.ariaLabelMaximumOverrideAmount = _this.formatAriaCurrencyLabels("string_4607", _this.maximumOverrideAmount);
                _this.ariaLabelAvailableDeposit = _this.formatAriaCurrencyLabels("string_4606", _this.availableDepositAmount);
                _this.ariaLabelCurrentDeposit = _this.formatAriaCurrencyLabels("string_4601", _this.currentDeposit);
                return _this;
            }
            DepositOverrideViewModel.prototype.clearDepositOverride = function () {
                this.updateOverriddenDepositAmount(null);
            };
            DepositOverrideViewModel.prototype.overrideDeposit = function () {
                var depositAmount = Commerce.NumberExtensions.parseNumber(this.depositAmountToOverride());
                if (!isNaN(depositAmount)) {
                    this.updateOverriddenDepositAmount(depositAmount);
                }
            };
            DepositOverrideViewModel.prototype.setFullOverridenDepositAmount = function () {
                this.setDepositAmountToOverride(this.currentDeposit);
            };
            DepositOverrideViewModel.prototype.setDepositAvailableAmount = function () {
                this.setDepositAmountToOverride(this.availableDepositAmount);
            };
            DepositOverrideViewModel.prototype.setMaximumOverrideAmount = function () {
                this.setDepositAmountToOverride(this.maximumOverrideAmount);
            };
            DepositOverrideViewModel.prototype.setCartAmountDueNow = function () {
                this.setDepositAmountToOverride(this.totalSalesAmountDue);
            };
            DepositOverrideViewModel.prototype.onShown = function () {
                Commerce.Peripherals.instance.numPad.enable(this._numpadBroker);
            };
            DepositOverrideViewModel.prototype.onHidden = function () {
                Commerce.Peripherals.instance.numPad.disable();
                this._selectionHandler.cancel();
            };
            DepositOverrideViewModel.prototype.updateOverriddenDepositAmount = function (overridenDepositAmount) {
                this._selectionHandler.select(overridenDepositAmount, function () { return void 0; }, function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            DepositOverrideViewModel.prototype.setDepositAmountToOverride = function (amount) {
                this.depositAmountToOverride(Commerce.NumberExtensions.formatNumber(amount, Commerce.NumberExtensions.getDecimalPrecision()));
            };
            DepositOverrideViewModel.prototype.formatAriaCurrencyLabels = function (labelResourceString, amount) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(amount)) {
                    return Commerce.StringExtensions.EMPTY;
                }
                var baseStringResource = "string_1831";
                var result = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString(baseStringResource), Commerce.ViewModelAdapter.getResourceString(labelResourceString), Commerce.NumberExtensions.formatCurrency(amount));
                return result;
            };
            return DepositOverrideViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.DepositOverrideViewModel = DepositOverrideViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var EmployeeClientBookViewModel = (function (_super) {
            __extends(EmployeeClientBookViewModel, _super);
            function EmployeeClientBookViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this.selectedCustomers = ko.observableArray([]);
                _this.canAddSelectedCustomer = ko.computed(function () {
                    return Commerce.ArrayExtensions.hasElements(_this.selectedCustomers()) && _this.selectedCustomers().length === 1;
                });
                _this.canRemoveSelectedCustomers = ko.computed(function () {
                    return Commerce.ArrayExtensions.hasElements(_this.selectedCustomers());
                });
                _this.clientListIsLoading = ko.observable(false);
                _this._isBusyWhen(ko.computed(function () { return _this.clientListIsLoading(); }));
                _this.reloadGetClientBookCustomers = ko.observable(function () { return; });
                return _this;
            }
            EmployeeClientBookViewModel.prototype.setSelectedCustomers = function (customers) {
                this.selectedCustomers(customers);
            };
            EmployeeClientBookViewModel.prototype.getClientBookCustomers = function (pageSize, skip) {
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var searchCriteria = {
                    FilterByCurrentEmployee: true,
                    Refinement: Commerce.ObjectExtensions.isNullOrUndefined(this._refinements) ? [] : this._refinements
                };
                return this.employeeManager.getClientBookCustomersAsync(searchCriteria, pageSize, skip)
                    .fail(function (errors) {
                    Commerce.RetailLogger.viewModelSearchClientBookCustomersAsyncFailed(correlationId, Commerce.ErrorHelper.serializeError(errors));
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            EmployeeClientBookViewModel.prototype.showCustomerDetailsAsync = function (customer) {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.viewsMerchandisingSearchViewModelShowCustomerDetailsStarted(correlationId);
                asyncQueue.enqueue(function () {
                    return _this.customerManager.getCustomersByAccountNumbersAsync([customer.CustomerId])
                        .done(function (customers) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(customers[0])) {
                            Commerce.RetailLogger.viewsMerchandisingSearchViewShowCustomerDetails(correlationId, customers[0].AccountNumber);
                            var viewOptions = {
                                accountNumber: customers[0].AccountNumber,
                                correlationId: correlationId
                            };
                            Commerce.ViewModelAdapter.navigate("CustomerDetailsView", viewOptions);
                        }
                    });
                });
                return this._handleAsyncResult(asyncQueue.run()).map(function () { return void 0; });
            };
            EmployeeClientBookViewModel.prototype.addToCartClick = function () {
                var accounts = this.selectedCustomers().map(function (account) { return account.CustomerId; });
                if (Commerce.StringExtensions.isNullOrWhitespace(accounts[0])) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var setCustomerOnCartOperationRequest = new Commerce.SetCustomerOnCartOperationRequest(correlationId, accounts[0]);
                return this._isBusyUntil(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(setCustomerOnCartOperationRequest)))
                    .done(function (result) {
                    if (!result.canceled) {
                        Commerce.ViewModelAdapter.navigate("CartView");
                    }
                }).fail(function (errors) {
                    Commerce.RetailLogger.viewsCustomerDetailsAddCustomerFailed(correlationId);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            EmployeeClientBookViewModel.prototype.removeCustomersClientBookAsync = function () {
                var _this = this;
                var options = {
                    clientBookCustomers: this.selectedCustomers(),
                };
                var operationResult = Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.RemoveCustomersFromClientBook, options).done(function (result) {
                    if (!result.canceled) {
                        _this.reloadGetClientBookCustomers()();
                    }
                }).map(function () { return void 0; });
                return this._handleAsyncResult(operationResult);
            };
            EmployeeClientBookViewModel.prototype.filterClientBookCustomers = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return _this._getClientBookRefinersAsync(correlationId);
                }).enqueue(function (refiners) {
                    var activity = new Commerce.Activities.GetClientBookRefinersActivity({
                        correlationId: correlationId,
                        clientBookRefiners: refiners
                    });
                    return activity.execute().map(function () {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(activity.response)) {
                            _this._refinements = activity.response.clientBookRefinerValues;
                            _this.reloadGetClientBookCustomers()();
                        }
                    });
                });
                return asyncQueue.run();
            };
            EmployeeClientBookViewModel.prototype._getClientBookRefinersAsync = function (correlationId) {
                var _this = this;
                if (Commerce.ArrayExtensions.hasElements(this._clientBookRefiners)) {
                    return Commerce.AsyncResult.createResolved(this._clientBookRefiners);
                }
                var refinerSources = [
                    Commerce.Proxy.Entities.ClientBookRefinerSource.Attribute,
                    Commerce.Proxy.Entities.ClientBookRefinerSource.CustomerSearchKeyword
                ];
                return this.employeeManager.getClientBookSearchRefinersAsync(refinerSources, null)
                    .done(function (refiners) {
                    _this._clientBookRefiners = refiners;
                }).fail(function (errors) {
                    Commerce.RetailLogger.viewModelGetClientBookRefinersAsyncFailed(correlationId, Commerce.ErrorHelper.serializeError(errors));
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            EmployeeClientBookViewModel.prototype._handleAsyncResult = function (asyncResult) {
                return this._isBusyUntil(asyncResult).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            return EmployeeClientBookViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.EmployeeClientBookViewModel = EmployeeClientBookViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var ExtendedLogOnViewModel = (function (_super) {
            __extends(ExtendedLogOnViewModel, _super);
            function ExtendedLogOnViewModel(context, managerFactory, displayClientErrors, viewModelAdapter) {
                var _this = _super.call(this, context) || this;
                _this._managerFactory = managerFactory;
                _this._displayClientErrors = displayClientErrors;
                _this._viewModelAdapter = viewModelAdapter;
                _this.foundEmployees = ko.observableArray([]);
                _this.selectedEmployee = ko.observable(null);
                _this.isEmployeeSelected = ko.computed(function () { return _this.computeEmployeeSelected(); });
                _this.searchEmployee();
                return _this;
            }
            ExtendedLogOnViewModel.prototype.search = function (query) {
                var _this = this;
                this.runAsyncRequest(this._managerFactory.getManager(Commerce.Model.Managers.IOperatorManagerName)
                    .getEmployeesAsync()
                    .done(function (result) {
                    _this.findEmployee(query, result);
                }));
            };
            ExtendedLogOnViewModel.prototype.unassignStartAsync = function () {
                var _this = this;
                var showMessageDialogClientRequest = new Commerce.ShowMessageDialogClientRequest({
                    title: Commerce.ViewModelAdapter.getResourceString("string_11008"),
                    subTitle: Commerce.ViewModelAdapter.getResourceString("string_11009"),
                    message: this._selectedEmployeeText,
                    button1: {
                        id: Commerce.Activities.DisplayMessageOperationIds.OK,
                        result: "OK_RESULT",
                        label: Commerce.ViewModelAdapter.getResourceString("string_77"),
                        isPrimary: true
                    },
                    button2: {
                        id: Commerce.Activities.DisplayMessageOperationIds.CANCEL,
                        result: "CANCEL_RESULT",
                        label: Commerce.ViewModelAdapter.getResourceString("string_78"),
                        isPrimary: false
                    }
                });
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(showMessageDialogClientRequest))
                    .done(function (result) {
                    if (!result.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(result.data.result) && result.data.result.dialogResult === "OK_RESULT") {
                        _this.unAssignExtendedLogon();
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                }).map(function () { return void 0; });
            };
            ExtendedLogOnViewModel.prototype.assignStartAsync = function () {
                var _this = this;
                var assignExtendedLogOnDialogActivity = new Commerce.Activities.AssignExtendedLogOnDialogActivity({ employee: this.selectedEmployee() });
                return assignExtendedLogOnDialogActivity.execute().done(function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(assignExtendedLogOnDialogActivity.response)) {
                        var extendedLogonToken = assignExtendedLogOnDialogActivity.response.extendedLogonToken;
                        var extendedLogonGrantType = assignExtendedLogOnDialogActivity.response.extendedLogonGrantType;
                        _this.assignExtendedLogon(extendedLogonToken, extendedLogonGrantType);
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            ExtendedLogOnViewModel.prototype.searchEmployee = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var activity = new Commerce.Activities.GetSearchTextActivity({
                        title: Commerce.ViewModelAdapter.getResourceString("string_11000"),
                        subTitle: Commerce.StringExtensions.EMPTY,
                        inputLabel: Commerce.ViewModelAdapter.getResourceString("string_11012"),
                        searchText: _this._searchText
                    });
                    activity.responseHandler = function (response) {
                        _this._searchText = response.searchText;
                        return asyncQueue.cancelOn(_this.onSearchTextChanged(response.searchText)).map(function () { return void 0; });
                    };
                    return activity.execute().done(function () {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(activity.response)) {
                            asyncQueue.cancel();
                            return;
                        }
                    });
                });
                return asyncQueue.run().fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            ExtendedLogOnViewModel.prototype.onSearchTextChanged = function (searchText) {
                this.search(searchText);
                return Commerce.AsyncResult.createResolved();
            };
            ExtendedLogOnViewModel.prototype.findEmployee = function (query, employees) {
                query = (query || "").toLowerCase();
                employees = employees.filter(function (value) {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(value)
                        && (((value.StaffId || "").toLowerCase().indexOf(query) !== -1)
                            || ((value.Name || "").toLowerCase().indexOf(query) !== -1));
                });
                this.foundEmployees(employees);
            };
            Object.defineProperty(ExtendedLogOnViewModel.prototype, "_selectedEmployeeText", {
                get: function () {
                    var selectedEmployee = this.selectedEmployee();
                    if (Commerce.ObjectExtensions.isNullOrUndefined(selectedEmployee)) {
                        return null;
                    }
                    return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_11014"), selectedEmployee.StaffId, selectedEmployee.Name);
                },
                enumerable: true,
                configurable: true
            });
            ExtendedLogOnViewModel.prototype.computeEmployeeSelected = function () {
                return !Commerce.ObjectExtensions.isNullOrUndefined(this.selectedEmployee());
            };
            ExtendedLogOnViewModel.prototype.assignExtendedLogon = function (token, grantType) {
                var _this = this;
                this.runAsyncRequest(this._managerFactory.getManager(Commerce.Model.Managers.IAuthenticationManagerName)
                    .enrollUserCredentials({
                    userId: this.selectedEmployee().StaffId,
                    grantType: grantType,
                    credential: token
                }).done(function () {
                    _this._viewModelAdapter.displayMessage("string_11011");
                }));
            };
            ExtendedLogOnViewModel.prototype.unAssignExtendedLogon = function () {
                var _this = this;
                this.runAsyncRequest(this._managerFactory.getManager(Commerce.Model.Managers.IAuthenticationManagerName)
                    .disenrollUserCredentials({
                    userId: this.selectedEmployee().StaffId,
                    grantType: Commerce.Authentication.Providers.CommerceUserAuthenticationProvider.EXTENDEDLOGON_ALL_GRANT_TYPE
                }).done(function () {
                    _this._viewModelAdapter.displayMessage("string_11010");
                }));
            };
            ExtendedLogOnViewModel.prototype.runAsyncRequest = function (result) {
                var _this = this;
                return this._isBusyUntil(result).fail(function (errors) {
                    _this._displayClientErrors(errors);
                });
            };
            return ExtendedLogOnViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.ExtendedLogOnViewModel = ExtendedLogOnViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var _a, _b;
        var ExtensionPackageViewModel = (function (_super) {
            __extends(ExtensionPackageViewModel, _super);
            function ExtensionPackageViewModel(context, extensionPackageLoadInfo) {
                var _this = _super.call(this, context) || this;
                _this._extensionPackageLoadInfo = extensionPackageLoadInfo;
                return _this;
            }
            Object.defineProperty(ExtensionPackageViewModel.prototype, "extensionPackageBaseUrlDisplayText", {
                get: function () {
                    var extensionPackageBaseUrl = this._extensionPackageLoadInfo.extensionPackageInfo.baseUrl;
                    var extensionPackageBaseUrlDisplayText = Commerce.StringExtensions.format("URL: {0}", extensionPackageBaseUrl);
                    return extensionPackageBaseUrlDisplayText;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ExtensionPackageViewModel.prototype, "extensionPackageName", {
                get: function () {
                    return this._extensionPackageLoadInfo.extensionPackageInfo.name;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ExtensionPackageViewModel.prototype, "extensionPackagePublisherDisplayText", {
                get: function () {
                    var publisher = Commerce.ObjectExtensions.isNullOrUndefined(this._extensionPackageLoadInfo.extensionPackageInfo.publisher) ?
                        Commerce.StringExtensions.EMPTY : this._extensionPackageLoadInfo.extensionPackageInfo.publisher;
                    var publisherDisplayText = Commerce.StringExtensions.format(Commerce.StringResourceManager.getString("string_7436"), publisher);
                    return publisherDisplayText;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ExtensionPackageViewModel.prototype, "extensionPackageVersion", {
                get: function () {
                    return this._extensionPackageLoadInfo.extensionPackageInfo.version;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ExtensionPackageViewModel.prototype, "extensionPackageDescription", {
                get: function () {
                    return this._extensionPackageLoadInfo.extensionPackageInfo.description;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ExtensionPackageViewModel.prototype, "extensionPackageLoadSucceeded", {
                get: function () {
                    return Commerce.ObjectExtensions.isNullOrUndefined(this._extensionPackageLoadInfo.loadError);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ExtensionPackageViewModel.prototype, "extensionPackageLoadFailed", {
                get: function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(this._extensionPackageLoadInfo.loadError);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ExtensionPackageViewModel.prototype, "extensionPackageLoadFailureReasonDisplayText", {
                get: function () {
                    var unknownFailureReasonResourceId = "string_7461";
                    if (Commerce.ObjectExtensions.isNullOrUndefined(this._extensionPackageLoadInfo.loadError) ||
                        !(this._extensionPackageLoadInfo.loadError instanceof Commerce.Extensibility.ExtensionLoadError)) {
                        return Commerce.StringResourceManager.getString(unknownFailureReasonResourceId);
                    }
                    var failureReasonResourceId = ExtensionPackageViewModel._extensionPackageFailureReasonToResourceStringMap[this._extensionPackageLoadInfo.loadError.failureReason];
                    failureReasonResourceId = Commerce.ObjectExtensions.isNullOrUndefined(failureReasonResourceId)
                        ? unknownFailureReasonResourceId
                        : failureReasonResourceId;
                    return Commerce.StringResourceManager.getString(failureReasonResourceId);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ExtensionPackageViewModel.prototype, "extensionPackageLoadSkipped", {
                get: function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(this._extensionPackageLoadInfo.skipReason);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ExtensionPackageViewModel.prototype, "extensionPackageLoadSkipReasonDisplayText", {
                get: function () {
                    var unknownSkipReasonResourceId = "string_7458";
                    if (Commerce.ObjectExtensions.isNullOrUndefined(this._extensionPackageLoadInfo.skipReason)) {
                        return Commerce.StringResourceManager.getString(unknownSkipReasonResourceId);
                    }
                    var skipReasonResourceId = ExtensionPackageViewModel._extensionPackageSkipReasonToResourceStringMap[this._extensionPackageLoadInfo.skipReason];
                    skipReasonResourceId = Commerce.ObjectExtensions.isNullOrUndefined(skipReasonResourceId)
                        ? unknownSkipReasonResourceId
                        : skipReasonResourceId;
                    if (this._extensionPackageLoadInfo.skipReason === Commerce.Extensibility.ExtensionPackageSkipReason.NotSupportedInCurrentRegion) {
                        return Commerce.StringExtensions.format(Commerce.StringResourceManager.getString(skipReasonResourceId), this.applicationContext.channelConfiguration.ChannelCountryRegionISOCode);
                    }
                    return Commerce.StringResourceManager.getString(skipReasonResourceId);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ExtensionPackageViewModel.prototype, "extensionsLoadFailureCount", {
                get: function () {
                    return this._extensionPackageLoadInfo.extensionLoadInfos.filter(function (extensionLoadInfo) {
                        return !Commerce.ObjectExtensions.isNullOrUndefined(extensionLoadInfo.loadError);
                    }).length;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ExtensionPackageViewModel.prototype, "extensionsLoadFailureCountDisplayText", {
                get: function () {
                    var extensionsLoadFailureCount = this.extensionsLoadFailureCount;
                    var message = (extensionsLoadFailureCount === 1 ? "Failed ({0} error message)" : "Failed ({0} error messages)");
                    return Commerce.StringExtensions.format(message, extensionsLoadFailureCount);
                },
                enumerable: true,
                configurable: true
            });
            ExtensionPackageViewModel.prototype.viewExtensionPackageDetails = function () {
                var options = {
                    extensionPackageLoadInfo: this._extensionPackageLoadInfo
                };
                Commerce.ViewModelAdapter.navigate("ExtensionPackageDetailsView", options);
            };
            ExtensionPackageViewModel._extensionPackageSkipReasonToResourceStringMap = (_a = {},
                _a[Commerce.Extensibility.ExtensionPackageSkipReason.NotSupportedInCurrentRegion] = "string_7459",
                _a[Commerce.Extensibility.ExtensionPackageSkipReason.NotSupportedInCurrentPosVersion] = "string_7460",
                _a[Commerce.Extensibility.ExtensionPackageSkipReason.NotEnabled] = "string_7489",
                _a);
            ExtensionPackageViewModel._extensionPackageFailureReasonToResourceStringMap = (_b = {},
                _b[Commerce.Extensibility.ExtensionPackageFailureReason.ManifestOrManifestComponentsNullOrUndefined] = "string_7462",
                _b[Commerce.Extensibility.ExtensionPackageFailureReason.InvalidExtensionPackageVersion] = "string_7463",
                _b[Commerce.Extensibility.ExtensionPackageFailureReason.InvalidMinimumPosVersion] = "string_7464",
                _b[Commerce.Extensibility.ExtensionPackageFailureReason.NameNullOrWhitespace] = "string_7465",
                _b[Commerce.Extensibility.ExtensionPackageFailureReason.PublisherNullOrWhitespace] = "string_7466",
                _b[Commerce.Extensibility.ExtensionPackageFailureReason.InvalidDependencyFormat] = "string_7486",
                _b[Commerce.Extensibility.ExtensionPackageFailureReason.DuplicateDependencyAlias] = "string_7487",
                _b[Commerce.Extensibility.ExtensionPackageFailureReason.ManifestFailedToLoad] = "string_7488",
                _b[Commerce.Extensibility.ExtensionPackageFailureReason.PublisherMismatch] = "string_7490",
                _b);
            return ExtensionPackageViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.ExtensionPackageViewModel = ExtensionPackageViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Extensiblity = Commerce.Extensibility;
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var ExtensionPackagesViewModel = (function (_super) {
            __extends(ExtensionPackagesViewModel, _super);
            function ExtensionPackagesViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this._extensionPackagesLoadInfo = ko.observable(null);
                _this.extensionPackageViewModels = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this._extensionPackagesLoadInfo()) ||
                        !Commerce.ObjectExtensions.isNullOrUndefined(_this._extensionPackagesLoadInfo().loadError) ||
                        !Commerce.ArrayExtensions.hasElements(_this._extensionPackagesLoadInfo().extensionPackageLoadInfos)) {
                        return [];
                    }
                    return _this._extensionPackagesLoadInfo().extensionPackageLoadInfos
                        .map(function (extensionPackageLoadInfo) {
                        return new ViewModels.ExtensionPackageViewModel(_this.context, extensionPackageLoadInfo);
                    });
                });
                _this.hasExtensionPackageViewModels = ko.computed(function () {
                    return Commerce.ArrayExtensions.hasElements(_this.extensionPackageViewModels());
                });
                _this._extensionPackagesLoadError = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this._extensionPackagesLoadInfo())) {
                        return null;
                    }
                    return _this._extensionPackagesLoadInfo().loadError;
                });
                _this.extensionPackagesLoadErrorMessage = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this._extensionPackagesLoadError())) {
                        return Commerce.StringExtensions.EMPTY;
                    }
                    var serializedError = Commerce.ErrorHelper.serializeError(_this._extensionPackagesLoadError());
                    return Commerce.StringExtensions.isNullOrWhitespace(serializedError) ? Commerce.StringResourceManager.getString("string_7435") : serializedError;
                });
                _this.extensionPackagesLoadSucceeded = ko.computed(function () {
                    return Commerce.ObjectExtensions.isNullOrUndefined(_this._extensionPackagesLoadError());
                });
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var getExtensionPackagesLoadInfoRequest = new Extensiblity.GetExtensionPackagesLoadInfoClientRequest(correlationId);
                var getExtensionPackagesLoadInfoAsyncResult = Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getExtensionPackagesLoadInfoRequest))
                    .done(function (extensionPackagesLoadInfo) {
                    if (!extensionPackagesLoadInfo.canceled) {
                        _this._extensionPackagesLoadInfo(extensionPackagesLoadInfo.data.extensionPackagesLoadInfo);
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
                _this._isBusyUntil(getExtensionPackagesLoadInfoAsyncResult);
                return _this;
            }
            return ExtensionPackagesViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.ExtensionPackagesViewModel = ExtensionPackagesViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var FulfillmentLineSortField;
        (function (FulfillmentLineSortField) {
            FulfillmentLineSortField[FulfillmentLineSortField["SalesId"] = 0] = "SalesId";
            FulfillmentLineSortField[FulfillmentLineSortField["CustomerName"] = 1] = "CustomerName";
            FulfillmentLineSortField[FulfillmentLineSortField["DeliveryDate"] = 2] = "DeliveryDate";
            FulfillmentLineSortField[FulfillmentLineSortField["FulfillmentStatus"] = 3] = "FulfillmentStatus";
        })(FulfillmentLineSortField || (FulfillmentLineSortField = {}));
        var FulfillmentLineDetailsMode;
        (function (FulfillmentLineDetailsMode) {
            FulfillmentLineDetailsMode[FulfillmentLineDetailsMode["Line"] = 0] = "Line";
            FulfillmentLineDetailsMode[FulfillmentLineDetailsMode["Order"] = 1] = "Order";
            FulfillmentLineDetailsMode[FulfillmentLineDetailsMode["Inventory"] = 2] = "Inventory";
        })(FulfillmentLineDetailsMode = ViewModels.FulfillmentLineDetailsMode || (ViewModels.FulfillmentLineDetailsMode = {}));
        var OrderOperation = Commerce.Proxy.Entities.CustomerOrderOperation;
        var FulfillmentLineViewModel = (function (_super) {
            __extends(FulfillmentLineViewModel, _super);
            function FulfillmentLineViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                _this.defaultPageSize = 80;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw Error("'Options' is required for FulfillmentLineViewModel.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.fulfillmentDeliveryType)) {
                    throw Error("options.FulfillmentLineView' is required for FulfillmentLineViewModel. The fulfillment delivery type is empty.");
                }
                _this.isAllowPartialOrderEditingFeatureEnabled =
                    Commerce.ApplicationSession.instance.featureStateContext.isFeatureEnabled(Commerce.Client.Entities.FeatureNameEnum.AllowPartialOrderEditingFeature);
                _this._isBusyFlag = ko.observable(false);
                _this._isBusyWhen(ko.computed(function () { return _this._isBusyFlag(); }));
                _this._selectedLines = ko.observableArray([]);
                _this.selectedLineForDetail = ko.observable(null);
                _this.fulfillmentLineDetailsMode = ko.observable(FulfillmentLineDetailsMode.Line);
                _this.searchCriteria = { DeliveryTypeValue: options.fulfillmentDeliveryType.Value };
                _this.setDefaultParameterOptions();
                _this.reloadFulfillmentLinesCallback = ko.observable(function () { return; });
                _this.setSelectedFulfillmentLines = function (fulfillmentLines) { return; };
                _this.isPhoneDetailVisible = ko.observable(false);
                _this.hasDisplayLines = ko.observable(false);
                _this.isHeaderVisible = ko.observable(true);
                _this.canViewLineDetails = ko.computed(function () {
                    var canViewLineDetails = false;
                    if (Commerce.ArrayExtensions.hasElements(_this._selectedLines()) && _this._selectedLines().length === 1) {
                        _this.selectedLineForDetail(_this._selectedLines()[0]);
                        canViewLineDetails = true;
                    }
                    return canViewLineDetails;
                });
                _this.selectedLineOrderRemaining = ko.computed(function () {
                    var orderRemaining = 0;
                    if (_this._selectedLines().length === 1) {
                        orderRemaining = _this.selectedLineForDetail().QuantityOrdered - _this.selectedLineForDetail().QuantityInvoiced;
                    }
                    return orderRemaining;
                });
                _this.numberOfSelectedLines = ko.computed(function () {
                    return _this._selectedLines().length;
                });
                _this.hasSelectedLines = ko.computed(function () {
                    return Commerce.ArrayExtensions.hasElements(_this._selectedLines());
                });
                _this.canShipLines = _this._getCanShipLinesComputation();
                _this.canPickUpLines = _this._getCanPickUpLinesComputation();
                _this.canAcceptLines = _this._getCanAcceptLinesComputation();
                _this.canReject = _this._getCanRejectComputation();
                _this.canDoPickingOperations = _this._getCanDoPickingComputation();
                _this.canDoPackingOperations = _this._getCanDoPackingComputation();
                _this.canEditLines = _this._getCanEditLinesComputation();
                _this.canViewPackingSlips = _this._getCanViewPackingSlips();
                _this.enablePackFlyout = ko.computed(function () {
                    return _this.canViewPackingSlips() || _this.canDoPackingOperations();
                });
                _this.packingSlipPreviewText = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.isPackingSlipDataSelected = ko.computed(function () {
                    return !Commerce.StringExtensions.isNullOrWhitespace(_this.packingSlipPreviewText());
                });
                _this.isPackingSlipPrintable = ko.observable(false);
                _this._selectedPackingSlips = [];
                _this._sortColumn = {};
                _this.sortMenuItems = ko.observableArray([
                    {
                        displayName: Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_13187"), _this._getSortColumnDisplayName(FulfillmentLineSortField.SalesId), Commerce.ViewModelAdapter.getResourceString("string_13184")),
                        buttonId: "btnSortByOrderNumberAsc",
                        axBubbleAttr: "fulfillmentLineView_sortByOrderNumberAsc",
                        clickEvent: function () { return _this.sortByOrderNumberAsc(); }
                    },
                    {
                        displayName: Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_13187"), _this._getSortColumnDisplayName(FulfillmentLineSortField.SalesId), Commerce.ViewModelAdapter.getResourceString("string_13185")),
                        buttonId: "btnSortByOrderNumberDesc",
                        axBubbleAttr: "fulfillmentLineView_sortByOrderNumberDesc",
                        clickEvent: function () { return _this.sortByOrderNumberDesc(); }
                    },
                    {
                        displayName: Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_13187"), _this._getSortColumnDisplayName(FulfillmentLineSortField.DeliveryDate), Commerce.ViewModelAdapter.getResourceString("string_13184")),
                        buttonId: "btnSortByDeliveryDateAsc",
                        axBubbleAttr: "fulfillmentLineView_sortByDeliveryDateAsc",
                        clickEvent: function () { return _this.sortByDeliveryDateAsc(); }
                    },
                    {
                        displayName: Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_13187"), _this._getSortColumnDisplayName(FulfillmentLineSortField.DeliveryDate), Commerce.ViewModelAdapter.getResourceString("string_13185")),
                        buttonId: "btnSortByDeliveryDateDesc",
                        axBubbleAttr: "fulfillmentLineView_sortByDeliveryDateDesc",
                        clickEvent: function () { return _this.sortByDeliveryDateDesc(); }
                    },
                    {
                        displayName: Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_13187"), _this._getSortColumnDisplayName(FulfillmentLineSortField.CustomerName), Commerce.ViewModelAdapter.getResourceString("string_13184")),
                        buttonId: "btnSortByCustomerNameAsc",
                        axBubbleAttr: "fulfillmentLineView_sortByCustomerNameAsc",
                        clickEvent: function () { return _this.sortByCustomerNameAsc(); }
                    },
                    {
                        displayName: Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_13187"), _this._getSortColumnDisplayName(FulfillmentLineSortField.CustomerName), Commerce.ViewModelAdapter.getResourceString("string_13185")),
                        buttonId: "btnSortByCustomerNameDesc",
                        axBubbleAttr: "fulfillmentLineView_sortByCustomerNameDesc",
                        clickEvent: function () { return _this.sortByCustomerNameDesc(); }
                    },
                    {
                        displayName: Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_13187"), _this._getSortColumnDisplayName(FulfillmentLineSortField.FulfillmentStatus), Commerce.ViewModelAdapter.getResourceString("string_13184")),
                        buttonId: "btnSortByFulfillmentStatusAsc",
                        axBubbleAttr: "fulfillmentLineView_sortByFulfillmentStatusAsc",
                        clickEvent: function () { return _this.sortByFulfillmentStatusAsc(); }
                    },
                    {
                        displayName: Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_13187"), _this._getSortColumnDisplayName(FulfillmentLineSortField.FulfillmentStatus), Commerce.ViewModelAdapter.getResourceString("string_13185")),
                        buttonId: "btnSortByFulfillmentStatusDesc",
                        axBubbleAttr: "fulfillmentLineView_sortByFulfillmentStatusDesc",
                        clickEvent: function () { return _this.sortByFulfillmentStatusDesc(); }
                    }
                ]);
                var customSortColumns = Commerce.ObjectExtensions.isNullOrUndefined(FulfillmentLineViewModel._viewExtensionsManager) ? [] :
                    FulfillmentLineViewModel._viewExtensionsManager.getFulfillmentLinesSortColumnsDefinitions();
                if (!Commerce.ObjectExtensions.isNullOrUndefined(customSortColumns) && Commerce.ArrayExtensions.hasElements(customSortColumns)) {
                    _this._addCustomSortColumns(customSortColumns);
                }
                _this._isExtensionCommandViewModelBusy = ko.observable(false);
                if (Commerce.ObjectExtensions.isNullOrUndefined(FulfillmentLineViewModel._viewExtensionsManager)) {
                    _this._extensionCommandViewModels = [];
                }
                else {
                    _this._extensionCommandViewModels = FulfillmentLineViewModel._viewExtensionsManager.getAppBarCommands()
                        .map(function (command) {
                        var commandVM = new ViewModels.CommandViewModel(command);
                        var commandState = {
                            fulfillmentDeliveryType: options.fulfillmentDeliveryType
                        };
                        commandVM.sendMessage("Initialize", commandState);
                        commandVM.addMessageHandler("RefreshFulfillmentLines", _this._refreshFulfillmentLines.bind(_this));
                        commandVM.addMessageHandler("SetSelectedFulfillmentLines", _this._setSelectedFulfillmentLines.bind(_this));
                        commandVM.addMessageHandler("IsProcessingChanged", function (isProcessing) {
                            if (isProcessing) {
                                _this._isExtensionCommandViewModelBusy(true);
                            }
                            else {
                                var isAnyCommandProcessing = _this._extensionCommandViewModels.some(function (vm) {
                                    return vm.isProcessing;
                                });
                                _this._isExtensionCommandViewModelBusy(isAnyCommandProcessing);
                            }
                        });
                        return commandVM;
                    });
                    _this._isBusyWhen(_this._isExtensionCommandViewModelBusy);
                    _this._subscribeExtensionsToChanges();
                }
                _this.fulfillmentLinesColumns = _this._getFulfillmentLinesColumns();
                return _this;
            }
            Object.defineProperty(FulfillmentLineViewModel.prototype, "extensionCommandViewModels", {
                get: function () {
                    return this._extensionCommandViewModels;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(FulfillmentLineViewModel, "viewExtensionManager", {
                set: function (manager) {
                    FulfillmentLineViewModel._viewExtensionsManager = manager;
                },
                enumerable: true,
                configurable: true
            });
            FulfillmentLineViewModel.prototype.clearPackingSlipSelection = function () {
                this.packingSlipPreviewText(Commerce.StringExtensions.EMPTY);
                this._packingSlipToPrint = null;
                this._selectedPackingSlipsData = null;
                this._selectedPackingSlips = [];
                this.isPackingSlipPrintable(false);
            };
            FulfillmentLineViewModel.prototype.shipLinesAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var fulfillmentLines = _this._selectedLines().map(function (lineForDisplay) {
                        return new Commerce.Proxy.Entities.FulfillmentLineClass(lineForDisplay);
                    });
                    var options = { fulfillmentLines: fulfillmentLines };
                    return asyncQueue.cancelOn(Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreShipFulfillmentLines, options));
                }).enqueue(function (triggerResult) {
                    if (!_this._canShipFulfillmentLines(triggerResult.data.fulfillmentLines)) {
                        return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.FULFILLMENT_LINES_UNAVAILABLE_TO_SHIP)]);
                    }
                    var fulfillmentLines = triggerResult.data.fulfillmentLines;
                    return asyncQueue.cancelOn(_this._shipFulfillmentLinesAsync(fulfillmentLines))
                        .map(function () {
                        return fulfillmentLines;
                    });
                }).enqueue(function (fulfillmentLines) {
                    var options = { fulfillmentLines: fulfillmentLines };
                    return asyncQueue.cancelOn(Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostShipFulfillmentLines, options));
                });
                return this._isBusyUntil(asyncQueue.run())
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                }).always(function () {
                    _this._refreshFulfillmentLines();
                });
            };
            FulfillmentLineViewModel.prototype.sortByOrderNumberAsc = function () {
                this._sortFulfillmentLines(this._getSortColumnFieldId(FulfillmentLineSortField.SalesId), false);
            };
            FulfillmentLineViewModel.prototype.sortByOrderNumberDesc = function () {
                return this._sortFulfillmentLines(this._getSortColumnFieldId(FulfillmentLineSortField.SalesId), true);
            };
            FulfillmentLineViewModel.prototype.sortByDeliveryDateAsc = function () {
                return this._sortFulfillmentLines(this._getSortColumnFieldId(FulfillmentLineSortField.DeliveryDate), false);
            };
            FulfillmentLineViewModel.prototype.sortByDeliveryDateDesc = function () {
                return this._sortFulfillmentLines(this._getSortColumnFieldId(FulfillmentLineSortField.DeliveryDate), true);
            };
            FulfillmentLineViewModel.prototype.sortByCustomerNameAsc = function () {
                return this._sortFulfillmentLines(this._getSortColumnFieldId(FulfillmentLineSortField.CustomerName), false);
            };
            FulfillmentLineViewModel.prototype.sortByCustomerNameDesc = function () {
                return this._sortFulfillmentLines(this._getSortColumnFieldId(FulfillmentLineSortField.CustomerName), true);
            };
            FulfillmentLineViewModel.prototype.sortByFulfillmentStatusAsc = function () {
                this._sortFulfillmentLines(this._getSortColumnFieldId(FulfillmentLineSortField.FulfillmentStatus), false);
            };
            FulfillmentLineViewModel.prototype.sortByFulfillmentStatusDesc = function () {
                return this._sortFulfillmentLines(this._getSortColumnFieldId(FulfillmentLineSortField.FulfillmentStatus), true);
            };
            FulfillmentLineViewModel.prototype.getFulfillmentLines = function (pageSize, skip) {
                var _this = this;
                this.setDefaultParameterOptions();
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.viewModelFulfillmentGetFulfillmentLinesStarted(correlationId);
                var request;
                if (this.isAllowPartialOrderEditingFeatureEnabled) {
                    request = new Commerce.Fulfillment.GetFulfillmentLineContextualOperationsMapsServiceRequest(correlationId, this.searchCriteria, this._sortColumn, pageSize, skip);
                }
                else {
                    request = new Commerce.Fulfillment.GetFulfillmentLinesServiceRequest(correlationId, this.searchCriteria, this._sortColumn, pageSize, skip);
                }
                return this._isBusyUntil(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request)))
                    .map(function (result) {
                    if (result.canceled) {
                        return [];
                    }
                    Commerce.RetailLogger.viewModelFulfillmentGetFulfillmentLinesCompleted(correlationId);
                    var fulfillmentLines;
                    var fulfillmentLineDisplays;
                    if (result.data instanceof Commerce.Fulfillment.GetFulfillmentLineContextualOperationsMapsServiceResponse) {
                        fulfillmentLines = result.data.maps.map(function (l) { return l.FulfillmentLine; });
                        fulfillmentLineDisplays = result.data.maps.map(function (line) { return new ViewModels.FulfillmentLineContextualOperationsDisplay(line); });
                    }
                    else {
                        fulfillmentLines = result.data.fulfillmentLines;
                        fulfillmentLineDisplays = fulfillmentLines.map(function (line) { return new ViewModels.FulfillmentLineForDisplay(line); });
                    }
                    _this._sendMessageToExtensions("FulfillmentLinesLoaded", { fulfillmentLines: fulfillmentLines, searchCriteria: _this.searchCriteria, pageSize: pageSize, skip: skip });
                    _this.hasDisplayLines(Commerce.ArrayExtensions.hasElements(fulfillmentLines));
                    return fulfillmentLineDisplays;
                }).fail(function (errors) {
                    Commerce.RetailLogger.viewModelFulfillmentGetFulfillmentLinesFailed(Commerce.ErrorHelper.getErrorMessages(errors));
                    Commerce.NotificationHandler.displayClientErrors(errors);
                }).always(function () {
                    _this._selectedLines([]);
                });
            };
            FulfillmentLineViewModel.prototype.onSelectionChanged = function (fulfillmentLines) {
                this._selectedLines(fulfillmentLines);
            };
            FulfillmentLineViewModel.prototype.selectFulfillmentLine = function (fulfillmentLine) {
                this._selectedLines([fulfillmentLine]);
            };
            FulfillmentLineViewModel.prototype.selectFulfillmentLinePhoneAsync = function (fulfillmentLine) {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(fulfillmentLine)) {
                    this._selectedLines([fulfillmentLine]);
                    this.toggleHeader();
                    this.isPhoneDetailVisible(true);
                    return this.productManager.getByIdAsync(fulfillmentLine.ProductId, 0)
                        .done(function (product) {
                        _this._selectedLines()[0].productPrimaryImageUrl = product.PrimaryImageUrl;
                    }).fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }
                return Commerce.VoidAsyncResult.createResolved();
            };
            FulfillmentLineViewModel.prototype.acceptLinesAsync = function () {
                var _this = this;
                this._isBusyFlag(true);
                var fulfillmentLines = this._selectedLines().map(function (line) {
                    return new Commerce.Proxy.Entities.FulfillmentLineParameterClass(line);
                });
                return this.fulfillmentManager.acceptLinesAsync(fulfillmentLines)
                    .done(function () {
                    Commerce.RetailLogger.viewModelFulfillmentAcceptLinesSucceeded(fulfillmentLines.length);
                    _this._refreshFulfillmentLines();
                })
                    .fail(function (errors) {
                    Commerce.RetailLogger.viewModelFulfillmentAcceptLinesFailed(Commerce.ErrorHelper.getErrorMessages(errors));
                    Commerce.NotificationHandler.displayClientErrors(errors);
                    _this._isBusyFlag(false);
                });
            };
            FulfillmentLineViewModel.prototype.pickUpLinesAsync = function () {
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                if (!Commerce.ArrayExtensions.hasElements(this._selectedLines())) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                var request = new Commerce.SalesOrders.PickUpCustomerOrderLinesClientRequest(correlationId, this._selectedLines());
                return this._isBusyUntil(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request)))
                    .done(function (result) {
                    if (!result.canceled) {
                        Commerce.RetailLogger.viewModelFulfillmentPickupLinesStarted(Commerce.Session.instance.cart.CartLines.length, correlationId);
                        var navigationOptions = {
                            navigationSource: "FulfillmentLineView",
                            correlationId: correlationId
                        };
                        Commerce.ViewModelAdapter.navigate("CartView", navigationOptions);
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            FulfillmentLineViewModel.prototype.filterFulfillmentLines = function () {
                var _this = this;
                var activity = new Commerce.Activities.GetFulfillmentLineSearchCriteriaActivity({
                    fulfillmentLineSearchCriteria: this.searchCriteria
                });
                activity.responseHandler = function (response) {
                    _this.searchCriteria = response.fulfillmentLineSearchCriteria;
                    _this.reloadFulfillmentLinesCallback()();
                    return Commerce.VoidAsyncResult.createResolved();
                };
                return activity.execute();
            };
            FulfillmentLineViewModel.prototype.viewPackingSlips = function () {
                var _this = this;
                if (!Commerce.ArrayExtensions.hasElements(this._selectedLines())) {
                    Commerce.NotificationHandler.displayErrorMessage("");
                    return Commerce.VoidAsyncResult.createRejected();
                }
                this._selectedPackingSlipsData = null;
                var salesId = this._selectedLines()[0].SalesId;
                var asyncQueue = new Commerce.AsyncQueue();
                var allPackingSlipsData = [];
                var packingSlips = [];
                asyncQueue.enqueue(function () {
                    return _this.fulfillmentManager.getPackingSlipsDataAsync(salesId)
                        .done(function (packingSlipsData) {
                        allPackingSlipsData = packingSlipsData;
                    });
                });
                asyncQueue.enqueue(function () {
                    if (!Commerce.ArrayExtensions.hasElements(allPackingSlipsData) || allPackingSlipsData.length > 1) {
                        var request = new Commerce.SelectPackingSlipIdClientRequest(salesId, allPackingSlipsData);
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                            .done(function (result) {
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(result) && !result.canceled) {
                                _this._selectedPackingSlipsData = result.data.result;
                            }
                        });
                    }
                    else {
                        _this._selectedPackingSlipsData = allPackingSlipsData[0];
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                });
                asyncQueue.enqueue(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this._selectedPackingSlipsData)
                        || Commerce.StringExtensions.isNullOrWhitespace(_this._selectedPackingSlipsData.PackingSlipId)) {
                        asyncQueue.cancel();
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                    else {
                        return _this.fulfillmentManager.getFulfillmentPackingSlipsByIdAsync(salesId, _this._selectedPackingSlipsData.PackingSlipId, Commerce.ApplicationContext.Instance.hardwareProfile.ProfileId)
                            .done(function (result) {
                            packingSlips = result;
                        });
                    }
                });
                asyncQueue.enqueue(function () {
                    _this.setPackingSlipToPreview(packingSlips);
                    return Commerce.VoidAsyncResult.createResolved();
                });
                return this._isBusyUntil(asyncQueue.run())
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            FulfillmentLineViewModel.prototype.editLinesAsync = function () {
                if (!this._canEditLines(this._selectedLines())) {
                    return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.ORDER_CANNOT_BE_EDITED)]);
                }
                var salesId = this._selectedLines()[0].SalesId;
                var request = new Commerce.EditCustomerOrderOperationRequest(Commerce.LoggerHelper.getNewCorrelationId(), salesId);
                return this._isBusyUntil(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request)))
                    .done(function (result) {
                    if (!result.canceled) {
                        Commerce.ViewModelAdapter.navigate("CartView");
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            FulfillmentLineViewModel.prototype.pickLinesAsync = function () {
                var _this = this;
                this._isBusyFlag(true);
                var fulfillmentLines = this._selectedLines().map(function (line) {
                    return new Commerce.Proxy.Entities.FulfillmentLineParameterClass(line);
                });
                return this.fulfillmentManager.pickLinesAsync(fulfillmentLines)
                    .done(function () {
                    Commerce.RetailLogger.viewModelFulfillmentPickingLinesSucceeded(fulfillmentLines.length);
                    _this._refreshFulfillmentLines();
                }).fail(function (errors) {
                    Commerce.RetailLogger.viewModelFulfillmentPickLinesFailed(Commerce.ErrorHelper.getErrorMessages(errors));
                    Commerce.NotificationHandler.displayClientErrors(errors);
                    _this._isBusyFlag(false);
                });
            };
            FulfillmentLineViewModel.prototype.rejectClickedAsync = function () {
                var _this = this;
                this._isBusyFlag(true);
                var rejectedLines = [];
                var asyncQueue = new Commerce.AsyncQueue();
                var product = null;
                this._selectedLines().forEach(function (line) {
                    var quantityToReject = line.QuantityOrdered - line.QuantityPicked - line.QuantityPacked - line.QuantityInvoiced;
                    var rejectedQuantity = 0;
                    if (quantityToReject <= 0) {
                        asyncQueue.cancel();
                        return;
                    }
                    else {
                        asyncQueue.enqueue(function () {
                            return _this.productManager.getByIdsAsync([line.ProductId], 0);
                        }).enqueue(function (products) {
                            product = Commerce.ArrayExtensions.firstOrUndefined(products);
                            if (quantityToReject === 1) {
                                rejectedQuantity = 1;
                                return Commerce.VoidAsyncResult.createResolved();
                            }
                            var productQuantityDetails = Object.create(null);
                            productQuantityDetails.salesId = line.SalesId;
                            productQuantityDetails.remainingQuantity = quantityToReject;
                            productQuantityDetails.productName = line.ItemName;
                            productQuantityDetails.itemId = line.ItemId;
                            if (product) {
                                productQuantityDetails.primaryImageUrl = product.PrimaryImageUrl;
                                productQuantityDetails.dimensions = Commerce.SimpleProductHelper.getVariantDescription(product);
                            }
                            var getFulfillmentLineQuantityDialogOptions = {
                                title: Commerce.ViewModelAdapter.getResourceString("string_13170"),
                                defaultQuantity: quantityToReject,
                                decimalPrecision: Commerce.UnitOfMeasureHelper.getDecimalPrecision(line.UnitOfMeasureSymbol),
                                productDetails: productQuantityDetails
                            };
                            var dialogRequest = new Commerce.GetFulfillmentLineQuantityDialogClientRequest(getFulfillmentLineQuantityDialogOptions);
                            return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(dialogRequest))
                                .done(function (result) {
                                if (result.canceled ||
                                    Commerce.ObjectExtensions.isNullOrUndefined(result.data) ||
                                    Commerce.ObjectExtensions.isNullOrUndefined(result.data.result)) {
                                    asyncQueue.cancel();
                                }
                                else {
                                    var quantity = result.data.result.value;
                                    if (!Commerce.StringExtensions.isEmptyOrWhitespace(quantity) &&
                                        !(Commerce.NumberExtensions.parseNumber(quantity) === 0) &&
                                        !(Commerce.NumberExtensions.parseNumber(quantity) > quantityToReject)) {
                                        rejectedQuantity = Commerce.NumberExtensions.parseNumber(quantity);
                                    }
                                    else if (Commerce.NumberExtensions.parseNumber(quantity) === 0) {
                                    }
                                    else {
                                        Commerce.NotificationHandler.displayErrorMessage(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_13154"), line.ItemName, quantityToReject));
                                    }
                                }
                            });
                        }).enqueue(function () {
                            if (rejectedQuantity === 0) {
                                return asyncQueue.cancelOn(Commerce.AsyncResult.createResolved({ canceled: false }));
                            }
                            var fulfillmentLineDetails = {
                                ReasonCodeLines: [],
                                Description: Commerce.StringExtensions.EMPTY,
                                ProductName: line.ItemName,
                                SalesId: line.SalesId,
                                ItemId: line.ItemId
                            };
                            if (product) {
                                fulfillmentLineDetails.Dimensions = Commerce.SimpleProductHelper.getVariantDescription(product);
                                fulfillmentLineDetails.PrimaryImageUrl = product.PrimaryImageUrl;
                            }
                            var retryQueue = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ fulfillmentLineDetails: fulfillmentLineDetails }, function (context) {
                                if (Commerce.ArrayExtensions.hasElements(context.fulfillmentLineDetails.ReasonCodeLines)) {
                                    var reasonCode = context.fulfillmentLineDetails.ReasonCodeLines[0];
                                    rejectedLines.push({
                                        SalesId: line.SalesId,
                                        SalesLineNumber: line.SalesLineNumber,
                                        RejectedQuantity: rejectedQuantity,
                                        InfoCodeId: reasonCode.ReasonCodeId,
                                        SubInfoCodeId: reasonCode.SubReasonCodeId
                                    });
                                }
                                else {
                                    rejectedLines.push({
                                        SalesId: line.SalesId,
                                        SalesLineNumber: line.SalesLineNumber,
                                        RejectedQuantity: rejectedQuantity,
                                        InfoCodeId: "",
                                        SubInfoCodeId: ""
                                    });
                                }
                                return retryQueue.cancelOn(Commerce.AsyncResult.createResolved({ canceled: false }));
                            }, Commerce.Proxy.Entities.ReasonCodeSourceType.OrderFulfillment);
                            return asyncQueue.cancelOn(retryQueue.run());
                        });
                    }
                });
                return asyncQueue.run().done(function (queueResult) {
                    if (!queueResult.canceled && Commerce.ArrayExtensions.hasElements(rejectedLines)) {
                        _this.fulfillmentManager.rejectLinesAsync(rejectedLines).done(function () {
                            _this._refreshFulfillmentLines();
                        }).fail(function (errors) {
                            Commerce.RetailLogger.viewModelFulfillmentRejectLinesFailed(Commerce.ErrorHelper.getErrorMessages(errors));
                            Commerce.NotificationHandler.displayClientErrors(errors);
                        }).always(function () {
                            _this._isBusyFlag(false);
                        });
                    }
                    else {
                        _this._refreshFulfillmentLines();
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                    _this._refreshFulfillmentLines();
                });
            };
            FulfillmentLineViewModel.prototype.printPickingListAsync = function () {
                var _this = this;
                var pickingListFulfillmentLine = this._selectedLines().map(function (line) {
                    return new Commerce.Proxy.Entities.FulfillmentLineParameterClass({ SalesId: line.SalesId, SalesLineNumber: line.SalesLineNumber });
                });
                var asyncResult = this.fulfillmentManager.getFulfillmentPickingListsAsync(pickingListFulfillmentLine, Commerce.ApplicationContext.Instance.hardwareProfile.ProfileId);
                return this._isBusyUntil(asyncResult)
                    .done(function (receipts) {
                    Commerce.RetailLogger.viewModelFulfillmentPickingListPrintSucceeded(pickingListFulfillmentLine.length);
                    if (!Commerce.ArrayExtensions.hasElements(receipts)) {
                        Commerce.NotificationHandler.displayErrorMessage(Commerce.ViewModelAdapter.getResourceString("string_13163"));
                    }
                    else {
                        _this.printReceiptsAsync(receipts);
                    }
                })
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            FulfillmentLineViewModel.prototype.printPackingSlipAsync = function () {
                var isReprint = true;
                var request = new Commerce.PrintPackingSlipClientRequest(this._selectedPackingSlipsData.PackingSlipId, isReprint, [this._packingSlipToPrint]);
                return this._isBusyUntil(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request)))
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            FulfillmentLineViewModel.prototype.toggleHeader = function () {
                this.isHeaderVisible(!this.isHeaderVisible());
            };
            FulfillmentLineViewModel.prototype.toggleFulfillmentLineDetailsMode = function (mode) {
                this.fulfillmentLineDetailsMode(mode);
            };
            FulfillmentLineViewModel.prototype.markAsPickedAsync = function () {
                var _this = this;
                this._isBusyFlag(true);
                var markAsPickedTitle = Commerce.ViewModelAdapter.getResourceString("string_13146");
                var CORRELATION_ID = Commerce.LoggerHelper.getNewCorrelationId();
                return this._getQuantities(function (line) {
                    if (line.QuantityOrdered - line.QuantityInvoiced - line.QuantityPacked - line.QuantityPicked === 1) {
                        return new Commerce.Proxy.Entities.FulfillmentLineParameterClass({
                            SalesId: line.SalesId,
                            SalesLineNumber: line.SalesLineNumber,
                            Quantity: 1
                        });
                    }
                    else {
                        return null;
                    }
                }, function (line) {
                    return line.QuantityOrdered - line.QuantityInvoiced - line.QuantityPacked - line.QuantityPicked;
                }, markAsPickedTitle).done(function (pickedFulfillmentLines) {
                    if (pickedFulfillmentLines.length > 0) {
                        var markAsPickedRequest = new Commerce.SalesOrders.MarkAsPickedServiceRequest(CORRELATION_ID, pickedFulfillmentLines);
                        Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(markAsPickedRequest))
                            .done(function (result) {
                            if (!result.canceled) {
                                Commerce.RetailLogger.viewModelFulfillmentMarkAsPickedSucceeded(pickedFulfillmentLines.length, CORRELATION_ID);
                                _this._refreshFulfillmentLines();
                            }
                        }).fail(function (errors) {
                            Commerce.NotificationHandler.displayClientErrors(errors);
                        }).always(function () {
                            _this._isBusyFlag(false);
                        });
                    }
                    else {
                        _this._isBusyFlag(false);
                    }
                });
            };
            FulfillmentLineViewModel.prototype.markAsPackedAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var fulfillmentLines = _this._selectedLines().map(function (lineForDisplay) {
                        return new Commerce.Proxy.Entities.FulfillmentLineClass(lineForDisplay);
                    });
                    var options = { fulfillmentLines: fulfillmentLines };
                    return asyncQueue.cancelOn(Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreMarkFulfillmentLinesAsPacked, options));
                }).enqueue(function (triggerResult) {
                    if (!_this._arePackingOperationsEnabled(triggerResult.data.fulfillmentLines)) {
                        return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.FULFILLMENT_LINES_UNAVAILABLE_TO_PACK)]);
                    }
                    var fulfillmentLines = triggerResult.data.fulfillmentLines;
                    return asyncQueue.cancelOn(_this._markFulfillmentLinesAsPackedAsync(fulfillmentLines))
                        .map(function () {
                        return fulfillmentLines;
                    });
                }).enqueue(function (fulfillmentLines) {
                    var options = { fulfillmentLines: fulfillmentLines };
                    return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostMarkFulfillmentLinesAsPacked, options);
                });
                return this._isBusyUntil(asyncQueue.run())
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                }).always(function () {
                    _this._refreshFulfillmentLines();
                });
            };
            FulfillmentLineViewModel.prototype.navigateToCustomerDetailsView = function () {
                Commerce.ViewModelAdapter.navigate("CustomerDetailsView", {
                    accountNumber: this.selectedLineForDetail().CustomerId,
                    destination: "FulfillmentLineView",
                    destinationOptions: null
                });
            };
            FulfillmentLineViewModel.prototype.onNavigateBack = function () {
                if (Commerce.Config.isPhone && this.isPhoneDetailVisible()) {
                    this.toggleHeader();
                    this.isPhoneDetailVisible(false);
                    return false;
                }
                return true;
            };
            Object.defineProperty(FulfillmentLineViewModel.prototype, "isBusyFlag", {
                get: function () {
                    return this._isBusyFlag;
                },
                enumerable: true,
                configurable: true
            });
            FulfillmentLineViewModel.prototype._getQuantities = function (skip, maxQuantityToProcess, title, secondaryTitle, pivotQuantity, customSelectedLines, convertLine) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(customSelectedLines)) {
                    customSelectedLines = this._selectedLines();
                }
                var fulfillmentLines = [];
                var asyncQueue = new Commerce.AsyncQueue();
                customSelectedLines.forEach(function (line) {
                    var generatedLine = null;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(skip)) {
                        generatedLine = skip(line);
                    }
                    if (generatedLine !== null) {
                        fulfillmentLines.push(generatedLine);
                        Commerce.RetailLogger.fulfillmentQuantityDialogPopUp(line.QuantityOrdered, line.QuantityInvoiced, line.QuantityPicked, line.QuantityPacked, 1, title);
                    }
                    else {
                        asyncQueue.enqueue(function () {
                            return _this.productManager.getByIdsAsync([line.ProductId], 0);
                        }).enqueue(function (products) {
                            var remainingQuantity = maxQuantityToProcess(line);
                            var productQuantityDetails = Object.create(null);
                            productQuantityDetails.salesId = line.SalesId;
                            productQuantityDetails.remainingQuantity = remainingQuantity;
                            productQuantityDetails.productName = line.ItemName;
                            productQuantityDetails.itemId = line.ItemId;
                            var product = Commerce.ArrayExtensions.firstOrUndefined(products);
                            if (product) {
                                productQuantityDetails.primaryImageUrl = product.PrimaryImageUrl;
                                productQuantityDetails.dimensions = Commerce.SimpleProductHelper.getVariantDescription(product);
                            }
                            var pivotQtyResult = !Commerce.ObjectExtensions.isNullOrUndefined(pivotQuantity) ? pivotQuantity(line) : 0;
                            var getFulfillmentLineQuantityDialogOptions = {
                                title: title,
                                defaultQuantity: pivotQtyResult > 0 ? pivotQtyResult : remainingQuantity,
                                decimalPrecision: Commerce.UnitOfMeasureHelper.getDecimalPrecision(line.UnitOfMeasureSymbol),
                                productDetails: productQuantityDetails,
                                secondaryTitle: secondaryTitle,
                                secondaryQuantity: pivotQtyResult
                            };
                            var dialogRequest = new Commerce.GetFulfillmentLineQuantityDialogClientRequest(getFulfillmentLineQuantityDialogOptions);
                            return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(dialogRequest))
                                .done(function (result) {
                                if (result.canceled ||
                                    Commerce.ObjectExtensions.isNullOrUndefined(result.data) ||
                                    Commerce.ObjectExtensions.isNullOrUndefined(result.data.result)) {
                                    asyncQueue.cancel();
                                }
                                else {
                                    var quantity = Commerce.NumberExtensions.parseNumber(result.data.result.value);
                                    if (quantity < 0 || quantity > remainingQuantity) {
                                        Commerce.NotificationHandler.displayErrorMessage(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_13154"), line.ItemName, remainingQuantity));
                                        asyncQueue.cancel();
                                    }
                                    else if (quantity > 0 && quantity <= remainingQuantity) {
                                        var fulfillmentLine = void 0;
                                        if (!Commerce.ObjectExtensions.isNullOrUndefined(convertLine)) {
                                            fulfillmentLine = convertLine(line, quantity);
                                        }
                                        else {
                                            fulfillmentLine = {
                                                SalesId: line.SalesId,
                                                SalesLineNumber: line.SalesLineNumber,
                                                Quantity: quantity
                                            };
                                        }
                                        fulfillmentLines.push(fulfillmentLine);
                                        Commerce.RetailLogger.fulfillmentQuantityDialogPopUp(line.QuantityOrdered, line.QuantityInvoiced, line.QuantityPicked, line.QuantityPacked, quantity, title);
                                    }
                                    else {
                                    }
                                }
                            });
                        });
                    }
                });
                return asyncQueue.run().map(function (queueResult) {
                    if (queueResult.canceled) {
                        return [];
                    }
                    else {
                        return fulfillmentLines;
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                    return [];
                });
            };
            FulfillmentLineViewModel.prototype._shipFulfillmentLinesAsync = function (fulfillmentLines) {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var shipLinesTitle = Commerce.ViewModelAdapter.getResourceString("string_13165");
                    return _this._getQuantities(function (line) {
                        if (line.QuantityOrdered - line.QuantityInvoiced === 1) {
                            return new Commerce.Proxy.Entities.ShipFulfillmentLineClass({
                                SalesId: line.SalesId,
                                SalesLineNumber: line.SalesLineNumber,
                                Quantity: 1,
                                ProductId: line.ProductId
                            });
                        }
                        else {
                            return null;
                        }
                    }, function (line) {
                        return line.QuantityOrdered - line.QuantityInvoiced;
                    }, shipLinesTitle, Commerce.ViewModelAdapter.getResourceString("string_13182"), function (line) { return line.QuantityPacked; }, fulfillmentLines, function (line, quantity) {
                        return new Commerce.Proxy.Entities.ShipFulfillmentLineClass({
                            SalesId: line.SalesId,
                            SalesLineNumber: line.SalesLineNumber,
                            Quantity: quantity,
                            ProductId: line.ProductId
                        });
                    }).map(function (shipFulfillmentLines) {
                        if (!Commerce.ArrayExtensions.hasElements(shipFulfillmentLines)) {
                            asyncQueue.cancel();
                        }
                        return shipFulfillmentLines;
                    });
                }).enqueue(function (shipFulfillmentLines) {
                    return _this.fulfillmentManager.shipLinesAsync(shipFulfillmentLines)
                        .done(function () {
                        Commerce.RetailLogger.viewModelFulfillmentShipLinesSucceeded(shipFulfillmentLines.length);
                    }).fail(function (errors) {
                        Commerce.RetailLogger.viewModelFulfillmentShipLinesFailed(Commerce.ErrorHelper.getErrorMessages(errors));
                    });
                });
                return asyncQueue.run();
            };
            FulfillmentLineViewModel.prototype._markFulfillmentLinesAsPackedAsync = function (fulfillmentLines) {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var markAsPackedTitle = Commerce.ViewModelAdapter.getResourceString("string_13149");
                    return _this._getQuantities(function (line) {
                        if (line.QuantityOrdered - line.QuantityInvoiced - line.QuantityPacked === 1) {
                            return new Commerce.Proxy.Entities.FulfillmentLineParameterClass({
                                SalesId: line.SalesId,
                                SalesLineNumber: line.SalesLineNumber,
                                Quantity: 1
                            });
                        }
                        else {
                            return null;
                        }
                    }, function (line) {
                        return line.QuantityOrdered - line.QuantityInvoiced - line.QuantityPacked;
                    }, markAsPackedTitle, Commerce.ViewModelAdapter.getResourceString("string_13181"), function (line) { return line.QuantityPicked; }, fulfillmentLines).map(function (fulfillmentLinesParameters) {
                        if (!Commerce.ArrayExtensions.hasElements(fulfillmentLinesParameters)) {
                            asyncQueue.cancel();
                        }
                        return fulfillmentLinesParameters;
                    });
                }).enqueue(function (fulfillmentLinesParameters) {
                    return _this.fulfillmentManager.markFulfillmentLinesAsPackedAsync(fulfillmentLinesParameters)
                        .map(function (returnedPackingSlipId) {
                        Commerce.RetailLogger.viewModelFulfillmentMarkAsPackedSucceeded(fulfillmentLinesParameters.length);
                        if (Commerce.StringExtensions.isNullOrWhitespace(returnedPackingSlipId)) {
                            asyncQueue.cancel();
                        }
                        return returnedPackingSlipId;
                    });
                }).enqueue(function (packingSlipId) {
                    var salesId = fulfillmentLines[0].SalesId;
                    return asyncQueue.cancelOn(_this._printPackingSlipByIdAsync(packingSlipId, salesId));
                });
                return asyncQueue.run();
            };
            FulfillmentLineViewModel.prototype._printPackingSlipByIdAsync = function (packingSlipId, salesId) {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return _this.fulfillmentManager.getFulfillmentPackingSlipsByIdAsync(salesId, packingSlipId, Commerce.ApplicationContext.Instance.hardwareProfile.ProfileId);
                }).enqueue(function (packingSlips) {
                    var request = new Commerce.PrintPackingSlipClientRequest(packingSlipId, false, packingSlips);
                    return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request)));
                });
                return asyncQueue.run();
            };
            FulfillmentLineViewModel.prototype._getSortColumnFieldId = function (sortField) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(sortField)) {
                    switch (sortField) {
                        case FulfillmentLineSortField.SalesId:
                            return "orderNumber";
                        case FulfillmentLineSortField.CustomerName:
                            return "customerName";
                        case FulfillmentLineSortField.DeliveryDate:
                            return "deliveryDate";
                        case FulfillmentLineSortField.FulfillmentStatus:
                            return "fulfillmentStatus";
                        default: break;
                    }
                }
                return Commerce.StringExtensions.EMPTY;
            };
            FulfillmentLineViewModel.prototype._sortFulfillmentLines = function (columnName, isDescending) {
                this._sortColumn = { ColumnName: columnName, IsDescending: isDescending };
                this._refreshFulfillmentLines();
            };
            FulfillmentLineViewModel.prototype._canEditLines = function (selectedLines) {
                var hasSelectedLines = Commerce.ArrayExtensions.hasElements(selectedLines);
                if (!hasSelectedLines) {
                    return false;
                }
                var expectedSalesId = selectedLines[0].SalesId;
                return selectedLines.every(function (selectedLine) {
                    var fulfillmentStatus = selectedLine.FulfillmentStatus;
                    var documentStatus = Commerce.Proxy.Entities.SalesOrderWrapper.convertDocumentToSalesStatus(selectedLine.DocumentStatusValue);
                    return expectedSalesId === selectedLine.SalesId
                        && documentStatus === Commerce.Proxy.Entities.SalesStatus.Created
                        && (Commerce.ExtensibleEnumerations.FulfillmentLineStatus.Pending.equals(fulfillmentStatus)
                            || Commerce.ExtensibleEnumerations.FulfillmentLineStatus.Accepted.equals(fulfillmentStatus)
                            || Commerce.ExtensibleEnumerations.FulfillmentLineStatus.Picking.equals(fulfillmentStatus));
                });
            };
            FulfillmentLineViewModel.prototype._getCanDoPickingComputation = function () {
                var _this = this;
                if (this.isAllowPartialOrderEditingFeatureEnabled) {
                    return ko.computed(function () {
                        var selectedLines = _this._selectedLines();
                        if (!Commerce.ArrayExtensions.hasElements(selectedLines)) {
                            return false;
                        }
                        return selectedLines.every(function (line) { return line instanceof ViewModels.FulfillmentLineContextualOperationsDisplay
                            && Commerce.ArrayExtensions.hasElement(line.applicableOperations, OrderOperation.PickFulfillmentLine); });
                    });
                }
                else {
                    return ko.computed(function () {
                        return _this.hasSelectedLines() && _this._selectedLines().every(function (line) {
                            return !Commerce.ExtensibleEnumerations.FulfillmentLineStatus.Pending.equals(line.FulfillmentStatus)
                                && !Commerce.ExtensibleEnumerations.FulfillmentLineStatus.Picked.equals(line.FulfillmentStatus)
                                && !Commerce.ExtensibleEnumerations.FulfillmentLineStatus.Packed.equals(line.FulfillmentStatus)
                                && !Commerce.ExtensibleEnumerations.FulfillmentLineStatus.Invoiced.equals(line.FulfillmentStatus);
                        });
                    });
                }
            };
            FulfillmentLineViewModel.prototype._getCanRejectComputation = function () {
                var _this = this;
                if (this.isAllowPartialOrderEditingFeatureEnabled) {
                    return ko.computed(function () {
                        var selectedLines = _this._selectedLines();
                        if (!Commerce.ArrayExtensions.hasElements(selectedLines)) {
                            return false;
                        }
                        return selectedLines.every(function (line) { return line instanceof ViewModels.FulfillmentLineContextualOperationsDisplay
                            && Commerce.ArrayExtensions.hasElement(line.applicableOperations, OrderOperation.RejectFulfillmentLine); });
                    });
                }
                else {
                    return ko.computed(function () {
                        return Commerce.ArrayExtensions.hasElements(_this._selectedLines()) && _this._selectedLines().every(function (line) {
                            return Commerce.ExtensibleEnumerations.FulfillmentLineStatus.Pending.equals(line.FulfillmentStatus) ||
                                Commerce.ExtensibleEnumerations.FulfillmentLineStatus.Accepted.equals(line.FulfillmentStatus) ||
                                Commerce.ExtensibleEnumerations.FulfillmentLineStatus.Picking.equals(line.FulfillmentStatus) ||
                                Commerce.ExtensibleEnumerations.FulfillmentLineStatus.PartiallyPicked.equals(line.FulfillmentStatus) ||
                                (Commerce.ExtensibleEnumerations.FulfillmentLineStatus.PartiallyPacked.equals(line.FulfillmentStatus) &&
                                    line.QuantityPicked + line.QuantityPacked < line.QuantityOrdered) ||
                                (Commerce.ExtensibleEnumerations.FulfillmentLineStatus.PartiallyInvoiced.equals(line.FulfillmentStatus) &&
                                    line.QuantityPicked + line.QuantityPacked + line.QuantityInvoiced < line.QuantityOrdered);
                        });
                    });
                }
            };
            FulfillmentLineViewModel.prototype._getCanShipLinesComputation = function () {
                var _this = this;
                if (this.isAllowPartialOrderEditingFeatureEnabled) {
                    return ko.computed(function () {
                        var selectedLines = _this._selectedLines();
                        if (!Commerce.ArrayExtensions.hasElements(selectedLines)) {
                            return false;
                        }
                        var firstSalesId = selectedLines[0].SalesId;
                        return selectedLines.every(function (line) { return line instanceof ViewModels.FulfillmentLineContextualOperationsDisplay
                            && line.SalesId === firstSalesId
                            && Commerce.ArrayExtensions.hasElement(line.applicableOperations, OrderOperation.ShipFulfillmentLine); });
                    });
                }
                else {
                    return ko.computed(function () {
                        return _this._canShipFulfillmentLines(_this._selectedLines());
                    }, this);
                }
            };
            FulfillmentLineViewModel.prototype._getCanDoPackingComputation = function () {
                var _this = this;
                if (this.isAllowPartialOrderEditingFeatureEnabled) {
                    return ko.computed(function () {
                        var selectedLines = _this._selectedLines();
                        if (!Commerce.ArrayExtensions.hasElements(selectedLines)) {
                            return false;
                        }
                        var firstSalesId = selectedLines[0].SalesId;
                        var firstDeliveryMode = selectedLines[0].DeliveryModeCode;
                        return selectedLines.every(function (line) { return line instanceof ViewModels.FulfillmentLineContextualOperationsDisplay
                            && line.SalesId === firstSalesId
                            && line.DeliveryModeCode === firstDeliveryMode
                            && Commerce.ArrayExtensions.hasElement(line.applicableOperations, OrderOperation.PackFulfillmentLine); });
                    });
                }
                else {
                    return ko.computed(function () {
                        return _this._arePackingOperationsEnabled(_this._selectedLines());
                    });
                }
            };
            FulfillmentLineViewModel.prototype._getCanAcceptLinesComputation = function () {
                var _this = this;
                if (this.isAllowPartialOrderEditingFeatureEnabled) {
                    return ko.computed(function () {
                        var selectedLines = _this._selectedLines();
                        if (!Commerce.ArrayExtensions.hasElements(selectedLines)) {
                            return false;
                        }
                        return selectedLines.every(function (line) { return line instanceof ViewModels.FulfillmentLineContextualOperationsDisplay
                            && Commerce.ArrayExtensions.hasElement(line.applicableOperations, OrderOperation.AcceptFulfillmentLine); });
                    });
                }
                else {
                    return ko.computed(function () {
                        return Commerce.ArrayExtensions.hasElements(_this._selectedLines()) && _this._selectedLines().every(function (line) {
                            return Commerce.ExtensibleEnumerations.FulfillmentLineStatus.Pending.equals(line.FulfillmentStatus);
                        });
                    });
                }
            };
            FulfillmentLineViewModel.prototype._getCanPickUpLinesComputation = function () {
                var _this = this;
                if (this.isAllowPartialOrderEditingFeatureEnabled) {
                    return ko.computed(function () {
                        var selectedLines = _this._selectedLines();
                        if (!Commerce.ArrayExtensions.hasElements(selectedLines)) {
                            return false;
                        }
                        var firstSalesId = selectedLines[0].SalesId;
                        return selectedLines
                            .every(function (line) { return line instanceof ViewModels.FulfillmentLineContextualOperationsDisplay
                            && line.SalesId === firstSalesId
                            && Commerce.ArrayExtensions.hasElement(line.applicableOperations, OrderOperation.PickUpFromStore); });
                    });
                }
                else {
                    return ko.computed(function () {
                        return Commerce.ArrayExtensions.hasElements(_this._selectedLines()) && _this._selectedLines().every(function (line) {
                            return _this._selectedLines()[0].SalesId === line.SalesId && line.FulfillmentDeliveryType &&
                                Commerce.ExtensibleEnumerations.FulfillmentLineDeliveryType.StorePickup.equals(line.FulfillmentDeliveryType);
                        });
                    });
                }
            };
            FulfillmentLineViewModel.prototype._getCanEditLinesComputation = function () {
                var _this = this;
                if (this.isAllowPartialOrderEditingFeatureEnabled) {
                    return ko.computed(function () {
                        var selectedLines = _this._selectedLines();
                        if (!Commerce.ArrayExtensions.hasElements(selectedLines)) {
                            return false;
                        }
                        var firstSalesId = selectedLines[0].SalesId;
                        return selectedLines.every(function (line) { return line instanceof ViewModels.FulfillmentLineContextualOperationsDisplay
                            && line.SalesId === firstSalesId
                            && Commerce.ArrayExtensions.hasElement(line.applicableOperations, OrderOperation.Edit); });
                    });
                }
                else {
                    return ko.computed(function () {
                        return _this._canEditLines(_this._selectedLines());
                    });
                }
            };
            FulfillmentLineViewModel.prototype._getCanViewPackingSlips = function () {
                var _this = this;
                return ko.computed(function () {
                    if (!_this.hasSelectedLines()) {
                        return false;
                    }
                    var salesId = _this._selectedLines()[0].SalesId;
                    return _this._selectedLines().every(function (line) {
                        return line.SalesId === salesId
                            && !Commerce.ExtensibleEnumerations.FulfillmentLineStatus.Pending.equals(line.FulfillmentStatus)
                            && !Commerce.ExtensibleEnumerations.FulfillmentLineStatus.Accepted.equals(line.FulfillmentStatus)
                            && !Commerce.ExtensibleEnumerations.FulfillmentLineStatus.Picked.equals(line.FulfillmentStatus)
                            && !Commerce.ExtensibleEnumerations.FulfillmentLineStatus.PartiallyPicked.equals(line.FulfillmentStatus);
                    });
                });
            };
            FulfillmentLineViewModel.prototype.setDefaultParameterOptions = function () {
                if (Commerce.StringExtensions.isNullOrWhitespace(this.searchCriteria.WarehouseId)) {
                    this.searchCriteria.WarehouseId = Commerce.ApplicationContext.Instance.channelConfiguration.InventLocation;
                }
                if (!Commerce.ArrayExtensions.hasElements(this.searchCriteria.FulfillmentStatusValues)) {
                    this.searchCriteria.FulfillmentStatusValues = [];
                }
                if (Commerce.NumberExtensions.isNullNaNOrZero(this.searchCriteria.DeliveryTypeValue)) {
                    this.searchCriteria.DeliveryTypeValue = Commerce.Client.Entities.FulfillmentLineDeliveryType.All.Value;
                }
            };
            FulfillmentLineViewModel.prototype.printReceiptsAsync = function (receipts) {
                var activity = new Commerce.Activities.PrintReceiptActivity({
                    receipts: receipts,
                    notifyOnNoPrintableReceipts: true
                });
                return activity.execute();
            };
            FulfillmentLineViewModel.prototype.setPackingSlipToPreview = function (packingSlips) {
                if (Commerce.ArrayExtensions.hasElements(packingSlips)) {
                    this._selectedPackingSlips = packingSlips;
                    var packingSlipToPreview = packingSlips[0];
                    this._packingSlipToPrint = Commerce.ArrayExtensions.firstOrUndefined(packingSlips, function (packingSlip) {
                        return Commerce.ArrayExtensions.hasElements(packingSlip.Printers);
                    });
                    this.packingSlipPreviewText(Commerce.ReceiptHelper.convertToHtml(packingSlipToPreview.Header + packingSlipToPreview.Body + packingSlipToPreview.Footer));
                    this.isPackingSlipPrintable(Commerce.ReceiptHelper.canReceiptBePrinted(this._packingSlipToPrint));
                }
                else {
                    this._selectedPackingSlips = [];
                    var errors = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.RECEIPT_NOT_AVAILABLE_FOR_ORDER)];
                    Commerce.NotificationHandler.displayClientErrors(errors, "string_4127");
                }
            };
            FulfillmentLineViewModel.prototype._canShipFulfillmentLines = function (fulfillmentLines) {
                if (!Commerce.ArrayExtensions.hasElements(fulfillmentLines)) {
                    return false;
                }
                return fulfillmentLines.every(function (line) {
                    return fulfillmentLines[0].SalesId === line.SalesId
                        && Commerce.Client.Entities.FulfillmentLineDeliveryType.StoreShipping.equals(line.FulfillmentDeliveryType)
                        && !(Commerce.Client.Entities.FulfillmentLineStatus.Invoiced.equals(line.FulfillmentStatus) ||
                            Commerce.Client.Entities.FulfillmentLineStatus.Pending.equals(line.FulfillmentStatus));
                });
            };
            FulfillmentLineViewModel.prototype._subscribeExtensionsToChanges = function () {
                var _this = this;
                this._selectedLines.subscribe(function (lines) {
                    if (Commerce.ArrayExtensions.hasElements(lines)) {
                        _this._sendMessageToExtensions("FulfillmentLinesSelected", { fulfillmentLines: lines });
                    }
                    else {
                        _this._sendMessageToExtensions("FulfillmentLinesSelectionCleared", undefined);
                    }
                });
                this.isPackingSlipDataSelected.subscribe(function (isSelected) {
                    if (isSelected) {
                        _this._sendMessageToExtensions("PackingSlipSelected", { packingSlipData: _this._selectedPackingSlipsData, packingSlips: _this._selectedPackingSlips });
                    }
                    else {
                        _this._sendMessageToExtensions("PackingSlipSelectionCleared", undefined);
                    }
                });
            };
            FulfillmentLineViewModel.prototype._sendMessageToExtensions = function (messageType, messageData) {
                this.extensionCommandViewModels.forEach(function (vm) {
                    vm.sendMessage(messageType, messageData);
                });
            };
            FulfillmentLineViewModel.prototype._refreshFulfillmentLines = function () {
                if (this.isPhoneDetailVisible()) {
                    this.toggleHeader();
                    this.isPhoneDetailVisible(false);
                }
                this._selectedLines.removeAll();
                this.reloadFulfillmentLinesCallback()();
            };
            FulfillmentLineViewModel.prototype._getSortColumnDisplayName = function (sortField) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(sortField)) {
                    switch (sortField) {
                        case FulfillmentLineSortField.SalesId:
                            return Commerce.ViewModelAdapter.getResourceString("string_4588");
                        case FulfillmentLineSortField.CustomerName:
                            return Commerce.ViewModelAdapter.getResourceString("string_13111");
                        case FulfillmentLineSortField.DeliveryDate:
                            return Commerce.ViewModelAdapter.getResourceString("string_13159");
                        case FulfillmentLineSortField.FulfillmentStatus:
                            return Commerce.ViewModelAdapter.getResourceString("string_13112");
                        default: break;
                    }
                }
                return Commerce.StringExtensions.EMPTY;
            };
            FulfillmentLineViewModel.prototype._arePackingOperationsEnabled = function (lines) {
                if (!Commerce.ArrayExtensions.hasElements(lines)) {
                    return false;
                }
                var salesId = lines[0].SalesId;
                var deliveryModeCode = lines[0].DeliveryModeCode;
                return lines.every(function (line) {
                    return line.SalesId === salesId
                        && line.DeliveryModeCode === deliveryModeCode
                        && !Commerce.ExtensibleEnumerations.FulfillmentLineStatus.Pending.equals(line.FulfillmentStatus)
                        && !Commerce.ExtensibleEnumerations.FulfillmentLineStatus.Packed.equals(line.FulfillmentStatus)
                        && !Commerce.ExtensibleEnumerations.FulfillmentLineStatus.Invoiced.equals(line.FulfillmentStatus);
                });
            };
            FulfillmentLineViewModel.prototype._setSelectedFulfillmentLines = function (setSelectedFulfillmentLinesData) {
                this.setSelectedFulfillmentLines(setSelectedFulfillmentLinesData.fulfillmentLines);
            };
            FulfillmentLineViewModel.prototype._getFulfillmentLinesColumns = function () {
                var customColumns = Commerce.ObjectExtensions.isNullOrUndefined(FulfillmentLineViewModel._viewExtensionsManager) ?
                    [] :
                    FulfillmentLineViewModel._viewExtensionsManager.getFulfillmentLinesColumns();
                var defaultColumns = [
                    {
                        titleResx: "string_4588",
                        ratio: 10,
                        collapseOrder: 3,
                        minWidth: 120,
                        field: "SalesId"
                    },
                    {
                        titleResx: "string_13107",
                        ratio: 10,
                        collapseOrder: 8,
                        minWidth: 120,
                        field: "ItemId"
                    },
                    {
                        titleResx: "string_13108",
                        ratio: 14,
                        collapseOrder: 2,
                        minWidth: 200,
                        field: "ItemName"
                    },
                    {
                        titleResx: "string_13173",
                        ratio: 14,
                        collapseOrder: 4,
                        minWidth: 200,
                        field: "ProductVariant"
                    },
                    {
                        titleResx: "string_13109",
                        ratio: 10,
                        collapseOrder: 7,
                        minWidth: 120,
                        field: "QuantityOrdered",
                        isRightAligned: true
                    },
                    {
                        titleResx: "string_4591",
                        ratio: 10,
                        collapseOrder: 5,
                        minWidth: 120,
                        field: "CreatedDate",
                        converter: "Commerce.Core.Converter.DateWithoutTime"
                    },
                    {
                        titleResx: "string_13159",
                        ratio: 10,
                        collapseOrder: 6,
                        minWidth: 120,
                        field: "RequestedDeliveryDate",
                        converter: "Commerce.Core.Converter.DateWithoutTimeIgnoreTimezone"
                    },
                    {
                        titleResx: "string_13111",
                        ratio: 12,
                        collapseOrder: 1,
                        minWidth: 140,
                        field: "CustomerName"
                    },
                    {
                        titleResx: "string_13112",
                        ratio: 10,
                        collapseOrder: 9,
                        minWidth: 120,
                        field: "FulfillmentStatusTranslation"
                    }
                ];
                return Commerce.ArrayExtensions.hasElements(customColumns) ? customColumns : defaultColumns;
            };
            FulfillmentLineViewModel.prototype._sortByCustomSortColumnAsc = function (sortColumnFieldId) {
                this._sortFulfillmentLines(sortColumnFieldId, false);
            };
            FulfillmentLineViewModel.prototype._sortByCustomSortColumnDesc = function (sortColumnFieldId) {
                return this._sortFulfillmentLines(sortColumnFieldId, true);
            };
            FulfillmentLineViewModel.prototype._addCustomSortColumns = function (sortColumns) {
                var _this = this;
                var BTNSORTBY_STRING = "btnSortBy";
                var FULFILLMENTLINEVIEW_SORTBY_STRING = "fulfillmentLineView_sortBy";
                var ASC_STRING = "Asc";
                var DESC_STRING = "Desc";
                sortColumns.forEach(function (column) {
                    var fulfillmentLineSortMenuItemAsc = {
                        displayName: Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_13187"), column.label(), Commerce.ViewModelAdapter.getResourceString("string_13184")),
                        buttonId: BTNSORTBY_STRING + column.columnName() + ASC_STRING,
                        axBubbleAttr: FULFILLMENTLINEVIEW_SORTBY_STRING + column.id + ASC_STRING,
                        clickEvent: function () { return _this._sortByCustomSortColumnAsc(column.columnName()); }
                    };
                    var fulfillmentLineSortMenuItemDesc = {
                        displayName: Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_13187"), column.label(), Commerce.ViewModelAdapter.getResourceString("string_13185")),
                        buttonId: BTNSORTBY_STRING + column.columnName() + DESC_STRING,
                        axBubbleAttr: FULFILLMENTLINEVIEW_SORTBY_STRING + column.id + DESC_STRING,
                        clickEvent: function () { return _this._sortByCustomSortColumnDesc(column.columnName()); }
                    };
                    _this.sortMenuItems.push(fulfillmentLineSortMenuItemAsc);
                    _this.sortMenuItems.push(fulfillmentLineSortMenuItemDesc);
                });
            };
            return FulfillmentLineViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.FulfillmentLineViewModel = FulfillmentLineViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var SourceDestinationChoiceType;
        (function (SourceDestinationChoiceType) {
            SourceDestinationChoiceType[SourceDestinationChoiceType["NA"] = 1] = "NA";
            SourceDestinationChoiceType[SourceDestinationChoiceType["ContextShift"] = 2] = "ContextShift";
            SourceDestinationChoiceType[SourceDestinationChoiceType["ContextStoreSafe"] = 3] = "ContextStoreSafe";
            SourceDestinationChoiceType[SourceDestinationChoiceType["AnyShift"] = 4] = "AnyShift";
            SourceDestinationChoiceType[SourceDestinationChoiceType["AnyStoreSafe"] = 5] = "AnyStoreSafe";
            SourceDestinationChoiceType[SourceDestinationChoiceType["AnotherStoreSafeOrAnyShift"] = 6] = "AnotherStoreSafeOrAnyShift";
            SourceDestinationChoiceType[SourceDestinationChoiceType["AnyStoreSafeOrAnyShift"] = 7] = "AnyStoreSafeOrAnyShift";
        })(SourceDestinationChoiceType = ViewModels.SourceDestinationChoiceType || (ViewModels.SourceDestinationChoiceType = {}));
        var GetCashManagementTransactionDetailsViewModel = (function (_super) {
            __extends(GetCashManagementTransactionDetailsViewModel, _super);
            function GetCashManagementTransactionDetailsViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw new Error("Invalid options for GetCashManagementTransactionDetailsViewModel constructor: options cannot be null or undefined.");
                }
                else if (options.transactionContext !== Commerce.Proxy.Entities.CashManagementTransactionContext.Shift
                    && options.transactionContext !== Commerce.Proxy.Entities.CashManagementTransactionContext.Safe) {
                    throw new Error("Invalid options for GetCashManagementTransactionDetailsViewModel constructor: "
                        + " transactionContext is not a supported transaction type.");
                }
                else if (!Commerce.ExtensibleEnumerations.ExtensibleTransactionType.FloatEntry.equals(options.transactionType)
                    && !Commerce.ExtensibleEnumerations.ExtensibleTransactionType.StartingAmount.equals(options.transactionType)
                    && !Commerce.ExtensibleEnumerations.ExtensibleTransactionType.RemoveTender.equals(options.transactionType)
                    && !Commerce.ExtensibleEnumerations.ExtensibleTransactionType.SafeDrop.equals(options.transactionType)
                    && !Commerce.ExtensibleEnumerations.ExtensibleTransactionType.BankDrop.equals(options.transactionType)) {
                    throw new Error("Invalid options for GetCashManagementTransactionDetailsViewModel constructor: transactionType is not a supported transaction type.");
                }
                else if (options.transactionContext === Commerce.Proxy.Entities.CashManagementTransactionContext.Safe
                    && Commerce.ObjectExtensions.isNullOrUndefined(options.contextStoreSafe)) {
                    throw new Error("Invalid options for GetCashManagementTransactionDetailsViewModel constructor: " +
                        "contextStoreSafe can't be null when transactionContext is Safe.");
                }
                else if (options.transactionContext === Commerce.Proxy.Entities.CashManagementTransactionContext.Safe
                    && Commerce.ExtensibleEnumerations.ExtensibleTransactionType.SafeDrop.equals(options.transactionType)) {
                    throw new Error("Invalid options for GetCashManagementTransactionDetailsViewModel constructor: " +
                        "Safe drop transaction is not supported in context of a safe.");
                }
                else if (options.createFromAvailableEntry && Commerce.ObjectExtensions.isNullOrUndefined(options.selectedAvailableEntry)) {
                    throw new Error("Invalid options for GetCashManagementTransactionDetailsViewModel constructor: " +
                        "selectedAvailableEntry can't be null when createFromAvailableEntry is true.");
                }
                _this._transactionContext = options.transactionContext;
                _this._transactionType = options.transactionType;
                _this._contextShift = options.contextShift || Commerce.Session.instance.Shift;
                _this._contextStoreSafe = options.contextStoreSafe;
                _this._createFromAvailableEntry = options.createFromAvailableEntry;
                _this._selectedAvailableEntry = options.selectedAvailableEntry;
                _this._availableStoreSafes = options.availableStoreSafes;
                _this._availableShifts = options.availableShifts;
                _this._setSourceAndDestinationType();
                _this.amount = options.createFromAvailableEntry ? options.selectedAvailableEntry.TotalAmount : options.amount;
                _this.selectedSourceShift = ko.observable(null);
                _this.selectedSourceStoreSafe = ko.observable(null);
                _this.selectedDestinationShift = ko.observable(null);
                _this.selectedDestinationStoreSafe = ko.observable(null);
                _this.notes = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.isSourceVisible = ko.computed(function () {
                    return _this._sourceType !== SourceDestinationChoiceType.NA;
                }, _this);
                _this.isSourceLocked = ko.computed(function () {
                    return _this._createFromAvailableEntry
                        || _this._sourceType === SourceDestinationChoiceType.ContextShift
                        || _this._sourceType === SourceDestinationChoiceType.ContextStoreSafe;
                }, _this);
                _this.sourcePrimaryText = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedSourceShift())
                        && Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedSourceStoreSafe())) {
                        return Commerce.ViewModelAdapter.getResourceString("string_30108");
                    }
                    else if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedSourceShift())) {
                        return _this.selectedSourceShift().ShiftTerminalId;
                    }
                    else if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedSourceStoreSafe())) {
                        return _this.selectedSourceStoreSafe().Name;
                    }
                    else {
                        throw new Error("Only one of the store safe or shift can be selected at a time");
                    }
                }, _this);
                _this.sourceSecondaryText = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedSourceShift())
                        && Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedSourceStoreSafe())) {
                        return Commerce.StringExtensions.EMPTY;
                    }
                    else if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedSourceShift())) {
                        return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_30110"), _this.selectedSourceShift().ShiftId.toString());
                    }
                    else if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedSourceStoreSafe())) {
                        return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_30111"), _this.selectedSourceStoreSafe().SafeNumber);
                    }
                    else {
                        throw new Error("Only one of the store safe or shift can be selected at a time");
                    }
                }, _this);
                _this.sourceType = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedSourceShift())
                        && Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedSourceStoreSafe())) {
                        if (_this._sourceType === SourceDestinationChoiceType.AnyStoreSafe) {
                            return Commerce.Proxy.Entities.CashManagementTransactionContext.Safe;
                        }
                        else {
                            return Commerce.Proxy.Entities.CashManagementTransactionContext.Shift;
                        }
                    }
                    else if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedSourceShift())) {
                        return Commerce.Proxy.Entities.CashManagementTransactionContext.Shift;
                    }
                    else if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedSourceStoreSafe())) {
                        return Commerce.Proxy.Entities.CashManagementTransactionContext.Safe;
                    }
                    else {
                        return Commerce.Proxy.Entities.CashManagementTransactionContext.Unknown;
                    }
                }, _this);
                _this.isDestinationVisible = ko.computed(function () {
                    return _this._destinationType !== SourceDestinationChoiceType.NA;
                }, _this);
                _this.isDestinationLocked = ko.computed(function () {
                    return _this._createFromAvailableEntry
                        || _this._destinationType === SourceDestinationChoiceType.ContextShift
                        || _this._destinationType === SourceDestinationChoiceType.ContextStoreSafe;
                }, _this);
                _this.destinationPrimaryText = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedDestinationShift())
                        && Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedDestinationStoreSafe())) {
                        return Commerce.ViewModelAdapter.getResourceString("string_30109");
                    }
                    else if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedDestinationShift())) {
                        return _this.selectedDestinationShift().ShiftTerminalId;
                    }
                    else if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedDestinationStoreSafe())) {
                        return _this.selectedDestinationStoreSafe().Name;
                    }
                    else {
                        throw new Error("Only one of the store safe or shift can be selected at a time");
                    }
                }, _this);
                _this.destinationSecondaryText = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedDestinationShift())
                        && Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedDestinationStoreSafe())) {
                        return Commerce.StringExtensions.EMPTY;
                    }
                    else if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedDestinationShift())) {
                        return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_30110"), _this.selectedDestinationShift().ShiftId.toString());
                    }
                    else if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedDestinationStoreSafe())) {
                        return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_30111"), _this.selectedDestinationStoreSafe().SafeNumber);
                    }
                    else {
                        throw new Error("Only one of the store safe or shift can be selected at a time");
                    }
                }, _this);
                _this.destinationType = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedDestinationShift())
                        && Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedDestinationStoreSafe())) {
                        if (_this._destinationType === SourceDestinationChoiceType.AnyStoreSafe) {
                            return Commerce.Proxy.Entities.CashManagementTransactionContext.Safe;
                        }
                        else {
                            return Commerce.Proxy.Entities.CashManagementTransactionContext.Shift;
                        }
                    }
                    else if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedDestinationShift())) {
                        return Commerce.Proxy.Entities.CashManagementTransactionContext.Shift;
                    }
                    else if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedDestinationStoreSafe())) {
                        return Commerce.Proxy.Entities.CashManagementTransactionContext.Safe;
                    }
                    else {
                        return Commerce.Proxy.Entities.CashManagementTransactionContext.Unknown;
                    }
                }, _this);
                _this._initializeSource();
                _this._initializeDestination();
                _this.disableOKButton = ko.computed(function () {
                    return (_this.isSourceVisible()
                        && Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedSourceShift())
                        && Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedSourceStoreSafe()))
                        || (_this.isDestinationVisible()
                            && Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedDestinationShift())
                            && Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedDestinationStoreSafe()));
                }, _this);
                _this.showNotes = ko.computed(function () {
                    return Commerce.ExtensibleEnumerations.ExtensibleTransactionType.FloatEntry.equals(_this._transactionType)
                        || Commerce.ExtensibleEnumerations.ExtensibleTransactionType.RemoveTender.equals(_this._transactionType)
                        || Commerce.ExtensibleEnumerations.ExtensibleTransactionType.StartingAmount.equals(_this._transactionType);
                }, _this);
                if (options.createFromAvailableEntry) {
                    _this.notes(_this._selectedAvailableEntry.Description || Commerce.StringExtensions.EMPTY);
                }
                return _this;
            }
            GetCashManagementTransactionDetailsViewModel.prototype.selectSourceAsync = function (correlationId) {
                var _this = this;
                if (this._sourceType === SourceDestinationChoiceType.AnyStoreSafe
                    && (!Commerce.ArrayExtensions.hasElements(this._availableStoreSafes))) {
                    Commerce.NotificationHandler.displayErrorMessage(Commerce.ViewModelAdapter.getResourceString("string_30107"));
                    return Commerce.AsyncResult.createResolved({ canceled: true, data: null });
                }
                var activity = new Commerce.Activities.SelectCashManagementTransactionEndpointActivity({
                    title: Commerce.ViewModelAdapter.getResourceString("string_30108"),
                    subTitle: Commerce.ViewModelAdapter.getResourceString("string_30104"),
                    correlationId: correlationId,
                    storeSafes: this._getStoreSafesForSelection(this._sourceType),
                    shifts: this._getShiftsForSelection(this._sourceType),
                    preSelectedStoreSafe: this.selectedSourceStoreSafe(),
                    preSelectedShift: this.selectedSourceShift()
                });
                return activity.execute().done(function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(activity.response)) {
                        _this.selectedSourceShift(activity.response.selectedShift);
                        _this.selectedSourceStoreSafe(activity.response.selectedStoreSafe);
                    }
                });
            };
            GetCashManagementTransactionDetailsViewModel.prototype.selectDestinationAsync = function (correlationId) {
                var _this = this;
                if (this._destinationType === SourceDestinationChoiceType.AnyStoreSafe
                    && (!Commerce.ArrayExtensions.hasElements(this._availableStoreSafes))) {
                    Commerce.NotificationHandler.displayErrorMessage(Commerce.ViewModelAdapter.getResourceString("string_30107"));
                    return Commerce.AsyncResult.createResolved({ canceled: true, data: null });
                }
                var activity = new Commerce.Activities.SelectCashManagementTransactionEndpointActivity({
                    title: Commerce.ViewModelAdapter.getResourceString("string_30109"),
                    subTitle: Commerce.ViewModelAdapter.getResourceString("string_30105"),
                    correlationId: correlationId,
                    storeSafes: this._getStoreSafesForSelection(this._destinationType),
                    shifts: this._getShiftsForSelection(this._destinationType),
                    preSelectedStoreSafe: this.selectedDestinationStoreSafe(),
                    preSelectedShift: this.selectedDestinationShift()
                });
                return activity.execute().done(function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(activity.response)) {
                        _this.selectedDestinationShift(activity.response.selectedShift);
                        _this.selectedDestinationStoreSafe(activity.response.selectedStoreSafe);
                    }
                });
            };
            GetCashManagementTransactionDetailsViewModel.prototype._setSourceAndDestinationType = function () {
                if (this._transactionContext === Commerce.Proxy.Entities.CashManagementTransactionContext.Shift) {
                    switch (this._transactionType) {
                        case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.FloatEntry:
                            this._sourceType = SourceDestinationChoiceType.AnyStoreSafeOrAnyShift;
                            this._destinationType = SourceDestinationChoiceType.ContextShift;
                            break;
                        case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.RemoveTender:
                            this._sourceType = SourceDestinationChoiceType.ContextShift;
                            this._destinationType = SourceDestinationChoiceType.AnyShift;
                            break;
                        case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.StartingAmount:
                            this._sourceType = SourceDestinationChoiceType.AnyStoreSafe;
                            this._destinationType = SourceDestinationChoiceType.ContextShift;
                            break;
                        case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.SafeDrop:
                            this._sourceType = SourceDestinationChoiceType.ContextShift;
                            this._destinationType = SourceDestinationChoiceType.AnyStoreSafe;
                            break;
                        case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.BankDrop:
                            this._sourceType = SourceDestinationChoiceType.ContextShift;
                            this._destinationType = SourceDestinationChoiceType.NA;
                            break;
                        default:
                            this._sourceType = SourceDestinationChoiceType.NA;
                            this._destinationType = SourceDestinationChoiceType.NA;
                    }
                }
                else if (this._transactionContext === Commerce.Proxy.Entities.CashManagementTransactionContext.Safe) {
                    switch (this._transactionType) {
                        case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.FloatEntry:
                            this._sourceType = SourceDestinationChoiceType.AnotherStoreSafeOrAnyShift;
                            this._destinationType = SourceDestinationChoiceType.ContextStoreSafe;
                            break;
                        case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.RemoveTender:
                            this._sourceType = SourceDestinationChoiceType.ContextStoreSafe;
                            this._destinationType = SourceDestinationChoiceType.AnotherStoreSafeOrAnyShift;
                            break;
                        case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.StartingAmount:
                            this._sourceType = SourceDestinationChoiceType.NA;
                            this._destinationType = SourceDestinationChoiceType.ContextStoreSafe;
                            break;
                        case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.BankDrop:
                            this._sourceType = SourceDestinationChoiceType.ContextStoreSafe;
                            this._destinationType = SourceDestinationChoiceType.NA;
                            break;
                        default:
                            this._sourceType = SourceDestinationChoiceType.NA;
                            this._destinationType = SourceDestinationChoiceType.NA;
                    }
                }
            };
            GetCashManagementTransactionDetailsViewModel.prototype._initializeSource = function () {
                if (this._createFromAvailableEntry) {
                    if (this._selectedAvailableEntry.TransactionSourceContextTypeValue === Commerce.Proxy.Entities.CashManagementTransactionContext.Shift) {
                        this.selectedSourceShift({
                            ShiftId: Number(this._selectedAvailableEntry.FromShiftId),
                            ShiftTerminalId: this._selectedAvailableEntry.FromShiftTerminalId,
                            Store: this._selectedAvailableEntry.StoreId
                        });
                    }
                    else if (this._selectedAvailableEntry.TransactionSourceContextTypeValue === Commerce.Proxy.Entities.CashManagementTransactionContext.Safe) {
                        this.selectedSourceStoreSafe({
                            SafeNumber: this._selectedAvailableEntry.FromSafe,
                            Name: this._getStoreSafeName(this._selectedAvailableEntry.FromSafe)
                        });
                    }
                }
                else {
                    if (this._sourceType === SourceDestinationChoiceType.ContextShift) {
                        this.selectedSourceShift(this._getShiftKey(this._contextShift));
                    }
                    else if (this._sourceType === SourceDestinationChoiceType.ContextStoreSafe) {
                        this.selectedSourceStoreSafe(this._contextStoreSafe);
                    }
                }
            };
            GetCashManagementTransactionDetailsViewModel.prototype._initializeDestination = function () {
                if (this._createFromAvailableEntry) {
                    if (this._selectedAvailableEntry.TransactionDestinationContextTypeValue === Commerce.Proxy.Entities.CashManagementTransactionContext.Shift) {
                        this.selectedDestinationShift({
                            ShiftId: Number(this._selectedAvailableEntry.ToShiftId),
                            ShiftTerminalId: this._selectedAvailableEntry.ToShiftTerminalId,
                            Store: this._selectedAvailableEntry.StoreId
                        });
                    }
                    else if (this._selectedAvailableEntry.TransactionDestinationContextTypeValue === Commerce.Proxy.Entities.CashManagementTransactionContext.Safe) {
                        this.selectedDestinationStoreSafe({
                            SafeNumber: this._selectedAvailableEntry.ToSafe,
                            Name: this._getStoreSafeName(this._selectedAvailableEntry.ToSafe)
                        });
                    }
                }
                else {
                    if (this._destinationType === SourceDestinationChoiceType.ContextShift) {
                        this.selectedDestinationShift(this._getShiftKey(this._contextShift));
                    }
                    else if (this._destinationType === SourceDestinationChoiceType.ContextStoreSafe) {
                        this.selectedDestinationStoreSafe(this._contextStoreSafe);
                    }
                }
            };
            GetCashManagementTransactionDetailsViewModel.prototype._getShiftKey = function (shift) {
                return Commerce.ObjectExtensions.isNullOrUndefined(shift) ? null : { ShiftId: shift.ShiftId, ShiftTerminalId: shift.TerminalId, Store: shift.StoreId };
            };
            GetCashManagementTransactionDetailsViewModel.prototype._getStoreSafesForSelection = function (availbleSelectionType) {
                var _this = this;
                var availableStoreSafes = [];
                if (availbleSelectionType === SourceDestinationChoiceType.AnyStoreSafe
                    || availbleSelectionType === SourceDestinationChoiceType.AnyStoreSafeOrAnyShift) {
                    availableStoreSafes = this._availableStoreSafes;
                }
                else if (availbleSelectionType === SourceDestinationChoiceType.AnotherStoreSafeOrAnyShift) {
                    availableStoreSafes = this._availableStoreSafes.filter(function (value) {
                        return value.SafeNumber !== _this._contextStoreSafe.SafeNumber;
                    });
                }
                return availableStoreSafes;
            };
            GetCashManagementTransactionDetailsViewModel.prototype._getShiftsForSelection = function (availbleSelectionType) {
                var availableShifts = [];
                if (availbleSelectionType === SourceDestinationChoiceType.AnyShift
                    || availbleSelectionType === SourceDestinationChoiceType.AnyStoreSafeOrAnyShift
                    || availbleSelectionType === SourceDestinationChoiceType.AnotherStoreSafeOrAnyShift) {
                    availableShifts = this._availableShifts;
                }
                return availableShifts;
            };
            GetCashManagementTransactionDetailsViewModel.prototype._getStoreSafeName = function (safeNumber) {
                var storeSafes = this._availableStoreSafes.filter(function (safe) {
                    return safe.SafeNumber === safeNumber;
                });
                return Commerce.ArrayExtensions.hasElements(storeSafes) ? storeSafes[0].Name : Commerce.StringExtensions.EMPTY;
            };
            GetCashManagementTransactionDetailsViewModel.NOTES_MAX_LENGTH = 150;
            return GetCashManagementTransactionDetailsViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.GetCashManagementTransactionDetailsViewModel = GetCashManagementTransactionDetailsViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var GetCashManagementTransactionSourceViewModel = (function (_super) {
            __extends(GetCashManagementTransactionSourceViewModel, _super);
            function GetCashManagementTransactionSourceViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                _this._transactionType = options.transactionType;
                _this._availableEntries = options.availableEntries;
                _this._allEmployees = options.allEmployees;
                _this._storeSafes = options.storeSafes;
                _this._setLabels();
                _this.availableEntriesForDisplay = ko.observableArray(null);
                _this.hasAvailableEntries = ko.computed(function () {
                    return Commerce.ArrayExtensions.hasElements(_this._availableEntries);
                }, _this);
                return _this;
            }
            GetCashManagementTransactionSourceViewModel.prototype.getAvailableEntriesForDisplay = function () {
                var _this = this;
                if (Commerce.ArrayExtensions.hasElements(this._availableEntries)) {
                    var availableEntries = void 0;
                    availableEntries = this._availableEntries
                        .map(function (shiftReconciliationLine) {
                        return _this._getAvailableEntry(shiftReconciliationLine);
                    });
                    this.availableEntriesForDisplay(availableEntries);
                }
            };
            GetCashManagementTransactionSourceViewModel.prototype._getAvailableEntry = function (shiftReconciliationLine) {
                var staffName = this._getStaffName(shiftReconciliationLine.StaffId);
                var availableEntryForDisplay = {
                    amount: shiftReconciliationLine.TotalAmount,
                    sourceDestinationType: Commerce.Proxy.Entities.CashManagementTransactionContext.Unknown,
                    sourceDestinationPrimaryText: Commerce.StringExtensions.EMPTY,
                    sourceDestinationSecondaryText: Commerce.StringExtensions.EMPTY,
                    staffId: shiftReconciliationLine.StaffId,
                    staffName: staffName,
                    staffInitials: this._getStaffInitials(staffName),
                    description: shiftReconciliationLine.Description,
                    availableEntry: shiftReconciliationLine,
                };
                switch (this._transactionType) {
                    case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.StartingAmount:
                    case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.FloatEntry:
                        if (shiftReconciliationLine.TransactionSourceContextTypeValue === Commerce.Proxy.Entities.CashManagementTransactionContext.Shift) {
                            availableEntryForDisplay.sourceDestinationType = Commerce.Proxy.Entities.CashManagementTransactionContext.Shift;
                            availableEntryForDisplay.sourceDestinationPrimaryText = shiftReconciliationLine.TerminalId;
                            availableEntryForDisplay.sourceDestinationSecondaryText = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_30110"), shiftReconciliationLine.ShiftId);
                        }
                        else if (shiftReconciliationLine.TransactionSourceContextTypeValue === Commerce.Proxy.Entities.CashManagementTransactionContext.Safe) {
                            var storeSafeName = this._getStoreSafeName(shiftReconciliationLine.FromSafe);
                            availableEntryForDisplay.sourceDestinationType = Commerce.Proxy.Entities.CashManagementTransactionContext.Safe;
                            availableEntryForDisplay.sourceDestinationPrimaryText = storeSafeName;
                            availableEntryForDisplay.sourceDestinationSecondaryText = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_30111"), shiftReconciliationLine.FromSafe);
                        }
                        break;
                    case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.RemoveTender:
                    case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.SafeDrop:
                        if (shiftReconciliationLine.TransactionDestinationContextTypeValue === Commerce.Proxy.Entities.CashManagementTransactionContext.Shift) {
                            availableEntryForDisplay.sourceDestinationType = Commerce.Proxy.Entities.CashManagementTransactionContext.Shift;
                            availableEntryForDisplay.sourceDestinationPrimaryText = shiftReconciliationLine.ToShiftTerminalId;
                            availableEntryForDisplay.sourceDestinationSecondaryText = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_30110"), shiftReconciliationLine.ToShiftId);
                        }
                        else if (shiftReconciliationLine.TransactionDestinationContextTypeValue === Commerce.Proxy.Entities.CashManagementTransactionContext.Safe) {
                            var storeSafeName = this._getStoreSafeName(shiftReconciliationLine.ToSafe);
                            availableEntryForDisplay.sourceDestinationType = Commerce.Proxy.Entities.CashManagementTransactionContext.Safe;
                            availableEntryForDisplay.sourceDestinationPrimaryText = storeSafeName;
                            availableEntryForDisplay.sourceDestinationSecondaryText = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_30111"), shiftReconciliationLine.ToSafe);
                        }
                        break;
                    default:
                        return null;
                }
                return availableEntryForDisplay;
            };
            GetCashManagementTransactionSourceViewModel.prototype._setLabels = function () {
                if (Commerce.ExtensibleEnumerations.ExtensibleTransactionType.FloatEntry.equals(this._transactionType)
                    || Commerce.ExtensibleEnumerations.ExtensibleTransactionType.StartingAmount.equals(this._transactionType)) {
                    this.newTranscationButtonLabel = Commerce.ViewModelAdapter.getResourceString("string_30100");
                    this.secondaryText = Commerce.ViewModelAdapter.getResourceString("string_30103");
                    this.avaialbleTransactionsLabel = Commerce.ViewModelAdapter.getResourceString("string_30116");
                }
                else if (Commerce.ExtensibleEnumerations.ExtensibleTransactionType.RemoveTender.equals(this._transactionType)) {
                    this.newTranscationButtonLabel = Commerce.ViewModelAdapter.getResourceString("string_30101");
                    this.secondaryText = Commerce.ViewModelAdapter.getResourceString("string_30103");
                    this.avaialbleTransactionsLabel = Commerce.ViewModelAdapter.getResourceString("string_30121");
                }
                else if (Commerce.ExtensibleEnumerations.ExtensibleTransactionType.SafeDrop.equals(this._transactionType)
                    || Commerce.ExtensibleEnumerations.ExtensibleTransactionType.BankDrop.equals(this._transactionType)) {
                    this.newTranscationButtonLabel = Commerce.ViewModelAdapter.getResourceString("string_30123");
                    this.secondaryText = Commerce.ViewModelAdapter.getResourceString("string_30125");
                    this.avaialbleTransactionsLabel = Commerce.ViewModelAdapter.getResourceString("string_30122");
                }
            };
            GetCashManagementTransactionSourceViewModel.prototype._getStaffInitials = function (staffFullName) {
                var initials = Commerce.StringExtensions.EMPTY;
                staffFullName.split(" ").forEach(function (value) {
                    initials += value[0];
                });
                return initials;
            };
            GetCashManagementTransactionSourceViewModel.prototype._getStaffName = function (staffId) {
                var employees = this._allEmployees.filter(function (employee) {
                    return employee.StaffId === staffId;
                });
                return Commerce.ArrayExtensions.hasElements(employees) ? employees[0].Name : Commerce.StringExtensions.EMPTY;
            };
            GetCashManagementTransactionSourceViewModel.prototype._getStoreSafeName = function (safeNumber) {
                var storeSafes = this._storeSafes.filter(function (safe) {
                    return safe.SafeNumber === safeNumber;
                });
                return Commerce.ArrayExtensions.hasElements(storeSafes) ? storeSafes[0].Name : Commerce.StringExtensions.EMPTY;
            };
            return GetCashManagementTransactionSourceViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.GetCashManagementTransactionSourceViewModel = GetCashManagementTransactionSourceViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var GetChargeViewModel = (function (_super) {
            __extends(GetChargeViewModel, _super);
            function GetChargeViewModel() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            GetChargeViewModel.prototype.getChargeCodes = function (pageSize, skip) {
                return this.cartManager.getChargeCodesAsync()
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            return GetChargeViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.GetChargeViewModel = GetChargeViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var GetSalesRepresentativeViewModel = (function (_super) {
            __extends(GetSalesRepresentativeViewModel, _super);
            function GetSalesRepresentativeViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this.reloadSalesRepresentativesCallback = ko.observable(function () { return; });
                _this.searchText = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.commissionSalesGroup = ko.observable(null);
                return _this;
            }
            GetSalesRepresentativeViewModel.prototype.getSalesRepresentativesAsync = function (pageSize, skip) {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.viewModelGetSalesRepresentativeViewModelGetSalesRepresentativesAsyncStarted(correlationId, this.searchText());
                this.commissionSalesGroup(null);
                var searchCommissionSalesGroupsServiceRequest = new Commerce.SearchCommissionSalesGroupsServiceRequest(correlationId, this.searchText(), pageSize, skip);
                return this._isBusyUntil(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(searchCommissionSalesGroupsServiceRequest))
                    .map(function (response) {
                    if (response.canceled) {
                        return [];
                    }
                    else {
                        var groups = response.data.commissionSalesGroups;
                        if (Commerce.ArrayExtensions.hasElements(groups)
                            && groups.length === 1
                            && !Commerce.StringExtensions.isEmptyOrWhitespace(_this.searchText())) {
                            _this.commissionSalesGroup(groups[0]);
                        }
                        Commerce.RetailLogger.viewModelGetSalesRepresentativeViewModelGetSalesRepresentativesAsyncFinished(correlationId, groups.length);
                        return groups;
                    }
                }).fail(function (errors) {
                    Commerce.RetailLogger.viewModelGetSalesRepresentativeViewModelGetSalesRepresentativesAsyncFailed(correlationId, errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                    Commerce.NotificationHandler.displayClientErrors(errors);
                }));
            };
            GetSalesRepresentativeViewModel.prototype.performSalesRepresentativeSearch = function () {
                this.reloadSalesRepresentativesCallback()();
            };
            return GetSalesRepresentativeViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.GetSalesRepresentativeViewModel = GetSalesRepresentativeViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var GetStartedViewModel = (function (_super) {
            __extends(GetStartedViewModel, _super);
            function GetStartedViewModel() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetStartedViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.GetStartedViewModel = GetStartedViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var GiftCardDialogViewModel = (function (_super) {
            __extends(GiftCardDialogViewModel, _super);
            function GiftCardDialogViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw new Error("Invalid options passed to the GiftCardDialogViewModel constructor: options cannot be null or undefined.");
                }
                _this.correlationId = options.correlationId ? options.correlationId : Commerce.StringExtensions.EMPTY;
                _this._tenderTypeId = options.tenderTypeId;
                return _this;
            }
            GiftCardDialogViewModel.prototype.addToGiftCard = function (cardId, amount, currency, description) {
                var _this = this;
                var tenderType = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderByTypeId(this._tenderTypeId);
                if (Commerce.ObjectExtensions.isNullOrUndefined(tenderType)) {
                    tenderType = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderTypeByOperationId(Commerce.Proxy.Entities.RetailOperation.PayGiftCertificate);
                }
                if (!this._isValidAmount(amount)) {
                    return Commerce.AsyncResult.createRejected([
                        new Commerce.Proxy.Entities.Error("string_5115", undefined, Commerce.ViewModelAdapter.getResourceString("string_5115"))
                    ]);
                }
                var connectorId = Commerce.StringExtensions.EMPTY;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(tenderType)) {
                    connectorId = tenderType.ConnectorId;
                }
                if (Commerce.StringExtensions.isNullOrWhitespace(connectorId) && Commerce.StringExtensions.isNullOrWhitespace(cardId)) {
                    return Commerce.AsyncResult.createRejected([
                        new Commerce.Proxy.Entities.Error("string_1171", undefined, Commerce.ViewModelAdapter.getResourceString("string_1171"))
                    ]);
                }
                var addQueue = new Commerce.AsyncQueue();
                if (!Commerce.Session.instance.isCartInProgress) {
                    addQueue.enqueue(function () {
                        var createCartRequest = new Commerce.CreateEmptyCartServiceRequest(_this.correlationId);
                        return addQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(createCartRequest)));
                    });
                }
                return addQueue.enqueue(function () {
                    if (Commerce.ApplicationContext.Instance.deviceConfiguration.IsSalesRepRequired) {
                        return addQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(new Commerce.Carts.AddSalesRepresentativeToCartServiceRequest(_this.correlationId, Commerce.Session.instance.cart))));
                    }
                    else {
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(new Commerce.Carts.AddSalesRepresentativeToCartServiceRequest(_this.correlationId, Commerce.Session.instance.cart)));
                    }
                }).enqueue(function () {
                    Commerce.RetailLogger.operationAddGiftCard(cardId, amount, currency, description, connectorId, _this.correlationId);
                    var addBalanceGiftCardRequest = new Commerce.Payments.AddBalanceToGiftCardClientRequest(_this.correlationId, tenderType, cardId, amount, currency, description);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(addBalanceGiftCardRequest));
                }).run().map(function (result) {
                    return {
                        canceled: result.canceled,
                        data: null
                    };
                });
            };
            GiftCardDialogViewModel.prototype.issueGiftCard = function (cardId, amount, currency, description) {
                var _this = this;
                var tenderType = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderByTypeId(this._tenderTypeId);
                if (Commerce.ObjectExtensions.isNullOrUndefined(tenderType)) {
                    tenderType = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderTypeByOperationId(Commerce.Proxy.Entities.RetailOperation.PayGiftCertificate);
                }
                if (!this._isValidAmount(amount)) {
                    return Commerce.VoidAsyncResult.createRejected([
                        new Commerce.Proxy.Entities.Error("string_5115", undefined, this.context.stringResourceManager.getString("string_5115"))
                    ]);
                }
                var connectorId = Commerce.StringExtensions.EMPTY;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(tenderType)) {
                    connectorId = tenderType.ConnectorId;
                }
                if (Commerce.StringExtensions.isNullOrWhitespace(connectorId) && Commerce.StringExtensions.isNullOrWhitespace(cardId)) {
                    return Commerce.AsyncResult.createRejected([
                        new Commerce.Proxy.Entities.Error("string_1171", undefined, this.context.stringResourceManager.getString("string_1171"))
                    ]);
                }
                var issueQueue = new Commerce.AsyncQueue();
                if (!Commerce.Session.instance.isCartInProgress) {
                    issueQueue.enqueue(function () {
                        var createCartRequest = new Commerce.CreateEmptyCartServiceRequest(_this.correlationId);
                        return issueQueue.cancelOn(Commerce.AsyncResult.fromPromise(_this.context.runtime.executeAsync(createCartRequest)));
                    });
                }
                return issueQueue.enqueue(function () {
                    if (Commerce.ApplicationContext.Instance.deviceConfiguration.IsSalesRepRequired) {
                        return issueQueue.cancelOn(Commerce.AsyncResult.fromPromise(_this.context.runtime.executeAsync(new Commerce.Carts.AddSalesRepresentativeToCartServiceRequest(_this.correlationId, Commerce.Session.instance.cart))));
                    }
                    else {
                        return Commerce.AsyncResult.fromPromise(_this.context.runtime.executeAsync(new Commerce.Carts.AddSalesRepresentativeToCartServiceRequest(_this.correlationId, Commerce.Session.instance.cart)));
                    }
                }).enqueue(function () {
                    Commerce.RetailLogger.operationIssueGiftCard(cardId, amount, currency, description, connectorId, _this.correlationId);
                    var issueGiftCardRequest = new Commerce.Payments.IssueGiftCardClientRequest(_this.correlationId, tenderType, cardId, amount, currency, description);
                    return Commerce.AsyncResult.fromPromise(_this.context.runtime.executeAsync(issueGiftCardRequest));
                }).run().map(function (result) {
                    return {
                        canceled: result.canceled,
                        data: null
                    };
                });
            };
            GiftCardDialogViewModel.prototype.checkGiftCardBalance = function (cardId) {
                var _this = this;
                var tenderType = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderByTypeId(this._tenderTypeId);
                var asyncQueue = new Commerce.AsyncQueue();
                return asyncQueue.enqueue(function () {
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(new Commerce.Payments.GetGiftCardByIdClientRequest(_this.correlationId, tenderType, cardId)))
                        .map(function (result) {
                        return result.data.result;
                    });
                }).enqueue(function (card) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(card) || Commerce.StringExtensions.isNullOrWhitespace(card.Id)) {
                        return Commerce.VoidAsyncResult.createRejected([
                            new Commerce.Proxy.Entities.Error("string_1171", undefined, _this.context.stringResourceManager.getString("string_1171"))
                        ]);
                    }
                    return Commerce.AsyncResult.createResolved(card);
                }).run();
            };
            GiftCardDialogViewModel.prototype.cashOutGiftCard = function (cardId, currency, description) {
                var _this = this;
                var tenderType = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderByTypeId(this._tenderTypeId);
                var connectorId = tenderType.ConnectorId;
                if (Commerce.StringExtensions.isNullOrWhitespace(connectorId) && Commerce.StringExtensions.isNullOrWhitespace(cardId)) {
                    return Commerce.AsyncResult.createRejected([new Commerce.Proxy.Entities.Error("string_1171")]);
                }
                var cashOutQueue = new Commerce.AsyncQueue();
                var giftCard = null;
                cashOutQueue.enqueue(function () {
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(new Commerce.Payments.GetGiftCardByIdClientRequest(_this.correlationId, tenderType, cardId)))
                        .map(function (result) {
                        return result.data.result;
                    });
                }).enqueue(function (retrievedGiftCard) {
                    giftCard = retrievedGiftCard;
                    if (giftCard.Balance > tenderType.GiftCardCashoutOutThreshold) {
                        var balanceAboveThresholdError = new Commerce.Proxy.Entities.Error("string_5123", false, null, [
                            Commerce.NumberExtensions.formatCurrency(giftCard.Balance, currency),
                            Commerce.NumberExtensions.formatCurrency(tenderType.GiftCardCashoutOutThreshold, currency)
                        ]);
                        return Commerce.VoidAsyncResult.createRejected([balanceAboveThresholdError]);
                    }
                    else if (giftCard.Balance <= 0) {
                        var notEnoughBalanceErrorMessage = new Commerce.Proxy.Entities.Error("string_5124", false, null, [
                            Commerce.NumberExtensions.formatCurrency(giftCard.Balance, currency),
                            Commerce.NumberExtensions.formatCurrency(tenderType.GiftCardCashoutOutThreshold, currency)
                        ]);
                        return Commerce.VoidAsyncResult.createRejected([notEnoughBalanceErrorMessage]);
                    }
                    if (!Commerce.StringExtensions.isNullOrWhitespace(connectorId)) {
                        cardId = giftCard.Id;
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                }).enqueue(function () {
                    if (!Commerce.Session.instance.isCartInProgress) {
                        var createCartRequest = new Commerce.CreateEmptyCartServiceRequest(_this.correlationId);
                        return cashOutQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(createCartRequest)));
                    }
                    else {
                        return Commerce.AsyncResult.createResolved();
                    }
                }).enqueue(function () {
                    var addSalesRepresentativeRequest = new Commerce.Carts.AddSalesRepresentativeToCartServiceRequest(_this.correlationId, Commerce.Session.instance.cart);
                    return Commerce.ApplicationContext.Instance.deviceConfiguration.IsSalesRepRequired
                        ? cashOutQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(addSalesRepresentativeRequest)))
                        : Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(addSalesRepresentativeRequest));
                }).enqueue(function () {
                    var cashOutGiftCardClientRequest = new Commerce.Payments.CashOutGiftCardClientRequest(_this.correlationId, giftCard.Balance, currency, cardId, description, tenderType);
                    return cashOutQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(cashOutGiftCardClientRequest)));
                });
                return cashOutQueue.run().map(function (result) {
                    return {
                        canceled: result.canceled,
                        data: giftCard
                    };
                });
            };
            GiftCardDialogViewModel.prototype._isValidAmount = function (amount) {
                var maxDigits = 11;
                return (amount.toString().length <= maxDigits) && !Commerce.NumberExtensions.isNullNaNOrZero(amount);
            };
            return GiftCardDialogViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.GiftCardDialogViewModel = GiftCardDialogViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var HardwareStationFallbackViewModel = (function (_super) {
            __extends(HardwareStationFallbackViewModel, _super);
            function HardwareStationFallbackViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this.pairedHardwareStations = ko.observableArray([]);
                _this.pairStateLabel = ko.observable(Commerce.ViewModelAdapter.getResourceString("string_6037"));
                _this.showPairedStations = ko.computed(function () {
                    return Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.HARDWARE_STATION_FEATURE_ENABLE) === "true";
                }, _this);
                _this.isPairedHardwareStationExists = ko.computed(function () {
                    return Commerce.ArrayExtensions.hasElements(_this.pairedHardwareStations())
                        && Commerce.Peripherals.HardwareStation.HardwareStationContext.isLocalHardwareStationSupported();
                }, _this);
                return _this;
            }
            HardwareStationFallbackViewModel.prototype.loadAsync = function () {
                return this._updateDataSetAsync();
            };
            HardwareStationFallbackViewModel.prototype._updateDataSetAsync = function () {
                var _this = this;
                this.pairedHardwareStations.removeAll();
                return Commerce.ApplicationContext.Instance.hardwareStationProfileAsync.done(function (hardwareStationProfiles) {
                    var activeHardwareStation = Commerce.HardwareStationEndpointStorage.getActiveHardwareStation();
                    hardwareStationProfiles = hardwareStationProfiles.filter(function (hws) {
                        return hws.HardwareStationTypeValue === Commerce.Proxy.Entities.HardwareStationType.Dedicated;
                    });
                    var stations = [];
                    hardwareStationProfiles.forEach(function (profile) {
                        var hardwareStationUrl = Commerce.Peripherals.HardwareStation.HardwareStationContext.getHardwareStationUrlFromProfile(profile);
                        var hardwareStation = {
                            recordId: profile.RecordId,
                            hostName: profile.HardwareStationHostName,
                            description: profile.HardwareStationDescription,
                            url: hardwareStationUrl,
                            isActive: false,
                            isPaired: false,
                            profileId: profile.HardwareProfileId,
                            eftTerminalId: profile.HardwareStationEftTerminalId,
                            hardwareConfigurations: profile.HardwareConfigurations
                        };
                        if (Commerce.Peripherals.HardwareStation.HardwareStationContext.isLocalStation(hardwareStation)) {
                            if (!Commerce.Peripherals.HardwareStation.HardwareStationContext.isLocalHardwareStationSupported()) {
                                return;
                            }
                            hardwareStation.hostName = hardwareStation.hostName.replace(Commerce.Peripherals.HardwareStation.HardwareStationContext.GUID_REGEXP, Commerce.StringExtensions.EMPTY);
                            hardwareStation.isPaired = true;
                        }
                        else {
                            hardwareStation.isPaired = Commerce.HardwareStationEndpointStorage.hasHardwareStationToken(hardwareStation.recordId, hardwareStation.url);
                        }
                        if (hardwareStation.isPaired &&
                            (Commerce.ObjectExtensions.isNullOrUndefined(activeHardwareStation) ||
                                (hardwareStation.recordId !== activeHardwareStation.recordId))) {
                            stations.push(hardwareStation);
                        }
                    });
                    _this.pairedHardwareStations(stations);
                });
            };
            return HardwareStationFallbackViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.HardwareStationFallbackViewModel = HardwareStationFallbackViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var HardwareStationViewModel = (function (_super) {
            __extends(HardwareStationViewModel, _super);
            function HardwareStationViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this._isHardwareStationEnabled = ko.observable(Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.HARDWARE_STATION_FEATURE_ENABLE) === "true");
                _this.hardwareStations = ko.observableArray([]);
                _this.connectedHardwareStation = ko.observableArray([]);
                _this.pairedHardwareStations = ko.observableArray([]);
                _this.pairStateLabel = ko.observable(Commerce.ViewModelAdapter.getResourceString("string_6032"));
                _this.isConnectedHardwareStationExists = ko.computed(function () {
                    return _this.connectedHardwareStation().length > 0 ? true : false;
                }, _this);
                _this.showPairedStations = ko.computed(function () {
                    return _this._isHardwareStationEnabled();
                }, _this);
                _this.isPairedHardwareStationExists = ko.computed(function () {
                    if (_this.connectedHardwareStation().length > 0 && _this.pairedHardwareStations().length === 0) {
                        _this.pairStateLabel(Commerce.ViewModelAdapter.getResourceString("string_6033"));
                    }
                    else {
                        _this.pairStateLabel(Commerce.ViewModelAdapter.getResourceString("string_6032"));
                    }
                    return _this.pairedHardwareStations().length > 0 ? true : false;
                }, _this);
                return _this;
            }
            HardwareStationViewModel.prototype.load = function () {
                return this.updateDataSetAsync();
            };
            HardwareStationViewModel.prototype.setActive = function (station) {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(station)) {
                    var options = {
                        hardwareStation: station, isInactivate: false
                    };
                    return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.ChangeHardwareStation, options)
                        .done(function () {
                        _this.updateDataSetAsync();
                        Commerce.Session.instance.setErrorDisplayState(Commerce.ErrorsDisplayedPerSession.HardwareStationGeneralError, true);
                        Commerce.Session.instance.setErrorDisplayState(Commerce.ErrorsDisplayedPerSession.NoActiveHardwareStationError, true);
                    }).fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }
                else {
                    return Commerce.AsyncResult.createResolved();
                }
            };
            HardwareStationViewModel.prototype.setInactive = function (station) {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(station)) {
                    var options = {
                        hardwareStation: station, isInactivate: true
                    };
                    return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.ChangeHardwareStation, options)
                        .done(function () {
                        _this.updateDataSetAsync();
                        Commerce.Session.instance.setErrorDisplayState(Commerce.ErrorsDisplayedPerSession.HardwareStationGeneralError, true);
                        Commerce.Session.instance.setErrorDisplayState(Commerce.ErrorsDisplayedPerSession.NoActiveHardwareStationError, true);
                    }).fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }
                else {
                    return Commerce.AsyncResult.createResolved();
                }
            };
            HardwareStationViewModel.prototype.pairStation = function (station) {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(station)) {
                    var options = {
                        hardwareStation: station, operation: Commerce.Operations.HardwareStationOperationType.Pair
                    };
                    return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.PairHardwareStation, options)
                        .done(function () {
                        _this.updateDataSetAsync();
                        Commerce.Session.instance.setErrorDisplayState(Commerce.ErrorsDisplayedPerSession.HardwareStationGeneralError, true);
                        Commerce.Session.instance.setErrorDisplayState(Commerce.ErrorsDisplayedPerSession.NoActiveHardwareStationError, true);
                    })
                        .fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors, "string_6008");
                    });
                }
                else {
                    return Commerce.AsyncResult.createResolved();
                }
            };
            HardwareStationViewModel.prototype.unpairStation = function (station) {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(station)) {
                    var options = {
                        hardwareStation: station, operation: Commerce.Operations.HardwareStationOperationType.Unpair
                    };
                    return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.PairHardwareStation, options)
                        .done(function () {
                        _this.updateDataSetAsync();
                        Commerce.Session.instance.setErrorDisplayState(Commerce.ErrorsDisplayedPerSession.HardwareStationGeneralError, true);
                        Commerce.Session.instance.setErrorDisplayState(Commerce.ErrorsDisplayedPerSession.NoActiveHardwareStationError, true);
                    })
                        .fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors, "string_6008");
                    });
                }
                else {
                    return Commerce.AsyncResult.createResolved();
                }
            };
            HardwareStationViewModel.prototype.toggleManageHardware = function (checked) {
                var _this = this;
                if (checked !== this._isHardwareStationEnabled()) {
                    var pairOperation = checked ? Commerce.Operations.HardwareStationOperationType.Enable : Commerce.Operations.HardwareStationOperationType.Disable;
                    var options = {
                        hardwareStation: null, operation: pairOperation
                    };
                    return Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.PairHardwareStation, options)
                        .done(function () {
                        _this._isHardwareStationEnabled(checked);
                    });
                }
                else {
                    return Commerce.AsyncResult.createResolved();
                }
            };
            HardwareStationViewModel.prototype.updateDataSetAsync = function () {
                var _this = this;
                this.hardwareStations.removeAll();
                return Commerce.ApplicationContext.Instance.hardwareStationProfileAsync.done(function (hardwareStationProfiles) {
                    var activeHardwareStation = Commerce.HardwareStationEndpointStorage.getActiveHardwareStation();
                    var hasActiveHardwareStation = !Commerce.ObjectExtensions.isNullOrUndefined(activeHardwareStation);
                    for (var i = 0; i < hardwareStationProfiles.length; i++) {
                        var profile = hardwareStationProfiles[i];
                        var hardwareStationUrl = Commerce.Peripherals.HardwareStation.HardwareStationContext.getHardwareStationUrlFromProfile(profile);
                        var hardwareStation = {
                            recordId: profile.RecordId,
                            hostName: profile.HardwareStationHostName,
                            description: profile.HardwareStationDescription,
                            url: hardwareStationUrl,
                            isActive: false,
                            isPaired: false,
                            profileId: profile.HardwareProfileId,
                            eftTerminalId: profile.HardwareStationEftTerminalId,
                            hardwareConfigurations: profile.HardwareConfigurations
                        };
                        if (Commerce.Peripherals.HardwareStation.HardwareStationContext.isLocalStation(hardwareStation)) {
                            if (!Commerce.Peripherals.HardwareStation.HardwareStationContext.isLocalHardwareStationSupported()) {
                                continue;
                            }
                            hardwareStation.hostName = hardwareStation.hostName.replace(Commerce.Peripherals.HardwareStation.HardwareStationContext.GUID_REGEXP, "");
                            hardwareStation.isPaired = true;
                        }
                        else {
                            hardwareStation.isPaired = Commerce.HardwareStationEndpointStorage.hasHardwareStationToken(hardwareStation.recordId, hardwareStation.url);
                        }
                        hardwareStation.isActive = hardwareStation.isPaired
                            && hasActiveHardwareStation
                            && (hardwareStation.recordId === activeHardwareStation.recordId);
                        _this.hardwareStations.push(hardwareStation);
                    }
                    _this.connectedHardwareStation.removeAll();
                    var connStations = _this.hardwareStations().filter(function (station, idx) { return station.isActive; });
                    var activeStation = null;
                    if (Commerce.ArrayExtensions.hasElements(connStations)) {
                        _this.connectedHardwareStation.push(connStations[0]);
                        activeStation = connStations[0];
                    }
                    _this.pairedHardwareStations.removeAll();
                    for (var i = 0; i < _this.hardwareStations().length; ++i) {
                        var station = _this.hardwareStations()[i];
                        if (station.isPaired && !(activeStation && activeStation.recordId === station.recordId)) {
                            _this.pairedHardwareStations.push(station);
                        }
                    }
                });
            };
            return HardwareStationViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.HardwareStationViewModel = HardwareStationViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var HealthCheckDetailsMode;
        (function (HealthCheckDetailsMode) {
            HealthCheckDetailsMode[HealthCheckDetailsMode["About"] = 0] = "About";
            HealthCheckDetailsMode[HealthCheckDetailsMode["Status"] = 1] = "Status";
        })(HealthCheckDetailsMode = ViewModels.HealthCheckDetailsMode || (ViewModels.HealthCheckDetailsMode = {}));
        var HealthCheckViewModel = (function (_super) {
            __extends(HealthCheckViewModel, _super);
            function HealthCheckViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                _this.selectedHealthCheckIndex = -1;
                _this._pageLoadCorrelationId = Commerce.StringExtensions.EMPTY;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw new Error("Invalid options passed to the HealthCheckViewModel constructor: options cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.onClosingHealthCheckView)) {
                    throw new Error("Invalid options passed to the HealthCheckViewModel constructor: onClosingHealthCheckView cannot be null or undefined.");
                }
                _this.healthCheckEntities = ko.observableArray([]);
                _this.selectedHealthCheckEntity = ko.observable(null);
                _this.isHeaderVisible = ko.observable(true);
                _this.isPhoneDetailVisible = ko.observable(false);
                _this.selectedHealthCheckDetailsMode = ko.observable(HealthCheckDetailsMode.About);
                _this.currentHardwareStation = Commerce.HardwareStationEndpointStorage.getActiveHardwareStation();
                _this.currentHardwareStationType = Commerce.Peripherals.HardwareStation.HardwareStationContext.isLocalStation(_this.currentHardwareStation)
                    ? Commerce.ViewModelAdapter.getResourceString("string_30335")
                    : Commerce.ViewModelAdapter.getResourceString("string_30336");
                _this.isCurrentHardwareStationLocal = Commerce.Peripherals.HardwareStation.HardwareStationContext.isLocalStation(_this.currentHardwareStation);
                _this.isHealthCheckEntitySelected = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedHealthCheckEntity());
                });
                _this.isSelectedHealthCheckEntityStatusNotRun = ko.computed(function () {
                    return !_this.isHealthCheckEntitySelected()
                        || Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedHealthCheckEntity().healthCheckStatus)
                        || _this.selectedHealthCheckEntity().healthCheckStatus.healthCheckState === Commerce.Client.Entities.HealthCheckStatusEnum.Pending
                        || _this.selectedHealthCheckEntity().healthCheckStatus.healthCheckState === Commerce.Client.Entities.HealthCheckStatusEnum.Running
                        || _this.selectedHealthCheckEntity().healthCheckStatus.healthCheckState === Commerce.Client.Entities.HealthCheckStatusEnum.NotRun;
                });
                _this.selectedHealthCheckEntityStatusLabel = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedHealthCheckEntity())
                        || Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedHealthCheckEntity().healthCheckStatus)) {
                        return Commerce.ViewModelAdapter.getResourceString("string_30311");
                    }
                    var statusLabel = Commerce.StringExtensions.EMPTY;
                    switch (_this.selectedHealthCheckEntity().healthCheckStatus.healthCheckState) {
                        case Commerce.Client.Entities.HealthCheckStatusEnum.Succeeded:
                            statusLabel = Commerce.ViewModelAdapter.getResourceString("string_30321");
                            break;
                        case Commerce.Client.Entities.HealthCheckStatusEnum.Unsupported:
                            statusLabel = Commerce.ViewModelAdapter.getResourceString("string_30324");
                            break;
                        case Commerce.Client.Entities.HealthCheckStatusEnum.Failed:
                            statusLabel = Commerce.ViewModelAdapter.getResourceString("string_30322");
                            break;
                        case Commerce.Client.Entities.HealthCheckStatusEnum.Pending:
                        case Commerce.Client.Entities.HealthCheckStatusEnum.Running:
                        case Commerce.Client.Entities.HealthCheckStatusEnum.NotRun:
                            statusLabel = Commerce.ViewModelAdapter.getResourceString("string_30311");
                            break;
                    }
                    return statusLabel;
                });
                _this.hasHardwareStation = !Commerce.ObjectExtensions.isNullOrUndefined(_this.currentHardwareStation);
                if (!Commerce.StringExtensions.isNullOrWhitespace(options.correlationId)) {
                    _this._pageLoadCorrelationId = options.correlationId;
                }
                else {
                    _this._pageLoadCorrelationId = Commerce.LoggerHelper.getNewCorrelationId();
                }
                _this._onClosingHealthCheckView = options.onClosingHealthCheckView;
                _this._setHealthCheckEntityListColumns();
                return _this;
            }
            Object.defineProperty(HealthCheckViewModel, "viewExtensionManager", {
                set: function (manager) {
                    HealthCheckViewModel._viewExtensionsManager = manager;
                },
                enumerable: true,
                configurable: true
            });
            HealthCheckViewModel.prototype.loadAsync = function () {
                var _this = this;
                return this._isBusyUntil(this._discoverHealthCheckEntitiesAsync()
                    .done(function (result) {
                    _this.healthCheckEntities(result);
                    var externalEntities = HealthCheckViewModel._viewExtensionsManager.getCustomHealthChecks();
                    externalEntities.forEach(function (item) {
                        _this.healthCheckEntities().push(item);
                    });
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                }));
            };
            HealthCheckViewModel.prototype.onNavigateBack = function () {
                if (Commerce.Config.isPhone && this.isPhoneDetailVisible()) {
                    this.toggleHeader();
                    this.isPhoneDetailVisible(false);
                    return false;
                }
                return true;
            };
            HealthCheckViewModel.prototype.onHidden = function () {
                this._onClosingHealthCheckView();
            };
            HealthCheckViewModel.prototype.reselectHealthCheckEntity = function (viewModel) {
                if (this.selectedHealthCheckIndex >= 0) {
                    viewModel.selectIndex(this.selectedHealthCheckIndex);
                }
            };
            HealthCheckViewModel.prototype.selectHealthCheckEntity = function (healthCheckEntities) {
                this.selectedHealthCheckEntity(Commerce.ArrayExtensions.firstOrUndefined(healthCheckEntities));
                if (Commerce.Config.isPhone && !Commerce.ObjectExtensions.isNullOrUndefined(this.selectedHealthCheckEntity)) {
                    this.isPhoneDetailVisible(true);
                }
            };
            HealthCheckViewModel.prototype.testSelectedHealthCheckAsync = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.selectedHealthCheckEntity())) {
                    this.selectedHealthCheckIndex = this.healthCheckEntities().indexOf(this.selectedHealthCheckEntity());
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.selectedHealthCheckEntity())) {
                    Commerce.RetailLogger.healthCheckPageSelectedEntityWasNull(correlationId);
                    return Commerce.VoidAsyncResult.createRejected();
                }
                else {
                    Commerce.RetailLogger.healthCheckTestSelectedEntityStarted(correlationId, this.selectedHealthCheckEntity().name);
                    return this._isBusyUntil(this._executeHealthCheckAsync(correlationId, this.selectedHealthCheckEntity())
                        .done(function (result) {
                        _this.selectedHealthCheckEntity().healthCheckStatus = result;
                        Commerce.RetailLogger.healthCheckTestSelectedEntitySucceeded(correlationId, JSON.stringify(result));
                    }).fail(function (errors) {
                        _this.selectedHealthCheckEntity().healthCheckStatus = _this._convertToHealthCheckStatus(errors);
                        Commerce.RetailLogger.healthCheckTestSelectedEntityFailed(correlationId, Commerce.ErrorHelper.serializeError(errors));
                    }).always(function () {
                        _this.healthCheckEntities.valueHasMutated();
                    }));
                }
            };
            HealthCheckViewModel.prototype.testAllHealthChecksAsync = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.healthCheckTestAllHealthChecksStarted(correlationId);
                var healthCheckResults = this.healthCheckEntities()
                    .map(function (hce) {
                    return _this._executeHealthCheckAsync(correlationId, hce)
                        .done(function (result) {
                        hce.healthCheckStatus = result;
                    }).fail(function (errors) {
                        hce.healthCheckStatus = _this._convertToHealthCheckStatus(errors);
                        Commerce.RetailLogger.healthCheckTestAllSelectedEntityFailed(correlationId, hce.name, Commerce.ErrorHelper.serializeError(errors));
                    });
                });
                return this._isBusyUntil(Commerce.VoidAsyncResult.join(healthCheckResults))
                    .always(function () {
                    _this.healthCheckEntities.valueHasMutated();
                });
            };
            HealthCheckViewModel.prototype.toggleHeader = function () {
                this.isHeaderVisible(!this.isHeaderVisible());
            };
            HealthCheckViewModel.prototype.toggleHealthCheckDetailsMode = function (mode) {
                this.selectedHealthCheckDetailsMode(mode);
            };
            HealthCheckViewModel.prototype.isSelectedHealthCheckEntityExpectedStatus = function (status) {
                return this.isHealthCheckEntitySelected()
                    && !Commerce.ObjectExtensions.isNullOrUndefined(this.selectedHealthCheckEntity().healthCheckStatus)
                    && this.selectedHealthCheckEntity().healthCheckStatus.healthCheckState === status;
            };
            HealthCheckViewModel.prototype.configurationValueExists = function (configuration) {
                return !Commerce.ObjectExtensions.isNullOrUndefined(configuration)
                    && !Commerce.ObjectExtensions.isNullOrUndefined(configuration.Value)
                    && (!Commerce.StringExtensions.isNullOrWhitespace(configuration.Value.StringValue)
                        || !Commerce.ObjectExtensions.isNullOrUndefined(configuration.Value.BooleanValue)
                        || !Commerce.ObjectExtensions.isNullOrUndefined(configuration.Value.IntegerValue));
            };
            HealthCheckViewModel.prototype._setHealthCheckEntityListColumns = function () {
                this.healthCheckEntityListColumns = [
                    {
                        titleResx: "string_30303",
                        ratio: 20,
                        collapseOrder: 1,
                        minWidth: 50,
                        field: "entityType",
                        converter: "Commerce.Core.Converter.HealthCheckEntityTypeFormatter"
                    },
                    {
                        titleResx: "string_30304",
                        ratio: 30,
                        collapseOrder: 4,
                        minWidth: 150,
                        field: "name"
                    },
                    {
                        titleResx: "string_30305",
                        ratio: 15,
                        collapseOrder: 3,
                        minWidth: 50,
                        field: "$data",
                        converter: "Commerce.Core.Converter.HealthCheckStatusFormatter"
                    },
                    {
                        titleResx: "string_30306",
                        ratio: 35,
                        collapseOrder: 2,
                        minWidth: 150,
                        field: "$data",
                        converter: "Commerce.Core.Converter.HealthCheckTimestampFormatter"
                    }
                ];
            };
            HealthCheckViewModel.prototype._executeHealthCheckAsync = function (correlationId, healthCheckEntity) {
                if (healthCheckEntity instanceof ViewModels.CustomHealthCheckEntityViewModel) {
                    return Commerce.AsyncResult.fromPromise(healthCheckEntity.executeHealthCheckAsync(correlationId));
                }
                var request = new Commerce.HealthCheck.HealthCheckClientRequest(correlationId, healthCheckEntity);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                    .map(function (result) {
                    return (!result.canceled && result.data)
                        ? result.data.result
                        : null;
                });
            };
            HealthCheckViewModel.prototype._discoverHealthCheckEntitiesAsync = function () {
                var request = new Commerce.HealthCheck.HealthCheckDiscoveryClientRequest(this._pageLoadCorrelationId);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                    .map(function (result) {
                    return (!result.canceled && result.data)
                        ? result.data.result
                        : null;
                });
            };
            HealthCheckViewModel.prototype._convertToHealthCheckStatus = function (errors) {
                var error = Commerce.ArrayExtensions.hasElements(errors)
                    ? errors[0]
                    : null;
                var healthCheckStatus = {
                    healthCheckState: Commerce.Client.Entities.HealthCheckStatusEnum.Failed,
                    timestamp: new Date(),
                    result: Commerce.ObjectExtensions.isNullOrUndefined(error)
                        ? { title: null, message: null, errorCode: null }
                        : { title: null, message: Commerce.ErrorHelper.formatErrorMessage(error), errorCode: error.ErrorCode }
                };
                return healthCheckStatus;
            };
            return HealthCheckViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.HealthCheckViewModel = HealthCheckViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var HomeViewModel = (function (_super) {
            __extends(HomeViewModel, _super);
            function HomeViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this.buttonGridData = ko.observableArray([]);
                _this.base64ImageData = ko.observable("");
                _this.initWelcomeScreenLayout();
                return _this;
            }
            HomeViewModel.prototype.isBusyWhen = function (isBusyComputed) {
                this._isBusyWhen(isBusyComputed);
            };
            HomeViewModel.prototype.switchToCurrentStoreCatalog = function (correlationId) {
                var switchProductCatalogClientRequest = new Commerce.Products.SwitchProductCatalogClientRequest(correlationId, Commerce.Proxy.Entities.StoreButtonControlType.CurrentStore);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(switchProductCatalogClientRequest))
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            HomeViewModel.prototype.initWelcomeScreenLayout = function () {
                var _this = this;
                var welcomeScreenZones = ["WelcomeScreen1", "WelcomeScreen2", "WelcomeScreen3", "WelcomeScreen4", "WelcomeScreen5"];
                var tillLayoutProxy = Commerce.ApplicationContext.Instance.tillLayoutProxy;
                var buttonGrids = tillLayoutProxy.getButtonGridByZoneIds(welcomeScreenZones);
                var imageZones = tillLayoutProxy.getImageZones(["WelcomeScreen1"]);
                if (Commerce.ArrayExtensions.hasElements(imageZones) && !Commerce.StringExtensions.isNullOrWhitespace(imageZones[0].PictureAsBase64)) {
                    this.base64ImageData(imageZones[0].PictureAsBase64);
                }
                this.hasBackgroundImageData = ko.computed(function () {
                    return !Commerce.StringExtensions.isNullOrWhitespace(_this.base64ImageData());
                });
                this.buttonGridData(buttonGrids.getItems());
            };
            return HomeViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.HomeViewModel = HomeViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var InventoryAvailableToPromiseViewModel = (function (_super) {
            __extends(InventoryAvailableToPromiseViewModel, _super);
            function InventoryAvailableToPromiseViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                options = options || {};
                _this.product = ko.observable(options.product);
                _this.location = ko.observable(options.location);
                _this.availabilities = ko.observableArray([]);
                _this.hasItemAvailabilities = ko.computed(function () {
                    return Commerce.ArrayExtensions.hasElements(_this.availabilities());
                }, _this);
                _this.variantDimensionValues = ko.computed(function () {
                    return Commerce.SimpleProductHelper.getVariantDescription(_this.product());
                }, _this);
                _this.hasProduct = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.product());
                }, _this);
                _this.productImage = ko.observable({ source: Commerce.StringExtensions.EMPTY, altText: Commerce.StringExtensions.EMPTY });
                _this.productName = ko.computed(function () {
                    return _this.hasProduct() ? _this.product().Name : Commerce.StringExtensions.EMPTY;
                }, _this);
                _this.productItemId = ko.computed(function () {
                    return _this.hasProduct() ? _this.product().ItemId : Commerce.StringExtensions.EMPTY;
                }, _this);
                _this.locationName = ko.observable("");
                _this.allowAddToTransaction = ko.computed(function () {
                    return _this.hasProduct();
                }, _this);
                _this.searchKeyword = ko.observable("");
                _this._productPriceViewModel = new ViewModels.ProductPriceViewModel(context);
                _this._options = options;
                _this.availabilities = ko.observableArray([]);
                return _this;
            }
            Object.defineProperty(InventoryAvailableToPromiseViewModel.prototype, "productPriceViewModel", {
                get: function () {
                    return this._productPriceViewModel;
                },
                enumerable: true,
                configurable: true
            });
            InventoryAvailableToPromiseViewModel.prototype.loadAsync = function () {
                var _this = this;
                var CORRELATION_ID = Commerce.LoggerHelper.getNewCorrelationId();
                var getInventoriesQueue = new Commerce.AsyncQueue();
                getInventoriesQueue.enqueue(function () {
                    return _this._getInventoryAvailableToPromise(CORRELATION_ID);
                });
                return this._isBusyUntil(getInventoriesQueue.run());
            };
            InventoryAvailableToPromiseViewModel.prototype.setNumPadPublisher = function (value) {
                this._numPadPublisher = value;
            };
            Object.defineProperty(InventoryAvailableToPromiseViewModel.prototype, "selectedStoreNumber", {
                get: function () {
                    return Commerce.ObjectExtensions.isNullOrUndefined(this._selectedStoreAvailability) ?
                        this.applicationContext.storeNumber :
                        this._selectedStoreAvailability.OrgUnitLocation.OrgUnitNumber;
                },
                enumerable: true,
                configurable: true
            });
            InventoryAvailableToPromiseViewModel.prototype.findInventoriesByKeyword = function () {
                var _this = this;
                if (Commerce.StringExtensions.isNullOrWhitespace(this.searchKeyword())) {
                    return Commerce.AsyncResult.createResolved({ canceled: true });
                }
                var CORRELATION_ID = Commerce.LoggerHelper.getNewCorrelationId();
                this.availabilities([]);
                this.product(undefined);
                var findInventoriesQueue = new Commerce.AsyncQueue();
                var productSearchResults;
                findInventoriesQueue.enqueue(function () {
                    return findInventoriesQueue.cancelOn(_this._getProductByText(_this.searchKeyword(), CORRELATION_ID))
                        .done(function (getProductResult) {
                        if (!getProductResult.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(getProductResult.data)) {
                            _this.product(getProductResult.data);
                        }
                    });
                });
                findInventoriesQueue.enqueue(function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.product())) {
                        return _this._getInventoryAvailableToPromise(CORRELATION_ID);
                    }
                    else {
                        var pageSize = 1;
                        var skip = 0;
                        return _this.productManager.searchByTextAsync(_this.searchKeyword(), _this._channelId, _this._catalogId, pageSize, skip).done(function (searchResults) {
                            productSearchResults = searchResults;
                        });
                    }
                });
                return this._isBusyUntil(findInventoriesQueue.run()).done(function (queueResult) {
                    if (!queueResult.canceled) {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(_this.product()) && !Commerce.ArrayExtensions.hasElements(productSearchResults)) {
                            Commerce.ViewModelAdapter.displayMessage("string_3382", Commerce.MessageType.Error, Commerce.MessageBoxButtons.Default, "string_3381");
                        }
                        else if (Commerce.ArrayExtensions.hasElements(productSearchResults)) {
                            _this.searchForProduct();
                        }
                    }
                }).fail(function (errors) {
                    if (!Commerce.ErrorHelper.hasError(errors, "Microsoft_Dynamics_Commerce_Runtime_HeadquarterResponseParsingError") ||
                        (Commerce.ArrayExtensions.hasElements(errors) && errors.length > 1)) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    }
                });
            };
            InventoryAvailableToPromiseViewModel.prototype.searchForProduct = function () {
                var productSelectionHandler = new Commerce.CancelableSelectionHandler(function (result) {
                    var returnOptions = {
                        product: result.simpleProduct
                    };
                    Commerce.ViewModelAdapter.collapseAndNavigate("InventoryLookupView", returnOptions);
                }, function () {
                    Commerce.ViewModelAdapter.collapse("InventoryLookupView");
                });
                var parameters = {
                    searchText: this.searchKeyword(),
                    searchEntity: ViewModels.SearchViewSearchEntity.Product,
                    selectionMode: ViewModels.SearchViewSelectionMode.Product,
                    productSelectionOptions: {
                        productSelectionHandler: productSelectionHandler,
                        allowKitMasterSelection: false
                    },
                    correlationId: Commerce.StringExtensions.EMPTY
                };
                Commerce.ViewModelAdapter.navigate("SearchView", parameters);
            };
            InventoryAvailableToPromiseViewModel.prototype.onShown = function () {
                var _this = this;
                Commerce.Peripherals.instance.numPad.enable(this._numPadPublisher);
                Commerce.Peripherals.instance.barcodeScanner.enableAsync(function (barcode) {
                    _this.searchKeyword(barcode);
                    _this.findInventoriesByKeyword();
                });
            };
            InventoryAvailableToPromiseViewModel.prototype.onHidden = function () {
                Commerce.Peripherals.instance.barcodeScanner.disableAsync();
                Commerce.Peripherals.instance.numPad.disable();
            };
            InventoryAvailableToPromiseViewModel.prototype.addToTransaction = function () {
                var options = {
                    productSaleDetails: [{
                            product: this.product(), quantity: 0
                        }]
                };
                return this._isBusyUntil(this.operationsManager.runOperation(Commerce.Operations.RetailOperation.ItemSale, options))
                    .done(function (result) {
                    if (!result.canceled) {
                        Commerce.ViewModelAdapter.navigate("CartView");
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            InventoryAvailableToPromiseViewModel.prototype._getInventoryAvailableToPromise = function (correlationId) {
                var _this = this;
                var request = new Commerce.GetInventoryAvailableToPromiseRequest(correlationId);
                request.product = this.product();
                request.location = this._options.location;
                var getInventoriesQueue = new Commerce.AsyncQueue();
                getInventoriesQueue.enqueue(function () {
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                        .done(function (result) {
                        if (!result.canceled) {
                            _this.availabilities(result.data.availabilities);
                            _this.location(request.location);
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.location())) {
                                _this.locationName(_this.location().OrgUnitName);
                            }
                        }
                    })
                        .fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }).enqueue(function () {
                    var productPriceResult = _this._productPriceViewModel.loadAsync(_this.product().RecordId, _this.product().DefaultUnitOfMeasure);
                    var getProductImageResult;
                    if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                        _this.productImage({ source: _this.product().PrimaryImageUrl, altText: _this.product().Name });
                        getProductImageResult = Commerce.VoidAsyncResult.createResolved();
                    }
                    else {
                        var pageSize = 1;
                        var skip = 0;
                        getProductImageResult = _this.productManager.getMediaBlobsAsync(_this.product().RecordId, _this._channelId, _this._catalogId, pageSize, skip).done(function (mediaBlobs) {
                            var source = Commerce.StringExtensions.EMPTY;
                            var altText = _this.product().Name;
                            var mediaBlob = Commerce.ArrayExtensions.firstOrUndefined(mediaBlobs);
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(mediaBlob)) {
                                source = mediaBlob.Content;
                                altText = mediaBlob.AltText;
                            }
                            _this.productImage({ source: source, altText: altText });
                        });
                    }
                    return Commerce.VoidAsyncResult.join([productPriceResult, getProductImageResult]);
                });
                return getInventoriesQueue.run();
            };
            InventoryAvailableToPromiseViewModel.prototype._getProductByText = function (searchText, correlationId) {
                var _this = this;
                var getProductByKeyWordQueue = new Commerce.AsyncQueue();
                var product;
                getProductByKeyWordQueue.enqueue(function () {
                    var scanResultAsyncResult = new Commerce.VoidAsyncResult();
                    var scanResultRequest = new Commerce.GetScanResultClientRequest(searchText, correlationId);
                    _this.context.runtime.executeAsync(scanResultRequest)
                        .then(function (result) {
                        if (result.canceled || Commerce.ObjectExtensions.isNullOrUndefined(result.data)) {
                            getProductByKeyWordQueue.cancel();
                            scanResultAsyncResult.resolve();
                            return;
                        }
                        var scanResult = result.data.result;
                        var scanResultType = scanResult.MaskTypeValue;
                        if (scanResultType === Commerce.Proxy.Entities.BarcodeMaskType.Item) {
                            product = scanResult.Product;
                            scanResultAsyncResult.resolve();
                        }
                        else if (scanResultType === Commerce.Proxy.Entities.BarcodeMaskType.None) {
                            scanResultAsyncResult.resolve();
                        }
                        else {
                            var unsupportedScanTypeError = new Commerce.Proxy.Entities.Error("string_2626");
                            scanResultAsyncResult.reject([unsupportedScanTypeError]);
                        }
                    }).catch(function (reason) {
                        var errors = Commerce.ErrorHelper.toProxyErrors(reason);
                        scanResultAsyncResult.reject(errors);
                    });
                    return scanResultAsyncResult;
                }).enqueue(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(product)
                        || product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Variant
                        || product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Standalone
                        || product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.KitVariant) {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                    else if (product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Master) {
                        var selectProductVariantClientRequest = new Commerce.Products.SelectProductVariantClientRequest(product);
                        return getProductByKeyWordQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(selectProductVariantClientRequest)))
                            .done(function (variantSelectionResult) {
                            if (!variantSelectionResult.canceled) {
                                product = variantSelectionResult.data.result;
                            }
                        });
                    }
                    else {
                        _this.navigateToProductDetails(product);
                        getProductByKeyWordQueue.cancel();
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                });
                return getProductByKeyWordQueue.run().map(function (queueResult) {
                    return { canceled: queueResult.canceled, data: product };
                });
            };
            InventoryAvailableToPromiseViewModel.prototype.navigateToProductDetails = function (product) {
                var productSelectionHandler = new Commerce.CancelableSelectionHandler(function (selectionResult) {
                    var returnOptions = {
                        product: selectionResult.simpleProduct
                    };
                    Commerce.ViewModelAdapter.collapseAndNavigate("InventoryLookupView", returnOptions);
                }, function () {
                    Commerce.ViewModelAdapter.collapse("InventoryLookupView");
                });
                var productDetailOptions = {
                    productId: product.RecordId,
                    product: product,
                    isSelectionMode: true,
                    selectionOptions: {
                        productSelectionHandler: productSelectionHandler
                    },
                    correlationId: Commerce.StringExtensions.EMPTY
                };
                Commerce.ViewModelAdapter.navigate("SimpleProductDetailsView", productDetailOptions);
            };
            Object.defineProperty(InventoryAvailableToPromiseViewModel.prototype, "_catalogId", {
                get: function () {
                    return Commerce.Session.instance.productCatalogStore.Context.CatalogId;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(InventoryAvailableToPromiseViewModel.prototype, "_channelId", {
                get: function () {
                    return Commerce.Session.instance.productCatalogStore.Context.ChannelId;
                },
                enumerable: true,
                configurable: true
            });
            return InventoryAvailableToPromiseViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.InventoryAvailableToPromiseViewModel = InventoryAvailableToPromiseViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var InventoryLookupViewModel = (function (_super) {
            __extends(InventoryLookupViewModel, _super);
            function InventoryLookupViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                options = options || {};
                _this.product = ko.observable(options.product);
                _this.stores = ko.observableArray([]);
                _this.currentStoreItemAvailabilites = ko.observableArray([]);
                _this._searchCriteria = {};
                _this.reloadStoreAndWarehouseAvailabilityCallback = ko.observable(function () { return; });
                _this.hasItemAvailabilities = ko.computed(function () {
                    return Commerce.ArrayExtensions.hasElements(_this.currentStoreItemAvailabilites());
                }, _this);
                _this.variantDimensionValues = ko.computed(function () {
                    return Commerce.SimpleProductHelper.getVariantDescription(_this.product());
                }, _this);
                _this.searchKeyword = ko.observable("");
                _this.hasProduct = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.product());
                }, _this);
                _this.productNotAvailableAtNearbyStores = ko.computed(function () {
                    return _this.hasProduct() && !Commerce.ArrayExtensions.hasElements(_this.stores()) && !_this.isBusy();
                }, _this);
                _this.isCurrentStoreSelected = ko.observable(true);
                _this.allowAddToTransaction = ko.computed(function () {
                    return _this.hasProduct() && _this.isCurrentStoreSelected();
                }, _this);
                _this.productItemId = ko.computed(function () {
                    return _this.hasProduct() ? _this.product().ItemId : Commerce.StringExtensions.EMPTY;
                }, _this);
                _this.productName = ko.computed(function () {
                    return _this.hasProduct() ? _this.product().Name : Commerce.StringExtensions.EMPTY;
                }, _this);
                _this.isAnyStoreSelected = ko.observable(false);
                _this.isAnyLocationSelected = ko.observable(false);
                _this.productImage = ko.observable({ source: Commerce.StringExtensions.EMPTY, altText: Commerce.StringExtensions.EMPTY });
                _this.allowViewAllVariants = ko.computed(function () {
                    return _this.hasProduct()
                        && _this.product().ProductTypeValue !== Commerce.Proxy.Entities.ProductType.KitMaster
                        && _this.product().ProductTypeValue !== Commerce.Proxy.Entities.ProductType.KitVariant
                        && _this.product().ProductTypeValue !== Commerce.Proxy.Entities.ProductType.Standalone
                        && (_this.isAnyStoreSelected() || !_this.isAnyLocationSelected());
                }, _this);
                _this.allowShowFilter = ko.computed(function () {
                    return _this.hasProduct();
                }, _this);
                _this._productPriceViewModel = new ViewModels.ProductPriceViewModel(context);
                _this._isExtensionCommandViewModelBusy = ko.observable(false);
                if (Commerce.ObjectExtensions.isNullOrUndefined(InventoryLookupViewModel._viewExtensionsManager)) {
                    _this._extensionCommandViewModels = [];
                }
                else {
                    _this._extensionCommandViewModels = InventoryLookupViewModel._viewExtensionsManager.getAppBarCommands()
                        .map(function (command) {
                        var commandVM = new ViewModels.CommandViewModel(command);
                        commandVM.addMessageHandler("IsProcessingChanged", function (isProcessing) {
                            if (isProcessing) {
                                _this._isExtensionCommandViewModelBusy(true);
                            }
                            else {
                                var isAnyCommandProcessing = _this._extensionCommandViewModels.some(function (vm) {
                                    return vm.isProcessing;
                                });
                                _this._isExtensionCommandViewModelBusy(isAnyCommandProcessing);
                            }
                        });
                        return commandVM;
                    });
                    _this._isBusyWhen(_this._isExtensionCommandViewModelBusy);
                }
                _this._selectedStoreAvailability = null;
                _this._isBusyFlag = ko.observable(false);
                _this._isBusyWhen(ko.computed(function () { return _this._isBusyFlag(); }));
                _this._setInventoryByStoreListColumns();
                return _this;
            }
            Object.defineProperty(InventoryLookupViewModel, "viewExtensionManager", {
                set: function (manager) {
                    InventoryLookupViewModel._viewExtensionsManager = manager;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(InventoryLookupViewModel.prototype, "productPriceViewModel", {
                get: function () {
                    return this._productPriceViewModel;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(InventoryLookupViewModel.prototype, "selectedStoreNumber", {
                get: function () {
                    return Commerce.ObjectExtensions.isNullOrUndefined(this._selectedStoreAvailability) ?
                        this.applicationContext.storeNumber :
                        this._selectedStoreAvailability.OrgUnitLocation.OrgUnitNumber;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(InventoryLookupViewModel.prototype, "_channelId", {
                get: function () {
                    return Commerce.Session.instance.productCatalogStore.Context.ChannelId;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(InventoryLookupViewModel.prototype, "_catalogId", {
                get: function () {
                    return Commerce.Session.instance.productCatalogStore.Context.CatalogId;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(InventoryLookupViewModel.prototype, "extensionCommandViewModels", {
                get: function () {
                    return this._extensionCommandViewModels;
                },
                enumerable: true,
                configurable: true
            });
            InventoryLookupViewModel.prototype.loadAsync = function () {
                var _this = this;
                var loadQueue = new Commerce.AsyncQueue();
                var loadResult = new Commerce.VoidAsyncResult();
                this._isBusyUntil(loadResult);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.product())) {
                    var loadedProduct_1 = this.product();
                    loadQueue.enqueue(function () {
                        if (loadedProduct_1.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Master) {
                            return loadQueue.cancelOn(_this._getProductVariant(_this.product()))
                                .done(function (variantSelectionResult) {
                                if (!Commerce.ObjectExtensions.isNullOrUndefined(variantSelectionResult)) {
                                    _this.product(variantSelectionResult.data);
                                }
                            });
                        }
                        else {
                            _this.product(loadedProduct_1);
                            return Commerce.VoidAsyncResult.createResolved();
                        }
                    }).enqueue(function () {
                        return _this._getInventoriesByProduct();
                    });
                }
                loadQueue.run().done(function () {
                    _this.extensionCommandViewModels.forEach(function (vm) {
                        vm.sendMessage("Initialize", { product: _this.product(), locationAvailabilities: _this.stores() });
                    });
                    loadResult.resolve();
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                    loadResult.reject(errors);
                });
                return loadResult;
            };
            InventoryLookupViewModel.prototype.storeSelectionChanged = function (storeSelection) {
                if (!Commerce.ArrayExtensions.hasElements(storeSelection)) {
                    this.isAnyStoreSelected(false);
                    this.isAnyLocationSelected(false);
                    this._updateSelectedStoreAvailabilityInformation();
                }
                else {
                    this.isAnyLocationSelected(true);
                    var nonStoreWarehouseIdentifier = 0;
                    if (storeSelection[0].OrgUnitLocation.ChannelId === nonStoreWarehouseIdentifier) {
                        this.isAnyStoreSelected(false);
                    }
                    else {
                        this.isAnyStoreSelected(true);
                    }
                    this._updateSelectedStoreAvailabilityInformation(storeSelection[0]);
                }
            };
            InventoryLookupViewModel.prototype.findInventoriesByKeyword = function () {
                var _this = this;
                var searchKeyword = this.searchKeyword();
                if (Commerce.StringExtensions.isNullOrWhitespace(searchKeyword)) {
                    return Commerce.AsyncResult.createResolved({ canceled: true });
                }
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.viewModelInventoryLookupViewModelFindInventoriesByKeywordStarted(correlationId, searchKeyword);
                this.stores([]);
                this.product(undefined);
                this._searchCriteria = null;
                var findInventoriesQueue = new Commerce.AsyncQueue();
                var productSearchResults;
                findInventoriesQueue.enqueue(function () {
                    return findInventoriesQueue.cancelOn(_this._getProductByText(searchKeyword, correlationId))
                        .done(function (getProductResult) {
                        if (!getProductResult.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(getProductResult.data)) {
                            _this.product(getProductResult.data);
                        }
                    });
                });
                findInventoriesQueue.enqueue(function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.product())) {
                        return _this._getInventoriesByProduct();
                    }
                    else {
                        var pageSize = 1;
                        var skip = 0;
                        return _this.productManager.searchByTextAsync(_this.searchKeyword(), _this._channelId, _this._catalogId, pageSize, skip).done(function (searchResults) {
                            productSearchResults = searchResults;
                        });
                    }
                });
                return this._isBusyUntil(findInventoriesQueue.run()).done(function (queueResult) {
                    if (!queueResult.canceled) {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(_this.product()) && !Commerce.ArrayExtensions.hasElements(productSearchResults)) {
                            Commerce.ViewModelAdapter.displayMessage("string_3382", Commerce.MessageType.Error, Commerce.MessageBoxButtons.Default, "string_3381");
                        }
                        else if (Commerce.ArrayExtensions.hasElements(productSearchResults)) {
                            _this.searchForProduct();
                        }
                    }
                }).fail(function (errors) {
                    if (!Commerce.ErrorHelper.hasError(errors, "Microsoft_Dynamics_Commerce_Runtime_HeadquarterResponseParsingError") ||
                        (Commerce.ArrayExtensions.hasElements(errors) && errors.length > 1)) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    }
                }).always(function () {
                    Commerce.RetailLogger.viewModelInventoryLookupViewModelFindInventoriesByKeywordFinished(correlationId);
                });
            };
            InventoryLookupViewModel.prototype.setNumPadPublisher = function (value) {
                this._numPadPublisher = value;
            };
            InventoryLookupViewModel.prototype.addToTransaction = function () {
                var options = {
                    productSaleDetails: [{
                            product: this.product(), quantity: 0
                        }]
                };
                return this._isBusyUntil(this.operationsManager.runOperation(Commerce.Operations.RetailOperation.ItemSale, options))
                    .done(function (result) {
                    if (!result.canceled) {
                        Commerce.ViewModelAdapter.navigate("CartView");
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            InventoryLookupViewModel.prototype.viewAllVariants = function () {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.product().MasterProductId)) {
                    this._isBusyUntil(this.productManager.getByIdAsync(this.product().MasterProductId, this._channelId))
                        .done(function (product) {
                        var selectedOrgUnit;
                        if (_this.isAnyStoreSelected()) {
                            selectedOrgUnit = Commerce.Proxy.Entities.StoreLocationWrapper.convertToOrgUnit(_this._selectedStoreAvailability.OrgUnitLocation);
                        }
                        var inventoryLookupMatrixViewOptions = {
                            product: product,
                            selectedStore: selectedOrgUnit
                        };
                        Commerce.ViewModelAdapter.navigate("InventoryLookupMatrixView", inventoryLookupMatrixViewOptions);
                    }).fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }
            };
            InventoryLookupViewModel.prototype.pickUpInStore = function () {
                var _this = this;
                var pickUpInStoreQueue = new Commerce.AsyncQueue();
                var cart = Commerce.Session.instance.cart;
                var requestedPickupDate;
                var customerOrderType;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                if (!Commerce.CustomerOrderHelper.isCustomerOrderOrQuoteCreationOrEdition(cart)) {
                    pickUpInStoreQueue.enqueue(function () {
                        var selectOrderTypeRequest = new Commerce.SalesOrders.SelectCustomerOrderTypeClientRequest(correlationId);
                        return pickUpInStoreQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(selectOrderTypeRequest)))
                            .done(function (customerOrderTypeResult) {
                            if (!customerOrderTypeResult.canceled) {
                                customerOrderType = customerOrderTypeResult.data.result;
                            }
                        });
                    });
                }
                pickUpInStoreQueue.enqueue(function () {
                    var shippingDateActivityParameters = {
                        title: Commerce.ViewModelAdapter.getResourceString("string_2505"),
                        subTitle: Commerce.StringExtensions.EMPTY,
                        dateInputLabel: Commerce.ViewModelAdapter.getResourceString("string_2507"),
                        originalShippingDate: Commerce.DeliveryHelper.getDeliveryDate(Commerce.Session.instance.cart, []),
                        deliveryMethodDescription: Commerce.StringExtensions.EMPTY
                    };
                    var getShippingDateActivity = new Commerce.Activities.GetShippingDateActivity(shippingDateActivityParameters);
                    return getShippingDateActivity.execute().done(function () {
                        if (!getShippingDateActivity.response) {
                            pickUpInStoreQueue.cancel();
                            return;
                        }
                        var activityResponse = getShippingDateActivity.response;
                        requestedPickupDate = activityResponse.requestedShippingDate;
                    });
                });
                if (!Commerce.CustomerOrderHelper.isCustomerOrderOrQuoteCreationOrEdition(cart)) {
                    pickUpInStoreQueue.enqueue(function () {
                        switch (customerOrderType) {
                            case Commerce.Proxy.Entities.CustomerOrderType.SalesOrder:
                                var options = {
                                    cart: Commerce.Session.instance.cart
                                };
                                return pickUpInStoreQueue.cancelOn(_this.operationsManager.runOperation(Commerce.Operations.RetailOperation.CreateCustomerOrder, options));
                            case Commerce.Proxy.Entities.CustomerOrderType.Quote:
                                var createCustomerQuoteOperationRequest = new Commerce.CreateCustomerQuoteOperationRequest(correlationId);
                                return pickUpInStoreQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(createCustomerQuoteOperationRequest)));
                            default:
                                pickUpInStoreQueue.cancel();
                                return Commerce.VoidAsyncResult.createResolved();
                        }
                    });
                }
                pickUpInStoreQueue.enqueue(function () {
                    return _this.addProductPickUpToCart(_this._selectedStoreAvailability.OrgUnitLocation, requestedPickupDate);
                });
                return pickUpInStoreQueue.run().done(function (queueResult) {
                    if (!queueResult.canceled) {
                        Commerce.ViewModelAdapter.navigate("CartView");
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            InventoryLookupViewModel.prototype.shipFromStoreAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                var cart = Commerce.Session.instance.cart;
                var customerOrderType;
                var createOfflineCustomerOrders = Commerce.ApplicationContext.Instance.deviceConfiguration.CreateOfflineCustomerOrders;
                var lineIdsByLineId = {};
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                if (Commerce.Session.instance.connectionStatus !== Commerce.Client.Entities.ConnectionStatusType.Online || createOfflineCustomerOrders) {
                    Commerce.NotificationHandler.displayErrorMessage("string_2559");
                    return Commerce.AsyncResult.createResolved({ canceled: true });
                }
                if (!Commerce.CustomerOrderHelper.isCustomerOrderOrQuoteCreationOrEdition(cart)) {
                    asyncQueue.enqueue(function () {
                        var selectOrderTypeRequest = new Commerce.SalesOrders.SelectCustomerOrderTypeClientRequest(correlationId);
                        return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(selectOrderTypeRequest)))
                            .done(function (customerOrderTypeResult) {
                            if (!customerOrderTypeResult.canceled) {
                                customerOrderType = customerOrderTypeResult.data.result;
                            }
                        });
                    }).enqueue(function () {
                        switch (customerOrderType) {
                            case Commerce.Proxy.Entities.CustomerOrderType.SalesOrder:
                                var options = {
                                    cart: Commerce.Session.instance.cart
                                };
                                return asyncQueue.cancelOn(_this.operationsManager.runOperation(Commerce.Operations.RetailOperation.CreateCustomerOrder, options));
                            case Commerce.Proxy.Entities.CustomerOrderType.Quote:
                                var createCustomerQuoteOperationRequest = new Commerce.CreateCustomerQuoteOperationRequest(correlationId);
                                return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(createCustomerQuoteOperationRequest)));
                            default:
                                asyncQueue.cancel();
                                return Commerce.VoidAsyncResult.createResolved();
                        }
                    });
                }
                asyncQueue.enqueue(function () {
                    Commerce.Session.instance.cart.CartLines.forEach(function (c) { lineIdsByLineId[c.LineId] = c.LineId; });
                    var options = {
                        productSaleDetails: [
                            { product: _this.product(), quantity: 0 }
                        ]
                    };
                    return asyncQueue.cancelOn(_this.operationsManager.runOperation(Commerce.Operations.RetailOperation.ItemSale, options));
                }).enqueue(function () {
                    var cart = Commerce.Session.instance.cart;
                    var isAggregateLine = Commerce.ApplicationContext.Instance.deviceConfiguration.AllowItemsAggregation;
                    var newCartLineAsArray = cart.CartLines.filter(function (c) {
                        return c.ProductId === _this.product().RecordId && (isAggregateLine || (!isAggregateLine && !lineIdsByLineId[c.LineId]));
                    });
                    var selectedStore = Commerce.ApplicationContext.Instance.availableStores.getItem(_this.selectedStoreNumber);
                    var isShipAll = Commerce.CartHelper.areAllCartLinesSelected(cart, newCartLineAsArray);
                    if (isShipAll) {
                        var shippingInformation = {
                            fulfillmentOrgUnit: selectedStore,
                            shippingAddress: null
                        };
                        var shipAllOperationRequest = new Commerce.Cart.ShipAllCartLinesOperationRequest(correlationId, shippingInformation);
                        return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(shipAllOperationRequest)));
                    }
                    else {
                        var shippingInformation = {
                            fulfillmentOrgUnit: selectedStore,
                            shippingAddress: null
                        };
                        var shipSelectedOperationRequest = new Commerce.Cart.ShipSelectedCartLinesOperationRequest(correlationId, newCartLineAsArray, shippingInformation);
                        return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(shipSelectedOperationRequest)));
                    }
                });
                return asyncQueue.run().done(function (result) {
                    if (!result.canceled) {
                        Commerce.ViewModelAdapter.navigate("CartView");
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            InventoryLookupViewModel.prototype.searchForProduct = function () {
                var productSelectionHandler = new Commerce.CancelableSelectionHandler(function (result) {
                    var returnOptions = {
                        product: result.simpleProduct
                    };
                    Commerce.ViewModelAdapter.collapseAndNavigate("InventoryLookupView", returnOptions);
                }, function () {
                    Commerce.ViewModelAdapter.collapse("InventoryLookupView");
                });
                var parameters = {
                    searchText: this.searchKeyword(),
                    searchEntity: ViewModels.SearchViewSearchEntity.Product,
                    selectionMode: ViewModels.SearchViewSelectionMode.Product,
                    productSelectionOptions: {
                        productSelectionHandler: productSelectionHandler,
                        allowKitMasterSelection: false
                    },
                    correlationId: Commerce.StringExtensions.EMPTY
                };
                Commerce.ViewModelAdapter.navigate("SearchView", parameters);
            };
            InventoryLookupViewModel.prototype.onShown = function () {
                var _this = this;
                Commerce.Peripherals.instance.numPad.enable(this._numPadPublisher);
                Commerce.Peripherals.instance.barcodeScanner.enableAsync(function (barcode) {
                    _this.searchKeyword(barcode);
                    _this.findInventoriesByKeyword();
                });
            };
            InventoryLookupViewModel.prototype.onHidden = function () {
                Commerce.Peripherals.instance.barcodeScanner.disableAsync();
                Commerce.Peripherals.instance.numPad.disable();
            };
            InventoryLookupViewModel.prototype.showStoreLocation = function () {
                var storeDetailsOptions = {
                    storeId: this.selectedStoreNumber
                };
                Commerce.ViewModelAdapter.navigate("StoreDetailsView", storeDetailsOptions);
            };
            InventoryLookupViewModel.prototype.showStoreAvailableToPromise = function () {
                var availableToPromiseOptions = {
                    product: this.product(),
                    location: this._selectedStoreAvailability.OrgUnitLocation
                };
                Commerce.ViewModelAdapter.navigate("InventoryAvailableToPromiseView", availableToPromiseOptions);
            };
            InventoryLookupViewModel.prototype.filterOrgUnitAvailabilityAsync = function () {
                var _this = this;
                var refiners = Commerce.OrgUnitAvailabilitySearchCriteriaConverter.getRefiners(this._searchCriteria);
                var getRefinerValuesRequest = new Commerce.Refiners.GetRefinerValuesClientRequest(refiners, "string_4189", false, Commerce.ErrorTypeEnum.INVALID_SEARCH_CRITERIA);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getRefinerValuesRequest))
                    .done(function (result) {
                    if (!result.canceled) {
                        _this._searchCriteria = Commerce.OrgUnitAvailabilitySearchCriteriaConverter.getOrgUnitAvailabilitySearchCriteria(result.data.refiners);
                        _this.reloadStoreAndWarehouseAvailabilityCallback()();
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            InventoryLookupViewModel.prototype.getOrgUnitAvailabilityAsync = function (pageSize, skip) {
                var _this = this;
                if (this.hasProduct()) {
                    return this.productManager.searchProductAvailabilityAsync(this.product().RecordId, this._searchCriteria, pageSize, skip)
                        .done(function (data) {
                        if (data) {
                            data.forEach(function (store) {
                                _this.stores.push(store);
                            });
                            _this._updateSelectedStoreAvailabilityInformation();
                            _this._sendMessageToExtensions("ProductChanged", {
                                product: _this.product(),
                                locationAvailabilities: _this.stores()
                            });
                        }
                    }).fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }
                else {
                    return Commerce.AsyncResult.createResolved();
                }
            };
            Object.defineProperty(InventoryLookupViewModel.prototype, "isBusyFlag", {
                get: function () {
                    return this._isBusyFlag;
                },
                enumerable: true,
                configurable: true
            });
            InventoryLookupViewModel.prototype._getInventoriesByProduct = function () {
                var _this = this;
                this.reloadStoreAndWarehouseAvailabilityCallback()();
                var getInventoriesQueue = new Commerce.AsyncQueue();
                getInventoriesQueue.enqueue(function () {
                    var productPriceResult = _this._productPriceViewModel.loadAsync(_this.product().RecordId, _this.product().DefaultUnitOfMeasure);
                    var getProductImageResult;
                    if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                        _this.productImage({ source: _this.product().PrimaryImageUrl, altText: _this.product().Name });
                        getProductImageResult = Commerce.VoidAsyncResult.createResolved();
                    }
                    else {
                        var pageSize = 1;
                        var skip = 0;
                        getProductImageResult = _this.productManager.getMediaBlobsAsync(_this.product().RecordId, _this._channelId, _this._catalogId, pageSize, skip).done(function (mediaBlobs) {
                            var source = Commerce.StringExtensions.EMPTY;
                            var altText = _this.product().Name;
                            var mediaBlob = Commerce.ArrayExtensions.firstOrUndefined(mediaBlobs);
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(mediaBlob)) {
                                source = mediaBlob.Content;
                                altText = mediaBlob.AltText;
                            }
                            _this.productImage({ source: source, altText: altText });
                        });
                    }
                    return Commerce.VoidAsyncResult.join([productPriceResult, getProductImageResult]);
                });
                return getInventoriesQueue.run();
            };
            InventoryLookupViewModel.prototype._updateSelectedStoreAvailabilityInformation = function (orgUnitAvailability) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(orgUnitAvailability)) {
                    this._selectedStoreAvailability = Commerce.ArrayExtensions.firstOrUndefined(this.stores(), function (store) {
                        return store.OrgUnitLocation.OrgUnitNumber === _this.applicationContext.storeNumber;
                    });
                    this._sendMessageToExtensions("LocationSelectionCleared", undefined);
                }
                else {
                    this._selectedStoreAvailability = orgUnitAvailability;
                    this._sendMessageToExtensions("LocationSelected", { locationAvailability: this._selectedStoreAvailability });
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._selectedStoreAvailability)
                    || this._selectedStoreAvailability.OrgUnitLocation.OrgUnitNumber !== this.applicationContext.storeInformation.OrgUnitNumber) {
                    this.isCurrentStoreSelected(false);
                }
                else {
                    var itemAvailabilities = Commerce.ObjectExtensions.isNullOrUndefined(this._selectedStoreAvailability) ? [] : this._selectedStoreAvailability.ItemAvailabilities;
                    this.currentStoreItemAvailabilites(itemAvailabilities);
                    this.isCurrentStoreSelected(true);
                }
            };
            InventoryLookupViewModel.prototype._getProductByText = function (searchText, correlationId) {
                var _this = this;
                var getProductByKeyWordQueue = new Commerce.AsyncQueue();
                var product;
                getProductByKeyWordQueue.enqueue(function () {
                    var scanResultAsyncResult = new Commerce.VoidAsyncResult();
                    var scanResultRequest = new Commerce.GetScanResultClientRequest(searchText, correlationId);
                    _this.context.runtime.executeAsync(scanResultRequest)
                        .then(function (result) {
                        if (result.canceled || Commerce.ObjectExtensions.isNullOrUndefined(result.data)) {
                            getProductByKeyWordQueue.cancel();
                            scanResultAsyncResult.resolve();
                            return;
                        }
                        var scanResult = result.data.result;
                        var scanResultType = scanResult.MaskTypeValue;
                        if (scanResultType === Commerce.Proxy.Entities.BarcodeMaskType.Item) {
                            product = scanResult.Product;
                            scanResultAsyncResult.resolve();
                        }
                        else if (scanResultType === Commerce.Proxy.Entities.BarcodeMaskType.None) {
                            scanResultAsyncResult.resolve();
                        }
                        else {
                            var unsupportedScanTypeError = new Commerce.Proxy.Entities.Error("string_2626");
                            scanResultAsyncResult.reject([unsupportedScanTypeError]);
                        }
                    }).catch(function (reason) {
                        var errors = Commerce.ErrorHelper.toProxyErrors(reason);
                        scanResultAsyncResult.reject(errors);
                    });
                    return scanResultAsyncResult;
                }).enqueue(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(product)
                        || product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Variant
                        || product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Standalone
                        || product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.KitVariant) {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                    else if (product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Master) {
                        return getProductByKeyWordQueue.cancelOn(_this._getProductVariant(product))
                            .done(function (variantSelectionResult) {
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(variantSelectionResult)) {
                                product = variantSelectionResult.data;
                            }
                        });
                    }
                    else {
                        _this.navigateToProductDetails(product);
                        getProductByKeyWordQueue.cancel();
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                });
                return getProductByKeyWordQueue.run().map(function (queueResult) {
                    return { canceled: queueResult.canceled, data: product };
                });
            };
            InventoryLookupViewModel.prototype.navigateToProductDetails = function (product) {
                var productSelectionHandler = new Commerce.CancelableSelectionHandler(function (selectionResult) {
                    var returnOptions = {
                        product: selectionResult.simpleProduct
                    };
                    Commerce.ViewModelAdapter.collapseAndNavigate("InventoryLookupView", returnOptions);
                }, function () {
                    Commerce.ViewModelAdapter.collapse("InventoryLookupView");
                });
                var productDetailOptions = {
                    productId: product.RecordId,
                    product: product,
                    isSelectionMode: true,
                    selectionOptions: {
                        productSelectionHandler: productSelectionHandler
                    },
                    correlationId: Commerce.StringExtensions.EMPTY
                };
                Commerce.ViewModelAdapter.navigate("SimpleProductDetailsView", productDetailOptions);
            };
            InventoryLookupViewModel.prototype.addProductPickUpToCart = function (storeLocation, pickupDate) {
                var _this = this;
                var lineIdsByLineId = {};
                Commerce.Session.instance.cart.CartLines.forEach(function (c) { lineIdsByLineId[c.LineId] = c.LineId; });
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var itemSaleOptions = {
                        productSaleDetails: [{
                                product: _this.product(), quantity: 0
                            }]
                    };
                    return _this.operationsManager.runOperation(Commerce.Operations.RetailOperation.ItemSale, itemSaleOptions);
                }).enqueue(function () {
                    var cart = Commerce.Session.instance.cart;
                    var isAggregateLine = Commerce.ApplicationContext.Instance.deviceConfiguration.AllowItemsAggregation;
                    var newCartLineAsArray = cart.CartLines.filter(function (c) {
                        return c.ProductId === _this.product().RecordId && (isAggregateLine || (!isAggregateLine && !lineIdsByLineId[c.LineId]));
                    });
                    var pickupOptions = {
                        cart: cart,
                        cartLines: newCartLineAsArray,
                        pickupDate: pickupDate,
                        storeAddress: undefined,
                        storeNumber: storeLocation.OrgUnitNumber
                    };
                    if (cart.CartLines.length === 1) {
                        return _this.operationsManager.runOperation(Commerce.Operations.RetailOperation.PickupAllProducts, pickupOptions);
                    }
                    return _this.operationsManager.runOperation(Commerce.Operations.RetailOperation.PickupSelectedProducts, pickupOptions);
                });
                return asyncQueue.run();
            };
            InventoryLookupViewModel.prototype._setInventoryByStoreListColumns = function () {
                var customColumns = Commerce.ObjectExtensions.isNullOrUndefined(InventoryLookupViewModel._viewExtensionsManager) ?
                    [] :
                    InventoryLookupViewModel._viewExtensionsManager.getInventoryByStoreListColumns();
                var defaultColumns = [
                    {
                        titleResx: "string_2647",
                        ratio: 30,
                        collapseOrder: 5,
                        minWidth: 140,
                        field: "OrgUnitLocation.OrgUnitName"
                    }, {
                        titleResx: "string_2648",
                        ratio: 20,
                        collapseOrder: 2,
                        minWidth: 50,
                        field: "OrgUnitLocation.OrgUnitNumber"
                    }, {
                        titleResx: "string_2603",
                        ratio: 14,
                        collapseOrder: 6,
                        minWidth: 80,
                        field: "ItemAvailabilities",
                        converter: "Commerce.Core.Converter.QuantityFromStoreInventory",
                        isRightAligned: true
                    }, {
                        titleResx: "string_2630",
                        ratio: 12,
                        collapseOrder: 3,
                        minWidth: 80,
                        field: "ItemAvailabilities",
                        converter: "Commerce.Core.Converter.PhysicalReservedFromStoreInventory",
                        isRightAligned: true
                    }, {
                        titleResx: "string_2629",
                        ratio: 12,
                        collapseOrder: 4,
                        minWidth: 80,
                        field: "ItemAvailabilities",
                        converter: "Commerce.Core.Converter.OrderedSumFromStoreInventory",
                        isRightAligned: true
                    }, {
                        titleResx: "string_2604",
                        ratio: 12,
                        collapseOrder: 1,
                        minWidth: 60,
                        field: "ItemAvailabilities",
                        converter: "Commerce.Core.Converter.UnitOfMeasureFromStoreInventory",
                        isRightAligned: true
                    }
                ];
                this.inventoryByStoreListColumns = Commerce.ArrayExtensions.hasElements(customColumns) ? customColumns : defaultColumns;
            };
            InventoryLookupViewModel.prototype._getProductVariant = function (masterProduct) {
                var productVariantQueue = new Commerce.AsyncQueue();
                var activity = new Commerce.Activities.GetVariantSelectionMethodActivity({ product: masterProduct });
                var selectedVariantProduct;
                productVariantQueue.enqueue(function () {
                    return activity.execute();
                }).enqueue(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(activity.response)) {
                        productVariantQueue.cancel();
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                    else if (activity.response.variantSelectionMethod === Commerce.Activities.VariantSelectionMethod.ViewAllVariants) {
                        var inventoryLookupMatrixViewOptions = {
                            product: masterProduct
                        };
                        Commerce.ViewModelAdapter.navigate("InventoryLookupMatrixView", inventoryLookupMatrixViewOptions);
                        productVariantQueue.cancel();
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                    else {
                        var selectProductVariantClientRequest = new Commerce.Products.SelectProductVariantClientRequest(masterProduct);
                        return productVariantQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(selectProductVariantClientRequest)))
                            .done(function (variantSelectionResult) {
                            if (!variantSelectionResult.canceled) {
                                selectedVariantProduct = variantSelectionResult.data.result;
                            }
                        });
                    }
                });
                return productVariantQueue.run().map(function (queueResult) {
                    return { canceled: queueResult.canceled, data: selectedVariantProduct };
                });
            };
            InventoryLookupViewModel.prototype._sendMessageToExtensions = function (messageType, messageData) {
                this.extensionCommandViewModels.forEach(function (vm) {
                    vm.sendMessage(messageType, messageData);
                });
            };
            return InventoryLookupViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.InventoryLookupViewModel = InventoryLookupViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var InvoicedSalesLinesViewModel = (function (_super) {
            __extends(InvoicedSalesLinesViewModel, _super);
            function InvoicedSalesLinesViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                _this.defaultPageSize = 60;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw Error("'Options' is required for InvoicedSalesLinesViewModel.");
                }
                else if (!Commerce.ArrayExtensions.hasElements(options.salesIds)) {
                    throw Error("options.salesIds' is required for InvoicedSalesLinesViewModel.");
                }
                _this._salesIds = options.salesIds;
                _this._selectedInvoicedSalesLines = ko.observableArray([]);
                _this._productDictionary = new Commerce.Dictionary();
                _this.returnSalesInvoiceDisabled = ko.computed(function () {
                    var selectedLines = _this._selectedInvoicedSalesLines();
                    return !Commerce.ArrayExtensions.hasElements(selectedLines) ||
                        selectedLines.some(function (selectedLine) {
                            return selectedLine.QuantityReturnable === 0;
                        });
                }, _this);
                return _this;
            }
            InvoicedSalesLinesViewModel.prototype.getInvoicedSalesLines = function (pageSize, skip) {
                var _this = this;
                var asyncResult = new Commerce.AsyncResult();
                var originalSalesLines;
                var productIds;
                var salesLinesDisplay = [];
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return _this.salesOrderManager.getInvoicedSalesLinesBySalesIdsAsync(_this._salesIds, pageSize, skip)
                        .done(function (salesLines) {
                        originalSalesLines = salesLines;
                        productIds = originalSalesLines.map(function (salesLine) {
                            return salesLine.ProductId;
                        });
                    });
                }).enqueue(function () {
                    return Commerce.CustomerOrderHelper.createSimpleProductDictionaryFromProductIds(productIds, _this._productDictionary)
                        .done(function () {
                        salesLinesDisplay = originalSalesLines.map(function (salesLine) {
                            return new Commerce.Proxy.Entities.SalesLineForDisplay(salesLine, _this._productDictionary.getItem(salesLine.ProductId));
                        });
                    });
                });
                this._isBusyUntil(asyncQueue.run()
                    .done(function () {
                    asyncResult.resolve(salesLinesDisplay);
                })
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                    asyncResult.reject(errors);
                }).always(function () {
                    _this._selectedInvoicedSalesLines([]);
                }));
                return asyncResult;
            };
            InvoicedSalesLinesViewModel.prototype.onSelectionChanged = function (salesLines) {
                this._selectedInvoicedSalesLines(salesLines);
            };
            InvoicedSalesLinesViewModel.prototype.returnSelectedInvoices = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var salesLineIds = this._selectedInvoicedSalesLines().map(function (salesLine) {
                    return salesLine.RecordId;
                });
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var request = new Commerce.Cart.AddInvoicedSalesLinesToCartServiceRequest(correlationId, salesLineIds);
                    return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(_this.context.runtime.executeAsync(request)));
                }).enqueue(function (addLinesResult) {
                    var request = new Commerce.SalesOrders.ReturnInvoicedSalesLinesClientRequest(correlationId, addLinesResult.data.cart.CartLines);
                    return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(_this.context.runtime.executeAsync(request)));
                });
                return this._isBusyUntil(asyncQueue.run().done(function (result) {
                    if (result.canceled) {
                        Commerce.Session.instance.clearCart();
                    }
                    else {
                        Commerce.ViewModelAdapter.navigate("CartView");
                    }
                }).fail(function (errors) {
                    Commerce.Session.instance.clearCart();
                    Commerce.NotificationHandler.displayClientErrors(errors);
                }));
            };
            return InvoicedSalesLinesViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.InvoicedSalesLinesViewModel = InvoicedSalesLinesViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var IssueLoyaltyCardViewModel = (function (_super) {
            __extends(IssueLoyaltyCardViewModel, _super);
            function IssueLoyaltyCardViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw new Error("Invalid options passed to the IssueLoyaltyCardViewModel constructor: options cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.selectionHandler)) {
                    throw new Error("Invalid options passed to the IssueLoyaltyCardViewModel constructor: selectionHandler cannot be null.");
                }
                _this._customer = ko.observable(options.customer);
                _this._customer.subscribe(function (newCustomer) {
                    _this._loyaltyCard.CustomerAccount = Commerce.ObjectExtensions.isNullOrUndefined(newCustomer) ? undefined : newCustomer.AccountNumber;
                }, _this);
                _this.hasCustomer = ko.computed(function () {
                    var customer = _this._customer();
                    return !Commerce.ObjectExtensions.isNullOrUndefined(customer) && !Commerce.StringExtensions.isNullOrWhitespace(customer.AccountNumber);
                }, _this);
                _this.allowSwitchCustomer = options.allowSwitchCustomer;
                _this.allowAddToTransaction = options.allowAddToTransaction;
                _this.customerName = ko.computed(function () {
                    return Commerce.ObjectExtensions.isNullOrUndefined(_this._customer()) || Commerce.ObjectExtensions.isNullOrUndefined(_this._customer().Name) ?
                        Commerce.StringExtensions.EMPTY :
                        _this._customer().Name;
                }, _this);
                _this.customerAccountNumber = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this._customer()) || Commerce.ObjectExtensions.isNullOrUndefined(_this._customer().AccountNumber)) {
                        return Commerce.StringExtensions.EMPTY;
                    }
                    else {
                        return _this._customer().IsAsyncCustomer
                            ? Commerce.ViewModelAdapter.getResourceString("string_213")
                            : _this._customer().AccountNumber;
                    }
                }, _this);
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.loyaltyCard)) {
                    _this._loyaltyCard = {
                        CardNumber: "",
                        CustomerAccount: undefined
                    };
                }
                else {
                    _this._loyaltyCard = options.loyaltyCard;
                }
                if (_this.hasCustomer()) {
                    _this._loyaltyCard.CustomerAccount = _this._customer().AccountNumber;
                }
                _this.loyaltyCardNumber = ko.observable(_this._loyaltyCard.CardNumber);
                _this.loyaltyCardNumber.subscribe(function (newValue) {
                    _this._loyaltyCard.CardNumber = newValue;
                }, _this);
                _this.isAutoGenerateLoyaltyCardNumberEnabled = ko.observable(Commerce.ApplicationContext.Instance.deviceConfiguration.GenerateLoyaltyCardNumber);
                _this._activateOrIssueLoyaltyCardInAction = ko.observable(false);
                _this._isBusyWhen(_this._activateOrIssueLoyaltyCardInAction);
                _this.enableLoyaltyCardAction = ko.computed(function () {
                    return (_this._isLoyaltyCardInformationComplete() || _this.isAutoGenerateLoyaltyCardNumberEnabled())
                        && !_this._activateOrIssueLoyaltyCardInAction();
                }, _this);
                _this.enableIssueLoyaltyCardAction = ko.computed(function () {
                    return _this.enableLoyaltyCardAction() && _this._canIssueLoyaltyCard();
                }, _this);
                _this._selectionHandler = options.selectionHandler;
                return _this;
            }
            Object.defineProperty(IssueLoyaltyCardViewModel.prototype, "customer", {
                get: function () {
                    return this._customer();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(IssueLoyaltyCardViewModel.prototype, "selectionHandler", {
                get: function () {
                    return this._selectionHandler;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(IssueLoyaltyCardViewModel.prototype, "loyaltyCard", {
                get: function () {
                    return this._loyaltyCard;
                },
                enumerable: true,
                configurable: true
            });
            IssueLoyaltyCardViewModel.prototype.removeCustomer = function () {
                this._customer(null);
            };
            IssueLoyaltyCardViewModel.prototype.updateLoyaltyCard = function (cardNumber) {
                this.loyaltyCardNumber(cardNumber);
            };
            IssueLoyaltyCardViewModel.prototype.activateLoyaltyCardAsync = function (addToTransaction) {
                var _this = this;
                if (!this._isLoyaltyCardInformationComplete() && !this.isAutoGenerateLoyaltyCardNumberEnabled()) {
                    return;
                }
                this._activateOrIssueLoyaltyCardInAction(true);
                var response = {
                    customer: this.customer,
                    addToTransaction: addToTransaction,
                    loyaltyCard: this._loyaltyCard
                };
                var onSelectionAttemptCanceled = function () {
                    _this._activateOrIssueLoyaltyCardInAction(false);
                };
                var onSelectionAttemptFailed = function (errors) {
                    _this._activateOrIssueLoyaltyCardInAction(false);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                };
                this._selectionHandler.select(response, onSelectionAttemptCanceled, onSelectionAttemptFailed);
            };
            IssueLoyaltyCardViewModel.prototype.activateLoyaltyCardAndAddToTransactionIfAllowed = function () {
                this.activateLoyaltyCardAsync(this.allowAddToTransaction);
            };
            IssueLoyaltyCardViewModel.prototype._isLoyaltyCardInformationComplete = function () {
                return !Commerce.StringExtensions.isNullOrWhitespace(this.loyaltyCardNumber());
            };
            IssueLoyaltyCardViewModel.prototype._canIssueLoyaltyCard = function () {
                var hasNoCustomerConflict = true;
                var cart = Commerce.Session.instance.cart;
                var customer = this._customer();
                if (this.hasCustomer()) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(cart) && !Commerce.StringExtensions.isNullOrWhitespace(cart.CustomerId)) {
                        hasNoCustomerConflict = customer.AccountNumber === cart.CustomerId;
                    }
                }
                return hasNoCustomerConflict;
            };
            return IssueLoyaltyCardViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.IssueLoyaltyCardViewModel = IssueLoyaltyCardViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        var KitDisassemblyViewModel = (function (_super) {
            __extends(KitDisassemblyViewModel, _super);
            function KitDisassemblyViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                _this._options = options;
                _this.kitProduct = ko.observable(null);
                _this.kitQuantity = ko.observable(1);
                _this.componentLines = ko.observableArray([]);
                _this._selectedComponentIndex = -1;
                _this.productComponentCount = ko.computed(_this._computeProductComponentCount, _this);
                _this.productImage = ko.observable({ source: Commerce.StringExtensions.EMPTY, altText: Commerce.StringExtensions.EMPTY });
                _this.hasProductComponent = ko.computed(function () {
                    return _this._computeProductComponentCount() !== 0;
                }, _this);
                return _this;
            }
            KitDisassemblyViewModel.prototype.loadAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._options)
                    && !Commerce.ObjectExtensions.isNullOrUndefined(this._options.kitProduct)) {
                    var product_1 = this._options.kitProduct;
                    asyncQueue.enqueue(function () {
                        if (product_1.ProductTypeValue !== Commerce.Proxy.Entities.ProductType.KitVariant) {
                            _this._displayProductNotFoundMessage();
                            asyncQueue.cancel();
                        }
                        return Commerce.VoidAsyncResult.createResolved();
                    }).enqueue(function () {
                        return _this._populateViewModelAsync(product_1)
                            .done(function () {
                            Commerce.RetailLogger.viewModelKitDisassemblyRetrievedKitProduct();
                        });
                    });
                }
                return this._isBusyUntil(asyncQueue.run())
                    .fail(function (error) {
                    Commerce.NotificationHandler.displayClientErrors(error);
                });
            };
            KitDisassemblyViewModel.prototype.setQuantityToDisassemble = function (quantityToDisassemble) {
                this.kitQuantity(quantityToDisassemble);
                this.resetAddToSaleQuantities();
            };
            KitDisassemblyViewModel.prototype.resetAddToSaleQuantities = function () {
                var _this = this;
                var resetAddToSaleQtyVal = 0;
                this.componentLines().forEach(function (component, index) {
                    var selectedComponent = _this.componentLines()[index];
                    var updatedComponentLine = selectedComponent.getUpdatedComponentLine(resetAddToSaleQtyVal, _this.kitQuantity());
                    _this.componentLines.splice(selectedComponent.index, 1, updatedComponentLine);
                });
            };
            KitDisassemblyViewModel.prototype.clearViewModel = function () {
                this.kitProduct(null);
                this.kitQuantity(1);
                this.componentLines.removeAll();
                this._selectedComponentIndex = -1;
            };
            KitDisassemblyViewModel.prototype.performProductSearch = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var activity = new Commerce.Activities.GetSearchTextActivity({
                        title: Commerce.ViewModelAdapter.getResourceString("string_419"),
                        subTitle: Commerce.StringExtensions.EMPTY,
                        inputLabel: Commerce.ViewModelAdapter.getResourceString("string_5362"),
                        searchText: Commerce.StringExtensions.EMPTY
                    });
                    activity.responseHandler = function (response) {
                        return asyncQueue.cancelOn(_this.onSearchTextChanged(response.searchText, Commerce.LoggerHelper.getNewCorrelationId()));
                    };
                    return activity.execute().done(function () {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(activity.response)) {
                            asyncQueue.cancel();
                            return;
                        }
                    });
                });
                return this._isBusyUntil(asyncQueue.run());
            };
            KitDisassemblyViewModel.prototype.componentLineSelectionChanged = function (items) {
                if (Commerce.ArrayExtensions.hasElements(items)) {
                    this._selectedComponentIndex = items[0].index;
                    this._getComponentQuantity();
                }
                else {
                    this._selectedComponentIndex = -1;
                }
            };
            KitDisassemblyViewModel.prototype.commitKitTransaction = function () {
                return this._isBusyUntil(this._commit())
                    .done(function (result) {
                    if (!result.canceled) {
                        Commerce.ViewModelAdapter.navigate("CartView");
                    }
                }).fail(function (error) {
                    Commerce.NotificationHandler.displayClientErrors(error);
                });
            };
            KitDisassemblyViewModel.prototype.onSearchTextChanged = function (searchText, correlationId) {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                var scanResult;
                asyncQueue.enqueue(function () {
                    var scanResultRequest = new Commerce.GetScanResultClientRequest(searchText, correlationId);
                    return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(scanResultRequest)))
                        .done(function (result) {
                        if (!result.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(result.data)) {
                            scanResult = result.data.result;
                        }
                    });
                });
                asyncQueue.enqueue(function () {
                    if (scanResult.MaskTypeValue === Commerce.Proxy.Entities.BarcodeMaskType.Item) {
                        return _this._processSimpleProductAsync(scanResult.Product);
                    }
                    else {
                        _this._searchForProduct(scanResult.ScannedText);
                        asyncQueue.cancel();
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                });
                return this._isBusyUntil(asyncQueue.run());
            };
            KitDisassemblyViewModel.prototype._commit = function () {
                if (!this.kitProduct().Behavior.IsKitDisassemblyAllowed) {
                    Commerce.RetailLogger.viewModelKitDisassemblyKitDisassemblyBlocked();
                    var error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.KIT_BLOCKED_FOR_DISASSEMBLY_AT_REGISTER);
                    return Commerce.VoidAsyncResult.createRejected([error]);
                }
                var saleLines = [];
                this.componentLines().forEach(function (component) {
                    var line = component.getSaleLineObj();
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(line)) {
                        saleLines.push(line);
                    }
                });
                var options = {
                    quantity: this.kitQuantity(),
                    kitProductId: this.kitProduct().RecordId,
                    productSaleReturnDetails: saleLines
                };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.KitDisassembly, options);
            };
            KitDisassemblyViewModel.prototype._populateViewModelAsync = function (newKitProduct, quantityToDisassemble) {
                var _this = this;
                this.kitProduct(newKitProduct);
                if (Commerce.ObjectExtensions.isNullOrUndefined(quantityToDisassemble)) {
                    quantityToDisassemble = 1;
                }
                this.kitQuantity(quantityToDisassemble);
                this._loadComponents(newKitProduct);
                if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                    this.productImage({ source: newKitProduct.PrimaryImageUrl, altText: newKitProduct.Name });
                    return Commerce.VoidAsyncResult.createResolved();
                }
                else {
                    var pageSize = 1;
                    var skip = 0;
                    return this.productManager.getMediaBlobsAsync(newKitProduct.RecordId, Commerce.Session.instance.productCatalogStore.Context.ChannelId, Commerce.Session.instance.productCatalogStore.Context.CatalogId, pageSize, skip).done(function (mediaBlobs) {
                        var source = Commerce.StringExtensions.EMPTY;
                        var altText = _this.kitProduct().Name;
                        var mediaBlob = Commerce.ArrayExtensions.firstOrUndefined(mediaBlobs);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(mediaBlob)) {
                            source = mediaBlob.Content;
                            altText = mediaBlob.AltText;
                        }
                        _this.productImage({ source: source, altText: altText });
                    });
                }
            };
            KitDisassemblyViewModel.prototype._getComponentQuantity = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var activity = new Commerce.Activities.GetQuantityActivity({
                        title: Commerce.ViewModelAdapter.getResourceString("string_301"),
                        subTitle: Commerce.StringExtensions.EMPTY,
                        inputLabel: Commerce.ViewModelAdapter.getResourceString("string_3372"),
                        quantity: Commerce.StringExtensions.EMPTY
                    });
                    activity.responseHandler = function (response) {
                        _this._enterQuantityNumpad(response.quantity);
                        var canceled = response.quantity === Commerce.StringExtensions.EMPTY ? true : false;
                        return asyncQueue.cancelOn(Commerce.AsyncResult.createResolved({ canceled: canceled }));
                    };
                    return activity.execute().done(function () {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(activity.response)) {
                            asyncQueue.cancel();
                            return;
                        }
                    });
                });
                return this._isBusyUntil(asyncQueue.run());
            };
            KitDisassemblyViewModel.prototype._enterQuantityNumpad = function (changedQuantity) {
                var quantity = Commerce.NumberExtensions.parseNumber(changedQuantity);
                if (this._selectedComponentIndex !== -1) {
                    var selectedComponent = void 0;
                    selectedComponent = this.componentLines()[this._selectedComponentIndex];
                    if (selectedComponent.validateAddToCartQty(quantity)) {
                        var updatedComponentLine = selectedComponent.getUpdatedComponentLine(quantity, this.kitQuantity());
                        this.componentLines.splice(selectedComponent.index, 1, updatedComponentLine);
                    }
                    else {
                        this._displayInvalidQuantityErrorMessage();
                    }
                }
            };
            KitDisassemblyViewModel.prototype._computeProductComponentCount = function () {
                return this.componentLines().length;
            };
            KitDisassemblyViewModel.prototype._processSimpleProductAsync = function (simpleProduct) {
                if (simpleProduct.ProductTypeValue === Commerce.Proxy.Entities.ProductType.KitVariant) {
                    this.clearViewModel();
                    return this._populateViewModelAsync(simpleProduct);
                }
                else if (simpleProduct.ProductTypeValue === Commerce.Proxy.Entities.ProductType.KitMaster) {
                    var productSelectionHandler = new Commerce.CancelableSelectionHandler(function (selectionResult) {
                        var returnOptions = {
                            kitProduct: selectionResult.simpleProduct
                        };
                        Commerce.ViewModelAdapter.collapseAndNavigate("KitDisassemblyView", returnOptions);
                    }, function () {
                        Commerce.ViewModelAdapter.collapse("KitDisassemblyView");
                    });
                    var productDetailOptions = {
                        productId: simpleProduct.RecordId,
                        product: simpleProduct,
                        isSelectionMode: true,
                        selectionOptions: {
                            productSelectionHandler: productSelectionHandler
                        },
                        correlationId: Commerce.StringExtensions.EMPTY
                    };
                    Commerce.ViewModelAdapter.navigate("SimpleProductDetailsView", productDetailOptions);
                    return Commerce.VoidAsyncResult.createResolved();
                }
                else {
                    this.clearViewModel();
                    Commerce.ViewModelAdapter.displayMessage(Commerce.ViewModelAdapter.getResourceString("string_3382"), Commerce.MessageType.Error, Commerce.MessageBoxButtons.Default, Commerce.ViewModelAdapter.getResourceString("string_3381"));
                    return Commerce.VoidAsyncResult.createResolved();
                }
            };
            KitDisassemblyViewModel.prototype._searchForProduct = function (searchText) {
                var productSelectionHandler = new Commerce.CancelableSelectionHandler(function (result) {
                    var returnOptions = {
                        kitProduct: result.simpleProduct
                    };
                    Commerce.ViewModelAdapter.collapseAndNavigate("KitDisassemblyView", returnOptions);
                }, function () {
                    Commerce.ViewModelAdapter.collapse("KitDisassemblyView");
                });
                var parameters = {
                    searchText: searchText,
                    searchEntity: ViewModels.SearchViewSearchEntity.Product,
                    selectionMode: ViewModels.SearchViewSelectionMode.Product,
                    productSelectionOptions: {
                        productSelectionHandler: productSelectionHandler,
                        allowKitMasterSelection: false
                    },
                    correlationId: Commerce.StringExtensions.EMPTY
                };
                Commerce.ViewModelAdapter.navigate("SearchView", parameters);
            };
            KitDisassemblyViewModel.prototype._displayProductNotFoundMessage = function () {
                Commerce.ViewModelAdapter.displayMessage(Commerce.ViewModelAdapter.getResourceString("string_3382"), Commerce.MessageType.Error, Commerce.MessageBoxButtons.Default, Commerce.ViewModelAdapter.getResourceString("string_3381"));
            };
            KitDisassemblyViewModel.prototype._displayInvalidQuantityErrorMessage = function () {
                Commerce.ViewModelAdapter.displayMessage(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_5371"), this.componentLines()[this._selectedComponentIndex].totalQuantity), Commerce.MessageType.Error, Commerce.MessageBoxButtons.Default, Commerce.ViewModelAdapter.getResourceString("string_3383"));
            };
            KitDisassemblyViewModel.prototype._loadComponents = function (kitProduct) {
                var _this = this;
                this.componentLines.removeAll();
                kitProduct.Components.forEach(function (component, index) {
                    var newComponentLine = new ComponentLine(component, _this.kitQuantity());
                    newComponentLine.index = index;
                    _this.componentLines.push(newComponentLine);
                });
            };
            return KitDisassemblyViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.KitDisassemblyViewModel = KitDisassemblyViewModel;
        var ComponentLine = (function () {
            function ComponentLine(component, kitQuantityToDisassemble) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(component)) {
                    this.component = component.Product;
                    this._itemId = component.ItemId;
                    this._itemName = component.Name;
                    this.distinctProductId = component.Product.RecordId;
                    this._unit = component.UnitOfMeasure;
                    this._quantity = component.Quantity;
                    this._imageInformation = {
                        source: component.Product.PrimaryImageUrl,
                        altText: component.Product.Name
                    };
                    var dimensionValues = component.Dimensions;
                    this.variantSummaryString = Commerce.SimpleProductHelper.getProductDimensionsDescription(dimensionValues);
                }
                else {
                    this._imageInformation = {
                        source: "",
                        altText: ""
                    };
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(kitQuantityToDisassemble)) {
                    kitQuantityToDisassemble = 1;
                }
                this._totalQuantity = this._quantity * kitQuantityToDisassemble;
                this._returnToInventoryQty = this._totalQuantity;
                this.addToCartQty = 0;
            }
            Object.defineProperty(ComponentLine.prototype, "itemId", {
                get: function () {
                    return this._itemId;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ComponentLine.prototype, "itemName", {
                get: function () {
                    return this._itemName;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ComponentLine.prototype, "quantity", {
                get: function () {
                    return this._quantity;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ComponentLine.prototype, "returnToInventoryQty", {
                get: function () {
                    return this._returnToInventoryQty;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ComponentLine.prototype, "totalQuantity", {
                get: function () {
                    return this._totalQuantity;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ComponentLine.prototype, "unit", {
                get: function () {
                    return this._unit;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ComponentLine.prototype, "imageInformation", {
                get: function () {
                    return this._imageInformation;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ComponentLine.prototype, "ariaLabelItemName", {
                get: function () {
                    return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_422"), Commerce.ViewModelAdapter.getResourceString("string_5350"), this._itemName, this._itemId, this.variantSummaryString);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ComponentLine.prototype, "ariaLabelItemUnit", {
                get: function () {
                    return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_1831"), Commerce.ViewModelAdapter.getResourceString("string_5351"), this._unit);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ComponentLine.prototype, "ariaLabelItemQuantity", {
                get: function () {
                    return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_1831"), Commerce.ViewModelAdapter.getResourceString("string_5352"), this._quantity);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ComponentLine.prototype, "ariaLabelItemReturnInventory", {
                get: function () {
                    return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_1831"), Commerce.ViewModelAdapter.getResourceString("string_5353"), this._returnToInventoryQty);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ComponentLine.prototype, "ariaLabelAddToCart", {
                get: function () {
                    return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_1831"), Commerce.ViewModelAdapter.getResourceString("string_5354"), this.addToCartQty);
                },
                enumerable: true,
                configurable: true
            });
            ComponentLine.prototype.getUpdatedComponentLine = function (newAddToCartQty, quantityToDisassemble) {
                var updatedObj = new ComponentLine();
                updatedObj._itemId = this._itemId;
                updatedObj._itemName = this._itemName;
                updatedObj._quantity = this._quantity;
                updatedObj._unit = this._unit;
                updatedObj.index = this.index;
                updatedObj.component = this.component;
                updatedObj.distinctProductId = this.distinctProductId;
                updatedObj.variantSummaryString = this.variantSummaryString;
                if (Commerce.ObjectExtensions.isNullOrUndefined(quantityToDisassemble)) {
                    quantityToDisassemble = 1;
                }
                updatedObj._totalQuantity = quantityToDisassemble * updatedObj._quantity;
                updatedObj.addToCartQty = newAddToCartQty;
                updatedObj._returnToInventoryQty = updatedObj._totalQuantity - updatedObj.addToCartQty;
                return updatedObj;
            };
            ComponentLine.prototype.getSaleLineObj = function () {
                var saleLine = null;
                var productId = this.component.RecordId;
                if (!Commerce.NumberExtensions.isNullOrZero(this.addToCartQty)) {
                    saleLine = {
                        productId: productId,
                        quantity: this.addToCartQty,
                        unitOfMeasureSymbol: this._unit
                    };
                }
                return saleLine;
            };
            ComponentLine.prototype.validateAddToCartQty = function (newAddToCartQty) {
                return this._totalQuantity >= newAddToCartQty && newAddToCartQty >= 0;
            };
            return ComponentLine;
        }());
        ViewModels.ComponentLine = ComponentLine;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var LoginViewModel = (function (_super) {
            __extends(LoginViewModel, _super);
            function LoginViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                _this.operatorId = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.password = ko.observable(Commerce.StringExtensions.EMPTY);
                _this._isOpenPeoplePicker = !Commerce.ObjectExtensions.isNullOrUndefined(options) && options.isOpenPeoplePicker;
                _this.operatorList = [];
                _this.selectedOperator = ko.observable(null);
                _this.isOperatorSelected = ko.computed(function () { return !Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedOperator()); });
                _this.storeAndRegister = Commerce.StringExtensions.isNullOrWhitespace(_this.context.stringResourceManager.getString("string_529")) ?
                    "string_529" :
                    Commerce.StringExtensions.format(_this.context.stringResourceManager.getString("string_529"), Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.STORE_ID_KEY), Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.REGISTER_ID_KEY));
                _this.isCenteredLayout = ko.observable(true);
                _this.isRightLayout = ko.observable(false);
                _this.isLeftLayout = ko.observable(false);
                _this.showDateTime = ko.observable(false);
                _this.showNumPad = ko.observable(false);
                _this.showLogo = ko.observable(LoginViewModel._showLogo);
                var visualProfile = Commerce.ApplicationContext.Instance.visualProfile;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(visualProfile)) {
                    _this.isCenteredLayout(visualProfile.LogOnLayoutTypeValue !== Commerce.Proxy.Entities.LogOnLayoutType.Right);
                    _this.isRightLayout(visualProfile.LogOnLayoutTypeValue === Commerce.Proxy.Entities.LogOnLayoutType.Right);
                    _this.showNumPad(visualProfile.LogOnKeyboardTypeValue === Commerce.Proxy.Entities.LogOnKeyboardType.Numpad);
                    _this.showDateTime(!!visualProfile.IsDateTimeVisible);
                }
                var deviceConfiguration = Commerce.ApplicationContext.Instance.deviceConfiguration;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(deviceConfiguration)) {
                    _this.useAad = Commerce.Utilities.LogonHelper.isAadEmployeeLoginMode();
                    if (deviceConfiguration.ShowStaffListAtLogOn) {
                        _this.operatorList = JSON.parse(Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.EMPLOYEE_LIST_KEY));
                        if (Commerce.ArrayExtensions.hasElements(_this.operatorList)) {
                            var operators = _this.operatorList;
                            var operator = Commerce.ArrayExtensions.firstOrUndefined(operators, function (operator) { return operator.StaffId === _this.operatorId(); });
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(operator)) {
                                _this.selectedOperator(operator);
                            }
                        }
                    }
                }
                else {
                    _this.useAad = false;
                }
                _this.isOperatorIdTextVisible = !Commerce.ArrayExtensions.hasElements(_this.operatorList);
                _this.isOperatorIdSelectVisible = !_this.isOperatorIdTextVisible;
                if (_this.showDateTime()) {
                    _this.clockViewModel = new ViewModels.ClockViewModel(context);
                    _this.clockViewModel.start();
                }
                return _this;
            }
            LoginViewModel.prototype.loadAsync = function () {
                var _this = this;
                if (!LoginViewModel._backgroundImagesLoaded) {
                    var logonBackgroundLandscapeId = void 0;
                    var logonBackgroundPortraitId = void 0;
                    var logonLogoId = void 0;
                    var backgroundId = void 0;
                    var logonBackgroundLandscapeImage_1;
                    var logonBackgroundPortraitImage_1;
                    var logonLogoImage_1;
                    var backgroundImage_1;
                    var loadResults = [];
                    if (Commerce.Config.isPhone) {
                        logonBackgroundLandscapeId = Commerce.ApplicationContext.Instance.deviceConfiguration.LogonBackgroundPictureIdCompact;
                        logonBackgroundPortraitId = Commerce.ApplicationContext.Instance.deviceConfiguration.LogonBackgroundPictureIdCompactPortrait;
                    }
                    else {
                        logonBackgroundLandscapeId = Commerce.ApplicationContext.Instance.deviceConfiguration.LogonBackgroundPictureId;
                        logonBackgroundPortraitId = Commerce.ApplicationContext.Instance.deviceConfiguration.LogonBackgroundPictureIdPortrait;
                    }
                    logonLogoId = Commerce.ApplicationContext.Instance.visualProfile.LogOnLogoPictureId;
                    backgroundId = Commerce.ApplicationContext.Instance.deviceConfiguration.BackgroundPictureId;
                    loadResults.push(this._getBackgroundImage(logonBackgroundLandscapeId)
                        .done(function (imageBlob) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(imageBlob)) {
                            logonBackgroundLandscapeImage_1 = imageBlob.Content;
                        }
                    }));
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(logonLogoId)) {
                        loadResults.push(this._getBackgroundImage(logonLogoId)
                            .done(function (imageBlob) {
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(imageBlob)) {
                                logonLogoImage_1 = imageBlob.Content;
                            }
                        }));
                    }
                    loadResults.push(this._getBackgroundImage(logonBackgroundPortraitId)
                        .done(function (imageBlob) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(imageBlob)) {
                            logonBackgroundPortraitImage_1 = imageBlob.Content;
                        }
                    }));
                    loadResults.push(this._getBackgroundImage(backgroundId)
                        .done(function (imageBlob) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(imageBlob)) {
                            backgroundImage_1 = imageBlob.Content;
                        }
                    }));
                    return Commerce.VoidAsyncResult.join(loadResults).done(function () {
                        LoginViewModel._backgroundImagesLoaded = true;
                        LoginViewModel._showLogo = !Commerce.StringExtensions.isNullOrWhitespace(logonLogoImage_1);
                        _this.showLogo(LoginViewModel._showLogo);
                        Commerce.CSSHelpers.applyBackgroundImage(logonBackgroundLandscapeImage_1, logonBackgroundPortraitImage_1, backgroundImage_1, logonLogoImage_1);
                    }).fail(function (errors) {
                        Commerce.RetailLogger.viewModelLoginLoadingBackgroundImagesFailed(Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors));
                    });
                }
                else {
                    return Commerce.VoidAsyncResult.createResolved();
                }
            };
            LoginViewModel.prototype.logOn = function (correlationId) {
                var _this = this;
                if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                    correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                }
                Commerce.RetailLogger.posAuthentication_StandardLogOnBegin(correlationId);
                return this._isBusyUntil(this._logOnAndStartOrResumeShift(correlationId, this.operatorId(), this.password()))
                    .done(function () {
                    Commerce.RetailLogger.posAuthentication_StandardLogOnSuccess(correlationId);
                    Commerce.EventProxy.Instance.raiseCustomEvent("LogOnAndInitializationCompleteEvent", true);
                })
                    .fail(function (errors) {
                    Commerce.RetailLogger.posAuthentication_StandardLogOnDidntSucceed(correlationId, Commerce.ErrorHelper.getErrorResourceIds(errors), Commerce.ErrorHelper.getErrorMessages(errors));
                    return _this._notifyErrorAsync(errors);
                });
            };
            LoginViewModel.prototype.enableExtendedCredentials = function (forUnlock) {
                var _this = this;
                Commerce.Utilities.LogonHelper.enableExtendedCredentials(function (credential, grantType) {
                    if (forUnlock) {
                        return _this._extendedUnlock(credential, grantType);
                    }
                    else {
                        return _this._extendedLogon(credential, grantType);
                    }
                });
            };
            LoginViewModel.prototype.disableExtendedCredentials = function () {
                Commerce.Utilities.LogonHelper.disableExtendedCredentials();
            };
            LoginViewModel.prototype.switchUser = function () {
                if (Commerce.ApplicationContext.Instance.deviceConfiguration &&
                    Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName) {
                    return Commerce.ViewModelAdapter.setApplicationLanguageAsync(Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName)
                        .fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    }).always(function () {
                        Commerce.ViewModelAdapter.navigate(Commerce.ViewModelAdapter.getLoginViewName(), { isOpenPeoplePicker: true });
                    });
                }
                else {
                    Commerce.ViewModelAdapter.navigate(Commerce.ViewModelAdapter.getLoginViewName(), { isOpenPeoplePicker: true });
                    return Commerce.AsyncResult.createResolved();
                }
            };
            LoginViewModel.prototype.unlockRegister = function () {
                if (Commerce.StringExtensions.isEmptyOrWhitespace(this.password())) {
                    var retailErrors = [
                        new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATOR_PASSWORD_NOT_SPECIFIED)
                    ];
                    return Commerce.VoidAsyncResult.createRejected(retailErrors);
                }
                return this._unlockRegister(this.operatorId(), this.password());
            };
            LoginViewModel.prototype.initializeOfflineDataSync = function () {
                Commerce.AsyncService.instance.initializeOfflineDataSync();
            };
            LoginViewModel.prototype.selectEmployeeHandler = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var getStoreEmployeeClientRequest = new Commerce.GetStoreEmployeeClientRequest(correlationId, this.context.stringResourceManager.getString("string_527"), Commerce.StringExtensions.EMPTY);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getStoreEmployeeClientRequest)
                    .then(function (result) {
                    if (!result.canceled) {
                        var selectedOperator = Commerce.ArrayExtensions.firstOrUndefined(_this.operatorList, function (operator) { return Commerce.StringExtensions.compare(operator.StaffId, result.data.result.StaffId) === 0; });
                        _this.selectedOperator(selectedOperator);
                        _this.operatorId(result.data.result.StaffId);
                    }
                    return result;
                }));
            };
            LoginViewModel.prototype.afterShown = function () {
                if (this._isOpenPeoplePicker && this.isOperatorIdSelectVisible) {
                    return this.selectEmployeeHandler();
                }
                return Commerce.VoidAsyncResult.createResolved();
            };
            LoginViewModel.prototype._extendedUnlock = function (extendedCredentials, grantType) {
                return this._unlockRegister(this.operatorId(), this.password(), extendedCredentials, grantType);
            };
            LoginViewModel.prototype._unlockRegister = function (operatorId, password, extendedCredentials, grantType) {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var unlockTerminalClientRequest = new Commerce.Authentication.UnlockTerminalClientRequest(correlationId, operatorId, password, extendedCredentials, grantType);
                return this._isBusyUntil(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(unlockTerminalClientRequest)))
                    .done(function (result) {
                    if (!result.canceled) {
                        _this._navigateToNextPage(correlationId);
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors, "string_506");
                });
            };
            LoginViewModel.prototype._extendedLogon = function (extendedCredentials, grantType) {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.posAuthentication_ExtendedLogOnBegin(correlationId);
                return this._isBusyUntil(this._logOnAndStartOrResumeShift(correlationId, null, null, extendedCredentials, grantType))
                    .done(function () {
                    Commerce.RetailLogger.posAuthentication_ExtendedLogOnSuccess(correlationId);
                    Commerce.EventProxy.Instance.raiseCustomEvent("LogOnAndInitializationCompleteEvent", true);
                })
                    .fail(function (errors) {
                    Commerce.RetailLogger.posAuthentication_ExtendedLogOnDidntSucceed(correlationId, Commerce.ErrorHelper.getErrorResourceIds(errors), Commerce.ErrorHelper.getErrorMessages(errors));
                    return _this._notifyErrorAsync(errors);
                });
            };
            LoginViewModel.prototype._logOnAndStartOrResumeShift = function (correlationId, operatorId, password, extendedCredentials, grantType) {
                var _this = this;
                var logOnQueue = new Commerce.AsyncQueue();
                logOnQueue.enqueue(function () {
                    var logOnRequest = new Commerce.Authentication.LogOnRequest(correlationId, operatorId, password, extendedCredentials, grantType);
                    return logOnQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(logOnRequest)));
                }).enqueue(function () {
                    return _this._openOrResumeShift(correlationId);
                });
                return logOnQueue.run();
            };
            LoginViewModel.prototype._openOrResumeShift = function (correlationId) {
                var _this = this;
                var startShiftQueue = new Commerce.AsyncQueue();
                Commerce.RetailLogger.posAuthentication_UserLogOnAttemptOpenOrResumeShift(correlationId);
                startShiftQueue.enqueue(function () {
                    return Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IStoreOperationsManagerName)
                        .getShiftsFilterByUserRoleAsync(Commerce.Proxy.Entities.ShiftStatus.Open, false, correlationId)
                        .done(function (openedShifts) {
                        Commerce.RetailLogger.posAuthentication_GetShiftsForLoggedOnUserSuccess(correlationId);
                        var shiftsReturned = Commerce.ShiftHelper.GetShiftDetailsForLogging(openedShifts);
                        Commerce.RetailLogger.getShiftsSucceeded(Commerce.Proxy.Entities.ShiftStatus.Open.toString(), shiftsReturned, Commerce.ShiftHelper.getCurrentShift(), correlationId);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(openedShifts)) {
                            Commerce.Session.instance.OpenedShifts = openedShifts;
                        }
                    }).fail(function (errors) {
                        Commerce.RetailLogger.posAuthentication_GetShiftsForLoggedOnUserFailed(correlationId, Commerce.ErrorHelper.getErrorResourceIds(errors), Commerce.ErrorHelper.getErrorMessages(errors));
                        Commerce.RetailLogger.getShiftsFailed(Commerce.Proxy.Entities.ShiftStatus.Open.toString(), Commerce.ShiftHelper.getCurrentShift(), Commerce.ErrorHelper.getErrorMessages(errors), correlationId);
                        _this._logOffAndDisplayErrors(correlationId, errors);
                    });
                }).enqueue(function () {
                    return new Commerce.ViewModels.ShiftViewModel(_this.context)
                        .openOrResumeShift(Commerce.Session.instance.CurrentEmployee.StaffId)
                        .done(function (result) {
                        if (result.canceled) {
                            Commerce.RetailLogger.posAuthentication_UserLogOnOpenOrResumeShiftCanceledByUser(correlationId);
                            _this._logOffAndDisplayErrors(correlationId, null);
                        }
                        else {
                            Commerce.RetailLogger.posAuthentication_UserLogOnOpenOrResumeShiftSuccess(correlationId);
                            Commerce.Session.instance.newUserLogOn();
                            _this._navigateToNextPage(correlationId);
                        }
                    })
                        .fail(function (errors) {
                        Commerce.RetailLogger.posAuthentication_UserLogOnOpenOrResumeShiftFailed(correlationId, Commerce.ErrorHelper.getErrorResourceIds(errors), Commerce.ErrorHelper.getErrorMessages(errors));
                        _this._logOffAndDisplayErrors(correlationId, errors);
                    });
                });
                return startShiftQueue.run();
            };
            LoginViewModel.prototype._navigateToNextPage = function (correlationId) {
                var startViewOptions = { correlationId: correlationId };
                Commerce.ViewModelAdapter.navigate(Commerce.ApplicationContext.Instance.tillLayoutProxy.startView, startViewOptions);
            };
            LoginViewModel.prototype._logOffAndDisplayErrors = function (correlationId, errors) {
                var _this = this;
                Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(new Commerce.LogOffOperationRequest(correlationId))).done(function () {
                    if (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    }
                }).fail(function (defaultErrors) {
                    if (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    }
                    else {
                        Commerce.NotificationHandler.displayClientErrors(defaultErrors, _this.context.stringResourceManager.getString("string_509"));
                    }
                });
            };
            LoginViewModel.prototype._notifyErrorAsync = function (errors) {
                if (Commerce.ArrayExtensions.hasElements(errors)) {
                    return Commerce.NotificationHandler.displayClientErrors(errors, "string_506");
                }
                return Commerce.AsyncResult.createRejected();
            };
            LoginViewModel.prototype._getBackgroundImage = function (imageId) {
                return this.storeOperationsManager.getImageBlob(imageId);
            };
            return LoginViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.LoginViewModel = LoginViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var LoyaltyCardBalanceDialogViewModel = (function (_super) {
            __extends(LoyaltyCardBalanceDialogViewModel, _super);
            function LoyaltyCardBalanceDialogViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                _this.AX_MAX_DATE_TIME = "2154-12-31T00:00:00";
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw new Error("Invalid options passed to the LoyaltyCardBalanceDialogViewModel constructor: options cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.loyaltyCard)) {
                    throw new Error("Invalid options passed to the LoyaltyCardBalanceDialogViewModel constructor: loyaltyCard cannot be null or undefined.");
                }
                _this.correlationId = Commerce.StringExtensions.isNullOrWhitespace(options.correlationId) ? Commerce.LoggerHelper.getNewCorrelationId() : options.correlationId;
                _this._loyaltyCard = options.loyaltyCard;
                _this.loyaltyPointDaysToExpiry = Commerce.Payments.Utilities.PaymentViewModelHelper.loyaltyPointDaysToExpiry;
                _this.loyaltyBalanceLabel = Commerce.ViewModelAdapter.getResourceString("string_294");
                _this.rewardPointsForDisplay = options.loyaltyCard.RewardPoints;
                _this.loyaltyCardNumberText = options.loyaltyCard.CardNumber;
                var days = _this.loyaltyPointDaysToExpiry;
                var balanceExpiringText = days === 1 ? "string_284" : "string_285";
                _this.loyaltyPointDaysToExpiryText = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString(balanceExpiringText), days);
                _this.totalAvailablePoints = _this._calculateTotalAvailablePoints();
                _this.loyaltyProgramsWithHighestActiveLoyaltyTiers = ko.observableArray([]);
                _this.hasLoyaltyProgramsWithHighestActiveLoyaltyTiers = ko.computed(function () {
                    return Commerce.ArrayExtensions.hasElements(_this.loyaltyProgramsWithHighestActiveLoyaltyTiers());
                });
                _this._updateLoyaltyProgramsAndHighestActiveLoyaltyTier();
                return _this;
            }
            LoyaltyCardBalanceDialogViewModel.prototype.showLoyaltyRewardPointPointsExpiringSoonDialog = function (correlationId, loyaltyCardId, loyaltyRewardPoint) {
                var context = {
                    correlationId: correlationId,
                    expiringPoints: loyaltyRewardPoint.PointsExpiringSoon,
                    loyaltyCardId: loyaltyCardId,
                    rewardPointId: loyaltyRewardPoint.RewardPointId
                };
                var activity = new Commerce.Activities.ShowLoyaltyExpiringPointsActivity(context);
                return activity.execute();
            };
            LoyaltyCardBalanceDialogViewModel.prototype.showLoyaltyRewardPointTransactionsDialog = function (correlationId, loyaltyCardId, loyaltyRewardPoint) {
                var context = {
                    correlationId: correlationId,
                    rewardPointId: loyaltyRewardPoint.RewardPointId,
                    loyaltyCardId: loyaltyCardId,
                    totalAvailableBalance: loyaltyRewardPoint.ActivePoints,
                };
                var activity = new Commerce.Activities.ShowLoyaltyTransactionsActivity(context);
                return activity.execute();
            };
            LoyaltyCardBalanceDialogViewModel.prototype.checkRewardPointDataIsAvailableForDisplayAsync = function () {
                if (Commerce.StringExtensions.isNullOrWhitespace(this._loyaltyCard.CardNumber)) {
                    return Commerce.NotificationHandler.displayErrorMessage("string_29286");
                }
                else if (this._loyaltyCard.CardTenderTypeValue === Commerce.Proxy.Entities.LoyaltyCardTenderType.Blocked) {
                    return Commerce.NotificationHandler.displayErrorMessage("string_29069");
                }
                else if (!Commerce.ArrayExtensions.hasElements(this._loyaltyCard.RewardPoints)) {
                    return Commerce.NotificationHandler.displayErrorMessage("string_3273");
                }
                else {
                    return Commerce.VoidAsyncResult.createResolved();
                }
            };
            LoyaltyCardBalanceDialogViewModel.prototype._updateLoyaltyProgramsAndHighestActiveLoyaltyTier = function () {
                var _this = this;
                var shortDateFormatter = Commerce.Host.instance.globalization.getDateTimeFormatter(Commerce.Host.Globalization.DateTimeFormat.SHORT_DATE);
                var loyaltyPrograms = [];
                var maxDate = new Date(this.AX_MAX_DATE_TIME);
                if (Commerce.ArrayExtensions.hasElements(this._loyaltyCard.LoyaltyGroups)) {
                    this._loyaltyCard.LoyaltyGroups.forEach(function (loyaltyGroup) {
                        var newLoyaltyProgramWithHighestActiveLoyaltyTier = {
                            loyaltyGroupName: loyaltyGroup.Name,
                            loyaltyCardTierRecordId: 0,
                            loyaltyCardTierTierId: Commerce.StringExtensions.EMPTY,
                            validFromDisplayText: Commerce.StringExtensions.EMPTY,
                            validToDisplayText: Commerce.StringExtensions.EMPTY
                        };
                        if (loyaltyGroup.HighestActiveLoyaltyCardTier > 0) {
                            var loyaltyCardTier = Commerce.ArrayExtensions.firstOrUndefined(loyaltyGroup.LoyaltyCardTiers.filter(function (lct) {
                                return lct.RecordId === loyaltyGroup.HighestActiveLoyaltyCardTier;
                            }));
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(loyaltyCardTier)) {
                                newLoyaltyProgramWithHighestActiveLoyaltyTier = {
                                    loyaltyGroupName: loyaltyGroup.Name,
                                    loyaltyCardTierRecordId: loyaltyCardTier.RecordId,
                                    loyaltyCardTierTierId: loyaltyCardTier.TierId,
                                    validFromDisplayText: Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_3290"), shortDateFormatter.format(loyaltyCardTier.ValidFrom)),
                                    validToDisplayText: loyaltyCardTier.ValidTo >= maxDate ?
                                        Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_3291"), Commerce.ViewModelAdapter.getResourceString("string_3292")) :
                                        Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_3291"), shortDateFormatter.format(loyaltyCardTier.ValidTo))
                                };
                            }
                        }
                        else {
                            newLoyaltyProgramWithHighestActiveLoyaltyTier.validFromDisplayText =
                                Commerce.DateExtensions.isValidDate(_this._loyaltyCard.LoyaltyEnrollmentDate) ?
                                    Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_3290"), shortDateFormatter.format(_this._loyaltyCard.LoyaltyEnrollmentDate)) :
                                    Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_3290"), Commerce.StringExtensions.EMPTY);
                            newLoyaltyProgramWithHighestActiveLoyaltyTier.validToDisplayText = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_3291"), Commerce.ViewModelAdapter.getResourceString("string_3292"));
                        }
                        loyaltyPrograms.push(newLoyaltyProgramWithHighestActiveLoyaltyTier);
                    });
                }
                this.loyaltyProgramsWithHighestActiveLoyaltyTiers(loyaltyPrograms);
            };
            LoyaltyCardBalanceDialogViewModel.prototype._calculateTotalAvailablePoints = function () {
                var totalAvailablePoints = 0;
                this._loyaltyCard.RewardPoints.forEach(function (rewardPoint) {
                    totalAvailablePoints += rewardPoint.ActivePoints;
                });
                return totalAvailablePoints;
            };
            return LoyaltyCardBalanceDialogViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.LoyaltyCardBalanceDialogViewModel = LoyaltyCardBalanceDialogViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var LoyaltyExpiringPointsDialogViewModel = (function (_super) {
            __extends(LoyaltyExpiringPointsDialogViewModel, _super);
            function LoyaltyExpiringPointsDialogViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw new Error("Invalid options passed to the LoyaltyCardBalanceDialogViewModel constructor: options cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.loyaltyCardId)) {
                    throw new Error("Invalid options passed to the LoyaltyCardBalanceDialogViewModel constructor: loyaltyCardId cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.rewardPointId)) {
                    throw new Error("Invalid options passed to the LoyaltyCardBalanceDialogViewModel constructor: rewardPointId cannot be null or undefined.");
                }
                _this.correlationId = Commerce.StringExtensions.isNullOrWhitespace(options.correlationId) ? Commerce.LoggerHelper.getNewCorrelationId() : options.correlationId;
                _this._loyaltyCardId = options.loyaltyCardId;
                _this._rewardPointId = options.rewardPointId;
                _this._loyaltyPointDaysToExpiry = Commerce.Payments.Utilities.PaymentViewModelHelper.loyaltyPointDaysToExpiry;
                var days = _this._loyaltyPointDaysToExpiry;
                var formatString = days === 1 ? "string_288" : "string_289";
                _this.loyaltyPointDaysToExpiryText = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString(formatString), days);
                return _this;
            }
            LoyaltyExpiringPointsDialogViewModel.prototype.getLoyaltyRewardPointsExpiringSoonAsync = function (pageSize, skip) {
                var _this = this;
                Commerce.RetailLogger.viewModelLoyaltyExpiringPointsDialogViewModelgetLoyaltyRewardPointsExpiringSoonAsyncStarted(this.correlationId);
                return this._isBusyUntil(this.channelManager.getLoyaltyRewardPointsExpiringSoonAsync(this._loyaltyCardId, this._rewardPointId, this._loyaltyPointDaysToExpiry, pageSize, skip)
                    .done(function (expiringPoints) {
                    Commerce.RetailLogger.viewModelLoyaltyExpiringPointsDialogViewModelgetLoyaltyRewardPointsExpiringSoonAsyncSucceeded(_this.correlationId, expiringPoints.length);
                })
                    .fail(function (errors) {
                    Commerce.RetailLogger.viewModelLoyaltyExpiringPointsDialogViewModelgetLoyaltyRewardPointsExpiringSoonAsyncError(_this.correlationId, errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                    Commerce.NotificationHandler.displayClientErrors(errors);
                }));
            };
            return LoyaltyExpiringPointsDialogViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.LoyaltyExpiringPointsDialogViewModel = LoyaltyExpiringPointsDialogViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var LoyaltyTransactionsDialogViewModel = (function (_super) {
            __extends(LoyaltyTransactionsDialogViewModel, _super);
            function LoyaltyTransactionsDialogViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw new Error("Invalid options passed to the LoyaltyCardBalanceDialogViewModel constructor: options cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.loyaltyCardId)) {
                    throw new Error("Invalid options passed to the LoyaltyCardBalanceDialogViewModel constructor: loyaltyCardId cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.rewardPointId)) {
                    throw new Error("Invalid options passed to the LoyaltyCardBalanceDialogViewModel constructor: rewardPointId cannot be null or undefined.");
                }
                _this.correlationId = options.correlationId ? options.correlationId : Commerce.StringExtensions.EMPTY;
                _this._loyaltyCardId = options.loyaltyCardId;
                _this._rewardPointId = options.rewardPointId;
                return _this;
            }
            LoyaltyTransactionsDialogViewModel.prototype.getLoyaltyTransactionsAsync = function (pageSize, skip) {
                var _this = this;
                Commerce.RetailLogger.viewModelLoyaltyTransactionsDialogViewModelgetLoyaltyRewardPointsExpiringSoonAsyncStarted(this.correlationId);
                return this._isBusyUntil(this.channelManager.getLoyaltyTransactionsAsync(this._loyaltyCardId, this._rewardPointId, pageSize, skip)
                    .done(function (loyaltyTransactions) {
                    Commerce.RetailLogger.viewModelLoyaltyTransactionsDialogViewModelgetLoyaltyRewardPointsExpiringSoonAsyncSucceeded(_this.correlationId, loyaltyTransactions.length);
                }).fail(function (errors) {
                    Commerce.RetailLogger.viewModelLoyaltyTransactionsDialogViewModelgetLoyaltyRewardPointsExpiringSoonAsyncError(_this.correlationId, errors[0] ? errors[0].ErrorCode : Commerce.StringExtensions.EMPTY, Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors));
                    Commerce.NotificationHandler.displayClientErrors(errors);
                }));
            };
            return LoyaltyTransactionsDialogViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.LoyaltyTransactionsDialogViewModel = LoyaltyTransactionsDialogViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        var ManageChargesViewModel = (function (_super) {
            __extends(ManageChargesViewModel, _super);
            function ManageChargesViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this.viewMode = ko.observable(ManageChargesViewModel.LINE);
                _this.headerChargeDisplays = ko.observableArray([]);
                _this.lineChargeDisplays = ko.observableArray([]);
                _this.detailsExpanded = ko.observable(true);
                _this.selectedHeaderChargeDisplays = ko.observableArray([]);
                _this.selectedLineChargeDisplays = ko.observableArray([]);
                _this.selectedChargesForMode = ko.computed(function () {
                    if (_this.viewMode() === ManageChargesViewModel.LINE) {
                        return _this.selectedLineChargeDisplays();
                    }
                    else {
                        return _this.selectedHeaderChargeDisplays();
                    }
                });
                _this.selectedChargeDisplay = ko.computed(function () {
                    var selectedForMode = _this.selectedChargesForMode();
                    if (selectedForMode.length === 1) {
                        return selectedForMode[0];
                    }
                    return {};
                });
                _this.isAnyChargeSelected = ko.computed(function () {
                    return Commerce.ArrayExtensions.hasElements(_this.selectedChargesForMode());
                });
                return _this;
            }
            ManageChargesViewModel.prototype.load = function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.cart.ChargeLines)) {
                    return;
                }
                this._loadHeaderCharges();
                this._loadLineCharges();
            };
            ManageChargesViewModel.prototype.switchMode = function (event) {
                if (event.detail.index === ManageChargesViewModel.LINE_INDEX) {
                    this.viewMode(ManageChargesViewModel.LINE);
                }
                else if (event.detail.index === ManageChargesViewModel.HEADER_INDEX) {
                    this.viewMode(ManageChargesViewModel.HEADER);
                }
            };
            ManageChargesViewModel.prototype.overrideChargeAsync = function () {
                var _this = this;
                if (!this.selectedChargesForMode() || this.selectedChargesForMode().length <= 0) {
                    return Commerce.AsyncResult.createResolved({ canceled: true });
                }
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                if (this.viewMode() === ManageChargesViewModel.HEADER) {
                    var overrideHeaderChargeClientRequest = new Commerce.OverrideHeaderChargeClientRequest(correlationId, this.selectedHeaderChargeDisplays()[0].chargeLine);
                    return this._isBusyUntil(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(overrideHeaderChargeClientRequest)))
                        .done(function (result) {
                        _this._loadHeaderCharges();
                        _this._loadLineCharges();
                    }).fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }
                else if (this.viewMode() === ManageChargesViewModel.LINE) {
                    var selectedLineChargeDisplay = this.selectedLineChargeDisplays()[0];
                    var overrideLineChargeClientRequest = new Commerce.OverrideLineChargeClientRequest(correlationId, selectedLineChargeDisplay.cartLine, selectedLineChargeDisplay.chargeLine);
                    return this._isBusyUntil(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(overrideLineChargeClientRequest)))
                        .done(function (result) {
                        _this._loadHeaderCharges();
                        _this._loadLineCharges();
                    }).fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }
                return Commerce.AsyncResult.createResolved({ canceled: true });
            };
            ManageChargesViewModel.prototype.selectHeaderCharges = function (selectedItems) {
                this.selectedHeaderChargeDisplays(selectedItems);
            };
            ManageChargesViewModel.prototype.selectLineCharges = function (selectedItems) {
                this.selectedLineChargeDisplays(selectedItems);
            };
            ManageChargesViewModel.prototype.mobileChargeDetailsAsync = function () {
                var selectedCharge = this.selectedChargeDisplay();
                var activity = new Commerce.Activities.ManageChargesDetailsActivity({
                    currencyCode: selectedCharge.currencyCode,
                    deliveryMode: selectedCharge.deliveryMode,
                    overrideReason: selectedCharge.overrideReason,
                });
                return activity.execute();
            };
            ManageChargesViewModel.prototype.toggleDetails = function () {
                this.detailsExpanded(!this.detailsExpanded());
            };
            ManageChargesViewModel._getProductVariant = function (cartLine) {
                var product = Commerce.Session.instance.getFromProductsInCartCache(cartLine.ProductId);
                return Commerce.ObjectExtensions.isNullOrUndefined(product) ? Commerce.StringExtensions.EMPTY : Commerce.SimpleProductHelper.getVariantDescription(product);
            };
            ManageChargesViewModel._createLineCharge = function (chargeLine, cartLine) {
                var lastChargeReasonCode;
                if (Commerce.ObjectExtensions.isNullOrUndefined(chargeLine.ChargeLineOverrides) ||
                    chargeLine.ChargeLineOverrides.length < 1 ||
                    Commerce.ObjectExtensions.isNullOrUndefined(chargeLine.ChargeLineOverrides[chargeLine.ChargeLineOverrides.length - 1]) ||
                    Commerce.ObjectExtensions.isNullOrUndefined(chargeLine.ChargeLineOverrides[chargeLine.ChargeLineOverrides.length - 1].OverrideReasonDescription)) {
                    lastChargeReasonCode = Commerce.StringExtensions.EMPTY;
                }
                else {
                    lastChargeReasonCode = chargeLine.ChargeLineOverrides[chargeLine.ChargeLineOverrides.length - 1].OverrideReasonDescription;
                }
                var chargeDisplay = {
                    chargeCode: chargeLine.ChargeCode,
                    description: chargeLine.Description,
                    itemName: cartLine.Description,
                    itemNumber: cartLine.ItemId,
                    itemVariant: ManageChargesViewModel._getProductVariant(cartLine),
                    chargeAmountFormatted: Commerce.NumberExtensions.formatCurrency(chargeLine.CalculatedAmount),
                    currencyCode: chargeLine.CurrencyCode,
                    deliveryMode: cartLine.DeliveryMode,
                    overrideReason: lastChargeReasonCode,
                    chargeLine: chargeLine,
                    cartLine: cartLine,
                };
                return chargeDisplay;
            };
            ManageChargesViewModel._createHeaderCharge = function (chargeLine) {
                var lastChargeReasonCode;
                if (Commerce.ObjectExtensions.isNullOrUndefined(chargeLine.ChargeLineOverrides) ||
                    chargeLine.ChargeLineOverrides.length < 1 ||
                    Commerce.ObjectExtensions.isNullOrUndefined(chargeLine.ChargeLineOverrides[chargeLine.ChargeLineOverrides.length - 1]) ||
                    Commerce.ObjectExtensions.isNullOrUndefined(chargeLine.ChargeLineOverrides[chargeLine.ChargeLineOverrides.length - 1].OverrideReasonDescription)) {
                    lastChargeReasonCode = Commerce.StringExtensions.EMPTY;
                }
                else {
                    lastChargeReasonCode = chargeLine.ChargeLineOverrides[chargeLine.ChargeLineOverrides.length - 1].OverrideReasonDescription;
                }
                var cartDeliveryMode = Commerce.Session.instance.cart.DeliveryMode;
                var chargeDisplay = {
                    chargeCode: chargeLine.ChargeCode,
                    description: chargeLine.Description,
                    chargeAmountFormatted: Commerce.NumberExtensions.formatCurrency(chargeLine.CalculatedAmount),
                    currencyCode: chargeLine.CurrencyCode,
                    deliveryMode: Commerce.ObjectExtensions.isNullOrUndefined(cartDeliveryMode) ? Commerce.StringExtensions.EMPTY : cartDeliveryMode,
                    overrideReason: lastChargeReasonCode,
                    itemName: Commerce.StringExtensions.EMPTY,
                    itemVariant: Commerce.StringExtensions.EMPTY,
                    itemNumber: Commerce.StringExtensions.EMPTY,
                    chargeLine: chargeLine,
                };
                return chargeDisplay;
            };
            ManageChargesViewModel.prototype._loadHeaderCharges = function () {
                var headerChargeDisplays = [];
                Commerce.Session.instance.cart.ChargeLines.forEach(function (charge) {
                    var chargeDisplay = ManageChargesViewModel._createHeaderCharge(charge);
                    headerChargeDisplays.push(chargeDisplay);
                });
                this.headerChargeDisplays(headerChargeDisplays);
            };
            ManageChargesViewModel.prototype._loadLineCharges = function () {
                var lineChargeDisplays = [];
                Commerce.Session.instance.cart.CartLines.filter(function (cl) { return !cl.IsVoided; }).forEach(function (cartLine) {
                    cartLine.ChargeLines.forEach(function (charge) {
                        var chargeDisplay = ManageChargesViewModel._createLineCharge(charge, cartLine);
                        lineChargeDisplays.push(chargeDisplay);
                    });
                });
                this.lineChargeDisplays(lineChargeDisplays);
            };
            ManageChargesViewModel.LINE = "line";
            ManageChargesViewModel.HEADER = "header";
            ManageChargesViewModel.LINE_INDEX = 0;
            ManageChargesViewModel.HEADER_INDEX = 1;
            return ManageChargesViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.ManageChargesViewModel = ManageChargesViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var ManageSafesViewModel = (function (_super) {
            __extends(ManageSafesViewModel, _super);
            function ManageSafesViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                _this._correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                _this.subTitle = Commerce.ViewModelAdapter.getResourceString("string_30114");
                _this.storeSafes = ko.observableArray(options.storeSafes);
                _this._onResultAvailableAsync = options.onResultAvailableAsync;
                _this._selectedSafe = ko.observable(null);
                _this.hasSelectedStoreSafe = ko.computed(function () {
                    return (!Commerce.ObjectExtensions.isNullOrUndefined(_this._selectedSafe()));
                });
                return _this;
            }
            ManageSafesViewModel.prototype.onHidden = function () {
                this._onResultAvailableAsync();
            };
            ManageSafesViewModel.prototype.selectStoreSafes = function (storeSafe) {
                if (Commerce.ArrayExtensions.hasElements(storeSafe)) {
                    this._selectedSafe(storeSafe[0]);
                }
                else {
                    this._selectedSafe(null);
                }
            };
            ManageSafesViewModel.prototype.declareStartAmountAsync = function () {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._selectedSafe())) {
                    var options_1 = {
                        storeSafe: this._selectedSafe(),
                        transactionContext: Commerce.Proxy.Entities.CashManagementTransactionContext.Safe
                    };
                    var asyncQueue = new Commerce.AsyncQueue();
                    asyncQueue.enqueue(function () {
                        return Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.DeclareStartAmount, options_1);
                    }).enqueue(function () {
                        return _this._refreshStoreSafesAsync();
                    });
                    return this._isBusyUntil(asyncQueue.run().fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    }));
                }
                else {
                    return Commerce.AsyncResult.createResolved({ canceled: true });
                }
            };
            ManageSafesViewModel.prototype.tenderRemovalAsync = function () {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._selectedSafe())) {
                    var options_2 = {
                        storeSafe: this._selectedSafe(),
                        transactionContext: Commerce.Proxy.Entities.CashManagementTransactionContext.Safe
                    };
                    var asyncQueue = new Commerce.AsyncQueue();
                    asyncQueue.enqueue(function () {
                        return Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.TenderRemoval, options_2);
                    }).enqueue(function () {
                        return _this._refreshStoreSafesAsync();
                    });
                    return this._isBusyUntil(asyncQueue.run().fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    }));
                }
                else {
                    return Commerce.AsyncResult.createResolved({ canceled: true });
                }
            };
            ManageSafesViewModel.prototype.floatEntryAsync = function () {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._selectedSafe())) {
                    var options_3 = {
                        storeSafe: this._selectedSafe(),
                        transactionContext: Commerce.Proxy.Entities.CashManagementTransactionContext.Safe
                    };
                    var asyncQueue = new Commerce.AsyncQueue();
                    asyncQueue.enqueue(function () {
                        return Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.FloatEntry, options_3);
                    }).enqueue(function () {
                        return _this._refreshStoreSafesAsync();
                    });
                    return this._isBusyUntil(asyncQueue.run().fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    }));
                }
                else {
                    return Commerce.AsyncResult.createResolved({ canceled: true });
                }
            };
            ManageSafesViewModel.prototype.bankDropAsync = function () {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._selectedSafe())) {
                    var options_4 = {
                        storeSafe: this._selectedSafe(),
                        transactionContext: Commerce.Proxy.Entities.CashManagementTransactionContext.Safe
                    };
                    var asyncQueue = new Commerce.AsyncQueue();
                    asyncQueue.enqueue(function () {
                        return Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.BankDrop, options_4);
                    }).enqueue(function () {
                        return _this._refreshStoreSafesAsync();
                    });
                    return this._isBusyUntil(asyncQueue.run().fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    }));
                }
                else {
                    return Commerce.AsyncResult.createResolved({ canceled: true });
                }
            };
            ManageSafesViewModel.prototype._refreshStoreSafesAsync = function () {
                var _this = this;
                return this.storeOperationsManager.getStoreSafesAsync().done(function (storeSafes) {
                    Commerce.RetailLogger.getStoreSafesSucceeded(storeSafes.length.toString(), _this._correlationId);
                    _this.storeSafes(storeSafes);
                }).fail(function (errors) {
                    Commerce.RetailLogger.getStoreSafesFailed(Commerce.ErrorHelper.getErrorMessages(errors), _this._correlationId);
                });
            };
            return ManageSafesViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.ManageSafesViewModel = ManageSafesViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var ManageShiftsViewModel = (function (_super) {
            __extends(ManageShiftsViewModel, _super);
            function ManageShiftsViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this.nonClosedShifts = ko.observableArray([]);
                _this._selectedShifts = ko.observableArray([]);
                _this.subTitle = Commerce.ViewModelAdapter.getResourceString("string_2114");
                _this.hasSelectedSingleBlindClosedShift = ko.computed(function () {
                    return (Commerce.ArrayExtensions.hasElements(_this._selectedShifts())
                        && _this._selectedShifts()[0].StatusValue === Commerce.Proxy.Entities.ShiftStatus.BlindClosed
                        && _this._selectedShifts().length === 1);
                });
                _this.hasSelectedSingleBlindClosedShiftAndReconciledShift = ko.computed(function () {
                    return (Commerce.ArrayExtensions.hasElements(_this._selectedShifts())
                        && _this._selectedShifts()[0].StatusValue === Commerce.Proxy.Entities.ShiftStatus.BlindClosed
                        && _this._selectedShifts().length === 1
                        && (!Commerce.ApplicationContext.Instance.deviceConfiguration.UseAdvancedCashManagement || _this._selectedShifts()[0].NumberOfUnreconciledLines === 0));
                });
                _this.hasSelectedSingleInvalidShift = ko.computed(function () {
                    return (Commerce.ArrayExtensions.hasElements(_this._selectedShifts())
                        && _this._selectedShifts()[0].StatusValue === Commerce.Proxy.Entities.ShiftStatus.Invalid
                        && _this._selectedShifts().length === 1);
                });
                _this.hasSelectedReconcilableShifts = ko.computed(function () {
                    var hasSelectedOnlyNonInvalidShifts = true;
                    if (Commerce.ArrayExtensions.hasElements(_this._selectedShifts())) {
                        _this._selectedShifts().forEach(function (shift) {
                            if (shift.StatusValue === Commerce.Proxy.Entities.ShiftStatus.Invalid) {
                                hasSelectedOnlyNonInvalidShifts = false;
                            }
                        });
                    }
                    return (Commerce.ArrayExtensions.hasElements(_this._selectedShifts())
                        && hasSelectedOnlyNonInvalidShifts
                        && Commerce.ApplicationContext.Instance.deviceConfiguration.UseAdvancedCashManagement);
                });
                _this._isExtensionCommandViewModelBusy = ko.observable(false);
                if (Commerce.ObjectExtensions.isNullOrUndefined(ManageShiftsViewModel._viewExtensionsManager)) {
                    _this._extensionCommandViewModels = [];
                }
                else {
                    _this._extensionCommandViewModels = ManageShiftsViewModel._viewExtensionsManager.getAppBarCommands()
                        .map(function (command) {
                        var commandVM = new ViewModels.CommandViewModel(command);
                        commandVM.addMessageHandler("RefreshShifts", _this._refreshShifts.bind(_this));
                        commandVM.addMessageHandler("IsProcessingChanged", function (isProcessing) {
                            if (isProcessing) {
                                _this._isExtensionCommandViewModelBusy(true);
                            }
                            else {
                                var isAnyCommandProcessing = _this._extensionCommandViewModels.some(function (vm) {
                                    return vm.isProcessing;
                                });
                                _this._isExtensionCommandViewModelBusy(isAnyCommandProcessing);
                            }
                        });
                        return commandVM;
                    });
                    _this._isBusyWhen(_this._isExtensionCommandViewModelBusy);
                    _this._subscribeExtensionsToChanges();
                }
                return _this;
            }
            Object.defineProperty(ManageShiftsViewModel.prototype, "extensionCommandViewModels", {
                get: function () {
                    return this._extensionCommandViewModels;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ManageShiftsViewModel, "viewExtensionManager", {
                set: function (manager) {
                    ManageShiftsViewModel._viewExtensionsManager = manager;
                },
                enumerable: true,
                configurable: true
            });
            ManageShiftsViewModel.prototype.loadAsync = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                return this._getNonClosedShiftsAsync(correlationId)
                    .done(function (bcShifts) {
                    for (var n = 0; n < bcShifts.length; n++) {
                        _this.nonClosedShifts.push(bcShifts[n]);
                    }
                    var shiftsReturned = Commerce.ShiftHelper.GetShiftDetailsForLogging(bcShifts);
                    Commerce.RetailLogger.getShiftsSucceeded(Commerce.Proxy.Entities.ShiftStatus.BlindClosed.toString(), shiftsReturned, Commerce.ShiftHelper.getCurrentShift(), correlationId);
                }).fail(function (errors) {
                    Commerce.RetailLogger.getShiftsFailed(Commerce.Proxy.Entities.ShiftStatus.BlindClosed.toString(), Commerce.ShiftHelper.getCurrentShift(), Commerce.ErrorHelper.getErrorMessages(errors), correlationId);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                }).always(function () {
                    var commandState = {
                        nonClosedShifts: Commerce.ObjectExtensions.clone(_this.nonClosedShifts())
                    };
                    _this.extensionCommandViewModels.forEach(function (vm) {
                        vm.sendMessage("Initialize", commandState);
                    });
                });
            };
            ManageShiftsViewModel.prototype.selectShifts = function (shifts) {
                if (Commerce.ArrayExtensions.hasElements(shifts)) {
                    var selectedShifts_1 = [];
                    shifts.forEach(function (shift) {
                        selectedShifts_1.push(shift);
                    });
                    this._selectedShifts(selectedShifts_1);
                }
                else {
                    this._selectedShifts(null);
                }
            };
            ManageShiftsViewModel.prototype.declareStartAmountAsync = function () {
                if (Commerce.ArrayExtensions.hasElements(this._selectedShifts())) {
                    var options = { shift: this._selectedShifts()[0] };
                    var asyncResult = Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.DeclareStartAmount, options)
                        .fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                    return this._isBusyUntil(asyncResult);
                }
                else {
                    return Commerce.VoidAsyncResult.createResolved();
                }
            };
            ManageShiftsViewModel.prototype.tenderDeclarationAsync = function () {
                if (Commerce.ArrayExtensions.hasElements(this._selectedShifts())) {
                    var options = { shift: this._selectedShifts()[0] };
                    var asyncResult = Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.TenderDeclaration, options)
                        .fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                    return this._isBusyUntil(asyncResult);
                }
                else {
                    return Commerce.VoidAsyncResult.createResolved();
                }
            };
            ManageShiftsViewModel.prototype.bankDropAsync = function () {
                if (Commerce.ArrayExtensions.hasElements(this._selectedShifts())) {
                    var options = { shift: this._selectedShifts()[0] };
                    return this._isBusyUntil(Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.BankDrop, options))
                        .fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }
                else {
                    return Commerce.VoidAsyncResult.createResolved();
                }
            };
            ManageShiftsViewModel.prototype.printXAsync = function () {
                var result;
                if (Commerce.ArrayExtensions.hasElements(this._selectedShifts())) {
                    var options = { shift: this._selectedShifts()[0] };
                    result = this._isBusyUntil(Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.PrintX, options))
                        .fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }
                else {
                    result = Commerce.VoidAsyncResult.createResolved();
                }
                return result;
            };
            ManageShiftsViewModel.prototype.closeShiftAsync = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var result;
                if (Commerce.ArrayExtensions.hasElements(this._selectedShifts())) {
                    var options = { shift: this._selectedShifts()[0], correlationId: correlationId };
                    result = this._isBusyUntil(Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.CloseShift, options))
                        .done(function (result) {
                        if (result.canceled) {
                            return;
                        }
                        var _index = _this.nonClosedShifts().indexOf(_this._selectedShifts()[0]);
                        _this.nonClosedShifts().splice(_index, 1);
                        _this.nonClosedShifts(_this.nonClosedShifts());
                        _this._selectedShifts(null);
                    }).fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }
                else {
                    result = Commerce.VoidAsyncResult.createResolved();
                }
                return result;
            };
            ManageShiftsViewModel.prototype.forceDeleteShiftAsync = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var result;
                if (Commerce.ArrayExtensions.hasElements(this._selectedShifts())) {
                    var selectedShift_1 = this._selectedShifts()[0];
                    return this._isBusyUntil(this._forceDeleteShiftAsync(correlationId))
                        .done(function (shift) {
                        Commerce.RetailLogger.forceDeleteShiftSucceeded(selectedShift_1.ShiftId + " : " + selectedShift_1.TerminalId, selectedShift_1.CashDrawer, selectedShift_1.StaffId, String(selectedShift_1.IsShared), selectedShift_1.StatusValue, correlationId);
                        var _index = _this.nonClosedShifts().indexOf(selectedShift_1);
                        _this.nonClosedShifts().splice(_index, 1);
                        _this.nonClosedShifts(_this.nonClosedShifts());
                        _this._selectedShifts([]);
                    }).fail(function (errors) {
                        Commerce.RetailLogger.forceDeleteShiftFailed(selectedShift_1.ShiftId + " : " + selectedShift_1.TerminalId, selectedShift_1.CashDrawer, selectedShift_1.StaffId, String(selectedShift_1.IsShared), Commerce.ErrorHelper.getErrorMessages(errors), correlationId);
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }
                else {
                    result = Commerce.VoidAsyncResult.createResolved();
                }
                return result;
            };
            ManageShiftsViewModel.prototype.openReconcileShiftsView = function () {
                if (Commerce.ArrayExtensions.hasElements(this._selectedShifts())) {
                    var options = { shiftsToReconcile: [] };
                    options.shiftsToReconcile = this._selectedShifts().map(function (shift) {
                        var shiftKey = {
                            ShiftId: shift.ShiftId,
                            ShiftTerminalId: shift.TerminalId,
                            Store: shift.StoreId
                        };
                        return shiftKey;
                    });
                    Commerce.ViewModelAdapter.navigate("ReconcileShiftsView", options);
                }
            };
            ManageShiftsViewModel.prototype._forceDeleteShiftAsync = function (correlationId) {
                return this.storeOperationsManager.forceDeleteShiftAsync(this._selectedShifts()[0].TerminalId, this._selectedShifts()[0].ShiftId, correlationId);
            };
            ManageShiftsViewModel.prototype._getNonClosedShiftsAsync = function (correlationId) {
                var shiftRetrievalCriteria = {
                    ShiftStatusValue: Commerce.Proxy.Entities.ShiftStatus.None,
                    FilterByUserRole: false,
                    IncludeAllShiftsForStore: true
                };
                return this.storeOperationsManager.getShiftsByRetrievalCriteriaAsync(shiftRetrievalCriteria, correlationId)
                    .done(function (shifts) {
                    Commerce.RetailLogger.getShiftsByRetrievalCriteriaSucceeded(shiftRetrievalCriteria.ShiftStatusValue.toString(), String(shiftRetrievalCriteria.FilterByUserRole), String(shiftRetrievalCriteria.IncludeAllShiftsForStore), Commerce.ShiftHelper.GetShiftDetailsForLogging(shifts), Commerce.ShiftHelper.getCurrentShift(), correlationId);
                }).fail(function (errors) {
                    Commerce.RetailLogger.getShiftsByRetrievalCriteriaFailed(shiftRetrievalCriteria.ShiftStatusValue.toString(), String(shiftRetrievalCriteria.FilterByUserRole), String(shiftRetrievalCriteria.IncludeAllShiftsForStore), Commerce.ShiftHelper.getCurrentShift(), Commerce.ErrorHelper.serializeError(errors), correlationId);
                });
            };
            ManageShiftsViewModel.prototype._subscribeExtensionsToChanges = function () {
                var _this = this;
                this._selectedShifts.subscribe(function (shift) {
                    if (Commerce.ArrayExtensions.hasElements(_this._selectedShifts())) {
                        _this._sendMessageToExtensions("ShiftSelected", { selectedShift: _this._selectedShifts()[0], selectedShifts: _this._selectedShifts() });
                    }
                    else {
                        _this._sendMessageToExtensions("ShiftSelectionCleared", undefined);
                    }
                });
            };
            ManageShiftsViewModel.prototype._sendMessageToExtensions = function (messageType, messageData) {
                this.extensionCommandViewModels.forEach(function (vm) {
                    vm.sendMessage(messageType, messageData);
                });
            };
            ManageShiftsViewModel.prototype._refreshShifts = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                this._isBusyUntil(this._getNonClosedShiftsAsync(correlationId).done(function (bcShifts) {
                    _this.nonClosedShifts(bcShifts);
                    _this._selectedShifts(null);
                }));
            };
            return ManageShiftsViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.ManageShiftsViewModel = ManageShiftsViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var NotificationCenterViewModel = (function (_super) {
            __extends(NotificationCenterViewModel, _super);
            function NotificationCenterViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this.notifications = ko.observableArray([]);
                _this.refreshNotificationBusyStatus = {};
                Commerce.Session.instance.notifications.forEach(function (notification) {
                    _this.notifications.push(notification);
                    _this.refreshNotificationBusyStatus[notification.Action] = ko.observable(false);
                });
                _this.hasNotifications = ko.observable(Commerce.ArrayExtensions.hasElements(Commerce.Session.instance.notifications)
                    || Commerce.Session.instance.isCustomerSatisfactionSurveryEnabled);
                _this.isNotificationsSuccessful = ko.observable(Commerce.Session.instance.isGetNotificationsSuccessful);
                _this.customerSatisfactionRating = ko.observable(0);
                _this.customerSatisfactionComment = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.displayCustomerSatisfaction = ko.observable(Commerce.Session.instance.isCustomerSatisfactionSurveryEnabled);
                _this.customerSatisfactionSurveySent = ko.observable(false);
                _this.isCustomerSatisfactionRatingSelected = ko.computed(function () {
                    return _this.customerSatisfactionRating() !== 0;
                });
                return _this;
            }
            NotificationCenterViewModel.prototype.refreshNotification = function (action) {
                var _this = this;
                this.notifications().forEach(function (notification) {
                    if (notification.Action === action && !_this.refreshNotificationBusyStatus[action]()) {
                        _this.refreshNotificationBusyStatus[action](true);
                        Commerce.NotificationHelper.refreshNotification(notification)
                            .map(function (result) {
                            if (!result.canceled) {
                                notification = result.data.result;
                                _this.notifications.valueHasMutated();
                            }
                        }).always(function () {
                            _this.refreshNotificationBusyStatus[action](false);
                        });
                    }
                });
            };
            NotificationCenterViewModel.prototype.updateNotifications = function () {
                this.notifications(Commerce.Session.instance.notifications);
                Commerce.Session.instance.recentlyPulledNotificationsStatus = false;
                this.isNotificationsSuccessful(Commerce.Session.instance.isGetNotificationsSuccessful);
                this.hasNotifications(Commerce.ArrayExtensions.hasElements(Commerce.Session.instance.notifications)
                    || Commerce.Session.instance.isCustomerSatisfactionSurveryEnabled);
            };
            NotificationCenterViewModel.prototype.sendCustomerSatisfactionSurveyAsync = function () {
                Commerce.Session.instance.isCustomerSatisfactionSurveryEnabled = false;
                this.customerSatisfactionSurveySent(true);
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.customerSatisfactionSurveyRequestStarted(correlationId);
                var surveyRequest = new Commerce.CustomerSatisfaction.CustomerSatisfactionSurveyRequest(correlationId, this.customerSatisfactionRating(), this.customerSatisfactionComment());
                return Commerce.Runtime.executeAsync(surveyRequest).then(function (result) {
                    Commerce.RetailLogger.customerSatisfactionSurveyRequestSucceeded(surveyRequest.correlationId);
                }).catch(function (error) {
                    Commerce.RetailLogger.customerSatisfactionSurveyRequestFailed(surveyRequest.correlationId, error.toString());
                });
            };
            NotificationCenterViewModel.prototype.cancelCustomerSatisfactionSurveyAsync = function () {
                Commerce.Session.instance.isCustomerSatisfactionSurveryEnabled = false;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.customerSatisfactionCancelRequestStarted(correlationId);
                var cancelRequest = new Commerce.CustomerSatisfaction.CustomerSatisfactionCancelRequest(correlationId);
                return Commerce.Runtime.executeAsync(cancelRequest).then(function (result) {
                    Commerce.RetailLogger.customerSatisfactionCancelRequestSucceeded(cancelRequest.correlationId);
                }).catch(function (error) {
                    Commerce.RetailLogger.customerSatisfactionCancelRequestFailed(cancelRequest.correlationId, error.toString());
                });
            };
            return NotificationCenterViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.NotificationCenterViewModel = NotificationCenterViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var PaymentHistoryViewModel = (function (_super) {
            __extends(PaymentHistoryViewModel, _super);
            function PaymentHistoryViewModel(context) {
                return _super.call(this, context) || this;
            }
            PaymentHistoryViewModel.prototype.getPaymentsHistory = function (cart) {
                var operationOptions = { cart: cart };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.PaymentsHistory, operationOptions)
                    .map(function (result) {
                    return result.data;
                });
            };
            return PaymentHistoryViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.PaymentHistoryViewModel = PaymentHistoryViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var UserMode;
        (function (UserMode) {
            UserMode[UserMode["SEARCH_ON_MAP"] = 0] = "SEARCH_ON_MAP";
            UserMode[UserMode["ALL_STORES"] = 1] = "ALL_STORES";
        })(UserMode = ViewModels.UserMode || (ViewModels.UserMode = {}));
        var PickUpInStoreViewModel = (function (_super) {
            __extends(PickUpInStoreViewModel, _super);
            function PickUpInStoreViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                _this._isMapLoaded = false;
                _this._eventListenerRegistered = false;
                _this._messageEventListener = null;
                _this._options = options;
                _this._cartLines = Commerce.ObjectExtensions.isNullOrUndefined(options.cartLines) ? [] : options.cartLines;
                _this.selectedLocation = ko.observable(null);
                _this.locations = ko.observableArray([]);
                _this.searchText = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.requestedPickupDate = ko.observable(Commerce.DateExtensions.getDate());
                _this.errorMessageSearchResult = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.errorMessageSearchResultAvailable = ko.observable(false);
                _this._selectedLocationFromAllStoreList = ko.observable(null);
                _this.hasSelectedLocationFromAllStoreList = ko.computed(function () { return !Commerce.ObjectExtensions.isNullOrUndefined(_this._selectedLocationFromAllStoreList()); }, _this);
                _this.showMap = ko.computed(function () { return Commerce.ApplicationContext.Instance.channelConfiguration.BingMapsEnabled; }, _this);
                _this._userMode = ko.observable(_this.showMap() ? UserMode.SEARCH_ON_MAP : UserMode.ALL_STORES);
                _this.isSearchOnMapMode = ko.computed(function () { return _this._userMode() === UserMode.SEARCH_ON_MAP; }, _this);
                _this._storeLocationSearchCriteria = new Commerce.Proxy.Entities.OrgUnitLocationSearchCriteriaClass();
                _this._isChangeShippingLocationFeatureEnabled =
                    Commerce.ApplicationSession.instance.featureStateContext.isFeatureEnabled(Commerce.Client.Entities.FeatureNameEnum.ChangeShippingLocationFeature);
                if (_this._isChangeShippingLocationFeatureEnabled) {
                    _this._storeLocationSearchCriteria = new Commerce.Proxy.Entities.OrgUnitLocationSearchCriteriaClass({
                        DeliveryModeTypeFilterValue: Commerce.Proxy.Entities.DeliveryModeTypeFilter.Pickup
                    });
                }
                _this.reloadStoreLocationsCallback = ko.observable(function () { return; });
                _this._isBusyFlag = ko.observable(false);
                _this._isBusyWhen(ko.computed(function () { return _this._isBusyFlag(); }));
                var cart = Commerce.Session.instance.cart;
                _this._cancelSelectionHandlerOnHidden = true;
                if ((Commerce.DateExtensions.isValidDate(cart.RequestedDeliveryDate))
                    && (Commerce.CartHelper.GetNonVoidedCartLines(cart.CartLines).length === _this._cartLines.length)) {
                    _this.requestedPickupDate(cart.RequestedDeliveryDate);
                }
                else if (Commerce.ArrayExtensions.hasElements(_this._cartLines) && Commerce.DateExtensions.isValidDate(_this._cartLines[0].RequestedDeliveryDate)) {
                    _this.requestedPickupDate(_this._cartLines[0].RequestedDeliveryDate);
                }
                _this.disablePreferredShipping = ko.computed(_this._isPreferredShippingDisabled, _this);
                _this.minYear = Commerce.DateExtensions.getDate().getFullYear();
                return _this;
            }
            PickUpInStoreViewModel.prototype.load = function (map) {
                this._map = map;
                this._addMessageEventListener();
                this._eventListenerRegistered = true;
            };
            PickUpInStoreViewModel.prototype.onShown = function () {
                if (this._eventListenerRegistered) {
                    this._eventListenerRegistered = false;
                    return;
                }
                this._cancelSelectionHandlerOnHidden = true;
                this._addMessageEventListener();
            };
            PickUpInStoreViewModel.prototype.onHidden = function () {
                if (this._cancelSelectionHandlerOnHidden && !Commerce.ObjectExtensions.isNullOrUndefined(this._options.storeSelectionHandler)) {
                    this._options.storeSelectionHandler.cancel();
                }
            };
            PickUpInStoreViewModel.prototype.onNavigateBack = function () {
                this._cancelSelectionHandlerOnHidden = false;
            };
            PickUpInStoreViewModel.prototype.unload = function () {
                this._map.dispose();
            };
            PickUpInStoreViewModel.prototype.search = function () {
                this._setIsBusy();
                this._map.removePushpins();
                this._map.removeInfobox();
                this.locations([]);
                this.errorMessageSearchResultAvailable(false);
                this._map.searchByAddress(this.searchText());
            };
            PickUpInStoreViewModel.prototype.searchCurrentStore = function () {
                this._searchStoresByAddress(this._currentStoreAddress);
            };
            PickUpInStoreViewModel.prototype.searchPreferredShipping = function () {
                this._searchStoresByAddress(this._currentCustomerAddress);
            };
            PickUpInStoreViewModel.prototype.finalizePickUpAsync = function (cartViewOptions) {
                var _this = this;
                if (!Commerce.Utilities.DateTimeHelper.isTodayOrFutureDateInChannelTimeZone(this.requestedPickupDate())) {
                    return Commerce.NotificationHandler.displayErrorMessage(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDSHIPPINGDATE);
                }
                var location = this.selectedLocation();
                if (Commerce.ObjectExtensions.isNullOrUndefined(location)) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                var selectedStore = Commerce.ApplicationContext.Instance.availableStores.getItem(location.store.OrgUnitNumber);
                var shippingAddress = Commerce.ObjectExtensions.isNullOrUndefined(selectedStore)
                    ? new Commerce.Proxy.Entities.AddressClass()
                    : selectedStore.OrgUnitAddress;
                this.selectedLocation(null);
                return this._isBusyUntil(this.setPickupInStoreDeliveryAsync(Commerce.Session.instance.cart, this._cartLines, location.store.OrgUnitNumber, this.requestedPickupDate(), shippingAddress))
                    .done(function () {
                    Commerce.ViewModelAdapter.navigate("CartView", cartViewOptions);
                })
                    .fail(function (error) {
                    _this.selectedLocation(null);
                    _this._displayErrors(error);
                });
            };
            PickUpInStoreViewModel.prototype.cancelPickUp = function () {
                this.selectedLocation(null);
            };
            PickUpInStoreViewModel.prototype.pickUpError = function () {
                this._displayErrors([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.APPLICATION_ERROR)]);
                this.selectedLocation(null);
            };
            PickUpInStoreViewModel.prototype.onMapLoaded = function () {
                this._getCurrentStoreSuccess(Commerce.ApplicationContext.Instance.storeInformation);
            };
            PickUpInStoreViewModel.prototype.mapError = function (msg) {
                this._isBusyFlag(false);
                Commerce.RetailLogger.viewsCustomerPickUpInStoreViewBingMapsFaild(msg.message);
                this.errorMessageSearchResult(Commerce.ViewModelAdapter.getResourceString("string_29015"));
                this.errorMessageSearchResultAvailable(true);
            };
            PickUpInStoreViewModel.prototype.mapInitializationErrorAsync = function (msg) {
                var _this = this;
                Commerce.RetailLogger.viewsCustomerPickUpInStoreViewBingMapsFailedToInitialize(msg.message);
                return this._getStoreLocationByAreaAsync(PickUpInStoreViewModel.EARTH_AREA)
                    .done(function (storeLocations) {
                    _this.locations([]);
                    _this._isBusyFlag(false);
                }).done(function () {
                    var errors = [new Commerce.Proxy.Entities.Error("string_29015")];
                    _this._displayErrors(errors);
                });
            };
            PickUpInStoreViewModel.prototype.updateLocationsAsync = function (data) {
                this._setIsBusy();
                var searchArea = {
                    Longitude: data.longitude,
                    Latitude: data.latitude,
                    Radius: data.radius,
                    DistanceUnitValue: PickUpInStoreViewModel.DEFAULT_DISTANCE_UNIT
                };
                return this._searchStoresByAreaAsync(searchArea);
            };
            PickUpInStoreViewModel.prototype.mapSearchSuccessAsync = function (data) {
                var _this = this;
                this._isBusyFlag(false);
                if (Commerce.ObjectExtensions.isNullOrUndefined(data) || Commerce.ObjectExtensions.isNullOrUndefined(data.searchResult)) {
                    this.errorMessageSearchResult(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_29014"), this.searchText()));
                    this.errorMessageSearchResultAvailable(true);
                    return Commerce.VoidAsyncResult.createResolved();
                }
                this.errorMessageSearchResultAvailable(false);
                var searchArea = new Commerce.Proxy.Entities.SearchAreaClass({
                    Longitude: data.searchResult.location.longitude,
                    Latitude: data.searchResult.location.latitude,
                    Radius: data.radius,
                    DistanceUnitValue: PickUpInStoreViewModel.DEFAULT_DISTANCE_UNIT
                });
                if (this._isMapLoaded && !Commerce.StringExtensions.isEmptyOrWhitespace(this.searchText())) {
                    return this._searchStoresByAreaAsync(searchArea);
                }
                else {
                    return this._getStoreLocationByAreaAsync(searchArea)
                        .done(function (storeLocations) {
                        _this._initMap();
                    }).fail(function (errors) { _this._displayErrors(errors); });
                }
            };
            PickUpInStoreViewModel.prototype.setPickupInStoreDeliveryAsync = function (cart, cartLines, storeNumber, pickupDate, storeAddress) {
                var isPickupAll = Commerce.CartHelper.areAllCartLinesSelected(cart, cartLines);
                if (isPickupAll) {
                    var pickupAllOperationRequest = new Commerce.PickupAllOperationRequest(Commerce.LoggerHelper.getNewCorrelationId(), pickupDate, storeNumber);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(pickupAllOperationRequest));
                }
                var operationPickupSelectedOptions = {
                    cart: cart,
                    cartLines: cartLines,
                    pickupDate: pickupDate,
                    storeAddress: storeAddress,
                    storeNumber: storeNumber
                };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.PickupSelectedProducts, operationPickupSelectedOptions);
            };
            PickUpInStoreViewModel.prototype.confirmStoreSelection = function () {
                this._showPickUpDialog(new Commerce.Proxy.Entities.StoreLocationWrapper(this._selectedLocationFromAllStoreList()));
            };
            PickUpInStoreViewModel.prototype.filterStoreLocationsAsync = function () {
                var _this = this;
                var refiners = Commerce.OrgUnitLocationSearchCriteriaConverter.getRefiners(this._storeLocationSearchCriteria);
                var getRefinerValuesRequest = new Commerce.Refiners.GetRefinerValuesClientRequest(refiners, "string_4189", false, Commerce.ErrorTypeEnum.INVALID_SEARCH_CRITERIA);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getRefinerValuesRequest))
                    .done(function (result) {
                    if (!result.canceled) {
                        _this._storeLocationSearchCriteria = Commerce.OrgUnitLocationSearchCriteriaConverter.getOrgUnitLocationSearchCriteria(result.data.refiners);
                        _this.reloadStoreLocationsCallback()();
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            PickUpInStoreViewModel.prototype.getStoreLocationsAsync = function (pageSize, skip) {
                return this.channelManager.searchOrgUnitLocationsAsync(this._storeLocationSearchCriteria, pageSize, skip)
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            PickUpInStoreViewModel.prototype.storeSelectionChanged = function (selectedLines) {
                if (!Commerce.ArrayExtensions.hasElements(selectedLines)) {
                    this._selectedLocationFromAllStoreList(null);
                }
                else {
                    this._selectedLocationFromAllStoreList(selectedLines[0]);
                }
            };
            PickUpInStoreViewModel.prototype.switchMode = function (modeData) {
                switch (modeData.detail.index) {
                    case 0:
                        this._userMode(this.showMap() ? UserMode.SEARCH_ON_MAP : UserMode.ALL_STORES);
                        break;
                    case 1:
                        this._userMode(UserMode.ALL_STORES);
                        break;
                }
            };
            Object.defineProperty(PickUpInStoreViewModel.prototype, "isBusyFlag", {
                get: function () {
                    return this._isBusyFlag;
                },
                enumerable: true,
                configurable: true
            });
            PickUpInStoreViewModel.prototype._displayErrors = function (errors) {
                this._isBusyFlag(false);
                Commerce.NotificationHandler.displayClientErrors(errors);
            };
            PickUpInStoreViewModel.prototype._getCurrentStoreSuccess = function (store) {
                this._currentStore = store;
                this._map.searchByAddress(this._currentStoreAddress);
            };
            Object.defineProperty(PickUpInStoreViewModel.prototype, "_currentStoreAddress", {
                get: function () {
                    var currentStoreAddress = Commerce.StringExtensions.EMPTY;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this._currentStore) && !Commerce.ObjectExtensions.isNullOrUndefined(this._currentStore.OrgUnitAddress)) {
                        var addressLines = Commerce.AddressHelper.getFormattedAddress(this._currentStore.OrgUnitAddress);
                        currentStoreAddress = addressLines.join();
                    }
                    return currentStoreAddress;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PickUpInStoreViewModel.prototype, "_currentCustomerAddress", {
                get: function () {
                    var primaryAddress = Commerce.CustomerHelper.getPrimaryCustomerAddressFromCustomerObject(Commerce.Session.instance.customerContext.customer);
                    var currentCustomerAddress = "";
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(primaryAddress)) {
                        var addressLines = Commerce.AddressHelper.getFormattedAddress(primaryAddress);
                        currentCustomerAddress = addressLines.join();
                    }
                    return currentCustomerAddress;
                },
                enumerable: true,
                configurable: true
            });
            PickUpInStoreViewModel.prototype._initMap = function () {
                this._isMapLoaded = true;
                this.locations.subscribe(this._onLocationsChanged, this);
                this._map.setMapView(Commerce.ApplicationContext.Instance.storeInformation);
            };
            PickUpInStoreViewModel.prototype._onLocationsChanged = function (newLocations) {
                var _this = this;
                this._map.removePushpins();
                newLocations.forEach(function (location, index) {
                    var itemNumber = (index + 1).toString();
                    _this._map.addMapPin(location.store.Latitude, location.store.Longitude, itemNumber);
                    location.storeIdentifier = itemNumber;
                });
            };
            PickUpInStoreViewModel.prototype._searchStoresByAreaAsync = function (searchArea) {
                var _this = this;
                return this._getStoreLocationByAreaAsync(searchArea).done(function (stores) {
                    var storesWrapper = [];
                    stores.forEach(function (storeLocation) {
                        var wrapper = new Commerce.Proxy.Entities.StoreLocationWrapper(storeLocation);
                        wrapper.storeUrlSelected = function () {
                            _this._map.addStoreInfobox(wrapper, true);
                        };
                        wrapper.storeSelected = function () {
                            _this._showPickUpDialog(wrapper);
                        };
                        storesWrapper.push(wrapper);
                    });
                    _this.locations(storesWrapper);
                    _this._isBusyFlag(false);
                }).fail(this._displayErrors.bind(this));
            };
            PickUpInStoreViewModel.prototype._searchStoresByAddress = function (address) {
                this._setIsBusy();
                this.searchText(address);
                this._map.searchByAddress(address);
            };
            PickUpInStoreViewModel.prototype._setIsBusy = function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.selectedLocation)) {
                    this._isBusyFlag(true);
                }
            };
            PickUpInStoreViewModel.prototype._addMessageEventListener = function () {
                if (this._map.hasApiKey()) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(this._messageEventListener)) {
                        this._messageEventListener = this._map.processMessage.bind(this._map);
                    }
                    this._map.addMessageEventListener(this._messageEventListener);
                }
            };
            PickUpInStoreViewModel.prototype._isPreferredShippingDisabled = function () {
                var isCustomerAddressNull = Commerce.StringExtensions.isNullOrWhitespace(this._currentCustomerAddress);
                return isCustomerAddressNull;
            };
            PickUpInStoreViewModel.prototype._showPickUpDialog = function (location) {
                var _this = this;
                if (this._options.isForPickUp) {
                    this.selectedLocation(location);
                    var getPickupDateQueue_1 = new Commerce.AsyncQueue();
                    getPickupDateQueue_1.enqueue(function () {
                        var getPickupDateClientRequest = new Commerce.GetPickupDateClientRequest(Commerce.Session.instance.cart, _this._cartLines);
                        return _this._isBusyUntil(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getPickupDateClientRequest)))
                            .done(function (getPickupDateResult) {
                            if (getPickupDateResult.canceled ||
                                Commerce.ObjectExtensions.isNullOrUndefined(getPickupDateResult.data) ||
                                Commerce.ObjectExtensions.isNullOrUndefined(getPickupDateResult.data.result)) {
                                getPickupDateQueue_1.cancel();
                            }
                            else {
                                _this.requestedPickupDate(getPickupDateResult.data.result);
                                var options = {
                                    transactionDetailViewMode: Commerce.ViewModels.CartViewTransactionDetailViewMode.delivery,
                                    correlationId: Commerce.StringExtensions.EMPTY
                                };
                                _this.finalizePickUpAsync(options);
                            }
                        }).fail(function (errors) {
                            _this._displayErrors(errors);
                        });
                    });
                    return getPickupDateQueue_1.run();
                }
                else if (!Commerce.ObjectExtensions.isNullOrUndefined(this._options.storeSelectionHandler)) {
                    this._isBusyFlag(true);
                    this._cancelSelectionHandlerOnHidden = false;
                    this._options.storeSelectionHandler.select(location.orgUnit, function () {
                        _this._cancelSelectionHandlerOnHidden = true;
                        _this._isBusyFlag(false);
                    }, function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                        _this._isBusyFlag(false);
                    });
                    return Commerce.AsyncResult.createResolved({ canceled: false });
                }
                else {
                    throw "Invalid storeSelectionCallback provided to PickUpInStoreView.";
                }
            };
            PickUpInStoreViewModel.prototype._getStoreLocationByAreaAsync = function (searchArea) {
                var deliveryModeTypeFilter = Commerce.Proxy.Entities.DeliveryModeTypeFilter.None;
                if (this._isChangeShippingLocationFeatureEnabled) {
                    deliveryModeTypeFilter = Commerce.Proxy.Entities.DeliveryModeTypeFilter.Pickup;
                }
                return this.channelManager.getStoreLocationByArea(searchArea, deliveryModeTypeFilter);
            };
            PickUpInStoreViewModel.DEFAULT_DISTANCE_UNIT = Commerce.Proxy.Entities.DistanceUnit.Miles;
            PickUpInStoreViewModel.EARTH_AREA = new Commerce.Proxy.Entities.SearchAreaClass({
                Longitude: 0,
                Latitude: 0,
                Radius: 0,
                DistanceUnitValue: PickUpInStoreViewModel.DEFAULT_DISTANCE_UNIT
            });
            return PickUpInStoreViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.PickUpInStoreViewModel = PickUpInStoreViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var PickUpViewModel = (function (_super) {
            __extends(PickUpViewModel, _super);
            function PickUpViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                _this._salesId = Commerce.StringExtensions.EMPTY;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw "Invalid options passed to the PickUpViewModel constructor: options cannot be null or undefined.";
                }
                else if (Commerce.StringExtensions.isNullOrWhitespace(options.salesId)) {
                    throw "Invalid options passed to the PickUpViewModel constructor: options.salesId cannot be null or whitespace.";
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.salesLinesSelectionHandler)) {
                    throw "Invalid options passed to the PickUpViewModel constructor: salesLinesSelectionHandler cannot be null in selection mode.";
                }
                _this.salesLines = ko.observableArray(null);
                _this.isNoLineSelected = ko.observable(true);
                _this._salesId = options.salesId;
                _this._salesLinesSelectionHandler = options.salesLinesSelectionHandler;
                _this._ignoreSelectionModeCancelation = false;
                return _this;
            }
            PickUpViewModel.prototype.loadAsync = function () {
                var _this = this;
                return this._isBusyUntil(this.getSalesLinesAvailableForPickUp())
                    .done(function (results) {
                    _this.salesLines(results);
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors).done(function () {
                        _this.cancelSalesLinesSelection();
                        Commerce.ViewModelAdapter.navigateBack();
                    });
                });
            };
            PickUpViewModel.prototype.onSelectionChanged = function (salesLines) {
                var noItemToPick = true;
                this._selectedSalesLines = salesLines;
                for (var i = 0; i < salesLines.length; i++) {
                    if (salesLines[i].Quantity > 0) {
                        noItemToPick = false;
                        break;
                    }
                }
                this.isNoLineSelected(!Commerce.ArrayExtensions.hasElements(this._selectedSalesLines) || noItemToPick);
            };
            PickUpViewModel.prototype.pickUpSalesLines = function () {
                var _this = this;
                if (!Commerce.ArrayExtensions.hasElements(this._selectedSalesLines)) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                this._ignoreSelectionModeCancelation = true;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var triggerOptions = {
                        cart: Commerce.Session.instance.cart,
                        salesOrder: _this._salesOrder,
                        salesLines: _this._selectedSalesLines
                    };
                    return asyncQueue.cancelOn(Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PrePickUpCustomerOrderLines, triggerOptions));
                }).enqueue(function () {
                    var lineIds = _this._selectedSalesLines.map(function (salesLine) { return salesLine.LineNumber; });
                    var options = {
                        operationType: Commerce.Proxy.Entities.CustomerOrderOperation.PickUpFromStore,
                        parameters: { PickUpInStoreParameter: { salesId: _this._salesId, salesLinesToPickUp: lineIds } }
                    };
                    return asyncQueue.cancelOn(Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.EditCustomerOrder, options));
                });
                return this._isBusyUntil(asyncQueue.run()).done(function (result) {
                    if (result.canceled) {
                        _this._ignoreSelectionModeCancelation = false;
                    }
                    else {
                        _this._salesLinesSelectionHandler.select(_this._selectedSalesLines, function () {
                            _this._ignoreSelectionModeCancelation = false;
                        }, function (errors) {
                            Commerce.NotificationHandler.displayClientErrors(errors);
                            _this._ignoreSelectionModeCancelation = false;
                        });
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                    _this._ignoreSelectionModeCancelation = false;
                });
            };
            PickUpViewModel.prototype.hasSingleSalesLine = function () {
                return (!Commerce.ObjectExtensions.isNullOrUndefined(this.salesLines()) && this.salesLines().length === 1);
            };
            PickUpViewModel.prototype.cancelSalesLinesSelection = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._salesLinesSelectionHandler) && !this._ignoreSelectionModeCancelation) {
                    this._salesLinesSelectionHandler.cancel();
                }
            };
            PickUpViewModel.prototype.preSelectSalesLines = function (dataListViewModel) {
                if (this.hasSingleSalesLine()) {
                    dataListViewModel.selectAll();
                }
            };
            PickUpViewModel.prototype.getSalesLinesAvailableForPickUp = function () {
                var _this = this;
                var salesLines = [];
                var simpleProducts = [];
                var salesLinesForDisplay = [];
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return _this.salesOrderManager.getSalesOrderDetailsBySalesIdAsync(_this._salesId)
                        .done(function (salesOrder) {
                        _this._salesOrder = salesOrder;
                        if ((!Commerce.ObjectExtensions.isNullOrUndefined(salesOrder)) && (!Commerce.ObjectExtensions.isNullOrUndefined(salesOrder.SalesLines))) {
                            salesLines = salesOrder.SalesLines;
                            if (Commerce.ArrayExtensions.hasElements(salesLines)) {
                                salesLines = salesLines.filter(function (line) {
                                    return line.DeliveryMode === Commerce.ApplicationContext.Instance.channelConfiguration.PickupDeliveryModeCode &&
                                        line.FulfillmentStoreId === Commerce.ApplicationContext.Instance.storeNumber &&
                                        line.QuantityOrdered > 0;
                                });
                            }
                        }
                    });
                }).enqueue(function () {
                    return _this.getSimpleProducts(salesLines)
                        .done(function (results) {
                        if (Commerce.ArrayExtensions.hasElements(results)) {
                            simpleProducts = results;
                        }
                        salesLines.forEach(function (line) {
                            if (Commerce.ObjectExtensions.isNullOrUndefined(line.LineVersion) || line.LineVersion === 0) {
                                line.Quantity = Math.min(line.Quantity, line.QuantityOrdered - line.QuantityInvoiced);
                            }
                            else {
                                line.Quantity = line.QuantityRemained;
                            }
                        });
                        salesLinesForDisplay = _this.createSalesLinesForDisplay(salesLines, simpleProducts);
                    });
                });
                return asyncQueue.run().map(function (queueResult) {
                    return salesLinesForDisplay;
                });
            };
            PickUpViewModel.prototype.getSimpleProducts = function (salesLines) {
                var missingProductIds = [];
                for (var i = 0; i < salesLines.length; i++) {
                    missingProductIds.push(salesLines[i].ProductId);
                }
                if (Commerce.ArrayExtensions.hasElements(missingProductIds)) {
                    return this.productManager.getByIdsAsync(missingProductIds, 0);
                }
                return Commerce.AsyncResult.createResolved([]);
            };
            PickUpViewModel.prototype.createSalesLinesForDisplay = function (salesLines, simpleProducts) {
                var productsMap = new Commerce.Dictionary();
                simpleProducts.forEach(function (product) {
                    productsMap.setItem(product.RecordId, product);
                });
                var salesLinesForDisplay = salesLines.map(function (salesLine) {
                    return new ViewModels.SalesLineForDisplay(salesLine, productsMap.getItem(salesLine.ListingId));
                });
                return salesLinesForDisplay;
            };
            return PickUpViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.PickUpViewModel = PickUpViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var PickingAndReceivingTextMode;
        (function (PickingAndReceivingTextMode) {
            PickingAndReceivingTextMode[PickingAndReceivingTextMode["EnterProduct"] = 1] = "EnterProduct";
            PickingAndReceivingTextMode[PickingAndReceivingTextMode["EnterReceivedNow"] = 2] = "EnterReceivedNow";
            PickingAndReceivingTextMode[PickingAndReceivingTextMode["AddToReceivedNow"] = 3] = "AddToReceivedNow";
        })(PickingAndReceivingTextMode = ViewModels.PickingAndReceivingTextMode || (ViewModels.PickingAndReceivingTextMode = {}));
        var PickingAndReceivingDetailsViewModel = (function (_super) {
            __extends(PickingAndReceivingDetailsViewModel, _super);
            function PickingAndReceivingDetailsViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw "Invalid options passed to the PickingAndReceivingDetailsViewModel constructor: options cannot be null or undefined.";
                }
                else if (Commerce.StringExtensions.isNullOrWhitespace(options.JournalId)) {
                    throw "Invalid options passed to the PickingAndReceivingDetailsViewModel constructor: options.JournalId cannot be null or blank.";
                }
                _this._options = options || { IsAdvancedWarehousingEnabled: false };
                _this._isJournalSaved = ko.observable(true);
                _this.journalId = ko.observable(options.JournalId);
                _this._journalType = options.JournalType;
                _this._journalHeader = ko.observable({
                    orderId: "",
                    orderType: Commerce.Proxy.Entities.PurchaseTransferOrderType.Unknown
                });
                _this.lineDetails = ko.observableArray([]);
                _this._totalProducts = _this.lineDetails().length;
                _this._productIndexes = [];
                if (options.ProductDetailsDictionary) {
                    _this._productDetailsDictionary = options.ProductDetailsDictionary;
                }
                else {
                    _this._productDetailsDictionary = new Commerce.Dictionary();
                }
                _this.currentLocationId = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.isAdvancedWarehousingEnabled = options.IsAdvancedWarehousingEnabled;
                _this.numpadInputText = ko.observable(Commerce.StringExtensions.EMPTY);
                _this._rowAutoSelected = false;
                if (Commerce.StringExtensions.isNullOrWhitespace(_this._options.JournalId)) {
                    _this._options.JournalId = Commerce.StringExtensions.EMPTY;
                }
                _this.title = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.showHeaderButton = ko.observable(false);
                _this.numpadTextMode = ko.observable(PickingAndReceivingTextMode.EnterProduct);
                _this.isEnterProductMode = ko.computed(_this._computeIsEnterProductMode, _this);
                _this.isEnterReceivedNowMode = ko.computed(_this._computeIsEnterReceivedNowMode, _this);
                _this.isReceivedNowMode = ko.computed(_this._computeIsAddToReceivedNowMode, _this);
                _this._setupColumnNamesAndLabels(_this._journalType, options.OrderStatus);
                _this._setDataListColumns();
                _this.isSelectedReceiptPrintable = ko.observable(false);
                _this.receiptForPrint = ko.observable(null);
                _this.receiptForPreview = ko.observable(null);
                _this.receiptText = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.isReceiptSelected = ko.computed(function () { return !Commerce.StringExtensions.isNullOrWhitespace(_this.receiptText()); }, _this);
                _this._isExtensionCommandViewModelBusy = ko.observable(false);
                if (Commerce.ObjectExtensions.isNullOrUndefined(PickingAndReceivingDetailsViewModel._viewExtensionsManager)) {
                    _this._extensionCommandViewModels = [];
                }
                else {
                    _this._extensionCommandViewModels = PickingAndReceivingDetailsViewModel._viewExtensionsManager.getAppBarCommands()
                        .map(function (command) {
                        var commandVM = new ViewModels.CommandViewModel(command);
                        commandVM.addMessageHandler("IsProcessingChanged", function (isProcessing) {
                            if (isProcessing) {
                                _this._isExtensionCommandViewModelBusy(true);
                            }
                            else {
                                var isAnyCommandProcessing = _this._extensionCommandViewModels.some(function (vm) {
                                    return vm.isProcessing;
                                });
                                _this._isExtensionCommandViewModelBusy(isAnyCommandProcessing);
                            }
                        });
                        return commandVM;
                    });
                    _this._isBusyWhen(_this._isExtensionCommandViewModelBusy);
                    _this._subscribeExtensionsToChanges();
                }
                return _this;
            }
            Object.defineProperty(PickingAndReceivingDetailsViewModel.prototype, "extensionCommandViewModels", {
                get: function () {
                    return this._extensionCommandViewModels;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PickingAndReceivingDetailsViewModel, "viewExtensionManager", {
                set: function (manager) {
                    PickingAndReceivingDetailsViewModel._viewExtensionsManager = manager;
                },
                enumerable: true,
                configurable: true
            });
            PickingAndReceivingDetailsViewModel.prototype.setNumPadPublisher = function (value) {
                this._numPadPublisher = value;
            };
            PickingAndReceivingDetailsViewModel.prototype.setClearSelectionCallback = function (value) {
                this._clearSelectionCallback = value;
            };
            PickingAndReceivingDetailsViewModel.prototype.loadAsync = function () {
                var _this = this;
                var loadQueue = new Commerce.AsyncQueue();
                loadQueue.enqueue(function () {
                    return _this._loadJournalAsync();
                }).enqueue(function () {
                    if (_this._options.Product) {
                        return _this._processSingleProduct(_this._options.Product);
                    }
                    else {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                });
                return this._isBusyUntil(loadQueue.run()).done(function () {
                    _this.startChangingLocationAsync();
                    _this._extensionCommandViewModels.forEach(function (vm) {
                        vm.sendMessage("Initialize", {
                            journal: _this._journalHeader()
                        });
                    });
                }).fail(function (errors) {
                    Commerce.RetailLogger.viewsMerchandisingPickingAndReceivingDetailsViewLoadJournalFailed(_this._options.JournalId);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            PickingAndReceivingDetailsViewModel.prototype.onShown = function () {
                var _this = this;
                Commerce.Peripherals.instance.barcodeScanner.enableAsync(function (barcode) {
                    _this.numpadInputText(barcode);
                    _this.enterProductOrReceivedNowAsync();
                });
                Commerce.Peripherals.instance.numPad.enable(this._numPadPublisher);
            };
            PickingAndReceivingDetailsViewModel.prototype.onHidden = function () {
                Commerce.Peripherals.instance.barcodeScanner.disableAsync();
                Commerce.Peripherals.instance.numPad.disable();
            };
            PickingAndReceivingDetailsViewModel.prototype.saveJournalAsync = function () {
                var _this = this;
                return this._isBusyUntil(this._saveJournalAsync())
                    .done(function () {
                    _this._isJournalSaved(true);
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            PickingAndReceivingDetailsViewModel.prototype.commitJournalAsync = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                if (this._isJournalSaved()) {
                    return this._commitJournalImplAsync(correlationId);
                }
                else {
                    return new Commerce.AsyncQueue()
                        .enqueue(function () {
                        return _this._saveJournalAsync();
                    })
                        .enqueue(function () {
                        return _this._commitJournalImplAsync(correlationId);
                    }).run();
                }
            };
            PickingAndReceivingDetailsViewModel.prototype.addOrViewTransferOrderCommentAsync = function () {
                var _this = this;
                if ((this._journalType === Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferIn) ||
                    (this._journalType === Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferOut) ||
                    (this._journalType === Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferOrder)) {
                    var queue = new Commerce.AsyncQueue();
                    var transferComments_1;
                    queue.enqueue(function () {
                        return _this.inventoryManager.getTransferOrderCommentsAsync(_this.journalId())
                            .done(function (comments) {
                            transferComments_1 = comments;
                        });
                    });
                    queue.enqueue(function () {
                        var context = {
                            comments: transferComments_1,
                            inputLabel: Commerce.ViewModelAdapter.getResourceString("string_3428"),
                            title: Commerce.ViewModelAdapter.getResourceString("string_3427"),
                            subTitle: Commerce.StringExtensions.EMPTY,
                            listTitle: Commerce.ViewModelAdapter.getResourceString("string_3426")
                        };
                        var commentActivity = new Commerce.Activities.HandleCommentsActivity(context);
                        commentActivity.responseHandler = function (response) {
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(response) &&
                                !Commerce.StringExtensions.isNullOrWhitespace(response.newCommentText)) {
                                var loggedOnStaff = Commerce.Session.instance.CurrentEmployee.StaffId;
                                return _this.inventoryManager.addTransferOrderCommentAsync(_this.journalId(), loggedOnStaff, response.newCommentText);
                            }
                            else {
                                return Commerce.VoidAsyncResult.createResolved();
                            }
                        };
                        return commentActivity.execute();
                    });
                    return this._isBusyUntil(queue.run())
                        .fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }
                else {
                    return Commerce.AsyncResult.createResolved({ canceled: true });
                }
            };
            PickingAndReceivingDetailsViewModel.prototype.showOrderHeaderClickHandler = function () {
                var _this = this;
                if ((this._journalType === Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferIn) ||
                    (this._journalType === Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferOut) ||
                    (this._journalType === Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferOrder)) {
                    var getOrderQueue_1 = new Commerce.AsyncQueue();
                    var transferOrder_1;
                    var correlationId_1 = Commerce.LoggerHelper.getNewCorrelationId();
                    getOrderQueue_1.enqueue(function () {
                        return _this.inventoryManager.getTransferOrderDetailsAsync(_this.journalId())
                            .done(function (order) {
                            transferOrder_1 = order;
                        }).fail(function () {
                            getOrderQueue_1.cancel();
                        });
                    });
                    getOrderQueue_1.enqueue(function () {
                        var transferOrderHeader = {
                            OrderId: transferOrder_1.OrderId,
                            InventLocationIdFrom: transferOrder_1.InventLocationIdFrom,
                            InventLocationIdTo: transferOrder_1.InventLocationIdTo,
                            ShipDate: transferOrder_1.ShipDate,
                            ReceiveDate: transferOrder_1.ReceiveDate,
                            OrderTypeValue: transferOrder_1.OrderTypeValue,
                            DeliveryModeId: transferOrder_1.DeliveryModeId
                        };
                        var getTransferOrderHeaderClientRequest = new Commerce.GetTransferOrderHeaderClientRequest(correlationId_1, transferOrderHeader, 3);
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getTransferOrderHeaderClientRequest))
                            .fail(function (errors) {
                            Commerce.NotificationHandler.displayClientErrors(errors);
                        });
                    });
                    return this._isBusyUntil(getOrderQueue_1.run());
                }
                else {
                    return Commerce.AsyncResult.createResolved({ canceled: true });
                }
            };
            PickingAndReceivingDetailsViewModel.prototype.packingSlipHandlerAsync = function () {
                return this._packingSlipHandlerAsync(false);
            };
            PickingAndReceivingDetailsViewModel.prototype.printReceiptAsync = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.receiptForPrint())) {
                    var activity = new Commerce.Activities.PrintReceiptActivity({
                        receipts: [this.receiptForPrint()],
                        notifyOnNoPrintableReceipts: true
                    });
                    return activity.execute();
                }
                else {
                    return Commerce.VoidAsyncResult.createResolved();
                }
            };
            PickingAndReceivingDetailsViewModel.prototype.clearReceiptSelectionHandlerAsync = function () {
                this.receiptForPrint(null);
                this.receiptForPreview(null);
                this.receiptText(Commerce.StringExtensions.EMPTY);
                return Commerce.VoidAsyncResult.createResolved();
            };
            PickingAndReceivingDetailsViewModel.prototype.receiveOrShipAllLines = function () {
                this._receiveOrShipAllLines();
                this._isJournalSaved(false);
            };
            PickingAndReceivingDetailsViewModel.prototype.productSelectionChanged = function (items) {
                if (this._rowAutoSelected) {
                    return;
                }
                if (!Commerce.ArrayExtensions.hasElements(items)) {
                    this._sendMessageToExtensions("JournalLineSelectionCleared", undefined);
                    if (!this.isEnterProductMode()) {
                        this._changeToProductMode();
                    }
                }
                else if (items.length === 1) {
                    this._sendMessageToExtensions("JournalLineSelected", { journalLine: items[0] });
                    this._currentProduct = items[0].product;
                    this._selectedLineRecId = items[0].recordId;
                    this._selectedProductRecId = items[0].productRecordId;
                    this._changeToOverwriteQuantityMode();
                }
            };
            PickingAndReceivingDetailsViewModel.prototype.startChangingLocationAsync = function () {
                var _this = this;
                if (!this.isAdvancedWarehousingEnabled) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                var activity = new Commerce.Activities.SelectWarehouseLocationActivity();
                return activity.execute().done(function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(activity.response)) {
                        var selectedWarehouseLocation = activity.response.selectedWarehouseLocation;
                        _this._setCurrentLocation(selectedWarehouseLocation);
                    }
                });
            };
            PickingAndReceivingDetailsViewModel.prototype.searchForProductAsync = function (products) {
                var _this = this;
                return this.saveJournalAsync()
                    .done(function () {
                    var productSelectionHandler = new Commerce.CancelableSelectionHandler(function (result) {
                        var returnOptions = {
                            JournalId: _this.journalId(),
                            JournalType: _this._journalHeader().orderType,
                            ProductDetailsDictionary: _this._productDetailsDictionary,
                            Product: result.simpleProduct,
                            IsAdvancedWarehousingEnabled: _this.isAdvancedWarehousingEnabled
                        };
                        Commerce.ViewModelAdapter.collapseAndNavigate("PickingAndReceivingDetailsView", returnOptions);
                    }, function () {
                        Commerce.ViewModelAdapter.collapse("PickingAndReceivingDetailsView");
                    });
                    var parameters = {
                        searchText: _this.numpadInputText(),
                        searchEntity: ViewModels.SearchViewSearchEntity.Product,
                        productSearchResults: products,
                        selectionMode: ViewModels.SearchViewSelectionMode.Product,
                        productSelectionOptions: {
                            productSelectionHandler: productSelectionHandler,
                            allowKitMasterSelection: false
                        },
                        correlationId: Commerce.StringExtensions.EMPTY
                    };
                    Commerce.ViewModelAdapter.navigate("SearchView", parameters);
                });
            };
            PickingAndReceivingDetailsViewModel.prototype.enterProductOrReceivedNowAsync = function () {
                var _this = this;
                if (Commerce.StringExtensions.isEmpty(this.numpadInputText())) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                else if (this.numpadTextMode() === PickingAndReceivingTextMode.EnterProduct) {
                    this._selectedLineRecId = 0;
                    return new Commerce.AsyncQueue()
                        .enqueue(function () {
                        return _this._getProductByText(_this.numpadInputText(), Commerce.LoggerHelper.getNewCorrelationId());
                    })
                        .enqueue(function (getByTextResult) {
                        return _this._processSingleProduct(getByTextResult.data);
                    })
                        .run();
                }
                else if (this.numpadTextMode() === PickingAndReceivingTextMode.EnterReceivedNow) {
                    var quantity = Commerce.NumberExtensions.parseNumber(this.numpadInputText());
                    if (!this._hasQuantityErrors(this.lineDetails()[this._getPickingLineIndex()], quantity)) {
                        this._overwriteProductLine(quantity);
                        this._changeToProductMode();
                        this._rowAutoSelected = false;
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                }
                else if (this.numpadTextMode() === PickingAndReceivingTextMode.AddToReceivedNow) {
                    var newQuantity = Commerce.NumberExtensions.parseNumber(this.numpadInputText());
                    var previousQuantity = this.lineDetails()[this._getPickingLineIndex()].quantityReceivedNow;
                    if (!this._hasQuantityErrors(this.lineDetails()[this._getPickingLineIndex()], newQuantity + previousQuantity)) {
                        this._addProductLine(newQuantity);
                        this._changeToProductMode();
                        this._rowAutoSelected = false;
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                }
                return Commerce.VoidAsyncResult.createResolved();
            };
            PickingAndReceivingDetailsViewModel.prototype._packingSlipHandlerAsync = function (printLastSlip) {
                var _this = this;
                if ((this._journalType === Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferIn) ||
                    (this._journalType === Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferOut) ||
                    (this._journalType === Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferOrder)) {
                    var getTransferJournalsQueue_1 = new Commerce.AsyncQueue();
                    var transferOrderJournals_1 = [];
                    var selectedTransferJournal_1 = null;
                    var transferId_1 = this.journalId();
                    getTransferJournalsQueue_1.enqueue(function () {
                        return _this.inventoryManager.getTransferOrderJournalsAsync(transferId_1)
                            .done(function (transferJournals) {
                            transferOrderJournals_1 = transferJournals;
                        });
                    });
                    getTransferJournalsQueue_1.enqueue(function () {
                        if (printLastSlip && Commerce.ArrayExtensions.hasElements(transferOrderJournals_1)) {
                            selectedTransferJournal_1 = transferOrderJournals_1[0];
                            return Commerce.VoidAsyncResult.createResolved();
                        }
                        else {
                            var activity_1 = new Commerce.Activities.SelectPackingSlipActivity({
                                journalOptions: transferOrderJournals_1
                            });
                            return activity_1.execute()
                                .done(function () {
                                if (!activity_1.response) {
                                    getTransferJournalsQueue_1.cancel();
                                }
                                else {
                                    selectedTransferJournal_1 = activity_1.response.selectedTransferOrderJournal;
                                }
                            });
                        }
                    });
                    getTransferJournalsQueue_1.enqueue(function () {
                        var isPreview = !printLastSlip;
                        var isCopy = !printLastSlip;
                        return _this._getPackingSlipAsync(selectedTransferJournal_1, isPreview, isCopy)
                            .done(function (receipts) {
                            if (Commerce.ArrayExtensions.hasElements(receipts)) {
                                _this.receiptForPreview(isPreview ? receipts[0] : null);
                                if (isPreview && receipts.length > 1) {
                                    _this.receiptForPrint(receipts[1]);
                                }
                                else if (!isPreview) {
                                    _this.receiptForPrint(receipts[0]);
                                }
                                else {
                                    _this.receiptForPrint(null);
                                }
                            }
                        });
                    });
                    getTransferJournalsQueue_1.enqueue(function () {
                        if (printLastSlip) {
                            return _this.printReceiptAsync();
                        }
                        else {
                            _this._setSelectedReceiptText();
                            return Commerce.VoidAsyncResult.createResolved();
                        }
                    });
                    return this._isBusyUntil(getTransferJournalsQueue_1.run())
                        .fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }
                else {
                    return Commerce.AsyncResult.createResolved({ canceled: true });
                }
            };
            PickingAndReceivingDetailsViewModel.prototype._updateJournalAsync = function (journal, updateHeader) {
                var _this = this;
                var journalLines = journal.orderLines;
                var productRecIds = [];
                for (var i = 0; i < journalLines.length; i++) {
                    if (!this._productDetailsDictionary.hasItem(journalLines[i].productRecordId)) {
                        productRecIds.push(journalLines[i].productRecordId);
                    }
                }
                if (Commerce.ArrayExtensions.hasElements(productRecIds)) {
                    var channelId = Commerce.Session.instance.productCatalogStore.Context.ChannelId;
                    return this.productManager.getByIdsAsync(productRecIds, channelId)
                        .done(function (productDetails) {
                        productDetails.forEach(function (value) {
                            _this._productDetailsDictionary.setItem(value.RecordId, value);
                        });
                        if (updateHeader) {
                            _this._journalHeader(journal);
                        }
                        _this._getJournalDetailsSuccess(journal.orderLines);
                    }).fail(function (errors) {
                        Commerce.RetailLogger.viewModelPickingAndReceivingDetailsSearchProductsByIdFailed();
                    });
                }
                else {
                    if (updateHeader) {
                        this._journalHeader(journal);
                    }
                    this._getJournalDetailsSuccess(journal.orderLines);
                    return Commerce.VoidAsyncResult.createResolved();
                }
            };
            PickingAndReceivingDetailsViewModel.prototype._getPackingSlipAsync = function (transferJournal, isPreview, isCopy) {
                return this.inventoryManager.getTransferPackingSlipAsync(transferJournal, isPreview, isCopy);
            };
            PickingAndReceivingDetailsViewModel.prototype._setSelectedReceiptText = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.receiptForPreview())) {
                    this.receiptText(Commerce.ReceiptHelper.convertToHtml(this.receiptForPreview().Header + this.receiptForPreview().Body + this.receiptForPreview().Footer));
                    this.isSelectedReceiptPrintable(Commerce.ReceiptHelper.canReceiptBePrinted(this.receiptForPrint()));
                }
                else {
                    var errors = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.RECEIPT_NOT_AVAILABLE_FOR_ORDER)];
                    Commerce.NotificationHandler.displayClientErrors(errors, "string_4127");
                }
            };
            PickingAndReceivingDetailsViewModel.prototype._overwriteExistingProductLine = function (index, newQuantity) {
                var errors = [];
                var lines = this.lineDetails();
                var productLine = lines[index];
                if (newQuantity < 0) {
                    errors.push(new Commerce.Proxy.Entities.Error("string_3388"));
                }
                if (index >= lines.length || index < 0) {
                    errors.push(new Commerce.Proxy.Entities.Error("string_3389"));
                }
                if (!Commerce.ArrayExtensions.hasElements(errors)) {
                    productLine.quantityReceivedNow = newQuantity;
                    productLine.wmsLocationId = this.currentLocationId();
                    this.lineDetails.splice(index, 1, productLine);
                }
                return errors;
            };
            PickingAndReceivingDetailsViewModel.prototype._setCurrentLocation = function (currentLocation) {
                this.currentLocationId(currentLocation.LocationId);
            };
            PickingAndReceivingDetailsViewModel.prototype._convertToJournalEntity = function () {
                var journal = this._journalHeader();
                journal.orderLines = this.lineDetails();
                return journal;
            };
            PickingAndReceivingDetailsViewModel.prototype._getJournalDetailsSuccess = function (newOrderLines) {
                var orderLine;
                var productDetails;
                for (var i = 0; i < newOrderLines.length; i++) {
                    orderLine = newOrderLines[i];
                    this._setLineIndex(orderLine.recordId, orderLine.productRecordId, i);
                    if (this._productDetailsDictionary.hasItem(orderLine.productRecordId)) {
                        productDetails = this._productDetailsDictionary.getItem(orderLine.productRecordId);
                        if (productDetails.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Variant
                            || productDetails.ProductTypeValue === Commerce.Proxy.Entities.ProductType.KitVariant) {
                            orderLine.colorTranslation = Commerce.SimpleProductHelper.getDimensionValue(productDetails, Commerce.Proxy.Entities.ProductDimensionType.Color);
                            orderLine.configurationTranslation = Commerce.SimpleProductHelper.getDimensionValue(productDetails, Commerce.Proxy.Entities.ProductDimensionType.Configuration);
                            orderLine.sizeTranslation = Commerce.SimpleProductHelper.getDimensionValue(productDetails, Commerce.Proxy.Entities.ProductDimensionType.Size);
                            orderLine.styleTranslation = Commerce.SimpleProductHelper.getDimensionValue(productDetails, Commerce.Proxy.Entities.ProductDimensionType.Style);
                        }
                    }
                }
                this.lineDetails(newOrderLines);
                this._totalProducts = newOrderLines.length;
            };
            PickingAndReceivingDetailsViewModel.prototype._setLineIndex = function (lineRecId, productRecordId, value) {
                var key = this._formatPickingListLineKey(lineRecId, productRecordId);
                this._productIndexes[key] = value;
                var keyForProductRecIdOnly = this._formatPickingListLineKey(0, productRecordId);
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._productIndexes[keyForProductRecIdOnly])) {
                    this._productIndexes[keyForProductRecIdOnly] = value;
                }
            };
            PickingAndReceivingDetailsViewModel.prototype._formatPickingListLineKey = function (lineRecId, productRecId) {
                if (Commerce.NumberExtensions.isNullNaNOrZero(lineRecId) || lineRecId < 0) {
                    lineRecId = 0;
                }
                return Commerce.StringExtensions.format("{0}_{1}", lineRecId, productRecId);
            };
            PickingAndReceivingDetailsViewModel.prototype._processSingleProduct = function (product) {
                var _this = this;
                if (product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Master) {
                    var selectProductVariantClientRequest = new Commerce.Products.SelectProductVariantClientRequest(product);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(selectProductVariantClientRequest))
                        .map(function (variantSelectionResult) {
                        if (variantSelectionResult.canceled) {
                            return { canceled: true, data: undefined };
                        }
                        else {
                            var isNewLine = _this._addProductLineHighlight(variantSelectionResult.data.result);
                            return { canceled: false, data: isNewLine };
                        }
                    });
                }
                else if (product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Variant
                    || product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.KitVariant
                    || product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Standalone) {
                    var isNewLine = this._addProductLineHighlight(product);
                    return Commerce.AsyncResult.createResolved({ canceled: false, data: isNewLine });
                }
                else {
                    this._navigateToProductDetails(product);
                    return Commerce.AsyncResult.createResolved({ canceled: true, data: undefined });
                }
            };
            PickingAndReceivingDetailsViewModel.prototype._navigateToProductDetails = function (product) {
                var _this = this;
                this.saveJournalAsync()
                    .done(function () {
                    var productSelectionHandler = new Commerce.CancelableSelectionHandler(function (selectionResult) {
                        var navigationOptions = {
                            JournalId: _this.journalId(),
                            JournalType: _this._journalHeader().orderType,
                            Product: selectionResult.simpleProduct,
                            IsAdvancedWarehousingEnabled: _this.isAdvancedWarehousingEnabled
                        };
                        Commerce.ViewModelAdapter.collapseAndNavigate("PickingAndReceivingDetailsView", navigationOptions);
                    }, function () {
                        Commerce.ViewModelAdapter.collapse("PickingAndReceivingDetailsView");
                    });
                    var simpleProductDetailsViewModelOptions = {
                        productId: product.RecordId,
                        product: product,
                        isSelectionMode: true,
                        selectionOptions: {
                            productSelectionHandler: productSelectionHandler
                        },
                        correlationId: Commerce.StringExtensions.EMPTY
                    };
                    Commerce.ViewModelAdapter.navigate("SimpleProductDetailsView", simpleProductDetailsViewModelOptions);
                });
            };
            PickingAndReceivingDetailsViewModel.prototype._computeIsEnterProductMode = function () {
                return this.numpadTextMode() === PickingAndReceivingTextMode.EnterProduct;
            };
            PickingAndReceivingDetailsViewModel.prototype._computeIsEnterReceivedNowMode = function () {
                return this.numpadTextMode() === PickingAndReceivingTextMode.EnterReceivedNow;
            };
            PickingAndReceivingDetailsViewModel.prototype._computeIsAddToReceivedNowMode = function () {
                return this.numpadTextMode() === PickingAndReceivingTextMode.AddToReceivedNow;
            };
            PickingAndReceivingDetailsViewModel.prototype._clearSelection = function () {
                var _this = this;
                Commerce.Host.instance.timers.setImmediate(function () {
                    _this._clearSelectionCallback();
                });
            };
            PickingAndReceivingDetailsViewModel.prototype._changeToOverwriteQuantityMode = function () {
                this.numpadTextMode(PickingAndReceivingTextMode.EnterReceivedNow);
                var rowIndex = this._getPickingLineIndex();
                var quantity = this.lineDetails()[rowIndex].quantityReceivedNow;
                this.numpadInputText(quantity.toString());
            };
            PickingAndReceivingDetailsViewModel.prototype._changeToProductMode = function () {
                this._clearSelection();
                this._currentProduct = null;
                this.numpadTextMode(PickingAndReceivingTextMode.EnterProduct);
                this.numpadInputText(Commerce.StringExtensions.EMPTY);
            };
            PickingAndReceivingDetailsViewModel.prototype._changeToAddToQuantityMode = function () {
                this.numpadTextMode(PickingAndReceivingTextMode.AddToReceivedNow);
                var quantity = 1;
                this.numpadInputText(quantity.toString());
            };
            PickingAndReceivingDetailsViewModel.prototype._highlightIndex = function (rowIndex) {
                this._rowAutoSelected = true;
            };
            PickingAndReceivingDetailsViewModel.prototype._getPickingLineIndex = function () {
                return this._getPickingLineIndexByRecordAndProductId(this._selectedLineRecId, this._selectedProductRecId);
            };
            PickingAndReceivingDetailsViewModel.prototype._addProductLine = function (quantity) {
                var indexResult = this._getPickingLineIndex();
                var errors = [];
                if (indexResult >= 0) {
                    errors = this._addToExistingProductLine(indexResult, quantity);
                    if (Commerce.ArrayExtensions.hasElements(errors)) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    }
                }
                else {
                    indexResult = this._addNewProductLine(this._currentProduct, quantity);
                }
                this._isJournalSaved(false);
                this._highlightIndex(indexResult);
            };
            PickingAndReceivingDetailsViewModel.prototype._overwriteProductLine = function (quantity) {
                var indexResult = this._getPickingLineIndex();
                var errors = [];
                if (indexResult >= 0) {
                    errors = this._overwriteExistingProductLine(indexResult, quantity);
                    if (Commerce.ArrayExtensions.hasElements(errors)) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    }
                }
                else {
                    indexResult = this._addNewProductLine(this._currentProduct, quantity);
                }
                this._isJournalSaved(false);
                this._highlightIndex(indexResult);
            };
            PickingAndReceivingDetailsViewModel.prototype._showAddProductError = function (orderType) {
                var orderTypeString = "";
                var errorMessage = "string_3866";
                switch (orderType) {
                    case Commerce.Proxy.Entities.PurchaseTransferOrderType.PickingList:
                        orderTypeString = Commerce.ViewModelAdapter.getResourceString("string_3867");
                        break;
                    case Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferOut:
                        orderTypeString = Commerce.ViewModelAdapter.getResourceString("string_3864");
                        break;
                    default:
                        errorMessage = "string_3451";
                        break;
                }
                Commerce.NotificationHandler.displayClientErrors([
                    new Commerce.Proxy.Entities.Error(errorMessage, void (0), void (0), [orderTypeString])
                ], "string_3865");
            };
            PickingAndReceivingDetailsViewModel.prototype._setupColumnNamesAndLabels = function (orderType, orderStatus) {
                if (orderType === Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferOut) {
                    this.receivedOrShippedLabelResx = "string_3727";
                    this.receivedNowOrShippedNowLabelResx = "string_3745";
                    this.addToReceivedNowOrShippedNowLabelResx = "string_3746";
                    this.receiveAllOrShipAllLabelResx = "string_4303";
                }
                else {
                    this.receivedOrShippedLabelResx = "string_3723";
                    this.receivedNowOrShippedNowLabelResx = "string_3742";
                    this.addToReceivedNowOrShippedNowLabelResx = "string_3744";
                    this.receiveAllOrShipAllLabelResx = "string_3820";
                }
                switch (orderType) {
                    case Commerce.Proxy.Entities.PurchaseTransferOrderType.PurchaseOrder:
                    case Commerce.Proxy.Entities.PurchaseTransferOrderType.PickingList:
                        this.orderedOrTransferredLabelResx = "string_3722";
                        break;
                    case Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferIn:
                    case Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferOut:
                        this.orderedOrTransferredLabelResx = "string_3422";
                        this.showHeaderButton(true);
                        break;
                }
            };
            PickingAndReceivingDetailsViewModel.prototype._addProductLineHighlight = function (product) {
                this._currentProduct = product;
                this._selectedProductRecId = product.RecordId;
                var rowIndex = this._getPickingLineIndex();
                if (rowIndex === -1) {
                    var orderType = this._journalHeader().orderType;
                    this._showAddProductError(orderType);
                    return false;
                }
                else {
                    this._highlightIndex(rowIndex);
                    this._changeToAddToQuantityMode();
                    return true;
                }
            };
            PickingAndReceivingDetailsViewModel.prototype._isTransferOutOrPickingListJournalType = function (orderType) {
                return orderType === Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferOut ||
                    orderType === Commerce.Proxy.Entities.PurchaseTransferOrderType.PickingList;
            };
            PickingAndReceivingDetailsViewModel.prototype._displayInvalidQuantityErrorMessage = function () {
                Commerce.NotificationHandler.displayClientErrors([
                    new Commerce.Proxy.Entities.Error("string_3384")
                ], "string_3383");
            };
            PickingAndReceivingDetailsViewModel.prototype._displayExceedQuantityErrorMessage = function () {
                Commerce.NotificationHandler.displayClientErrors([
                    new Commerce.Proxy.Entities.Error("string_3870")
                ], "string_3869");
            };
            PickingAndReceivingDetailsViewModel.prototype._displayInvalidUnitOfMeasureErrorMessage = function (unitOfMeasureSymbol) {
                Commerce.NotificationHandler.displayClientErrors([
                    new Commerce.Proxy.Entities.Error("string_3879")
                ], "string_3383");
            };
            PickingAndReceivingDetailsViewModel.prototype._isQuantityAllowed = function (quantity) {
                var orderType = this._journalHeader().orderType;
                if (this._isTransferOutOrPickingListJournalType(orderType)) {
                    var productIndex = this._getPickingLineIndex();
                    var productLine = this.lineDetails()[productIndex];
                    var quantityLeft = productLine.quantityOrdered - (productLine.quantityReceived + quantity);
                    if (quantityLeft < 0) {
                        return false;
                    }
                }
                return true;
            };
            PickingAndReceivingDetailsViewModel.prototype._hasQuantityErrors = function (product, quantity) {
                var result = false;
                if (quantity < 0) {
                    this._displayInvalidQuantityErrorMessage();
                    result = true;
                }
                else if (!this._isQuantityAllowed(quantity)) {
                    this._displayExceedQuantityErrorMessage();
                    result = true;
                }
                else if (!Commerce.UnitOfMeasureHelper.isQuantityValid(quantity, Commerce.UnitOfMeasureHelper.getUnitOfMeasureBySymbol(product.unitOfMeasure))) {
                    this._displayInvalidUnitOfMeasureErrorMessage(product.unitOfMeasure);
                    result = true;
                }
                return result;
            };
            PickingAndReceivingDetailsViewModel.prototype._loadJournalAsync = function () {
                var _this = this;
                var pickingAndReceivingOrder;
                var loadJournalQueue = new Commerce.AsyncQueue();
                loadJournalQueue.enqueue(function () {
                    var loadResult;
                    var journalType = _this._journalType;
                    switch (journalType) {
                        case Commerce.Proxy.Entities.PurchaseTransferOrderType.PurchaseOrder:
                            _this.title(Commerce.ViewModelAdapter.getResourceString("string_3421"));
                            loadResult = _this.inventoryManager.getPurchaseOrderDetailsAsync(_this.journalId())
                                .done(function (purchaseOrder) {
                                pickingAndReceivingOrder = new Commerce.Proxy.Entities.PickingAndReceivingPurchaseOrder(purchaseOrder);
                            }).fail(function (errors) {
                                Commerce.RetailLogger.operationPickingAndReceivingGetPurchaseOrderFailed(_this.journalId());
                            });
                            break;
                        case Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferIn:
                        case Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferOut:
                            if (journalType === Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferIn) {
                                _this.title(Commerce.ViewModelAdapter.getResourceString("string_3863"));
                            }
                            else {
                                _this.title(Commerce.ViewModelAdapter.getResourceString("string_3864"));
                            }
                            loadResult = _this.inventoryManager.getTransferOrderDetailsAsync(_this.journalId())
                                .done(function (transferOrder) {
                                pickingAndReceivingOrder = Commerce.Proxy.Entities.PickingAndReceivingOrderHelper.createJournal(journalType, transferOrder);
                            }).fail(function (errors) {
                                Commerce.RetailLogger.operationPickingAndReceivingGetTransferOrderFailed(_this.journalId());
                            });
                            break;
                        case Commerce.Proxy.Entities.PurchaseTransferOrderType.PickingList:
                            _this.title(Commerce.ViewModelAdapter.getResourceString("string_3867"));
                            loadResult = _this.inventoryManager.getPickingListDetailsAsync(_this.journalId())
                                .done(function (pickingList) {
                                pickingAndReceivingOrder = new Commerce.Proxy.Entities.PickingAndReceivingPickingList(pickingList);
                            }).fail(function (errors) {
                                Commerce.RetailLogger.operationPickingAndReceivingGetPickingListFailed(_this.journalId());
                            });
                            break;
                        default:
                            throw "PickingAndReceivingViewModel.loadJournal - unsupported journal type: " + journalType;
                    }
                    return loadResult;
                }).enqueue(function () {
                    return _this._updateJournalAsync(pickingAndReceivingOrder, true);
                });
                return loadJournalQueue.run();
            };
            PickingAndReceivingDetailsViewModel.prototype._saveJournalAsync = function () {
                var _this = this;
                var saveJournalQueue = new Commerce.AsyncQueue();
                var pickingAndReceivingOrder;
                var journalType = this._journalHeader().orderType;
                var journalEntity = this._convertToJournalEntity();
                saveJournalQueue.enqueue(function () {
                    var saveResult;
                    switch (journalType) {
                        case Commerce.Proxy.Entities.PurchaseTransferOrderType.PurchaseOrder:
                            var purchaseOrderJournal_1 = Commerce.Proxy.Entities.PickingAndReceivingOrderHelper.convertToCommerceTypes(journalEntity);
                            saveResult = _this.inventoryManager.updatePurchaseOrderAsync(purchaseOrderJournal_1)
                                .done(function (updatedPurchaseOrder) {
                                pickingAndReceivingOrder = Commerce.Proxy.Entities.PickingAndReceivingOrderHelper.createJournal(journalType, updatedPurchaseOrder);
                            }).fail(function (errors) {
                                Commerce.RetailLogger.operationPickingAndReceivingUpdatePurchaseOrderFailed(purchaseOrderJournal_1.OrderId);
                            });
                            break;
                        case Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferIn:
                        case Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferOut:
                            var transferOrderJournal_1 = Commerce.Proxy.Entities.PickingAndReceivingOrderHelper.convertToCommerceTypes(journalEntity);
                            saveResult = _this.inventoryManager.updateTransferOrderAsync(transferOrderJournal_1)
                                .done(function (updatedTransferOrder) {
                                pickingAndReceivingOrder = Commerce.Proxy.Entities.PickingAndReceivingOrderHelper.createJournal(journalType, updatedTransferOrder);
                            }).fail(function (errors) {
                                Commerce.RetailLogger.operationPickingAndReceivingUpdateTransderOrderFailed(transferOrderJournal_1.OrderId);
                            });
                            break;
                        case Commerce.Proxy.Entities.PurchaseTransferOrderType.PickingList:
                            var pickingListJournal_1 = Commerce.Proxy.Entities.PickingAndReceivingOrderHelper.convertToCommerceTypes(journalEntity);
                            saveResult = _this.inventoryManager.updatePickingListAsync(pickingListJournal_1)
                                .done(function (updatedPickingList) {
                                pickingAndReceivingOrder = Commerce.Proxy.Entities.PickingAndReceivingOrderHelper.createJournal(journalType, updatedPickingList);
                            }).fail(function (errors) {
                                Commerce.RetailLogger.operationPickingAndReceivingUpdatePickingListFailed(pickingListJournal_1.OrderId);
                            });
                            break;
                        default:
                            throw "PickingAndReceivingViewModel.saveJournal - unsupported journal type: " + journalType;
                    }
                    return saveResult;
                }).enqueue(function () {
                    return _this._updateJournalAsync(pickingAndReceivingOrder, false);
                });
                return saveJournalQueue.run();
            };
            PickingAndReceivingDetailsViewModel.prototype._commitJournalAsync = function (correlationId) {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var journalType = _this._journalHeader().orderType;
                    var commitResult;
                    switch (journalType) {
                        case Commerce.Proxy.Entities.PurchaseTransferOrderType.PurchaseOrder:
                            commitResult = _this.inventoryManager.commitPurchaseOrderAsync(_this.journalId())
                                .fail(function (errors) {
                                Commerce.RetailLogger.operationPickingAndReceivingCommitPurchaseOrderFailed(_this.journalId());
                            });
                            break;
                        case Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferIn:
                        case Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferOut:
                            commitResult = _this._commitTransferOrderAsync(correlationId);
                            break;
                        case Commerce.Proxy.Entities.PurchaseTransferOrderType.PickingList:
                            commitResult = _this.inventoryManager.commitPickingListAsync(_this.journalId())
                                .fail(function (errors) {
                                Commerce.RetailLogger.operationPickingAndReceivingCommitPickingListFailed(_this.journalId());
                            });
                            break;
                        default:
                            throw "PickingAndReceivingViewModel.commitJournal - unsupported journal type: " + journalType;
                    }
                    return commitResult;
                }).enqueue(function () {
                    if (_this._journalHeader().orderType !== Commerce.Proxy.Entities.PurchaseTransferOrderType.PickingList) {
                        return _this._loadJournalAsync();
                    }
                    return null;
                });
                return asyncQueue.run();
            };
            PickingAndReceivingDetailsViewModel.prototype._confirmNotValidLinesDeletionAndCommitAsync = function (correlationId) {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue
                    .enqueue(function () {
                    var dialogRequest = new Commerce.ShowPresetButtonMessageDialogClientRequest(correlationId, {
                        title: Commerce.ViewModelAdapter.getResourceString("string_7429"),
                        message: Commerce.ViewModelAdapter.getResourceString("string_7492"),
                        buttonCombination: Commerce.MessageBoxButtons.YesNo
                    });
                    return Commerce.AsyncResult.fromPromise(_this.context.runtime.executeAsync(dialogRequest))
                        .map(function (response) {
                        if (response.canceled || response.data.result.dialogResult === Commerce.Client.Entities.Dialogs.PresetResultValues.NO) {
                            return { canceled: true };
                        }
                        else {
                            return { canceled: false };
                        }
                    });
                })
                    .enqueue(function (result) {
                    if (!result.canceled) {
                        return _this.inventoryManager.commitTransferOrderAsync(_this.journalId(), true)
                            .map(function () { return { canceled: false }; })
                            .fail(function (errors) {
                            Commerce.RetailLogger.operationPickingAndReceivingCommitTransferOrderFailed(_this.journalId());
                        });
                    }
                    return Commerce.AsyncResult.createResolved(result);
                });
                return asyncQueue.run();
            };
            PickingAndReceivingDetailsViewModel.prototype._commitTransferOrderAsync = function (correlationId) {
                var _this = this;
                var linesWithQty = this.lineDetails().filter(function (l) { return l.quantityReceivedNow > 0; });
                if (!Commerce.ArrayExtensions.hasElements(linesWithQty)) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                else {
                    var commitQueue_1 = new Commerce.AsyncQueue();
                    commitQueue_1.enqueue(function () {
                        return _this.inventoryManager.commitTransferOrderAsync(_this.journalId(), false)
                            .map(function () { return { canceled: false }; })
                            .recoverOnFailure(function (errors) {
                            Commerce.RetailLogger.operationPickingAndReceivingCommitTransferOrderFailed(_this.journalId());
                            if (Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_NOTVALIDTRANSFERORDERLINES.serverErrorCode)) {
                                return commitQueue_1.cancelOn(_this._confirmNotValidLinesDeletionAndCommitAsync(correlationId));
                            }
                            return Commerce.AsyncResult.createRejected(errors);
                        });
                    });
                    if (this._journalType === Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferOut) {
                        commitQueue_1.enqueue(function () {
                            return _this._packingSlipHandlerAsync(true);
                        });
                    }
                    return commitQueue_1.run();
                }
            };
            PickingAndReceivingDetailsViewModel.prototype._searchForProduct = function (searchText) {
                var _this = this;
                this.saveJournalAsync()
                    .done(function () {
                    var productSelectionHandler = new Commerce.CancelableSelectionHandler(function (result) {
                        var returnOptions = {
                            JournalId: _this.journalId(),
                            JournalType: _this._journalHeader().orderType,
                            ProductDetailsDictionary: _this._productDetailsDictionary,
                            Product: result.simpleProduct,
                            IsAdvancedWarehousingEnabled: _this.isAdvancedWarehousingEnabled
                        };
                        Commerce.ViewModelAdapter.collapseAndNavigate("PickingAndReceivingDetailsView", returnOptions);
                    }, function () {
                        Commerce.ViewModelAdapter.collapse("PickingAndReceivingDetailsView");
                    });
                    var parameters = {
                        searchText: searchText,
                        searchEntity: ViewModels.SearchViewSearchEntity.Product,
                        selectionMode: ViewModels.SearchViewSelectionMode.Product,
                        productSelectionOptions: {
                            productSelectionHandler: productSelectionHandler,
                            allowKitMasterSelection: false
                        },
                        correlationId: Commerce.StringExtensions.EMPTY
                    };
                    Commerce.ViewModelAdapter.navigate("SearchView", parameters);
                });
            };
            PickingAndReceivingDetailsViewModel.prototype._getProductByText = function (searchText, correlationId) {
                var _this = this;
                var getProductByKeyWordQueue = new Commerce.AsyncQueue();
                var product;
                getProductByKeyWordQueue.enqueue(function () {
                    var scanResultAsyncResult = new Commerce.VoidAsyncResult();
                    var scanResultRequest = new Commerce.GetScanResultClientRequest(searchText, correlationId);
                    _this.context.runtime.executeAsync(scanResultRequest)
                        .then(function (result) {
                        if (result.canceled || Commerce.ObjectExtensions.isNullOrUndefined(result.data)) {
                            getProductByKeyWordQueue.cancel();
                            scanResultAsyncResult.resolve();
                            return;
                        }
                        var scanResult = result.data.result;
                        var scanResultType = scanResult.MaskTypeValue;
                        if (scanResultType === Commerce.Proxy.Entities.BarcodeMaskType.Item) {
                            product = scanResult.Product;
                            scanResultAsyncResult.resolve();
                        }
                        else if (scanResultType === Commerce.Proxy.Entities.BarcodeMaskType.None) {
                            scanResultAsyncResult.resolve();
                        }
                        else {
                            var unsupportedScanTypeError = new Commerce.Proxy.Entities.Error("string_2626");
                            scanResultAsyncResult.reject([unsupportedScanTypeError]);
                        }
                    }).catch(function (reason) {
                        var errors = Commerce.ErrorHelper.toProxyErrors(reason);
                        scanResultAsyncResult.reject(errors);
                    });
                    return scanResultAsyncResult;
                }).enqueue(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(product)) {
                        var pageSize = 1;
                        var skip = 0;
                        var productSearchAsyncResult_1 = new Commerce.AsyncResult();
                        _this.productManager.searchByTextAsync(searchText, Commerce.Session.instance.productCatalogStore.Context.ChannelId, Commerce.Session.instance.productCatalogStore.Context.CatalogId, pageSize, skip).done(function (searchResults) {
                            if (Commerce.ArrayExtensions.hasElements(searchResults)) {
                                _this._searchForProduct(searchText);
                                productSearchAsyncResult_1.resolve({ canceled: true });
                            }
                            else {
                                var productNotFoundError = new Commerce.Proxy.Entities.Error("string_3382");
                                productNotFoundError.errorTitleResourceId = "string_3381";
                                productSearchAsyncResult_1.reject([productNotFoundError]);
                            }
                        }).fail(function (searchErrors) {
                            productSearchAsyncResult_1.reject(searchErrors);
                        });
                        return getProductByKeyWordQueue.cancelOn(productSearchAsyncResult_1);
                    }
                    else {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                });
                return getProductByKeyWordQueue.run().map(function (queueResult) {
                    return { canceled: queueResult.canceled, data: product };
                });
            };
            PickingAndReceivingDetailsViewModel.prototype._receiveOrShipAllLines = function () {
                var _this = this;
                var productLines = this.lineDetails();
                productLines.forEach(function (productLine) {
                    var receivedOrShippedNow;
                    if (_this._journalType === Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferIn) {
                        receivedOrShippedNow = productLine.quantityShipped - productLine.quantityReceived;
                    }
                    else {
                        receivedOrShippedNow = productLine.quantityOrdered - productLine.quantityReceived;
                    }
                    if (receivedOrShippedNow > 0) {
                        productLine.quantityReceivedNow = receivedOrShippedNow;
                        productLine.wmsLocationId = _this.currentLocationId();
                    }
                });
                this.lineDetails(productLines);
            };
            PickingAndReceivingDetailsViewModel.prototype._addNewProductLine = function (product, newQuantity) {
                var newProductLine = Commerce.Proxy.Entities.PickingAndReceivingOrderHelper.createPickingAndReceivingOrderLine(product, 0, 0, newQuantity, this._journalHeader().orderType, this.journalId(), this.currentLocationId(), Commerce.ApplicationContext.Instance.channelConfiguration.InventLocationDataAreaId);
                this.lineDetails.push(newProductLine);
                this._totalProducts++;
                var index = this._totalProducts - 1;
                var productRecordId = product.RecordId;
                this._setLineIndex(0, productRecordId, index);
                return index;
            };
            PickingAndReceivingDetailsViewModel.prototype._commitJournalImplAsync = function (correlationId) {
                var _this = this;
                return this._isBusyUntil(this._commitJournalAsync(correlationId))
                    .done(function () {
                    if (_this._journalType === Commerce.Proxy.Entities.PurchaseTransferOrderType.PickingList) {
                        Commerce.ViewModelAdapter.displayMessage("string_3868", Commerce.MessageType.Info, Commerce.MessageBoxButtons.Default).done(function () {
                            Commerce.ViewModelAdapter.navigate("SearchPickingAndReceivingView");
                        });
                    }
                    else {
                        Commerce.ViewModelAdapter.navigate("SearchPickingAndReceivingView");
                    }
                }).fail(function (errors) {
                    if (Commerce.ArrayExtensions.hasElements(errors)) {
                        Commerce.NotificationHandler.displayErrorMessage("string_1366", Commerce.NotificationHandler.getErrorMessage(errors[0]), errors[0].ExternalLocalizedErrorMessage == null
                            ? Commerce.StringExtensions.EMPTY : errors[0].ExternalLocalizedErrorMessage);
                    }
                    else {
                        Commerce.NotificationHandler.displayErrorMessage("string_3878");
                    }
                });
            };
            PickingAndReceivingDetailsViewModel.prototype._getPickingLineIndexByRecordAndProductId = function (recordId, productRecordId) {
                var result = -1;
                var key = this._formatPickingListLineKey(recordId, productRecordId);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._productIndexes[key])) {
                    result = this._productIndexes[key];
                }
                return result;
            };
            PickingAndReceivingDetailsViewModel.prototype._addToExistingProductLine = function (index, newQuantity) {
                var errors = [];
                var lines = this.lineDetails();
                var productLine = lines[index];
                if (newQuantity < 0) {
                    errors.push(new Commerce.Proxy.Entities.Error("string_3388"));
                }
                if (index >= lines.length || index < 0) {
                    errors.push(new Commerce.Proxy.Entities.Error("string_3389"));
                }
                if (!Commerce.ArrayExtensions.hasElements(errors)) {
                    productLine.quantityReceivedNow += newQuantity;
                    this.lineDetails.splice(index, 1, productLine);
                }
                return errors;
            };
            PickingAndReceivingDetailsViewModel.prototype._setDataListColumns = function () {
                if (this.isAdvancedWarehousingEnabled) {
                    this._setAdvancedWareHousingColumns();
                }
                else {
                    this._setRegularColumns();
                }
            };
            PickingAndReceivingDetailsViewModel.prototype._setAdvancedWareHousingColumns = function () {
                var customColumns = Commerce.ObjectExtensions.isNullOrUndefined(PickingAndReceivingDetailsViewModel._viewExtensionsManager) ?
                    [] :
                    PickingAndReceivingDetailsViewModel._viewExtensionsManager.getAdvancedWarehousingOrderLinesListColumns();
                var defaultColumns = [
                    { titleResx: "string_3720", ratio: 15, collapseOrder: 7, minWidth: 120, field: "productNumber" },
                    {
                        titleResx: "string_3721", ratio: 30, collapseOrder: 5, minWidth: 300, field: "$data",
                        converter: "Commerce.Core.Converter.PickingAndReceivingDescriptionFormatter"
                    },
                    {
                        titleResx: this.orderedOrTransferredLabelResx,
                        ratio: 10, collapseOrder: 4, minWidth: 60, field: "quantityOrdered", isRightAligned: true
                    },
                    {
                        titleResx: this.receivedOrShippedLabelResx,
                        ratio: 10, collapseOrder: 3, minWidth: 60, field: "quantityReceived", isRightAligned: true
                    },
                    {
                        titleResx: this.receivedNowOrShippedNowLabelResx, ratio: 15, collapseOrder: 6,
                        minWidth: 100, field: "quantityReceivedNow", isRightAligned: true
                    },
                    { titleResx: "string_3725", ratio: 8, collapseOrder: 1, minWidth: 40, field: "unitOfMeasure" },
                    { titleResx: "string_3729", ratio: 12, collapseOrder: 2, minWidth: 60, field: "wmsLocationId" }
                ];
                this.dataListColumns = Commerce.ArrayExtensions.hasElements(customColumns) ? customColumns : defaultColumns;
            };
            PickingAndReceivingDetailsViewModel.prototype._setRegularColumns = function () {
                var customColumns = Commerce.ObjectExtensions.isNullOrUndefined(PickingAndReceivingDetailsViewModel._viewExtensionsManager) ?
                    [] :
                    PickingAndReceivingDetailsViewModel._viewExtensionsManager.getOrderLinesListColumns();
                var defaultColumns = [
                    { titleResx: "string_3720", ratio: 15, collapseOrder: 6, minWidth: 150, field: "productNumber" },
                    {
                        titleResx: "string_3721", ratio: 40, collapseOrder: 4, minWidth: 400, field: "$data",
                        converter: "Commerce.Core.Converter.PickingAndReceivingDescriptionFormatter"
                    },
                    {
                        titleResx: this.orderedOrTransferredLabelResx,
                        ratio: 10, collapseOrder: 3, minWidth: 60, field: "quantityOrdered", isRightAligned: true
                    },
                    {
                        titleResx: this.receivedOrShippedLabelResx,
                        ratio: 10, collapseOrder: 2, minWidth: 60, field: "quantityReceived", isRightAligned: true
                    },
                    {
                        titleResx: this.receivedNowOrShippedNowLabelResx, ratio: 15, collapseOrder: 5,
                        minWidth: 60, field: "quantityReceivedNow", isRightAligned: true
                    },
                    { titleResx: "string_3725", ratio: 10, collapseOrder: 1, minWidth: 60, field: "unitOfMeasure" }
                ];
                this.dataListColumns = Commerce.ArrayExtensions.hasElements(customColumns) ? customColumns : defaultColumns;
            };
            PickingAndReceivingDetailsViewModel.prototype._subscribeExtensionsToChanges = function () {
                var _this = this;
                this.lineDetails.subscribe(function (orderLines) {
                    var lines = orderLines.map(function (orderLine) {
                        orderLine.product = _this._productDetailsDictionary.getItem(orderLine.productRecordId);
                        return orderLine;
                    });
                    _this._sendMessageToExtensions("JournalLinesChanged", { journalLines: lines });
                });
                this.isReceiptSelected.subscribe(function (receiptSelected) {
                    if (receiptSelected) {
                        _this._extensionCommandViewModels.forEach(function (vm) {
                            vm.sendMessage("ReceiptSelected", { receipt: _this.receiptForPreview() });
                        });
                    }
                    else {
                        _this._extensionCommandViewModels.forEach(function (vm) {
                            vm.sendMessage("ReceiptSelectionCleared", undefined);
                        });
                    }
                });
                this._isJournalSaved.subscribe(function (isJournalSaved) {
                    if (isJournalSaved) {
                        _this._extensionCommandViewModels.forEach(function (vm) {
                            vm.sendMessage("JournalSaved", { journal: _this._journalHeader() });
                        });
                    }
                });
            };
            PickingAndReceivingDetailsViewModel.prototype._sendMessageToExtensions = function (messageType, messageData) {
                this.extensionCommandViewModels.forEach(function (vm) {
                    vm.sendMessage(messageType, messageData);
                });
            };
            return PickingAndReceivingDetailsViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.PickingAndReceivingDetailsViewModel = PickingAndReceivingDetailsViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var PriceCheckViewModel = (function (_super) {
            __extends(PriceCheckViewModel, _super);
            function PriceCheckViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw new Error("Invalid options passed to the PriceCheckViewModel constructor: options cannot be null or undefined.");
                }
                else if (!(options.selectionHandler instanceof Commerce.CancelableSelectionHandler)) {
                    throw new Error("Invalid options passed to the PriceCheckViewModel constructor: selectionHandler must be a selection handler.");
                }
                _this.product = ko.observable(options.product);
                _this._selectionHandler = options.selectionHandler;
                _this._cancelSelectionHandlerOnHidden = true;
                _this.hasProduct = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.product());
                }, _this);
                if (!Commerce.StringExtensions.isNullOrWhitespace(options.storeId)) {
                    _this._storeNumber = options.storeId;
                }
                else {
                    var storeCatalog = Commerce.Session.instance.productCatalogStore.Store;
                    _this._storeNumber = storeCatalog.OrgUnitNumber;
                }
                _this.customer = ko.observable(new Commerce.Proxy.Entities.CustomerClass());
                _this.store = ko.observable({
                    RecordId: 0,
                    OrgUnitName: "",
                    OrgUnitNumber: ""
                });
                _this.productPrice = ko.observable(null);
                _this._productPriceEntity = null;
                _this._selectionInProgress = ko.observable(false);
                _this._isBusyWhen(_this._selectionInProgress);
                _this.productImage = ko.observable({ source: Commerce.StringExtensions.EMPTY, altText: Commerce.StringExtensions.EMPTY });
                _this.productName = ko.computed(function () {
                    if (_this.hasProduct() &&
                        !Commerce.StringExtensions.isNullOrWhitespace(_this.product().Name)) {
                        return _this.product().Name;
                    }
                    return Commerce.StringExtensions.EMPTY;
                }, _this);
                _this.itemId = ko.computed(function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.product()) &&
                        !Commerce.StringExtensions.isNullOrWhitespace(_this.product().ItemId)) {
                        return _this.product().ItemId;
                    }
                    return Commerce.StringExtensions.EMPTY;
                }, _this);
                _this.variantDimensionValues = ko.computed(function () {
                    return Commerce.SimpleProductHelper.getVariantDescription(_this.product());
                }, _this);
                _this._searchText = Commerce.StringExtensions.EMPTY;
                _this.hasVariant = ko.computed(function () {
                    return _this.hasProduct() && _this.product().ProductTypeValue === Commerce.Proxy.Entities.ProductType.Variant;
                }, _this);
                _this.hasCustomer = ko.computed(_this._computeHasCustomer, _this);
                _this._isExtensionCommandViewModelBusy = ko.observable(false);
                if (Commerce.ObjectExtensions.isNullOrUndefined(PriceCheckViewModel._viewExtensionsManager)) {
                    _this._customControlViewModels = [];
                    _this._extensionCommandViewModels = [];
                }
                else {
                    _this._customControlViewModels = PriceCheckViewModel._viewExtensionsManager.getCustomControls();
                    var isACustomControlBusy = ko.computed(function () {
                        return _this._customControlViewModels.some(function (vm) {
                            return vm.isBusy();
                        });
                    });
                    _this._isBusyWhen(isACustomControlBusy);
                    _this._extensionCommandViewModels = PriceCheckViewModel._viewExtensionsManager.getAppBarCommands()
                        .map(function (command) {
                        var commandVM = new ViewModels.CommandViewModel(command);
                        commandVM.addMessageHandler("IsProcessingChanged", function (isProcessing) {
                            if (isProcessing) {
                                _this._isExtensionCommandViewModelBusy(true);
                            }
                            else {
                                var isAnyCommandProcessing = _this._extensionCommandViewModels.some(function (vm) {
                                    return vm.isProcessing;
                                });
                                _this._isExtensionCommandViewModelBusy(isAnyCommandProcessing);
                            }
                        });
                        return commandVM;
                    });
                    _this._isBusyWhen(_this._isExtensionCommandViewModelBusy);
                }
                return _this;
            }
            Object.defineProperty(PriceCheckViewModel, "viewExtensionManager", {
                set: function (manager) {
                    PriceCheckViewModel._viewExtensionsManager = manager;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PriceCheckViewModel.prototype, "customPanelViewModels", {
                get: function () {
                    return this._customControlViewModels;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PriceCheckViewModel.prototype, "extensionCommandViewModels", {
                get: function () {
                    return this._extensionCommandViewModels;
                },
                enumerable: true,
                configurable: true
            });
            PriceCheckViewModel.prototype.loadAsync = function () {
                var _this = this;
                var loadQueue = new Commerce.AsyncQueue();
                if (!Commerce.Session.instance.isStoreCatalogVirtual) {
                    loadQueue.enqueue(function () {
                        return _this.channelManager.getStoreDetailsAsync(_this._storeNumber)
                            .done(function (storeFound) {
                            if (Commerce.ObjectExtensions.isNullOrUndefined(storeFound.OrgUnitAddress)) {
                                storeFound.OrgUnitAddress = {};
                            }
                            _this.store(storeFound);
                        }).fail(function (errors) {
                            Commerce.RetailLogger.viewModelPriceCheckGetStoreDetailsFailed(errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                        });
                    });
                }
                else {
                    this.store(Commerce.Session.instance.productCatalogStore.Store);
                }
                loadQueue.enqueue(function () {
                    return _this._getCustomer()
                        .fail(function (errors) {
                        Commerce.RetailLogger.viewModelPriceCheckGetCustomerFailed(errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                    });
                });
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.product()) && this.product().RecordId > 0) {
                    var loadedProduct_2;
                    if (Commerce.ObjectExtensions.isNullOrUndefined(this.product())) {
                        loadQueue.enqueue(function () {
                            return _this.productManager.getByIdAsync(_this.product().RecordId, _this._channelId)
                                .done(function (product) {
                                loadedProduct_2 = product;
                            });
                        });
                    }
                    else {
                        loadedProduct_2 = this.product();
                    }
                    loadQueue.enqueue(function () {
                        if (loadedProduct_2.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Master) {
                            var selectProductVariantClientRequest = new Commerce.Products.SelectProductVariantClientRequest(loadedProduct_2);
                            return loadQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(selectProductVariantClientRequest)))
                                .done(function (variantSelectionResult) {
                                if (variantSelectionResult.canceled) {
                                    _this.product(undefined);
                                }
                                else {
                                    _this.product(variantSelectionResult.data.result);
                                }
                            });
                        }
                        else {
                            _this.product(loadedProduct_2);
                            return Commerce.VoidAsyncResult.createResolved();
                        }
                    }).enqueue(function () {
                        return _this.getProductPriceAndImageAsync();
                    });
                }
                else {
                    loadQueue.enqueue(function () {
                        return _this.getSearchTextInputAndSearchProductAsync();
                    });
                }
                return this._isBusyUntil(loadQueue.run())
                    .done(function (result) {
                    _this._initializeExtensions();
                }).fail(function (errors) {
                    _this._handleErrors(errors);
                });
            };
            PriceCheckViewModel.prototype.searchCustomers = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                this._cancelSelectionHandlerOnHidden = false;
                var customerSelectionHandler = new Commerce.CancelableSelectionHandler(function (customer) {
                    var returnOptions = {
                        storeId: _this._storeNumber,
                        product: _this.product(),
                        selectionHandler: _this._selectionHandler
                    };
                    Commerce.ViewModelAdapter.collapseAndNavigate("PriceCheckView", returnOptions);
                }, function () {
                    _this._cancelAndCollapseNavigationHistoryIfNotInView();
                }, function (customer) {
                    return Commerce.CustomerHelper.crossCompanyCustomerTransferAndAddToCartAsync(correlationId, customer);
                });
                var parameters = {
                    searchEntity: ViewModels.SearchViewSearchEntity.Customer,
                    selectionMode: ViewModels.SearchViewSelectionMode.Customer,
                    customerSelectionOptions: {
                        customerSelectionHandler: customerSelectionHandler,
                        isOnlySelectionAllowed: false
                    },
                    correlationId: correlationId
                };
                Commerce.ViewModelAdapter.navigate("SearchView", parameters);
            };
            PriceCheckViewModel.prototype.addProductToCartAsync = function () {
                var _this = this;
                var response = {
                    addToTransaction: true,
                    barcode: this._barcode,
                    quantity: 0,
                    product: this.product()
                };
                this._selectionInProgress(true);
                this._selectionHandler.select(response, function () {
                    _this._selectionInProgress(false);
                }, function (errors) {
                    _this._selectionInProgress(false);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            PriceCheckViewModel.prototype.getSearchTextInputAndSearchProductAsync = function () {
                var _this = this;
                var queue = new Commerce.AsyncQueue();
                queue.enqueue(function () {
                    var alphanumericInputDialogOptions = {
                        title: Commerce.ViewModelAdapter.getResourceString("string_3513"),
                        numPadLabel: Commerce.ViewModelAdapter.getResourceString("string_3371")
                    };
                    var dialogRequest = new Commerce.ShowAlphanumericInputDialogClientRequest(alphanumericInputDialogOptions);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(dialogRequest))
                        .done(function (result) {
                        if (result.canceled ||
                            Commerce.ObjectExtensions.isNullOrUndefined(result.data) ||
                            Commerce.ObjectExtensions.isNullOrUndefined(result.data.result)) {
                            queue.cancel();
                        }
                        else {
                            _this._searchText = result.data.result.value;
                        }
                    });
                }).enqueue(function () {
                    return _this._isBusyUntil(queue.cancelOn(_this._searchProductAsync()));
                });
                return queue.run();
            };
            PriceCheckViewModel.prototype.navigateToCustomerDetails = function () {
                var _this = this;
                this._cancelSelectionHandlerOnHidden = false;
                var customerSelectionHandler = new Commerce.CancelableSelectionHandler(function (customer) {
                    var returnOptions = {
                        storeId: _this._storeNumber,
                        product: _this.product(),
                        selectionHandler: _this._selectionHandler
                    };
                    Commerce.ViewModelAdapter.collapseAndNavigate("PriceCheckView", returnOptions);
                }, function () {
                    _this._cancelAndCollapseNavigationHistoryIfNotInView();
                });
                var parameters = {
                    accountNumber: Commerce.Session.instance.cart.CustomerId,
                    correlationId: Commerce.StringExtensions.EMPTY,
                    customerSelectionOptions: {
                        customerSelectionHandler: customerSelectionHandler
                    }
                };
                Commerce.ViewModelAdapter.navigate("CustomerDetailsView", parameters);
            };
            PriceCheckViewModel.prototype.navigateToStoreDetails = function () {
                var _this = this;
                if (Commerce.Session.instance.isStoreCatalogVirtual) {
                    return;
                }
                this._cancelSelectionHandlerOnHidden = false;
                var storeSelectionHandler = new Commerce.CancelableSelectionHandler(function (result) {
                    var returnOptions = {
                        storeId: _this._storeNumber,
                        product: _this.product(),
                        selectionHandler: _this._selectionHandler
                    };
                    Commerce.ViewModelAdapter.collapseAndNavigate("PriceCheckView", returnOptions);
                }, function () {
                    _this._cancelAndCollapseNavigationHistoryIfNotInView();
                });
                var parameters = {
                    storeId: this._storeNumber,
                    selectionOptions: {
                        selectionHandler: storeSelectionHandler
                    }
                };
                Commerce.ViewModelAdapter.navigate("StoreDetailsView", parameters);
            };
            PriceCheckViewModel.prototype.onShown = function () {
                var _this = this;
                this._cancelSelectionHandlerOnHidden = true;
                Commerce.Peripherals.instance.barcodeScanner.enableAsync(function (barcode) {
                    if (!Commerce.StringExtensions.isNullOrWhitespace(barcode)) {
                        _this._searchText = barcode;
                        _this._isBusyUntil(_this._searchProductAsync())
                            .fail(function (errors) {
                            _this._handleErrors(errors);
                        });
                    }
                });
            };
            PriceCheckViewModel.prototype.onHidden = function () {
                Commerce.Peripherals.instance.barcodeScanner.disableAsync();
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._selectionHandler) && this._cancelSelectionHandlerOnHidden) {
                    this._selectionHandler.cancel();
                }
            };
            PriceCheckViewModel.prototype.removeCustomerAsync = function () {
                var _this = this;
                var removeCustomerQueue = new Commerce.AsyncQueue();
                removeCustomerQueue.enqueue(function () {
                    return _this._removeCustomerFromCartAsync();
                });
                if (this.hasProduct()) {
                    removeCustomerQueue.enqueue(function () {
                        return _this._getProductPriceAsync();
                    });
                }
                return this._isBusyUntil(removeCustomerQueue.run()).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            PriceCheckViewModel.prototype.getProductPriceAndImageAsync = function (correlationId) {
                var _this = this;
                var productPriceResult = this._getProductPriceAsync(correlationId);
                var getProductImageResult;
                if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                    this.productImage({ source: this.product().PrimaryImageUrl, altText: this.product().Name });
                    getProductImageResult = Commerce.VoidAsyncResult.createResolved();
                }
                else {
                    var pageSize = 1;
                    var skip = 0;
                    getProductImageResult = this.productManager.getMediaBlobsAsync(this.product().RecordId, this._channelId, 0, pageSize, skip).done(function (mediaBlobs) {
                        var source = Commerce.StringExtensions.EMPTY;
                        var altText = _this.product().Name;
                        var mediaBlob = Commerce.ArrayExtensions.firstOrUndefined(mediaBlobs);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(mediaBlob)) {
                            source = mediaBlob.Content;
                            altText = mediaBlob.AltText;
                        }
                        _this.productImage({ source: source, altText: altText });
                    });
                }
                return Commerce.VoidAsyncResult.join([productPriceResult, getProductImageResult]);
            };
            PriceCheckViewModel.prototype._searchProductAsync = function () {
                var _this = this;
                if (Commerce.StringExtensions.isNullOrWhitespace(this._searchText)) {
                    return Commerce.AsyncResult.createResolved({ canceled: true });
                }
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.viewModelPriceCheckSearchProductStarted(correlationId);
                Commerce.RetailLogger.viewModelPriceCheckSearchText(this._searchText, correlationId);
                this.product(undefined);
                this._barcode = undefined;
                var priceCheckQueue = new Commerce.AsyncQueue();
                var productSearchResults;
                priceCheckQueue.enqueue(function () {
                    return priceCheckQueue.cancelOn(_this._getProductByText(_this._searchText, correlationId))
                        .done(function (getProductResult) {
                        if (!getProductResult.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(getProductResult.data)) {
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(getProductResult.data.product)) {
                                _this.product(getProductResult.data.product);
                            }
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(getProductResult.data.barcode)) {
                                _this._barcode = getProductResult.data.barcode;
                            }
                        }
                    });
                });
                priceCheckQueue.enqueue(function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.product())) {
                        return _this.getProductPriceAndImageAsync(correlationId);
                    }
                    else {
                        var pageSize = 1;
                        var skip = 0;
                        return _this.productManager.searchByTextAsync(_this._searchText, _this._channelId, 0, pageSize, skip).done(function (searchResults) {
                            productSearchResults = searchResults;
                        });
                    }
                });
                return priceCheckQueue.run().map(function (queueResult) {
                    var isCanceled = queueResult.canceled;
                    if (queueResult.canceled) {
                        Commerce.RetailLogger.viewModelPriceCheckSearchProductCanceled(correlationId);
                    }
                    else {
                        var numberOfProductsFound = void 0;
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.product())) {
                            numberOfProductsFound = 1;
                        }
                        else if (!Commerce.ArrayExtensions.hasElements(productSearchResults)) {
                            Commerce.ViewModelAdapter.displayMessage("string_3382", Commerce.MessageType.Error, Commerce.MessageBoxButtons.Default, "string_3381");
                            isCanceled = true;
                            numberOfProductsFound = 0;
                        }
                        else {
                            _this._searchForProduct();
                            isCanceled = true;
                            numberOfProductsFound = productSearchResults.length;
                        }
                        Commerce.RetailLogger.viewModelPriceCheckSearchProductSucceeded(correlationId, numberOfProductsFound);
                    }
                    return { canceled: isCanceled };
                }).fail(function (errors) {
                    Commerce.RetailLogger.viewModelPriceCheckSearchProductFailed(correlationId, Commerce.ErrorHelper.getErrorMessages(errors));
                });
            };
            Object.defineProperty(PriceCheckViewModel.prototype, "_channelId", {
                get: function () {
                    return Commerce.Session.instance.productCatalogStore.Context.ChannelId;
                },
                enumerable: true,
                configurable: true
            });
            PriceCheckViewModel.prototype._getCustomer = function () {
                var _this = this;
                var customerId = Commerce.Session.instance.cart.CustomerId;
                if (Commerce.StringExtensions.isNullOrWhitespace(customerId)) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                return this.customerManager.getCustomerDetailsAsync(customerId)
                    .done(function (customerDetails) {
                    _this.customer(customerDetails.customer);
                    _this._sendMessageToExtensions("CustomerChanged", { customer: customerDetails.customer });
                });
            };
            PriceCheckViewModel.prototype._searchForProduct = function () {
                var _this = this;
                this._cancelSelectionHandlerOnHidden = false;
                var productSelectionHandler = new Commerce.CancelableSelectionHandler(function (result) {
                    var returnOptions = {
                        product: result.simpleProduct,
                        selectionHandler: _this._selectionHandler
                    };
                    Commerce.ViewModelAdapter.collapseAndNavigate("PriceCheckView", returnOptions);
                }, function () {
                    _this._cancelAndCollapseNavigationHistoryIfNotInView();
                });
                var parameters = {
                    searchText: this._searchText,
                    searchEntity: ViewModels.SearchViewSearchEntity.Product,
                    selectionMode: ViewModels.SearchViewSelectionMode.Product,
                    productSelectionOptions: {
                        productSelectionHandler: productSelectionHandler,
                        allowKitMasterSelection: false
                    },
                    correlationId: Commerce.StringExtensions.EMPTY
                };
                Commerce.ViewModelAdapter.navigate("SearchView", parameters);
            };
            PriceCheckViewModel.prototype._caculateProductPriceAsync = function (correlationId) {
                var _this = this;
                var cart = Commerce.Session.instance.cart;
                var customerId = cart.CustomerId || Commerce.StringExtensions.EMPTY;
                var loyaltyCardId = cart.LoyaltyCardId || Commerce.StringExtensions.EMPTY;
                var product = this.product();
                var productId = product.RecordId;
                var unitOfMeasureSymbol = ((!Commerce.ObjectExtensions.isNullOrUndefined(this._barcode)) &&
                    (!Commerce.ObjectExtensions.isNullOrUndefined(this._barcode.ItemBarcode)) &&
                    (!Commerce.StringExtensions.isNullOrWhitespace(this._barcode.ItemBarcode.UnitId))) ? this._barcode.ItemBarcode.UnitId : product.DefaultUnitOfMeasure;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var calculateProductPriceRequest = new Commerce.Products.CalculateProductPriceServiceRequest(correlationId, productId, customerId, unitOfMeasureSymbol, loyaltyCardId);
                    return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(calculateProductPriceRequest)));
                }).enqueue(function (result) {
                    _this._productPriceEntity = result.data.productPrice;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(_this._barcode) &&
                        product.AdjustedPrice === 0.00 &&
                        _this._productPriceEntity.CustomerContextualPrice === 0.00 &&
                        _this._barcode.BarcodePrice > 0.00) {
                        _this._productPriceEntity.CustomerContextualPrice = _this._barcode.BarcodePrice;
                    }
                    var triggerOptions = {
                        barcodeId: Commerce.ObjectExtensions.isNullOrUndefined(_this._barcode) ? Commerce.StringExtensions.EMPTY : _this._barcode.BarcodeId,
                        customerId: customerId,
                        product: product,
                        productPrice: _this._productPriceEntity,
                        quantity: 0
                    };
                    return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostPriceCheck, triggerOptions);
                });
                return asyncQueue.run().done(function (queueResult) {
                    if (queueResult && !queueResult.canceled) {
                        _this.productPrice(_this._productPriceEntity.CustomerContextualPrice);
                        _this._sendMessageToExtensions("PriceCheckCompleted", { product: _this.product(), productPrice: _this._productPriceEntity });
                        _this._searchText = Commerce.StringExtensions.EMPTY;
                    }
                });
            };
            PriceCheckViewModel.prototype._removeCustomerFromCartAsync = function () {
                var _this = this;
                var customerClearOptions = {
                    correlationId: Commerce.LoggerHelper.getNewCorrelationId()
                };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.CustomerClear, customerClearOptions)
                    .done(function (operationResult) {
                    if (Commerce.StringExtensions.isNullOrWhitespace(Commerce.Session.instance.cart.CustomerId)) {
                        _this.customer(null);
                        _this._sendMessageToExtensions("CustomerChanged", { customer: null });
                    }
                });
            };
            PriceCheckViewModel.prototype._computeHasCustomer = function () {
                return !Commerce.ObjectExtensions.isNullOrUndefined(this.customer()) &&
                    !Commerce.StringExtensions.isNullOrWhitespace(this.customer().AccountNumber);
            };
            PriceCheckViewModel.prototype._getProductByText = function (searchText, correlationId) {
                var _this = this;
                var getProductByKeyWordQueue = new Commerce.AsyncQueue();
                var product;
                var barcode;
                getProductByKeyWordQueue.enqueue(function () {
                    var scanResultAsyncResult = new Commerce.VoidAsyncResult();
                    var scanResultRequest = new Commerce.GetScanResultClientRequest(searchText, correlationId);
                    _this.context.runtime.executeAsync(scanResultRequest)
                        .then(function (result) {
                        if (result.canceled || Commerce.ObjectExtensions.isNullOrUndefined(result.data)) {
                            getProductByKeyWordQueue.cancel();
                            scanResultAsyncResult.resolve();
                            return;
                        }
                        var scanResult = result.data.result;
                        var scanResultType = scanResult.MaskTypeValue;
                        if (scanResultType === Commerce.Proxy.Entities.BarcodeMaskType.Item) {
                            product = scanResult.Product;
                            barcode = scanResult.Barcode;
                            scanResultAsyncResult.resolve();
                        }
                        else if (scanResultType === Commerce.Proxy.Entities.BarcodeMaskType.None) {
                            scanResultAsyncResult.resolve();
                        }
                        else {
                            var unsupportedScanTypeError = new Commerce.Proxy.Entities.Error("string_2626");
                            scanResultAsyncResult.reject([unsupportedScanTypeError]);
                        }
                    }).catch(function (reason) {
                        var errors = Commerce.ErrorHelper.toProxyErrors(reason);
                        scanResultAsyncResult.reject(errors);
                    });
                    return scanResultAsyncResult;
                }).enqueue(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(product)
                        || product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Variant
                        || product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Standalone
                        || product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.KitVariant) {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                    else if (product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Master) {
                        var selectProductVariantClientRequest = new Commerce.Products.SelectProductVariantClientRequest(product);
                        return getProductByKeyWordQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(selectProductVariantClientRequest)))
                            .done(function (variantSelectionResult) {
                            if (!variantSelectionResult.canceled) {
                                product = variantSelectionResult.data.result;
                            }
                        });
                    }
                    else {
                        _this._navigateToProductDetails(product);
                        getProductByKeyWordQueue.cancel();
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                });
                return getProductByKeyWordQueue.run().map(function (queueResult) {
                    var searchResult = { product: product, barcode: barcode };
                    return { canceled: queueResult.canceled, data: searchResult };
                });
            };
            PriceCheckViewModel.prototype._navigateToProductDetails = function (product) {
                var _this = this;
                this._cancelSelectionHandlerOnHidden = false;
                var productSelectionHandler = new Commerce.CancelableSelectionHandler(function (selectionResult) {
                    var returnOptions = {
                        product: selectionResult.simpleProduct,
                        selectionHandler: _this._selectionHandler
                    };
                    Commerce.ViewModelAdapter.collapseAndNavigate("PriceCheckView", returnOptions);
                }, function () {
                    _this._cancelAndCollapseNavigationHistoryIfNotInView();
                });
                var productDetailOptions = {
                    productId: product.RecordId,
                    product: product,
                    isSelectionMode: true,
                    selectionOptions: {
                        productSelectionHandler: productSelectionHandler
                    },
                    correlationId: Commerce.StringExtensions.EMPTY
                };
                Commerce.ViewModelAdapter.navigate("SimpleProductDetailsView", productDetailOptions);
            };
            PriceCheckViewModel.prototype._getProductPriceAsync = function (correlationId) {
                var asyncResult = new Commerce.VoidAsyncResult();
                if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                    correlationId = Commerce.StringExtensions.EMPTY;
                }
                this._isBusyUntil(this._caculateProductPriceAsync(correlationId))
                    .done(function () {
                    Commerce.RetailLogger.viewsMerchandisingPriceCheckViewGetPriceFinished(correlationId);
                    asyncResult.resolve();
                }).fail(function (errors) {
                    var errorCode;
                    if (Commerce.ArrayExtensions.hasElements(errors)) {
                        errorCode = errors[0].ErrorCode;
                    }
                    else {
                        errorCode = Commerce.StringExtensions.EMPTY;
                    }
                    Commerce.RetailLogger.viewModelPriceCheckGetProductPriceFailed(errorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]), correlationId);
                    Commerce.NotificationHandler.displayClientErrors(errors).always(function () {
                        asyncResult.reject(errors);
                    });
                });
                return asyncResult;
            };
            PriceCheckViewModel.prototype._sendMessageToExtensions = function (messageType, messageData) {
                this._customControlViewModels.forEach(function (vm) {
                    vm.sendMessage(messageType, Commerce.ObjectExtensions.clone(messageData));
                });
                this._extensionCommandViewModels.forEach(function (vm) {
                    vm.sendMessage(messageType, Commerce.ObjectExtensions.clone(messageData));
                });
            };
            PriceCheckViewModel.prototype._initializeExtensions = function () {
                var _this = this;
                this._customControlViewModels.forEach(function (vm) {
                    vm.init({
                        product: _this.product(),
                        productPrice: _this._productPriceEntity,
                        customer: _this.customer()
                    });
                });
                this._extensionCommandViewModels.forEach(function (vm) {
                    vm.sendMessage("Initialize", {
                        product: _this.product(),
                        productPrice: _this._productPriceEntity,
                        customer: _this.customer()
                    });
                });
            };
            PriceCheckViewModel.prototype._handleErrors = function (errors) {
                if (!Commerce.ErrorHelper.hasError(errors, "Microsoft_Dynamics_Commerce_Runtime_HeadquarterResponseParsingError") ||
                    Commerce.ArrayExtensions.hasElements(errors)) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                }
            };
            PriceCheckViewModel.prototype._cancelAndCollapseNavigationHistoryIfNotInView = function () {
                if (!Commerce.ViewModelAdapter.isInView("PriceCheckView")) {
                    this._selectionHandler.cancel();
                    Commerce.ViewModelAdapter.collapse("PriceCheckView");
                }
            };
            return PriceCheckViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.PriceCheckViewModel = PriceCheckViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var ProductRichMediaViewModel = (function (_super) {
            __extends(ProductRichMediaViewModel, _super);
            function ProductRichMediaViewModel() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ProductRichMediaViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.ProductRichMediaViewModel = ProductRichMediaViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var ProductSearchViewModel = (function (_super) {
            __extends(ProductSearchViewModel, _super);
            function ProductSearchViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this.orderBy = null;
                _this.products = ko.observableArray([]);
                _this.offlineProductImages = new Commerce.Dictionary();
                _this.hasProductSearchResults = ko.observable(false);
                return _this;
            }
            ProductSearchViewModel.prototype.clearParameters = function () {
                this.searchTextParameter = null;
                this.productRefinerValuesParameter = null;
            };
            ProductSearchViewModel.prototype.hasSearchValueSet = function () {
                return !Commerce.StringExtensions.isNullOrWhitespace(this.searchTextParameter);
            };
            ProductSearchViewModel.prototype.searchProducts = function (pageSize, skip, correlationId) {
                var _this = this;
                if (!this.hasSearchValueSet()) {
                    return Commerce.AsyncResult.createResolved([]);
                }
                if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                    correlationId = Commerce.StringExtensions.EMPTY;
                }
                Commerce.RetailLogger.viewModelProductSearchViewModelSearchProducts(correlationId, this.searchTextParameter, pageSize, skip);
                if (Commerce.ArrayExtensions.hasElements(this.productRefinerValuesParameter)) {
                    var refinerValues_1 = [];
                    this.productRefinerValuesParameter.forEach(function (value) {
                        refinerValues_1.push({
                            refinerRecordId: value.RefinerRecordId,
                            leftBoundValue: value.LeftValueBoundString,
                            rightBoundValue: value.RightValueBoundString
                        });
                    });
                    Commerce.RetailLogger.viewModelProductSearchViewModelSearchProductsRefinerValue(correlationId, this.searchTextParameter, JSON.stringify(refinerValues_1));
                }
                var channelId = Commerce.Session.instance.productCatalogStore.Context.ChannelId;
                var catalogId = Commerce.Session.instance.productCatalogStore.Context.CatalogId;
                var searchResults;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var asyncSearchResults;
                    if (!Commerce.ArrayExtensions.hasElements(_this.productRefinerValuesParameter)) {
                        asyncSearchResults = _this.productManager.searchByTextAsync(_this.searchTextParameter, channelId, catalogId, pageSize, skip, _this.orderBy);
                    }
                    else {
                        asyncSearchResults = _this.productManager.refineSearchByTextAsync(_this.searchTextParameter, _this.productRefinerValuesParameter, channelId, catalogId, pageSize, skip, _this.orderBy);
                    }
                    return asyncSearchResults.done(function (results) {
                        results.forEach(function (result) { result.Price = null; });
                        searchResults = results;
                    });
                });
                return asyncQueue.run()
                    .map(function () {
                    if (Commerce.NumberExtensions.isNullOrZero(skip)) {
                        _this.hasProductSearchResults(Commerce.ArrayExtensions.hasElements(searchResults) || Commerce.ArrayExtensions.hasElements(_this.productRefinerValuesParameter));
                    }
                    return searchResults;
                })
                    .fail(function (errors) {
                    Commerce.RetailLogger.viewModelProductSearchViewModelSearchProductsByTextFailed(_this.searchTextParameter, JSON.stringify(_this.productRefinerValuesParameter), Commerce.ErrorHelper.serializeError(errors));
                    Commerce.NotificationHandler.displayClientErrors(errors);
                })
                    .always(function () {
                    _this.logNavigationEnd();
                });
            };
            ProductSearchViewModel.prototype.getRefinersByCriteria = function (productSearchResults, correlationId) {
                var productIds = productSearchResults.map(function (value) {
                    return value.RecordId;
                });
                if (Commerce.ApplicationContext.Instance.storeInformation.RecordId === Commerce.Session.instance.productCatalogStore.Store.RecordId) {
                    Commerce.RetailLogger.viewModelProductSearchViewModelGetRefinersByCriteria(correlationId);
                    var searchCriteria = {
                        Ids: productIds,
                        Context: Commerce.Session.instance.productCatalogStore.Context
                    };
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this.productRefinerValuesParameter)) {
                        searchCriteria.Refinement = this.productRefinerValuesParameter;
                    }
                    return this.productManager.getRefinersAsync(searchCriteria).fail(function (errors) {
                        Commerce.RetailLogger.viewModelProductSearchViewModelGetRefinersByCriteriaFailed(correlationId, JSON.stringify(errors));
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }
                return Commerce.AsyncResult.createResolved([]);
            };
            ProductSearchViewModel.prototype.getRefiners = function (correlationId) {
                var _this = this;
                if ((Commerce.ApplicationContext.Instance.storeInformation.RecordId === Commerce.Session.instance.productCatalogStore.Store.RecordId) &&
                    !Commerce.StringExtensions.isNullOrWhitespace(this.searchTextParameter)) {
                    Commerce.RetailLogger.viewModelProductSearchViewModelGetRefinersByText(this.searchTextParameter);
                    var channelId = Commerce.Session.instance.productCatalogStore.Context.ChannelId;
                    var catalogId = Commerce.Session.instance.productCatalogStore.Context.CatalogId;
                    var searchCriteria = {
                        SearchCondition: this.searchTextParameter,
                        Context: { ChannelId: channelId, CatalogId: catalogId }
                    };
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this.productRefinerValuesParameter)) {
                        searchCriteria.Refinement = this.productRefinerValuesParameter;
                    }
                    return this.productManager.getRefinersAsync(searchCriteria).fail(function (errors) {
                        Commerce.RetailLogger.viewModelProductSearchViewModelGetRefinersByTextFailed(_this.searchTextParameter, JSON.stringify(errors));
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }
                return Commerce.AsyncResult.createResolved([]);
            };
            ProductSearchViewModel.prototype.getRefinerValues = function (productRefiner) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(productRefiner)) {
                    return Commerce.AsyncResult.createResolved({ canceled: false, data: [] });
                }
                return this.productManager.getRefinerValuesByTextAsync(this.searchTextParameter, productRefiner.RecordId, productRefiner.SourceValue, Commerce.Session.instance.productCatalogStore.Context.CatalogId)
                    .map(function (result) {
                    return { canceled: false, data: result };
                })
                    .fail(function (errors) {
                    Commerce.RetailLogger.viewModelProductSearchViewModelGetRefinerValuesByTextFailed(_this.searchTextParameter, productRefiner.RecordId, productRefiner.SourceValue, Commerce.ErrorHelper.serializeError(errors));
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            return ProductSearchViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.ProductSearchViewModel = ProductSearchViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var ProductsViewModelActiveMode;
        (function (ProductsViewModelActiveMode) {
            ProductsViewModelActiveMode[ProductsViewModelActiveMode["None"] = 0] = "None";
            ProductsViewModelActiveMode[ProductsViewModelActiveMode["Products"] = 1] = "Products";
            ProductsViewModelActiveMode[ProductsViewModelActiveMode["Categories"] = 2] = "Categories";
        })(ProductsViewModelActiveMode = ViewModels.ProductsViewModelActiveMode || (ViewModels.ProductsViewModelActiveMode = {}));
        var ProductsViewModel = (function (_super) {
            __extends(ProductsViewModel, _super);
            function ProductsViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                _this.validateOptions(options);
                _this.orderBy = null;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.category)) {
                    _this._categoryId = options.categoryId;
                }
                if (Commerce.Session.instance.productCatalogStore.Context.ChannelId === Commerce.ApplicationContext.Instance.storeInformation.RecordId) {
                    _this.isCurrentStore = ko.observable(true);
                }
                else {
                    _this.isCurrentStore = ko.observable(false);
                }
                _this._pageLoadCompletedCorrelationId = Commerce.LoggerHelper.getFormattedCorrelationId(options);
                _this._category = options.category;
                _this._showProductDetailsHandler = options.showProductDetailsHandler;
                _this._showProductsForCategoryHandler = options.showProductsForCategoryHandler;
                _this._compareItemsHandler = options.compareItemsHandler;
                _this._showCartHandler = options.showCartHandler;
                _this._hasProductSearchResults = ko.observable(false);
                _this._hasProductSearchResults.subscribe(function () { return _this.resetRefineAvailability(); });
                _this.isProductsModeBusy = ko.observable(false);
                _this._isBusyWhen(ko.computed(function () { return _this.isProductsModeBusy(); }));
                _this.canRefineItems = ko.observable(false);
                _this.areSubcategoriesEmpty = ko.observable(false);
                _this.canCompareSelectedItems = ko.observable(false);
                _this.canAddSelectedItemsToSale = ko.observable(false);
                _this.productsSubHeader = ko.observable(Commerce.ViewModelAdapter.getResourceString("string_919"));
                _this.activeMode = ko.observable(options.activeMode);
                _this.isProductsModeActive = ko.computed(function () { return _this.activeMode() === ProductsViewModelActiveMode.Products; });
                _this.isCategoriesModeActive = ko.computed(function () { return _this.activeMode() === ProductsViewModelActiveMode.Categories; });
                _this.categories = ko.observableArray([]);
                var clearProductSelectionExtender = { notify: "always" };
                _this.clearProductSelection = ko.observable(false);
                _this.clearProductSelection.extend(clearProductSelectionExtender);
                _this.resetProductsHandler = ko.observable(function () { return; });
                _this.sortMenuItems = ko.observableArray([
                    {
                        displayName: Commerce.ViewModelAdapter.getResourceString("string_30259"),
                        buttonId: "btnSortByItemIdAsc",
                        axBubbleAttr: "productSearchResults_sortByItemIdAsc",
                        clickEvent: function () { return _this._setOrderBy("ItemId", false); }
                    },
                    {
                        displayName: Commerce.ViewModelAdapter.getResourceString("string_30249"),
                        buttonId: "btnSortByItemIdDesc",
                        axBubbleAttr: "productSearchResults_sortByItemIdDesc",
                        clickEvent: function () { return _this._setOrderBy("ItemId", true); }
                    },
                    {
                        displayName: Commerce.ViewModelAdapter.getResourceString("string_30252"),
                        buttonId: "btnSortByNameAsc",
                        axBubbleAttr: "productSearchResults_sortByNameAsc",
                        clickEvent: function () { return _this._setOrderBy("Name", false); }
                    },
                    {
                        displayName: Commerce.ViewModelAdapter.getResourceString("string_30253"),
                        buttonId: "btnSortByNameDesc",
                        axBubbleAttr: "productSearchResults_sortByNameDesc",
                        clickEvent: function () { return _this._setOrderBy("Name", true); }
                    }
                ]);
                if (_this.activeMode() === ProductsViewModelActiveMode.Categories) {
                    _this.switchToCategoriesMode();
                }
                else {
                    _this.isProductsModeBusy(true);
                    _this.resetRefineAvailability();
                }
                if (Commerce.ApplicationContext.Instance.channelConfiguration.EnableProductRatingsForRetailStores) {
                    _this._productViewColumns = [
                        { titleResx: "string_906", ratio: 20, collapseOrder: 4, minWidth: 120, field: "ItemId" },
                        { titleResx: "string_907", ratio: 50, collapseOrder: 3, minWidth: 200, field: "Name" },
                        {
                            titleResx: "string_908", ratio: 15, collapseOrder: 2, minWidth: 50, field: "Price",
                            converter: "Commerce.Core.Converter.PriceFormatter"
                        },
                        {
                            titleResx: "string_1010", ratio: 15, collapseOrder: 1, minWidth: 50, field: "$data",
                            converter: "Commerce.Formatters.RatingTextFormatter"
                        },
                    ];
                }
                else {
                    _this._productViewColumns = [
                        { titleResx: "string_906", ratio: 20, collapseOrder: 3, minWidth: 120, field: "ItemId" },
                        { titleResx: "string_907", ratio: 50, collapseOrder: 2, minWidth: 200, field: "Name" },
                        {
                            titleResx: "string_908", ratio: 30, collapseOrder: 1, minWidth: 100, field: "Price",
                            converter: "Commerce.Core.Converter.PriceFormatter", isRightAligned: true
                        }
                    ];
                }
                return _this;
            }
            ProductsViewModel.prototype.addSelectedItemsToCart = function () {
                return this.addProductsToCartAsync(false);
            };
            ProductsViewModel.prototype.quickSellSelectedItems = function () {
                return this.addProductsToCartAsync(true);
            };
            ProductsViewModel.prototype.showProductDetails = function (productSearchResult) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(productSearchResult)) {
                    this._showProductDetailsHandler(productSearchResult);
                }
            };
            ProductsViewModel.prototype.showProductsForCategory = function (category) {
                this._showProductsForCategoryHandler(this.activeMode(), category);
            };
            ProductsViewModel.prototype.setSelectedItems = function (items) {
                this._selectedProductSearchResults = Commerce.ArrayExtensions.hasElements(items) ? items : [];
                var numItemsSelected = this._selectedProductSearchResults.length;
                this.canCompareSelectedItems(numItemsSelected === 2 || numItemsSelected === 3);
                this.canAddSelectedItemsToSale(numItemsSelected > 0);
            };
            Object.defineProperty(ProductsViewModel.prototype, "productViewColumns", {
                get: function () {
                    return this._productViewColumns;
                },
                enumerable: true,
                configurable: true
            });
            ProductsViewModel.prototype.compareSelectedItems = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._category)) {
                    var selectedProductIds = [];
                    for (var i = 0; i < this._selectedProductSearchResults.length; i++) {
                        selectedProductIds.push(this._selectedProductSearchResults[i].RecordId);
                    }
                    this._compareItemsHandler(this._category.Name, selectedProductIds);
                }
            };
            ProductsViewModel.prototype.switchToProductsMode = function () {
                this.activeMode(Commerce.ViewModels.ProductsViewModelActiveMode.Products);
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._category)) {
                    this.isProductsModeBusy(true);
                    this.resetProductsList();
                }
                this.resetRefineAvailability();
            };
            ProductsViewModel.prototype.switchToCategoriesMode = function () {
                var _this = this;
                this.activeMode(Commerce.ViewModels.ProductsViewModelActiveMode.Categories);
                if (!Commerce.ArrayExtensions.hasElements(this.categories())) {
                    this.areSubcategoriesEmpty(false);
                    this._isBusyUntil(this.updateCategoriesAsync())
                        .done(function () {
                        _this.areSubcategoriesEmpty(!Commerce.ArrayExtensions.hasElements(_this.categories()));
                    }).fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }
                this.resetRefineAvailability();
            };
            ProductsViewModel.prototype.searchProducts = function (pageSize, skip) {
                var _this = this;
                var channelId = 0;
                var categoryId = this.getCurrentCategoryId();
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._category)) {
                    channelId = Commerce.Session.instance.productCatalogStore.Context.ChannelId;
                }
                var catalogId = Commerce.Session.instance.productCatalogStore.Context.CatalogId;
                var searchResults = [];
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var asyncSearchResults;
                    if (!Commerce.ArrayExtensions.hasElements(_this._productRefinerValues)) {
                        asyncSearchResults = _this.productManager.searchByCategoryAsync(categoryId, channelId, catalogId, pageSize, skip, _this.orderBy);
                    }
                    else {
                        asyncSearchResults = _this.productManager.refineSearchByCategoryAsync(categoryId, _this._productRefinerValues, channelId, catalogId, pageSize, skip, _this.orderBy);
                    }
                    return asyncSearchResults.done(function (results) {
                        results.forEach(function (result) { result.Price = null; });
                        searchResults = results;
                    });
                });
                return asyncQueue.run()
                    .map(function () {
                    if (Commerce.NumberExtensions.isNullOrZero(skip)) {
                        _this._hasProductSearchResults(Commerce.ArrayExtensions.hasElements(searchResults) || Commerce.ArrayExtensions.hasElements(_this._productRefinerValues));
                    }
                    return searchResults;
                })
                    .fail(function (errors) {
                    Commerce.RetailLogger.viewsModelProductsViewModelSearchProductsByCategoryFailed(categoryId, JSON.stringify(_this._productRefinerValues), Commerce.ErrorHelper.serializeError(errors));
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            ProductsViewModel.prototype.productsPageLoadCompleted = function (gridData) {
                Commerce.RetailLogger.viewsModelProductsViewModelProductPageLoadCompleted(this._pageLoadCompletedCorrelationId);
                this._pageLoadCompletedCorrelationId = Commerce.StringExtensions.EMPTY;
            };
            ProductsViewModel.prototype.filterProducts = function () {
                var _this = this;
                var asyncResult = new Commerce.AsyncResult();
                if (!Commerce.ArrayExtensions.hasElements(this._productRefiners)) {
                    this.isProductsModeBusy(true);
                    this.getRefiners()
                        .always(function () {
                        _this.isProductsModeBusy(false);
                    }).done(function (result) {
                        _this._productRefiners = result;
                        asyncResult.resolveOrRejectOn(_this.RunGetProductRefinersActivity());
                    });
                }
                else {
                    var selectedMap_1 = {};
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this._productRefiners)) {
                        for (var _i = 0, _a = this._productRefiners; _i < _a.length; _i++) {
                            var ref = _a[_i];
                            selectedMap_1[Commerce.StringExtensions.format("{0}|{1}", ref.KeyName, ref.RecordId)] = ref.SelectedValues;
                        }
                    }
                    this.isProductsModeBusy(true);
                    this.getRefiners()
                        .always(function () {
                        _this.isProductsModeBusy(false);
                    }).done(function (result) {
                        _this._productRefiners = result;
                        for (var _i = 0, _a = _this._productRefiners; _i < _a.length; _i++) {
                            var ref = _a[_i];
                            if (selectedMap_1[Commerce.StringExtensions.format("{0}|{1}", ref.KeyName, ref.RecordId)]) {
                                ref.SelectedValues = selectedMap_1[Commerce.StringExtensions.format("{0}|{1}", ref.KeyName, ref.RecordId)];
                            }
                        }
                        asyncResult.resolveOrRejectOn(_this.RunGetProductRefinersActivity());
                    });
                }
                return asyncResult;
            };
            ProductsViewModel.prototype.getRefiners = function () {
                if ((Commerce.ApplicationContext.Instance.storeInformation.RecordId === Commerce.Session.instance.productCatalogStore.Store.RecordId)) {
                    var channelId = Commerce.Session.instance.productCatalogStore.Context.ChannelId;
                    var catalogId = Commerce.Session.instance.productCatalogStore.Context.CatalogId;
                    var categoryId_1 = this.getCurrentCategoryId();
                    var searchCriteria = {
                        CategoryIds: [categoryId_1],
                        Context: { ChannelId: channelId, CatalogId: catalogId },
                        Refinement: this._productRefinerValues
                    };
                    return this.productManager.getRefinersAsync(searchCriteria).fail(function (errors) {
                        Commerce.RetailLogger.viewsModelProductsViewModelGetRefinersByCategoryFailed(categoryId_1, JSON.stringify(errors));
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }
                return Commerce.AsyncResult.createResolved([]);
            };
            ProductsViewModel.prototype.getRefinerValues = function (productRefiner) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(productRefiner)) {
                    return Commerce.AsyncResult.createResolved({ canceled: false, data: [] });
                }
                var categoryId = this.getCurrentCategoryId();
                return this.productManager.getRefinerValuesByCategoryAsync(categoryId, productRefiner.RecordId, productRefiner.SourceValue, Commerce.Session.instance.productCatalogStore.Context.CatalogId)
                    .map(function (result) {
                    return { canceled: false, data: result };
                })
                    .fail(function (errors) {
                    Commerce.RetailLogger.viewsModelProductsViewModelGetRefinerValuesByCategoryFailed(categoryId, productRefiner.RecordId, productRefiner.SourceValue, Commerce.ErrorHelper.serializeError(errors));
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            ProductsViewModel.prototype.applyRefinerValues = function (productRefinerValues) {
                this._productRefinerValues = productRefinerValues;
                this.isProductsModeBusy(true);
                this.resetProductsList();
                if (Commerce.ArrayExtensions.hasElements(productRefinerValues)) {
                    this.productsSubHeader(Commerce.ViewModelAdapter.getResourceString("string_921"));
                }
                else {
                    this.productsSubHeader(Commerce.ViewModelAdapter.getResourceString("string_919"));
                }
            };
            ProductsViewModel.prototype.switchSelectionMode = function (value) {
                if (value.detail.index === 0) {
                    this.switchToProductsMode();
                }
                else {
                    this.switchToCategoriesMode();
                }
            };
            ProductsViewModel.prototype._setOrderBy = function (columnName, isDescending) {
                this.orderBy = new Commerce.Proxy.Entities.SortColumnClass({ ColumnName: columnName, IsDescending: isDescending });
                this.searchProducts(0, 0);
                this.resetProductsHandler()();
            };
            ProductsViewModel.prototype.RunGetProductRefinersActivity = function () {
                var _this = this;
                var activity = new Commerce.Activities.GetProductRefinersActivity({
                    productRefiners: this._productRefiners,
                    getRefinerValuesHandler: this.getRefinerValues.bind(this)
                });
                activity.responseHandler = function (response) {
                    var result = new Commerce.VoidAsyncResult();
                    _this.applyRefinerValues(response.producRefinerValues);
                    result.resolve();
                    return result;
                };
                return activity.execute();
            };
            ProductsViewModel.prototype.validateOptions = function (options) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw Error("'options' is required for ProductsViewModel");
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.activeMode)) {
                    throw Error("'options.activeMode' is required for ProductsViewModel");
                }
                if ((Commerce.ObjectExtensions.isNullOrUndefined(options.category)) && Commerce.NumberExtensions.isNullOrNaN(options.categoryId)) {
                    throw Error("Either of 'options.category' and 'options.categoryId' must be provided for ProductsViewModel. Both cannot be null/undefined.");
                }
                if (!Commerce.ObjectExtensions.isFunction(options.showProductDetailsHandler)) {
                    throw Error("'options.showProductDetailsHandler' must be a function.");
                }
                if (!Commerce.ObjectExtensions.isFunction(options.showProductsForCategoryHandler)) {
                    throw Error("'options.showProductsForCategoryHandler' must be a function.");
                }
                if (!Commerce.ObjectExtensions.isFunction(options.compareItemsHandler)) {
                    throw Error("'options.compareItemsHandler' must be a function.");
                }
                if (!Commerce.ObjectExtensions.isFunction(options.showCartHandler)) {
                    throw Error("'options.showCartHandler' must be a function.");
                }
            };
            ProductsViewModel.prototype.updateCategoriesAsync = function () {
                var _this = this;
                if (Commerce.Session.instance.productCatalogStore.Context.ChannelId === Commerce.ApplicationContext.Instance.storeInformation.RecordId) {
                    var asyncResult = new Commerce.VoidAsyncResult();
                    var cachedCategories = [];
                    if (Commerce.ArrayExtensions.hasElements(Commerce.Session.instance.CurrentCategoryList)) {
                        cachedCategories = Commerce.Session.instance.CurrentCategoryList.filter(function (item) {
                            return item.ParentCategory === _this.getCurrentCategoryId();
                        });
                    }
                    this.categories(cachedCategories);
                    asyncResult.resolve();
                    return asyncResult;
                }
                else {
                    return this.productManager.getChildCategoriesAsync(Commerce.Session.instance.productCatalogStore.Context.ChannelId, this.getCurrentCategoryId())
                        .done(function (categories) {
                        _this.categories(categories);
                    });
                }
            };
            ProductsViewModel.prototype.addProductsToCartAsync = function (isQuickSale) {
                var _this = this;
                if (!Commerce.ArrayExtensions.hasElements(this._selectedProductSearchResults)) {
                    Commerce.RetailLogger.viewModelProductsViewModelAddItemsToCart(Commerce.StringExtensions.EMPTY, isQuickSale);
                    return Commerce.VoidAsyncResult.createResolved();
                }
                this.isProductsModeBusy(true);
                this.canAddSelectedItemsToSale(false);
                var asyncQueue = new Commerce.AsyncQueue();
                var selectedProducts;
                asyncQueue.enqueue(function () {
                    return _this.getProductsForSelectedItemsAsync()
                        .done(function (products) {
                        selectedProducts = products;
                    });
                });
                if (this._selectedProductSearchResults.length === 1) {
                    asyncQueue.enqueue(function () {
                        var product = selectedProducts[0];
                        if (product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.KitMaster) {
                            _this._selectedProductSearchResults = [];
                            _this.clearProductSelection(true);
                            _this.isProductsModeBusy(false);
                            _this.canAddSelectedItemsToSale(true);
                            _this._showProductDetailsHandler({ RecordId: product.RecordId, IsKit: true });
                            asyncQueue.cancel();
                        }
                        return Commerce.VoidAsyncResult.createResolved();
                    });
                }
                asyncQueue.enqueue(function () {
                    var options = {
                        productSaleDetails: selectedProducts.map(function (product) {
                            return { product: product, quantity: 0, catalogId: Commerce.Session.instance.productCatalogStore.Context.CatalogId };
                        })
                    };
                    Commerce.RetailLogger.viewModelProductsViewModelAddItemsToCart(JSON.stringify(options), isQuickSale);
                    return Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.ItemSale, options)
                        .done(function (result) {
                        _this.isProductsModeBusy(false);
                        if (!result.canceled) {
                            if (isQuickSale) {
                                _this._showCartHandler();
                            }
                            else {
                                _this._selectedProductSearchResults = [];
                                _this.clearProductSelection(true);
                            }
                        }
                        else {
                            _this.canAddSelectedItemsToSale(true);
                        }
                    });
                });
                var result = asyncQueue.run().fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors)
                        .always(function () {
                        _this.isProductsModeBusy(false);
                        _this.canAddSelectedItemsToSale(true);
                    });
                });
                return asyncQueue.cancelOn(result);
            };
            ProductsViewModel.prototype.getProductsForSelectedItemsAsync = function () {
                var channelId = Commerce.Session.instance.productCatalogStore.Context.ChannelId;
                var productIds = this._selectedProductSearchResults.map(function (productSearchResult) {
                    return productSearchResult.RecordId;
                });
                if (productIds.length > 1) {
                    return this.productManager.getByIdsAsync(productIds, channelId);
                }
                else {
                    return this.productManager.getByIdAsync(productIds[0], channelId)
                        .map(function (product) {
                        return [product];
                    });
                }
            };
            ProductsViewModel.prototype.resetRefineAvailability = function () {
                if (this.activeMode() === ProductsViewModelActiveMode.Categories) {
                    this.canRefineItems(false);
                }
                else {
                    this.canRefineItems(this._hasProductSearchResults());
                }
            };
            ProductsViewModel.prototype.getCurrentCategoryId = function () {
                return Commerce.ObjectExtensions.isNullOrUndefined(this._category) ? this._categoryId : this._category.RecordId;
            };
            ProductsViewModel.prototype.resetProductsList = function () {
                if (Commerce.ObjectExtensions.isFunction(this.resetProductsHandler)) {
                    this.resetProductsHandler()();
                }
            };
            return ProductsViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.ProductsViewModel = ProductsViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var RecentPurchasesViewModelMode;
        (function (RecentPurchasesViewModelMode) {
            RecentPurchasesViewModelMode[RecentPurchasesViewModelMode["RecentPurchases"] = 0] = "RecentPurchases";
            RecentPurchasesViewModelMode[RecentPurchasesViewModelMode["Wishlist"] = 1] = "Wishlist";
        })(RecentPurchasesViewModelMode = ViewModels.RecentPurchasesViewModelMode || (ViewModels.RecentPurchasesViewModelMode = {}));
        var RecentPurchasesViewModel = (function (_super) {
            __extends(RecentPurchasesViewModel, _super);
            function RecentPurchasesViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw "Invalid options passed to the RecentPurchasesViewModel constructor: options cannot be null or undefined.";
                }
                else if (options.sourceType !== RecentPurchasesViewModelMode.Wishlist && options.sourceType !== RecentPurchasesViewModelMode.RecentPurchases) {
                    throw "Invalid options passed to the RecentPurchasesViewModel constructor: options.sourceType is not a supported source type.";
                }
                else if (Commerce.StringExtensions.isNullOrWhitespace(options.customerAccountNumber)) {
                    throw "Invalid options passed to the RecentPurchasesViewModel constructor: options.customerAccountNumber is a required field.";
                }
                else if (Commerce.StringExtensions.isNullOrWhitespace(options.customerName)) {
                    throw "Invalid options passed to the RecentPurchasesViewModel constructor: options.customerName is a required field.";
                }
                if (options.sourceType === RecentPurchasesViewModelMode.RecentPurchases) {
                    _this.subTitle = Commerce.ViewModelAdapter.getResourceString("string_230");
                }
                else if (options.sourceType === RecentPurchasesViewModelMode.Wishlist) {
                    _this.subTitle = _this._wishListName;
                }
                _this.wishListProducts = ko.observableArray([]);
                _this.recentPurchases = ko.observableArray([]);
                _this._customerAccountNumber = options.customerAccountNumber;
                _this.selectedPurchaseHistoryLines = [];
                _this.selectedWishlistLines = [];
                _this.compareDisabled = ko.observable(true);
                _this.addToSaleDisabled = ko.observable(true);
                _this.customerName = options.customerName;
                _this._sourceType = options.sourceType;
                _this._wishList = options.wishlist;
                _this._isBusyFlag = ko.observable(false);
                _this._isBusyWhen(ko.computed(function () { return _this._isBusyFlag(); }));
                return _this;
            }
            Object.defineProperty(RecentPurchasesViewModel.prototype, "sourceType", {
                get: function () {
                    return this._sourceType;
                },
                enumerable: true,
                configurable: true
            });
            RecentPurchasesViewModel.prototype.loadAsync = function () {
                if (this._sourceType === RecentPurchasesViewModelMode.Wishlist) {
                    return this._isBusyUntil(this._getWishListProductsAsync()).fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }
                else {
                    return Commerce.VoidAsyncResult.createResolved();
                }
            };
            RecentPurchasesViewModel.prototype.getRecentPurchasesAsync = function (pageSize, skip) {
                var _this = this;
                return this.customerManager.getPurchaseHistoryAsync(this._customerAccountNumber, pageSize, skip)
                    .done(function (purchaseHistoryResults) {
                    _this.recentPurchases(purchaseHistoryResults);
                }).fail(function (errors) {
                    if (errors[0].ErrorCode.toUpperCase() !== Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_REALTIMESERVICENOTSUPPORTED.serverErrorCode) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    }
                });
            };
            RecentPurchasesViewModel.prototype.recentPurchaseSelectionChangedEventHandler = function (lines) {
                this.selectedPurchaseHistoryLines = lines;
                var numItemsSelected = this.selectedPurchaseHistoryLines.length;
                this.compareDisabled(numItemsSelected < 2 || numItemsSelected > 3);
                this.addToSaleDisabled(numItemsSelected === 0);
            };
            RecentPurchasesViewModel.prototype.wishlistProductSelectionChangedEventHandler = function (items) {
                this.selectedWishlistLines = items;
                var numItemsSelected = this.selectedWishlistLines.length;
                this.compareDisabled(numItemsSelected < 2 || numItemsSelected > 3);
                this.addToSaleDisabled(numItemsSelected === 0);
            };
            RecentPurchasesViewModel.prototype.addToSaleAsync = function (eventInfo) {
                return this.addProductsToCartAsync();
            };
            RecentPurchasesViewModel.prototype.sellNowAsync = function (eventInfo) {
                return this.addProductsToCartAsync().done(function (result) {
                    if (!result.canceled) {
                        Commerce.ViewModelAdapter.navigate("CartView");
                    }
                });
            };
            RecentPurchasesViewModel.prototype.navigateToRecentPurchaseItemDetails = function (item) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(item.ProductId)) {
                    var simpleProductDetailsViewModelOptions = {
                        productId: item.ProductId,
                        product: undefined,
                        isSelectionMode: false,
                        channelId: item.ChannelId,
                        correlationId: Commerce.StringExtensions.EMPTY
                    };
                    Commerce.ViewModelAdapter.navigate("SimpleProductDetailsView", simpleProductDetailsViewModelOptions);
                }
            };
            RecentPurchasesViewModel.prototype.navigateToWishlistItemDetails = function (item) {
                var simpleProductDetailsViewModelOptions = {
                    productId: item.RecordId,
                    product: item,
                    isSelectionMode: false,
                    correlationId: Commerce.StringExtensions.EMPTY
                };
                Commerce.ViewModelAdapter.navigate("SimpleProductDetailsView", simpleProductDetailsViewModelOptions);
            };
            RecentPurchasesViewModel.prototype.compare = function () {
                var options = {
                    productIds: this._selectedProductIds
                };
                Commerce.ViewModelAdapter.navigate("CompareProductsView", options);
            };
            RecentPurchasesViewModel.prototype.addProductsToCartAsync = function () {
                if (this.addToSaleDisabled()) {
                    return Commerce.AsyncResult.createResolved({ canceled: true });
                }
                var productSaleReturnDetails;
                if (this._sourceType === ViewModels.RecentPurchasesViewModelMode.RecentPurchases) {
                    productSaleReturnDetails =
                        this.selectedPurchaseHistoryLines.map(function (purchaseHistory) {
                            return { productId: purchaseHistory.ProductId, quantity: 0 };
                        });
                }
                else if (this._sourceType === ViewModels.RecentPurchasesViewModelMode.Wishlist) {
                    productSaleReturnDetails =
                        this.selectedWishlistLines.map(function (product) {
                            return { product: product, quantity: 0 };
                        });
                }
                var options = {
                    productSaleDetails: productSaleReturnDetails
                };
                var asyncResult = this.operationsManager.runOperation(Commerce.Operations.RetailOperation.ItemSale, options);
                return this._isBusyUntil(asyncResult).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            Object.defineProperty(RecentPurchasesViewModel.prototype, "isBusyFlag", {
                get: function () {
                    return this._isBusyFlag;
                },
                enumerable: true,
                configurable: true
            });
            RecentPurchasesViewModel.prototype._getWishListProductsAsync = function () {
                var _this = this;
                var productIds = this._wishList.CommerceListLines.map(function (value) {
                    return value.ProductId;
                });
                var getProductsQueue = new Commerce.AsyncQueue();
                var products;
                var channelId = 0;
                getProductsQueue.enqueue(function () {
                    return _this.productManager.getByIdsAsync(productIds, channelId)
                        .done(function (results) {
                        products = results;
                    });
                });
                return getProductsQueue.run().done(function () {
                    _this.wishListProducts(products);
                });
            };
            Object.defineProperty(RecentPurchasesViewModel.prototype, "_wishListName", {
                get: function () {
                    return Commerce.ObjectExtensions.isNullOrUndefined(this._wishList) ? Commerce.StringExtensions.EMPTY : this._wishList.Name;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RecentPurchasesViewModel.prototype, "_selectedProductIds", {
                get: function () {
                    var productIds = [];
                    if (this.sourceType === ViewModels.RecentPurchasesViewModelMode.RecentPurchases) {
                        productIds = this.selectedPurchaseHistoryLines.map(function (purchaseHistoryLine) {
                            return purchaseHistoryLine.ProductId;
                        });
                    }
                    else if (this.sourceType === ViewModels.RecentPurchasesViewModelMode.Wishlist) {
                        productIds = this.selectedWishlistLines.map(function (wishlistLine) {
                            return wishlistLine.RecordId;
                        });
                    }
                    return productIds;
                },
                enumerable: true,
                configurable: true
            });
            RecentPurchasesViewModel.RECENT_PURCHASES_PAGE_SIZE = 20;
            return RecentPurchasesViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.RecentPurchasesViewModel = RecentPurchasesViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var ReconcileShiftsMode;
        (function (ReconcileShiftsMode) {
            ReconcileShiftsMode[ReconcileShiftsMode["Active"] = 0] = "Active";
            ReconcileShiftsMode[ReconcileShiftsMode["Completed"] = 1] = "Completed";
        })(ReconcileShiftsMode = ViewModels.ReconcileShiftsMode || (ViewModels.ReconcileShiftsMode = {}));
        var ReconcileShiftsViewModel = (function (_super) {
            __extends(ReconcileShiftsViewModel, _super);
            function ReconcileShiftsViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                _this._validateOptions(options);
                _this._shiftReconciliationLineRetrievalCriteria = new Commerce.Proxy.Entities.ShiftReconciliationLineRetrievalCriteriaClass();
                _this._shiftReconciliationLineRetrievalCriteria.TransactionTypeValues = [];
                _this._shiftReconciliationLineRetrievalCriteria.ShiftReconciliationLineStatusValue = Commerce.Proxy.Entities.ShiftReconciliationLineStatus.Pending.valueOf();
                _this._shiftReconciliationLineRetrievalCriteria.Shifts = options.shiftsToReconcile;
                _this.activeReconciliationLines = ko.observableArray([]);
                _this.completedReconciliationLines = ko.observableArray([]);
                _this._selectedActiveReconciliationLines = ko.observableArray([]);
                _this._selectedCompletedReconciliationLines = ko.observableArray([]);
                _this.subTitle = Commerce.ViewModelAdapter.getResourceString("string_2148");
                _this.reconcileShiftsMode = ko.observable(ReconcileShiftsMode.Active);
                _this.hasSelectedActiveReconciliationLines = ko.computed(function () {
                    return Commerce.ArrayExtensions.hasElements(_this._selectedActiveReconciliationLines());
                });
                _this.hasSelectedCompletedReconciliationLines = ko.computed(function () {
                    return Commerce.ArrayExtensions.hasElements(_this._selectedCompletedReconciliationLines());
                });
                _this.canResolveActiveLines = ko.computed(function () {
                    var canResolve = false;
                    if (_this.hasSelectedActiveReconciliationLines() && _this.reconcileShiftsMode() === Commerce.ViewModels.ReconcileShiftsMode.Active) {
                        canResolve = true;
                    }
                    return canResolve;
                });
                _this.canUndoCompletedLines = ko.computed(function () {
                    var canUndo = false;
                    if (_this.hasSelectedCompletedReconciliationLines() && _this.reconcileShiftsMode() === Commerce.ViewModels.ReconcileShiftsMode.Completed) {
                        canUndo = _this._selectedCompletedReconciliationLines().every(function (line) {
                            return line.ShiftGroupLinesClosedCount === 0;
                        });
                    }
                    return canUndo;
                });
                return _this;
            }
            ReconcileShiftsViewModel.prototype.loadAsync = function () {
                return this._isBusyUntil(this._getShiftReconciliationLinesAsync(this.reconcileShiftsMode(), this._shiftReconciliationLineRetrievalCriteria))
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            ReconcileShiftsViewModel.prototype.switchReconciliationModeAsync = function (mode) {
                if (this.reconcileShiftsMode() !== mode) {
                    return this._isBusyUntil(this._switchReconciliationModeAsync(mode)
                        .fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    }));
                }
                else {
                    return Commerce.VoidAsyncResult.createResolved();
                }
            };
            ReconcileShiftsViewModel.prototype.switchReconciliationModeByEventAsync = function (event) {
                var mode = this._getModeByEventIndex(event.detail.index);
                return this.switchReconciliationModeAsync(mode);
            };
            ReconcileShiftsViewModel.prototype.reconcileLinesAsync = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var reconciliationGroupDescription = Commerce.StringExtensions.EMPTY;
                if (this.canResolveActiveLines()) {
                    var asyncQueue_2 = new Commerce.AsyncQueue();
                    asyncQueue_2
                        .enqueue(function () {
                        var context = {
                            content: Commerce.StringExtensions.EMPTY,
                            contentMaxLength: 150
                        };
                        var activity = new Commerce.Activities.GetReconcileLinesDescriptionActivity(context);
                        return activity.execute()
                            .done(function () {
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(activity.response)) {
                                reconciliationGroupDescription = activity.response.description;
                            }
                            else {
                                asyncQueue_2.cancel();
                                return;
                            }
                        });
                    })
                        .enqueue(function () {
                        return _this.storeOperationsManager.reconcileLinesAsync(_this._selectedActiveReconciliationLines(), reconciliationGroupDescription)
                            .done(function () {
                            Commerce.RetailLogger.reconcileLinesSucceeded(correlationId);
                        })
                            .fail(function (errors) {
                            Commerce.RetailLogger.reconcileLinesFailed(correlationId, Commerce.ErrorHelper.serializeError(errors));
                            asyncQueue_2.cancel();
                            return;
                        });
                    })
                        .enqueue(function () {
                        return _this._switchReconciliationModeAsync(ReconcileShiftsMode.Completed)
                            .done(function () {
                            _this._selectedActiveReconciliationLines([]);
                        });
                    });
                    return this._isBusyUntil(asyncQueue_2.run()
                        .fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    }));
                }
                else {
                    return Commerce.AsyncResult.createResolved();
                }
            };
            ReconcileShiftsViewModel.prototype.setSelectedShiftReconciliationLines = function (reconciliationLines) {
                if (Commerce.ArrayExtensions.hasElements(reconciliationLines)) {
                    this.reconcileShiftsMode() === ReconcileShiftsMode.Active ?
                        this._selectedActiveReconciliationLines(reconciliationLines) :
                        this._selectedCompletedReconciliationLines(reconciliationLines);
                }
                else {
                    this.reconcileShiftsMode() === ReconcileShiftsMode.Active ?
                        this._selectedActiveReconciliationLines([]) :
                        this._selectedCompletedReconciliationLines([]);
                }
            };
            ReconcileShiftsViewModel.prototype.undoReconcileLinesAsync = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                if (this.canUndoCompletedLines) {
                    var asyncQueue = new Commerce.AsyncQueue();
                    asyncQueue
                        .enqueue(function () {
                        return _this.storeOperationsManager.undoReconcileLinesAsync(_this._selectedCompletedReconciliationLines())
                            .done(function () {
                            Commerce.RetailLogger.undoReconcileLinesSucceeded(correlationId);
                        })
                            .fail(function (errors) {
                            Commerce.RetailLogger.undoReconcileLinesFailed(correlationId, Commerce.ErrorHelper.serializeError(errors));
                        });
                    })
                        .enqueue(function () {
                        return _this._switchReconciliationModeAsync(ReconcileShiftsMode.Active)
                            .done(function () {
                            _this._selectedCompletedReconciliationLines([]);
                        });
                    });
                    return this._isBusyUntil(asyncQueue.run()
                        .fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    }));
                }
                else {
                    return Commerce.VoidAsyncResult.createResolved();
                }
            };
            ReconcileShiftsViewModel.prototype._getModeByEventIndex = function (pivotTabIndex) {
                var TAB_INDEX_MODES = {
                    0: ReconcileShiftsMode.Active,
                    1: ReconcileShiftsMode.Completed
                };
                return TAB_INDEX_MODES[pivotTabIndex];
            };
            ReconcileShiftsViewModel.prototype._getShiftReconciliationLinesAsync = function (mode, retrievalCriteria) {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                return this.storeOperationsManager.getShiftReconciliationLinesAsync(retrievalCriteria)
                    .done(function (lines) {
                    if (mode === ReconcileShiftsMode.Active) {
                        _this.activeReconciliationLines(lines);
                        _this.completedReconciliationLines([]);
                    }
                    else {
                        _this.completedReconciliationLines(lines);
                        _this.activeReconciliationLines([]);
                    }
                }).fail(function (errors) {
                    mode === ReconcileShiftsMode.Active ?
                        _this.activeReconciliationLines([]) : _this.completedReconciliationLines([]);
                    Commerce.RetailLogger.getShiftReconciliationLinesFailed(correlationId, _this._shiftReconciliationLineRetrievalCriteria.TransactionTypeValues.map(function (numberValue) {
                        return Commerce.NumberExtensions.formatNumber(numberValue, 0);
                    }).join(", "), _this._shiftReconciliationLineRetrievalCriteria.ShiftReconciliationLineStatusValue.toString(), Commerce.ErrorHelper.serializeError(errors));
                });
            };
            ReconcileShiftsViewModel.prototype._resetShiftReconciliationLineRetrievalCriteria = function (mode) {
                if (mode === ReconcileShiftsMode.Active) {
                    this._shiftReconciliationLineRetrievalCriteria.ShiftReconciliationLineStatusValue =
                        Commerce.Proxy.Entities.ShiftReconciliationLineStatus.Pending.valueOf();
                }
                else {
                    this._shiftReconciliationLineRetrievalCriteria.ShiftReconciliationLineStatusValue =
                        Commerce.Proxy.Entities.ShiftReconciliationLineStatus.Reconciled.valueOf();
                }
            };
            ReconcileShiftsViewModel.prototype._switchReconciliationModeAsync = function (mode) {
                var _this = this;
                this._resetShiftReconciliationLineRetrievalCriteria(mode);
                return this._getShiftReconciliationLinesAsync(mode, this._shiftReconciliationLineRetrievalCriteria)
                    .done(function () {
                    _this._toggleReconcileShiftsMode(mode);
                });
            };
            ReconcileShiftsViewModel.prototype._toggleReconcileShiftsMode = function (mode) {
                this.reconcileShiftsMode(mode);
            };
            ReconcileShiftsViewModel.prototype._validateOptions = function (options) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw Error("'options' is required for ReconcileShiftsViewModel");
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.shiftsToReconcile)) {
                    throw Error("'options.shiftReconciliationLineRetrievalCriteria' is required for ReconcileShiftsViewModel");
                }
            };
            return ReconcileShiftsViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.ReconcileShiftsViewModel = ReconcileShiftsViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var RefinerViewModel = (function (_super) {
            __extends(RefinerViewModel, _super);
            function RefinerViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this._originalRefiners = [];
                _this.availableRefiners = ko.observableArray([]);
                _this.selectedRefiners = ko.observableArray([]);
                _this.toggleRefinerListFlyout = ko.observable(function () { return; });
                _this.noSelectedFilterIconName = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.noSelectedFilterText = ko.observable(Commerce.StringExtensions.EMPTY);
                _this._allRefinerValuesRequired = false;
                _this._refinerDisplayOrder = new Commerce.Dictionary();
                _this.hasNoSelectedFilterText = ko.computed(function () {
                    return !Commerce.StringExtensions.isEmptyOrWhitespace(_this.noSelectedFilterText());
                });
                _this.hasNoSelectedFilterIconName = ko.computed(function () {
                    return !Commerce.StringExtensions.isEmptyOrWhitespace(_this.noSelectedFilterText());
                });
                _this.hasRefiners = ko.observable(false);
                _this.hasSelectedRefiners = ko.computed(function () {
                    return Commerce.ArrayExtensions.hasElements(_this.selectedRefiners());
                });
                _this.hasAvailableRefiners = ko.computed(function () {
                    return Commerce.ArrayExtensions.hasElements(_this.availableRefiners());
                });
                return _this;
            }
            RefinerViewModel.prototype.load = function (options) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    options = { refiners: [] };
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.refiners)) {
                    options.refiners = [];
                }
                this._originalRefiners = !Commerce.ArrayExtensions.hasElements(options.refiners) ? [] : options.refiners;
                var displayOrder = 0;
                this._refinerDisplayOrder.clear();
                options.refiners.forEach(function (refiner) {
                    _this._refinerDisplayOrder.setItem(refiner.ID, displayOrder++);
                });
                var availableRefiners = [];
                var selectedRefiners = [];
                this._originalRefiners.forEach(function (value) {
                    if (value.hasValue()) {
                        selectedRefiners.push(value);
                    }
                    else {
                        availableRefiners.push(value);
                    }
                });
                this.availableRefiners(availableRefiners);
                this.selectedRefiners(selectedRefiners);
                this.hasRefiners((availableRefiners.length + selectedRefiners.length) > 0);
                if (options.allRefinerValuesRequired) {
                    this._allRefinerValuesRequired = true;
                }
                if (options.noSelectedFilterText) {
                    this.noSelectedFilterText(options.noSelectedFilterText);
                }
                if (options.noSelectedFilterIconName) {
                    this.noSelectedFilterIconName(options.noSelectedFilterIconName);
                }
            };
            RefinerViewModel.prototype.clear = function () {
                this._originalRefiners.forEach(function (refiner) {
                    refiner.clear();
                });
                this.availableRefiners(this._originalRefiners.slice());
                this.selectedRefiners([]);
            };
            RefinerViewModel.prototype.validateRefiners = function () {
                var validationErrors = [];
                if (this._allRefinerValuesRequired) {
                    if ((this.selectedRefiners().length !== this._originalRefiners.length) && (this._originalRefiners.length > 0)) {
                        var emptySearchCriteria = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.EMPTY_SEARCH_CRITERIA);
                        validationErrors.push(emptySearchCriteria);
                    }
                }
                this.selectedRefiners().forEach(function (refiner) {
                    var errors = refiner.validate();
                    if (Commerce.ArrayExtensions.hasElements(errors)) {
                        validationErrors = validationErrors.concat(errors);
                    }
                });
                return validationErrors;
            };
            RefinerViewModel.prototype.getValueForRefinerAsync = function (refiner) {
                var _this = this;
                var getRefinerActivityContext = {
                    refiner: refiner
                };
                var getRefinerActivity = new Commerce.Activities.GetRefinerActivity(getRefinerActivityContext);
                return getRefinerActivity.execute().done(function () {
                    if (getRefinerActivity.response && getRefinerActivity.response.selectedValues) {
                        refiner.SelectedValues = getRefinerActivity.response.selectedValues;
                        var availableRefinerIndex = _this.availableRefiners().indexOf(refiner);
                        if (availableRefinerIndex > -1) {
                            _this.availableRefiners.splice(availableRefinerIndex, 1);
                            _this.selectedRefiners.push(refiner);
                        }
                        else {
                            var selectedRefinerIndex = _this.selectedRefiners().indexOf(refiner);
                            _this.selectedRefiners.splice(selectedRefinerIndex, 1);
                            _this.selectedRefiners.splice(selectedRefinerIndex, 0, refiner);
                        }
                    }
                });
            };
            RefinerViewModel.prototype.removeSelectedRefiner = function (refiner) {
                var selectedRefinerIndex = this.selectedRefiners().indexOf(refiner);
                if (selectedRefinerIndex > -1) {
                    this.selectedRefiners.splice(selectedRefinerIndex, 1);
                    refiner.clear();
                    this._addRefinerToSortedArray(this.availableRefiners, refiner);
                }
            };
            RefinerViewModel.prototype.getAriaLabelForRemovingRefinerValue = function (refiner) {
                return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_945"), refiner.KeyName);
            };
            RefinerViewModel.prototype.getEditAttributeLabel = function (refiner) {
                return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_944"), refiner.KeyName);
            };
            RefinerViewModel.prototype.getEditAttributeBubbleLabel = function (refiner) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(refiner) || Commerce.StringExtensions.isNullOrWhitespace(refiner.KeyName)) {
                    return "refinerControl_editButton";
                }
                else {
                    return Commerce.StringExtensions.format("refinerControl_editButton_{0}", refiner.KeyName);
                }
            };
            RefinerViewModel.prototype._addRefinerToSortedArray = function (refiners, refiner) {
                var refinersArray = refiners();
                var refinerDisplayOrder = this._refinerDisplayOrder.getItem(refiner.ID);
                var refinerAdded = false;
                for (var i = 0; i < refinersArray.length; i++) {
                    if (this._refinerDisplayOrder.getItem(refinersArray[i].ID) > refinerDisplayOrder) {
                        refiners.splice(i, 0, refiner);
                        refinerAdded = true;
                        break;
                    }
                }
                if (!refinerAdded) {
                    refiners.push(refiner);
                }
            };
            return RefinerViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.RefinerViewModel = RefinerViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var RefinersViewModel = (function (_super) {
            __extends(RefinersViewModel, _super);
            function RefinersViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this._originalRefiners = [];
                _this.availableRefiners = ko.observableArray([]);
                _this.toggleRefinerListFlyout = ko.observable(function () { return; });
                _this._refinerValuesRequired = false;
                return _this;
            }
            RefinersViewModel.prototype.load = function (options) {
                this._originalRefiners = options.refiners;
                this._loadRefinerValuesHandler = options.loadRefinerValuesHandler;
                this._getSelectedRefinerValueHandler = options.getSelectedRefinerValuesHandler;
                if (options.refinerValuesRequired) {
                    this._refinerValuesRequired = true;
                }
                this.availableRefiners(this.getOriginalRefiners());
            };
            RefinersViewModel.prototype.getOriginalRefiners = function () {
                return this._originalRefiners.slice();
            };
            RefinersViewModel.prototype.clear = function () {
                this._originalRefiners.forEach(function (refiner) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(refiner.SelectedValues)) {
                        refiner.SelectedValues = null;
                    }
                });
                this.availableRefiners(this.getOriginalRefiners());
            };
            RefinersViewModel.prototype.validateRefiners = function () {
                var validationErrors = [];
                if (this._refinerValuesRequired) {
                    var hasRefinerWithValue = this._originalRefiners.some(function (refiner) {
                        return Commerce.ArrayExtensions.hasElements(refiner.SelectedValues);
                    });
                    if (!hasRefinerWithValue) {
                        var emptySearchCriteria = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.EMPTY_SEARCH_CRITERIA);
                        validationErrors.push(emptySearchCriteria);
                    }
                }
                if (Commerce.ArrayExtensions.hasElements(this._originalRefiners)) {
                    this._originalRefiners.forEach(function (refiner) {
                        if (refiner instanceof Commerce.Refiners.RefinerBase) {
                            var errors = refiner.validate();
                            if (Commerce.ArrayExtensions.hasElements(errors)) {
                                validationErrors = validationErrors.concat(errors);
                            }
                        }
                    });
                }
                return validationErrors;
            };
            RefinersViewModel.prototype.getSelectedRefinerValues = function () {
                return this._getSelectedRefinerValueHandler(this._originalRefiners);
            };
            RefinersViewModel.prototype.loadRefinerValues = function (refiner) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._loadRefinerValuesHandler)) {
                    var result = new Commerce.AsyncResult();
                    result.resolve({ canceled: false });
                    return result;
                }
                return this._loadRefinerValuesHandler(refiner);
            };
            return RefinersViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.RefinersViewModel = RefinersViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var ReportDetailsViewModel = (function (_super) {
            __extends(ReportDetailsViewModel, _super);
            function ReportDetailsViewModel(context, report) {
                var _this = _super.call(this, context) || this;
                _this.reportTitle = ko.observable(report.REPORTTITLE);
                _this.hasDisclaimer = ko.observable(false);
                _this.charts = [];
                _this.resultsCaption = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.visibleReportResults = ko.observable(false);
                _this.isTotalsEnabled = ko.observable(false);
                _this.totalColumns = ko.observableArray([]);
                _this.chartVisible = ko.observableArray([false, false, false]);
                _this._parameters = [];
                _this._locale = Commerce.Host.instance.globalization.getApplicationLanguage();
                _this._report = report;
                _this._setParameters();
                _this._setCharts();
                _this._isExtensionCommandViewModelBusy = ko.observable(false);
                if (Commerce.ObjectExtensions.isNullOrUndefined(ReportDetailsViewModel._viewExtensionsManager)) {
                    _this._extensionCommandViewModels = [];
                }
                else {
                    _this._extensionCommandViewModels = ReportDetailsViewModel._viewExtensionsManager.getAppBarCommands()
                        .map(function (command) {
                        var commandVM = new ViewModels.CommandViewModel(command);
                        var commandState = {
                            reportTitle: _this._report.REPORTTITLE,
                            reportId: _this._report.REPORTID
                        };
                        commandVM.sendMessage("Initialize", commandState);
                        commandVM.addMessageHandler("IsProcessingChanged", function (isProcessing) {
                            if (isProcessing) {
                                _this._isExtensionCommandViewModelBusy(true);
                            }
                            else {
                                var isAnyCommandProcessing = _this._extensionCommandViewModels.some(function (vm) {
                                    return vm.isProcessing;
                                });
                                _this._isExtensionCommandViewModelBusy(isAnyCommandProcessing);
                            }
                        });
                        return commandVM;
                    });
                    _this._isBusyWhen(_this._isExtensionCommandViewModelBusy);
                }
                return _this;
            }
            Object.defineProperty(ReportDetailsViewModel.prototype, "extensionCommandViewModels", {
                get: function () {
                    return this._extensionCommandViewModels;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ReportDetailsViewModel, "viewExtensionManager", {
                set: function (manager) {
                    ReportDetailsViewModel._viewExtensionsManager = manager;
                },
                enumerable: true,
                configurable: true
            });
            ReportDetailsViewModel.prototype.getReportFilterValuesAsync = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var getReportParametersRequest = new Commerce.GetReportParametersClientRequest(correlationId, this._parameters, this.reportTitle());
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getReportParametersRequest))
                        .done(function (response) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(response.data) && !response.canceled) {
                            _this._updateAndValidateParameters(response.data.result);
                            _this._populateResultsCaption();
                        }
                    }));
                });
                asyncQueue.enqueue(function () {
                    return _this._getReportDataFromParameters();
                });
                return this._isBusyUntil(asyncQueue.run())
                    .map(function (result) {
                    return {
                        canceled: result.canceled,
                        data: result.data
                    };
                })
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            ReportDetailsViewModel.prototype.getCommercePropertyValue = function (value) {
                if (value.StringValue != null) {
                    return value.StringValue;
                }
                else if (value.DecimalValue != null) {
                    return value.DecimalValue;
                }
                else if (value.LongValue != null) {
                    return value.LongValue;
                }
                else if (value.IntegerValue != null) {
                    return value.IntegerValue;
                }
                else if (value.BooleanValue != null) {
                    return value.BooleanValue;
                }
                else if (value.DateTimeOffsetValue != null) {
                    return value.DateTimeOffsetValue;
                }
                else if (value.ByteValue != null) {
                    return value.ByteValue;
                }
                else {
                    return value.StringValue;
                }
            };
            ReportDetailsViewModel.prototype._getReportDataFromParameters = function () {
                var _this = this;
                if (!this._errorInReport) {
                    var parameters = this._getParameters();
                    return this.reportManager.getReportsDataAsync(this._report.REPORTID, parameters, this._locale)
                        .done(function (result) {
                        _this.hasDisclaimer(result.HasDisclaimer);
                        _this.isTotalsEnabled(result.HasTotalRow);
                        if (Commerce.ArrayExtensions.hasElements(result.Output)) {
                            _this._sendMessageToExtensions("ReportDataLoadedData", { reportDataSet: result });
                        }
                    }).recoverOnFailure(function (errors) {
                        return Commerce.AsyncResult.createRejected([new Commerce.Proxy.Entities.Error("string_2405")]);
                    });
                }
                return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error("string_2404")]);
            };
            ReportDetailsViewModel.prototype._setParameters = function () {
                this._parameters = [];
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._report.PARAMETERS)) {
                    var parameters = this._report.PARAMETERS.split("|");
                    for (var i = 0; i < parameters.length; i++) {
                        if (parameters[i].length !== 0) {
                            var parameter = parameters[i].split(";");
                            if (Commerce.ArrayExtensions.hasElements(parameter)) {
                                var parameterName = [Commerce.StringExtensions.EMPTY, Commerce.StringExtensions.EMPTY];
                                if (parameter.length > 0 && parameter[0].length > 0) {
                                    parameterName = parameter[0].split("=");
                                }
                                var parameterType = [Commerce.StringExtensions.EMPTY, Commerce.StringExtensions.EMPTY];
                                if (parameter.length > 1 && parameter[1].length > 0) {
                                    parameterType = parameter[1].split("=");
                                }
                                var parameterLabel = [Commerce.StringExtensions.EMPTY, Commerce.StringExtensions.EMPTY];
                                if (parameter.length > 2 && parameter[2].length > 0) {
                                    parameterLabel = parameter[2].split("=");
                                }
                                var parameterValue = [Commerce.StringExtensions.EMPTY, Commerce.StringExtensions.EMPTY];
                                if (parameter.length > 3 && parameter[3].length > 0) {
                                    parameterValue = parameter[3].split("=");
                                }
                                var value = new Commerce.Proxy.Entities.CommercePropertyValueClass();
                                switch (parameterType[1]) {
                                    case Commerce.Client.Entities.ReportParameterTypeEnum.DATETIME:
                                        var dateValue = void 0;
                                        var todayDate = new Date();
                                        if (parameterValue[1].toLocaleLowerCase().search("@today".toLocaleLowerCase()) !== -1) {
                                            var tokens = parameterValue[1].split("-");
                                            if (tokens.length === 1) {
                                                dateValue = todayDate;
                                            }
                                            else {
                                                var num = Number(tokens[1].trim());
                                                todayDate.setDate(todayDate.getDate() - num);
                                                dateValue = todayDate;
                                            }
                                        }
                                        else {
                                            dateValue = new Date(parameterValue[1]);
                                            if (isNaN(dateValue.getFullYear())) {
                                                dateValue = todayDate;
                                            }
                                        }
                                        value.DateTimeOffsetValue = dateValue;
                                        break;
                                    case Commerce.Client.Entities.ReportParameterTypeEnum.INTEGER:
                                        if (!Commerce.ObjectExtensions.isNumber(parseFloat(parameterValue[1]))) {
                                            parameterValue[1] = "0";
                                        }
                                        value.IntegerValue = parseFloat(parameterValue[1]);
                                        break;
                                    case Commerce.Client.Entities.ReportParameterTypeEnum.DECIMAL:
                                        if (!Commerce.ObjectExtensions.isNumber(parseFloat(parameterValue[1]))) {
                                            parameterValue[1] = "0.0";
                                        }
                                        value.DecimalValue = parseFloat(parameterValue[1]);
                                        break;
                                    default:
                                        value.StringValue = parameterValue[1];
                                        break;
                                }
                                var param = {
                                    name: parameterName[1],
                                    label: parameterLabel[1],
                                    value: value
                                };
                                this._parameters.push(param);
                            }
                        }
                    }
                }
            };
            ReportDetailsViewModel.prototype._setCharts = function () {
                this.charts = [];
                if (this._report.CHARTS != null) {
                    var charts = this._report.CHARTS.split("|");
                    for (var i = 0; i < charts.length; i++) {
                        if (charts[i].length !== 0) {
                            var chart = charts[i].split(";");
                            var categories = Commerce.StringExtensions.EMPTY;
                            var series = [];
                            for (var j = 0; j < chart.length; j++) {
                                var chartAttribute = chart[j].split("=");
                                switch (chartAttribute[0]) {
                                    case Commerce.Client.Entities.ReportChartAttributesEnum.CATEGORIES:
                                        categories = chartAttribute[1];
                                        break;
                                    case Commerce.Client.Entities.ReportChartAttributesEnum.SERIES:
                                        series.push(chartAttribute[1]);
                                        break;
                                }
                            }
                            this.charts.push({ Categories: categories, Series: series });
                        }
                    }
                }
            };
            ReportDetailsViewModel.prototype._populateResultsCaption = function () {
                if (this._errorInReport) {
                    this.resultsCaption(Commerce.ViewModelAdapter.getResourceString("string_2404"));
                    return;
                }
                var resultCaption = Commerce.StringExtensions.EMPTY;
                var paramCaptionTexts = [];
                var paramCaptionTextFormat = Commerce.ViewModelAdapter.getResourceString("string_2407");
                for (var i = 0; i < this._parameters.length; i++) {
                    var parameterValue = this.getCommercePropertyValue(this._parameters[i].value);
                    var value = void 0;
                    if (parameterValue instanceof Date) {
                        value = Commerce.Host.instance.globalization.getDateTimeFormatter(Commerce.Host.Globalization.DateTimeFormat.SHORT_DATE).format(parameterValue, "Etc/UTC");
                    }
                    else {
                        value = parameterValue.toString();
                    }
                    var paramCaptionText = Commerce.StringExtensions.format(paramCaptionTextFormat, this._parameters[i].label, value);
                    paramCaptionTexts.push(paramCaptionText);
                }
                var paramCaptionTextSeparator = Commerce.ViewModelAdapter.getResourceString("string_2408");
                var paramCaptionTextIndex = 0;
                for (paramCaptionTextIndex; paramCaptionTextIndex < paramCaptionTexts.length - 1; paramCaptionTextIndex++) {
                    resultCaption += paramCaptionTexts[paramCaptionTextIndex] + paramCaptionTextSeparator;
                }
                if (Commerce.ArrayExtensions.hasElements(paramCaptionTexts)) {
                    resultCaption += paramCaptionTexts[paramCaptionTextIndex];
                }
                this.resultsCaption(resultCaption);
            };
            ReportDetailsViewModel.prototype._updateAndValidateParameters = function (parameters) {
                var _this = this;
                parameters.forEach(function (parameter) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(parameter.value.DateTimeOffsetValue)) {
                        _this._errorInReport = isNaN(parameter.value.DateTimeOffsetValue.getFullYear());
                    }
                    else if (!Commerce.ObjectExtensions.isNullOrUndefined(parameter.value.IntegerValue)) {
                        _this._errorInReport = isNaN(parameter.value.IntegerValue);
                    }
                    else if (!Commerce.ObjectExtensions.isNullOrUndefined(parameter.value.DecimalValue)) {
                        _this._errorInReport = isNaN(parameter.value.DecimalValue);
                    }
                });
                if (!this._errorInReport) {
                    this._parameters = parameters;
                }
                return;
            };
            ReportDetailsViewModel.prototype._getParameters = function () {
                var parameters = [];
                this._parameters.forEach(function (param) {
                    var parameterProperty = new Commerce.Proxy.Entities.CommercePropertyClass();
                    parameterProperty.Key = param.name;
                    parameterProperty.Value = param.value;
                    parameters.push(parameterProperty);
                });
                return parameters;
            };
            ReportDetailsViewModel.prototype._sendMessageToExtensions = function (messageType, messageData) {
                this.extensionCommandViewModels.forEach(function (vm) {
                    vm.sendMessage(messageType, messageData);
                });
            };
            return ReportDetailsViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.ReportDetailsViewModel = ReportDetailsViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var ReportsViewModel = (function (_super) {
            __extends(ReportsViewModel, _super);
            function ReportsViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                _this.reportsList = ko.observableArray([]);
                return _this;
            }
            ReportsViewModel.prototype.loadAsync = function () {
                var _this = this;
                this.locale = Commerce.Host.instance.globalization.getApplicationLanguage();
                return this._isBusyUntil(this.reportManager.getListOfReportsAsync(this.locale))
                    .done(function (reportDataSet) { _this.getListOfReportsSuccessCallBack(reportDataSet); })
                    .fail(function (errors) { _this.getListOfReportsErrorCallBack(); });
            };
            ReportsViewModel.prototype.getListOfReportsSuccessCallBack = function (data) {
                var list = new Array();
                var row = {};
                for (var i = 0; i < data.Output.length; i++) {
                    var currentRow = data.Output[i];
                    row = {};
                    if (currentRow.RowData != null) {
                        for (var j = 0; j < currentRow.RowData.length; j++) {
                            row[currentRow.RowData[j].Key] = currentRow.RowData[j].Value.StringValue;
                        }
                        list.push(row);
                    }
                }
                this.reportsList(list);
            };
            ReportsViewModel.prototype.getListOfReportsErrorCallBack = function () {
                Commerce.ViewModelAdapter.displayMessage("string_2405", Commerce.MessageType.Error);
            };
            return ReportsViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.ReportsViewModel = ReportsViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var ResetPasswordViewModel = (function (_super) {
            __extends(ResetPasswordViewModel, _super);
            function ResetPasswordViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                _this._selectionHandler = options.selectionHandler;
                _this._isSelecting = ko.observable(false);
                _this._isBusyWhen(ko.computed(function () { return _this._isSelecting(); }));
                return _this;
            }
            ResetPasswordViewModel.prototype.onHidden = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._selectionHandler)) {
                    this._selectionHandler.cancel();
                }
            };
            ResetPasswordViewModel.prototype.resetPasswordAsync = function (options) {
                var _this = this;
                this._isSelecting(true);
                this._selectionHandler.select(options, function () {
                    _this._isSelecting(false);
                }, function (errors) {
                    _this._isSelecting(false);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            return ResetPasswordViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.ResetPasswordViewModel = ResetPasswordViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var SuspendedCartForDisplay = (function () {
            function SuspendedCartForDisplay(cart, customer, suspendedCart) {
                this._cart = cart;
                this._customer = Commerce.ObjectExtensions.isNullOrUndefined(customer) ? null : customer;
                this._suspendedCart = suspendedCart;
            }
            Object.defineProperty(SuspendedCartForDisplay.prototype, "cart", {
                get: function () {
                    return this._cart;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SuspendedCartForDisplay.prototype, "customer", {
                get: function () {
                    return this._customer;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SuspendedCartForDisplay.prototype, "suspendedCart", {
                get: function () {
                    return this._suspendedCart;
                },
                enumerable: true,
                configurable: true
            });
            return SuspendedCartForDisplay;
        }());
        ViewModels.SuspendedCartForDisplay = SuspendedCartForDisplay;
        var ResumeCartViewModel = (function (_super) {
            __extends(ResumeCartViewModel, _super);
            function ResumeCartViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this.suspendedCartsForDisplay = ko.observableArray([]);
                _this._selectedCarts = ko.observableArray([]);
                _this._isExtensionCommandViewModelBusy = ko.observable(false);
                _this.hasOneSelectedCart = ko.computed(function () {
                    return Commerce.ArrayExtensions.hasElements(_this._selectedCarts()) && (_this._selectedCarts().length === 1);
                });
                _this.hasSelectedCart = ko.computed(function () {
                    return _this._computeHasSelectedCart();
                });
                _this.dataListColumns = _this._getDataListColumns();
                if (Commerce.ObjectExtensions.isNullOrUndefined(ResumeCartViewModel._viewExtensionsManager)) {
                    _this._extensionCommandViewModels = [];
                }
                else {
                    _this._extensionCommandViewModels = ResumeCartViewModel._viewExtensionsManager.getAppBarCommands()
                        .map(function (command) {
                        var commandVM = new ViewModels.CommandViewModel(command);
                        commandVM.addMessageHandler("IsProcessingChanged", function (isProcessing) {
                            if (isProcessing) {
                                _this._isExtensionCommandViewModelBusy(true);
                            }
                            else {
                                var isAnyCommandProcessing = _this._extensionCommandViewModels.some(function (vm) {
                                    return vm.isProcessing;
                                });
                                _this._isExtensionCommandViewModelBusy(isAnyCommandProcessing);
                            }
                        });
                        return commandVM;
                    });
                    _this._isBusyWhen(_this._isExtensionCommandViewModelBusy);
                }
                return _this;
            }
            Object.defineProperty(ResumeCartViewModel, "viewExtensionManager", {
                set: function (manager) {
                    ResumeCartViewModel._viewExtensionsManager = manager;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ResumeCartViewModel.prototype, "extensionCommandViewModels", {
                get: function () {
                    return this._extensionCommandViewModels;
                },
                enumerable: true,
                configurable: true
            });
            ResumeCartViewModel.prototype.loadAsync = function () {
                var _this = this;
                return this._getSuspendedTransactionsAsync().done(function () {
                    _this._sendMessageToExtensions("Initialize", { suspendedCarts: _this.suspendedCartsForDisplay() });
                });
            };
            ResumeCartViewModel.prototype.selectCarts = function (suspendedCarts) {
                this._selectedCarts(suspendedCarts);
                if (Commerce.ArrayExtensions.hasElements(suspendedCarts)) {
                    this._sendMessageToExtensions("SuspendedCartsSelected", { suspendedCarts: suspendedCarts });
                }
                else {
                    this._sendMessageToExtensions("SuspendedCartsSelectionCleared", undefined);
                }
            };
            ResumeCartViewModel.prototype.voidTransactionsAsync = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var selectedCarts = this._selectedCarts();
                if (!Commerce.ArrayExtensions.hasElements(selectedCarts)) {
                    var error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.TRANSACTION_NOT_SELECTED);
                    return Commerce.VoidAsyncResult.createRejected([error]);
                }
                var suspendedCartIds = selectedCarts.map(function (entry) {
                    return entry.suspendedCart.Id;
                });
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var voidSuspendedTransactionsOptions = {
                        suspendedCartIds: suspendedCartIds,
                        correlationId: correlationId
                    };
                    return asyncQueue.cancelOn(_this.operationsManager.
                        runOperation(Commerce.Operations.RetailOperation.VoidSuspendedTransactions, voidSuspendedTransactionsOptions));
                }).enqueue(function () {
                    return _this._getSuspendedTransactionsAsync();
                });
                return this._isBusyUntil(asyncQueue.run())
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            ResumeCartViewModel.prototype.recallTransactionAsync = function () {
                var selectedCarts = this._selectedCarts();
                if (selectedCarts.length <= 0) {
                    var error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.TRANSACTION_NOT_SELECTED);
                    return Commerce.VoidAsyncResult.createRejected([error]);
                }
                if (selectedCarts.length > 1) {
                    var error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.TOO_MANY_TRANSACTIONS_SELECTED);
                    return Commerce.VoidAsyncResult.createRejected([error]);
                }
                var suspendedCart = selectedCarts[0].cart;
                if (Commerce.ObjectExtensions.isNullOrUndefined(suspendedCart)) {
                    var error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.TRANSACTION_NOT_SELECTED);
                    return Commerce.VoidAsyncResult.createRejected([error]);
                }
                return this._isBusyUntil(this._recallTransactionAsync(suspendedCart))
                    .done(function (result) {
                    if (result && !result.canceled) {
                        Commerce.ViewModelAdapter.navigate("CartView");
                    }
                }).fail(function (errors) {
                    if (Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_ITEMDISCONTINUEDFROMCHANNEL)) {
                        Commerce.NotificationHandler.displayClientErrors(errors).always(function () {
                            Commerce.ViewModelAdapter.navigate("CartView");
                        });
                    }
                    else {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    }
                });
            };
            ResumeCartViewModel.prototype.recallTransactionByReceiptIdAsync = function (receiptId) {
                return this._isBusyUntil(this.cartManager.resumeFromReceiptIdAsync(receiptId)
                    .done(function (suspendedCart) {
                    Commerce.ViewModelAdapter.navigate("CartView");
                })
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                }));
            };
            ResumeCartViewModel.prototype._getSuspendedTransactionsAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return _this.suspendedCartManager.getSuspendedCartsAsync()
                        .fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }).enqueue(function (suspendedCarts) {
                    return _this._addCustomerNameToSuspendedCartsAsync(suspendedCarts)
                        .done(function (suspendedCartsForDisplay) {
                        _this.suspendedCartsForDisplay(suspendedCartsForDisplay);
                    });
                });
                return this._isBusyUntil(asyncQueue.run());
            };
            ResumeCartViewModel.prototype._recallTransactionAsync = function (suspendedCart) {
                return Commerce.Triggers.TriggerHelper.executeTriggerWorkflowAsync(function () {
                    var preTriggerOptions = { cart: suspendedCart.Cart };
                    return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreRecallTransaction, preTriggerOptions);
                }, function () {
                    var request = new Commerce.ResumeSuspendedCartClientRequest(suspendedCart.Id);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request));
                }, function () {
                    var postTriggerOptions = { cart: suspendedCart.Cart };
                    return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostRecallTransaction, postTriggerOptions);
                });
            };
            ResumeCartViewModel.prototype._computeHasSelectedCart = function () {
                return Commerce.ArrayExtensions.hasElements(this._selectedCarts());
            };
            ResumeCartViewModel.prototype._getCustomersByCustomerIdsAsync = function (customerIds) {
                if (!Commerce.ArrayExtensions.hasElements(customerIds)) {
                    return Commerce.AsyncResult.createResolved([]);
                }
                return this.customerManager.getCustomersByAccountNumbersAsync(customerIds);
            };
            ResumeCartViewModel.prototype._addCustomerNameToSuspendedCartsAsync = function (suspendedCarts) {
                var customerIds = Commerce.ArrayExtensions.distinct(suspendedCarts.map(function (suspendedCart) {
                    return suspendedCart.Cart.CustomerId;
                })).filter(function (customerId) { return !Commerce.ObjectExtensions.isNullOrUndefined(customerId); });
                return this._getCustomersByCustomerIdsAsync(customerIds)
                    .map(function (customers) {
                    var suspendedCartsForDisplay = suspendedCarts.map(function (suspendedCart) {
                        var customer = Commerce.ArrayExtensions.firstOrUndefined(customers, function (customer) {
                            return customer.AccountNumber === suspendedCart.Cart.CustomerId;
                        });
                        return {
                            cart: suspendedCart.Cart,
                            customer: customer,
                            suspendedCart: suspendedCart
                        };
                    });
                    return suspendedCartsForDisplay;
                });
            };
            ResumeCartViewModel.prototype._getDataListColumns = function () {
                var customColumns = Commerce.ObjectExtensions.isNullOrUndefined(ResumeCartViewModel._viewExtensionsManager) ?
                    [] :
                    ResumeCartViewModel._viewExtensionsManager.getResumeCartListConfiguration();
                var defaultColumns = [
                    {
                        titleResx: "string_4064",
                        ratio: 15,
                        collapseOrder: 7,
                        minWidth: 200,
                        field: "suspendedCart.Cart.ModifiedDateTime",
                        converter: "Commerce.Core.Converter.ShortDateAndTime"
                    },
                    {
                        titleResx: "string_4047",
                        ratio: 15,
                        collapseOrder: 4,
                        minWidth: 100,
                        field: "suspendedCart.Cart.StaffId"
                    },
                    {
                        titleResx: "string_4043",
                        ratio: 15,
                        collapseOrder: 1,
                        minWidth: 100,
                        field: "suspendedCart.Cart.TerminalId"
                    },
                    {
                        titleResx: "string_4049",
                        ratio: 15,
                        collapseOrder: 2,
                        minWidth: 100,
                        field: "suspendedCart.ReceiptId"
                    },
                    {
                        titleResx: "string_4048",
                        ratio: 10,
                        collapseOrder: 3,
                        minWidth: 100,
                        field: "suspendedCart.ShiftId"
                    },
                    {
                        titleResx: "string_4504",
                        ratio: 15,
                        collapseOrder: 6,
                        minWidth: 100,
                        field: "customer.Name"
                    },
                    {
                        titleResx: "string_4024",
                        ratio: 15,
                        collapseOrder: 5,
                        minWidth: 100,
                        field: "suspendedCart.Cart.TotalAmount",
                        converter: "Commerce.Core.Converter.PriceFormatter",
                        isRightAligned: true
                    }
                ];
                return Commerce.ArrayExtensions.hasElements(customColumns) ? customColumns : defaultColumns;
            };
            ResumeCartViewModel.prototype._sendMessageToExtensions = function (messageType, messageData) {
                this.extensionCommandViewModels.forEach(function (vm) {
                    vm.sendMessage(messageType, messageData);
                });
            };
            return ResumeCartViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.ResumeCartViewModel = ResumeCartViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var ResumeShiftViewModel = (function (_super) {
            __extends(ResumeShiftViewModel, _super);
            function ResumeShiftViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                _this._givenOnShiftSelectedFunction = options.onShiftSelected;
                return _this;
            }
            ResumeShiftViewModel.prototype.onShiftSelected = function (shift) {
                var _this = this;
                if (Commerce.ObjectExtensions.isFunction(this._givenOnShiftSelectedFunction)) {
                    var givenOnShiftSelectedFunction_1 = this._givenOnShiftSelectedFunction;
                    this._givenOnShiftSelectedFunction = null;
                    return this._isBusyUntil(givenOnShiftSelectedFunction_1(shift)).fail(function (errors) {
                        _this._givenOnShiftSelectedFunction = givenOnShiftSelectedFunction_1;
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }
                else {
                    return Commerce.AsyncResult.createResolved();
                }
            };
            return ResumeShiftViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.ResumeShiftViewModel = ResumeShiftViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var ReturnTransactionViewModel = (function (_super) {
            __extends(ReturnTransactionViewModel, _super);
            function ReturnTransactionViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw new Error("Invalid options provided to ReturnTransactionViewModel constructor. The options cannot be null or undefined.");
                }
                else if (!Commerce.ObjectExtensions.isFunction(options.orderSelectionHandler)) {
                    throw new Error("Invalid options provided to ReturnTransactionViewModel constructor. The 'orderSelectionHandler' field must be a function.");
                }
                else if (!Commerce.ObjectExtensions.isFunction(options.salesLineSelectionHandler)) {
                    throw new Error("Invalid options provided to ReturnTransactionViewModel constructor. The 'salesLineSelectionHandler' field must be a function.");
                }
                _this.selectedSalesOrder = ko.observable(options.salesOrder);
                _this.hasSelectedSalesOrder = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedSalesOrder());
                }, _this);
                _this.salesLinesForDisplay = ko.observableArray([]);
                _this.hasSalesLinesForDisplay = ko.computed(function () {
                    return Commerce.ArrayExtensions.hasElements(_this.salesLinesForDisplay());
                }, _this);
                _this.selectedSalesLines = ko.observableArray([]);
                _this.hasSelectedSalesLines = ko.computed(function () {
                    return Commerce.ArrayExtensions.hasElements(_this.selectedSalesLines());
                }, _this);
                _this.areSelectedItemsReturnable = ko.computed(function () {
                    return _this.hasSelectedSalesLines() &&
                        Commerce.CustomerOrderHelper.isOrderAvailableForOperation(_this.selectedSalesOrder(), Commerce.Proxy.Entities.CustomerOrderOperation.Return);
                }, _this);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options.processing)) {
                    _this._isBusyWhen(options.processing);
                }
                _this._orderSelectionHandler = options.orderSelectionHandler;
                _this._salesLineSelectionHandler = options.salesLineSelectionHandler;
                _this._searchText = Commerce.StringExtensions.EMPTY;
                _this._isExtensionCommandViewModelBusy = ko.observable(false);
                if (Commerce.ObjectExtensions.isNullOrUndefined(ReturnTransactionViewModel._viewExtensionsManager)) {
                    _this._extensionCommandViewModels = [];
                    _this._salesOrderLinesGridItemSubfieldsViewModel = new Commerce.Extensibility.CustomGridItemSubfieldsViewModel([]);
                }
                else {
                    _this._extensionCommandViewModels = ReturnTransactionViewModel._viewExtensionsManager.getAppBarCommands()
                        .map(function (command) {
                        var commandVM = new ViewModels.CommandViewModel(command);
                        commandVM.addMessageHandler("IsProcessingChanged", function (isProcessing) {
                            if (isProcessing) {
                                _this._isExtensionCommandViewModelBusy(true);
                            }
                            else {
                                var isAnyCommandProcessing = _this._extensionCommandViewModels.some(function (vm) {
                                    return vm.isProcessing;
                                });
                                _this._isExtensionCommandViewModelBusy(isAnyCommandProcessing);
                            }
                        });
                        return commandVM;
                    });
                    _this._isBusyWhen(_this._isExtensionCommandViewModelBusy);
                    _this._salesOrderLinesGridItemSubfieldsViewModel = ReturnTransactionViewModel._viewExtensionsManager.getCustomSalesOrderLinesGridItemSubfields();
                }
                return _this;
            }
            Object.defineProperty(ReturnTransactionViewModel, "viewExtensionManager", {
                set: function (manager) {
                    ReturnTransactionViewModel._viewExtensionsManager = manager;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ReturnTransactionViewModel.prototype, "extensionCommandViewModels", {
                get: function () {
                    return this._extensionCommandViewModels;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ReturnTransactionViewModel.prototype, "salesOrderLinesGridItemSubfieldsViewModel", {
                get: function () {
                    return this._salesOrderLinesGridItemSubfieldsViewModel;
                },
                enumerable: true,
                configurable: true
            });
            ReturnTransactionViewModel.prototype.loadAsync = function () {
                var _this = this;
                var CORRELATION_ID = Commerce.LoggerHelper.getNewCorrelationId();
                var salesOrderId = this.hasSelectedSalesOrder() ? this.selectedSalesOrder().Id : Commerce.StringExtensions.EMPTY;
                Commerce.RetailLogger.viewModelReturnTransactionViewModelLoadAsyncStarted(CORRELATION_ID, salesOrderId);
                var loadResult;
                if (this.hasSelectedSalesOrder()) {
                    loadResult = this._prepareAndSetSalesLineDataFromOrder();
                }
                else {
                    loadResult = this._getReceiptIdAndSearchSalesTransactionsAsync();
                }
                return this._isBusyUntil(loadResult).done(function () {
                    Commerce.RetailLogger.viewModelReturnTransactionViewModelLoadAsyncFinished(CORRELATION_ID);
                    var commandState = {
                        receiptNumber: _this._searchText,
                        salesOrder: _this.selectedSalesOrder()
                    };
                    _this._extensionCommandViewModels.forEach(function (vm) {
                        vm.sendMessage("Initialize", commandState);
                    });
                    _this.selectedSalesOrder.subscribe(function (value) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(value)) {
                            _this._sendMessageToExtensions("TransactionSelected", { salesOrder: value });
                        }
                        else {
                            _this._sendMessageToExtensions("TransactionSelectionCleared", null);
                        }
                    });
                    _this.selectedSalesLines.subscribe(function (value) {
                        if (Commerce.ArrayExtensions.hasElements(value)) {
                            _this._sendMessageToExtensions("TransactionLineSelected", { salesLines: value });
                        }
                        else {
                            _this._sendMessageToExtensions("TransactionLineSelectionCleared", null);
                        }
                    });
                }).fail(function (loadErrors) {
                    Commerce.NotificationHandler.displayClientErrors(loadErrors);
                    Commerce.RetailLogger.viewModelReturnTransactionViewModelLoadAsyncFailed(CORRELATION_ID, Commerce.ErrorHelper.serializeErrorsForRetailLogger(loadErrors));
                });
            };
            ReturnTransactionViewModel.prototype.getReceiptIdAndSearchSalesTransactionsAsync = function () {
                var CORRELATION_ID = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.viewModelReturnTransactionViewModelGetUserInputAndSearchOrderStarted(CORRELATION_ID);
                return this._isBusyUntil(this._getReceiptIdAndSearchSalesTransactionsAsync()).done(function (result) {
                    if (result.canceled) {
                        Commerce.RetailLogger.viewModelReturnTransactionViewModelGetUserInputAndSearchOrderCanceled(CORRELATION_ID);
                    }
                    else {
                        Commerce.RetailLogger.viewModelReturnTransactionViewModelGetUserInputAndSearchOrderFinished(CORRELATION_ID);
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                    Commerce.RetailLogger.viewModelReturnTransactionViewModelGetUserInputAndSearchOrderFailed(CORRELATION_ID, Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors));
                });
            };
            ReturnTransactionViewModel.prototype.processBarcodeScanAsync = function (barcode) {
                if (!Commerce.ObjectExtensions.isString(barcode) || Commerce.StringExtensions.isNullOrWhitespace(barcode)) {
                    return Commerce.AsyncResult.createResolved({ canceled: true });
                }
                var CORRELATION_ID = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.viewModelReturnTransactionViewModelProcessBarcodeStarted(CORRELATION_ID, barcode);
                var processResult;
                if (this.hasSelectedSalesOrder()) {
                    processResult = this._getProductAndSelectSalesLine(barcode, CORRELATION_ID);
                }
                else {
                    processResult = this._searchSalesTransactionsAsync(barcode);
                }
                return this._isBusyUntil(processResult).done(function (result) {
                    if (result.canceled) {
                        Commerce.RetailLogger.viewModelReturnTransactionViewModelProcessBarcodeCanceled(CORRELATION_ID);
                    }
                    else {
                        Commerce.RetailLogger.viewModelReturnTransactionViewModelProcessBarcodeFinished(CORRELATION_ID);
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                    if (Commerce.ErrorHelper.containsNonUserError(errors)) {
                        Commerce.RetailLogger.viewModelReturnTransactionViewModelProcessBarcodeFailed(CORRELATION_ID, Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors));
                    }
                    else {
                        Commerce.RetailLogger.viewModelReturnTransactionViewModelProcessBarcodeFailedDueToUserError(CORRELATION_ID, Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors));
                    }
                });
            };
            ReturnTransactionViewModel.prototype.searchProductsAndSelectSalesLine = function () {
                var _this = this;
                var CORRELATION_ID = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.viewModelReturnTransactionViewModelGetUserInputAndSearchProductsStarted(CORRELATION_ID);
                var activity = new Commerce.Activities.GetSearchTextActivity({
                    searchText: Commerce.StringExtensions.EMPTY,
                    title: Commerce.ViewModelAdapter.getResourceString("string_3513"),
                    subTitle: Commerce.StringExtensions.EMPTY,
                    inputLabel: Commerce.ViewModelAdapter.getResourceString("string_3371")
                });
                var isCanceled;
                activity.responseHandler = function (response) {
                    var searchText = response.searchText;
                    return _this._getProductAndSelectSalesLine(searchText, CORRELATION_ID).done(function (result) {
                        isCanceled = result.canceled;
                    });
                };
                return this._isBusyUntil(activity.execute()).map(function () {
                    if (!activity.response) {
                        isCanceled = true;
                    }
                    if (isCanceled) {
                        Commerce.RetailLogger.viewModelReturnTransactionViewModelGetUserInputAndSearchProductsCanceled(CORRELATION_ID);
                    }
                    else {
                        Commerce.RetailLogger.viewModelReturnTransactionViewModelGetUserInputAndSearchProductsFinished(CORRELATION_ID);
                    }
                    return { canceled: isCanceled };
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                    Commerce.RetailLogger.viewModelReturnTransactionViewModelGetUserInputAndSearchProductsFailed(CORRELATION_ID, Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors));
                });
            };
            ReturnTransactionViewModel.prototype._getProductAndSelectSalesLine = function (input, correlationId) {
                var _this = this;
                if (Commerce.StringExtensions.isNullOrWhitespace(input)) {
                    return Commerce.AsyncResult.createResolved({ canceled: true });
                }
                var getProductQueue = new Commerce.AsyncQueue();
                var scanResult;
                getProductQueue.enqueue(function () {
                    var getScanResultRequest = new Commerce.GetScanResultClientRequest(input, correlationId);
                    return getProductQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getScanResultRequest)))
                        .done(function (result) {
                        if (!result.canceled) {
                            scanResult = result.data.result;
                        }
                    });
                }).enqueue(function () {
                    if (scanResult.MaskTypeValue !== Commerce.Proxy.Entities.BarcodeMaskType.Item || Commerce.ObjectExtensions.isNullOrUndefined(scanResult.Product)) {
                        var productNotFoundError = new Commerce.Proxy.Entities.Error("string_1254");
                        productNotFoundError.errorTitleResourceId = "string_1253";
                        productNotFoundError.isUserError = true;
                        return Commerce.VoidAsyncResult.createRejected([productNotFoundError]);
                    }
                    var product = scanResult.Product;
                    var matchingSalesLines = [];
                    if (scanResult.Product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Master
                        || scanResult.Product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.KitMaster) {
                        matchingSalesLines = _this.salesLinesForDisplay().filter(function (line) {
                            return line.product.MasterProductId === product.RecordId;
                        });
                    }
                    else {
                        matchingSalesLines = _this.salesLinesForDisplay().filter(function (line) {
                            return line.product.RecordId === product.RecordId;
                        });
                    }
                    if (!Commerce.ArrayExtensions.hasElements(matchingSalesLines)) {
                        var productNotFoundError = new Commerce.Proxy.Entities.Error("string_1254");
                        productNotFoundError.errorTitleResourceId = "string_1253";
                        productNotFoundError.isUserError = true;
                        return Commerce.VoidAsyncResult.createRejected([productNotFoundError]);
                    }
                    var selectedSalesLinesByLineNumber = new Commerce.Dictionary();
                    if (Commerce.ArrayExtensions.hasElements(_this.selectedSalesLines())) {
                        _this.selectedSalesLines().forEach(function (salesLine) {
                            selectedSalesLinesByLineNumber.setItem(salesLine.LineNumber, salesLine);
                        });
                    }
                    var matchingUnselectedSalesLines = matchingSalesLines.filter(function (line) {
                        return !selectedSalesLinesByLineNumber.hasItem(line.LineNumber);
                    });
                    if (!Commerce.ArrayExtensions.hasElements(matchingUnselectedSalesLines)) {
                        var lineAlreadySelectedError = new Commerce.Proxy.Entities.Error("string_1256");
                        lineAlreadySelectedError.errorTitleResourceId = "string_1255";
                        lineAlreadySelectedError.isUserError = true;
                        return Commerce.VoidAsyncResult.createRejected([lineAlreadySelectedError]);
                    }
                    else if (matchingUnselectedSalesLines.length === 1) {
                        return Commerce.AsyncResult.createResolved(matchingUnselectedSalesLines[0]);
                    }
                    else {
                        return getProductQueue.cancelOn(_this._promptForSalesLineSelection(matchingUnselectedSalesLines))
                            .map(function (selectionResult) {
                            if (selectionResult.canceled) {
                                return null;
                            }
                            else {
                                return selectionResult.data;
                            }
                        });
                    }
                }).enqueue(function (lineToSelect) {
                    var selectedLines = _this.selectedSalesLines();
                    selectedLines.push(lineToSelect);
                    _this.selectedSalesLines(selectedLines);
                    _this._salesLineSelectionHandler(_this.selectedSalesLines());
                    return Commerce.VoidAsyncResult.createResolved();
                });
                return getProductQueue.run();
            };
            ReturnTransactionViewModel.prototype._promptForSalesLineSelection = function (salesLineOptions) {
                var activityContext = {
                    title: Commerce.ViewModelAdapter.getResourceString("string_1257"),
                    subtitle: Commerce.ViewModelAdapter.getResourceString("string_1258"),
                    allowMultipleLineSelection: false,
                    salesLineProductPairs: salesLineOptions
                        .map(function (line) {
                        return { salesLine: line, product: line.product };
                    })
                };
                var selectSalesLinesActivity = new Commerce.Activities.SelectSalesLinesActivity(activityContext);
                return selectSalesLinesActivity.execute()
                    .map(function () {
                    var activityResponse = selectSalesLinesActivity.response;
                    if (Commerce.ObjectExtensions.isNullOrUndefined(activityResponse) || !Commerce.ArrayExtensions.hasElements(activityResponse.selectedSalesLines)) {
                        return { canceled: true, data: undefined };
                    }
                    else {
                        var selectedSalesLineForDisplay = Commerce.ArrayExtensions.firstOrUndefined(salesLineOptions, function (line) {
                            return line.LineNumber === activityResponse.selectedSalesLines[0].LineNumber;
                        });
                        return { canceled: false, data: selectedSalesLineForDisplay };
                    }
                });
            };
            ReturnTransactionViewModel.prototype._searchSalesTransactionsAsync = function (receiptId) {
                var _this = this;
                if (Commerce.StringExtensions.isNullOrWhitespace(receiptId)) {
                    return Commerce.AsyncResult.createResolved({ canceled: true });
                }
                this.salesLinesForDisplay([]);
                this.selectedSalesOrder(null);
                this.selectedSalesLines([]);
                var searchSalesTransactionsQueue = new Commerce.AsyncQueue();
                searchSalesTransactionsQueue.enqueue(function () {
                    return _this.salesOrderManager.searchSalesTransactionsByReceiptIdAsync(receiptId);
                }).enqueue(function (salesOrders) {
                    if (_this._isRestrictCustomerOrderReturnsToOrderRecallOperationFeatureEnabled) {
                        var filteredOrders = salesOrders
                            .filter(function (order) { return order.TransactionTypeValue !== Commerce.Proxy.Entities.SalesTransactionType.CustomerOrder; });
                        if (filteredOrders.length !== salesOrders.length) {
                            _this._showRestrictCustomerOrderReturnsDialog();
                            salesOrders = filteredOrders;
                        }
                    }
                    if (!Commerce.ArrayExtensions.hasElements(salesOrders)) {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                    var getOrderDetailsQueue = new Commerce.AsyncQueue();
                    var salesOrder;
                    if (salesOrders.length > 1) {
                        getOrderDetailsQueue.enqueue(function () {
                            var stores = _this._getStoreList(salesOrders);
                            return getOrderDetailsQueue.cancelOn(_this._orderSelectionHandler(stores))
                                .done(function (selectionResult) {
                                if (!selectionResult.canceled) {
                                    salesOrder = selectionResult.data;
                                }
                            });
                        });
                    }
                    else {
                        salesOrder = salesOrders[0];
                    }
                    getOrderDetailsQueue.enqueue(function () {
                        return _this._getSalesOrderDetailsByTransactionId(salesOrder.Id);
                    });
                    return searchSalesTransactionsQueue.cancelOn(getOrderDetailsQueue.run());
                });
                return searchSalesTransactionsQueue.run();
            };
            ReturnTransactionViewModel.prototype._getReceiptIdAndSearchSalesTransactionsAsync = function () {
                var _this = this;
                var activity = new Commerce.Activities.GetSearchTextActivity({
                    title: Commerce.ViewModelAdapter.getResourceString("string_1205"),
                    subTitle: Commerce.StringExtensions.EMPTY,
                    searchText: this._searchText,
                    inputLabel: Commerce.ViewModelAdapter.getResourceString("string_1250")
                });
                var isCanceled;
                activity.responseHandler = function (response) {
                    return _this._searchSalesTransactionsAsync(response.searchText).done(function (searchResult) {
                        isCanceled = searchResult.canceled;
                    });
                };
                return activity.execute().map(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(activity.response)) {
                        isCanceled = true;
                    }
                    else {
                        isCanceled = false;
                        _this._searchText = activity.response.searchText;
                    }
                    return { canceled: isCanceled };
                });
            };
            ReturnTransactionViewModel.prototype._getSalesOrderDetailsByTransactionId = function (transactionId) {
                var _this = this;
                if (Commerce.StringExtensions.isNullOrWhitespace(transactionId)) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                var getSalesOrderDetailsQueue = new Commerce.AsyncQueue();
                getSalesOrderDetailsQueue.enqueue(function () {
                    return _this.salesOrderManager.getSalesOrderDetailsByTransactionIdAsync(transactionId, Commerce.Proxy.Entities.SearchLocation.All)
                        .done(function (order) {
                        _this.selectedSalesOrder(order);
                    });
                }).enqueue(function () {
                    return _this._prepareAndSetSalesLineDataFromOrder();
                });
                return getSalesOrderDetailsQueue.run();
            };
            ReturnTransactionViewModel.prototype._getStoreList = function (salesOrders) {
                var storeList = [];
                var storesRegisterList = {};
                var storeNameList = [];
                if (Commerce.ObjectExtensions.isNullOrUndefined(salesOrders)) {
                    return storeList;
                }
                for (var i = 0; i < salesOrders.length; i++) {
                    var storeName = salesOrders[i].StoreId;
                    if (Commerce.ObjectExtensions.isNullOrUndefined(storesRegisterList[storeName])) {
                        storesRegisterList[storeName] = [];
                        storeNameList.push(storeName);
                    }
                    storesRegisterList[storeName].push({ terminalId: salesOrders[i].TerminalId, salesOrder: salesOrders[i] });
                }
                storeNameList.sort(function (x, y) { return Commerce.StringExtensions.compare(x, y, true); });
                for (var n = 0; n < storeNameList.length; n++) {
                    var store = { storeName: storeNameList[n], registers: [] };
                    store.registers = storesRegisterList[storeNameList[n]].sort(function (x, y) {
                        return Commerce.StringExtensions.compare(x.terminalId, y.terminalId, true);
                    });
                    storeList.push(store);
                }
                return storeList;
            };
            ReturnTransactionViewModel.prototype._prepareAndSetSalesLineDataFromOrder = function () {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.selectedSalesOrder())) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                var salesOrder = this.selectedSalesOrder();
                var prepareAndSetSalesLineQueue = new Commerce.AsyncQueue();
                prepareAndSetSalesLineQueue.enqueue(function () {
                    var preTriggerOptions = {
                        cart: Commerce.Session.instance.cart,
                        originalTransaction: _this.selectedSalesOrder(),
                        shift: Commerce.Session.instance.Shift,
                        employee: Commerce.Session.instance.CurrentEmployee
                    };
                    return prepareAndSetSalesLineQueue.cancelOn(Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreConfirmReturnTransaction, preTriggerOptions));
                }).enqueue(function () {
                    var allSalesLinesInOrderReturned = true;
                    var salesLines = salesOrder.SalesLines;
                    var cart = Commerce.Session.instance.cart;
                    var filteredSalesLines = [];
                    for (var i = 0; i < salesLines.length; i++) {
                        var salesLine = salesLines[i];
                        var addToFilteredSalesLines = false;
                        if (!Commerce.Session.instance.isCartInProgress) {
                            addToFilteredSalesLines = true;
                        }
                        else {
                            addToFilteredSalesLines = true;
                            for (var j = 0; j < cart.CartLines.length; j++) {
                                var cartLine = cart.CartLines[j];
                                if ((salesOrder.Id === cartLine.ReturnTransactionId) && (salesLine.LineNumber === cartLine.ReturnLineNumber)) {
                                    addToFilteredSalesLines = false;
                                    allSalesLinesInOrderReturned = false;
                                    break;
                                }
                            }
                        }
                        if (addToFilteredSalesLines) {
                            if (salesLine.IsVoided || salesLine.IsGiftCardLine || salesLine.IsInvoiceLine) {
                                addToFilteredSalesLines = false;
                            }
                        }
                        if (addToFilteredSalesLines) {
                            var quantityThatCanBeReturned = salesLine.Quantity - salesLine.ReturnQuantity;
                            if (quantityThatCanBeReturned <= 0) {
                                addToFilteredSalesLines = false;
                            }
                        }
                        if (addToFilteredSalesLines) {
                            filteredSalesLines.push(salesLine);
                        }
                    }
                    if (filteredSalesLines.length > 0) {
                        var productIds_1 = [];
                        filteredSalesLines.forEach(function (x) { return productIds_1.push(x.ProductId); });
                        return _this.productManager.getByIdsAsync(productIds_1, 0)
                            .done(function (products) {
                            var transactionType = Commerce.ExtensibleEnumerations.ExtensibleSalesTransactionType.getByValue(salesOrder.TransactionTypeValue);
                            _this._updateSalesLinesForDisplay(filteredSalesLines, products, transactionType, salesOrder.CustomerOrderTypeValue, salesOrder.CurrencyCode);
                        });
                    }
                    else if (allSalesLinesInOrderReturned) {
                        return Commerce.AsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.RETURN_ALL_SALES_LINES_IN_ORDER_RETURN, null)]);
                    }
                    return Commerce.AsyncResult.createResolved();
                });
                return prepareAndSetSalesLineQueue.run();
            };
            ReturnTransactionViewModel.prototype._updateSalesLinesForDisplay = function (salesLines, products, transactionType, customerOrderType, currencyCode) {
                var productsByProductId = new Commerce.Dictionary();
                products.forEach(function (product) {
                    productsByProductId.setItem(product.RecordId, product);
                });
                var salesLinesForDisplay = salesLines.map(function (x) {
                    var salesLineForDisplay = new ViewModels.SalesLineForDisplay(x, productsByProductId.getItem(x.ListingId));
                    salesLineForDisplay.transactionType = transactionType;
                    salesLineForDisplay.customerOrderType = customerOrderType;
                    salesLineForDisplay.currencyCode = currencyCode;
                    salesLineForDisplay.currencyAmount = {
                        CurrencyCode: currencyCode,
                        ConvertedAmount: salesLineForDisplay.NetAmountWithAllInclusiveTax,
                        RoundedConvertedAmount: salesLineForDisplay.NetAmountWithAllInclusiveTax
                    };
                    salesLineForDisplay.Quantity = salesLineForDisplay.Quantity - salesLineForDisplay.ReturnQuantity;
                    return salesLineForDisplay;
                });
                this.salesLinesForDisplay(salesLinesForDisplay);
            };
            ReturnTransactionViewModel.prototype._sendMessageToExtensions = function (messageType, messageData) {
                this.extensionCommandViewModels.forEach(function (vm) {
                    vm.sendMessage(messageType, messageData);
                });
            };
            Object.defineProperty(ReturnTransactionViewModel.prototype, "_isRestrictCustomerOrderReturnsToOrderRecallOperationFeatureEnabled", {
                get: function () {
                    return Commerce.ApplicationSession.instance.featureStateContext
                        .isFeatureEnabled(Commerce.Client.Entities.FeatureNameEnum.RetailRestrictCustomerOrderReturnsToOrderRecallOperationFeature);
                },
                enumerable: true,
                configurable: true
            });
            ReturnTransactionViewModel.prototype._showRestrictCustomerOrderReturnsDialog = function () {
                var okButton = {
                    id: Commerce.Activities.DisplayMessageOperationIds.OK,
                    label: Commerce.ViewModelAdapter.getResourceString("string_75"),
                    isPrimary: true,
                    result: "OK_RESULT"
                };
                var dialogRequest = new Commerce.ShowMessageDialogClientRequest({
                    title: Commerce.ViewModelAdapter.getResourceString("string_1268"),
                    message: Commerce.ViewModelAdapter.getResourceString("string_1269"),
                    showCloseX: true,
                    button1: okButton,
                });
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(dialogRequest));
            };
            return ReturnTransactionViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.ReturnTransactionViewModel = ReturnTransactionViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var ReviewShiftTenderLinesViewModel = (function (_super) {
            __extends(ReviewShiftTenderLinesViewModel, _super);
            function ReviewShiftTenderLinesViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.selectionHandler)) {
                    throw Error("'options.selectionHandler' is required for ReviewShiftTenderLinesViewModel");
                }
                _this.tenderLineDisplays = ko.observableArray(_this.generateIShiftTenderLineInfoArray(options.tenderLines));
                _this.selectedLine = ko.observable(_this.tenderLineDisplays()[0]);
                _this.numberOfOfflineTransactions = ko.observable(options.numberOfOfflineTransactions);
                _this.isLineSelected = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedLine());
                });
                _this.shift = options.shift;
                _this.correlationId = options.correlationId;
                _this._selectionHandler = options.selectionHandler;
                _this._selectionInProgress = ko.observable(false);
                _this._isBusyWhen(_this._selectionInProgress);
                if (Commerce.Config.isPhone) {
                    _this.detailsExpanded = ko.observable(false);
                }
                else {
                    _this.detailsExpanded = ko.observable(true);
                }
                _this.isBankDropCollapsed = ko.observable(false);
                _this.isChangeCollapsed = ko.observable(false);
                _this.isDeclareTenderCollapsed = ko.observable(false);
                _this.isFloatingEntryCollapsed = ko.observable(false);
                _this.isRemoveTenderCollapsed = ko.observable(false);
                _this.isSafeDropCollapsed = ko.observable(false);
                _this.isStartingCollapsed = ko.observable(false);
                _this.isTenderedCollapsed = ko.observable(false);
                _this.isOfflineEnabled = ko.observable(Commerce.Utilities.OfflineHelper.isOfflineEnabled());
                return _this;
            }
            ReviewShiftTenderLinesViewModel.prototype.cancel = function () {
                this._selectionInProgress(false);
                this._selectionHandler.cancel();
                Commerce.ViewModelAdapter.navigateBack();
            };
            ReviewShiftTenderLinesViewModel.prototype.selectLine = function (selection) {
                if (!Commerce.ArrayExtensions.hasElements(selection)) {
                    this.selectedLine(null);
                }
                else {
                    this.selectedLine(selection[0]);
                }
            };
            ReviewShiftTenderLinesViewModel.prototype.saveAsync = function () {
                var _this = this;
                var isValid = !this.tenderLineDisplays().some(function (line) {
                    return _this._isLineOverridden(line) && Commerce.StringExtensions.isEmptyOrWhitespace(line.notes);
                });
                if (!isValid) {
                    var errors = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.SHIFT_TENDER_LINE_OVERRIDE_REQUIRES_NOTE)];
                    return Commerce.NotificationHandler.displayClientErrors(errors)
                        .map(function () { return void 0; });
                }
                var tenderLines = [];
                if (this._isAnyLineOverridden()) {
                    this.tenderLineDisplays().forEach(function (tenderLineInfo) {
                        tenderLines.push(tenderLineInfo.shiftTenderLine);
                    });
                }
                this._selectionInProgress(true);
                this._selectionHandler.select(tenderLines, this._onSelectionAttemptAsyncCallbackCanceled.bind(this), this._onSelectionAttemptAsyncCallbackFailed.bind(this));
                return Commerce.AsyncResult.createResolved();
            };
            ReviewShiftTenderLinesViewModel.prototype.toggleDetails = function () {
                this.detailsExpanded(!this.detailsExpanded());
            };
            ReviewShiftTenderLinesViewModel.prototype.toggleBankDropCollapsed = function () {
                this.isBankDropCollapsed(!this.isBankDropCollapsed());
            };
            ReviewShiftTenderLinesViewModel.prototype.toggleChangeCollapsed = function () {
                this.isChangeCollapsed(!this.isChangeCollapsed());
            };
            ReviewShiftTenderLinesViewModel.prototype.toggleDeclareTenderCollapsed = function () {
                this.isDeclareTenderCollapsed(!this.isDeclareTenderCollapsed());
            };
            ReviewShiftTenderLinesViewModel.prototype.toggleFloatingEntryCollapsed = function () {
                this.isFloatingEntryCollapsed(!this.isFloatingEntryCollapsed());
            };
            ReviewShiftTenderLinesViewModel.prototype.toggleRemoveTenderCollapsed = function () {
                this.isRemoveTenderCollapsed(!this.isRemoveTenderCollapsed());
            };
            ReviewShiftTenderLinesViewModel.prototype.toggleSafeDropCollapsed = function () {
                this.isSafeDropCollapsed(!this.isSafeDropCollapsed());
            };
            ReviewShiftTenderLinesViewModel.prototype.toggleStartingCollapsed = function () {
                this.isStartingCollapsed(!this.isStartingCollapsed());
            };
            ReviewShiftTenderLinesViewModel.prototype.toggleTenderedCollapsed = function () {
                this.isTenderedCollapsed(!this.isTenderedCollapsed());
            };
            ReviewShiftTenderLinesViewModel.prototype.generateIShiftTenderLineInfoArray = function (tenderLines) {
                var _this = this;
                var returnArray = [];
                if (!Commerce.ObjectExtensions.isNullOrUndefined(tenderLines)) {
                    tenderLines.map(function (tenderLine) {
                        tenderLine = _this.setOverriddenAmounts(tenderLine);
                        var bankDropAmount = Commerce.NumberExtensions.formatCurrency(tenderLine.BankDropAmountOfTenderCurrency, tenderLine.TenderCurrency);
                        var changeAmount = Commerce.NumberExtensions.formatCurrency(tenderLine.ChangeAmountOfTenderCurrency, tenderLine.TenderCurrency);
                        var declareTenderAmount = Commerce.NumberExtensions.formatCurrency(tenderLine.DeclareTenderAmountOfTenderCurrency, tenderLine.TenderCurrency);
                        var floatingEntryAmount = Commerce.NumberExtensions.formatCurrency(tenderLine.FloatingEntryAmountOfTenderCurrency, tenderLine.TenderCurrency);
                        var removeTenderAmount = Commerce.NumberExtensions.formatCurrency(tenderLine.RemoveTenderAmountOfTenderCurrency, tenderLine.TenderCurrency);
                        var safeDropAmount = Commerce.NumberExtensions.formatCurrency(tenderLine.SafeDropAmountOfTenderCurrency, tenderLine.TenderCurrency);
                        var startingAmount = Commerce.NumberExtensions.formatCurrency(tenderLine.StartingAmountOfTenderCurrency, tenderLine.TenderCurrency);
                        var tenderedAmount = Commerce.NumberExtensions.formatCurrency(tenderLine.TenderedAmountOfTenderCurrency, tenderLine.TenderCurrency);
                        var lineInfo = {
                            tenderType: tenderLine.TenderTypeName,
                            currencyCode: tenderLine.TenderCurrency,
                            cardType: tenderLine.CardTypeId,
                            differenceAmount: Commerce.NumberExtensions.formatCurrency(tenderLine.OverShortAmountOfTenderCurrency, tenderLine.TenderCurrency),
                            shiftTenderLine: tenderLine,
                            bankDropAmount: bankDropAmount,
                            changeAmount: changeAmount,
                            declareTenderAmount: declareTenderAmount,
                            floatingEntryAmount: floatingEntryAmount,
                            removeTenderAmount: removeTenderAmount,
                            safeDropAmount: safeDropAmount,
                            startingAmount: startingAmount,
                            tenderedAmount: tenderedAmount,
                            overriddenBankDropAmount: bankDropAmount,
                            overriddenChangeAmount: changeAmount,
                            overriddenDeclareTenderAmount: declareTenderAmount,
                            overriddenFloatingEntryAmount: floatingEntryAmount,
                            overriddenRemoveTenderAmount: removeTenderAmount,
                            overriddenSafeDropAmount: safeDropAmount,
                            overriddenStartingAmount: startingAmount,
                            overriddenTenderedAmount: tenderedAmount,
                            notes: Commerce.StringExtensions.EMPTY
                        };
                        returnArray.push(lineInfo);
                    });
                }
                return returnArray;
            };
            ReviewShiftTenderLinesViewModel.prototype.overrideBankDropAmountAsync = function () {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.selectedLine())) {
                    return this._overrideAmountAsync("string_30609", this.selectedLine().overriddenBankDropAmount, this.selectedLine().currencyCode)
                        .done(function (newAmount) {
                        _this.selectedLine().differenceAmount =
                            _this.calculateUpdatedDifferenceAmount(Commerce.NumberExtensions.parseNumber(_this.selectedLine().overriddenBankDropAmount), newAmount);
                        _this.selectedLine().overriddenBankDropAmount = Commerce.NumberExtensions.formatCurrency(newAmount, _this.selectedLine().currencyCode);
                        _this.selectedLine().shiftTenderLine.OverriddenBankDropAmountInTenderedCurrency = newAmount;
                        _this._refresh();
                    });
                }
                else {
                    return Commerce.AsyncResult.createResolved();
                }
            };
            ReviewShiftTenderLinesViewModel.prototype.overrideChangeAmountAsync = function () {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.selectedLine())) {
                    return this._overrideAmountAsync("string_30611", this.selectedLine().overriddenChangeAmount, this.selectedLine().currencyCode)
                        .done(function (newAmount) {
                        _this.selectedLine().differenceAmount =
                            _this.calculateUpdatedDifferenceAmount(Commerce.NumberExtensions.parseNumber(_this.selectedLine().overriddenChangeAmount), newAmount);
                        _this.selectedLine().overriddenChangeAmount = Commerce.NumberExtensions.formatCurrency(newAmount, _this.selectedLine().currencyCode);
                        _this.selectedLine().shiftTenderLine.OverriddenChangeAmountInTenderedCurrency = newAmount;
                        _this._refresh();
                    });
                }
                else {
                    return Commerce.AsyncResult.createResolved();
                }
            };
            ReviewShiftTenderLinesViewModel.prototype.overrideDeclareTenderAmountAsync = function () {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.selectedLine())) {
                    return this._overrideAmountAsync("string_30613", this.selectedLine().overriddenDeclareTenderAmount, this.selectedLine().currencyCode)
                        .done(function (newAmount) {
                        _this.selectedLine().differenceAmount =
                            _this.calculateUpdatedDifferenceAmount(Commerce.NumberExtensions.parseNumber(_this.selectedLine().overriddenDeclareTenderAmount), newAmount);
                        _this.selectedLine().overriddenDeclareTenderAmount = Commerce.NumberExtensions.formatCurrency(newAmount, _this.selectedLine().currencyCode);
                        _this.selectedLine().shiftTenderLine.OverriddenDeclaredTenderAmountInTenderedCurrency = newAmount;
                        _this._refresh();
                    });
                }
                else {
                    return Commerce.AsyncResult.createResolved();
                }
            };
            ReviewShiftTenderLinesViewModel.prototype.overrideFloatingEntryAmountAsync = function () {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.selectedLine())) {
                    return this._overrideAmountAsync("string_30615", this.selectedLine().overriddenFloatingEntryAmount, this.selectedLine().currencyCode)
                        .done(function (newAmount) {
                        _this.selectedLine().differenceAmount = _this.calculateUpdatedDifferenceAmount(Commerce.NumberExtensions.parseNumber(_this.selectedLine().overriddenFloatingEntryAmount), newAmount, true);
                        _this.selectedLine().overriddenFloatingEntryAmount = Commerce.NumberExtensions.formatCurrency(newAmount, _this.selectedLine().currencyCode);
                        _this.selectedLine().shiftTenderLine.OverriddenFloatEntryAmountInTenderedCurrency = newAmount;
                        _this._refresh();
                    });
                }
                else {
                    return Commerce.AsyncResult.createResolved();
                }
            };
            ReviewShiftTenderLinesViewModel.prototype.overrideRemoveTenderAmountAsync = function () {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.selectedLine())) {
                    return this._overrideAmountAsync("string_30617", this.selectedLine().overriddenRemoveTenderAmount, this.selectedLine().currencyCode)
                        .done(function (newAmount) {
                        _this.selectedLine().differenceAmount =
                            _this.calculateUpdatedDifferenceAmount(Commerce.NumberExtensions.parseNumber(_this.selectedLine().overriddenRemoveTenderAmount), newAmount);
                        _this.selectedLine().overriddenRemoveTenderAmount = Commerce.NumberExtensions.formatCurrency(newAmount, _this.selectedLine().currencyCode);
                        _this.selectedLine().shiftTenderLine.OverriddenRemovedTenderAmountInTenderedCurrency = newAmount;
                        _this._refresh();
                    });
                }
                else {
                    return Commerce.AsyncResult.createResolved();
                }
            };
            ReviewShiftTenderLinesViewModel.prototype.overrideSafeDropAmountAsync = function () {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.selectedLine())) {
                    return this._overrideAmountAsync("string_30619", this.selectedLine().overriddenSafeDropAmount, this.selectedLine().currencyCode)
                        .done(function (newAmount) {
                        _this.selectedLine().differenceAmount =
                            _this.calculateUpdatedDifferenceAmount(Commerce.NumberExtensions.parseNumber(_this.selectedLine().overriddenSafeDropAmount), newAmount);
                        _this.selectedLine().overriddenSafeDropAmount = Commerce.NumberExtensions.formatCurrency(newAmount, _this.selectedLine().currencyCode);
                        _this.selectedLine().shiftTenderLine.OverriddenSafeDropAmountInTenderedCurrency = newAmount;
                        _this._refresh();
                    });
                }
                else {
                    return Commerce.AsyncResult.createResolved();
                }
            };
            ReviewShiftTenderLinesViewModel.prototype.overrideStartingAmountAsync = function () {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.selectedLine())) {
                    return this._overrideAmountAsync("string_30621", this.selectedLine().overriddenStartingAmount, this.selectedLine().currencyCode)
                        .done(function (newAmount) {
                        _this.selectedLine().differenceAmount = _this.calculateUpdatedDifferenceAmount(Commerce.NumberExtensions.parseNumber(_this.selectedLine().overriddenStartingAmount), newAmount, true);
                        _this.selectedLine().overriddenStartingAmount = Commerce.NumberExtensions.formatCurrency(newAmount, _this.selectedLine().currencyCode);
                        _this.selectedLine().shiftTenderLine.OverriddenStartingAmountInTenderedCurrency = newAmount;
                        _this._refresh();
                    });
                }
                else {
                    return Commerce.AsyncResult.createResolved();
                }
            };
            ReviewShiftTenderLinesViewModel.prototype.overrideTenderedAmountAsync = function () {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.selectedLine())) {
                    return this._overrideAmountAsync("string_30623", this.selectedLine().overriddenTenderedAmount, this.selectedLine().currencyCode)
                        .done(function (newAmount) {
                        _this.selectedLine().differenceAmount = _this.calculateUpdatedDifferenceAmount(Commerce.NumberExtensions.parseNumber(_this.selectedLine().overriddenTenderedAmount), newAmount, true);
                        _this.selectedLine().overriddenTenderedAmount = Commerce.NumberExtensions.formatCurrency(newAmount, _this.selectedLine().currencyCode);
                        _this.selectedLine().shiftTenderLine.OverriddenTenderedAmountInTenderedCurrency = newAmount;
                        _this._refresh();
                    });
                }
                else {
                    return Commerce.AsyncResult.createResolved();
                }
            };
            ReviewShiftTenderLinesViewModel.prototype.calculateUpdatedDifferenceAmount = function (oldAmount, newAmount, isNegative) {
                if (isNegative === void 0) { isNegative = false; }
                if (oldAmount === newAmount) {
                    return this.selectedLine().differenceAmount;
                }
                var amountChange = newAmount - oldAmount;
                if (isNegative) {
                    amountChange = amountChange * -1;
                }
                var newDifferenceAmount = Commerce.NumberExtensions.parseNumber(this.selectedLine().differenceAmount) + amountChange;
                return Commerce.NumberExtensions.formatCurrency(newDifferenceAmount, this.selectedLine().currencyCode);
            };
            ReviewShiftTenderLinesViewModel.prototype.inputNoteAsync = function () {
                var _this = this;
                var request = new Commerce.StoreOperations.InputShiftTenderLineNoteClientRequest(this.selectedLine().notes);
                return this._isBusyUntil(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request)))
                    .done(function (result) {
                    if (!result.canceled) {
                        _this.selectedLine().notes = result.data.result;
                        _this.selectedLine().shiftTenderLine.Notes = result.data.result;
                        _this.selectedLine(_this.selectedLine());
                    }
                });
            };
            ReviewShiftTenderLinesViewModel.prototype.setOverriddenAmounts = function (tenderLine) {
                tenderLine.OverriddenBankDropAmountInTenderedCurrency = tenderLine.BankDropAmountOfTenderCurrency;
                tenderLine.OverriddenChangeAmountInTenderedCurrency = tenderLine.ChangeAmountOfTenderCurrency;
                tenderLine.OverriddenDeclaredTenderAmountInTenderedCurrency = tenderLine.DeclareTenderAmountOfTenderCurrency;
                tenderLine.OverriddenFloatEntryAmountInTenderedCurrency = tenderLine.FloatingEntryAmountOfTenderCurrency;
                tenderLine.OverriddenRemovedTenderAmountInTenderedCurrency = tenderLine.RemoveTenderAmountOfTenderCurrency;
                tenderLine.OverriddenSafeDropAmountInTenderedCurrency = tenderLine.SafeDropAmountOfTenderCurrency;
                tenderLine.OverriddenStartingAmountInTenderedCurrency = tenderLine.StartingAmountOfTenderCurrency;
                tenderLine.OverriddenTenderedAmountInTenderedCurrency = tenderLine.TenderedAmountOfTenderCurrency;
                return tenderLine;
            };
            ReviewShiftTenderLinesViewModel.prototype.onHidden = function () {
                this._selectionInProgress(false);
                this._selectionHandler.cancel();
            };
            ReviewShiftTenderLinesViewModel.prototype._isLineOverridden = function (tenderLine) {
                return tenderLine.overriddenBankDropAmount !== tenderLine.bankDropAmount
                    || tenderLine.overriddenChangeAmount !== tenderLine.changeAmount
                    || tenderLine.overriddenDeclareTenderAmount !== tenderLine.declareTenderAmount
                    || tenderLine.overriddenFloatingEntryAmount !== tenderLine.floatingEntryAmount
                    || tenderLine.overriddenRemoveTenderAmount !== tenderLine.removeTenderAmount
                    || tenderLine.overriddenSafeDropAmount !== tenderLine.safeDropAmount
                    || tenderLine.overriddenStartingAmount !== tenderLine.startingAmount
                    || tenderLine.overriddenTenderedAmount !== tenderLine.tenderedAmount;
            };
            ReviewShiftTenderLinesViewModel.prototype._overrideAmountAsync = function (amountName, valueToOverride, currencyCode) {
                var request = new Commerce.StoreOperations.OverrideShiftTenderLineAmountClientRequest(valueToOverride, Commerce.ViewModelAdapter.getResourceString(amountName), currencyCode, this.correlationId);
                return this._isBusyUntil(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request)))
                    .map(function (result) {
                    if (!result.canceled) {
                        return result.data.result;
                    }
                    return Commerce.NumberExtensions.parseNumber(valueToOverride);
                });
            };
            ReviewShiftTenderLinesViewModel.prototype._isAnyLineOverridden = function () {
                var _this = this;
                return this.tenderLineDisplays().some(function (line) {
                    return _this._isLineOverridden(line);
                });
            };
            ReviewShiftTenderLinesViewModel.prototype._refresh = function () {
                this.tenderLineDisplays(this.tenderLineDisplays());
                this.selectedLine(this.selectedLine());
            };
            ReviewShiftTenderLinesViewModel.prototype._onSelectionAttemptAsyncCallbackCanceled = function () {
                this._selectionInProgress(false);
            };
            ReviewShiftTenderLinesViewModel.prototype._onSelectionAttemptAsyncCallbackFailed = function (errors) {
                this._selectionInProgress(false);
                Commerce.NotificationHandler.displayClientErrors(errors);
            };
            return ReviewShiftTenderLinesViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.ReviewShiftTenderLinesViewModel = ReviewShiftTenderLinesViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var SalesInvoiceDetailsViewModel = (function (_super) {
            __extends(SalesInvoiceDetailsViewModel, _super);
            function SalesInvoiceDetailsViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                _this.cartLinesForDisplay = ko.observableArray([]);
                _this._selectedCartLines = ko.observableArray([]);
                _this.handleSelection = _this.onSelectionChanged.bind(_this);
                _this.returnSalesInvoiceDisabled = ko.computed(function () {
                    return !Commerce.ArrayExtensions.hasElements(_this._selectedCartLines());
                }, _this);
                _this._returnHasCompleted = false;
                _this._salesInvoice = options.salesInvoice;
                _this._isExtensionCommandViewModelBusy = ko.observable(false);
                if (Commerce.ObjectExtensions.isNullOrUndefined(SalesInvoiceDetailsViewModel._viewExtensionsManager)) {
                    _this._extensionCommandViewModels = [];
                }
                else {
                    _this._extensionCommandViewModels = SalesInvoiceDetailsViewModel._viewExtensionsManager.getAppBarCommands()
                        .map(function (command) {
                        var commandVM = new ViewModels.CommandViewModel(command);
                        commandVM.addMessageHandler("IsProcessingChanged", function (isProcessing) {
                            if (isProcessing) {
                                _this._isExtensionCommandViewModelBusy(true);
                            }
                            else {
                                var isAnyCommandProcessing = _this._extensionCommandViewModels.some(function (vm) {
                                    return vm.isProcessing;
                                });
                                _this._isExtensionCommandViewModelBusy(isAnyCommandProcessing);
                            }
                        });
                        return commandVM;
                    });
                    _this._isBusyWhen(_this._isExtensionCommandViewModelBusy);
                    _this._subscribeExtensionsToChanges();
                }
                return _this;
            }
            Object.defineProperty(SalesInvoiceDetailsViewModel.prototype, "extensionCommandViewModels", {
                get: function () {
                    return this._extensionCommandViewModels;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SalesInvoiceDetailsViewModel, "viewExtensionManager", {
                set: function (manager) {
                    SalesInvoiceDetailsViewModel._viewExtensionsManager = manager;
                },
                enumerable: true,
                configurable: true
            });
            SalesInvoiceDetailsViewModel.prototype.loadAsync = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var invoiceId = this._salesInvoice.Id;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var request = new Commerce.Cart.RecallSalesInvoiceServiceRequest(correlationId, invoiceId);
                    return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(_this.context.runtime.executeAsync(request)));
                }).enqueue(function (result) {
                    return _this._createCartLinesDisplayForReturn(result.data.cart)
                        .done(function (displayResult) {
                        _this.cartLinesForDisplay(displayResult);
                    });
                }).enqueue(function () {
                    var nonReturnedLines = Commerce.Session.instance.cart.CartLines.map(function (cartLine) {
                        return { LineId: cartLine.LineId, Quantity: 0 };
                    });
                    return _this.cartManager.updateCartLinesOnCartAsync(nonReturnedLines);
                });
                return this._isBusyUntil(asyncQueue.run())
                    .always(function () {
                    var commandState = {
                        invoice: _this._salesInvoice,
                        invoiceLines: _this._mapCartLinesForDisplayToSalesLines(_this.cartLinesForDisplay()),
                        products: _this.cartLinesForDisplay().map(function (cartLine) {
                            return Commerce.Session.instance.getFromProductsInCartCache(cartLine.ProductId);
                        })
                    };
                    _this.extensionCommandViewModels.forEach(function (vm) {
                        vm.sendMessage("Initialize", commandState);
                    });
                });
            };
            SalesInvoiceDetailsViewModel.prototype.returnCartLinesAsync = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var request = new Commerce.SalesOrders.ReturnInvoicedSalesLinesClientRequest(correlationId, _this._selectedCartLines());
                    return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(_this.context.runtime.executeAsync(request)));
                });
                return this._isBusyUntil(asyncQueue.run()).done(function (result) {
                    if (!result.canceled) {
                        _this._returnHasCompleted = true;
                        Commerce.ViewModelAdapter.navigate("CartView");
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            SalesInvoiceDetailsViewModel.prototype.onSelectionChanged = function (selectedLines) {
                this._selectedCartLines(selectedLines);
            };
            SalesInvoiceDetailsViewModel.prototype.onHidden = function () {
                if (!this._returnHasCompleted) {
                    Commerce.Session.instance.clearCart();
                }
            };
            SalesInvoiceDetailsViewModel.prototype._subscribeExtensionsToChanges = function () {
                var _this = this;
                this._selectedCartLines.subscribe(function (cartLines) {
                    if (Commerce.ArrayExtensions.hasElements(_this._selectedCartLines())) {
                        _this._sendMessageToExtensions("InvoiceLinesSelected", {
                            invoiceLines: _this._mapCartLinesForDisplayToSalesLines(cartLines)
                        });
                    }
                    else {
                        _this._sendMessageToExtensions("InvoiceLineSelectionCleared", undefined);
                    }
                });
            };
            SalesInvoiceDetailsViewModel.prototype._sendMessageToExtensions = function (messageType, messageData) {
                this.extensionCommandViewModels.forEach(function (vm) {
                    vm.sendMessage(messageType, messageData);
                });
            };
            SalesInvoiceDetailsViewModel.prototype._mapCartLinesForDisplayToSalesLines = function (cartLines) {
                var salesLines = cartLines
                    .map(function (cartLine) {
                    var salesLine = new Commerce.Proxy.Entities.SalesLineClass();
                    Object.keys(cartLine).map(function (propertyName) {
                        if (salesLine.hasOwnProperty(propertyName)) {
                            salesLine[propertyName] = Commerce.ObjectExtensions.clone(cartLine[propertyName]);
                        }
                    });
                    salesLine.WarehouseLocation = cartLine.WarehouseId;
                    salesLine.ElectronicDeliveryEmailAddress = cartLine.ElectronicDeliveryEmail;
                    return salesLine;
                });
                return salesLines;
            };
            SalesInvoiceDetailsViewModel.prototype._createCartLinesDisplayForReturn = function (cart) {
                var productDictionary = new Commerce.Dictionary();
                var hasReturnableQuantities = cart.CartLines.some(function (cartLine) {
                    return cartLine.QuantityReturnable < 0;
                });
                if (!hasReturnableQuantities) {
                    return Commerce.AsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.RETURN_ALL_SALES_LINES_IN_SALES_INVOICE_RETURN)]);
                }
                else {
                    var productIdsNotInCart_1 = [];
                    cart.CartLines.forEach(function (cartLine) {
                        var product = Commerce.Session.instance.getFromProductsInCartCache(cartLine.ProductId);
                        if (Commerce.ObjectExtensions.isNullOrUndefined(product)) {
                            productIdsNotInCart_1.push(cartLine.ProductId);
                        }
                        else {
                            productDictionary.setItem(product.RecordId, product);
                        }
                    });
                    return Commerce.CustomerOrderHelper.createSimpleProductDictionaryFromProductIds(productIdsNotInCart_1, productDictionary)
                        .map(function () {
                        return cart.CartLines.filter(function (cartLine) {
                            return cartLine.QuantityReturnable < 0;
                        }).map(function (cartLine) {
                            return new Commerce.Proxy.Entities.CartLineForDisplay(cartLine, productDictionary.getItem(cartLine.ProductId));
                        });
                    });
                }
            };
            return SalesInvoiceDetailsViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.SalesInvoiceDetailsViewModel = SalesInvoiceDetailsViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        var SalesInvoicesViewModel = (function (_super) {
            __extends(SalesInvoicesViewModel, _super);
            function SalesInvoicesViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this.salesInvoicesListColumns = _this._getSalesInvoicesListColumns();
                return _this;
            }
            Object.defineProperty(SalesInvoicesViewModel, "viewExtensionManager", {
                set: function (manager) {
                    SalesInvoicesViewModel._viewExtensionsManager = manager;
                },
                enumerable: true,
                configurable: true
            });
            SalesInvoicesViewModel.prototype.getSalesInvoicesBySalesIdAsync = function (salesId) {
                return this._isBusyUntil(this.salesOrderManager.getSalesInvoicesBySalesIdAsync(salesId));
            };
            SalesInvoicesViewModel.prototype._getSalesInvoicesListColumns = function () {
                var customColumns = Commerce.ObjectExtensions.isNullOrUndefined(SalesInvoicesViewModel._viewExtensionsManager) ?
                    [] :
                    SalesInvoicesViewModel._viewExtensionsManager.getSalesInvoicesListColumns();
                var defaultColumns = [
                    {
                        titleResx: "string_5002",
                        ratio: 45,
                        collapseOrder: 4,
                        minWidth: 150,
                        field: "Id"
                    }, {
                        titleResx: "string_5003",
                        ratio: 20,
                        collapseOrder: 3,
                        minWidth: 100,
                        field: "InvoiceDate",
                        converter: "Commerce.Core.Converter.DateWithoutTime"
                    }, {
                        titleResx: "string_5005",
                        ratio: 20,
                        collapseOrder: 2,
                        minWidth: 100,
                        field: "Amount",
                        converter: "Commerce.Core.Converter.PriceFormatter",
                        isRightAligned: true
                    }, {
                        titleResx: "string_5004",
                        ratio: 15,
                        collapseOrder: 1,
                        minWidth: 40,
                        field: "CurrencyCode"
                    }
                ];
                return Commerce.ArrayExtensions.hasElements(customColumns) ? customColumns : defaultColumns;
            };
            return SalesInvoicesViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.SalesInvoicesViewModel = SalesInvoicesViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var SalesOrderAttributeGroupViewModel = (function (_super) {
            __extends(SalesOrderAttributeGroupViewModel, _super);
            function SalesOrderAttributeGroupViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw new Error("Invalid options passed to the SalesOrderAttributeGroupViewModel constructor: options cannot be null or undefined.");
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.attributeGroup)) {
                    throw new Error("Invalid options passed to the SalesOrderAttributeGroupViewModel constructor: options.attributeGroup cannot be null or undefined.");
                }
                if (!Commerce.ObjectExtensions.isFunction(options.onEditAsync)) {
                    throw new Error("Invalid options passed to the SalesOrderAttributeGroupViewModel constructor: options.onEditAsync must be function.");
                }
                _this._attributeGroupDefinition = options.attributeGroup.attributeGroupDefinition;
                _this.isCollapsed = ko.observable(false);
                _this.attributeViewModels = [];
                if (Commerce.ArrayExtensions.hasElements(options.attributeGroup.attributeDefinitions)) {
                    options.attributeGroup.attributeDefinitions
                        .sort(function (a, b) {
                        return a.DisplayOrder - b.DisplayOrder;
                    })
                        .forEach(function (attribute) {
                        var salesOrderAttributeViewModelOptions = {
                            attributeDefinition: attribute
                        };
                        _this.attributeViewModels.push(new ViewModels.SalesOrderAttributeViewModel(_this.context, salesOrderAttributeViewModelOptions));
                    });
                }
                _this._onEditAsync = options.onEditAsync;
                return _this;
            }
            Object.defineProperty(SalesOrderAttributeGroupViewModel.prototype, "attributeGroupFriendlyName", {
                get: function () {
                    var friendlyName;
                    if (Commerce.ArrayExtensions.hasElements(this._attributeGroupDefinition.TranslationDetails)) {
                        friendlyName = this._attributeGroupDefinition.TranslationDetails[0].FriendlyName;
                    }
                    else {
                        friendlyName = this._attributeGroupDefinition.Name;
                    }
                    return friendlyName;
                },
                enumerable: true,
                configurable: true
            });
            SalesOrderAttributeGroupViewModel.prototype.editAsync = function () {
                var _this = this;
                var activityContext = {
                    attributeGroupName: this.attributeGroupFriendlyName,
                    attributesData: this.attributeViewModels.map(function (attributeViewModel) {
                        return { attributeDefinition: attributeViewModel.attributeDefinition, attributeValue: attributeViewModel.attributeValue() };
                    })
                };
                var activity = new Commerce.Activities.EditSalesOrderAttributesActivity(activityContext);
                activity.responseHandler = function (response) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(response) || !Commerce.ArrayExtensions.hasElements(response.attributeValues)) {
                        return Commerce.AsyncResult.createResolved();
                    }
                    return _this._onEditAsync(response.attributeValues).map(function (attributeValues) {
                        _this.updateAttributeViewModels(attributeValues);
                    });
                };
                return activity.execute();
            };
            SalesOrderAttributeGroupViewModel.prototype.toggleCollapsed = function () {
                this.isCollapsed(!this.isCollapsed());
            };
            SalesOrderAttributeGroupViewModel.prototype.updateAttributeViewModels = function (attributeValues) {
                var attributeValuesMap = this._getAttributeValuesMap(attributeValues);
                this.attributeViewModels.forEach(function (attributeViewModel) {
                    var newValue = Commerce.ObjectExtensions.isNullOrUndefined(attributeValuesMap[attributeViewModel.name])
                        ? null
                        : attributeValuesMap[attributeViewModel.name];
                    attributeViewModel.attributeValue(newValue);
                });
            };
            SalesOrderAttributeGroupViewModel.prototype._getAttributeValuesMap = function (attributeValues) {
                var resultMap = {};
                if (Commerce.ArrayExtensions.hasElements(attributeValues)) {
                    attributeValues.forEach(function (attributeValue) {
                        resultMap[attributeValue.Name] = attributeValue;
                    });
                }
                return resultMap;
            };
            return SalesOrderAttributeGroupViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.SalesOrderAttributeGroupViewModel = SalesOrderAttributeGroupViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var SalesOrderAttributeViewModel = (function (_super) {
            __extends(SalesOrderAttributeViewModel, _super);
            function SalesOrderAttributeViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw new Error("Invalid options passed to the SalesOrderAttributeViewModel constructor: options cannot be null or undefined.");
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.attributeDefinition)) {
                    throw new Error("Invalid options passed to the SalesOrderAttributeViewModel constructor: options.attributeDefinition cannot be null or undefined.");
                }
                _this.attributeDefinition = options.attributeDefinition;
                if (Commerce.ObjectExtensions.isNullOrUndefined(_this.attributeDefinition.DefaultValue)) {
                    _this.attributeDefinition.DefaultValue = new Commerce.Proxy.Entities.CommercePropertyValueClass();
                    _this.attributeDefinition.DefaultValue.StringValue = Commerce.StringExtensions.EMPTY;
                }
                _this.attributeValue = ko.observable(null);
                _this.editValue = ko.observable(null);
                _this.displayValue = ko.computed(function () {
                    var newValue = Commerce.ObjectExtensions.isNullOrUndefined(_this.attributeValue())
                        ? _this.attributeDefinition.DefaultValue.StringValue
                        : _this.attributeValue().TextValue;
                    _this.editValue(newValue);
                    return newValue;
                });
                return _this;
            }
            Object.defineProperty(SalesOrderAttributeViewModel.prototype, "attributeFriendlyName", {
                get: function () {
                    var friendlyName;
                    if (Commerce.ArrayExtensions.hasElements(this.attributeDefinition.TranslationDetails)) {
                        friendlyName = this.attributeDefinition.TranslationDetails[0].FriendlyName;
                    }
                    else {
                        friendlyName = this.attributeDefinition.Name;
                    }
                    return friendlyName;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SalesOrderAttributeViewModel.prototype, "name", {
                get: function () {
                    return this.attributeDefinition.Name;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SalesOrderAttributeViewModel.prototype, "isVisible", {
                get: function () {
                    return !this.attributeDefinition.IsHidden;
                },
                enumerable: true,
                configurable: true
            });
            SalesOrderAttributeViewModel.prototype.isModified = function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.attributeValue())) {
                    return this.editValue() !== this.attributeDefinition.DefaultValue.StringValue;
                }
                return this.editValue() !== this.attributeValue().TextValue;
            };
            SalesOrderAttributeViewModel.prototype.commitChanges = function () {
                var updatedAttributeValue;
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.attributeValue())) {
                    updatedAttributeValue = new Commerce.Proxy.Entities.AttributeTextValueClass();
                    updatedAttributeValue.Name = this.name;
                }
                else {
                    updatedAttributeValue = Commerce.ObjectExtensions.clone(this.attributeValue());
                }
                updatedAttributeValue.TextValue = this.editValue();
                this.attributeValue(updatedAttributeValue);
            };
            SalesOrderAttributeViewModel.prototype.cancelChanges = function () {
                this.editValue(this.displayValue());
            };
            return SalesOrderAttributeViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.SalesOrderAttributeViewModel = SalesOrderAttributeViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var SalesOrderAttributesMode;
        (function (SalesOrderAttributesMode) {
            SalesOrderAttributesMode[SalesOrderAttributesMode["None"] = 0] = "None";
            SalesOrderAttributesMode[SalesOrderAttributesMode["Header"] = 1] = "Header";
            SalesOrderAttributesMode[SalesOrderAttributesMode["Line"] = 2] = "Line";
        })(SalesOrderAttributesMode = ViewModels.SalesOrderAttributesMode || (ViewModels.SalesOrderAttributesMode = {}));
        var SalesOrderAttributesViewModel = (function (_super) {
            __extends(SalesOrderAttributesViewModel, _super);
            function SalesOrderAttributesViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw new Error("Invalid options passed to the SalesOrderAttributesViewModel constructor: options cannot be null or undefined.");
                }
                _this.headerAttributeGroupViewModels = ko.observableArray([]);
                _this.lineAttributeGroupViewModels = ko.observableArray([]);
                _this.viewMode = ko.observable(SalesOrderAttributesMode.None);
                _this.isLineSelected = ko.observable(false);
                _this.isLineAttributesModeConfigured = ko.computed(function () {
                    return Commerce.ArrayExtensions.hasElements(_this.lineAttributeGroupViewModels());
                });
                _this.isHeaderAttributesModeConfigured = ko.computed(function () {
                    return Commerce.ArrayExtensions.hasElements(_this.headerAttributeGroupViewModels());
                });
                return _this;
            }
            SalesOrderAttributesViewModel.prototype.loadAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return Commerce.ApplicationContext.Instance.salesOrderHeaderAttributeGroupDetailsAsync.value
                        .done(function (headerAttributeGroupDetails) {
                        _this._initializeAttributesGroupDetails(headerAttributeGroupDetails, _this.headerAttributeGroupViewModels, _this.saveHeaderAttributeGroup);
                    });
                }).enqueue(function () {
                    return Commerce.ApplicationContext.Instance.salesOrderLinesAttributeGroupDetailsAsync.value
                        .done(function (lineAttributeGroupDetails) {
                        _this._initializeAttributesGroupDetails(lineAttributeGroupDetails, _this.lineAttributeGroupViewModels, _this.saveLineAttributeGroup);
                    });
                });
                return asyncQueue.run().done(this._setDefaultViewMode.bind(this));
            };
            SalesOrderAttributesViewModel.prototype.switchToHeaderAttributesMode = function () {
                this.viewMode(SalesOrderAttributesMode.Header);
            };
            SalesOrderAttributesViewModel.prototype.switchToLineAttributesMode = function () {
                this.viewMode(SalesOrderAttributesMode.Line);
            };
            SalesOrderAttributesViewModel.prototype.updateCart = function (cart) {
                this._updateAttributeValues(this.headerAttributeGroupViewModels(), Commerce.ObjectExtensions.isNullOrUndefined(cart)
                    ? []
                    : cart.AttributeValues);
            };
            SalesOrderAttributesViewModel.prototype.updateCartLine = function (line) {
                var isLineNotNull = !Commerce.ObjectExtensions.isNullOrUndefined(line);
                this._cartLineId = isLineNotNull ? line.LineId : Commerce.StringExtensions.EMPTY;
                this._updateAttributeValues(this.lineAttributeGroupViewModels(), isLineNotNull
                    ? line.AttributeValues
                    : []);
                this.isLineSelected(isLineNotNull);
            };
            SalesOrderAttributesViewModel.prototype.saveHeaderAttributeGroup = function (attributeValues) {
                var request = new Commerce.SaveAttributesOnCartClientRequest(attributeValues, Commerce.LoggerHelper.getNewCorrelationId());
                return this._isBusyUntil(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request)))
                    .map(function (result) {
                    return result.canceled ? [] : result.data.result.AttributeValues;
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            SalesOrderAttributesViewModel.prototype.saveLineAttributeGroup = function (attributeValues) {
                var _this = this;
                if (Commerce.StringExtensions.isNullOrWhitespace(this._cartLineId)) {
                    return Commerce.AsyncResult.createResolved();
                }
                var attributesOnCartLine = {
                    cartLineId: this._cartLineId,
                    attributes: attributeValues
                };
                var request = new Commerce.SaveAttributesOnCartLinesClientRequest([attributesOnCartLine], Commerce.LoggerHelper.getNewCorrelationId());
                return this._isBusyUntil(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request)))
                    .map(function (result) {
                    if (result.canceled || !_this.isLineSelected) {
                        return [];
                    }
                    var selectedCartLine = Commerce.ArrayExtensions.firstOrUndefined(result.data.result.CartLines, function (cartLine) {
                        return cartLine.LineId === _this._cartLineId;
                    });
                    return Commerce.ObjectExtensions.isNullOrUndefined(selectedCartLine) ? [] : selectedCartLine.AttributeValues;
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            SalesOrderAttributesViewModel.prototype._initializeAttributesGroupDetails = function (attributeGroupDetails, attributeGroupViewModelsObservableVariable, saveAttributeGroupFunction) {
                var attributeGroupViewModels = this._createAttributeViewModels(attributeGroupDetails, saveAttributeGroupFunction);
                attributeGroupViewModelsObservableVariable(attributeGroupViewModels);
            };
            SalesOrderAttributesViewModel.prototype._setDefaultViewMode = function () {
                if (Commerce.ArrayExtensions.hasElements(this.lineAttributeGroupViewModels())) {
                    this.viewMode(SalesOrderAttributesMode.Line);
                }
                else if (Commerce.ArrayExtensions.hasElements(this.headerAttributeGroupViewModels())) {
                    this.viewMode(SalesOrderAttributesMode.Header);
                }
                else {
                    this.viewMode(SalesOrderAttributesMode.None);
                }
            };
            SalesOrderAttributesViewModel.prototype._createAttributeViewModels = function (attributeGroupDetails, onEditAsync) {
                var _this = this;
                if (!Commerce.ArrayExtensions.hasElements(attributeGroupDetails)) {
                    return [];
                }
                return attributeGroupDetails.map(function (attributeGroup) {
                    var salesOrderAttributeGroupViewModelOptions = {
                        attributeGroup: attributeGroup,
                        onEditAsync: onEditAsync.bind(_this)
                    };
                    return new ViewModels.SalesOrderAttributeGroupViewModel(_this.context, salesOrderAttributeGroupViewModelOptions);
                });
            };
            SalesOrderAttributesViewModel.prototype._updateAttributeValues = function (attributeGroupViewModels, attributeValues) {
                if (Commerce.ArrayExtensions.hasElements(attributeGroupViewModels)) {
                    attributeGroupViewModels.forEach(function (attributeGroupViewModel) {
                        attributeGroupViewModel.updateAttributeViewModels(attributeValues);
                    });
                }
            };
            return SalesOrderAttributesViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.SalesOrderAttributesViewModel = SalesOrderAttributesViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var SaleslineSelectorViewModel = (function (_super) {
            __extends(SaleslineSelectorViewModel, _super);
            function SaleslineSelectorViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw "Invalid options passed to the SaleslineSelectorViewModel constructor: options cannot be null or undefined.";
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.operationId)) {
                    throw Error("options.operationId' is required for selecting sales line. The operation Id is null or empty.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.cart)) {
                    throw "Invalid options passed to the SaleslineSelectorViewModel constructor: options.cart cannot be null or undefined.";
                }
                _this.cartLines = ko.observableArray(null);
                _this.selectedCartLines = ko.observableArray([]);
                _this.isNoLineSelected = ko.computed(function () { return !Commerce.ArrayExtensions.hasElements(_this.selectedCartLines()); });
                _this.cartLines(Commerce.CartHelper.GetNonVoidedCartLines(options.cart.CartLines));
                _this.operationId = options.operationId;
                return _this;
            }
            SaleslineSelectorViewModel.prototype.onSelectionChanged = function (cartLines) {
                this.selectedCartLines(cartLines);
            };
            SaleslineSelectorViewModel.prototype.selectSalesLinesAsync = function () {
                if (Commerce.ArrayExtensions.hasElements(this.selectedCartLines())) {
                    return this._changeDeliveryModeForSelectedLines(this.selectedCartLines(), this.operationId);
                }
                return Commerce.VoidAsyncResult.createResolved();
            };
            SaleslineSelectorViewModel.prototype.preSelectLines = function (viewModel) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.cartLines()) && this.cartLines().length === 1) {
                    viewModel.selectAll();
                }
            };
            SaleslineSelectorViewModel.prototype._changeDeliveryModeForSelectedLines = function (selectedCartLines, operation) {
                switch (operation) {
                    case Commerce.Operations.RetailOperation.ShipAllProducts:
                        return this._shipAllProducts();
                    case Commerce.Operations.RetailOperation.ShipSelectedProducts:
                        return this._shipSelectedProducts(selectedCartLines);
                    case Commerce.Operations.RetailOperation.PickupAllProducts:
                    case Commerce.Operations.RetailOperation.PickupSelectedProducts:
                        this._navigateToPickUpInStoreView(selectedCartLines);
                        return Commerce.VoidAsyncResult.createResolved();
                    case Commerce.Operations.RetailOperation.CarryoutAllProducts:
                    case Commerce.Operations.RetailOperation.CarryoutSelectedProducts:
                        return this._carryOutProducts(selectedCartLines);
                    default:
                        return Commerce.VoidAsyncResult.createResolved();
                }
            };
            SaleslineSelectorViewModel.prototype._shipAllProducts = function () {
                var operationShipAllOptions = {
                    shippingAddress: null,
                    correlationId: Commerce.LoggerHelper.getNewCorrelationId()
                };
                return Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.ShipAllProducts, operationShipAllOptions)
                    .done(function (result) {
                    if (!result.canceled) {
                        Commerce.ViewModelAdapter.navigate("CartView");
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            SaleslineSelectorViewModel.prototype._shipSelectedProducts = function (selectedCartLines) {
                var cart = Commerce.Session.instance.cart;
                if (Commerce.CartHelper.areAllCartLinesSelected(cart, selectedCartLines)) {
                    return this._shipAllProducts();
                }
                var operationShipSelectedOptions = {
                    cartLines: selectedCartLines,
                    shippingAddress: null,
                    fulfillmentStore: null,
                    correlationId: Commerce.LoggerHelper.getNewCorrelationId()
                };
                return Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.ShipSelectedProducts, operationShipSelectedOptions)
                    .done(function (result) {
                    if (!result.canceled) {
                        Commerce.ViewModelAdapter.navigate("CartView");
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            SaleslineSelectorViewModel.prototype._navigateToPickUpInStoreView = function (selectedCartLines) {
                var iPickUpInStoreViewControllerOptions = {
                    isForPickUp: true,
                    cartLines: selectedCartLines
                };
                Commerce.ViewModelAdapter.navigate("PickUpInStoreView", iPickUpInStoreViewControllerOptions);
            };
            SaleslineSelectorViewModel.prototype._carryOutProducts = function (selectedCartLines) {
                var request = new Commerce.CarryoutSelectedProductsOperationRequest(Commerce.LoggerHelper.getNewCorrelationId(), selectedCartLines);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                    .done(function (result) {
                    if (!result.canceled) {
                        Commerce.ViewModelAdapter.navigate("CartView");
                    }
                });
            };
            return SaleslineSelectorViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.SaleslineSelectorViewModel = SaleslineSelectorViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var SearchOrdersViewModel = (function (_super) {
            __extends(SearchOrdersViewModel, _super);
            function SearchOrdersViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                options = options || {};
                _this._orderSearchCriteria = options.searchCriteria;
                _this.selectedOrders = ko.observableArray([]);
                _this.selectedOrder = ko.computed(function () {
                    return !Commerce.ArrayExtensions.hasElements(_this.selectedOrders()) ? null : _this.selectedOrders()[0];
                });
                _this._orderIndexes = new Commerce.Dictionary();
                _this.reloadSalesOrdersCallback = ko.observable(function () { return; });
                _this.updateItemCallback = ko.observable(function () { return; });
                _this._setOrdersListColumns();
                _this._isExtensionCommandViewModelBusy = ko.observable(false);
                if (Commerce.ObjectExtensions.isNullOrUndefined(SearchOrdersViewModel._viewExtensionsManager)) {
                    _this._customSearchFilterDefinitions = [];
                    _this._extensionCommandViewModels = [];
                }
                else {
                    _this._customSearchFilterDefinitions = SearchOrdersViewModel._viewExtensionsManager.getCustomSearchFilterDefinitions();
                    _this._extensionCommandViewModels = SearchOrdersViewModel._viewExtensionsManager.getAppBarCommands()
                        .map(function (command) {
                        var commandVM = new ViewModels.CommandViewModel(command);
                        commandVM.addMessageHandler("IsProcessingChanged", function (isProcessing) {
                            if (isProcessing) {
                                _this._isExtensionCommandViewModelBusy(true);
                            }
                            else {
                                var isAnyCommandProcessing = _this._extensionCommandViewModels.some(function (vm) {
                                    return vm.isProcessing;
                                });
                                _this._isExtensionCommandViewModelBusy(isAnyCommandProcessing);
                            }
                        });
                        var commandState = {};
                        commandVM.sendMessage("Initialize", commandState);
                        return commandVM;
                    });
                    _this._isBusyWhen(_this._isExtensionCommandViewModelBusy);
                    _this._subscribeExtensionsToChanges();
                }
                _this._salesOrderLinesListIsLoading = ko.observable(false);
                _this._isBusyWhen(ko.computed(function () { return _this._salesOrderLinesListIsLoading(); }));
                _this.printPackingSlipDisabled = ko.computed(function () {
                    return _this._isSingleElementOperationDisabled(Commerce.Proxy.Entities.CustomerOrderOperation.PrintPackingSlip);
                }, _this);
                _this.createPackingSlipDisabled = ko.computed(function () {
                    return _this._isSingleElementOperationDisabled(Commerce.Proxy.Entities.CustomerOrderOperation.CreatePackingSlip);
                }, _this);
                _this.createPickingListDisabled = ko.computed(function () {
                    return _this._isSingleElementOperationDisabled(Commerce.Proxy.Entities.CustomerOrderOperation.CreatePickingList);
                }, _this);
                _this.pickUpDisabled = ko.computed(function () {
                    return _this._isSingleElementOperationDisabled(Commerce.Proxy.Entities.CustomerOrderOperation.PickUpFromStore);
                }, _this);
                _this.cancelOrderDisabled = ko.computed(function () {
                    return _this._isSingleElementOperationDisabled(Commerce.Proxy.Entities.CustomerOrderOperation.Cancel);
                }, _this);
                _this.editOrderDisabled = ko.computed(function () {
                    return _this._isSingleElementOperationDisabled(Commerce.Proxy.Entities.CustomerOrderOperation.Edit);
                }, _this);
                _this.salesOrderReturnDisabled = ko.computed(function () {
                    return _this._multiElementOperationDisabled(Commerce.Proxy.Entities.CustomerOrderOperation.Return);
                }, _this);
                _this.pickingAndPackingDisabled = ko.computed(function () {
                    return _this.printPackingSlipDisabled() && _this.createPackingSlipDisabled() && _this.createPickingListDisabled() && _this.pickUpDisabled();
                }, _this);
                return _this;
            }
            Object.defineProperty(SearchOrdersViewModel.prototype, "extensionCommandViewModels", {
                get: function () {
                    return this._extensionCommandViewModels;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SearchOrdersViewModel, "viewExtensionManager", {
                set: function (manager) {
                    SearchOrdersViewModel._viewExtensionsManager = manager;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SearchOrdersViewModel.prototype, "hasSearchCriteria", {
                get: function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(this._orderSearchCriteria);
                },
                enumerable: true,
                configurable: true
            });
            SearchOrdersViewModel.isQuote = function (salesOrder) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(salesOrder)) {
                    return false;
                }
                return salesOrder.CustomerOrderTypeValue === Commerce.Proxy.Entities.CustomerOrderType.Quote;
            };
            SearchOrdersViewModel.prototype.createPickingList = function (salesOrder) {
                var _this = this;
                var options = {
                    operationType: Commerce.Proxy.Entities.CustomerOrderOperation.CreatePickingList,
                    parameters: { CreatePickingListParameter: { SalesId: salesOrder.SalesId } }
                };
                return this._handleAsyncResult(this.operationsManager.runOperation(Commerce.Operations.RetailOperation.EditCustomerOrder, options))
                    .done(function () {
                    _this._updateSelectedOrderStatus(Commerce.Proxy.Entities.SalesStatus.Created, Commerce.Proxy.Entities.DocumentStatus.PickingList);
                });
            };
            SearchOrdersViewModel.prototype.createPackingSlip = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var salesOrder = _this.selectedOrder().salesOrder;
                    var options = {
                        operationType: Commerce.Proxy.Entities.CustomerOrderOperation.CreatePackingSlip,
                        parameters: { CreatePackingSlipParameter: { SalesOrder: salesOrder } }
                    };
                    return _this._handleAsyncResult(_this.operationsManager.runOperation(Commerce.Operations.RetailOperation.EditCustomerOrder, options));
                }).enqueue(function (result) {
                    if (!result.canceled) {
                        _this._updateSelectedOrderStatus(Commerce.Proxy.Entities.SalesStatus.Delivered, Commerce.Proxy.Entities.DocumentStatus.PackingSlip);
                        return Commerce.ViewModelAdapter.displayMessage("string_4545");
                    }
                    else {
                        return Commerce.AsyncResult.createResolved();
                    }
                });
                return asyncQueue.run().map(function () { return void 0; });
            };
            SearchOrdersViewModel.prototype.printPackingSlipAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return _this.salesOrderManager.getReceiptsForPrintAsync(_this.selectedOrder().salesOrder.SalesId, true, Commerce.Proxy.Entities.ReceiptType.PackingSlip, true, null, null, false, true, Commerce.ApplicationContext.Instance.hardwareProfile.ProfileId);
                }).enqueue(function (receipts) {
                    var activity = new Commerce.Activities.PrintReceiptActivity({ receipts: receipts });
                    return activity.execute();
                });
                return this._handleAsyncResult(asyncQueue.run(), "string_1821").map(function () { return void 0; });
            };
            SearchOrdersViewModel.prototype.recallCustomerOrder = function (salesId, recallType) {
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                switch (recallType) {
                    case Commerce.Proxy.Entities.CustomerOrderRecallType.OrderRecall:
                        var recallOrderServiceRequest = new Commerce.RecallOrderServiceRequest(correlationId, salesId);
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(recallOrderServiceRequest));
                    case Commerce.Proxy.Entities.CustomerOrderRecallType.QuoteRecall:
                        return this.cartManager.recallCustomerQuote(salesId);
                    default:
                        break;
                }
                Commerce.RetailLogger.viewModelSearchOrdersInvalidCustomerOrderRecallType(correlationId, recallType);
                var error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.APPLICATION_ERROR);
                return Commerce.VoidAsyncResult.createRejected([error]);
            };
            SearchOrdersViewModel.prototype.cancelCustomerOrder = function (salesOrder) {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                if (Commerce.ObjectExtensions.isNullOrUndefined(salesOrder)) {
                    return this._createSalesOrderNotProvidedResult();
                }
                if (salesOrder.StatusValue !== Commerce.Proxy.Entities.SalesStatus.Created) {
                    var error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.ORDER_CANNOT_BE_CANCELED);
                    return Commerce.VoidAsyncResult.createRejected([error]);
                }
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return _this.setCustomerOrderMode(Commerce.Proxy.Entities.CustomerOrderMode.Cancellation, Commerce.Proxy.Entities.CustomerOrderOperation.Cancel, salesOrder.SalesId);
                }).enqueue(function () {
                    return _this._editCancellationCharge(correlationId);
                });
                return this._handleAsyncResult(asyncQueue.run());
            };
            SearchOrdersViewModel.prototype.recallCustomerOrderOrQuoteForEdition = function (salesOrder) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(salesOrder)) {
                    return this._createSalesOrderNotProvidedResult();
                }
                var documentStatus = Commerce.Proxy.Entities.SalesOrderWrapper.convertDocumentToSalesStatus(salesOrder.DocumentStatusValue);
                if ((documentStatus !== Commerce.Proxy.Entities.SalesStatus.Created && salesOrder.StatusValue !== Commerce.Proxy.Entities.SalesStatus.Created) ||
                    !Commerce.ExtensibleEnumerations.ExtensibleTransactionType.CustomerOrder.equals(salesOrder.TransactionTypeValue)) {
                    var error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.ORDER_CANNOT_BE_EDITED);
                    return Commerce.VoidAsyncResult.createRejected([error]);
                }
                var editMode = SearchOrdersViewModel.isQuote(salesOrder)
                    ? Commerce.Proxy.Entities.CustomerOrderMode.QuoteCreateOrEdit
                    : Commerce.Proxy.Entities.CustomerOrderMode.CustomerOrderCreateOrEdit;
                var setCustomerOrderModeResult = this.setCustomerOrderMode(editMode, Commerce.Proxy.Entities.CustomerOrderOperation.Edit, salesOrder.SalesId).map(function () { return void 0; });
                return this._handleAsyncResult(setCustomerOrderModeResult);
            };
            SearchOrdersViewModel.prototype.setCustomerOrderMode = function (customerOrderMode, operationId, salesId) {
                var options = {
                    operationType: operationId,
                    parameters: { UpdateParameter: { CustomerOrderModeValue: customerOrderMode, salesId: salesId } }
                };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.EditCustomerOrder, options);
            };
            SearchOrdersViewModel.prototype.performSalesOrderSearch = function () {
                var _this = this;
                var orderSearchQueue = new Commerce.AsyncQueue();
                orderSearchQueue.enqueue(function () {
                    var options = { orderSearchCriteria: _this._orderSearchCriteria };
                    return orderSearchQueue.cancelOn(Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreSearchOrders, options));
                }).enqueue(function (triggerResult) {
                    var refiners = Commerce.OrderSearchCriteriaConverter.getRefiners(triggerResult.data.orderSearchCriteria, _this._customSearchFilterDefinitions);
                    var getRefinerValuesRequest = new Commerce.Refiners.GetRefinerValuesClientRequest(refiners, "string_4198", true, Commerce.ErrorTypeEnum.INVALID_SEARCH_CRITERIA);
                    return orderSearchQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getRefinerValuesRequest))
                        .done(function (result) {
                        if (!result.canceled) {
                            _this._orderSearchCriteria = Commerce.OrderSearchCriteriaConverter.getOrderSearchCriteria(result.data.refiners);
                            _this.reloadSalesOrdersCallback()();
                        }
                    }));
                });
                return orderSearchQueue.run().fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            SearchOrdersViewModel.prototype.getSalesOrdersAsync = function (pageSize, skip) {
                var _this = this;
                var asyncResult = new Commerce.AsyncResult();
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._orderSearchCriteria)) {
                    asyncResult.resolve([]);
                }
                else if (Commerce.ApplicationSession.instance.featureStateContext.isFeatureEnabled(Commerce.Client.Entities.FeatureNameEnum.AllowPartialOrderEditingFeature)) {
                    this.salesOrderManager.getPagedOrderContextualOperationsMaps(this._orderSearchCriteria, pageSize, skip)
                        .done(function (orderOperationsMap) {
                        if (skip === 0) {
                            _this._orderIndexes.clear();
                        }
                        orderOperationsMap.forEach(function (value, index) {
                            _this._orderIndexes.setItem(_this._getOrderIndexKey(orderOperationsMap[index].SalesOrder), index + skip);
                        });
                        asyncResult.resolve(orderOperationsMap.map(function (operationsMap) {
                            return new Commerce.Proxy.Entities.SalesOrderContextualOperationsWrapper(operationsMap);
                        }));
                    }).fail(function (errors) {
                        asyncResult.reject(errors);
                    });
                }
                else {
                    this.salesOrderManager.getPagedOrders(this._orderSearchCriteria, pageSize, skip)
                        .done(function (orders) {
                        if (skip === 0) {
                            _this._orderIndexes.clear();
                        }
                        orders.forEach(function (value, index) {
                            _this._orderIndexes.setItem(_this._getOrderIndexKey(orders[index]), index + skip);
                        });
                        asyncResult.resolve(orders.map(function (order) {
                            return new Commerce.Proxy.Entities.SalesOrderWrapper(order);
                        }));
                    }).fail(function (errors) {
                        asyncResult.reject(errors);
                    });
                }
                return asyncResult;
            };
            SearchOrdersViewModel.prototype.displayError = function (errors, titleResourceId) {
                var _this = this;
                if (titleResourceId === void 0) { titleResourceId = Commerce.StringExtensions.EMPTY; }
                Commerce.NotificationHandler.displayClientErrors(errors, titleResourceId).done(function () {
                    if (Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.SERVICE_UNAVAILABLE) || Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.SERVER_TIMEOUT)) {
                        _this.reloadSalesOrdersCallback();
                    }
                });
            };
            Object.defineProperty(SearchOrdersViewModel.prototype, "salesOrderLinesListIsLoading", {
                get: function () {
                    return this._salesOrderLinesListIsLoading;
                },
                enumerable: true,
                configurable: true
            });
            SearchOrdersViewModel.prototype.pickUpAsync = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var selectSalesLinesForPickUpClientRequest = new Commerce.SelectSalesLinesForPickUpClientRequest(correlationId, _this.selectedOrder().salesOrder.SalesId);
                    return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(selectSalesLinesForPickUpClientRequest)));
                }).enqueue(function (result) {
                    return asyncQueue.cancelOn(_this._manuallyOverrideDeposit(correlationId, result.data.result));
                });
                return this._isBusyUntil(asyncQueue.run());
            };
            SearchOrdersViewModel._isOperationEnabled = function (operation, orderWrapper) {
                if (orderWrapper instanceof Commerce.Proxy.Entities.SalesOrderContextualOperationsWrapper) {
                    return Commerce.ArrayExtensions.hasElement(orderWrapper.applicableOperations, operation);
                }
                return Commerce.CustomerOrderHelper.isOrderAvailableForOperation(orderWrapper.salesOrder, operation);
            };
            SearchOrdersViewModel.prototype._isSingleElementOperationDisabled = function (operationId) {
                var multipleOrdersSelected = Commerce.ArrayExtensions.countElements(this.selectedOrders()) > 1;
                var selectedOrder = this.selectedOrder();
                return Commerce.ObjectExtensions.isNullOrUndefined(selectedOrder)
                    || multipleOrdersSelected
                    || !SearchOrdersViewModel._isOperationEnabled(operationId, selectedOrder);
            };
            SearchOrdersViewModel.prototype._multiElementOperationDisabled = function (operationId) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.selectedOrder())) {
                    return true;
                }
                var customerId = this.selectedOrder().salesOrder.CustomerId;
                var loyaltyId = this.selectedOrder().salesOrder.LoyaltyCardId;
                return this.selectedOrders()
                    .some(function (wrapper) {
                    return (wrapper.salesOrder.CustomerId !== customerId)
                        || (wrapper.salesOrder.LoyaltyCardId !== loyaltyId)
                        || (!SearchOrdersViewModel._isOperationEnabled(operationId, wrapper));
                });
            };
            SearchOrdersViewModel.prototype._manuallyOverrideDeposit = function (correlationId, cart) {
                var needDepositOverrideAction = Commerce.CustomerOrderHelper.shouldWarnForDepositOverrideActionOnPickup(cart);
                if (needDepositOverrideAction) {
                    var asyncQueue_3 = new Commerce.AsyncQueue();
                    asyncQueue_3.enqueue(function () {
                        var displayMessageResult = Commerce.ViewModelAdapter.displayMessage(Commerce.ErrorTypeEnum.CUSTOMERORDER_MANUAL_DEPOSIT_REQUIRED, Commerce.MessageType.Info, Commerce.MessageBoxButtons.Default);
                        return displayMessageResult;
                    }).enqueue(function () {
                        var depositOverrideOperationRequest = new Commerce.DepositOverrideOperationRequest(correlationId);
                        return asyncQueue_3.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(depositOverrideOperationRequest)));
                    });
                    return asyncQueue_3.run();
                }
                else {
                    Commerce.ViewModelAdapter.navigate("CartView");
                    return Commerce.VoidAsyncResult.createResolved();
                }
            };
            SearchOrdersViewModel.prototype._updateSelectedOrderStatus = function (statusValue, documentStatusValue) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.selectedOrder)) {
                    return;
                }
                var salesOrder = this.selectedOrder().salesOrder;
                if (Commerce.ObjectExtensions.isNullOrUndefined(salesOrder)) {
                    return;
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(statusValue)) {
                    salesOrder.StatusValue = statusValue;
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(documentStatusValue)) {
                    salesOrder.DocumentStatusValue = documentStatusValue;
                }
                if (this._orderIndexes.length() > 0) {
                    var selectedRowIndex = this._getSalesOrderIndex(salesOrder);
                    this.updateItemCallback()(selectedRowIndex, this.selectedOrder());
                }
            };
            SearchOrdersViewModel.prototype._handleAsyncResult = function (asyncResult, titleResourceId) {
                var _this = this;
                if (titleResourceId === void 0) { titleResourceId = Commerce.StringExtensions.EMPTY; }
                return this._isBusyUntil(asyncResult).fail(function (errors) {
                    _this.displayError(errors, titleResourceId);
                });
            };
            SearchOrdersViewModel.prototype._editCancellationCharge = function (correlationId) {
                var _this = this;
                var cart = Commerce.Session.instance.cart;
                var cancellationChargeAmount = cart.CancellationChargeAmount;
                var asyncQueue = new Commerce.AsyncQueue();
                var errors = [];
                asyncQueue.enqueue(function () {
                    if (!Commerce.CustomerOrderHelper.isCustomerOrderCancellation(cart)) {
                        errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CANCELLATION_CHARGE_INVALID_OPERATION));
                    }
                    if (Commerce.ArrayExtensions.hasElements(errors)) {
                        return Commerce.VoidAsyncResult.createRejected(errors);
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                }).enqueue(function () {
                    var cancellationChargeRequest = new Commerce.SalesOrders.GetCancellationChargeClientRequest(correlationId, cart);
                    return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(cancellationChargeRequest))
                        .done(function (response) {
                        if (!response.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(response.data)) {
                            cancellationChargeAmount = response.data.cancellationCharge;
                        }
                    }));
                }).enqueue(function () {
                    if (!Commerce.Helpers.CurrencyHelper.isValidAmount(cancellationChargeAmount)) {
                        errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CANCELLATION_CHARGE_IS_NOT_VALID));
                        return Commerce.VoidAsyncResult.createRejected(errors);
                    }
                    if (cancellationChargeAmount < 0) {
                        errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CANCELLATION_CHARGE_INVALID_NEGATIVE_AMOUNT));
                        return Commerce.VoidAsyncResult.createRejected(errors);
                    }
                    return _this.cartManager.updateCancellationChargeAsync(cancellationChargeAmount);
                });
                return asyncQueue.run();
            };
            SearchOrdersViewModel.prototype._createSalesOrderNotProvidedResult = function () {
                Commerce.RetailLogger.viewModelSearchOrdersSalesOrderNotProvided();
                return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.APPLICATION_ERROR)]);
            };
            SearchOrdersViewModel.prototype._getSalesOrderIndex = function (salesOrder) {
                return this._orderIndexes.getItem(this._getOrderIndexKey(salesOrder));
            };
            SearchOrdersViewModel.prototype._getOrderIndexKey = function (salesOrder) {
                return salesOrder.SalesId + salesOrder.CustomerOrderTypeValue;
            };
            SearchOrdersViewModel.prototype._setOrdersListColumns = function () {
                var customColumns = Commerce.ObjectExtensions.isNullOrUndefined(SearchOrdersViewModel._viewExtensionsManager) ?
                    [] :
                    SearchOrdersViewModel._viewExtensionsManager.getOrdersListColumns();
                var defaultColumns = [
                    {
                        titleResx: "string_4514",
                        ratio: 10,
                        collapseOrder: 9,
                        minWidth: 100,
                        field: "salesOrder.SalesId"
                    },
                    {
                        titleResx: "string_4501",
                        ratio: 10,
                        collapseOrder: 2,
                        minWidth: 200,
                        field: "customerOrderType"
                    },
                    {
                        titleResx: "string_4502",
                        ratio: 10,
                        collapseOrder: 5,
                        minWidth: 150,
                        field: "orderStatusToDisplay",
                    },
                    {
                        titleResx: "string_4571",
                        ratio: 10,
                        collapseOrder: 4,
                        minWidth: 150,
                        field: "documentStatus"
                    },
                    {
                        titleResx: "string_4503",
                        ratio: 10,
                        collapseOrder: 6,
                        minWidth: 100,
                        field: "salesOrder.CreatedDateTime",
                        converter: "Commerce.Core.Converter.DateWithoutTime"
                    },
                    {
                        titleResx: "string_4504",
                        ratio: 15,
                        collapseOrder: 7,
                        minWidth: 200,
                        field: "salesOrder.Name"
                    },
                    {
                        titleResx: "string_4661",
                        ratio: 10,
                        collapseOrder: 3,
                        minWidth: 200,
                        field: "salesOrder.LoyaltyCardId"
                    },
                    {
                        titleResx: "string_4599",
                        ratio: 15,
                        collapseOrder: 1,
                        minWidth: 200,
                        field: "salesOrder.ReceiptEmail"
                    },
                    {
                        titleResx: "string_4507",
                        ratio: 10,
                        collapseOrder: 8,
                        minWidth: 100,
                        field: "salesOrder.TotalAmount",
                        converter: "Commerce.Core.Converter.PriceFormatter",
                        isRightAligned: true
                    }
                ];
                this.ordersListColumns = Commerce.ArrayExtensions.hasElements(customColumns) ? customColumns : defaultColumns;
            };
            SearchOrdersViewModel.prototype._subscribeExtensionsToChanges = function () {
                var _this = this;
                this.selectedOrder.subscribe(function (order) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(order)) {
                        _this._sendMessageToExtensions("OrderSelectionCleared", undefined);
                    }
                    else {
                        _this._sendMessageToExtensions("OrderSelected", { salesOrder: order.salesOrder });
                    }
                });
            };
            SearchOrdersViewModel.prototype._sendMessageToExtensions = function (messageType, messageData) {
                this.extensionCommandViewModels.forEach(function (vm) {
                    vm.sendMessage(messageType, messageData);
                });
            };
            return SearchOrdersViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.SearchOrdersViewModel = SearchOrdersViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var SearchPickingAndReceivingViewModel = (function (_super) {
            __extends(SearchPickingAndReceivingViewModel, _super);
            function SearchPickingAndReceivingViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                _this._allOrders = [];
                _this.purchaseTransferOrders = ko.observableArray([]);
                _this.selectedPurchaseTransferOrder = ko.observable(null);
                _this.isAdvancedWarehousingEnabled = ko.observable(false);
                _this.disableEditOrderButton = ko.observable(true);
                _this.editPurchaseTransferOrderDisabled = ko.observable(true);
                _this.resultCount = ko.computed(_this._countPurchaseOrders, _this);
                _this._searchText = Commerce.StringExtensions.EMPTY;
                _this._setOrdersListColumns();
                _this._isExtensionCommandViewModelBusy = ko.observable(false);
                if (Commerce.ObjectExtensions.isNullOrUndefined(SearchPickingAndReceivingViewModel._viewExtensionsManager)) {
                    _this._extensionCommandViewModels = [];
                }
                else {
                    _this._extensionCommandViewModels = SearchPickingAndReceivingViewModel._viewExtensionsManager.getAppBarCommands()
                        .map(function (command) {
                        var commandVM = new ViewModels.CommandViewModel(command);
                        var commandState = {};
                        commandVM.sendMessage("Initialize", commandState);
                        commandVM.addMessageHandler("RefreshOrders", _this._refreshOrdersAsync.bind(_this));
                        commandVM.addMessageHandler("IsProcessingChanged", function (isProcessing) {
                            if (isProcessing) {
                                _this._isExtensionCommandViewModelBusy(true);
                            }
                            else {
                                var isAnyCommandProcessing = _this._extensionCommandViewModels.some(function (vm) {
                                    return vm.isProcessing;
                                });
                                _this._isExtensionCommandViewModelBusy(isAnyCommandProcessing);
                            }
                        });
                        return commandVM;
                    });
                    _this._isBusyWhen(_this._isExtensionCommandViewModelBusy);
                    _this._subscribeExtensionsToChanges();
                }
                return _this;
            }
            Object.defineProperty(SearchPickingAndReceivingViewModel.prototype, "extensionCommandViewModels", {
                get: function () {
                    return this._extensionCommandViewModels;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SearchPickingAndReceivingViewModel, "viewExtensionManager", {
                set: function (manager) {
                    SearchPickingAndReceivingViewModel._viewExtensionsManager = manager;
                },
                enumerable: true,
                configurable: true
            });
            SearchPickingAndReceivingViewModel.prototype.loadAsync = function () {
                var _this = this;
                var loadQueue = new Commerce.AsyncQueue();
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                loadQueue.enqueue(function () {
                    return Commerce.ApplicationContext.Instance.warehouseAsync.value;
                }).enqueue(function (warehouse) {
                    _this.isAdvancedWarehousingEnabled(warehouse.IsWMSEnabled);
                    return _this._getPurchaseTransferOrders(correlationId);
                });
                return this._isBusyUntil(loadQueue.run())
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            SearchPickingAndReceivingViewModel.prototype.purchaseTransferOrderSelectionChanged = function (items) {
                this.editPurchaseTransferOrderDisabled(items.length !== 1);
                if (Commerce.ArrayExtensions.hasElements(items) && !Commerce.ObjectExtensions.isNullOrUndefined(items[0])) {
                    this.selectedPurchaseTransferOrder(items[0]);
                    var order = this.selectedPurchaseTransferOrder();
                    this.disableEditOrderButton((order.orderType !== Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferIn) &&
                        (order.orderType !== Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferOut) &&
                        (order.orderType !== Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferOrder) ||
                        (order.status !== ViewModels.TransferOrderDetailsViewModel.DRAFT_STATUS));
                    this.editPurchaseTransferOrderDisabled(order.status === ViewModels.TransferOrderDetailsViewModel.DRAFT_STATUS);
                }
                else {
                    this.disableEditOrderButton(true);
                    this.selectedPurchaseTransferOrder(null);
                }
            };
            SearchPickingAndReceivingViewModel.prototype.performSearchPickingAndReceivingOrder = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var activity = new Commerce.Activities.GetSearchTextActivity({
                        title: Commerce.ViewModelAdapter.getResourceString("string_3700"),
                        subTitle: Commerce.StringExtensions.EMPTY,
                        searchText: _this._searchText,
                        inputLabel: Commerce.ViewModelAdapter.getResourceString("string_3713")
                    });
                    return activity.execute().done(function () {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(activity.response)) {
                            asyncQueue.cancel();
                        }
                        else {
                            _this._searchText = activity.response.searchText;
                            var purchaseTransferOrderFilterResults = [];
                            for (var i = 0; i < _this._allOrders.length; ++i) {
                                if (_this._allOrders[i].orderId.toUpperCase().indexOf(_this._searchText.toUpperCase()) >= 0) {
                                    purchaseTransferOrderFilterResults.push(_this._allOrders[i]);
                                }
                            }
                            _this.purchaseTransferOrders(purchaseTransferOrderFilterResults);
                        }
                    });
                });
                return this._isBusyUntil(asyncQueue.run());
            };
            SearchPickingAndReceivingViewModel.prototype.createTransferOrder = function (orderType) {
                var _this = this;
                if (!Commerce.Session.instance.CurrentEmployee.Permissions.AllowCreateTransferOrder) {
                    var error = new Commerce.Proxy.Entities.Error("string_3410");
                    return Commerce.VoidAsyncResult.createRejected([error]);
                }
                var locationFrom = Commerce.StringExtensions.EMPTY;
                var locationTo = Commerce.StringExtensions.EMPTY;
                var currentStoreLocaiton = Commerce.ApplicationContext.Instance.availableStores.getItem(Commerce.ApplicationContext.Instance.storeNumber).InventoryLocationId;
                if (orderType === Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferIn) {
                    locationTo = currentStoreLocaiton;
                }
                else if (orderType === Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferOut) {
                    locationFrom = currentStoreLocaiton;
                }
                var createOrderAsyncQueue = new Commerce.AsyncQueue();
                var orderToCreate;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                createOrderAsyncQueue.enqueue(function () {
                    var transferOrder = {
                        OrderId: Commerce.StringExtensions.EMPTY,
                        InventLocationIdFrom: locationFrom,
                        InventLocationIdTo: locationTo,
                        ShipDate: new Date(),
                        ReceiveDate: new Date(),
                        OrderTypeValue: orderType
                    };
                    var getTransferOrderHeaderClientRequest = new Commerce.GetTransferOrderHeaderClientRequest(correlationId, transferOrder, 1);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getTransferOrderHeaderClientRequest))
                        .done(function (result) {
                        if (result.canceled) {
                            createOrderAsyncQueue.cancel();
                        }
                        else {
                            orderToCreate = result.data.result;
                        }
                    });
                }).enqueue(function () {
                    var options = { transferOrder: orderToCreate };
                    return createOrderAsyncQueue.cancelOn(_this.context.triggerManager.execute(Commerce.Triggers.CancelableTriggerType.PreCreateTransferOrder, options));
                }).enqueue(function (triggerResult) {
                    return _this.inventoryManager.createTransferOrderAsync(triggerResult.data.transferOrder)
                        .done(function (newTransferOrder) {
                        orderToCreate = newTransferOrder;
                    });
                });
                return createOrderAsyncQueue.run()
                    .done(function (result) {
                    if (result.canceled) {
                        return;
                    }
                    var tranferOrderViewModelParameter = {
                        TransferId: orderToCreate.OrderId
                    };
                    Commerce.ViewModelAdapter.navigate("TransferOrderDetailsView", tranferOrderViewModelParameter);
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            SearchPickingAndReceivingViewModel.prototype.deleteTransferOrderAsync = function () {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.selectedPurchaseTransferOrder())) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                return this._isBusyUntil(this._deleteTransferOrderAsync(this.selectedPurchaseTransferOrder()))
                    .done(function () {
                    var selectedIndex = _this.purchaseTransferOrders().indexOf(_this.selectedPurchaseTransferOrder());
                    _this.purchaseTransferOrders().splice(selectedIndex, 1);
                    _this.purchaseTransferOrders(_this.purchaseTransferOrders());
                })
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            SearchPickingAndReceivingViewModel.prototype.createInboundTransferOrderAsync = function () {
                var orderType = Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferIn;
                return this._isBusyUntil(this.createTransferOrder(orderType))
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            SearchPickingAndReceivingViewModel.prototype.createOutboundTransferOrderAsync = function () {
                var orderType = Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferOut;
                return this._isBusyUntil(this.createTransferOrder(orderType))
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            SearchPickingAndReceivingViewModel.prototype._deleteTransferOrderAsync = function (order) {
                if (!Commerce.Session.instance.CurrentEmployee.Permissions.AllowCreateTransferOrder) {
                    var error = new Commerce.Proxy.Entities.Error("string_3432");
                    return Commerce.VoidAsyncResult.createRejected([error]);
                }
                if (((order.orderType === Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferIn) ||
                    (order.orderType === Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferOut) ||
                    (order.orderType === Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferOrder)) &&
                    (order.status === ViewModels.TransferOrderDetailsViewModel.DRAFT_STATUS)) {
                    return this.inventoryManager.deleteTransferOrderAsync(order.orderId);
                }
                else {
                    var error = new Commerce.Proxy.Entities.Error("string_3419");
                    return Commerce.VoidAsyncResult.createRejected([error]);
                }
            };
            SearchPickingAndReceivingViewModel.prototype._getPurchaseTransferOrders = function (correlationId) {
                var _this = this;
                var getOrdersRequest = new Commerce.StoreOperations.GetPickingAndReceivingOrdersClientRequest(correlationId);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getOrdersRequest))
                    .map(function (result) {
                    if (result.canceled) {
                        return;
                    }
                    _this._allOrders = result.data.result;
                    _this.purchaseTransferOrders(_this._allOrders);
                }).fail(function (errors) {
                    Commerce.RetailLogger.operationPickingAndReceivingGetAllOrdersFailed(correlationId, Commerce.ErrorHelper.serializeError(errors), Commerce.ApplicationContext.Instance.channelConfiguration.EnableFetchingPickingListsForPickingAndReceiving);
                });
            };
            SearchPickingAndReceivingViewModel.prototype._refreshOrdersAsync = function () {
                this.purchaseTransferOrderSelectionChanged([]);
                this._searchText = Commerce.StringExtensions.EMPTY;
                return this._isBusyUntil(this._getPurchaseTransferOrders(Commerce.LoggerHelper.getNewCorrelationId())).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            SearchPickingAndReceivingViewModel.prototype._countPurchaseOrders = function () {
                return this.purchaseTransferOrders().length;
            };
            SearchPickingAndReceivingViewModel.prototype._setOrdersListColumns = function () {
                var customColumns = Commerce.ObjectExtensions.isNullOrUndefined(SearchPickingAndReceivingViewModel._viewExtensionsManager) ?
                    [] :
                    SearchPickingAndReceivingViewModel._viewExtensionsManager.getOrdersListColumns();
                var defaultColumns = [
                    {
                        titleResx: "string_3710",
                        ratio: 30,
                        collapseOrder: 3,
                        minWidth: 100,
                        field: "orderId"
                    },
                    {
                        titleResx: "string_3711",
                        ratio: 40,
                        collapseOrder: 2,
                        minWidth: 200,
                        field: "orderType",
                        converter: "Commerce.Core.Converter.PurchaseTransferOrderEnumFormatter"
                    },
                    {
                        titleResx: "string_3712",
                        ratio: 30,
                        collapseOrder: 1,
                        minWidth: 150,
                        field: "status"
                    }
                ];
                this.ordersListColumns = Commerce.ArrayExtensions.hasElements(customColumns) ? customColumns : defaultColumns;
            };
            SearchPickingAndReceivingViewModel.prototype._subscribeExtensionsToChanges = function () {
                var _this = this;
                this.selectedPurchaseTransferOrder.subscribe(function (order) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(order)) {
                        _this._sendMessageToExtensions("OrderLineSelectionCleared", undefined);
                    }
                    else {
                        _this._sendMessageToExtensions("OrderLineSelected", { order: order });
                    }
                });
            };
            SearchPickingAndReceivingViewModel.prototype._sendMessageToExtensions = function (messageType, messageData) {
                this.extensionCommandViewModels.forEach(function (vm) {
                    vm.sendMessage(messageType, messageData);
                });
            };
            return SearchPickingAndReceivingViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.SearchPickingAndReceivingViewModel = SearchPickingAndReceivingViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var SearchRefinersViewModel = (function (_super) {
            __extends(SearchRefinersViewModel, _super);
            function SearchRefinersViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    var defaultOptions = {
                        isRemoteSearchEnabled: true
                    };
                    options = defaultOptions;
                }
                _this._localStoreRefinerViewModel = new ViewModels.RefinerViewModel(context);
                _this._allStoresRefinerViewModel = new ViewModels.RefinerViewModel(context);
                _this.selectedSearchLocation = ko.observable(Commerce.Proxy.Entities.SearchLocation.Local);
                _this.isRemoteSearchEnabled = ko.observable(options.isRemoteSearchEnabled);
                _this.isSelectedSearchLocationLocal = ko.computed(function () {
                    return _this.selectedSearchLocation() === Commerce.Proxy.Entities.SearchLocation.Local;
                });
                _this.hasSelectedRefiners = ko.computed(function () {
                    return _this.isSelectedSearchLocationLocal() && _this._localStoreRefinerViewModel.hasSelectedRefiners();
                });
                return _this;
            }
            Object.defineProperty(SearchRefinersViewModel.prototype, "searchLocations", {
                get: function () {
                    var searchLocations = [
                        {
                            name: Commerce.ViewModelAdapter.getResourceString("string_14201"),
                            value: Commerce.Proxy.Entities.SearchLocation.Local,
                            selected: this.isSelectedSearchLocationLocal()
                        },
                        {
                            name: Commerce.ViewModelAdapter.getResourceString("string_14202"),
                            value: Commerce.Proxy.Entities.SearchLocation.Remote,
                            selected: this.selectedSearchLocation() === Commerce.Proxy.Entities.SearchLocation.Remote
                        }
                    ];
                    return searchLocations;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SearchRefinersViewModel.prototype, "localStoreRefinerViewModel", {
                get: function () {
                    return this._localStoreRefinerViewModel;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SearchRefinersViewModel.prototype, "allStoresRefinerViewModel", {
                get: function () {
                    return this._allStoresRefinerViewModel;
                },
                enumerable: true,
                configurable: true
            });
            SearchRefinersViewModel.prototype.initializeRefinerValues = function (localStoreRefiners) {
                var localStoreRefinerViewModelOptions = {
                    refiners: localStoreRefiners,
                    allRefinerValuesRequired: false,
                    noSelectedFilterText: Commerce.ViewModelAdapter.getResourceString("string_14203"),
                    noSelectedFilterIconName: "iconRetail"
                };
                this.localStoreRefinerViewModel.load(localStoreRefinerViewModelOptions);
                var allStoresRefinerViewModelOptions = {
                    refiners: [],
                    noSelectedFilterText: Commerce.ViewModelAdapter.getResourceString("string_14204"),
                    noSelectedFilterIconName: "iconGlobe"
                };
                this.allStoresRefinerViewModel.load(allStoresRefinerViewModelOptions);
            };
            SearchRefinersViewModel.prototype.getSelectedRefinerValues = function () {
                return this.isSelectedSearchLocationLocal() ? this.localStoreRefinerViewModel.selectedRefiners() : [];
            };
            return SearchRefinersViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.SearchRefinersViewModel = SearchRefinersViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        var SearchStockCountViewModel = (function (_super) {
            __extends(SearchStockCountViewModel, _super);
            function SearchStockCountViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this.allJournals = [];
                _this.stockCountJournals = ko.observableArray([]);
                _this.resultCount = ko.computed(_this.countJournals, _this);
                _this.isAdvancedWarehousingEnabled = ko.observable(false);
                _this._setStockCountListColumns();
                return _this;
            }
            Object.defineProperty(SearchStockCountViewModel, "viewExtensionManager", {
                set: function (manager) {
                    SearchStockCountViewModel._viewExtensionsManager = manager;
                },
                enumerable: true,
                configurable: true
            });
            SearchStockCountViewModel.prototype.loadAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return Commerce.ApplicationContext.Instance.warehouseAsync.value
                        .done(function (_warehouse) {
                        _this.isAdvancedWarehousingEnabled(_warehouse.IsWMSEnabled);
                    });
                }).enqueue(function () {
                    return _this.getStockCountJournalsAsync();
                }).enqueue(function () {
                    return _this.syncAllJournalsAsync();
                });
                return this._isBusyUntil(asyncQueue.run());
            };
            SearchStockCountViewModel.prototype.getStockCountJournalsAsync = function () {
                var _this = this;
                return this._isBusyUntil(this.stockCountJournalManager.getStockCountJournalsAsync())
                    .done(function (journals) {
                    _this.allJournals = journals;
                    _this.stockCountJournals(_this.allJournals);
                });
            };
            SearchStockCountViewModel.prototype.searchStockCountJournals = function (searchText) {
                var journalFilterResults = [];
                for (var i = 0; i < this.allJournals.length; i++) {
                    if (this.allJournals[i].JournalId.indexOf(searchText) >= 0) {
                        journalFilterResults.push(this.allJournals[i]);
                    }
                }
                this.stockCountJournals(journalFilterResults);
            };
            SearchStockCountViewModel.prototype.syncAllJournalsAsync = function () {
                var _this = this;
                return this._isBusyUntil(this.stockCountJournalManager.syncAllStockCountJournalsAsync())
                    .done(function (journals) {
                    _this.allJournals = journals;
                    _this.stockCountJournals(_this.allJournals);
                });
            };
            SearchStockCountViewModel.prototype.deleteJournalsAsync = function () {
                if (!Commerce.ArrayExtensions.hasElements(this.selectedJournals)) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                var journalIdsToDelete = this.selectedJournals.map(function (value) {
                    return value.JournalId;
                });
                return this._isBusyUntil(this.stockCountJournalManager.deleteStockCountJournalsAsync(journalIdsToDelete));
            };
            SearchStockCountViewModel.prototype.performSearchJournal = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var activity = new Commerce.Activities.GetSearchTextActivity({
                        searchText: Commerce.StringExtensions.EMPTY,
                        title: Commerce.ViewModelAdapter.getResourceString("string_2807"),
                        subTitle: Commerce.StringExtensions.EMPTY,
                        inputLabel: Commerce.StringExtensions.EMPTY
                    });
                    activity.responseHandler = function (response) {
                        return asyncQueue.cancelOn(_this.onSearchTextChanged(response.searchText)).map(function () { return void 0; });
                    };
                    return activity.execute().done(function () {
                        if (!activity.response) {
                            asyncQueue.cancel();
                            return;
                        }
                    });
                });
                return this._isBusyUntil(asyncQueue.run()).fail(function (error) {
                    Commerce.NotificationHandler.displayClientErrors(error);
                });
            };
            SearchStockCountViewModel.prototype.onSearchTextChanged = function (searchText) {
                var responseHandlerResult;
                this.searchStockCountJournals(searchText);
                responseHandlerResult = Commerce.AsyncResult.createResolved();
                return responseHandlerResult;
            };
            SearchStockCountViewModel.prototype.countJournals = function () {
                return this.stockCountJournals().length;
            };
            SearchStockCountViewModel.prototype._setStockCountListColumns = function () {
                var customColumns = Commerce.ObjectExtensions.isNullOrUndefined(SearchStockCountViewModel._viewExtensionsManager) ?
                    [] :
                    SearchStockCountViewModel._viewExtensionsManager.getStockCountListColumns();
                var defaultColumns = [
                    {
                        titleResx: "string_3340",
                        ratio: 30,
                        collapseOrder: 3,
                        minWidth: 150,
                        field: "JournalId"
                    },
                    {
                        titleResx: "string_3341",
                        ratio: 50,
                        collapseOrder: 1,
                        minWidth: 200,
                        field: "Description"
                    },
                    {
                        titleResx: "string_3343",
                        ratio: 20,
                        collapseOrder: 2,
                        minWidth: 60,
                        isRightAligned: true,
                        field: "StockCountTransactionLines",
                        converter: "Commerce.Core.Converter.TotalCollection"
                    }
                ];
                this.stockCountListColumns = Commerce.ArrayExtensions.hasElements(customColumns) ? customColumns : defaultColumns;
            };
            return SearchStockCountViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.SearchStockCountViewModel = SearchStockCountViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var SearchViewSelectionMode;
        (function (SearchViewSelectionMode) {
            SearchViewSelectionMode[SearchViewSelectionMode["None"] = 0] = "None";
            SearchViewSelectionMode[SearchViewSelectionMode["Product"] = 1] = "Product";
            SearchViewSelectionMode[SearchViewSelectionMode["Customer"] = 2] = "Customer";
        })(SearchViewSelectionMode = ViewModels.SearchViewSelectionMode || (ViewModels.SearchViewSelectionMode = {}));
        ViewModels.SearchViewSearchEntity = Commerce.Client.Entities.SearchViewSearchEntity;
        var HeaderSearchType = Commerce.Client.Entities.HeaderSearchType;
        var SearchViewModel = (function (_super) {
            __extends(SearchViewModel, _super);
            function SearchViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                _this.orderBy = null;
                options = options || { selectionMode: SearchViewSelectionMode.None, searchEntity: undefined, correlationId: Commerce.StringExtensions.EMPTY };
                _this.searchType = ko.observable(Commerce.Client.Entities.HeaderSearchType.Product);
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.selectionMode)) {
                    options.selectionMode = SearchViewSelectionMode.None;
                }
                _this.selectionMode = options.selectionMode;
                _this._trackingId = options.trackingId;
                _this.viewSimilarLooksProductSearchResults = ko.observable(false);
                if (!Commerce.StringExtensions.isNullOrWhitespace(options.trackingId)) {
                    var numberOfTrackedResults = 0;
                    if (Commerce.ArrayExtensions.hasElements(options.productSearchResults)) {
                        numberOfTrackedResults = options.productSearchResults.length;
                    }
                    var isViewSimilarLooksProductSearchResults = options.trackingId === ViewModels.SimilarLooksProductsViewModel.VISUAL_RECOMMENDATION;
                    _this.viewSimilarLooksProductSearchResults = ko.observable(isViewSimilarLooksProductSearchResults);
                    Commerce.RetailLogger.viewModelSearchViewModelFromRecommendation(options.trackingId, numberOfTrackedResults);
                }
                if (Commerce.Session.instance.productCatalogStore.Context.ChannelId === Commerce.ApplicationContext.Instance.storeInformation.RecordId) {
                    _this.isCurrentStore = ko.observable(true);
                }
                else {
                    _this.isCurrentStore = ko.observable(false);
                }
                _this._isOnlySelectionAllowed = false;
                _this.allowChangeStoreAndCatalog = true;
                if (_this.selectionMode === SearchViewSelectionMode.Customer) {
                    _this._customerSelectionHandler = options.customerSelectionOptions.customerSelectionHandler;
                    _this._isOnlySelectionAllowed = options.customerSelectionOptions.isOnlySelectionAllowed;
                    options.searchEntity = ViewModels.SearchViewSearchEntity.Customer;
                }
                else if (_this.selectionMode === SearchViewSelectionMode.Product) {
                    _this._productSelectionHandler = options.productSelectionOptions.productSelectionHandler;
                    _this._allowKitMasterSelection = options.productSelectionOptions.allowKitMasterSelection;
                    _this.allowChangeStoreAndCatalog = options.productSelectionOptions.allowChangeStoreAndCatalog || true;
                }
                _this._productSearchCorrelationId = Commerce.StringExtensions.EMPTY;
                _this._customerSearchCorrelationId = Commerce.StringExtensions.EMPTY;
                _this.productSearchViewModel = new ViewModels.ProductSearchViewModel(context);
                _this._customerSearchViewModel = new ViewModels.CustomerSearchViewModel(context);
                var isViewPrePopulatedProductSearchResults = Commerce.ArrayExtensions.hasElements(options.productSearchResults);
                _this.viewPrePopulatedProductSearchResults = ko.observable(isViewPrePopulatedProductSearchResults);
                _this.searchText = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.productSearchViewModel.productRefinerValuesParameter = null;
                _this.autoFocusDelayInMilliseconds = ko.observable(isNaN(options.autoFocusDelayInMilliseconds) ? 0 : options.autoFocusDelayInMilliseconds);
                _this._initProductSearchExtensionCommandViewModels();
                _this._initCustomerSearchExtensionCommandViewModels();
                _this._initProductSearchColumns();
                _this._initCustomerSearchColumns();
                _this.selectedProducts = ko.observableArray([]);
                _this.selectedProducts.subscribe(_this._selectedProductsChangedHandler.bind(_this));
                _this.selectedCustomers = ko.observableArray([]);
                _this.selectedCustomers.subscribe(_this._selectedCustomerChangedHandler.bind(_this));
                _this._isProductsModeBusy = ko.observable(false);
                _this._isCustomersModeBusy = ko.observable(false);
                _this._isRelatedProductsModeBusy = ko.observable(false);
                _this.isProductDataLoading = ko.observable(false);
                _this.isCustomerDataLoading = ko.observable(false);
                _this._isBusyWhen(ko.computed(function () { return (_this._isProductsModeBusy() && _this.isProductDataLoading()); }));
                _this._isBusyWhen(ko.computed(function () { return (_this._isCustomersModeBusy() && _this.isCustomerDataLoading()); }));
                _this._isBusyWhen(ko.computed(function () { return _this._isRelatedProductsModeBusy(); }));
                _this.canSelectCustomer = ko.observable(false);
                _this.canSelectProduct = ko.observable(false);
                _this.canSelectRelatedProduct = ko.observable(false);
                _this.productSearchViewModel.hasProductSearchResults.subscribe(function () { return _this.resetRefineAvailability(); }, _this);
                _this._customerSearchViewModel.hasCustomerSearchResults.subscribe(function () { return _this.resetRefineAvailability(); }, _this);
                _this._processingAddItemsToCart = false;
                _this.canRefineItems = ko.observable(false);
                _this.resetProductsHandler = ko.observable(function () { return; });
                _this.resetCustomersHandler = ko.observable(function () { return; });
                if (_this.applicationContext.deviceConfiguration.DefaultCustomerSearchModeValue === Commerce.Proxy.Entities.RetailCustomerSearchMode.Remote) {
                    _this.selectedSearchLocation = ko.observable(Commerce.Proxy.Entities.SearchLocation.Remote);
                }
                else {
                    _this.selectedSearchLocation = ko.observable(Commerce.Proxy.Entities.SearchLocation.Local);
                }
                _this.isSelectedSearchLocationLocal = ko.computed(function () { return _this.selectedSearchLocation() === Commerce.Proxy.Entities.SearchLocation.Local; });
                if (options.searchEntity === ViewModels.SearchViewSearchEntity.Customer) {
                    _this._customerSearchCorrelationId = options.correlationId || Commerce.StringExtensions.EMPTY;
                    _this.isSearchWithLocationAvailable = ko.observable(Commerce.ApplicationContext.Instance.deviceConfiguration.EnableAxCustomerSearch);
                    _this.viewCustomers = ko.observable(true);
                    _this.searchType(HeaderSearchType.Customer);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(options.customerSearchByFieldCriteria) &&
                        Commerce.ArrayExtensions.hasElements(options.customerSearchByFieldCriteria.Criteria)) {
                        if (options.customerSearchByFieldCriteria.Criteria.length > 1) {
                            _this.searchText(Commerce.StringExtensions.EMPTY);
                        }
                        else {
                            _this.searchText(options.searchText);
                        }
                        _this.setSearchByCustomerFieldCriteria(options.customerSearchByFieldCriteria);
                        _this._customerSearchViewModel.CustomerSearchCriteria = _this._customerSearchByFieldCriteria;
                    }
                    else {
                        _this.setSearchByText(options.searchText);
                        var customerSearchCriteria = {
                            Keyword: Commerce.StringExtensions.isEmptyOrWhitespace(options.searchText) ? Commerce.StringExtensions.EMPTY : options.searchText,
                            SearchLocationValue: _this.selectedSearchLocation()
                        };
                        _this._customerSearchViewModel.CustomerSearchCriteria = customerSearchCriteria;
                    }
                    _this.productSearchViewModel.clearParameters();
                }
                else {
                    _this._productSearchCorrelationId = options.correlationId || Commerce.StringExtensions.EMPTY;
                    _this.setSearchByText(options.searchText);
                    _this.viewCustomers = ko.observable(false);
                    _this.searchType(HeaderSearchType.Product);
                    _this.isSearchWithLocationAvailable = ko.observable(false);
                    if (Commerce.ArrayExtensions.hasElements(options.productSearchResults)) {
                        options.productSearchResults.forEach(function (product) { product.Price = null; });
                        _this.products(options.productSearchResults);
                    }
                    else {
                        _this.productSearchViewModel.searchTextParameter = _this.searchText();
                        _this.searchItems(false, options.correlationId);
                    }
                }
                _this.resetRefineAvailability();
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options.refinerValue)) {
                    _this.productSearchViewModel.productRefinerValuesParameter = [options.refinerValue];
                }
                _this.viewCustomers.subscribe(function (newValue) {
                    _this.searchType(newValue ? HeaderSearchType.Customer : HeaderSearchType.Product);
                });
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options.quantity)) {
                    _this._quantity = options.quantity;
                }
                var clearProductSelectionExtender = { notify: "always" };
                _this.clearProductSelection = ko.observable(false);
                _this.clearProductSelection.extend(clearProductSelectionExtender);
                _this.canCompareSelectedItems = ko.observable(false);
                _this.canSelectItem = ko.observable(false);
                _this.isAddNewCustomerAvailable = ko.computed(_this.getIsAddNewCustomerAvailable, _this);
                _this.isAddSelectedCustomerToCartAvailable = ko.computed(_this.getIsAddSelectedCustomerToCartAvailable, _this);
                _this.areAnyItemsSelected = ko.computed(function () { return _this.selectedProducts().length !== 0; });
                _this.isSingleCustomerSelected = ko.computed(function () { return _this.selectedCustomers().length === 1; });
                _this.sortMenuItems = ko.observableArray([
                    {
                        displayName: Commerce.ViewModelAdapter.getResourceString("string_30259"),
                        buttonId: "btnSortByItemIdAsc",
                        axBubbleAttr: "productSearchResults_sortByItemIdAsc",
                        clickEvent: function () { return _this._setOrderBy("ItemId", false); }
                    },
                    {
                        displayName: Commerce.ViewModelAdapter.getResourceString("string_30249"),
                        buttonId: "btnSortByItemIdDesc",
                        axBubbleAttr: "productSearchResults_sortByItemIdDesc",
                        clickEvent: function () { return _this._setOrderBy("ItemId", true); }
                    },
                    {
                        displayName: Commerce.ViewModelAdapter.getResourceString("string_30252"),
                        buttonId: "btnSortByNameAsc",
                        axBubbleAttr: "productSearchResults_sortByNameAsc",
                        clickEvent: function () { return _this._setOrderBy("Name", false); }
                    },
                    {
                        displayName: Commerce.ViewModelAdapter.getResourceString("string_30253"),
                        buttonId: "btnSortByNameDesc",
                        axBubbleAttr: "productSearchResults_sortByNameDesc",
                        clickEvent: function () { return _this._setOrderBy("Name", true); }
                    }
                ]);
                return _this;
            }
            SearchViewModel.prototype.onShown = function () {
                var _this = this;
                if (this.viewPrePopulatedProductSearchResults()) {
                    Commerce.ProductPropertiesHelper.getActivePricesRatingsAndUpdateProductSearchResults(this.products())
                        .done(function (searchResults) {
                        _this.products(searchResults);
                    });
                }
            };
            Object.defineProperty(SearchViewModel, "viewExtensionManager", {
                set: function (manager) {
                    SearchViewModel._viewExtensionsManager = manager;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SearchViewModel.prototype, "searchLocations", {
                get: function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(this._searchLocations)) {
                        this._searchLocations = [
                            {
                                name: Commerce.ViewModelAdapter.getResourceString("string_1040"),
                                value: Commerce.Proxy.Entities.SearchLocation.Local,
                                selected: true
                            },
                            {
                                name: Commerce.ViewModelAdapter.getResourceString("string_1041"),
                                value: Commerce.Proxy.Entities.SearchLocation.Remote,
                                selected: false
                            }
                        ];
                    }
                    return this._searchLocations;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SearchViewModel.prototype, "ProductSearchCorrelationId", {
                get: function () {
                    return this._productSearchCorrelationId;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SearchViewModel.prototype, "CustomerSearchCorrelationId", {
                get: function () {
                    return this._customerSearchCorrelationId;
                },
                enumerable: true,
                configurable: true
            });
            SearchViewModel.prototype.setSearchLocation = function (searchLocation) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(searchLocation)) {
                    var itemIndex = this.searchLocations.indexOf(searchLocation);
                    this.selectedSearchLocation(this.searchLocations[itemIndex].value);
                    this.searchItems(true);
                }
            };
            Object.defineProperty(SearchViewModel.prototype, "productSearchColumns", {
                get: function () {
                    return this._productSearchColumns;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SearchViewModel.prototype, "customerSearchColumns", {
                get: function () {
                    return this._customerSearchColumns;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SearchViewModel.prototype, "productSearchExtensionCommandViewModels", {
                get: function () {
                    return this._productSearchExtensionCommandViewModels;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SearchViewModel.prototype, "customerSearchExtensionCommandViewModels", {
                get: function () {
                    return this._customerSearchExtensionCommandViewModels;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SearchViewModel.prototype, "products", {
                get: function () {
                    return this.productSearchViewModel.products;
                },
                enumerable: true,
                configurable: true
            });
            SearchViewModel.prototype.setSearchByText = function (searchText) {
                this._customerSearchByFieldCriteria = null;
                this.searchText(searchText);
            };
            SearchViewModel.prototype.setSearchByCustomerFieldCriteria = function (customerSearchByFieldCriteria) {
                this._customerSearchByFieldCriteria = customerSearchByFieldCriteria;
            };
            SearchViewModel.prototype.refineProductsByCriteriaAsync = function (pageSize, skip) {
                if (this.viewSimilarLooksProductSearchResults()) {
                    var productIds = this.products().map(function (value) {
                        return value.RecordId;
                    });
                    var productSearchCriteria = new Commerce.Proxy.Entities.ProductSearchCriteriaClass();
                    var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                    productSearchCriteria.Context = Commerce.Session.instance.productCatalogStore.Context;
                    productSearchCriteria.Ids = productIds;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this.productSearchViewModel.productRefinerValuesParameter)) {
                        productSearchCriteria.Refinement = this.productSearchViewModel.productRefinerValuesParameter;
                    }
                    return this.productManager.searchByCriteriaAsync(productSearchCriteria, correlationId, pageSize, skip);
                }
                else {
                    return Commerce.AsyncResult.createResolved(this.products());
                }
            };
            SearchViewModel.prototype.searchProducts = function (pageSize, skip) {
                if (this.hasProductSearchValueSet()) {
                    if (Commerce.StringExtensions.isNullOrWhitespace(this._productSearchCorrelationId)) {
                        this._productSearchCorrelationId = Commerce.LoggerHelper.getNewCorrelationId();
                    }
                    Commerce.RetailLogger.viewModelSearchViewModelSearchProductsStarted(this._productSearchCorrelationId, pageSize, skip);
                }
                this.productSearchViewModel.orderBy = this.orderBy;
                return this.productSearchViewModel.searchProducts(pageSize, skip, this._productSearchCorrelationId);
            };
            SearchViewModel.prototype.searchCustomers = function (pageSize, skip) {
                if (this.hasCustomerSearchValueSet()) {
                    if (Commerce.StringExtensions.isNullOrWhitespace(this._customerSearchCorrelationId)) {
                        this._customerSearchCorrelationId = Commerce.LoggerHelper.getNewCorrelationId();
                    }
                    Commerce.RetailLogger.viewModelSearchViewModelSearchCustomersStarted(this._customerSearchCorrelationId, pageSize, skip);
                }
                return this._customerSearchViewModel.searchCustomers(pageSize, skip);
            };
            SearchViewModel.prototype.applyRefinerValues = function (productRefinerValues, correlationId) {
                Commerce.RetailLogger.viewModelSearchViewModelApplyRefinersStarted(correlationId);
                this._productSearchCorrelationId = correlationId;
                this.setProductsModeLoading(true);
                this.productSearchViewModel.productRefinerValuesParameter = productRefinerValues;
                this.resetProducts();
            };
            SearchViewModel.prototype.showProductDetails = function (product, quantity) {
                if (Commerce.ObjectExtensions.isFunction(this.showProductDetailsHandler)) {
                    this.showProductDetailsHandler(product, quantity);
                }
            };
            SearchViewModel.prototype.setSelectedItems = function (items) {
                this.selectedProducts(items);
                this.canCompareSelectedItems(this.selectedProducts().length >= 2 && this.selectedProducts().length <= 3);
                this.canSelectItem(this.selectedProducts().length === 1);
            };
            SearchViewModel.prototype.quickSellSelectedItems = function () {
                return this.addItemsToCart(true);
            };
            SearchViewModel.prototype.addSelectedItemsToCart = function () {
                return this.addItemsToCart(false);
            };
            SearchViewModel.prototype.filterProducts = function () {
                if (this.viewSimilarLooksProductSearchResults()) {
                    return this._filterProductsByCriteria();
                }
                else {
                    return this._filterProductsByText();
                }
            };
            SearchViewModel.prototype.loadAsync = function () {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.productSearchViewModel.productRefinerValuesParameter)) {
                    this.setProductsModeLoading(true);
                    return this.productSearchViewModel.getRefiners()
                        .always(function () {
                        _this.setProductsModeLoading(false);
                    })
                        .done(function (result) {
                        _this._productRefiners = result;
                        var refiner = _this._productRefiners.filter(function (x) {
                            return x.SourceValue === Commerce.Proxy.Entities.ProductRefinerSource.Category;
                        })[0];
                        refiner.SelectedValues = refiner.Values.filter(function (val) { return val.RefinerRecordId ===
                            _this.productSearchViewModel.productRefinerValuesParameter[0].RefinerRecordId; });
                    });
                }
                return Commerce.AsyncResult.createResolved([]);
            };
            SearchViewModel.prototype.searchItems = function (updateSearchResults, correlationId) {
                this.viewPrePopulatedProductSearchResults(false);
                var searchText = this.searchText();
                if (!this.viewCustomers() && !Commerce.StringExtensions.isNullOrWhitespace(searchText)) {
                    this._productSearchCorrelationId = correlationId;
                    this.selectedProducts([]);
                    this.isProductDataLoading(true);
                    this.setProductsModeLoading(true);
                    this._isRelatedProductsModeBusy(false);
                    this.isCustomerDataLoading(false);
                    this.productSearchViewModel.searchTextParameter = searchText;
                    this.productSearchViewModel.productRefinerValuesParameter = null;
                    this._productRefiners = null;
                    this.resetRefineAvailability();
                    if (updateSearchResults) {
                        this.resetProducts();
                    }
                }
                else if (this.viewCustomers()) {
                    var canSearchByCriteria = !Commerce.ObjectExtensions.isNullOrUndefined(this._customerSearchByFieldCriteria) &&
                        Commerce.ArrayExtensions.hasElements(this._customerSearchByFieldCriteria.Criteria);
                    if (canSearchByCriteria || !Commerce.StringExtensions.isNullOrWhitespace(searchText)) {
                        this._customerSearchCorrelationId = correlationId;
                        this.selectedCustomers([]);
                        this.isProductDataLoading(false);
                        this._isRelatedProductsModeBusy(false);
                        this.isCustomerDataLoading(true);
                        this.setCustomersModeLoading(true);
                        this.resetRefineAvailability();
                        if (canSearchByCriteria) {
                            this._customerSearchViewModel.CustomerSearchCriteria = this._customerSearchByFieldCriteria;
                        }
                        else {
                            var customerSearchCriteria = {
                                Keyword: searchText,
                                SearchLocationValue: this.selectedSearchLocation()
                            };
                            this._customerSearchViewModel.CustomerSearchCriteria = customerSearchCriteria;
                        }
                        if (updateSearchResults) {
                            this.resetCustomers();
                        }
                    }
                }
            };
            SearchViewModel.prototype.compareSelectedItems = function () {
                var productIdsSelected = this.selectedProducts().map(function (selectedProduct) { return selectedProduct.RecordId; });
                if (Commerce.ObjectExtensions.isFunction(this.compareItemsHandler)) {
                    this.compareItemsHandler(productIdsSelected);
                }
            };
            SearchViewModel.prototype.setSelectedCustomers = function (customers) {
                this.selectedCustomers(customers);
            };
            SearchViewModel.prototype.addSelectedCustomerToCart = function () {
                var _this = this;
                this.setCustomersModeLoading(true);
                return this.processAddCustomerToCart([])
                    .done(function (result) {
                    if (!result.canceled) {
                        Commerce.ViewModelAdapter.navigate("CartView");
                    }
                    else {
                        _this.setCustomersModeLoading(false);
                    }
                }).fail(function (errors) {
                    _this.setCustomersModeLoading(false);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            SearchViewModel.prototype.createCustomer = function () {
                var options = {};
                if (this.selectionMode === SearchViewSelectionMode.Customer) {
                    options.customerSelectionHandler = this._customerSelectionHandler;
                }
                this.operationsManager.runOperation(Commerce.Proxy.Entities.RetailOperation.CustomerAdd, options)
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            SearchViewModel.prototype.showCustomerDetailsAsync = function (globalCustomer) {
                var _this = this;
                if (this._isOnlySelectionAllowed) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.viewsMerchandisingSearchViewModelShowCustomerDetailsStarted(correlationId);
                this.setCustomersModeLoading(true);
                return Commerce.CustomerHelper.crossCompanyCustomerTransferAsync(correlationId, globalCustomer)
                    .done(function (customer) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(customer) && Commerce.ObjectExtensions.isFunction(_this.showCustomerDetailsHandler)) {
                        _this.showCustomerDetailsHandler(customer.AccountNumber, correlationId);
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                }).always(function () {
                    _this.setCustomersModeLoading(false);
                });
            };
            SearchViewModel.prototype.changeStoreAndCatalogs = function () {
                if (Commerce.ObjectExtensions.isFunction(this.changeStoreAndCatalogsHandler)) {
                    this.changeStoreAndCatalogsHandler(this.searchText(), ViewModels.SearchViewSearchEntity.Product);
                }
            };
            SearchViewModel.prototype.addNewCustomer = function () {
                if (Commerce.ObjectExtensions.isFunction(this.addNewCustomerHandler)) {
                    this.addNewCustomerHandler();
                }
            };
            SearchViewModel.prototype.performItemSelectAction = function () {
                var _this = this;
                var simpleProduct;
                var asyncQueue = new Commerce.AsyncQueue();
                this.setProductsModeLoading(true);
                asyncQueue.enqueue(function () {
                    return _this.getProductsForSelectedItemsAsync()
                        .done(function (simpleProducts) {
                        simpleProduct = simpleProducts[0];
                    });
                });
                asyncQueue.run().done(function (queueResult) {
                    var isKitMaster = simpleProduct.ProductTypeValue === Commerce.Proxy.Entities.ProductType.KitMaster;
                    if ((!isKitMaster || (isKitMaster && _this._allowKitMasterSelection))) {
                        _this._productSelectionHandler.select({ simpleProduct: simpleProduct }, function () {
                            _this.setProductsModeLoading(false);
                        }, function (errors) {
                            Commerce.NotificationHandler.displayClientErrors(errors);
                            _this.setProductsModeLoading(false);
                        });
                    }
                    else if (isKitMaster) {
                        if (Commerce.ObjectExtensions.isFunction(_this.showProductDetailsHandler)) {
                            _this.setProductsModeLoading(false);
                            _this.showProductDetailsHandler(simpleProduct);
                        }
                    }
                    else {
                        Commerce.RetailLogger.viewsMerchandisingSearchViewInvalidProductOperation();
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                    _this.setProductsModeLoading(false);
                });
            };
            SearchViewModel.prototype.performCustomerSelectAction = function () {
                var _this = this;
                if (this.selectionMode === SearchViewSelectionMode.None) {
                    this.addSelectedCustomerToCart();
                    return;
                }
                this.setCustomersModeLoading(true);
                var customer = this.selectedCustomers()[0];
                this._customerSelectionHandler.select(customer, function () {
                    _this.setCustomersModeLoading(false);
                }, function (errors) {
                    _this.setCustomersModeLoading(false);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            SearchViewModel.prototype.productSearchPageLoaded = function (gridData) {
                var _this = this;
                Commerce.RetailLogger.viewModelSearchViewModelProductSearchPageLoaded(this._productSearchCorrelationId, gridData.length);
                this._productSearchCorrelationId = Commerce.StringExtensions.EMPTY;
                return Commerce.ProductPropertiesHelper.getActivePricesRatingsAndUpdateProductSearchResults(gridData)
                    .done(function (searchResults) {
                    _this._productSearchExtensionCommandViewModels.forEach(function (vm) {
                        var data = {
                            searchText: _this.searchText(),
                            productSearchResults: searchResults
                        };
                        vm.sendMessage("SearchResultsLoaded", data);
                    });
                });
            };
            SearchViewModel.prototype.customerSearchPageLoaded = function (gridData) {
                var _this = this;
                Commerce.RetailLogger.viewModelSearchViewModelCustomerSearchPageLoaded(this._customerSearchCorrelationId, gridData.length);
                this._customerSearchCorrelationId = Commerce.StringExtensions.EMPTY;
                this._customerSearchExtensionCommandViewModels.forEach(function (vm) {
                    vm.sendMessage("SearchResultsLoaded", {
                        searchText: _this.searchText(),
                        customers: gridData
                    });
                });
                return Commerce.AsyncResult.createResolved(gridData);
            };
            SearchViewModel.prototype.setSearchMode = function (isProductSearch, correlationId) {
                if (isProductSearch) {
                    this._switchToProductsMode(correlationId);
                }
                else {
                    this._switchToCustomersMode(correlationId);
                }
            };
            SearchViewModel.prototype.getAndSetAdvancedCustomerSearchCriteria = function (correlationId) {
                var _this = this;
                var customerSearchByFieldCriteria = null;
                customerSearchByFieldCriteria = Commerce.ObjectExtensions.isNullOrUndefined(this._customerSearchByFieldCriteria)
                    ? null : this._customerSearchByFieldCriteria.Criteria;
                var activityOptions = {
                    preSelectedSearchFieldValues: customerSearchByFieldCriteria,
                    preSelectedSearchLocation: this.selectedSearchLocation()
                };
                var activity = new Commerce.Activities.GetAdvancedCustomerSearchActivity(activityOptions);
                var asyncResult = new Commerce.AsyncResult();
                activity.execute().done(function () {
                    if (activity.response) {
                        _this.selectedSearchLocation(activity.response.selectedSearchLocation);
                        var customerSearchByFieldCriteria_1 = {
                            Criteria: activity.response.selectedSearchFieldValues
                        };
                        _this.setSearchByCustomerFieldCriteria(customerSearchByFieldCriteria_1);
                        if (Commerce.ArrayExtensions.hasElements(customerSearchByFieldCriteria_1.Criteria)) {
                            _this.searchText(Commerce.StringExtensions.EMPTY);
                        }
                        asyncResult.resolve({ canceled: false });
                    }
                    asyncResult.resolve({ canceled: true });
                }).fail(function (errors) {
                    asyncResult.reject(errors);
                });
                return asyncResult;
            };
            SearchViewModel.prototype.hasProductSearchValueSet = function () {
                return this.productSearchViewModel.hasSearchValueSet();
            };
            SearchViewModel.prototype.hasCustomerSearchValueSet = function () {
                return this._customerSearchViewModel.hasSearchValueSet();
            };
            SearchViewModel.prototype._filterProductsByText = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.viewModelSearchViewModelRefineProductsStarted(correlationId);
                var asyncResult = new Commerce.AsyncResult();
                if (!Commerce.ArrayExtensions.hasElements(this._productRefiners)) {
                    this.setProductsModeLoading(true);
                    this.productSearchViewModel.getRefiners()
                        .always(function () {
                        _this.setProductsModeLoading(false);
                    })
                        .done(function (result) {
                        _this._productRefiners = result;
                        asyncResult.resolveOrRejectOn(_this.runGetProductRefinersActivity(correlationId));
                    });
                }
                else {
                    var selectedMap_2 = {};
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this._productRefiners)) {
                        for (var _i = 0, _a = this._productRefiners; _i < _a.length; _i++) {
                            var ref = _a[_i];
                            selectedMap_2[Commerce.StringExtensions.format("{0}|{1}", ref.KeyName, ref.RecordId)] = ref.SelectedValues;
                        }
                    }
                    this.setProductsModeLoading(true);
                    this.productSearchViewModel.getRefiners()
                        .always(function () {
                        _this.setProductsModeLoading(false);
                    })
                        .done(function (result) {
                        _this._productRefiners = result;
                        for (var _i = 0, _a = _this._productRefiners; _i < _a.length; _i++) {
                            var ref = _a[_i];
                            if (selectedMap_2[Commerce.StringExtensions.format("{0}|{1}", ref.KeyName, ref.RecordId)]) {
                                ref.SelectedValues = selectedMap_2[Commerce.StringExtensions.format("{0}|{1}", ref.KeyName, ref.RecordId)];
                            }
                        }
                        asyncResult.resolveOrRejectOn(_this.runGetProductRefinersActivity(correlationId));
                    });
                }
                return asyncResult;
            };
            SearchViewModel.prototype._filterProductsByCriteria = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.viewModelSearchViewModelRefineProductsStarted(correlationId);
                var asyncResult = new Commerce.AsyncResult();
                if (!Commerce.ArrayExtensions.hasElements(this._productRefiners)) {
                    this.setProductsModeLoading(true);
                    this.productSearchViewModel.getRefinersByCriteria(this.products())
                        .always(function () {
                        _this.setProductsModeLoading(false);
                    })
                        .done(function (result) {
                        _this._productRefiners = result;
                        asyncResult.resolveOrRejectOn(_this.runGetProductRefinersActivity(correlationId));
                    });
                }
                else {
                    var selectedMap_3 = {};
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this._productRefiners)) {
                        for (var _i = 0, _a = this._productRefiners; _i < _a.length; _i++) {
                            var ref = _a[_i];
                            selectedMap_3[Commerce.StringExtensions.format("{0}|{1}", ref.KeyName, ref.RecordId)] = ref.SelectedValues;
                        }
                    }
                    this.setProductsModeLoading(true);
                    this.productSearchViewModel.getRefinersByCriteria(this.products())
                        .always(function () {
                        _this.setProductsModeLoading(false);
                    })
                        .done(function (result) {
                        _this._productRefiners = result;
                        for (var _i = 0, _a = _this._productRefiners; _i < _a.length; _i++) {
                            var ref = _a[_i];
                            if (selectedMap_3[Commerce.StringExtensions.format("{0}|{1}", ref.KeyName, ref.RecordId)]) {
                                ref.SelectedValues = selectedMap_3[Commerce.StringExtensions.format("{0}|{1}", ref.KeyName, ref.RecordId)];
                            }
                        }
                        asyncResult.resolveOrRejectOn(_this.runGetProductRefinersActivity(correlationId));
                    });
                }
                return asyncResult;
            };
            SearchViewModel.prototype._switchToProductsMode = function (correlationId) {
                if (this.selectionMode !== SearchViewSelectionMode.Customer) {
                    Commerce.RetailLogger.viewsMerchandisingSearchViewProductButtonClick(this.searchText());
                    this.isSearchWithLocationAvailable(false);
                    this.viewCustomers(false);
                    if (!this.viewPrePopulatedProductSearchResults()) {
                        this.searchItems(true, correlationId);
                    }
                    this.selectedProducts([]);
                    this.resetRefineAvailability();
                }
            };
            SearchViewModel.prototype.setProductsModeLoading = function (isLoading) {
                this._isProductsModeBusy(isLoading);
                if (isLoading) {
                    Commerce.RetailLogger.viewModelSearchViewModelLoadProductsStarted();
                }
                else {
                    Commerce.RetailLogger.viewModelSearchViewModelLoadProductsFinished();
                }
            };
            SearchViewModel.prototype._switchToCustomersMode = function (correlationId) {
                if (this.selectionMode !== SearchViewSelectionMode.Product) {
                    Commerce.RetailLogger.viewsMerchandisingSearchViewCustomerButtonClick(this.searchText());
                    this.isSearchWithLocationAvailable(Commerce.ApplicationContext.Instance.deviceConfiguration.EnableAxCustomerSearch);
                    this.viewCustomers(true);
                    this.canSelectItem(false);
                    this.searchItems(true, correlationId);
                    this.selectedCustomers([]);
                    this.resetRefineAvailability();
                }
            };
            SearchViewModel.prototype.addItemsToCart = function (quickSale) {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var numberOfSelectedProducts = this.selectedProducts().length;
                if (quickSale) {
                    Commerce.RetailLogger.viewsMerchandisingSearchViewQuickSaleClick(correlationId, numberOfSelectedProducts);
                }
                else {
                    Commerce.RetailLogger.viewsMerchandisingSearchViewAddToCartClick(correlationId, numberOfSelectedProducts);
                }
                var productsIndeterminateWaitVisible = this.getCurrentProductsModeBusyTracker();
                var asyncQueue = new Commerce.AsyncQueue();
                var selectedProducts;
                asyncQueue.enqueue(function () {
                    productsIndeterminateWaitVisible(true);
                    return _this.getProductsForSelectedItemsAsync()
                        .done(function (products) {
                        selectedProducts = products;
                    });
                });
                if (numberOfSelectedProducts === 1) {
                    if (!this.viewPrePopulatedProductSearchResults()) {
                        asyncQueue.enqueue(function () {
                            var product = selectedProducts[0];
                            if (product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.KitMaster) {
                                productsIndeterminateWaitVisible(false);
                                _this._processingAddItemsToCart = false;
                                _this.selectedProducts([]);
                                _this.clearProductSelection(true);
                                _this.showProductDetails(product, _this._quantity);
                                asyncQueue.cancel();
                            }
                            return Commerce.VoidAsyncResult.createResolved();
                        });
                    }
                }
                asyncQueue.enqueue(function () {
                    if (_this._processingAddItemsToCart) {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                    _this._processingAddItemsToCart = true;
                    productsIndeterminateWaitVisible(true);
                    var options = {
                        productSaleDetails: selectedProducts.map(function (product) {
                            return {
                                product: product,
                                quantity: 0,
                                trackingId: _this._trackingId,
                                catalogId: Commerce.Session.instance.productCatalogStore.Context.CatalogId
                            };
                        }),
                        correlationId: correlationId
                    };
                    return Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.ItemSale, options)
                        .done(function (result) {
                        options.productSaleDetails.forEach(function (product) {
                            if (!Commerce.StringExtensions.isNullOrWhitespace(product.trackingId)) {
                                Commerce.RetailLogger.viewModelSearchViewModelFromRecommendationAddToCart(product.trackingId, product.product.RecordId);
                            }
                        });
                        productsIndeterminateWaitVisible(false);
                        _this._processingAddItemsToCart = false;
                        if (!result.canceled) {
                            if (quickSale) {
                                var cartViewOptions = { correlationId: correlationId };
                                Commerce.ViewModelAdapter.navigate("CartView", cartViewOptions);
                            }
                            else {
                                _this.selectedProducts([]);
                                _this.clearProductSelection(true);
                            }
                        }
                    });
                });
                var result = asyncQueue.run()
                    .done(function () {
                    Commerce.RetailLogger.viewModelSearchViewModelAddItemsToCartFinished(correlationId);
                }).fail(function (errors) {
                    Commerce.RetailLogger.viewModelSearchViewModelAddItemsToCartFailed(correlationId, Commerce.ErrorHelper.getErrorMessages(errors));
                    Commerce.NotificationHandler.displayClientErrors(errors)
                        .always(function () {
                        productsIndeterminateWaitVisible(false);
                        _this._processingAddItemsToCart = false;
                    });
                });
                return asyncQueue.cancelOn(result);
            };
            SearchViewModel.prototype.getCurrentProductsModeBusyTracker = function () {
                if (this.viewPrePopulatedProductSearchResults()) {
                    return this._isRelatedProductsModeBusy;
                }
                return this._isProductsModeBusy;
            };
            SearchViewModel.prototype.runGetProductRefinersActivity = function (correlationId) {
                var _this = this;
                var activity = new Commerce.Activities.GetProductRefinersActivity({
                    productRefiners: this._productRefiners,
                    getRefinerValuesHandler: this.productSearchViewModel.getRefinerValues.bind(this.productSearchViewModel),
                    correlationId: correlationId
                });
                activity.responseHandler = function (response) {
                    var result = new Commerce.VoidAsyncResult();
                    _this.applyRefinerValues(response.producRefinerValues, correlationId);
                    result.resolve();
                    return result;
                };
                return activity.execute();
            };
            SearchViewModel.prototype.processAddCustomerToCart = function (cartAffiliations) {
                if (!Commerce.ArrayExtensions.hasElements(this.selectedCustomers())) {
                    return Commerce.AsyncResult.createResolved({ canceled: true });
                }
                var selectedCustomer = this.selectedCustomers()[0];
                return Commerce.CustomerHelper.crossCompanyCustomerTransferAndAddToCartAsync(this._customerSearchCorrelationId, selectedCustomer, cartAffiliations)
                    .fail(function (errors) {
                    Commerce.RetailLogger.viewModelSearchViewModelAddCustomerToCartFailed(selectedCustomer.AccountNumber, Commerce.ErrorHelper.serializeError(errors));
                });
            };
            SearchViewModel.prototype.getProductsForSelectedItemsAsync = function () {
                var channelId = Commerce.Session.instance.productCatalogStore.Context.ChannelId;
                var productIds = this.selectedProducts().map(function (product) { return product.RecordId; });
                if (!Commerce.ArrayExtensions.hasElements(productIds)) {
                    return Commerce.VoidAsyncResult.createRejected();
                }
                if (productIds.length > 1) {
                    return this.productManager.getByIdsAsync(productIds, channelId);
                }
                else {
                    return this.productManager.getByIdAsync(productIds[0], channelId)
                        .map(function (product) {
                        return [product];
                    });
                }
            };
            SearchViewModel.prototype.getIsAddNewCustomerAvailable = function () {
                return this.viewCustomers() && !this._isOnlySelectionAllowed;
            };
            SearchViewModel.prototype.getIsAddSelectedCustomerToCartAvailable = function () {
                return this.selectionMode === SearchViewSelectionMode.None
                    || (this.selectionMode === SearchViewSelectionMode.Customer && !this._isOnlySelectionAllowed);
            };
            SearchViewModel.prototype._setOrderBy = function (columnName, isDescending) {
                this.orderBy = new Commerce.Proxy.Entities.SortColumnClass({ ColumnName: columnName, IsDescending: isDescending });
                this.searchProducts(0, 0);
                this.resetProductsHandler()();
            };
            SearchViewModel.prototype.resetRefineAvailability = function () {
                if (this.viewCustomers()) {
                    this.canRefineItems(false);
                }
                else if (this.viewSimilarLooksProductSearchResults()) {
                    this.canRefineItems(true);
                }
                else {
                    this.canRefineItems(this.productSearchViewModel.hasProductSearchResults());
                }
                this.canSelectCustomer(this._customerSearchViewModel.hasCustomerSearchResults());
                this.canSelectProduct(this.productSearchViewModel.hasProductSearchResults());
                this.canSelectRelatedProduct(this.products().length > 0);
            };
            SearchViewModel.prototype.resetProducts = function () {
                if (Commerce.ObjectExtensions.isFunction(this.resetProductsHandler)) {
                    this.resetProductsHandler()();
                }
            };
            SearchViewModel.prototype.resetCustomers = function () {
                if (Commerce.ObjectExtensions.isFunction(this.resetCustomersHandler)) {
                    this.resetCustomersHandler()();
                }
            };
            SearchViewModel.prototype.setCustomersModeLoading = function (isLoading) {
                this._isCustomersModeBusy(isLoading);
                if (isLoading) {
                    Commerce.RetailLogger.viewModelSearchViewModelLoadCustomersStarted();
                }
                else {
                    Commerce.RetailLogger.viewModelSearchViewModelLoadCustomersFinished();
                }
            };
            SearchViewModel.prototype._initProductSearchExtensionCommandViewModels = function () {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(SearchViewModel._viewExtensionsManager)
                    || this.selectionMode === SearchViewSelectionMode.Customer) {
                    this._productSearchExtensionCommandViewModels = [];
                    return;
                }
                this._productSearchExtensionCommandViewModels = SearchViewModel._viewExtensionsManager.getProductSearchAppBarCommands()
                    .map(function (command) {
                    var commandVM = new ViewModels.CommandViewModel(command);
                    commandVM.addMessageHandler("IsProcessingChanged", function (newValue) {
                        _this.setProductsModeLoading(newValue);
                    });
                    var commandState = {
                        isSelectionMode: _this.selectionMode === SearchViewSelectionMode.Product,
                        productSearchResults: _this.viewPrePopulatedProductSearchResults() ? _this.products() : [],
                        searchText: _this.searchText()
                    };
                    commandVM.sendMessage("Initialize", commandState);
                    return commandVM;
                });
            };
            SearchViewModel.prototype._initProductSearchColumns = function () {
                var customColumns = Commerce.ObjectExtensions.isNullOrUndefined(SearchViewModel._viewExtensionsManager) ?
                    [] :
                    SearchViewModel._viewExtensionsManager.getProductSearchListColumns();
                var defaultColumns;
                if (Commerce.ApplicationContext.Instance.channelConfiguration.EnableProductRatingsForRetailStores) {
                    defaultColumns = [
                        {
                            titleResx: "string_1002",
                            ratio: 20,
                            collapseOrder: 4,
                            minWidth: 120,
                            field: "ItemId"
                        }, {
                            titleResx: "string_1003",
                            ratio: 50,
                            collapseOrder: 3,
                            minWidth: 200,
                            field: "Name"
                        }, {
                            titleResx: "string_1004",
                            ratio: 15,
                            collapseOrder: 2,
                            minWidth: 50,
                            field: "Price",
                            converter: "Commerce.Core.Converter.PriceFormatter"
                        }, {
                            titleResx: "string_1010",
                            ratio: 15,
                            collapseOrder: 1,
                            minWidth: 50,
                            field: "$data",
                            converter: "Commerce.Core.Converter.RatingTextFormatter"
                        }
                    ];
                }
                else {
                    defaultColumns = [
                        {
                            titleResx: "string_1002",
                            ratio: 30,
                            collapseOrder: 3,
                            minWidth: 120,
                            field: "ItemId"
                        }, {
                            titleResx: "string_1003",
                            ratio: 50,
                            collapseOrder: 2,
                            minWidth: 200,
                            field: "Name"
                        }, {
                            titleResx: "string_1004",
                            ratio: 20,
                            collapseOrder: 1,
                            minWidth: 100,
                            field: "Price",
                            converter: "Commerce.Core.Converter.PriceFormatter",
                            isRightAligned: true
                        }
                    ];
                }
                this._productSearchColumns = Commerce.ArrayExtensions.hasElements(customColumns) ? customColumns : defaultColumns;
            };
            SearchViewModel.prototype._initCustomerSearchExtensionCommandViewModels = function () {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(SearchViewModel._viewExtensionsManager)
                    || this.selectionMode === SearchViewSelectionMode.Product) {
                    this._customerSearchExtensionCommandViewModels = [];
                    return;
                }
                this._customerSearchExtensionCommandViewModels = SearchViewModel._viewExtensionsManager.getCustomerSearchAppBarCommands()
                    .map(function (command) {
                    var commandVM = new ViewModels.CommandViewModel(command);
                    commandVM.addMessageHandler("IsProcessingChanged", function (newValue) {
                        _this.setCustomersModeLoading(newValue);
                    });
                    var commandState = {
                        isSelectionMode: _this.selectionMode === SearchViewSelectionMode.Customer,
                        searchText: _this.searchText()
                    };
                    commandVM.sendMessage("Initialize", commandState);
                    return commandVM;
                });
            };
            SearchViewModel.prototype._initCustomerSearchColumns = function () {
                var customColumns = Commerce.ObjectExtensions.isNullOrUndefined(SearchViewModel._viewExtensionsManager) ?
                    [] :
                    SearchViewModel._viewExtensionsManager.getCustomerSearchListColumns();
                var defaultColumns = [
                    {
                        titleResx: "string_1011",
                        ratio: 15,
                        collapseOrder: 5,
                        minWidth: 120,
                        field: "AccountNumber",
                        converter: "Commerce.Core.Converter.textContentFormatter"
                    }, {
                        titleResx: "string_1012",
                        ratio: 20,
                        collapseOrder: 4,
                        minWidth: 200,
                        field: "FullName",
                        converter: "Commerce.Core.Converter.textContentFormatter"
                    }, {
                        titleResx: "string_1013",
                        ratio: 25,
                        collapseOrder: 1,
                        minWidth: 200,
                        field: "FullAddress",
                        converter: "Commerce.Core.Converter.textContentFormatter"
                    }, {
                        titleResx: "string_1039",
                        ratio: 20,
                        collapseOrder: 2,
                        minWidth: 200,
                        field: "Email",
                        converter: "Commerce.Core.Converter.textContentFormatter"
                    }, {
                        titleResx: "string_1015",
                        ratio: 20,
                        collapseOrder: 3,
                        minWidth: 120,
                        field: "Phone",
                        converter: "Commerce.Core.Converter.textContentFormatter"
                    }
                ];
                this._customerSearchColumns = Commerce.ArrayExtensions.hasElements(customColumns) ? customColumns : defaultColumns;
            };
            SearchViewModel.prototype._selectedProductsChangedHandler = function (selectedProducts) {
                if (Commerce.ArrayExtensions.hasElements(selectedProducts)) {
                    var selectedProductSearchResults_1 = selectedProducts;
                    this._productSearchExtensionCommandViewModels.forEach(function (vm) {
                        vm.sendMessage("SearchResultSelected", { productSearchResults: selectedProductSearchResults_1 });
                    });
                }
                else {
                    this._productSearchExtensionCommandViewModels.forEach(function (vm) {
                        vm.sendMessage("SearchResultSelectionCleared", undefined);
                    });
                }
            };
            SearchViewModel.prototype._selectedCustomerChangedHandler = function (selectedCustomers) {
                if (Commerce.ArrayExtensions.hasElements(selectedCustomers)) {
                    this._customerSearchExtensionCommandViewModels.forEach(function (vm) {
                        vm.sendMessage("SearchResultSelected", { customers: selectedCustomers });
                    });
                }
                else {
                    this._customerSearchExtensionCommandViewModels.forEach(function (vm) {
                        vm.sendMessage("SearchResultSelectionCleared", undefined);
                    });
                }
            };
            SearchViewModel.DEFAULT_PAGE_SIZE = 80;
            return SearchViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.SearchViewModel = SearchViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var SelectVariantViewModel = (function (_super) {
            __extends(SelectVariantViewModel, _super);
            function SelectVariantViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this._productDimensionIndex = 0;
                _this._selectedValues = [];
                _this._selectionOptionsByIndex = new Commerce.Dictionary();
                _this.selectionOptions = ko.observableArray([]);
                _this.selectionType = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.selectedValuesText = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.allowUndoPreviousSelection = ko.observable(false);
                _this._dimensionOptionsCounts = [];
                return _this;
            }
            SelectVariantViewModel.prototype.load = function (options) {
                var _this = this;
                this._product = options.product;
                options.preLoadedDimensionDetails.forEach(function (dimensionDetail, index) {
                    _this._selectionOptionsByIndex.setItem(index, dimensionDetail.dimensionValues);
                    _this._dimensionOptionsCounts[index] = dimensionDetail.dimensionValues.length;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(dimensionDetail.dimension)
                        && !Commerce.ObjectExtensions.isNullOrUndefined(dimensionDetail.dimension.DimensionValue)
                        && !Commerce.NumberExtensions.isNullNaNOrZero(dimensionDetail.dimension.DimensionValue.RecordId)) {
                        _this._selectedValues.push(dimensionDetail.dimension);
                        ++_this._productDimensionIndex;
                    }
                });
                this.update();
            };
            Object.defineProperty(SelectVariantViewModel.prototype, "SelectedDimensions", {
                get: function () {
                    return this._selectedValues;
                },
                enumerable: true,
                configurable: true
            });
            SelectVariantViewModel.prototype.makeSelection = function (value) {
                var dimension = Commerce.ObjectExtensions.clone(this._product.Dimensions[this._selectedValues.length]);
                dimension.DimensionValue = value;
                this._selectedValues.push(dimension);
                ++this._productDimensionIndex;
                var result;
                if (this.isSelectionComplete()) {
                    result = Commerce.AsyncResult.createResolved(true);
                }
                else {
                    result = this.getDimensionValues();
                }
                return result;
            };
            SelectVariantViewModel.prototype.undoPreviousSelection = function () {
                var targetIndex = this.getPreviousDimensionIndexWithMultipleOptions();
                if (targetIndex !== -1) {
                    while (this._productDimensionIndex !== targetIndex) {
                        this._selectedValues.pop();
                        --this._productDimensionIndex;
                    }
                    this.update();
                }
            };
            SelectVariantViewModel.prototype.isSelectionComplete = function () {
                return this._selectedValues.length === this._product.Dimensions.length;
            };
            SelectVariantViewModel.prototype.getDimensionValues = function () {
                var _this = this;
                var channelId = Commerce.Session.instance.productCatalogStore.Context.ChannelId;
                var asyncResult = new Commerce.AsyncResult();
                var dimensionTypeValue = this._product.Dimensions[this._productDimensionIndex].DimensionTypeValue;
                this.productManager.getDimensionValuesAsync(this._product.RecordId, channelId, dimensionTypeValue, this._selectedValues, null)
                    .done(function (dimensionValues) {
                    _this._selectionOptionsByIndex.setItem(_this._productDimensionIndex, dimensionValues);
                    _this._dimensionOptionsCounts[_this._productDimensionIndex] = dimensionValues.length;
                    if (dimensionValues.length === 1) {
                        _this.makeSelection(dimensionValues[0]).done(function (selectionCompleted) {
                            asyncResult.resolve(selectionCompleted);
                        }).fail(function (errors) {
                            asyncResult.reject(errors);
                        });
                    }
                    else {
                        _this.update();
                        asyncResult.resolve(false);
                    }
                }).fail(function (errors) {
                    asyncResult.reject(errors);
                });
                return asyncResult;
            };
            SelectVariantViewModel.prototype.update = function () {
                var dimensionTypeValue = this._product.Dimensions[this._productDimensionIndex].DimensionTypeValue;
                this.selectionType(Commerce.ProductPropertiesHelper.getDimensionString(dimensionTypeValue));
                this.selectionOptions(this._selectionOptionsByIndex.getItem(this._productDimensionIndex));
                this.selectedValuesText(Commerce.SimpleProductHelper.getProductDimensionsDescription(this._selectedValues));
                this.allowUndoPreviousSelection(this.getPreviousDimensionIndexWithMultipleOptions() !== -1);
            };
            SelectVariantViewModel.prototype.getPreviousDimensionIndexWithMultipleOptions = function () {
                var index = this._productDimensionIndex - 1;
                while (index > -1 && this._dimensionOptionsCounts[index] <= 1) {
                    --index;
                }
                return index;
            };
            return SelectVariantViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.SelectVariantViewModel = SelectVariantViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var SelectWarehouseLocationViewModel = (function (_super) {
            __extends(SelectWarehouseLocationViewModel, _super);
            function SelectWarehouseLocationViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this.reloadWarehouseLocationsCallback = ko.observable(function () { return; });
                _this.searchText = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.isBusyFlag = ko.observable(false);
                _this._isBusyWhen(ko.computed(function () { return _this.isBusyFlag(); }));
                return _this;
            }
            SelectWarehouseLocationViewModel.prototype.getWarehouseLocationsAsync = function (pageSize, skip) {
                return this.warehouseManager.searchLocationsAsync(Commerce.ApplicationContext.Instance.deviceConfiguration.InventLocationId, this.searchText(), pageSize, skip)
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            SelectWarehouseLocationViewModel.prototype.performWarehouseLocationSearch = function () {
                this.reloadWarehouseLocationsCallback()();
            };
            return SelectWarehouseLocationViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.SelectWarehouseLocationViewModel = SelectWarehouseLocationViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var SelectWarehouseViewModel = (function (_super) {
            __extends(SelectWarehouseViewModel, _super);
            function SelectWarehouseViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this.reloadWarehousesCallback = ko.observable(function () { return; });
                _this.searchText = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.isBusyFlag = ko.observable(false);
                _this._isBusyWhen(ko.computed(function () { return _this.isBusyFlag(); }));
                return _this;
            }
            SelectWarehouseViewModel.prototype.getWarehousesAsync = function (pageSize, skip) {
                return this.warehouseManager.searchWarehousesAsync(this.searchText(), pageSize, skip)
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            SelectWarehouseViewModel.prototype.performWarehouseSearch = function () {
                this.reloadWarehousesCallback()();
            };
            return SelectWarehouseViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.SelectWarehouseViewModel = SelectWarehouseViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var SettingsViewModel = (function (_super) {
            __extends(SettingsViewModel, _super);
            function SettingsViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                _this.NAME_VALUE_TEMPLATE = "{0} {1}";
                _this.MEMORY_USAGE_TEMPLATE_IN_MB = "{0} MB";
                _this.MEMORY_USAGE_TEMPLATE_IN_GB = "{0} GB";
                _this._developerModeUserControlID = "developerModeViewModel";
                Commerce.ThrowIf.argumentIsNotObject(options, "options");
                Commerce.ThrowIf.argumentIsNotObject(options.taskRecorder, "options.taskRecorder");
                Commerce.ThrowIf.argumentIsNotObject(options.testRecorder, "options.testRecorder");
                _this._taskRecorder = options.taskRecorder;
                _this._testRecorder = options.testRecorder;
                var rawBuildDate = Commerce.Host.instance.application.getApplicationBuildDate();
                if (Commerce.ObjectExtensions.isNullOrUndefined(rawBuildDate)) {
                    _this.buildDate = ko.observable(Commerce.StringExtensions.EMPTY);
                }
                else {
                    var dateTimeFormatter = Commerce.Host.instance.globalization.getDateTimeFormatterWithoutChannelTimeZone(Commerce.Host.Globalization.DateTimeFormat.SHORT_DATE);
                    var formattedDate = dateTimeFormatter.format(rawBuildDate);
                    _this.buildDate = ko.observable(Commerce.StringExtensions.format(_this.NAME_VALUE_TEMPLATE, Commerce.ViewModelAdapter.getResourceString("string_8"), formattedDate));
                }
                _this.isBuildDateAvailable = ko.computed(function () {
                    return !Commerce.StringExtensions.isEmpty(_this.buildDate());
                });
                _this.applicationVersion = ko.observable(Commerce.StringExtensions.format(_this.NAME_VALUE_TEMPLATE, Commerce.ViewModelAdapter.getResourceString("string_2"), Commerce.ViewModelAdapter.getApplicationVersion()));
                _this.applicationPublisher = ko.observable(Commerce.StringExtensions.format(_this.NAME_VALUE_TEMPLATE, Commerce.ViewModelAdapter.getResourceString("string_9"), Commerce.ViewModelAdapter.getApplicationPublisher()));
                _this.appSessionId = ko.observable(TsLogging.LoggerBase.getAppSessionId());
                _this.userSessionId = ko.observable(TsLogging.LoggerBase.getUserSessionId());
                _this.isDeveloperModeEnabled = ko.observable(Commerce.Helpers.DeveloperModeHelper.isDeveloperMode());
                if (Commerce.Utilities.LogonHelper.isLoggedOn() && !Commerce.ObjectExtensions.isNullOrUndefined(_this.applicationContext.tillLayoutProxy)) {
                    _this.layoutId = ko.observable(_this.applicationContext.tillLayoutProxy.getTillLayoutId());
                    _this.layoutResolution = ko.observable(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_7422"), _this.applicationContext.tillLayoutProxy.getTillLayoutWidth(), _this.applicationContext.tillLayoutProxy.getTillLayoutHeight()));
                }
                else {
                    _this.layoutId = ko.observable(Commerce.StringExtensions.EMPTY);
                    _this.layoutResolution = ko.observable(Commerce.StringExtensions.EMPTY);
                }
                _this.refreshWindowResolution();
                if (Commerce.Host.instance.application.getCurrentMemoryUsageInMB() > SettingsViewModel.GB_TO_MB_RATIO) {
                    _this.appCurrentMemoryUsage = ko.observable(Commerce.StringExtensions.format(_this.MEMORY_USAGE_TEMPLATE_IN_GB, Math.round(Commerce.Host.instance.application.getCurrentMemoryUsageInMB() / SettingsViewModel.GB_TO_MB_RATIO)));
                }
                else {
                    _this.appCurrentMemoryUsage = ko.observable(Commerce.StringExtensions.format(_this.MEMORY_USAGE_TEMPLATE_IN_MB, Math.round(Commerce.Host.instance.application.getCurrentMemoryUsageInMB())));
                }
                if (Commerce.Host.instance.application.getAppMemoryUsageLimitInMB() > SettingsViewModel.GB_TO_MB_RATIO) {
                    _this.appMemoryUsageLimit = ko.observable(Commerce.StringExtensions.format(_this.MEMORY_USAGE_TEMPLATE_IN_GB, Math.round(Commerce.Host.instance.application.getAppMemoryUsageLimitInMB() / SettingsViewModel.GB_TO_MB_RATIO)));
                }
                else {
                    _this.appMemoryUsageLimit = ko.observable(Commerce.StringExtensions.format(_this.MEMORY_USAGE_TEMPLATE_IN_MB, Math.round(Commerce.Host.instance.application.getAppMemoryUsageLimitInMB())));
                }
                _this.areRecordingsAllowed = ko.computed(function () { return _this._isCreateRecordingAllowed(); });
                _this.isTestRecorderAllowed = Commerce.Host.instance.application.getBrowserType() === Commerce.Client.Entities.BrowserType.Chrome &&
                    Commerce.Host.instance.application.getApplicationType() === Commerce.Proxy.Entities.ApplicationTypeEnum.CloudPos &&
                    !Commerce.Config.isPhone;
                _this.isMemoryUsageVisible = ko.computed(function () {
                    return Commerce.Host.instance.application.getAppMemoryUsageLimitInMB() !== 0;
                });
                var manualOfflineBeforeSignIn = Commerce.ObjectExtensions.isNullOrUndefined(Commerce.ApplicationContext.Instance.deviceConfiguration.AllowManualOfflineBeforeSignIn) ?
                    false : Commerce.ApplicationContext.Instance.deviceConfiguration.AllowManualOfflineBeforeSignIn;
                _this.showDatabaseConnectionStatus = ko.computed(function () {
                    return (!Commerce.Session.instance.isLoggedOn
                        && Commerce.Utilities.OfflineHelper.isOfflineEnabled() && manualOfflineBeforeSignIn);
                });
                _this.connectionStatus = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.connectionButtonText = ko.observable(Commerce.StringExtensions.EMPTY);
                _this._updateConnectionStatus();
                _this.legalTermsUrl = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.privacyAndCookiesUrl = ko.observable(Commerce.StringExtensions.EMPTY);
                var legalTermsUrl = Commerce.ApplicationContext.Instance.deviceConfiguration.SystemLegalTermsUrl;
                var privacyAndCookiesUrl = Commerce.ApplicationContext.Instance.deviceConfiguration.SystemPrivacyStatementUrl;
                if (!Commerce.StringExtensions.isNullOrWhitespace(legalTermsUrl)) {
                    _this.legalTermsUrl(encodeURI(legalTermsUrl));
                }
                if (!Commerce.StringExtensions.isNullOrWhitespace(privacyAndCookiesUrl)) {
                    _this.privacyAndCookiesUrl(encodeURI(privacyAndCookiesUrl));
                }
                _this.extensionPackagesViewModel = new ViewModels.ExtensionPackagesViewModel(context);
                return _this;
            }
            SettingsViewModel.prototype.init = function () {
                var appNameId = Commerce.Host.instance.application.getApplicationName();
                this.applicationName = ko.observable(appNameId);
            };
            SettingsViewModel.prototype.setTutorial = function (value) {
                var _this = this;
                this._tutorial = value;
                this.enableBubbleTour = ko.observable(!this._tutorial.isBubbleTourDisabled());
                this.enableBubbleTour.subscribe(function (value) {
                    _this._tutorial.setBubbleTourDisabled(!value);
                });
                this.enableVideoTutorial = ko.observable(!this._tutorial.isTutorialVideoDisabled());
                this.enableVideoTutorial.subscribe(function (value) {
                    _this._tutorial.setTutorialVideoDisabled(!value);
                });
            };
            Object.defineProperty(SettingsViewModel.prototype, "developerModeUserControlID", {
                get: function () {
                    return this._developerModeUserControlID;
                },
                enumerable: true,
                configurable: true
            });
            SettingsViewModel.prototype.refreshDeveloperModeView = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.developerModeViewModel) && Commerce.ObjectExtensions.isFunction(this.developerModeViewModel.refresh)) {
                    this.developerModeViewModel.refresh();
                }
            };
            SettingsViewModel.prototype.resetApplicationHandlerAsync = function () {
                if (Commerce.Session.instance.connectionStatus !== Commerce.Client.Entities.ConnectionStatusType.Online) {
                    Commerce.NotificationHandler.displayErrorMessage(Commerce.ViewModelAdapter.getResourceString("string_7406"));
                    return Commerce.AsyncResult.createResolved();
                }
                else {
                    var correlationId_2 = Commerce.LoggerHelper.getNewCorrelationId();
                    var dialogRequest = new Commerce.ShowPresetButtonMessageDialogClientRequest(correlationId_2, {
                        title: Commerce.ViewModelAdapter.getResourceString("string_7429"),
                        message: Commerce.ViewModelAdapter.getResourceString("string_7428"),
                        showCloseX: true,
                        buttonCombination: Commerce.MessageBoxButtons.YesNo
                    });
                    Commerce.RetailLogger.resetApplicationStarted(correlationId_2);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(dialogRequest))
                        .done(function (response) {
                        if (!response.canceled && response.data.result.dialogResult === Commerce.Client.Entities.Dialogs.PresetResultValues.YES) {
                            Commerce.RetailLogger.coreStorageClearInitiated(correlationId_2, "resetApplicationHandler");
                            Commerce.Helpers.DeveloperModeHelper.resetAllParametersToDefault(correlationId_2);
                            Commerce.ApplicationStorage.clear();
                            Commerce.Session.instance.resetSession();
                            Commerce.ApplicationContext.Instance = null;
                            Commerce.Config.retailServerUrl = Commerce.StringExtensions.EMPTY;
                            Commerce.EventProxy.Instance.raiseCustomEvent("DeviceDeactivatedEvent");
                            Commerce.Utilities.OfflineHelper.stopOffline();
                            Commerce.Helpers.DeviceActivationHelper.navigateToGetStartedPage();
                            Commerce.RetailLogger.resetApplicationSucceeded(correlationId_2);
                        }
                        else {
                            Commerce.RetailLogger.resetApplicationCanceled(correlationId_2);
                        }
                    }).fail(function (errors) {
                        Commerce.RetailLogger.resetApplicationFailed(correlationId_2);
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }
            };
            SettingsViewModel.prototype.toggleConnection = function () {
                var _this = this;
                var CORRELATION_ID = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.viewModelSettingsToggleConnectionButtonClicked(CORRELATION_ID);
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var request = new Commerce.ToggleConnectionRequest(CORRELATION_ID);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                        .fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    }).always(function () {
                        _this._updateConnectionStatus();
                    });
                });
                return this._isBusyUntil(asyncQueue.run());
            };
            SettingsViewModel.prototype.startTutorial = function () {
                var _this = this;
                this._tutorial.startVideoTutorial().onAny(function (result) {
                    _this.enableBubbleTour(!result.isBubbleTourDisabled);
                    _this.enableVideoTutorial(!result.isTutorialVideoOnStartupDisabled);
                });
            };
            SettingsViewModel.prototype.toggleVideoTutorial = function (checked) {
                this.enableVideoTutorial(checked);
            };
            SettingsViewModel.prototype.toggleBubbleTour = function (checked) {
                this.enableBubbleTour(checked);
            };
            SettingsViewModel.prototype.activateTaskRecorder = function () {
                var taskRecorder = this._taskRecorder;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                if (this._testRecorder.isActivated) {
                    Commerce.ViewModelAdapter.displayMessage(Commerce.ErrorTypeEnum.TASK_RECORDER_CANNOT_START_RECORDER_WHEN_ANOTHER_RECORDER_TYPE_IS_RUNNING, Commerce.MessageType.Info, Commerce.MessageBoxButtons.Default, null, null, Commerce.ViewModelAdapter.getResourceString("string_10408"), Commerce.ViewModelAdapter.getResourceString("string_10407"));
                }
                else {
                    Commerce.ViewModelAdapter.navigateBack();
                    try {
                        taskRecorder.activateRecorder(correlationId);
                    }
                    catch (error) {
                        var errors = Commerce.ErrorHelper.toProxyErrors(error);
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    }
                }
            };
            SettingsViewModel.prototype.activateTestRecorder = function () {
                var testRecorder = this._testRecorder;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                if (this._taskRecorder.isActivated) {
                    Commerce.ViewModelAdapter.displayMessage(Commerce.ErrorTypeEnum.TASK_RECORDER_CANNOT_START_RECORDER_WHEN_ANOTHER_RECORDER_TYPE_IS_RUNNING, Commerce.MessageType.Info, Commerce.MessageBoxButtons.Default, null, null, Commerce.ViewModelAdapter.getResourceString("string_10407"), Commerce.ViewModelAdapter.getResourceString("string_10408"));
                }
                else {
                    Commerce.ViewModelAdapter.navigateBack();
                    try {
                        testRecorder.activateRecorder(correlationId);
                    }
                    catch (error) {
                        var errors = Commerce.ErrorHelper.toProxyErrors(error);
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    }
                }
            };
            SettingsViewModel.prototype.refreshWindowResolution = function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.windowResolution)) {
                    this.windowResolution = ko.observable(Commerce.StringExtensions.EMPTY);
                }
                var width = Commerce.CSSHelpers.getApplicationDimensions().width;
                var height = Commerce.CSSHelpers.getApplicationDimensions().height;
                this.windowResolution(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_7422"), width, height));
            };
            SettingsViewModel.prototype._updateConnectionStatus = function () {
                if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                    this.connectionStatus(Commerce.ViewModelAdapter.getResourceString("string_77"));
                    this.connectionButtonText(Commerce.ViewModelAdapter.getResourceString("string_6640"));
                }
                else {
                    this.connectionStatus(Commerce.ViewModelAdapter.getResourceString("string_78"));
                    this.connectionButtonText(Commerce.ViewModelAdapter.getResourceString("string_6605"));
                }
            };
            SettingsViewModel.prototype._isCreateRecordingAllowed = function () {
                var deviceConfiguration = Commerce.ApplicationContext.Instance.deviceConfiguration;
                return deviceConfiguration.CreateRecording;
            };
            SettingsViewModel.GB_TO_MB_RATIO = 1024;
            return SettingsViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.SettingsViewModel = SettingsViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var ShiftViewModel = (function (_super) {
            __extends(ShiftViewModel, _super);
            function ShiftViewModel(context) {
                return _super.call(this, context) || this;
            }
            ShiftViewModel.prototype.openOrResumeShift = function (operatorId) {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                var shiftAction;
                asyncQueue.enqueue(function () {
                    return _this.getShiftActions(operatorId)
                        .done(function (availableShiftActions) {
                        _this._availableShiftActions = availableShiftActions;
                    });
                }).enqueue(function () {
                    if (_this._availableShiftActions.shouldSkipDialog) {
                        shiftAction = Commerce.Activities.ShiftActionType.AlreadyOpen;
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                    else {
                        var activity_2 = new Commerce.Activities.GetShiftActionActivity({ shiftActions: _this._availableShiftActions });
                        return activity_2.execute().done(function () {
                            if (Commerce.ObjectExtensions.isNullOrUndefined(activity_2.response)) {
                                asyncQueue.cancel();
                            }
                            else {
                                shiftAction = activity_2.response.shiftActionType;
                            }
                        });
                    }
                }).enqueue(function () {
                    switch (shiftAction) {
                        case Commerce.Activities.ShiftActionType.AlreadyOpen:
                            break;
                        case Commerce.Activities.ShiftActionType.NewShift:
                            return asyncQueue.cancelOn(_this.startNewShift().run());
                        case Commerce.Activities.ShiftActionType.ExistingShift:
                            var sharedShifts = _this._availableShiftActions.reusableShifts.filter(function (shift) {
                                return shift.IsShared;
                            });
                            var cashDrawers = _this.getCashDrawersFromProfile();
                            var sharedCashDrawer = Commerce.ArrayExtensions.firstOrUndefined(cashDrawers, function (c) { return c.IsSharedShiftDrawer; });
                            if (_this._availableShiftActions.reusableShifts.length === 1 &&
                                !Commerce.ObjectExtensions.isNullOrUndefined(sharedCashDrawer) && sharedShifts.length === 1) {
                                var singleShift = Commerce.ArrayExtensions.firstOrUndefined(sharedShifts);
                                return asyncQueue.cancelOn(_this.useOrResumeSelectedShift(singleShift).run());
                            }
                            else {
                                return asyncQueue.cancelOn(_this.resumeShift().run());
                            }
                        default:
                            Commerce.Session.instance.Shift = null;
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                });
                return asyncQueue.run();
            };
            ShiftViewModel.prototype.openShiftAsync = function (cashDrawerName, isShared) {
                var _this = this;
                if (!Commerce.ObjectExtensions.isBoolean(isShared)) {
                    isShared = false;
                }
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                    return _this.storeOperationsManager.openShiftAsync(isShared ? Commerce.StringExtensions.EMPTY : cashDrawerName, isShared, correlationId)
                        .done(function (shift) {
                        Commerce.Session.instance.AddToOrUpdateOpenedShifts(shift);
                        Commerce.Session.instance.Shift = shift;
                        Commerce.ShiftHelper.saveCashDrawerOnStorageAsync(cashDrawerName);
                        Commerce.RetailLogger.openShiftSucceeded(Commerce.ShiftHelper.getShiftIdentifier(shift), shift.CashDrawer, shift.StaffId, String(shift.IsShared), shift.StatusValue, correlationId);
                    }).fail(function (errors) {
                        Commerce.RetailLogger.openShiftFailed(Commerce.ErrorHelper.getErrorMessages(errors), correlationId);
                    });
                });
                asyncQueue.enqueue(function () {
                    var postTriggerOptions = { shift: Commerce.Session.instance.Shift };
                    return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostOpenShift, postTriggerOptions);
                });
                return asyncQueue;
            };
            ShiftViewModel.prototype.resumeShiftAsync = function (shift) {
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                return this.storeOperationsManager.resumeShiftAsync(shift.TerminalId, shift.ShiftId, shift.IsShared ? Commerce.StringExtensions.EMPTY : shift.CashDrawer, correlationId)
                    .done(function (updatedShift) {
                    Commerce.RetailLogger.resumeShiftSucceeded(Commerce.ShiftHelper.getShiftIdentifier(updatedShift), updatedShift.CashDrawer, updatedShift.StaffId, String(updatedShift.IsShared), updatedShift.StatusValue, correlationId);
                    Commerce.Session.instance.AddToOrUpdateOpenedShifts(updatedShift);
                    Commerce.Session.instance.Shift = updatedShift;
                    Commerce.ShiftHelper.saveCashDrawerOnStorageAsync(shift.CashDrawer);
                }).fail(function (errors) {
                    Commerce.RetailLogger.resumeShiftFailed(Commerce.ShiftHelper.getShiftIdentifier(shift), shift.CashDrawer, shift.StaffId, String(shift.IsShared), Commerce.ErrorHelper.getErrorMessages(errors), correlationId);
                });
            };
            ShiftViewModel.prototype.useShiftAsync = function (shift) {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                return this.storeOperationsManager.useShiftAsync(shift.TerminalId, shift.ShiftId, correlationId)
                    .done(function (updatedShift) {
                    Commerce.RetailLogger.useShiftSucceeded(Commerce.ShiftHelper.getShiftIdentifier(updatedShift), updatedShift.CashDrawer, updatedShift.StaffId, String(updatedShift.IsShared), updatedShift.StatusValue, correlationId);
                    Commerce.Session.instance.AddToOrUpdateOpenedShifts(updatedShift);
                    Commerce.Session.instance.Shift = updatedShift;
                    if (shift.IsShared) {
                        var cashDrawers = _this.getCashDrawersFromProfile();
                        var sharedCashDrawer = Commerce.ArrayExtensions.firstOrUndefined(cashDrawers, function (c) { return c.IsSharedShiftDrawer; });
                        Commerce.ShiftHelper.saveCashDrawerOnStorageAsync(sharedCashDrawer.DeviceName);
                    }
                    else {
                        Commerce.ShiftHelper.saveCashDrawerOnStorageAsync(shift.CashDrawer);
                    }
                }).fail(function (errors) {
                    Commerce.RetailLogger.useShiftFailed(Commerce.ShiftHelper.getShiftIdentifier(shift), shift.CashDrawer, shift.StaffId, String(shift.IsShared), Commerce.ErrorHelper.getErrorMessages(errors), correlationId);
                });
            };
            ShiftViewModel.prototype.getOpenShiftsAsync = function (correlationId) {
                if (correlationId === void 0) { correlationId = Commerce.StringExtensions.EMPTY; }
                return this.storeOperationsManager.getShiftsAsync(Commerce.Proxy.Entities.ShiftStatus.Open, correlationId);
            };
            ShiftViewModel.prototype.getShiftsFilterByUserRoleAsync = function (filterByUserRole, correlationId) {
                if (correlationId === void 0) { correlationId = Commerce.StringExtensions.EMPTY; }
                return this.storeOperationsManager.getShiftsFilterByUserRoleAsync(Commerce.Proxy.Entities.ShiftStatus.Open, filterByUserRole, correlationId);
            };
            ShiftViewModel.prototype.getSuspendedShiftsAsync = function (correlationId) {
                if (correlationId === void 0) { correlationId = Commerce.StringExtensions.EMPTY; }
                return this.storeOperationsManager.getShiftsAsync(Commerce.Proxy.Entities.ShiftStatus.Suspended, correlationId);
            };
            ShiftViewModel.prototype.getShiftActions = function (operatorId) {
                var _this = this;
                var shiftActions = new Commerce.Proxy.Entities.AvailableShiftActions();
                var openShifts;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                    return _this.getOpenShiftsAsync(correlationId)
                        .done(function (result) {
                        openShifts = result;
                        var shiftsReturned = Commerce.ShiftHelper.GetShiftDetailsForLogging(result);
                        Commerce.RetailLogger.getShiftsSucceeded(Commerce.Proxy.Entities.ShiftStatus.Open.toString(), shiftsReturned, Commerce.ShiftHelper.getCurrentShift(), correlationId);
                    }).fail(function (errors) {
                        Commerce.RetailLogger.getShiftsFailed(Commerce.Proxy.Entities.ShiftStatus.Open.toString(), Commerce.ShiftHelper.getCurrentShift(), Commerce.ErrorHelper.getErrorMessages(errors), correlationId);
                    });
                }).enqueue(function () {
                    var autoReusableShift = _this.getAutoReusableShift(openShifts, operatorId);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(autoReusableShift)) {
                        return _this.useShiftAsync(autoReusableShift)
                            .done(function (shift) { shiftActions.shouldSkipDialog = true; });
                    }
                    var permissions = Commerce.Session.instance.CurrentEmployee.Permissions;
                    var isManager = permissions.Roles.some(function (r) { return r.toUpperCase() === ShiftViewModel.MANAGER_PRIVILEGES; });
                    shiftActions.dialogTitle = Commerce.ViewModelAdapter.getResourceString("string_4000");
                    shiftActions.reusableShifts = openShifts;
                    var cashDrawers = _this.getCashDrawersFromProfile();
                    shiftActions.availableCashDrawers = _this.getAvailableCashDrawer(cashDrawers, openShifts, isManager, permissions);
                    if (Commerce.ArrayExtensions.hasElements(shiftActions.availableCashDrawers)) {
                        var correlationId_3 = Commerce.LoggerHelper.getNewCorrelationId();
                        Commerce.RetailLogger.getShiftsCalled(Commerce.Proxy.Entities.ShiftStatus.Suspended.toString(), "true", Commerce.ShiftHelper.getCurrentShift(), correlationId_3);
                        return _this.getSuspendedShiftsAsync(correlationId_3)
                            .done(function (suspendedShifts) {
                            var shiftsReturned = Commerce.ShiftHelper.GetShiftDetailsForLogging(suspendedShifts);
                            Commerce.RetailLogger.getShiftsSucceeded(Commerce.Proxy.Entities.ShiftStatus.Suspended.toString(), shiftsReturned, Commerce.ShiftHelper.getCurrentShift(), correlationId_3);
                            shiftActions.suspendedShifts = suspendedShifts.filter(function (s) {
                                if (s.IsShared && !permissions.AllowManageSharedShift && !isManager) {
                                    return false;
                                }
                                return true;
                            });
                        }).fail(function (errors) {
                            Commerce.RetailLogger.getShiftsFailed(Commerce.Proxy.Entities.ShiftStatus.Suspended.toString(), Commerce.ShiftHelper.getCurrentShift(), Commerce.ErrorHelper.getErrorMessages(errors), correlationId_3);
                        });
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                });
                return asyncQueue.run().map(function () { return shiftActions; });
            };
            ShiftViewModel.prototype.startNewShift = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                var cashDrawer;
                asyncQueue.enqueue(function () {
                    return _this.getCashDrawerSelection(_this._availableShiftActions.availableCashDrawers)
                        .done(function (drawerInputResult) {
                        if (drawerInputResult.canceled) {
                            asyncQueue.cancel();
                        }
                        else {
                            cashDrawer = drawerInputResult.data;
                        }
                    });
                }).enqueue(function () {
                    return _this.openShiftAsync(cashDrawer.DeviceName, cashDrawer.IsSharedShiftDrawer).run();
                });
                return asyncQueue;
            };
            ShiftViewModel.prototype.resumeShift = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var activity = new Commerce.Activities.ResumeShiftActivity({ availableShiftActions: _this._availableShiftActions });
                    activity.responseHandler = function (response) {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(response) || Commerce.ObjectExtensions.isNullOrUndefined(response.shift)) {
                            asyncQueue.cancel();
                            return Commerce.VoidAsyncResult.createResolved();
                        }
                        var asyncResult = new Commerce.VoidAsyncResult();
                        _this.useOrResumeSelectedShift(response.shift).run()
                            .done(function (result) {
                            if (result.canceled) {
                                asyncResult.reject(null);
                            }
                            else {
                                asyncResult.resolve();
                            }
                        })
                            .fail(function (errors) {
                            asyncResult.reject(errors);
                        });
                        return asyncResult;
                    };
                    return activity.execute().done(function () {
                        if (!activity.response) {
                            asyncQueue.cancel();
                            return;
                        }
                    });
                });
                return asyncQueue;
            };
            ShiftViewModel.prototype.useOrResumeSelectedShift = function (shift) {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                var shiftCashDrawer = new Commerce.Proxy.Entities.HardwareProfileCashDrawerClass();
                shiftCashDrawer.DeviceName = Commerce.StringExtensions.EMPTY;
                asyncQueue.enqueue(function () {
                    if (Commerce.StringExtensions.isNullOrWhitespace(shift.CashDrawer)) {
                        var cashDrawers = [];
                        if (Commerce.ArrayExtensions.hasElements(_this._availableShiftActions.availableCashDrawers)) {
                            cashDrawers = _this._availableShiftActions.availableCashDrawers.filter(function (c) {
                                return (c.IsSharedShiftDrawer && shift.IsShared) || (!c.IsSharedShiftDrawer && !shift.IsShared);
                            });
                        }
                        if (!Commerce.ArrayExtensions.hasElements(cashDrawers)) {
                            if (shift.IsShared || Commerce.ArrayExtensions.hasElements(_this._availableShiftActions.availableCashDrawers)) {
                                return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.SHIFT_NOT_ALLOWED_ON_ACTIVE_HARDWARE_PROFILE)]);
                            }
                        }
                        else {
                            return _this.getCashDrawerSelection(cashDrawers)
                                .done(function (drawerSelection) {
                                if (drawerSelection.canceled) {
                                    asyncQueue.cancel();
                                }
                                else {
                                    shiftCashDrawer = drawerSelection.data;
                                }
                            });
                        }
                    }
                    else {
                        shiftCashDrawer = Commerce.ArrayExtensions.firstOrUndefined(_this.getCashDrawersFromProfile(), function (drawer) { return drawer.DeviceName === shift.CashDrawer; });
                        if (Commerce.ObjectExtensions.isNullOrUndefined(shiftCashDrawer)) {
                            Commerce.VoidAsyncResult.createRejected();
                        }
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                }).enqueue(function () {
                    shift.CashDrawer = shiftCashDrawer.DeviceName;
                    if (shift.StatusValue === Commerce.Proxy.Entities.ShiftStatus.Open) {
                        return _this.useShiftAsync(shift);
                    }
                    else if (shift.StatusValue === Commerce.Proxy.Entities.ShiftStatus.Suspended) {
                        return _this.resumeShiftAsync(shift);
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                });
                return asyncQueue;
            };
            ShiftViewModel.prototype.getCashDrawerSelection = function (cashDrawers) {
                var result = { canceled: false, data: null };
                var asyncResult = new Commerce.AsyncResult();
                var activity = new Commerce.Activities.SelectCashDrawerActivity({ cashDrawers: cashDrawers });
                activity.execute().done(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(activity.response)) {
                        result.canceled = true;
                    }
                    else {
                        result.data = activity.response.cashDrawer;
                    }
                    asyncResult.resolve(result);
                });
                return asyncResult;
            };
            ShiftViewModel.prototype.getAutoReusableShift = function (shifts, staffId) {
                var _this = this;
                var autoReusableShifts = shifts.filter(function (shift) {
                    var canUse = shift.StaffId === staffId || shift.CurrentStaffId === staffId;
                    if (shift.IsShared) {
                        canUse = canUse && (shift.CurrentTerminalId === _this.applicationContext.deviceConfiguration.TerminalId);
                    }
                    return canUse;
                });
                if (autoReusableShifts.length === 1) {
                    return autoReusableShifts[0];
                }
                return null;
            };
            ShiftViewModel.prototype.getAvailableCashDrawer = function (allCashDrawers, allOpenedShifts, isManager, permissions) {
                var _this = this;
                var availableCashDrawers = [];
                if (Commerce.ObjectExtensions.isNullOrUndefined(allCashDrawers) ||
                    !Commerce.ArrayExtensions.hasElements(allCashDrawers)) {
                    return availableCashDrawers;
                }
                else {
                    availableCashDrawers = allCashDrawers.filter(function (drawer) {
                        if (allOpenedShifts.some(function (s) { return s.CashDrawer === drawer.DeviceName
                            && s.CurrentTerminalId === _this.applicationContext.deviceConfiguration.TerminalId; })) {
                            return false;
                        }
                        if (drawer.IsSharedShiftDrawer && !isManager && !permissions.AllowManageSharedShift && !permissions.AllowUseSharedShift) {
                            return false;
                        }
                        return true;
                    });
                    return availableCashDrawers;
                }
            };
            ShiftViewModel.prototype.getCashDrawersFromProfile = function () {
                var drawers = [];
                this.applicationContext.hardwareProfile.CashDrawers.forEach(function (cashDrawer) {
                    if (!Commerce.StringExtensions.isNullOrWhitespace(cashDrawer.DeviceName) && cashDrawer.DeviceTypeValue !== Commerce.Proxy.Entities.PeripheralType.None) {
                        drawers.push(cashDrawer);
                    }
                });
                if (!Commerce.ArrayExtensions.hasElements(drawers)) {
                    drawers.push(new Commerce.Proxy.Entities.HardwareProfileCashDrawerClass({
                        DeviceTypeValue: Commerce.Proxy.Entities.PeripheralType.None,
                        DeviceName: Commerce.StringExtensions.EMPTY
                    }));
                }
                return drawers;
            };
            ShiftViewModel.MANAGER_PRIVILEGES = "MANAGERPRIVILEGES";
            return ShiftViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.ShiftViewModel = ShiftViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var ShippingLocation = (function (_super) {
            __extends(ShippingLocation, _super);
            function ShippingLocation(warehouse, store) {
                var _this = _super.call(this, warehouse) || this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(store)) {
                    _this.storeId = store.OrgUnitNumber;
                    _this.storeName = store.OrgUnitName;
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(warehouse.Address)) {
                    _this.warehouseAddressText = Commerce.ViewModelAdapter.getResourceString("string_2587");
                    _this.Address = {};
                }
                else {
                    _this.warehouseAddressText = Commerce.AddressHelper.getFormattedAddressLine(warehouse.Address);
                }
                return _this;
            }
            return ShippingLocation;
        }(Commerce.Proxy.Entities.WarehouseClass));
        ViewModels.ShippingLocation = ShippingLocation;
        var ShippingLocationsViewModel = (function (_super) {
            __extends(ShippingLocationsViewModel, _super);
            function ShippingLocationsViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                _this.selectedShippingLocation = null;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.storeSelectionHandler)) {
                    throw "Invalid storeSelectionCallback provided to ShippingLocationsView.";
                }
                _this._options = options;
                _this.shippingLocations = ko.observableArray([]);
                _this.selectedShippingLocation = ko.observable(null);
                _this.hasSelectedLocation = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedShippingLocation());
                });
                return _this;
            }
            ShippingLocationsViewModel.prototype.loadAsync = function () {
                var _this = this;
                var deliveryModeType = Commerce.Proxy.Entities.DeliveryModeTypeFilter.Shipping;
                var asyncQueue = new Commerce.AsyncQueue();
                var warehouses;
                asyncQueue
                    .enqueue(function () {
                    return _this.warehouseManager.getAvailableFulfillmentLocations(deliveryModeType);
                })
                    .enqueue(function (warehousesResult) {
                    warehouses = warehousesResult;
                    var searchCriteria = new Commerce.Proxy.Entities.OrgUnitLocationSearchCriteriaClass({
                        InventoryLocationIds: warehouses.map(function (item) { return item.InventLocation; }),
                        DeliveryModeTypeFilterValue: deliveryModeType
                    });
                    return _this.channelManager.searchOrgUnitLocationsAsync(searchCriteria, 0, 0);
                });
                return this._isBusyUntil(asyncQueue.run())
                    .done(function (queueResult) {
                    var stores = queueResult.data;
                    var shippingLocations = [];
                    warehouses.forEach(function (warehouse) {
                        var relatedStores = stores
                            .filter(function (s) { return warehouse.InventLocation === s.InventoryLocationId; });
                        if (!Commerce.ArrayExtensions.hasElements(relatedStores)) {
                            shippingLocations.push(new ShippingLocation(warehouse, null));
                        }
                        else {
                            relatedStores.forEach(function (s) {
                                shippingLocations.push(new ShippingLocation(warehouse, s));
                            });
                        }
                    });
                    _this.shippingLocations(shippingLocations);
                })
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            ShippingLocationsViewModel.prototype.onHidden = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._options.storeSelectionHandler)) {
                    this._options.storeSelectionHandler.cancel();
                }
            };
            ShippingLocationsViewModel.prototype.selectShippingLocations = function (shippingLocations) {
                var selectedShippingLocation;
                if (Commerce.ArrayExtensions.hasElements(shippingLocations)) {
                    selectedShippingLocation = shippingLocations[0];
                }
                this.selectedShippingLocation(selectedShippingLocation);
            };
            ShippingLocationsViewModel.prototype.setFulfillmentWarehouse = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.selectedShippingLocation())) {
                    this._options.storeSelectionHandler.select(this.selectedShippingLocation(), function () {
                        return;
                    }, function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }
            };
            return ShippingLocationsViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.ShippingLocationsViewModel = ShippingLocationsViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var ShippingMethodsViewModel = (function (_super) {
            __extends(ShippingMethodsViewModel, _super);
            function ShippingMethodsViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw new Error("Invalid options passed to the ShippingMethodsViewModel constructor: options cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.selectionHandler)) {
                    throw new Error("Invalid options passed to the ShippingMethodsViewModel constructor: options.selectionHandler cannot be null or undefined.");
                }
                _this._options = options;
                _this._isViewModelLoaded = ko.observable(false);
                _this._allLocations = [];
                _this._isChangeShippingLocationFeatureEnabled =
                    Commerce.ApplicationSession.instance.featureStateContext.isFeatureEnabled(Commerce.Client.Entities.FeatureNameEnum.ChangeShippingLocationFeature);
                _this.showAllResultsText = _this._isChangeShippingLocationFeatureEnabled
                    ? ko.observable(Commerce.ViewModelAdapter.getResourceString("string_2562"))
                    : ko.observable(Commerce.ViewModelAdapter.getResourceString("string_2556"));
                _this.cartLines = [];
                _this._cartLinesWithShippingMethod = [];
                _this.shippingMethods = ko.observableArray([]);
                _this.shippingAddress = ko.observable(null);
                _this.storeAddress = ko.observable(null);
                _this._selectionInProgress = ko.observable(false);
                _this._isBusyWhen(_this._selectionInProgress);
                _this.addressPurposeLoaded = ko.observable(false);
                if (Commerce.ObjectExtensions.isNullOrUndefined(ShippingMethodsViewModel._viewExtensionsManager)) {
                    _this._extensionViewControllers = [];
                }
                else {
                    _this._extensionViewControllers = ShippingMethodsViewModel._viewExtensionsManager.getExtensionViewControllers();
                    _this._extensionViewControllers.forEach(function (vc) {
                        vc.addMessageHandler("ShippingAddressChanged", _this._shippingMethodsShippingAddressChangedData.bind(_this));
                    });
                }
                _this._correlationId = (!Commerce.StringExtensions.isNullOrWhitespace(_this._options.correlationId))
                    ? _this._options.correlationId
                    : Commerce.LoggerHelper.getNewCorrelationId();
                if (Commerce.ArrayExtensions.hasElements(_this._options.cartLines)) {
                    _this.cartLines = _this._options.cartLines;
                }
                _this._selectedShippingLocation = _this._options.selectedShippingLocation;
                _this.selectedStore = Commerce.ObjectExtensions.isNullOrUndefined(_this._options.selectedStore)
                    ? Commerce.ApplicationContext.Instance.storeInformation
                    : _this._options.selectedStore;
                _this._updateStoreAddress();
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options.shippingAddress) && !Commerce.NumberExtensions.isNullOrZero(options.shippingAddress.RecordId)) {
                    _this.shippingAddress(ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(options.shippingAddress));
                }
                else if (Commerce.ArrayExtensions.hasElements(_this._options.cartLines)) {
                    var cartLine = void 0;
                    cartLine = Commerce.ArrayExtensions.firstOrUndefined(_this.cartLines, function (element) {
                        return !Commerce.ObjectExtensions.isNullOrUndefined(element.ShippingAddress);
                    });
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(cartLine)) {
                        _this.shippingAddress(cartLine.ShippingAddress);
                    }
                }
                _this._extensionViewControllers.forEach(function (vc) {
                    vc.init({ shippingAddress: _this.shippingAddress() });
                });
                _this._onShippingAddressSubscription = _this.shippingAddress.subscribe(function (newValue) {
                    _this._sendMessageToExtensions("ShippingAddressUpdated", { shippingAddress: newValue, customer: _this.customer });
                    if (_this._isViewModelLoaded()) {
                        _this._getShippingMethods(newValue);
                    }
                });
                _this._customerName = ko.observable(Commerce.StringExtensions.EMPTY);
                _this._isCustomerLoaded = ko.observable(false);
                _this.selectionHandler = _this._options.selectionHandler;
                _this.totalCustomerAddressesString = ko.observable("");
                _this.totalAddressesVisibility = ko.observable(false);
                return _this;
            }
            Object.defineProperty(ShippingMethodsViewModel, "viewExtensionManager", {
                set: function (manager) {
                    ShippingMethodsViewModel._viewExtensionsManager = manager;
                },
                enumerable: true,
                configurable: true
            });
            ShippingMethodsViewModel.prototype.loadAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue
                    .enqueue(function () {
                    if (_this._isChangeShippingLocationFeatureEnabled) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(_this._options.selectedShippingLocation)
                            && !Commerce.ObjectExtensions.isNullOrUndefined(_this._options.selectedShippingLocation.storeId)) {
                            var searchStoreCriteria = { StoreNumber: _this._options.selectedShippingLocation.storeId };
                            return _this._isBusyUntil(_this.channelManager.searchOrgUnitsAsync(searchStoreCriteria, 1, 0))
                                .done(function (stores) {
                                _this.selectedStore = Commerce.ArrayExtensions.firstOrUndefined(stores);
                            })
                                .recoverOnFailure(function (errors) {
                                _this._selectedShippingLocation = null;
                                _this._updateStoreAddress();
                                Commerce.NotificationHandler.displayClientErrors(errors);
                                return Commerce.AsyncResult.createResolved();
                            });
                        }
                        else {
                            return Commerce.AsyncResult.createResolved();
                        }
                    }
                    else {
                        return _this._getAllStoresAsync();
                    }
                })
                    .enqueue(function () {
                    var getAddressPurposesServiceRequest = new Commerce.GetAddressPurposesServiceRequest(_this._correlationId);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getAddressPurposesServiceRequest)).done(function () {
                        _this.addressPurposeLoaded(true);
                    });
                })
                    .enqueue(function () { return _this._getCustomer(); })
                    .enqueue(function () { return _this._getShippingMethods(_this.shippingAddress()); });
                return this._isBusyUntil(asyncQueue.run())
                    .fail(function (errors) { return Commerce.NotificationHandler.displayClientErrors(errors); })
                    .always(function () { return _this._isViewModelLoaded(true); });
            };
            ShippingMethodsViewModel.prototype.dispose = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._onShippingAddressSubscription)) {
                    this._onShippingAddressSubscription.dispose();
                }
            };
            ShippingMethodsViewModel.prototype.onShown = function () {
                this._cancelSelectionHandlerOnHidden = true;
            };
            ShippingMethodsViewModel.prototype.onHidden = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.selectionHandler) && this._cancelSelectionHandlerOnHidden) {
                    this.selectionHandler.cancel();
                }
            };
            ShippingMethodsViewModel.prototype.selectShippingMethod = function (shippingMethod) {
                var _this = this;
                var fulfillmentStoreId = Commerce.ObjectExtensions.isNullOrUndefined(this.selectedStore)
                    ? Commerce.ApplicationContext.Instance.storeInformation.OrgUnitNumber
                    : this.selectedStore.OrgUnitNumber;
                var response = {
                    cartLines: this._cartLinesWithShippingMethod,
                    shippingAddress: this.shippingAddress(),
                    shippingMethod: shippingMethod,
                    fulfillmentStoreId: fulfillmentStoreId,
                    shipFromAddress: this.storeAddress(),
                };
                this._selectionInProgress(true);
                this.selectionHandler.select(response, function () {
                    _this._selectionInProgress(false);
                }, function (errors) {
                    _this._selectionInProgress(false);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            Object.defineProperty(ShippingMethodsViewModel.prototype, "isShippingAddressProvided", {
                get: function () {
                    var shippingAddress = this.shippingAddress();
                    return (!Commerce.ObjectExtensions.isNullOrUndefined(shippingAddress)
                        && !Commerce.NumberExtensions.isNullOrZero(shippingAddress.RecordId));
                },
                enumerable: true,
                configurable: true
            });
            ShippingMethodsViewModel.prototype.createCustomerAsync = function () {
                var _this = this;
                this._cancelSelectionHandlerOnHidden = false;
                var customerSelectionHandler = new Commerce.CancelableSelectionHandler(function (customer) {
                    var returnOptions = {
                        cartLines: _this.cartLines,
                        shippingAddress: null,
                        selectionHandler: _this.selectionHandler,
                        selectedStore: _this.selectedStore,
                        selectedShippingLocation: _this._selectedShippingLocation,
                        correlationId: _this._correlationId
                    };
                    Commerce.ViewModelAdapter.collapseAndNavigate("ShippingMethodsView", returnOptions);
                }, function () {
                    if (!Commerce.ViewModelAdapter.isInView("ShippingMethodsView")) {
                        _this.selectionHandler.cancel();
                    }
                }, function (customer) {
                    var operationOptions = {
                        customer: customer,
                        customerId: customer.AccountNumber,
                        cartAffiliations: [],
                        correlationId: _this._correlationId
                    };
                    return Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.SetCustomer, operationOptions);
                });
                var options = {
                    customerSelectionHandler: customerSelectionHandler
                };
                return Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.CustomerAdd, options)
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            ShippingMethodsViewModel.prototype.searchCustomers = function () {
                var _this = this;
                var cart = Commerce.Session.instance.cart;
                this._cancelSelectionHandlerOnHidden = false;
                if (cart.CartTypeValue === Commerce.Proxy.Entities.CartType.CustomerOrder
                    && !Commerce.StringExtensions.isNullOrWhitespace(cart.SalesId)) {
                    Commerce.NotificationHandler.displayErrorMessage("string_4420");
                    return;
                }
                var customerSelectionHandler = new Commerce.CancelableSelectionHandler(function (customer) {
                    var returnOptions = {
                        cartLines: _this.cartLines,
                        shippingAddress: null,
                        selectionHandler: _this.selectionHandler,
                        selectedStore: _this.selectedStore,
                        selectedShippingLocation: _this._selectedShippingLocation,
                        correlationId: _this._correlationId
                    };
                    Commerce.ViewModelAdapter.collapseAndNavigate("ShippingMethodsView", returnOptions);
                }, function () {
                    if (!Commerce.ViewModelAdapter.isInView("ShippingMethodsView")) {
                        _this.selectionHandler.cancel();
                    }
                }, function (customer) {
                    return Commerce.CustomerHelper.crossCompanyCustomerTransferAndAddToCartAsync(_this._correlationId, customer);
                });
                var options = {
                    searchEntity: ViewModels.SearchViewSearchEntity.Customer,
                    searchText: "",
                    selectionMode: ViewModels.SearchViewSelectionMode.Customer,
                    customerSelectionOptions: {
                        customerSelectionHandler: customerSelectionHandler,
                        isOnlySelectionAllowed: false
                    },
                    correlationId: this._correlationId
                };
                Commerce.ViewModelAdapter.navigate("SearchView", options);
            };
            ShippingMethodsViewModel.prototype.viewAllCustomerAddresses = function () {
                var _this = this;
                this._cancelSelectionHandlerOnHidden = false;
                var addressSelectionHandler = new Commerce.CancelableSelectionHandler(function (address) {
                    var returnOptions = {
                        cartLines: _this.cartLines,
                        shippingAddress: address,
                        selectionHandler: _this.selectionHandler,
                        selectedStore: _this.selectedStore,
                        selectedShippingLocation: _this._selectedShippingLocation,
                        correlationId: _this._correlationId
                    };
                    Commerce.ViewModelAdapter.collapseAndNavigate("ShippingMethodsView", returnOptions);
                }, function () {
                    if (!Commerce.ViewModelAdapter.isInView("ShippingMethodsView")) {
                        _this.selectionHandler.cancel();
                    }
                });
                var options = {
                    customer: this.customer,
                    selectionMode: null,
                    addressSelectionHandler: addressSelectionHandler
                };
                Commerce.ViewModelAdapter.navigate("CustomerAddressesView", options);
            };
            ShippingMethodsViewModel.prototype.showAllStores = function () {
                var _this = this;
                this._cancelSelectionHandlerOnHidden = false;
                var createOfflineCustomerOrders = Commerce.ApplicationContext.Instance.deviceConfiguration.CreateOfflineCustomerOrders;
                if (Commerce.Session.instance.connectionStatus !== Commerce.Client.Entities.ConnectionStatusType.Online || createOfflineCustomerOrders) {
                    return Commerce.NotificationHandler.displayErrorMessage("string_2557").map(function () {
                        return { canceled: true };
                    });
                }
                if (!Commerce.ArrayExtensions.hasElements(this._allLocations) && !this._isChangeShippingLocationFeatureEnabled) {
                    return Commerce.NotificationHandler.displayErrorMessage("string_1032").map(function () {
                        return { canceled: true };
                    });
                }
                var triggerOption = {
                    selectedStore: this.selectedStore,
                    selectedWarehouse: this._selectedShippingLocation,
                    cartLines: this.cartLines
                };
                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreChangeShippingOrigin, triggerOption)
                    .done(function (result) {
                    if (result.canceled) {
                        return;
                    }
                    if (_this._isChangeShippingLocationFeatureEnabled) {
                        var storeSelectionHandler = new Commerce.CancelableSelectionHandler(function (shippingLocation) {
                            var shipParameters = {
                                cartLines: _this.cartLines,
                                shippingAddress: _this.shippingAddress(),
                                selectionHandler: _this.selectionHandler,
                                selectedStore: undefined,
                                selectedShippingLocation: shippingLocation,
                                correlationId: _this._correlationId
                            };
                            Commerce.ViewModelAdapter.collapseAndNavigate("ShippingMethodsView", shipParameters);
                        }, function () {
                            if (!Commerce.ViewModelAdapter.isInView("ShippingMethodsView")) {
                                _this.selectionHandler.cancel();
                            }
                        });
                        var options = {
                            storeSelectionHandler: storeSelectionHandler
                        };
                        Commerce.ViewModelAdapter.navigate("ShippingLocationsView", options);
                    }
                    else {
                        var storeSelectionHandler = new Commerce.CancelableSelectionHandler(function (store) {
                            var shipParameters = {
                                cartLines: _this.cartLines,
                                shippingAddress: _this.shippingAddress(),
                                selectionHandler: _this.selectionHandler,
                                selectedStore: store,
                                selectedShippingLocation: undefined,
                                correlationId: _this._correlationId
                            };
                            Commerce.ViewModelAdapter.collapseAndNavigate("ShippingMethodsView", shipParameters);
                        }, function () {
                            if (!Commerce.ViewModelAdapter.isInView("ShippingMethodsView")) {
                                _this.selectionHandler.cancel();
                            }
                        });
                        var options = {
                            locations: _this._allLocations,
                            storeSelectionHandler: storeSelectionHandler
                        };
                        Commerce.ViewModelAdapter.navigate("AllStoresView", options);
                    }
                })
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            ShippingMethodsViewModel.prototype.createCustomerAddress = function () {
                this._editCustomerAddress(null);
            };
            ShippingMethodsViewModel.prototype.editShippingAddress = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.shippingAddress())) {
                    this._editCustomerAddress(this.shippingAddress());
                }
            };
            ShippingMethodsViewModel.prototype._updateStoreAddress = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._selectedShippingLocation)) {
                    this._selectedShippingLocation.Address.Name = this._selectedShippingLocation.InventLocation;
                    this.storeAddress(ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(this._selectedShippingLocation.Address));
                }
                else if (!Commerce.ObjectExtensions.isNullOrUndefined(this.selectedStore)) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this.selectedStore.ShippingWarehouseAddress) &&
                        !Commerce.NumberExtensions.isNullOrZero(this.selectedStore.ShippingWarehouseAddress.RecordId)) {
                        this.selectedStore.ShippingWarehouseAddress.Name =
                            Commerce.StringExtensions.isNullOrWhitespace(this.selectedStore.ShippingWarehouseAddress.Name) ?
                                this.selectedStore.OrgUnitName :
                                this.selectedStore.ShippingWarehouseAddress.Name;
                        this.storeAddress(ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(this.selectedStore.ShippingWarehouseAddress));
                    }
                    else if (!Commerce.NumberExtensions.isNullOrZero(this.selectedStore.OrgUnitAddress.RecordId)) {
                        this.selectedStore.OrgUnitAddress.Name = Commerce.StringExtensions.isNullOrWhitespace(this.selectedStore.OrgUnitAddress.Name) ?
                            this.selectedStore.OrgUnitName :
                            this.selectedStore.OrgUnitAddress.Name;
                        this.storeAddress(ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(this.selectedStore.OrgUnitAddress));
                    }
                    else {
                        this.storeAddress({ Name: Commerce.StringExtensions.EMPTY });
                        Commerce.RetailLogger.viewModelShippingMethodsStoreAddressEmpty(this._correlationId, this.selectedStore.RecordId);
                    }
                }
            };
            ShippingMethodsViewModel.prototype._editCustomerAddress = function (address) {
                var _this = this;
                this._cancelSelectionHandlerOnHidden = false;
                var saveAddressSelectionHandler = new Commerce.CancelableSelectionHandler(function (selection) {
                    var returnOptions = {
                        cartLines: _this.cartLines,
                        shippingAddress: selection.address,
                        selectionHandler: _this.selectionHandler,
                        selectedStore: _this.selectedStore,
                        selectedShippingLocation: _this._selectedShippingLocation,
                        correlationId: _this._correlationId
                    };
                    Commerce.ViewModelAdapter.navigate("ShippingMethodsView", returnOptions);
                }, function () {
                    if (!Commerce.ViewModelAdapter.isInView("ShippingMethodsView")) {
                        _this.selectionHandler.cancel();
                    }
                });
                var addressAddEditViewOptions = {
                    customer: this.customer,
                    address: address,
                    saveAddressSelectionHandler: saveAddressSelectionHandler
                };
                Commerce.ViewModelAdapter.navigate("AddressAddEditView", addressAddEditViewOptions);
            };
            ShippingMethodsViewModel.prototype._getAllStoresAsync = function () {
                var _this = this;
                var result = new Commerce.VoidAsyncResult();
                if (!Commerce.ArrayExtensions.hasElements(this._allLocations)) {
                    this._getAvailableStoresForShippingAsync()
                        .done(function (availableStores) {
                        if (Commerce.ArrayExtensions.hasElements(availableStores)) {
                            _this._allLocations = availableStores;
                        }
                        result.resolve();
                    }).fail(function (errors) {
                        result.reject(errors);
                    });
                }
                else {
                    result.resolve();
                }
                return result;
            };
            ShippingMethodsViewModel.prototype._getAvailableStoresForShippingAsync = function () {
                var searchArea = {
                    Radius: 0,
                    DistanceUnitValue: Commerce.Proxy.Entities.DistanceUnit.Miles
                };
                return this.channelManager.getStoreLocationByArea(searchArea).map(function (storeLocations) {
                    return storeLocations.map(function (storeLocation) {
                        return Commerce.ApplicationContext.Instance.availableStores.getItem(storeLocation.OrgUnitNumber);
                    });
                });
            };
            ShippingMethodsViewModel.prototype._getDeliveryModesAsync = function (shippingAddress, cartLines) {
                if (!Commerce.ArrayExtensions.hasElements(cartLines)) {
                    return Commerce.AsyncResult.createResolved([]);
                }
                var cartLineIds = cartLines.map(function (line) { return line.LineId; });
                var lineShippingAddresses = [];
                for (var i = 0; i < cartLineIds.length; i++) {
                    var lineShippingAddress = new Commerce.Proxy.Entities.LineShippingAddressClass();
                    lineShippingAddress.LineId = cartLineIds[i];
                    lineShippingAddress.ShippingAddress = shippingAddress;
                    lineShippingAddresses.push(lineShippingAddress);
                }
                if (this._isChangeShippingLocationFeatureEnabled
                    && !Commerce.ObjectExtensions.isNullOrUndefined(this._options.selectedShippingLocation)
                    && Commerce.ObjectExtensions.isNullOrUndefined(this._options.selectedShippingLocation.storeId)) {
                    return this.cartManager.getDeliveryModesByShippingAddress(lineShippingAddresses, Commerce.Proxy.Entities.FilterDeliveryModeOption.DoNotFilterByChannel);
                }
                else {
                    return this.cartManager.getDeliveryModesByChannelId(lineShippingAddresses, this.selectedStore.RecordId, cartLineIds);
                }
            };
            ShippingMethodsViewModel.prototype._getCustomerDetails = function (accountNumber) {
                return this.customerManager.getCustomerDetailsAsync(accountNumber);
            };
            ShippingMethodsViewModel.prototype._getShippingMethods = function (shippingAddress) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(shippingAddress) || Commerce.NumberExtensions.isNullOrZero(shippingAddress.RecordId)) {
                    this.shippingMethods([]);
                    return Commerce.AsyncResult.createResolved();
                }
                else {
                    var address = this._getDeliveryAddress(shippingAddress);
                    return this._isBusyUntil(this._getDeliveryModesAsync(address, this.cartLines))
                        .done(function (deliveryOptions) { return _this._successDeliveryModes(deliveryOptions); })
                        .recoverOnFailure(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                        return Commerce.AsyncResult.createResolved();
                    });
                }
            };
            ShippingMethodsViewModel.prototype._getDeliveryAddress = function (customerAddress) {
                return {
                    Name: customerAddress.Name,
                    RecordId: customerAddress.RecordId,
                    ThreeLetterISORegionName: customerAddress.ThreeLetterISORegionName,
                    TwoLetterISORegionName: customerAddress.TwoLetterISORegionName,
                    State: customerAddress.State,
                    County: customerAddress.County,
                    City: customerAddress.City,
                    DistrictName: customerAddress.DistrictName,
                    Street: customerAddress.Street,
                    StreetNumber: customerAddress.StreetNumber,
                    ZipCode: customerAddress.ZipCode,
                    Email: customerAddress.Email,
                    Phone: customerAddress.Phone,
                    Url: customerAddress.Url
                };
            };
            ShippingMethodsViewModel.prototype._successDeliveryModes = function (methods) {
                var cartLinesWithShippingMethod = [];
                var options = new Commerce.Dictionary();
                methods.forEach(function (salesLineOptions) {
                    cartLinesWithShippingMethod.push(salesLineOptions.SalesLineId);
                    salesLineOptions.DeliveryOptions.forEach(function (option) {
                        var value = options.hasItem(option.Code) ? options.getItem(option.Code) : [];
                        value.push(option);
                        options.setItem(option.Code.toString(), value);
                    });
                });
                options = options
                    .filter(function (key, value) {
                    return value.length === methods.length;
                });
                var validOptions = options.getItems().map(function (value) {
                    return value[0];
                });
                if (!Commerce.ArrayExtensions.hasElements(validOptions)) {
                    if (this.cartLines.length > 1) {
                        Commerce.NotificationHandler.displayErrorMessage("string_2544");
                    }
                    else {
                        Commerce.NotificationHandler.displayErrorMessage("string_2540");
                    }
                    return null;
                }
                this._setCartLinesToBeShipped(cartLinesWithShippingMethod);
                this.shippingMethods(validOptions);
            };
            ShippingMethodsViewModel.prototype._getCustomer = function () {
                var _this = this;
                var customerId = Commerce.Session.instance.cart.CustomerId;
                if (!Commerce.StringExtensions.isNullOrWhitespace(customerId)) {
                    return this._isBusyUntil(this._getCustomerDetails(customerId))
                        .done(function (customerDetails) {
                        _this.customer = customerDetails.customer;
                        _this._customerName(_this.customer.Name);
                        var originalShippingAddress = _this.shippingAddress();
                        var shouldSetShippingAddress = (Commerce.ObjectExtensions.isNullOrUndefined(originalShippingAddress)
                            || Commerce.ObjectExtensions.isNullOrUndefined(originalShippingAddress.RecordId)
                            || originalShippingAddress.RecordId === 0)
                            || !_this.customer.Addresses.some(function (a) { return a.RecordId === originalShippingAddress.RecordId; });
                        if (shouldSetShippingAddress) {
                            _this.shippingAddress(customerDetails.primaryAddress);
                        }
                        _this._isCustomerLoaded(true);
                        var nonPrimaryAddresses = _this.customer.Addresses.filter(function (address) { return !address.IsPrimary; });
                        if (Commerce.ArrayExtensions.hasElements(nonPrimaryAddresses)) {
                            _this.totalCustomerAddressesString(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_4836"), _this.customer.Addresses.length));
                            _this.totalAddressesVisibility(true);
                        }
                    })
                        .recoverOnFailure(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                        return Commerce.AsyncResult.createResolved();
                    });
                }
                else {
                    return Commerce.AsyncResult.createResolved();
                }
            };
            ShippingMethodsViewModel.prototype._setCartLinesToBeShipped = function (cartLinesWithShippingMethod) {
                this._cartLinesWithShippingMethod = this.cartLines.filter(function (cartLine) {
                    return cartLinesWithShippingMethod.indexOf(cartLine.LineId) !== -1;
                });
            };
            ShippingMethodsViewModel.prototype._shippingMethodsShippingAddressChangedData = function (data) {
                this.shippingAddress(data.shippingAddress);
            };
            ShippingMethodsViewModel.prototype._sendMessageToExtensions = function (messageType, messageData) {
                if (Commerce.ArrayExtensions.hasElements(this._extensionViewControllers)) {
                    this._extensionViewControllers.forEach(function (vc) {
                        vc.sendMessage(messageType, messageData);
                    });
                }
            };
            return ShippingMethodsViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.ShippingMethodsViewModel = ShippingMethodsViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var ComponentHostViewModelBase = (function (_super) {
            __extends(ComponentHostViewModelBase, _super);
            function ComponentHostViewModelBase(context, childComponentConfig) {
                var _this = _super.call(this, context) || this;
                _this.implementsICommandHostViewModel = true;
                _this._commandViewModels = [];
                _this._isCommandViewModelBusy = ko.observable(false);
                _this._isBusyWhen(_this._isCommandViewModelBusy);
                if (Commerce.ArrayExtensions.hasElements(childComponentConfig.commands.definitions)) {
                    childComponentConfig.commands.definitions.forEach(function (def) {
                        var commandToViewPort = new Commerce.Messaging.PosMessagePort();
                        var viewToCommandPort = new Commerce.Messaging.PosMessagePort();
                        var context = {
                            messageChannel: new Commerce.Messaging.MessageChannelEndpoint(commandToViewPort, viewToCommandPort),
                            runtime: _this.context.runtime,
                            managerFactory: _this.context.managerFactory,
                            peripherals: _this.context.peripherals,
                            stringResourceManager: _this.context.stringResourceManager,
                            navigator: Commerce.ViewModelAdapter,
                            operationsManager: Commerce.Operations.OperationsManager.instance,
                            appSession: Commerce.ApplicationSession.instance
                        };
                        var command = new def(context);
                        var messageChannel = new Commerce.Messaging.MessageChannelEndpoint(viewToCommandPort, commandToViewPort);
                        _this._commandViewModels.push(new ViewModels.CommandViewModel(command, messageChannel));
                    });
                }
                if (Commerce.ArrayExtensions.hasElements(childComponentConfig.commands.extensions)) {
                    childComponentConfig.commands.extensions.forEach(function (command) {
                        _this._commandViewModels.push(new ViewModels.CommandViewModel(command, command.messageChannel));
                    });
                }
                _this._commandViewModels.forEach(function (vm) {
                    vm.addMessageHandler("IsProcessingChanged", function (data) {
                        if (data) {
                            _this._isCommandViewModelBusy(true);
                        }
                        else {
                            var isAnyCommandProcessing = _this._commandViewModels.some(function (vm) {
                                return vm.isProcessing;
                            });
                            _this._isCommandViewModelBusy(isAnyCommandProcessing);
                        }
                    });
                });
                return _this;
            }
            Object.defineProperty(ComponentHostViewModelBase.prototype, "commands", {
                get: function () {
                    return this._commandViewModels;
                },
                enumerable: true,
                configurable: true
            });
            ComponentHostViewModelBase.prototype.addMessageHandler = function (messageType, handler) {
                this._commandViewModels.forEach(function (vm) {
                    vm.addMessageHandler(messageType, handler);
                });
            };
            ComponentHostViewModelBase.prototype.sendMessageToChildComponents = function (messageType, data) {
                this._commandViewModels.forEach(function (vm) {
                    vm.sendMessage(messageType, data);
                });
            };
            return ComponentHostViewModelBase;
        }(ViewModels.ViewModelBase));
        ViewModels.ComponentHostViewModelBase = ComponentHostViewModelBase;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        var ShowJournal;
        (function (ShowJournal) {
            "use strict";
        })(ShowJournal = ViewModels.ShowJournal || (ViewModels.ShowJournal = {}));
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        var ShowJournal;
        (function (ShowJournal) {
            "use strict";
            var ReturnTransactionCommand = (function (_super) {
                __extends(ReturnTransactionCommand, _super);
                function ReturnTransactionCommand(context) {
                    var _this = _super.call(this, context, "returnTransaction", ViewModels.Icons.ProductReturn, "string_4071") || this;
                    _this.context.messageChannel.addMessageHandler("JournalSelected", function (data) {
                        _this._updateSelectedOrder(data.salesOrder);
                    });
                    _this.context.messageChannel.addMessageHandler("JournalSelectionCleared", function () {
                        _this._updateSelectedOrder(undefined);
                    });
                    _this.context.messageChannel.addMessageHandler("ReceiptSelected", function (data) {
                        _this.setIsVisible(false);
                    });
                    _this.context.messageChannel.addMessageHandler("ReceiptSelectionCleared", function () {
                        _this.setIsVisible(true);
                    });
                    _this.setCanExecute(false);
                    return _this;
                }
                ReturnTransactionCommand.prototype.execute = function (args) {
                    var _this = this;
                    if (Commerce.ExtensibleEnumerations.ExtensibleTransactionType.CustomerOrder.equals(this._selectedOrder.TransactionTypeValue)) {
                        return Promise.reject([new Commerce.Proxy.Entities.Error("string_4151")]);
                    }
                    this.setIsProcessing(true);
                    var options = {
                        salesOrder: this._selectedOrder
                    };
                    return this.context.operationsManager.runOperation(Commerce.Operations.RetailOperation.ReturnTransaction, options)
                        .map(function (result) {
                        if (result && !result.canceled) {
                            _this.context.navigator.navigate("CartView");
                        }
                    }).always(function () {
                        _this.setIsProcessing(false);
                    }).getPromise();
                };
                ReturnTransactionCommand.prototype.init = function (data) {
                    return;
                };
                ReturnTransactionCommand.prototype._updateSelectedOrder = function (salesOrder) {
                    this._selectedOrder = salesOrder;
                    this.setCanExecute(this._canReturnSelectedTransaction());
                };
                ReturnTransactionCommand.prototype._canReturnSelectedTransaction = function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(this._selectedOrder)) {
                        return false;
                    }
                    return Commerce.ExtensibleEnumerations.ExtensibleTransactionType.Sales.equals(this._selectedOrder.TransactionTypeValue)
                        && this._selectedOrder.EntryStatusValue !== Commerce.Proxy.Entities.TransactionStatus.Voided;
                };
                return ReturnTransactionCommand;
            }(ViewModels.Command));
            ShowJournal.ReturnTransactionCommand = ReturnTransactionCommand;
        })(ShowJournal = ViewModels.ShowJournal || (ViewModels.ShowJournal = {}));
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        var ShowJournal;
        (function (ShowJournal) {
            "use strict";
            var SelectReceiptsActionCommand = (function (_super) {
                __extends(SelectReceiptsActionCommand, _super);
                function SelectReceiptsActionCommand(context) {
                    var _this = _super.call(this, context, "showReceiptsMenu", ViewModels.Icons.Invoice, "string_4072") || this;
                    if (!_this.context.appSession.userSession.transaction.isCartInProgress()) {
                        _this._showReceiptsAction = {
                            id: "showReceiptCommand",
                            label: _this.context.stringResourceManager.getString("string_4072"),
                            canExecute: false
                        };
                        _this._showGiftReceiptsAction = {
                            id: "showGiftReceiptCommand",
                            label: _this.context.stringResourceManager.getString("string_4181"),
                            canExecute: false
                        };
                        _this._availableActions = [_this._showReceiptsAction, _this._showGiftReceiptsAction];
                        _this.context.messageChannel.addMessageHandler("JournalSelected", function (data) {
                            var canExecute = true;
                            _this._selectedTransaction = data.selectedTransaction;
                            _this._selectedOrder = data.salesOrder;
                            _this._productsInSelectedOrder = data.products;
                            if (Commerce.ObjectExtensions.isNullOrUndefined(_this._selectedTransaction)) {
                                canExecute = false;
                            }
                            else if (_this._mode === ViewModels.ShowJournalMode.ShowJournal
                                && _this._selectedTransaction.TransactionStatusValue === Commerce.Proxy.Entities.TransactionStatus.Voided
                                && !_this.context.appSession.deviceConfiguration.PrintVoidTransactionReceipts) {
                                canExecute = false;
                            }
                            _this._showReceiptsAction.canExecute = canExecute;
                            _this._showGiftReceiptsAction.canExecute = Commerce.ReceiptHelper.canSalesOrderContainGiftReceipt(_this._selectedOrder);
                            _this.setCanExecute(canExecute);
                        });
                        _this.context.messageChannel.addMessageHandler("JournalSelectionCleared", function () {
                            _this._selectedTransaction = undefined;
                            _this._selectedOrder = undefined;
                            _this._productsInSelectedOrder = [];
                            _this._showReceiptsAction.canExecute = false;
                            _this._showGiftReceiptsAction.canExecute = false;
                            _this.setCanExecute(false);
                        });
                        _this.context.messageChannel.addMessageHandler("ReceiptSelected", function (data) {
                            _this.setIsVisible(false);
                        });
                        _this.context.messageChannel.addMessageHandler("ReceiptSelectionCleared", function () {
                            _this.setIsVisible(true);
                        });
                        _this.setCanExecute(false);
                    }
                    else {
                        _this.setIsVisible(false);
                        _this.setCanExecute(false);
                        _this._availableActions = [];
                    }
                    return _this;
                }
                Object.defineProperty(SelectReceiptsActionCommand.prototype, "contextualActions", {
                    get: function () {
                        return this._availableActions;
                    },
                    enumerable: true,
                    configurable: true
                });
                SelectReceiptsActionCommand.prototype.execute = function (args) {
                    if (args.actionId === this._showReceiptsAction.id) {
                        return this._getReceipts();
                    }
                    else if (args.actionId === this._showGiftReceiptsAction.id) {
                        return this._getGiftReceipts();
                    }
                    else {
                        return Promise.resolve();
                    }
                };
                SelectReceiptsActionCommand.prototype.init = function (data) {
                    this._mode = data.mode;
                };
                SelectReceiptsActionCommand.prototype._getReceipts = function () {
                    var _this = this;
                    if (Commerce.ObjectExtensions.isNullOrUndefined(this._selectedTransaction)) {
                        return Promise.resolve();
                    }
                    var selectedReceiptType;
                    if (this._selectedTransaction.TransactionTypeValue === Commerce.ExtensibleEnumerations.ExtensibleTransactionType.OpenDrawer.Value) {
                        selectedReceiptType = Commerce.Proxy.Entities.ReceiptType.OpenDrawer;
                    }
                    else if (this._selectedTransaction.TransactionTypeValue === Commerce.ExtensibleEnumerations.ExtensibleTransactionType.SuspendedTransaction.Value) {
                        selectedReceiptType = Commerce.Proxy.Entities.ReceiptType.SuspendedTransaction;
                    }
                    else if (this.context.appSession.channelConfiguration.UseSalesReceiptAsDefaultReceiptTypeInJournal) {
                        selectedReceiptType = Commerce.Proxy.Entities.ReceiptType.SalesReceipt;
                    }
                    this.setIsProcessing(true);
                    return this._getReceiptsForSelectedSalesOrderAsync(selectedReceiptType)
                        .map(function (receipts) {
                        _this._setSelectedReceipts(receipts, false);
                    }).always(function () {
                        _this.setIsProcessing(false);
                    }).getPromise();
                };
                SelectReceiptsActionCommand.prototype._getGiftReceipts = function () {
                    var _this = this;
                    var giftReceipts;
                    var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                    this.setIsProcessing(true);
                    var products = this._productsInSelectedOrder;
                    var getGiftReceiptsClientRequest = new Commerce.SalesOrders.GetGiftReceiptsClientRequest(correlationId, this._selectedOrder, products, true, true);
                    return Commerce.AsyncResult.fromPromise(this.context.runtime.executeAsync(getGiftReceiptsClientRequest))
                        .map(function (result) {
                        if (!result.canceled) {
                            giftReceipts = result.data.result.receipts;
                            _this._setSelectedReceipts(giftReceipts, true);
                        }
                    }).always(function () {
                        _this.setIsProcessing(false);
                    }).getPromise();
                };
                SelectReceiptsActionCommand.prototype._getReceiptsForSelectedSalesOrderAsync = function (receiptType) {
                    var salesOrder = this._selectedOrder;
                    var salesOrderId = Commerce.StringExtensions.EMPTY;
                    var queryBySalesId = false;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(salesOrder.Id)
                        && (!Commerce.StringExtensions.isEmptyOrWhitespace(salesOrder.Id))
                        && Commerce.StringExtensions.compare(salesOrder.Id, salesOrder.SalesId, true) !== 0) {
                        salesOrderId = salesOrder.Id;
                    }
                    else if (!Commerce.ObjectExtensions.isNullOrUndefined(salesOrder.SalesId) && !Commerce.StringExtensions.isEmptyOrWhitespace(salesOrder.SalesId)) {
                        salesOrderId = salesOrder.SalesId;
                        queryBySalesId = true;
                    }
                    var isRemoteOrder = salesOrder.StoreId !== this.context.appSession.deviceConfiguration.StoreNumber;
                    var salesOrderManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ISalesOrderManagerName);
                    return salesOrderManager.getReceiptsForPrintAsync(salesOrderId, true, receiptType, isRemoteOrder, null, null, true, queryBySalesId, this.context.appSession.hardwareProfile.ProfileId);
                };
                SelectReceiptsActionCommand.prototype._setSelectedReceipts = function (receipts, isGiftReceipt) {
                    if (!Commerce.ArrayExtensions.hasElements(receipts)) {
                        var errors = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.RECEIPT_NOT_AVAILABLE_FOR_ORDER)];
                        Commerce.NotificationHandler.displayClientErrors(errors, "string_4127");
                        return;
                    }
                    var previewAndPrintReceiptMap = new Commerce.Dictionary();
                    receipts.forEach(function (receipt) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(receipt) && !Commerce.ArrayExtensions.hasElements(receipt.Printers)) {
                            var key = receipt.ReceiptTypeValue.toString();
                            if (!Commerce.StringExtensions.isNullOrWhitespace(receipt.LayoutId)) {
                                key += receipt.LayoutId.trim();
                            }
                            previewAndPrintReceiptMap.setItem(key, { previewReceipt: receipt, printReceipts: [] });
                        }
                    });
                    receipts.forEach(function (receipt) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(receipt)
                            && Commerce.ArrayExtensions.hasElements(receipt.Printers)) {
                            var key = receipt.ReceiptTypeValue.toString();
                            if (!Commerce.StringExtensions.isNullOrWhitespace(receipt.LayoutId)) {
                                key += receipt.LayoutId.trim();
                            }
                            var previewAndPrintReceipt = previewAndPrintReceiptMap.getItem(key);
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(previewAndPrintReceipt)) {
                                if (!Commerce.ObjectExtensions.isNullOrUndefined(previewAndPrintReceipt.previewReceipt)) {
                                    if (!Commerce.ArrayExtensions.hasElements(previewAndPrintReceipt.printReceipts)) {
                                        previewAndPrintReceipt.printReceipts = [receipt];
                                    }
                                    else {
                                        previewAndPrintReceipt.printReceipts = previewAndPrintReceipt.printReceipts.concat(receipt);
                                    }
                                    previewAndPrintReceiptMap.setItem(key, previewAndPrintReceipt);
                                }
                                else {
                                    previewAndPrintReceipt.printReceipts = previewAndPrintReceipt.printReceipts.concat(receipt);
                                    previewAndPrintReceiptMap.setItem(key, previewAndPrintReceipt);
                                }
                            }
                            else {
                                previewAndPrintReceiptMap.setItem(key, { previewReceipt: undefined, printReceipts: [receipt] });
                            }
                        }
                    });
                    var receiptsToPreviewAndPrint = [];
                    var canSalesOrderContainGiftReceipt = Commerce.ReceiptHelper.canSalesOrderContainGiftReceipt(this._selectedOrder);
                    previewAndPrintReceiptMap.forEach(function (key, value) {
                        if (canSalesOrderContainGiftReceipt || Commerce.ObjectExtensions.isNullOrUndefined(value.previewReceipt) ||
                            value.previewReceipt.ReceiptTypeValue !== Commerce.Proxy.Entities.ReceiptType.GiftReceipt) {
                            receiptsToPreviewAndPrint.push({ previewReceipt: value.previewReceipt, printReceipts: value.printReceipts });
                        }
                    });
                    if (Commerce.ArrayExtensions.hasElements(receiptsToPreviewAndPrint) && receiptsToPreviewAndPrint.length > 1) {
                        receiptsToPreviewAndPrint.sort(function (receipt1, receipt2) {
                            if (Commerce.ObjectExtensions.isNullOrUndefined(receipt1) || Commerce.ObjectExtensions.isNullOrUndefined(receipt2)) {
                                return 0;
                            }
                            var receipt1PreviewIsValid = !Commerce.ObjectExtensions.isNullOrUndefined(receipt1.previewReceipt)
                                && !Commerce.NumberExtensions.isNullOrNaN(receipt1.previewReceipt.ReceiptTypeValue);
                            var receipt2PreviewIsValid = !Commerce.ObjectExtensions.isNullOrUndefined(receipt2.previewReceipt)
                                && !Commerce.NumberExtensions.isNullOrNaN(receipt2.previewReceipt.ReceiptTypeValue);
                            if (receipt1PreviewIsValid && receipt2PreviewIsValid) {
                                return Commerce.NumberExtensions.compare(receipt1.previewReceipt.ReceiptTypeValue, receipt2.previewReceipt.ReceiptTypeValue);
                            }
                            var receipt1PrintIsValid = Commerce.ArrayExtensions.hasElements(receipt1.printReceipts);
                            var receipt2PrintIsValid = Commerce.ArrayExtensions.hasElements(receipt2.printReceipts);
                            if (receipt1PrintIsValid && receipt2PrintIsValid) {
                                var receipt1PrintReceipts = receipt1.printReceipts.filter(function (r) {
                                    return !Commerce.NumberExtensions.isNullOrNaN(r.ReceiptTypeValue);
                                });
                                var receipt2PrintReceipts = receipt2.printReceipts.filter(function (r) {
                                    return !Commerce.NumberExtensions.isNullOrNaN(r.ReceiptTypeValue);
                                });
                                if (Commerce.ArrayExtensions.hasElements(receipt1PrintReceipts) && Commerce.ArrayExtensions.hasElements(receipt2PrintReceipts)) {
                                    var receipt1PrintReceipt = receipt1PrintReceipts[0];
                                    var receipt2PrintReceipt = receipt2PrintReceipts[0];
                                    if (!Commerce.ObjectExtensions.isNullOrUndefined(receipt1PrintReceipt) && !Commerce.ObjectExtensions.isNullOrUndefined(receipt2PrintReceipt)) {
                                        return Commerce.NumberExtensions.compare(receipt1PrintReceipt.ReceiptTypeValue, receipt2PrintReceipt.ReceiptTypeValue);
                                    }
                                }
                            }
                            return 0;
                        });
                    }
                    this.context.messageChannel.sendMessage("UpdateSelectedReceipt", { isGiftReceipt: isGiftReceipt, receiptData: receiptsToPreviewAndPrint, selectedReceipt: receiptsToPreviewAndPrint[0] });
                };
                return SelectReceiptsActionCommand;
            }(ViewModels.Command));
            ShowJournal.SelectReceiptsActionCommand = SelectReceiptsActionCommand;
        })(ShowJournal = ViewModels.ShowJournal || (ViewModels.ShowJournal = {}));
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        var ShowJournal;
        (function (ShowJournal) {
            "use strict";
            var GetAdvancedSearchCriteriaCommand = (function (_super) {
                __extends(GetAdvancedSearchCriteriaCommand, _super);
                function GetAdvancedSearchCriteriaCommand(context) {
                    var _this = _super.call(this, context, "performAdvancedTransactionSearch", ViewModels.Icons.Search, "string_4567") || this;
                    _this.setIsVisible(false);
                    _this.setCanExecute(false);
                    return _this;
                }
                GetAdvancedSearchCriteriaCommand.prototype.execute = function (args) {
                    var _this = this;
                    if (Commerce.ObjectExtensions.isNullOrUndefined(this._transactionSearchCriteria)) {
                        this._transactionSearchCriteria = { StoreId: this.context.appSession.deviceConfiguration.StoreNumber };
                    }
                    var refiners = Commerce.TransactionSearchCriteriaConverter.getRefiners(this._transactionSearchCriteria, this._customSearchFilterDefinitions);
                    var getRefinerValuesRequest = new Commerce.Refiners.GetRefinerValuesClientRequest(refiners, "string_4189", false, Commerce.ErrorTypeEnum.INVALID_SEARCH_CRITERIA, args.correlationId);
                    return this.context.runtime.executeAsync(getRefinerValuesRequest)
                        .then(function (result) {
                        if (!result.canceled) {
                            _this._transactionSearchCriteria
                                = Commerce.TransactionSearchCriteriaConverter.getTransactionSearchCriteria(result.data.refiners);
                            _this._transactionSearchCriteria.SearchLocationTypeValue = Commerce.Proxy.Entities.SearchLocation.All;
                            _this.context.messageChannel.sendMessage("UpdateTransactionSearchCriteria", _this._transactionSearchCriteria);
                        }
                    });
                };
                GetAdvancedSearchCriteriaCommand.prototype.init = function (data) {
                    var _this = this;
                    if (data.mode === ViewModels.ShowJournalMode.ShowJournal) {
                        this._transactionSearchCriteria = data.transactionSearchCriteria;
                        this._customSearchFilterDefinitions = data.customSearchFilterDefinitions;
                        this.setIsVisible(true);
                        this.setCanExecute(true);
                        this.context.messageChannel.addMessageHandler("ReceiptSelected", function (data) {
                            _this.setIsVisible(false);
                            _this.setCanExecute(false);
                        });
                        this.context.messageChannel.addMessageHandler("ReceiptSelectionCleared", function () {
                            _this.setCanExecute(true);
                            _this.setIsVisible(true);
                        });
                    }
                };
                return GetAdvancedSearchCriteriaCommand;
            }(ViewModels.Command));
            ShowJournal.GetAdvancedSearchCriteriaCommand = GetAdvancedSearchCriteriaCommand;
        })(ShowJournal = ViewModels.ShowJournal || (ViewModels.ShowJournal = {}));
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        var ShowJournal;
        (function (ShowJournal) {
            "use strict";
            var ClearReceiptSelectionCommand = (function (_super) {
                __extends(ClearReceiptSelectionCommand, _super);
                function ClearReceiptSelectionCommand(context) {
                    var _this = _super.call(this, context, "clearReceiptSelection", ViewModels.Icons.Cancel, "string_80") || this;
                    _this.setIsVisible(false);
                    _this.setCanExecute(false);
                    _this.context.messageChannel.addMessageHandler("ReceiptSelected", function (data) {
                        _this.setCanExecute(true);
                        _this.setIsVisible(true);
                    });
                    _this.context.messageChannel.addMessageHandler("ReceiptSelectionCleared", function () {
                        _this.setCanExecute(false);
                        _this.setIsVisible(false);
                    });
                    return _this;
                }
                ClearReceiptSelectionCommand.prototype.execute = function (args) {
                    this.context.messageChannel.sendMessage("ClearSelectedReceipt", undefined);
                    this.setCanExecute(false);
                    this.setIsVisible(false);
                    return Promise.resolve();
                };
                ClearReceiptSelectionCommand.prototype.init = function (data) {
                    return;
                };
                return ClearReceiptSelectionCommand;
            }(ViewModels.Command));
            ShowJournal.ClearReceiptSelectionCommand = ClearReceiptSelectionCommand;
        })(ShowJournal = ViewModels.ShowJournal || (ViewModels.ShowJournal = {}));
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        var ShowJournal;
        (function (ShowJournal) {
            "use strict";
            var PrintReceiptsCommand = (function (_super) {
                __extends(PrintReceiptsCommand, _super);
                function PrintReceiptsCommand(context) {
                    var _this = _super.call(this, context, "showPrintReceiptsMenu", ViewModels.Icons.Print, "string_1808") || this;
                    _this._printThisReceiptAction = {
                        id: "printThisReceiptCommand",
                        label: _this.context.stringResourceManager.getString("string_1809"),
                        canExecute: false
                    };
                    _this._printAllReceiptsAction = {
                        id: "printAllReceiptsCommand",
                        label: _this.context.stringResourceManager.getString("string_1810"),
                        canExecute: false
                    };
                    _this._availableActions = [_this._printThisReceiptAction, _this._printAllReceiptsAction];
                    _this.setIsVisible(false);
                    _this.setCanExecute(false);
                    _this._receiptsToPreviewAndPrint = [];
                    _this.context.messageChannel.addMessageHandler("ReceiptSelected", function (data) {
                        _this._receiptsToPreviewAndPrint = data.receiptData;
                        _this._selectedReceipt = data.selectedReceipt;
                        _this.setIsVisible(true);
                        _this._printAllReceiptsAction.canExecute = _this._receiptsToPreviewAndPrint.some(function (receipt) {
                            return Commerce.ReceiptHelper.canAnyReceiptBePrinted(receipt.printReceipts);
                        });
                        _this._printThisReceiptAction.canExecute = Commerce.ReceiptHelper.canAnyReceiptBePrinted(_this._selectedReceipt.printReceipts);
                        _this.setCanExecute(_this._printAllReceiptsAction.canExecute || _this._printThisReceiptAction.canExecute);
                    });
                    _this.context.messageChannel.addMessageHandler("ReceiptSelectionCleared", function () {
                        _this.setIsVisible(false);
                        _this.setCanExecute(false);
                        _this._receiptsToPreviewAndPrint = [];
                        _this._selectedReceipt = undefined;
                        _this._printAllReceiptsAction.canExecute = false;
                        _this._printThisReceiptAction.canExecute = false;
                    });
                    _this.context.messageChannel.addMessageHandler("JournalSelected", function (data) {
                        _this._selectedSalesOrder = data.salesOrder;
                    });
                    _this.context.messageChannel.addMessageHandler("JournalSelectionCleared", function () {
                        _this._selectedSalesOrder = undefined;
                    });
                    return _this;
                }
                Object.defineProperty(PrintReceiptsCommand.prototype, "contextualActions", {
                    get: function () {
                        return this._availableActions;
                    },
                    enumerable: true,
                    configurable: true
                });
                PrintReceiptsCommand.prototype.execute = function (args) {
                    if (args.actionId === this._printThisReceiptAction.id) {
                        return this._printReceiptsAsync(false);
                    }
                    else if (args.actionId === this._printAllReceiptsAction.id) {
                        return this._printReceiptsAsync(true);
                    }
                    else {
                        return Promise.resolve();
                    }
                };
                PrintReceiptsCommand.prototype.init = function (data) {
                    return;
                };
                PrintReceiptsCommand.prototype._printReceiptsAsync = function (isPrintAll) {
                    var _this = this;
                    if (!this.canExecute) {
                        return Promise.resolve();
                    }
                    var receiptsToPrint = [];
                    if (isPrintAll) {
                        this._receiptsToPreviewAndPrint.forEach(function (receiptsToPreviewAndPrint) {
                            receiptsToPrint = receiptsToPrint.concat(receiptsToPreviewAndPrint.printReceipts);
                        });
                    }
                    else if (!Commerce.ObjectExtensions.isNullOrUndefined(this._selectedReceipt)) {
                        receiptsToPrint = this._selectedReceipt.printReceipts;
                    }
                    if (Commerce.ArrayExtensions.hasElements(receiptsToPrint)) {
                        receiptsToPrint.forEach(function (receiptToPrint) {
                            if (Commerce.ArrayExtensions.hasElements(receiptToPrint.Printers)) {
                                receiptToPrint.Printers.forEach(function (printer) {
                                    if (printer.PrintBehaviorValue !== Commerce.Proxy.Entities.PrintBehavior.Never) {
                                        printer.PrintBehaviorValue = Commerce.Proxy.Entities.PrintBehavior.Always;
                                    }
                                });
                            }
                        });
                    }
                    var printReceiptsRequest = new Commerce.PrintReceiptsClientRequest(Commerce.ReceiptHelper.getPrintableReceipts(receiptsToPrint), this._selectedSalesOrder, true);
                    this.setCanExecute(false);
                    return this.context.runtime.executeAsync(printReceiptsRequest).then(function () {
                        _this.setCanExecute(!Commerce.ObjectExtensions.isNullOrUndefined(_this._selectedReceipt));
                    }).catch(function (reason) {
                        _this.setCanExecute(!Commerce.ObjectExtensions.isNullOrUndefined(_this._selectedReceipt));
                        return Promise.reject(reason);
                    });
                };
                return PrintReceiptsCommand;
            }(ViewModels.Command));
            ShowJournal.PrintReceiptsCommand = PrintReceiptsCommand;
        })(ShowJournal = ViewModels.ShowJournal || (ViewModels.ShowJournal = {}));
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        var ShowJournal;
        (function (ShowJournal) {
            "use strict";
            var EmailReceiptsCommand = (function (_super) {
                __extends(EmailReceiptsCommand, _super);
                function EmailReceiptsCommand(context) {
                    var _this = _super.call(this, context, "showEmailReceiptsMenu", ViewModels.Icons.Email, "string_1828") || this;
                    _this._isReceiptResendFeatureEnabled = Commerce.ApplicationSession.instance.featureStateContext.isFeatureEnabled(Commerce.Client.Entities.FeatureNameEnum.ResendReceiptFromTransactionJournalFeature);
                    _this.setIsVisible(false);
                    _this.setCanExecute(false);
                    _this.context.messageChannel.addMessageHandler("ReceiptSelected", function (data) {
                        _this._isReceiptResendFeatureEnabled = true;
                        _this.setIsVisible(_this._isReceiptResendFeatureEnabled);
                        if (_this._isReceiptResendFeatureEnabled) {
                            _this._selectedReceipt = data.selectedReceipt;
                            var isCommandEnabled = !Commerce.StringExtensions.isNullOrWhitespace(Commerce.ApplicationContext.Instance.storeInformation.EmailReceiptProfileId)
                                && (_this._selectedReceipt.previewReceipt.ReceiptTypeValue === Commerce.Proxy.Entities.ReceiptType.SalesReceipt
                                    || _this._selectedReceipt.previewReceipt.ReceiptTypeValue === Commerce.Proxy.Entities.ReceiptType.SalesOrderReceipt
                                    || _this._selectedReceipt.previewReceipt.ReceiptTypeValue === Commerce.Proxy.Entities.ReceiptType.PickupReceipt);
                            _this.setCanExecute(isCommandEnabled);
                        }
                    });
                    _this.context.messageChannel.addMessageHandler("ReceiptSelectionCleared", function () {
                        _this.setIsVisible(false);
                        _this.setCanExecute(false);
                        _this._selectedReceipt = undefined;
                    });
                    _this.context.messageChannel.addMessageHandler("JournalSelected", function (data) {
                        _this._customer = data.customer;
                        _this._selectedSalesOrder = data.salesOrder;
                    });
                    _this.context.messageChannel.addMessageHandler("JournalSelectionCleared", function () {
                        _this._customer = undefined;
                        _this._selectedSalesOrder = undefined;
                    });
                    return _this;
                }
                EmailReceiptsCommand.prototype.execute = function (args) {
                    return this._sendReceiptEmailAsync(args.correlationId).getPromise();
                };
                EmailReceiptsCommand.prototype.init = function (data) {
                    return;
                };
                EmailReceiptsCommand.prototype._sendReceiptEmailAsync = function (correlationId) {
                    var _this = this;
                    var emailAddress = Commerce.StringExtensions.EMPTY;
                    var asyncQueue = new Commerce.AsyncQueue();
                    var isUpdateCustomerReceiptEmailEnabled = false;
                    asyncQueue.enqueue(function () {
                        var preTriggerOptions = {
                            salesOrder: _this._selectedSalesOrder,
                            customer: _this._customer
                        };
                        return asyncQueue.cancelOn(Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreResendEmailReceipt, preTriggerOptions));
                    }).enqueue(function () {
                        var getReceiptEmailAddressClientRequest = new Commerce.GetCustomerReceiptEmailAddressClientRequest(correlationId, _this._customer);
                        return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(_this.context.runtime.executeAsync(getReceiptEmailAddressClientRequest)));
                    }).enqueue(function (response) {
                        isUpdateCustomerReceiptEmailEnabled = response.data.result.saveEmailOnCustomer;
                        emailAddress = response.data.result.emailAddress;
                        var searchCriteria = new Commerce.Proxy.Entities.SearchReceiptCriteriaClass();
                        searchCriteria.ReceiptTypeValue = _this._selectedReceipt.previewReceipt.ReceiptTypeValue;
                        searchCriteria.TransactionId = _this._selectedSalesOrder.Id;
                        var recipientAddresses = [];
                        var recipientAddress = new Commerce.Proxy.Entities.ElectronicAddressClass({
                            Address: emailAddress,
                            AddressTypeValue: Commerce.Proxy.Entities.ElectronicAddressType.Email
                        });
                        recipientAddresses.push(recipientAddress);
                        var sendReceiptServiceRequest = new Commerce.SendReceiptServiceRequest(correlationId, searchCriteria, recipientAddresses);
                        _this.setIsProcessing(true);
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(sendReceiptServiceRequest))
                            .always(function () {
                            _this.setIsProcessing(false);
                        })
                            .recoverOnFailure(function (errors) {
                            return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.FAILED_TO_SEND_RECEIPT_EMAIL)]);
                        });
                    }).enqueue(function () {
                        if (isUpdateCustomerReceiptEmailEnabled) {
                            _this._customer.ReceiptEmail = emailAddress;
                            var updateCustomerServiceRequest = new Commerce.UpdateCustomerServiceRequest(correlationId, _this._customer);
                            return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(updateCustomerServiceRequest)).recoverOnFailure(function (errors) {
                                return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.FAILED_TO_UPDATE_CUSTOMER_RECEIPT_EMAIL)]);
                            });
                        }
                        else {
                            return Commerce.AsyncResult.createResolved();
                        }
                    });
                    return asyncQueue.run();
                };
                return EmailReceiptsCommand;
            }(ViewModels.Command));
            ShowJournal.EmailReceiptsCommand = EmailReceiptsCommand;
        })(ShowJournal = ViewModels.ShowJournal || (ViewModels.ShowJournal = {}));
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        var ShowJournal;
        (function (ShowJournal) {
            "use strict";
            var PreviewNextReceiptCommand = (function (_super) {
                __extends(PreviewNextReceiptCommand, _super);
                function PreviewNextReceiptCommand(context) {
                    var _this = _super.call(this, context, "previewNextReceipt", ViewModels.Icons.PreviewNext, "string_1811") || this;
                    _this.setIsVisible(false);
                    _this.setCanExecute(false);
                    _this.context.messageChannel.addMessageHandler("ReceiptSelected", function (data) {
                        _this.setIsVisible(true);
                        _this._receiptsToPreviewAndPrint = data.receiptData;
                        _this._isGiftReceipt = data.isGiftReceipt;
                        _this._updateSelectedReceipt(data.selectedReceipt);
                    });
                    _this.context.messageChannel.addMessageHandler("ReceiptSelectionCleared", function () {
                        _this.setIsVisible(false);
                        _this.setCanExecute(false);
                        _this._selectedReceipt = undefined;
                        _this._receiptsToPreviewAndPrint = [];
                        _this._selectedReceiptIndex = -1;
                    });
                    return _this;
                }
                PreviewNextReceiptCommand.prototype.execute = function (args) {
                    if (this.canExecute) {
                        this._updateSelectedReceipt(this._receiptsToPreviewAndPrint[this._selectedReceiptIndex + 1]);
                        this.context.messageChannel.sendMessage("UpdateSelectedReceipt", {
                            isGiftReceipt: this._isGiftReceipt,
                            receiptData: this._receiptsToPreviewAndPrint,
                            selectedReceipt: this._selectedReceipt
                        });
                    }
                    return Promise.resolve();
                };
                PreviewNextReceiptCommand.prototype.init = function (data) {
                    return;
                };
                PreviewNextReceiptCommand.prototype._updateSelectedReceipt = function (receipt) {
                    this._selectedReceipt = receipt;
                    this._selectedReceiptIndex = this._receiptsToPreviewAndPrint.indexOf(this._selectedReceipt);
                    this.setCanExecute(this._selectedReceiptIndex < this._receiptsToPreviewAndPrint.length - 1);
                };
                return PreviewNextReceiptCommand;
            }(ViewModels.Command));
            ShowJournal.PreviewNextReceiptCommand = PreviewNextReceiptCommand;
        })(ShowJournal = ViewModels.ShowJournal || (ViewModels.ShowJournal = {}));
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        var ShowJournal;
        (function (ShowJournal) {
            "use strict";
            var PreviewPreviousReceiptCommand = (function (_super) {
                __extends(PreviewPreviousReceiptCommand, _super);
                function PreviewPreviousReceiptCommand(context) {
                    var _this = _super.call(this, context, "previewPreviousReceipt", ViewModels.Icons.PreviewPrevious, "string_1812") || this;
                    _this.setIsVisible(false);
                    _this.setCanExecute(false);
                    _this.context.messageChannel.addMessageHandler("ReceiptSelected", function (data) {
                        _this.setIsVisible(true);
                        _this._receiptsToPreviewAndPrint = data.receiptData;
                        _this._isGiftReceipt = data.isGiftReceipt;
                        _this._updateSelectedReceipt(data.selectedReceipt);
                    });
                    _this.context.messageChannel.addMessageHandler("ReceiptSelectionCleared", function () {
                        _this.setIsVisible(false);
                        _this.setCanExecute(false);
                        _this._selectedReceipt = undefined;
                        _this._receiptsToPreviewAndPrint = [];
                        _this._selectedReceiptIndex = -1;
                    });
                    return _this;
                }
                PreviewPreviousReceiptCommand.prototype.execute = function (args) {
                    if (this.canExecute) {
                        this._updateSelectedReceipt(this._receiptsToPreviewAndPrint[this._selectedReceiptIndex - 1]);
                        this.context.messageChannel.sendMessage("UpdateSelectedReceipt", {
                            isGiftReceipt: this._isGiftReceipt,
                            receiptData: this._receiptsToPreviewAndPrint,
                            selectedReceipt: this._selectedReceipt
                        });
                    }
                    return Promise.resolve();
                };
                PreviewPreviousReceiptCommand.prototype.init = function (data) {
                    return;
                };
                PreviewPreviousReceiptCommand.prototype._updateSelectedReceipt = function (receipt) {
                    this._selectedReceipt = receipt;
                    this._selectedReceiptIndex = this._receiptsToPreviewAndPrint.indexOf(this._selectedReceipt);
                    this.setCanExecute(this._selectedReceiptIndex > 0);
                };
                return PreviewPreviousReceiptCommand;
            }(ViewModels.Command));
            ShowJournal.PreviewPreviousReceiptCommand = PreviewPreviousReceiptCommand;
        })(ShowJournal = ViewModels.ShowJournal || (ViewModels.ShowJournal = {}));
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var ShowJournalSalesOrderDetailsMode;
        (function (ShowJournalSalesOrderDetailsMode) {
            ShowJournalSalesOrderDetailsMode[ShowJournalSalesOrderDetailsMode["Items"] = 0] = "Items";
            ShowJournalSalesOrderDetailsMode[ShowJournalSalesOrderDetailsMode["Payments"] = 1] = "Payments";
        })(ShowJournalSalesOrderDetailsMode = ViewModels.ShowJournalSalesOrderDetailsMode || (ViewModels.ShowJournalSalesOrderDetailsMode = {}));
        ViewModels.ShowJournalMode = Commerce.Client.Entities.ShowJournalMode;
        var ShowJournalViewModel = (function (_super) {
            __extends(ShowJournalViewModel, _super);
            function ShowJournalViewModel(context, options) {
                var _this = this;
                var componentsConfig = {
                    commands: {
                        definitions: ShowJournalViewModel.COMMAND_DEFINITIONS,
                        extensions: Commerce.ObjectExtensions.isNullOrUndefined(ShowJournalViewModel._viewExtensionsManager) ?
                            [] : ShowJournalViewModel._viewExtensionsManager.getAppBarCommands()
                    }
                };
                _this = _super.call(this, context, componentsConfig) || this;
                options = options || { mode: ViewModels.ShowJournalMode.ShowJournal, correlationId: Commerce.StringExtensions.EMPTY };
                options.mode = options.mode || ViewModels.ShowJournalMode.ShowJournal;
                if (options.mode !== ViewModels.ShowJournalMode.ShowJournal
                    && options.mode !== ViewModels.ShowJournalMode.CustomerSalesOrders
                    && options.mode !== ViewModels.ShowJournalMode.SingleCustomerSalesOrder) {
                    throw "Invalid options passed to the ShowJournalViewModel constructor: options.mode is not a supported mode.";
                }
                else if (options.mode === ViewModels.ShowJournalMode.SingleCustomerSalesOrder && Commerce.ObjectExtensions.isNullOrUndefined(options.selectedSalesOrderHeader)) {
                    throw "Invalid options passed to the ShowJournalViewModel constructor: \
options.selectedSalesOrderHeader is required when using search criteria mode.";
                }
                else if (options.mode === ViewModels.ShowJournalMode.CustomerSalesOrders && Commerce.StringExtensions.isNullOrWhitespace(options.customerAccountNumber)) {
                    throw "Invalid options passed to the ShowJournalViewModel constructor: \
options.customerAccountNumber is required when using customer sales orders mode.";
                }
                _this._onPageLoadCorrelationId = Commerce.StringExtensions.isNullOrWhitespace(options.correlationId) ? Commerce.StringExtensions.EMPTY : options.correlationId;
                _this._customerCardViewModel = new ViewModels.CustomerCardViewModel(context);
                _this.selectedSalesOrder = ko.observable(null);
                _this.customerAccountDepositLines = ko.observableArray([]);
                _this.incomeExpenseAccountLines = ko.observableArray([]);
                _this.salesLines = ko.observableArray([]);
                _this.tenderLines = ko.observableArray([]);
                _this.mode = options.mode;
                _this.hasActiveCustomer = ko.computed(function () {
                    var customer = _this._customerCardViewModel.customer();
                    return !Commerce.ObjectExtensions.isNullOrUndefined(customer) && !Commerce.StringExtensions.isNullOrWhitespace(customer.AccountNumber);
                }, _this);
                _this.receiptText = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.showDefaultReceiptPreview = ko.observable(false);
                _this.isReceiptSelected = ko.computed(function () {
                    return !Commerce.StringExtensions.isNullOrWhitespace(_this.receiptText()) || _this.showDefaultReceiptPreview();
                }, _this);
                _this._selectedTransaction = ko.observable(null);
                _this.salesOrderDetailsMode = ko.observable(ShowJournalSalesOrderDetailsMode.Items);
                _this.reloadTransactionsCallback = ko.observable(function () { return; });
                _this._productsInSelectedOrder = new Commerce.Dictionary();
                _this._lastSelectedTransactionHeader = null;
                _this._lastSelectedSalesOrderHeader = null;
                _this._isBusyFlag = ko.observable(false);
                _this._isBusyWhen(ko.computed(function () { return _this._isBusyFlag(); }));
                switch (options.mode) {
                    case ViewModels.ShowJournalMode.ShowJournal:
                        _this._setTransactionSearchCriteria();
                        break;
                    case ViewModels.ShowJournalMode.CustomerSalesOrders:
                        _this._customerId = options.customerAccountNumber;
                        break;
                    case ViewModels.ShowJournalMode.SingleCustomerSalesOrder:
                        _this._lastSelectedSalesOrderHeader = options.selectedSalesOrderHeader;
                        break;
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(ShowJournalViewModel._viewExtensionsManager)) {
                    _this._customSearchFilterDefinitions = [];
                    _this._linesGridItemSubfieldsViewModel = new Commerce.Extensibility.CustomGridItemSubfieldsViewModel([]);
                    _this._paymentsGridItemSubfieldsViewModel = new Extensiblity.CustomGridItemSubfieldsViewModel([]);
                }
                else {
                    _this._customSearchFilterDefinitions = ShowJournalViewModel._viewExtensionsManager.getCustomSearchFilterDefinitions();
                    _this._linesGridItemSubfieldsViewModel = ShowJournalViewModel._viewExtensionsManager.getCustomLinesGridItemSubfields();
                    _this._paymentsGridItemSubfieldsViewModel = ShowJournalViewModel._viewExtensionsManager.getCustomPaymentsGridItemSubfields();
                }
                _this.transactionListColumns = _this._getTransactionListColumns();
                _this.customerOrderHistoryListColumns = _this._getCustomerOrderHistoryListColumns();
                _this.addMessageHandler("UpdateSelectedReceipt", function (data) {
                    _this._updateReceiptForPreview(data);
                    if (_this.isReceiptSelected()) {
                        _this.sendMessageToChildComponents("ReceiptSelected", data);
                    }
                    else {
                        _this.sendMessageToChildComponents("ReceiptSelectionCleared", undefined);
                    }
                });
                _this.addMessageHandler("UpdateTransactionSearchCriteria", function (data) {
                    _this._setTransactionSearchCriteria(data);
                    _this._clearJournalSelection();
                    _this.reloadTransactionsCallback()();
                });
                _this.addMessageHandler("ClearSelectedReceipt", function () {
                    _this.receiptText(Commerce.StringExtensions.EMPTY);
                    _this.showDefaultReceiptPreview(false);
                    _this.sendMessageToChildComponents("ReceiptSelectionCleared", undefined);
                });
                return _this;
            }
            Object.defineProperty(ShowJournalViewModel, "viewExtensionManager", {
                set: function (manager) {
                    ShowJournalViewModel._viewExtensionsManager = manager;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ShowJournalViewModel.prototype, "CustomerCardViewModel", {
                get: function () {
                    return this._customerCardViewModel;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ShowJournalViewModel.prototype, "TransactionSearchCriteria", {
                get: function () {
                    return this._transactionSearchCriteria;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ShowJournalViewModel.prototype, "linesGridItemSubfieldsViewModel", {
                get: function () {
                    return this._linesGridItemSubfieldsViewModel;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ShowJournalViewModel.prototype, "paymentsGridItemSubfieldsViewModel", {
                get: function () {
                    return this._paymentsGridItemSubfieldsViewModel;
                },
                enumerable: true,
                configurable: true
            });
            ShowJournalViewModel.prototype.loadAsync = function () {
                var _this = this;
                if (this.mode === ViewModels.ShowJournalMode.CustomerSalesOrders) {
                    return this._customerCardViewModel.loadCustomerAsync(this._customerId).done(function () {
                        _this.sendMessageToChildComponents("Initialize", {
                            mode: _this.mode,
                            selectedSalesOrderHeader: _this.selectedSalesOrder(),
                            customer: _this._customerCardViewModel.customer(),
                            customSearchFilterDefinitions: _this._customSearchFilterDefinitions,
                            transactionSearchCriteria: _this.TransactionSearchCriteria
                        });
                        Commerce.RetailLogger.viewModelShowJournalLoaded();
                    });
                }
                else {
                    return Commerce.VoidAsyncResult.createResolved().done(function () {
                        _this.sendMessageToChildComponents("Initialize", {
                            mode: _this.mode,
                            selectedSalesOrderHeader: _this.selectedSalesOrder(),
                            customSearchFilterDefinitions: _this._customSearchFilterDefinitions,
                            transactionSearchCriteria: _this.TransactionSearchCriteria
                        });
                        Commerce.RetailLogger.viewModelShowJournalLoaded();
                    });
                }
            };
            ShowJournalViewModel.prototype.getJournalTransactionsAsync = function (pageSize, skip) {
                var _this = this;
                return this.salesOrderManager.getPagedJournalTransactions(this._transactionSearchCriteria, pageSize, skip)
                    .done(function (result) {
                    _this.sendMessageToChildComponents("JournalTransactionsLoaded", {
                        transactionSearchCriteria: _this._transactionSearchCriteria,
                        loadedTransactions: result,
                        pageSize: pageSize,
                        skip: skip
                    });
                })
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            ShowJournalViewModel.prototype.getSalesOrderDetailsAsync = function () {
                var salesOrdersAsyncResult = new Commerce.AsyncResult();
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._lastSelectedSalesOrderHeader)) {
                    salesOrdersAsyncResult.resolve([]);
                }
                else {
                    this._createGetSalesOrderDetailsRequestForCustomerOrderHistory(this._lastSelectedSalesOrderHeader)
                        .done(function (salesorder) {
                        salesOrdersAsyncResult.resolve([salesorder]);
                    })
                        .fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                        salesOrdersAsyncResult.reject(errors);
                    });
                }
                return salesOrdersAsyncResult;
            };
            ShowJournalViewModel.prototype.getSalesOrdersByCustomerIdAsync = function (pageSize, skip) {
                return this.salesOrderManager.getPagedSalesOrdersByCustomerIdAsync(this._customerId, pageSize, skip)
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            ShowJournalViewModel.prototype.toggleSalesOrderDetailsMode = function () {
                this.salesOrderDetailsMode() === ShowJournalSalesOrderDetailsMode.Payments ?
                    this.salesOrderDetailsMode(ShowJournalSalesOrderDetailsMode.Items) :
                    this.salesOrderDetailsMode(ShowJournalSalesOrderDetailsMode.Payments);
            };
            ShowJournalViewModel.prototype.isPaymentVoided = function (tenderLine) {
                return tenderLine.StatusValue === Commerce.Proxy.Entities.TenderLineStatus.Voided;
            };
            ShowJournalViewModel.prototype.isTenderLineRowExpandable = function (tenderLine) {
                var isExpandable = !Commerce.StringExtensions.isNullOrWhitespace(tenderLine.CreditMemoId)
                    || this.paymentsGridItemSubfieldsViewModel.hasVisibleCustomGridItemSubfields(tenderLine);
                return isExpandable;
            };
            ShowJournalViewModel.prototype.journalSelectionChangedHandlerAsync = function (selectedTransactions) {
                var _this = this;
                var correlationId = Commerce.StringExtensions.isNullOrWhitespace(this._onPageLoadCorrelationId) ?
                    Commerce.LoggerHelper.getNewCorrelationId() :
                    this._onPageLoadCorrelationId;
                Commerce.RetailLogger.viewModelShowJournalSelectionChangedStarted(correlationId);
                this._clearJournalSelection();
                if (!Commerce.ArrayExtensions.hasElements(selectedTransactions)) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                this._selectedTransaction(selectedTransactions[0]);
                var searchLocation = Commerce.Proxy.Entities.SearchLocation.Local;
                if (this.mode === ViewModels.ShowJournalMode.ShowJournal) {
                    searchLocation = this._transactionSearchCriteria.SearchLocationTypeValue;
                }
                if (this.mode === ViewModels.ShowJournalMode.ShowJournal) {
                    this._lastSelectedTransactionHeader = this._selectedTransaction();
                }
                else {
                    this._lastSelectedSalesOrderHeader = this._selectedTransaction();
                }
                var loadSelectedSalesOrderQueue = new Commerce.AsyncQueue();
                if (this.mode === ViewModels.ShowJournalMode.ShowJournal) {
                    loadSelectedSalesOrderQueue.enqueue(function () {
                        return _this._createGetSalesOrderDetailsRequestForShowJournal(_this._lastSelectedTransactionHeader, searchLocation)
                            .done(function (orderDetails) {
                            _this._afterGetSalesOrderDetailsSucceeded(orderDetails, correlationId);
                        });
                    });
                }
                else {
                    loadSelectedSalesOrderQueue.enqueue(function () {
                        return _this._createGetSalesOrderDetailsRequestForCustomerOrderHistory(_this._lastSelectedSalesOrderHeader)
                            .done(function (orderDetails) {
                            _this._afterGetSalesOrderDetailsSucceeded(orderDetails, correlationId);
                        });
                    });
                }
                loadSelectedSalesOrderQueue.enqueue(function () {
                    var selectedSalesOrder = _this.selectedSalesOrder();
                    if (Commerce.ObjectExtensions.isNullOrUndefined(selectedSalesOrder)) {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                    var loadOrderDetailsAsyncResults = [];
                    if (Commerce.ArrayExtensions.hasElements(selectedSalesOrder.IncomeExpenseLines)) {
                        _this.incomeExpenseAccountLines(selectedSalesOrder.IncomeExpenseLines);
                    }
                    else if (Commerce.ArrayExtensions.hasElements(selectedSalesOrder.CustomerAccountDepositLines)) {
                        _this.customerAccountDepositLines(selectedSalesOrder.CustomerAccountDepositLines);
                    }
                    else if (Commerce.ArrayExtensions.hasElements(selectedSalesOrder.SalesLines)) {
                        loadOrderDetailsAsyncResults.push(_this._populateProductInfoAsync(selectedSalesOrder));
                    }
                    if (_this.mode !== ViewModels.ShowJournalMode.CustomerSalesOrders) {
                        if (!Commerce.StringExtensions.isNullOrWhitespace(selectedSalesOrder.CustomerId)) {
                            loadOrderDetailsAsyncResults.push(_this._customerCardViewModel.loadCustomerAsync(selectedSalesOrder.CustomerId));
                        }
                    }
                    return Commerce.VoidAsyncResult.join(loadOrderDetailsAsyncResults).done(function () {
                        _this.sendMessageToChildComponents("JournalSelected", {
                            salesOrder: _this.selectedSalesOrder(),
                            products: _this._productsInSelectedOrder.getItems(),
                            customer: _this._customerCardViewModel.customer(),
                            selectedTransaction: _this._selectedTransaction()
                        });
                    });
                });
                return this._isBusyUntil(loadSelectedSalesOrderQueue.run()).fail(function (errors) {
                    Commerce.RetailLogger.viewModelShowJournalSelectionChangedFailed(correlationId, Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors));
                    Commerce.NotificationHandler.displayClientErrors(errors);
                }).done(function () {
                    Commerce.RetailLogger.viewModelShowJournalSelectionChangedSucceeded(correlationId);
                }).always(function () {
                    _this._onPageLoadCorrelationId = Commerce.StringExtensions.EMPTY;
                });
            };
            ShowJournalViewModel.prototype.isTransactionGridRowExpandable = function (salesLine) {
                var isExpandable = !Commerce.StringExtensions.isNullOrWhitespace(salesLine.variantDescription)
                    || salesLine.IsPriceOverridden
                    || !Commerce.StringExtensions.isNullOrWhitespace(salesLine.Comment)
                    || !Commerce.StringExtensions.isNullOrWhitespace(salesLine.SerialNumber)
                    || !Commerce.StringExtensions.isNullOrWhitespace(salesLine.Barcode)
                    || this.shouldDisplayTaxExemptMessage(salesLine)
                    || Commerce.ArrayExtensions.hasElements(salesLine.DiscountLines)
                    || this.linesGridItemSubfieldsViewModel.hasVisibleCustomGridItemSubfields(salesLine);
                return isExpandable;
            };
            ShowJournalViewModel.prototype.shouldDisplayTaxExemptMessage = function (salesLine) {
                var shouldDisplayTaxExemptMessage = Commerce.ApplicationContext.Instance.deviceConfiguration.DisplayTaxExemptInLineDetails
                    && !Commerce.StringExtensions.isNullOrWhitespace(salesLine.TaxOverrideCode)
                    && salesLine.IsTaxOverideCodeTaxExempt;
                return shouldDisplayTaxExemptMessage;
            };
            ShowJournalViewModel.prototype.isCustomerAccountDepositGridRowExpandable = function (customerAccountDepositCartLine) {
                var isExpandable = !Commerce.ObjectExtensions.isNullOrUndefined(customerAccountDepositCartLine)
                    && (!Commerce.ObjectExtensions.isNullOrUndefined(customerAccountDepositCartLine.Comment)
                        && (customerAccountDepositCartLine.Comment.length > 0));
                return isExpandable;
            };
            Object.defineProperty(ShowJournalViewModel.prototype, "isBusyFlag", {
                get: function () {
                    return this._isBusyFlag;
                },
                enumerable: true,
                configurable: true
            });
            ShowJournalViewModel.prototype._setTransactionSearchCriteria = function (searchCriteria) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(searchCriteria)) {
                    searchCriteria = new Commerce.Proxy.Entities.TransactionSearchCriteriaClass({
                        TransactionIds: [],
                        SearchLocationTypeValue: Commerce.Proxy.Entities.SearchLocation.Local,
                        StoreId: Commerce.ApplicationContext.Instance.storeNumber
                    });
                }
                else {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(searchCriteria.SearchLocationTypeValue)) {
                        searchCriteria.SearchLocationTypeValue = Commerce.Proxy.Entities.SearchLocation.Local;
                    }
                    if (Commerce.ArrayExtensions.hasElements(searchCriteria.TransactionIds)) {
                        searchCriteria.TransactionIds = searchCriteria.TransactionIds.filter(function (value) {
                            return !Commerce.StringExtensions.isEmptyOrWhitespace(value);
                        });
                    }
                }
                this._transactionSearchCriteria = searchCriteria;
            };
            ShowJournalViewModel.prototype._clearJournalSelection = function () {
                if (this.mode !== ViewModels.ShowJournalMode.CustomerSalesOrders) {
                    this._customerCardViewModel.customer(undefined);
                }
                this._selectedTransaction(null);
                this.customerAccountDepositLines([]);
                this.incomeExpenseAccountLines([]);
                this.salesLines([]);
                this.tenderLines([]);
                this.selectedSalesOrder(null);
                this.sendMessageToChildComponents("JournalSelectionCleared", undefined);
            };
            ShowJournalViewModel.prototype._updateReceiptForPreview = function (data) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(data.selectedReceipt)) {
                    var previewReceipt = data.selectedReceipt.previewReceipt;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(previewReceipt)) {
                        this.receiptText(Commerce.ReceiptHelper.convertToHtml(previewReceipt.Header + previewReceipt.Body + previewReceipt.Footer));
                        this.showDefaultReceiptPreview(false);
                    }
                    else if (Commerce.ArrayExtensions.hasElements(data.receiptData)) {
                        this.receiptText(Commerce.StringExtensions.EMPTY);
                        this.showDefaultReceiptPreview(true);
                    }
                }
            };
            ShowJournalViewModel.prototype._getTransactionListColumns = function () {
                var customColumns = Commerce.ObjectExtensions.isNullOrUndefined(ShowJournalViewModel._viewExtensionsManager) ?
                    [] :
                    ShowJournalViewModel._viewExtensionsManager.getCustomTransactionListColumns();
                var defaultColumns = [
                    {
                        titleResx: "string_4064",
                        ratio: 20,
                        collapseOrder: 6,
                        minWidth: 200,
                        field: "CreatedDateTime",
                        converter: "Commerce.Core.Converter.ShortDateAndTime"
                    }, {
                        titleResx: "string_4047",
                        ratio: 15,
                        collapseOrder: 1,
                        minWidth: 100,
                        field: "StaffId",
                        converter: "Commerce.Core.Converter.textContentFormatter"
                    }, {
                        titleResx: "string_4043",
                        ratio: 15,
                        collapseOrder: 2,
                        minWidth: 100,
                        field: "TerminalId",
                        converter: "Commerce.Core.Converter.textContentFormatter"
                    }, {
                        titleResx: "string_4066",
                        ratio: 20,
                        collapseOrder: 3,
                        minWidth: 200,
                        field: "$data",
                        converter: "Commerce.Core.Converter.TransactionTypeAndEntryStatusFormatter"
                    }, {
                        titleResx: "string_4065",
                        ratio: 20,
                        collapseOrder: 5,
                        minWidth: 200,
                        field: "ReceiptId",
                        converter: "Commerce.Core.Converter.textContentFormatter"
                    }, {
                        titleResx: "string_4024",
                        ratio: 10,
                        collapseOrder: 4,
                        minWidth: 100,
                        field: "TotalAmount",
                        converter: "Commerce.Core.Converter.PriceFormatter",
                        isRightAligned: true
                    }
                ];
                return Commerce.ArrayExtensions.hasElements(customColumns) ? customColumns : defaultColumns;
            };
            ShowJournalViewModel.prototype._getCustomerOrderHistoryListColumns = function () {
                var customColumns = Commerce.ObjectExtensions.isNullOrUndefined(ShowJournalViewModel._viewExtensionsManager) ?
                    [] :
                    ShowJournalViewModel._viewExtensionsManager.getCustomerOrderHistoryListColumns();
                var defaultColumns = [
                    {
                        titleResx: "string_4064",
                        ratio: 20,
                        collapseOrder: 7,
                        minWidth: 200,
                        field: "CreatedDateTime",
                        converter: "Commerce.Core.Converter.ShortDateAndTime"
                    }, {
                        titleResx: "string_4047",
                        ratio: 10,
                        collapseOrder: 1,
                        minWidth: 100,
                        field: "StaffId",
                        converter: "Commerce.Core.Converter.textContentFormatter"
                    }, {
                        titleResx: "string_4043",
                        ratio: 15,
                        collapseOrder: 2,
                        minWidth: 100,
                        field: "TerminalId",
                        converter: "Commerce.Core.Converter.textContentFormatter"
                    }, {
                        titleResx: "string_4066",
                        ratio: 15,
                        collapseOrder: 3,
                        minWidth: 200,
                        field: "TransactionTypeValue",
                        converter: "Commerce.Core.Converter.TransactionTypeFormatter"
                    }, {
                        titleResx: "string_3712",
                        ratio: 10,
                        collapseOrder: 4,
                        minWidth: 100,
                        field: "StatusValue",
                        converter: "Commerce.Core.Converter.SalesStatusContentFormatter"
                    }, {
                        titleResx: "string_4065",
                        ratio: 20,
                        collapseOrder: 6,
                        minWidth: 200,
                        field: "ReceiptId",
                        converter: "Commerce.Core.Converter.textContentFormatter"
                    }, {
                        titleResx: "string_4024",
                        ratio: 10,
                        collapseOrder: 5,
                        minWidth: 100,
                        field: "TotalAmount",
                        converter: "Commerce.Core.Converter.PriceFormatter",
                        isRightAligned: true
                    }
                ];
                return Commerce.ArrayExtensions.hasElements(customColumns) ? customColumns : defaultColumns;
            };
            ShowJournalViewModel.prototype._createGetSalesOrderDetailsRequestForShowJournal = function (selectedTransactionHeader, searchLocation) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(selectedTransactionHeader)
                    || Commerce.StringExtensions.isEmptyOrWhitespace(selectedTransactionHeader.Id)) {
                    return new Commerce.AsyncResult();
                }
                else {
                    if (Commerce.ExtensibleEnumerations.ExtensibleTransactionType.BankDrop.equals(selectedTransactionHeader.TransactionTypeValue)
                        || Commerce.ExtensibleEnumerations.ExtensibleTransactionType.SafeDrop.equals(selectedTransactionHeader.TransactionTypeValue)
                        || Commerce.ExtensibleEnumerations.ExtensibleTransactionType.TenderDeclaration.equals(selectedTransactionHeader.TransactionTypeValue)) {
                        var asyncResult = new Commerce.AsyncResult();
                        asyncResult.resolve(this._convertTransactionToSalesOrder(selectedTransactionHeader));
                        return asyncResult;
                    }
                    else {
                        return this.salesOrderManager.getSalesOrderDetailsByTransactionIdAsync(selectedTransactionHeader.Id, searchLocation);
                    }
                }
            };
            ShowJournalViewModel.prototype._createGetSalesOrderDetailsRequestForCustomerOrderHistory = function (selectedSalesOrderHeader) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(selectedSalesOrderHeader)) {
                    return new Commerce.AsyncResult();
                }
                else {
                    if (Commerce.ExtensibleEnumerations.ExtensibleSalesTransactionType.CustomerOrder.equals(selectedSalesOrderHeader.TransactionTypeValue)
                        && (selectedSalesOrderHeader.CustomerOrderTypeValue === Commerce.Proxy.Entities.CustomerOrderType.Quote)) {
                        return this.salesOrderManager.getSalesOrderDetailsByQuotationIdAsync(selectedSalesOrderHeader.SalesId);
                    }
                    else if (Commerce.ExtensibleEnumerations.ExtensibleSalesTransactionType.CustomerOrder.equals(selectedSalesOrderHeader.TransactionTypeValue)
                        && (selectedSalesOrderHeader.CustomerOrderTypeValue === Commerce.Proxy.Entities.CustomerOrderType.SalesOrder)) {
                        return this.salesOrderManager.getSalesOrderDetailsBySalesIdAsync(selectedSalesOrderHeader.SalesId);
                    }
                    else {
                        return this.salesOrderManager.getSalesOrderDetailsByTransactionIdAsync(selectedSalesOrderHeader.Id, Commerce.Proxy.Entities.SearchLocation.All);
                    }
                }
            };
            ShowJournalViewModel.prototype._afterGetSalesOrderDetailsSucceeded = function (salesOrder, correlationId) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(salesOrder)) {
                    if ((this.mode === ViewModels.ShowJournalMode.ShowJournal && salesOrder.Id === this._lastSelectedTransactionHeader.Id)
                        || (this.mode !== ViewModels.ShowJournalMode.ShowJournal
                            && (salesOrder.Id === this._lastSelectedSalesOrderHeader.Id || salesOrder.SalesId === this._lastSelectedSalesOrderHeader.SalesId))) {
                        this.selectedSalesOrder(salesOrder);
                        this.tenderLines(salesOrder.TenderLines);
                    }
                    Commerce.RetailLogger.viewModelShowJournalSalesOrderDetailsLoaded(salesOrder.Id);
                }
                Commerce.RetailLogger.viewModelShowJournalSalesOrderDetailsLoadingCompleted(correlationId);
            };
            ShowJournalViewModel.prototype._populateProductInfoAsync = function (order) {
                var _this = this;
                this._productsInSelectedOrder = new Commerce.Dictionary();
                var productIdsInSalesOrder = [];
                order.SalesLines.forEach(function (value) {
                    if (value.ProductId !== 0) {
                        productIdsInSalesOrder.push(value.ProductId);
                    }
                });
                var channelId = 0;
                return this.productManager.getByIdsAsync(productIdsInSalesOrder, channelId)
                    .done(function (products) {
                    products.forEach(function (product) {
                        _this._productsInSelectedOrder.setItem(product.RecordId, product);
                    });
                    var salesLinesForDisplay = order.SalesLines.map(function (salesLine) {
                        var salesLineForDisplay = new ViewModels.SalesLineForDisplay(salesLine, _this._productsInSelectedOrder.getItem(salesLine.ProductId));
                        salesLineForDisplay.transactionType = Commerce.ExtensibleEnumerations.ExtensibleSalesTransactionType.getByValue(order.TransactionTypeValue);
                        salesLineForDisplay.customerOrderType = order.CustomerOrderTypeValue;
                        return salesLineForDisplay;
                    });
                    _this.salesLines(salesLinesForDisplay);
                });
            };
            ShowJournalViewModel.prototype._convertTransactionToSalesOrder = function (transaction) {
                var salesOrder = {
                    DocumentStatusValue: 0,
                    RecordId: 0,
                    StatusValue: 0,
                    AffiliationLoyaltyTierLines: [],
                    IsRequiredAmountPaid: true,
                    IsDiscountFullyCalculated: true,
                    AmountDue: 0,
                    EstimatedShippingAmount: 0,
                    AmountPaid: 0,
                    AttributeValues: [],
                    AvailableDepositAmount: 0,
                    BeginDateTime: transaction.BeginDateTime,
                    CreatedDateTime: transaction.CreatedDateTime,
                    BusinessDate: null,
                    CalculatedDepositAmount: 0,
                    CancellationCharge: 0,
                    ChannelId: 0,
                    ChannelReferenceId: Commerce.StringExtensions.EMPTY,
                    ChargeAmount: 0,
                    ChargeLines: [],
                    Comment: transaction.Description,
                    InvoiceComment: Commerce.StringExtensions.EMPTY,
                    ContactInformationCollection: [],
                    CurrencyCode: Commerce.StringExtensions.EMPTY,
                    CustomerAccountDepositLines: [],
                    CustomerId: Commerce.StringExtensions.EMPTY,
                    CustomerOrderModeValue: 0,
                    CustomerOrderTypeValue: 0,
                    DeliveryMode: Commerce.StringExtensions.EMPTY,
                    DeliveryModeChargeAmount: 0,
                    DiscountAmount: 0,
                    DiscountCodes: [],
                    EntryStatusValue: transaction.TransactionStatusValue,
                    GrossAmount: transaction.GrossAmount,
                    HasLoyaltyPayment: false,
                    Id: transaction.Id,
                    IncomeExpenseLines: [],
                    IncomeExpenseTotalAmount: 0,
                    InventoryLocationId: Commerce.StringExtensions.EMPTY,
                    IsCreatedOffline: transaction.IsCreatedOffline,
                    IsReturnByReceipt: false,
                    IsSuspended: false,
                    IsTaxIncludedInPrice: false,
                    LineDiscount: 0,
                    LineDiscountCalculationTypeValue: 0,
                    LoyaltyCardId: Commerce.StringExtensions.EMPTY,
                    LoyaltyDiscountAmount: 0,
                    LoyaltyManualDiscountAmount: 0,
                    LoyaltyRewardPointLines: [],
                    ModifiedDateTime: null,
                    Name: Commerce.StringExtensions.EMPTY,
                    NetAmount: 0,
                    NetAmountWithNoTax: 0,
                    NetAmountWithTax: 0,
                    NumberOfItems: 0,
                    OverriddenDepositAmount: 0,
                    PeriodicDiscountAmount: 0,
                    PrepaymentAmountAppliedOnPickup: 0,
                    PrepaymentAmountInvoiced: 0,
                    PrepaymentAmountPaid: 0,
                    QuotationExpiryDate: null,
                    ReasonCodeLines: [],
                    ReceiptEmail: Commerce.StringExtensions.EMPTY,
                    ReceiptId: transaction.ReceiptId,
                    RequestedDeliveryDate: null,
                    RequiredDepositAmount: 0,
                    ReturnTransactionHasLoyaltyPayment: false,
                    SalesId: Commerce.StringExtensions.EMPTY,
                    SalesPaymentDifference: 0,
                    SalesLines: [],
                    ShiftTerminalId: transaction.ShiftTerminalId,
                    ShippingAddress: new Commerce.Proxy.Entities.AddressClass(),
                    StaffId: transaction.StaffId,
                    StatementCode: Commerce.StringExtensions.EMPTY,
                    StoreId: transaction.StoreId,
                    SubtotalAmount: 0,
                    SubtotalAmountWithoutTax: 0,
                    TaxAmount: 0,
                    TaxAmountExclusive: 0,
                    TaxAmountInclusive: 0,
                    TaxLines: [],
                    TaxOnCancellationCharge: 0,
                    TaxOverrideCode: Commerce.StringExtensions.EMPTY,
                    TenderLines: [],
                    TerminalId: transaction.TerminalId,
                    TotalAmount: transaction.TotalAmount,
                    TotalDiscount: 0,
                    TotalManualDiscountAmount: 0,
                    TotalManualDiscountPercentage: 0,
                    TransactionTypeValue: transaction.TransactionTypeValue,
                    CommissionSalesGroup: Commerce.StringExtensions.EMPTY,
                    ExtensionProperties: []
                };
                return salesOrder;
            };
            ShowJournalViewModel.COMMAND_DEFINITIONS = [
                ViewModels.ShowJournal.ReturnTransactionCommand,
                ViewModels.ShowJournal.SelectReceiptsActionCommand,
                ViewModels.ShowJournal.GetAdvancedSearchCriteriaCommand,
                ViewModels.ShowJournal.ClearReceiptSelectionCommand,
                ViewModels.ShowJournal.PrintReceiptsCommand,
                ViewModels.ShowJournal.EmailReceiptsCommand,
                ViewModels.ShowJournal.PreviewNextReceiptCommand,
                ViewModels.ShowJournal.PreviewPreviousReceiptCommand
            ];
            return ShowJournalViewModel;
        }(ViewModels.ComponentHostViewModelBase));
        ViewModels.ShowJournalViewModel = ShowJournalViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var QuantityInputContext;
        (function (QuantityInputContext) {
            QuantityInputContext[QuantityInputContext["AddInitialQuantity"] = 0] = "AddInitialQuantity";
            QuantityInputContext[QuantityInputContext["EditExistingQuantity"] = 1] = "EditExistingQuantity";
            QuantityInputContext[QuantityInputContext["IncrementExistingQuantity"] = 2] = "IncrementExistingQuantity";
        })(QuantityInputContext || (QuantityInputContext = {}));
        var StockCountDetailsMode;
        (function (StockCountDetailsMode) {
            StockCountDetailsMode[StockCountDetailsMode["Add"] = 0] = "Add";
            StockCountDetailsMode[StockCountDetailsMode["Edit"] = 1] = "Edit";
        })(StockCountDetailsMode = ViewModels.StockCountDetailsMode || (ViewModels.StockCountDetailsMode = {}));
        var StockCountDetailsViewModel = (function (_super) {
            __extends(StockCountDetailsViewModel, _super);
            function StockCountDetailsViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                _this._extensionCommandViewModels = [];
                _this.stockCountJournal = ko.observable({ JournalId: "", StockCountTransactionLines: [] });
                _this.stockCountLines = ko.observableArray([]);
                _this.totalProducts = ko.computed(function () {
                    var total = Commerce.ArrayExtensions.hasElements(_this.stockCountLines()) ? _this.stockCountLines().length : 0;
                    return Commerce.NumberExtensions.formatNumber(total, 0);
                });
                _this.totalCounted = ko.computed(function () {
                    var total = Commerce.ArrayExtensions.sum(_this.stockCountLines(), function (stockCountLine) {
                        return stockCountLine.counted;
                    });
                    return Commerce.NumberExtensions.formatNumber(total, Commerce.NumberExtensions.getDecimalPrecision());
                }, _this);
                _this.totalQuantity = ko.computed(function () {
                    var total = Commerce.ArrayExtensions.sum(_this.stockCountLines(), function (stockCountLine) {
                        return stockCountLine.quantity;
                    });
                    return Commerce.NumberExtensions.formatNumber(total, Commerce.NumberExtensions.getDecimalPrecision());
                }, _this);
                _this.selectedIndex = ko.observable(-1);
                _this._stockCountLineIndexesByKey = Object.create(null);
                _this._dateTimeFormatter = Commerce.Host.instance.globalization.getDateTimeFormatter(Commerce.Host.Globalization.DateTimeFormat.SHORT_DATE);
                _this._rowAutoSelected = false;
                _this._options = options || { IsAdvancedWarehousingEnabled: false, CurrentLocation: Commerce.StringExtensions.EMPTY };
                _this.selectedStockCountLine = ko.computed(function () {
                    return _this.selectedIndex() >= 0 && Commerce.ArrayExtensions.hasElements(_this.stockCountLines()) ?
                        _this.stockCountLines()[_this.selectedIndex()] :
                        undefined;
                }, true);
                if (_this._options.JournalId) {
                    _this._mode = StockCountDetailsMode.Edit;
                    _this.journalId = ko.observable(_this._options.JournalId);
                }
                else {
                    _this._mode = StockCountDetailsMode.Add;
                    _this.journalId = ko.observable("");
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(_this._options.ProductDetailsDictionary)) {
                    _this._productDetailsDictionary = _this._options.ProductDetailsDictionary;
                }
                else {
                    _this._productDetailsDictionary = new Commerce.Dictionary();
                }
                _this.hasStockCountLines = ko.computed(function () { return Commerce.ArrayExtensions.hasElements(_this.stockCountLines()); }, _this);
                _this.isJournalSaved = ko.observable(false);
                _this.isStockCountLineSelected = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedStockCountLine());
                }, _this);
                _this.disableRefreshProductsInJournal = ko.computed(function () {
                    var journalId = _this.journalId();
                    return Commerce.StringExtensions.isNullOrWhitespace(journalId) || _this.isStockCountLineSelected();
                });
                _this.isAdvancedWarehousingEnabled = _this._options.IsAdvancedWarehousingEnabled;
                _this.currentLocationId = ko.observable(Commerce.StringExtensions.isNullOrWhitespace(_this._options.CurrentLocation) ? Commerce.StringExtensions.EMPTY : _this._options.CurrentLocation);
                _this._setStockCountLinesColumns(_this._options.IsAdvancedWarehousingEnabled);
                _this._isExtensionCommandViewModelBusy = ko.observable(false);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(StockCountDetailsViewModel._viewExtensionsManager)) {
                    _this._extensionCommandViewModels = StockCountDetailsViewModel._viewExtensionsManager.getAppBarCommands()
                        .map(function (command) {
                        var commandVM = new ViewModels.CommandViewModel(command);
                        commandVM.addMessageHandler("IsProcessingChanged", function (isProcessing) {
                            if (isProcessing) {
                                _this._isExtensionCommandViewModelBusy(true);
                            }
                            else {
                                var isAnyCommandProcessing = _this._extensionCommandViewModels.some(function (vm) {
                                    return vm.isProcessing;
                                });
                                _this._isExtensionCommandViewModelBusy(isAnyCommandProcessing);
                            }
                        });
                        return commandVM;
                    });
                    _this._isBusyWhen(_this._isExtensionCommandViewModelBusy);
                }
                return _this;
            }
            Object.defineProperty(StockCountDetailsViewModel.prototype, "estimatedOnHandInventoryFeatureIsEnabled", {
                get: function () {
                    return Commerce.ApplicationSession.instance.featureStateContext
                        .isFeatureEnabled(Commerce.Client.Entities.FeatureNameEnum.RetailStockCountOnHandInventoryFeature);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(StockCountDetailsViewModel, "viewExtensionManager", {
                set: function (manager) {
                    StockCountDetailsViewModel._viewExtensionsManager = manager;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(StockCountDetailsViewModel.prototype, "_selectedStockCountLineRecId", {
                get: function () {
                    return Commerce.ObjectExtensions.isNullOrUndefined(this.selectedStockCountLine()) ? 0 : this.selectedStockCountLine().recordId;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(StockCountDetailsViewModel.prototype, "_selectedProductId", {
                get: function () {
                    return Commerce.ObjectExtensions.isNullOrUndefined(this.selectedStockCountLine()) ? 0 : this.selectedStockCountLine().productRecordId;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(StockCountDetailsViewModel.prototype, "_selectedStockLocation", {
                get: function () {
                    return Commerce.ObjectExtensions.isNullOrUndefined(this.selectedStockCountLine()) ?
                        Commerce.StringExtensions.EMPTY :
                        this.selectedStockCountLine().warehouseLocationId;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(StockCountDetailsViewModel.prototype, "extensionCommandViewModels", {
                get: function () {
                    return this._extensionCommandViewModels;
                },
                enumerable: true,
                configurable: true
            });
            StockCountDetailsViewModel.prototype.updateJournal = function (journal, updateHeader) {
                var _this = this;
                var journalLines = journal.StockCountTransactionLines;
                var productRecIds = [];
                for (var i = 0; i < journalLines.length; i++) {
                    if (!this._productDetailsDictionary.hasItem(journalLines[i].ProductRecordId)) {
                        productRecIds.push(journalLines[i].ProductRecordId);
                    }
                }
                if (Commerce.ArrayExtensions.hasElements(productRecIds)) {
                    var channelId = Commerce.Session.instance.productCatalogStore.Context.ChannelId;
                    return this.productManager.getByIdsAsync(productRecIds, channelId)
                        .done(function (productDetails) {
                        productDetails.forEach(function (value) {
                            _this._productDetailsDictionary.setItem(value.RecordId, value);
                        });
                        if (updateHeader) {
                            _this._getJournalHeaderDetailsSuccess(journal);
                        }
                        _this._getJournalLineDetailsSuccess(journalLines);
                    }).fail(function (errors) {
                        Commerce.RetailLogger.viewModelStockCountDetailsSearchProductsByItemsFailed();
                    });
                }
                else {
                    if (updateHeader) {
                        this._getJournalHeaderDetailsSuccess(journal);
                    }
                    this._getJournalLineDetailsSuccess(journal.StockCountTransactionLines);
                    return Commerce.VoidAsyncResult.createResolved();
                }
            };
            StockCountDetailsViewModel.prototype.loadJournal = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                var stockCountJournal;
                if (this._mode === StockCountDetailsMode.Edit) {
                    asyncQueue.enqueue(function () {
                        return _this.stockCountJournalManager.getStockCountJournalDetailsAsync(_this.journalId())
                            .done(function (journal) {
                            stockCountJournal = journal;
                        });
                    }).enqueue(function () {
                        return _this.updateJournal(stockCountJournal, true);
                    }).enqueue(function () {
                        if (!Commerce.ArrayExtensions.hasElements(_this.stockCountLines())) {
                            return _this.refreshProductLines();
                        }
                        return Commerce.VoidAsyncResult.createResolved();
                    });
                }
                var productWasProvided = this._options.Product && this._options.Product.RecordId > 0;
                if (productWasProvided) {
                    asyncQueue.enqueue(function () {
                        return _this._processSingleProductAndPromptForQuantity({ product: _this._options.Product });
                    });
                }
                return this._isBusyUntil(asyncQueue.run()).done(function () {
                    var commandState = {
                        isNewJournal: _this._mode === StockCountDetailsMode.Add,
                        isAdvancedWarehousingEnabled: _this.isAdvancedWarehousingEnabled,
                        journalLines: _this.stockCountLines(),
                        journal: _this._mode === StockCountDetailsMode.Edit ? _this.stockCountJournal() : null
                    };
                    _this._extensionCommandViewModels.forEach(function (vm) {
                        vm.sendMessage("Initialize", commandState);
                    });
                    _this.stockCountLines.subscribe(function (stockCountLines) {
                        _this._sendMessageToExtensions("JournalLinesUpdated", {
                            journalLines: stockCountLines
                        });
                    });
                });
            };
            StockCountDetailsViewModel.prototype.saveJournal = function () {
                var _this = this;
                var originalJournal = this.stockCountJournal();
                originalJournal.Worker = Commerce.Session.instance.CurrentEmployee.StaffId;
                var updatedJournal;
                var createOrUpdateQueue = new Commerce.AsyncQueue();
                if (!Commerce.StringExtensions.isNullOrWhitespace(originalJournal.JournalId)) {
                    createOrUpdateQueue.enqueue(function () {
                        return _this.stockCountJournalManager.updateStockCountJournalAsync(originalJournal)
                            .done(function (journalUpdated) {
                            updatedJournal = journalUpdated;
                        });
                    });
                }
                else {
                    createOrUpdateQueue.enqueue(function () {
                        originalJournal.Description = _this._createJournalDescription();
                        return _this.stockCountJournalManager.createStockCountJournalAsync(originalJournal)
                            .done(function (journalCreated) {
                            updatedJournal = journalCreated;
                        });
                    });
                }
                createOrUpdateQueue.enqueue(function () {
                    return _this.updateJournal(updatedJournal, true);
                });
                return this._isBusyUntil(createOrUpdateQueue.run()).done(function (createOrUpdateResult) {
                    _this._mode = StockCountDetailsMode.Edit;
                    _this._sendMessageToExtensions("JournalSaved", {
                        journal: updatedJournal,
                        journalLines: _this.stockCountLines()
                    });
                });
            };
            StockCountDetailsViewModel.prototype.commitJournal = function () {
                return this._handleAsyncResult(this.stockCountJournalManager.commitStockCountJournalAsync(this.stockCountJournal().JournalId));
            };
            StockCountDetailsViewModel.prototype.deleteProductLine = function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.selectedStockCountLine())) {
                    return;
                }
                var currentProductIndex = this._getStockCountLineIndex(this._selectedStockCountLineRecId, this._selectedProductId, this._selectedStockLocation);
                this.stockCountJournal().StockCountTransactionLines.splice(currentProductIndex, 1);
                this._getJournalLineDetailsSuccess(this.stockCountJournal().StockCountTransactionLines);
            };
            StockCountDetailsViewModel.prototype.calculateEstimatedOnHandInventory = function () {
                var _this = this;
                var stockCountJournal = new Commerce.Proxy.Entities.StockCountJournalClass();
                var queue = new Commerce.AsyncQueue();
                if (!this.isJournalSaved()) {
                    queue.enqueue(function () { return _this.saveJournal(); });
                }
                queue.enqueue(function () {
                    return _this.stockCountJournalManager.calculateEstimatedOnHandInventoryAsync(_this.stockCountJournal().JournalId)
                        .done(function (updatedJournalLines) {
                        stockCountJournal.StockCountTransactionLines = updatedJournalLines;
                    });
                }).enqueue(function () {
                    return _this.updateJournal(stockCountJournal, false);
                });
                return this._isBusyUntil(queue.run());
            };
            StockCountDetailsViewModel.prototype.addNewProductHandler = function () {
                var _this = this;
                var addNewProductLineQueue = new Commerce.AsyncQueue();
                var isNewLine;
                var details;
                addNewProductLineQueue.enqueue(function () {
                    var activity = new Commerce.Activities.GetSearchTextActivity({
                        searchText: Commerce.StringExtensions.EMPTY,
                        title: Commerce.ViewModelAdapter.getResourceString("string_3377"),
                        subTitle: Commerce.StringExtensions.EMPTY,
                        inputLabel: Commerce.ViewModelAdapter.getResourceString("string_3371")
                    });
                    activity.responseHandler = function (response) {
                        var enterProductQueue = new Commerce.AsyncQueue();
                        enterProductQueue.enqueue(function () {
                            return enterProductQueue.cancelOn(_this._getProductByText(response.searchText));
                        }).enqueue(function (getByTextResult) {
                            details = getByTextResult.data;
                            return enterProductQueue.cancelOn(_this._processSingleProduct(details.product))
                                .done(function (enterProductResult) {
                                if (!enterProductResult.canceled) {
                                    isNewLine = enterProductResult.data;
                                }
                            });
                        });
                        return addNewProductLineQueue.cancelOn(enterProductQueue.run()).map(function () { return void 0; });
                    };
                    return activity.execute().done(function () {
                        if (!activity.response) {
                            addNewProductLineQueue.cancel();
                        }
                    });
                }).enqueue(function () {
                    return addNewProductLineQueue.cancelOn(_this._addOrIncrementCurrentLineQuantity(isNewLine, details));
                });
                return addNewProductLineQueue.run().fail(function (error) {
                    Commerce.NotificationHandler.displayClientErrors(error);
                });
            };
            StockCountDetailsViewModel.prototype.refreshProductLines = function () {
                var _this = this;
                var stockCountJournal = new Commerce.Proxy.Entities.StockCountJournalClass();
                var refreshProductLinesQueue = new Commerce.AsyncQueue();
                refreshProductLinesQueue.enqueue(function () {
                    return _this.stockCountJournalManager.syncStockCountJournalAsync(_this.stockCountJournal().JournalId)
                        .done(function (updatedJournalLines) {
                        stockCountJournal.StockCountTransactionLines = updatedJournalLines;
                    });
                }).enqueue(function () {
                    return _this.updateJournal(stockCountJournal, false);
                });
                return this._isBusyUntil(refreshProductLinesQueue.run());
            };
            StockCountDetailsViewModel.prototype.performEditQuantity = function () {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.selectedStockCountLine())) {
                    return Commerce.AsyncResult.createResolved({ canceled: true });
                }
                var indexResult = this._getStockCountLineIndex(this._selectedStockCountLineRecId, this._selectedProductId, this._selectedStockLocation);
                var productLine = this.stockCountLines()[indexResult];
                var activity = new Commerce.Activities.GetQuantityActivity({
                    title: Commerce.ViewModelAdapter.getResourceString("string_3374"),
                    subTitle: Commerce.StringExtensions.EMPTY,
                    inputLabel: Commerce.ViewModelAdapter.getResourceString("string_3375"),
                    quantity: productLine.quantity.toString()
                });
                activity.responseHandler = function (response) {
                    return _this._handleQuantityInputAsync(response.quantity, QuantityInputContext.EditExistingQuantity);
                };
                return activity.execute().done(function () {
                    if (!activity.response) {
                        _this._clearSelection();
                        _this._rowAutoSelected = false;
                    }
                });
            };
            StockCountDetailsViewModel.prototype.productSelectionChanged = function (selectedLines) {
                var _this = this;
                if (this._rowAutoSelected) {
                    this._rowAutoSelected = false;
                    return;
                }
                if (selectedLines.length !== 1) {
                    this._clearSelection();
                }
                else {
                    var firstItem = selectedLines[0];
                    var selectedIndex = this._getStockCountLineIndex(firstItem.recordId, firstItem.productRecordId, firstItem.warehouseLocationId);
                    this._highlightIndex(selectedIndex);
                }
                if (Commerce.ArrayExtensions.hasElements(selectedLines)) {
                    this._sendMessageToExtensions("JournalLineSelected", { journalLines: selectedLines });
                }
                else {
                    this._sendMessageToExtensions("JournalLineSelectionCleared", null);
                }
                Commerce.Host.instance.timers.setImmediate(function () {
                    _this._rowAutoSelected = false;
                });
            };
            StockCountDetailsViewModel.prototype.enterProductAsync = function (searchText) {
                var _this = this;
                this._clearSelection();
                var enterProductQueue = new Commerce.AsyncQueue();
                enterProductQueue.enqueue(function () {
                    return enterProductQueue.cancelOn(_this._getProductByText(searchText));
                }).enqueue(function (getByTextResult) {
                    return enterProductQueue.cancelOn(_this._processSingleProductAndPromptForQuantity(getByTextResult.data));
                });
                return this._isBusyUntil(enterProductQueue.run()).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            StockCountDetailsViewModel.prototype.refreshProductLinesValidator = function () {
                return this._isBusyUntil(this.refreshProductLines()).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            StockCountDetailsViewModel.prototype.saveJournalValidator = function () {
                var _this = this;
                var asyncResult = new Commerce.VoidAsyncResult();
                this.saveJournal()
                    .done(function () {
                    _this.isJournalSaved(true);
                    asyncResult.resolve();
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                    asyncResult.reject(errors);
                });
                return asyncResult;
            };
            StockCountDetailsViewModel.prototype.commitJournalValidatorAsync = function () {
                var _this = this;
                if (this.isJournalSaved()) {
                    return this._commitJournalAsync();
                }
                else {
                    return this.saveJournalValidator().done(function () {
                        _this._commitJournalAsync();
                    });
                }
            };
            StockCountDetailsViewModel.prototype.setCurrentLocationId = function (currentLocationId) {
                this.currentLocationId(currentLocationId);
            };
            StockCountDetailsViewModel.prototype.showLocationDialogAsync = function () {
                var _this = this;
                if (!this.isAdvancedWarehousingEnabled) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                var activity = new Commerce.Activities.SelectWarehouseLocationActivity();
                return activity.execute().done(function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(activity.response)) {
                        var selectedWarehouseLocation = activity.response.selectedWarehouseLocation;
                        _this.setCurrentLocationId(selectedWarehouseLocation.LocationId);
                    }
                });
            };
            StockCountDetailsViewModel.prototype._searchForProduct = function (searchText) {
                var _this = this;
                this.saveJournal()
                    .done(function () {
                    var productSelectionHandler = new Commerce.CancelableSelectionHandler(function (result) {
                        var returnOptions = {
                            Product: result.simpleProduct,
                            JournalId: _this.stockCountJournal().JournalId,
                            ProductDetailsDictionary: _this._productDetailsDictionary,
                            IsAdvancedWarehousingEnabled: _this.isAdvancedWarehousingEnabled,
                            CurrentLocation: _this.currentLocationId()
                        };
                        Commerce.ViewModelAdapter.collapseAndNavigate("StockCountDetailsView", returnOptions);
                    }, function () {
                        Commerce.ViewModelAdapter.collapse("StockCountDetailsView");
                    });
                    var parameters = {
                        searchText: searchText,
                        searchEntity: ViewModels.SearchViewSearchEntity.Product,
                        selectionMode: ViewModels.SearchViewSelectionMode.Product,
                        productSelectionOptions: {
                            productSelectionHandler: productSelectionHandler,
                            allowKitMasterSelection: false
                        },
                        correlationId: Commerce.StringExtensions.EMPTY
                    };
                    Commerce.ViewModelAdapter.navigate("SearchView", parameters);
                });
            };
            StockCountDetailsViewModel.prototype._handleQuantityInputAsync = function (quantityInput, context) {
                var quantity = Commerce.NumberExtensions.parseNumber(quantityInput);
                if (quantity >= 0) {
                    if (context === QuantityInputContext.IncrementExistingQuantity) {
                        this._addToExistingProductLine(quantity);
                    }
                    else if (context === QuantityInputContext.EditExistingQuantity || context === QuantityInputContext.AddInitialQuantity) {
                        var indexResult = this._getStockCountLineIndex(this._selectedStockCountLineRecId, this._selectedProductId, this._selectedStockLocation);
                        var errors = this._overwriteExistingProductLine(indexResult, quantity);
                        if (Commerce.ArrayExtensions.hasElements(errors)) {
                            return Commerce.VoidAsyncResult.createRejected(errors);
                        }
                    }
                    this._clearSelection();
                    this._rowAutoSelected = false;
                    return Commerce.VoidAsyncResult.createResolved();
                }
                else {
                    var invalidQuantityError = new Commerce.Proxy.Entities.Error("string_3388");
                    invalidQuantityError.errorTitleResourceId = "string_3383";
                    return Commerce.VoidAsyncResult.createRejected([invalidQuantityError]);
                }
            };
            StockCountDetailsViewModel.prototype._updateStockCountLineQuantityAsync = function (defaultQuantity) {
                var _this = this;
                var activity = new Commerce.Activities.GetQuantityActivity({
                    title: Commerce.ViewModelAdapter.getResourceString("string_3376"),
                    subTitle: Commerce.StringExtensions.EMPTY,
                    inputLabel: Commerce.ViewModelAdapter.getResourceString("string_3373"),
                    quantity: defaultQuantity,
                });
                activity.responseHandler = function (response) {
                    return _this._handleQuantityInputAsync(response.quantity, QuantityInputContext.IncrementExistingQuantity);
                };
                return activity.execute().done(function () {
                    if (!activity.response) {
                        _this._clearSelection();
                        _this._rowAutoSelected = false;
                    }
                });
            };
            StockCountDetailsViewModel.prototype._overwriteExistingProductLine = function (index, newQuantity) {
                var errors = [];
                var lines = this.stockCountLines();
                if (index >= lines.length || index < 0) {
                    errors.push(new Commerce.Proxy.Entities.Error("string_3389"));
                }
                if (!Commerce.ArrayExtensions.hasElements(errors)) {
                    var productLine = this.stockCountLines()[index];
                    productLine.quantity = newQuantity;
                    productLine.status = Commerce.Proxy.Entities.StockCountStatus.PendingUpdate;
                    productLine.userId = Commerce.Session.instance.CurrentEmployee.StaffId;
                    this.stockCountLines.splice(index, 1, productLine);
                    this.isJournalSaved(false);
                }
                return errors;
            };
            StockCountDetailsViewModel.prototype._getStockCountLineIndex = function (stockCountLineRecId, productRecordId, locationId) {
                var result = -1;
                var key = this._formatStockCountLineKey(stockCountLineRecId, productRecordId, locationId);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._stockCountLineIndexesByKey[key])) {
                    result = this._stockCountLineIndexesByKey[key];
                }
                return result;
            };
            StockCountDetailsViewModel.prototype._enterInitialStockCountLineQuantityAsync = function (defaultQuantity) {
                var _this = this;
                var activity = new Commerce.Activities.GetQuantityActivity({
                    title: Commerce.ViewModelAdapter.getResourceString("string_3377"),
                    subTitle: Commerce.StringExtensions.EMPTY,
                    inputLabel: Commerce.ViewModelAdapter.getResourceString("string_3375"),
                    quantity: defaultQuantity,
                });
                activity.responseHandler = function (response) {
                    return _this._handleQuantityInputAsync(response.quantity, QuantityInputContext.AddInitialQuantity);
                };
                return activity.execute().done(function () {
                    if (!activity.response) {
                        _this._clearSelection();
                    }
                });
            };
            StockCountDetailsViewModel.prototype._processSingleProductAndPromptForQuantity = function (details) {
                var _this = this;
                var processProductQueue = new Commerce.AsyncQueue();
                processProductQueue.enqueue(function () {
                    return processProductQueue.cancelOn(_this._processSingleProduct(details.product));
                }).enqueue(function (enterProductResult) {
                    return processProductQueue.cancelOn(_this._addOrIncrementCurrentLineQuantity(enterProductResult.data, details));
                });
                return processProductQueue.run();
            };
            StockCountDetailsViewModel.prototype._processSingleProduct = function (product) {
                var _this = this;
                if (product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Master) {
                    var selectProductVariantClientRequest = new Commerce.Products.SelectProductVariantClientRequest(product);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(selectProductVariantClientRequest))
                        .map(function (variantSelectionResult) {
                        if (variantSelectionResult.canceled) {
                            return { canceled: true, data: undefined };
                        }
                        else {
                            var isNewLine = _this._addProductLineHighlight(variantSelectionResult.data.result);
                            return { canceled: false, data: isNewLine };
                        }
                    });
                }
                else if (product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Variant
                    || product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.KitVariant
                    || product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Standalone) {
                    var isNewLine = this._addProductLineHighlight(product);
                    return Commerce.AsyncResult.createResolved({ canceled: false, data: isNewLine });
                }
                else {
                    this._navigateToProductDetails(product);
                    return Commerce.AsyncResult.createResolved({ canceled: true, data: undefined });
                }
            };
            StockCountDetailsViewModel.prototype._addProductLineHighlight = function (product) {
                var rowIndex = this._getStockCountLineIndex(this._selectedStockCountLineRecId, product.RecordId, this.currentLocationId());
                if (rowIndex === -1) {
                    rowIndex = this._addNewProductLine(product, 0);
                    return true;
                }
                else {
                    this._highlightIndex(rowIndex);
                    return false;
                }
            };
            StockCountDetailsViewModel.prototype._commitJournalAsync = function () {
                return this.commitJournal()
                    .done(function () {
                    Commerce.ViewModelAdapter.navigate("SearchStockCountView");
                });
            };
            StockCountDetailsViewModel.prototype._addToExistingProductLine = function (newQuantity) {
                var errors = [];
                var lines = this.stockCountLines();
                var index = this.selectedIndex();
                if (index >= lines.length || index < 0) {
                    errors.push(new Commerce.Proxy.Entities.Error("string_3389"));
                }
                if (!Commerce.ArrayExtensions.hasElements(errors)) {
                    var productLine = this.stockCountLines()[index];
                    productLine.quantity += newQuantity;
                    productLine.status = Commerce.Proxy.Entities.StockCountStatus.PendingUpdate;
                    productLine.userId = Commerce.Session.instance.CurrentEmployee.StaffId;
                    this.stockCountLines.splice(index, 1, productLine);
                    this.isJournalSaved(false);
                    this._highlightIndex(index);
                }
                return errors;
            };
            StockCountDetailsViewModel.prototype._addOrIncrementCurrentLineQuantity = function (isNewLine, details) {
                var hasBarcode = !Commerce.ObjectExtensions.isNullOrUndefined(details.barcode);
                var quantity = hasBarcode && !Commerce.NumberExtensions.isNullNaNOrZero(details.barcode.Quantity) ? details.barcode.Quantity : 1;
                var quantityString = Commerce.NumberExtensions.formatNumber(quantity, -1);
                if (isNewLine) {
                    return this._enterInitialStockCountLineQuantityAsync(quantityString);
                }
                else {
                    return this._updateStockCountLineQuantityAsync(quantityString);
                }
            };
            StockCountDetailsViewModel.prototype._addNewProductLine = function (product, newQuantity) {
                var newProductLine = {
                    JournalId: this.journalId(),
                    ProductRecordId: product.RecordId,
                    ItemId: product.ItemId,
                    ItemName: product.Name,
                    Quantity: newQuantity,
                    EstimatedOnHandQuantity: 0,
                    Counted: 0,
                    UserId: Commerce.Session.instance.CurrentEmployee.StaffId,
                    InventLocationId: Commerce.ApplicationContext.Instance.channelConfiguration.InventLocation,
                    DataAreaId: Commerce.ApplicationContext.Instance.channelConfiguration.InventLocationDataAreaId,
                    Status: Commerce.Proxy.Entities.StockCountStatus.PendingUpdate,
                    WarehouseLocationId: this.currentLocationId(),
                    ExtensionProperties: product.ExtensionProperties
                };
                this.stockCountJournal().StockCountTransactionLines.push(newProductLine);
                this.stockCountLines.push(new Commerce.Client.Entities.StockCountLineClass(newProductLine, product));
                var index = this.stockCountLines().length - 1;
                this._setProductIndex(0, newProductLine.ProductRecordId, this.currentLocationId(), index);
                this.isJournalSaved(false);
                this._productDetailsDictionary.setItem(product.RecordId, product);
                this._highlightIndex(index);
                return index;
            };
            StockCountDetailsViewModel.prototype._navigateToProductDetails = function (product) {
                var _this = this;
                this.saveJournal()
                    .done(function () {
                    var productSelectionHandler = new Commerce.CancelableSelectionHandler(function (selectionResult) {
                        var returnOptions = {
                            JournalId: _this.stockCountJournal().JournalId,
                            Product: selectionResult.simpleProduct,
                            IsAdvancedWarehousingEnabled: _this.isAdvancedWarehousingEnabled,
                            CurrentLocation: _this.currentLocationId()
                        };
                        Commerce.ViewModelAdapter.collapseAndNavigate("StockCountDetailsView", returnOptions);
                    }, function () {
                        Commerce.ViewModelAdapter.collapse("StockCountDetailsView");
                    });
                    var simpleProductDetailsViewModelOptions = {
                        productId: product.RecordId,
                        product: product,
                        isSelectionMode: true,
                        selectionOptions: {
                            productSelectionHandler: productSelectionHandler
                        },
                        correlationId: Commerce.StringExtensions.EMPTY
                    };
                    Commerce.ViewModelAdapter.navigate("SimpleProductDetailsView", simpleProductDetailsViewModelOptions);
                });
            };
            StockCountDetailsViewModel.prototype._clearSelection = function () {
                this._highlightIndex(-1);
            };
            StockCountDetailsViewModel.prototype._highlightIndex = function (rowIndex) {
                this._rowAutoSelected = true;
                this.selectedIndex(rowIndex);
            };
            StockCountDetailsViewModel.prototype._getProductByText = function (searchText) {
                var _this = this;
                var getProductByKeyWordQueue = new Commerce.AsyncQueue();
                var product;
                var barcode;
                getProductByKeyWordQueue.enqueue(function () {
                    var scanResultAsyncResult = new Commerce.VoidAsyncResult();
                    var scanResultRequest = new Commerce.GetScanResultClientRequest(searchText);
                    _this.context.runtime.executeAsync(scanResultRequest)
                        .then(function (result) {
                        if (result.canceled || Commerce.ObjectExtensions.isNullOrUndefined(result.data)) {
                            getProductByKeyWordQueue.cancel();
                            scanResultAsyncResult.resolve();
                            return;
                        }
                        var scanResult = result.data.result;
                        var scanResultType = scanResult.MaskTypeValue;
                        if (scanResultType === Commerce.Proxy.Entities.BarcodeMaskType.Item) {
                            product = scanResult.Product;
                            barcode = scanResult.Barcode;
                            scanResultAsyncResult.resolve();
                        }
                        else if (scanResultType === Commerce.Proxy.Entities.BarcodeMaskType.None) {
                            scanResultAsyncResult.resolve();
                        }
                        else {
                            var unsupportedScanTypeError = new Commerce.Proxy.Entities.Error("string_2626");
                            scanResultAsyncResult.reject([unsupportedScanTypeError]);
                        }
                    }).catch(function (reason) {
                        var errors = Commerce.ErrorHelper.toProxyErrors(reason);
                        scanResultAsyncResult.reject(errors);
                    });
                    return scanResultAsyncResult;
                }).enqueue(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(product)) {
                        var pageSize = 1;
                        var skip = 0;
                        var productSearchAsyncResult_2 = new Commerce.AsyncResult();
                        _this.productManager.searchByTextAsync(searchText, Commerce.Session.instance.productCatalogStore.Context.ChannelId, Commerce.Session.instance.productCatalogStore.Context.CatalogId, pageSize, skip).done(function (searchResults) {
                            if (Commerce.ArrayExtensions.hasElements(searchResults)) {
                                _this._searchForProduct(searchText);
                                productSearchAsyncResult_2.resolve({ canceled: true });
                            }
                            else {
                                var productNotFoundError = new Commerce.Proxy.Entities.Error("string_3382");
                                productNotFoundError.errorTitleResourceId = "string_3381";
                                productSearchAsyncResult_2.reject([productNotFoundError]);
                            }
                        }).fail(function (searchErrors) {
                            productSearchAsyncResult_2.reject(searchErrors);
                        });
                        return getProductByKeyWordQueue.cancelOn(productSearchAsyncResult_2);
                    }
                    else {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                });
                return getProductByKeyWordQueue.run().map(function (queueResult) {
                    return {
                        canceled: queueResult.canceled,
                        data: {
                            product: product,
                            barcode: barcode
                        }
                    };
                });
            };
            StockCountDetailsViewModel.prototype._handleAsyncResult = function (asyncResult, titleResourceId) {
                if (titleResourceId === void 0) { titleResourceId = Commerce.StringExtensions.EMPTY; }
                return this._isBusyUntil(asyncResult).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors, titleResourceId);
                });
            };
            StockCountDetailsViewModel.prototype._getJournalLineDetailsSuccess = function (newProductLines) {
                this.stockCountJournal().StockCountTransactionLines = newProductLines;
                this.stockCountLines.removeAll();
                this._stockCountLineIndexesByKey = Object.create(null);
                var productLineCollection = [];
                for (var i = 0; i < newProductLines.length; i++) {
                    var stockCountLine = void 0;
                    var stockCountProductLine = void 0;
                    var productFound = void 0;
                    stockCountProductLine = newProductLines[i];
                    productFound = this._productDetailsDictionary.getItem(stockCountProductLine.ProductRecordId);
                    stockCountLine = new Commerce.Client.Entities.StockCountLineClass(stockCountProductLine, productFound);
                    stockCountLine.counted = parseFloat(stockCountLine.counted.toString());
                    stockCountLine.quantity = parseFloat(stockCountLine.quantity.toString());
                    stockCountLine.estimatedOnHandQuantity = stockCountLine.estimatedOnHandQuantity;
                    productLineCollection.push(stockCountLine);
                    this._setProductIndex(stockCountLine.recordId, stockCountLine.productRecordId, stockCountLine.warehouseLocationId, i);
                }
                this.stockCountLines(productLineCollection);
            };
            StockCountDetailsViewModel.prototype._getJournalHeaderDetailsSuccess = function (newJournal) {
                this.journalId(newJournal.JournalId);
                this.stockCountJournal(newJournal);
            };
            StockCountDetailsViewModel.prototype._setProductIndex = function (stockCountLineRecId, productRecordId, locationId, value) {
                var key = this._formatStockCountLineKey(stockCountLineRecId, productRecordId, locationId);
                this._stockCountLineIndexesByKey[key] = value;
                var keyForProductRecIdOnly = this._formatStockCountLineKey(0, productRecordId, locationId);
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._stockCountLineIndexesByKey[keyForProductRecIdOnly])) {
                    this._stockCountLineIndexesByKey[keyForProductRecIdOnly] = value;
                }
            };
            StockCountDetailsViewModel.prototype._createJournalDescription = function () {
                var journalDescription = Commerce.ViewModelAdapter.getResourceString("string_3380");
                var currentDeviceConfiguration = Commerce.ApplicationContext.Instance.deviceConfiguration;
                var currentDate = Commerce.DateExtensions.getDate();
                var dateFormat = this._dateTimeFormatter.format(currentDate);
                journalDescription = Commerce.StringExtensions.format(journalDescription, currentDeviceConfiguration.InventLocationId, dateFormat);
                return journalDescription;
            };
            StockCountDetailsViewModel.prototype._formatStockCountLineKey = function (stockCountLineRecId, productRecId, locationId) {
                if (Commerce.NumberExtensions.isNullNaNOrZero(stockCountLineRecId) || stockCountLineRecId < 0) {
                    stockCountLineRecId = 0;
                }
                if (Commerce.StringExtensions.isNullOrWhitespace(locationId)) {
                    locationId = Commerce.StringExtensions.EMPTY;
                }
                return Commerce.StringExtensions.format("{0}_{1}_{2}", stockCountLineRecId, productRecId, locationId);
            };
            StockCountDetailsViewModel.prototype._setStockCountLinesColumns = function (isAdvancedWarehousingEnabled) {
                var customColumns = Commerce.ObjectExtensions.isNullOrUndefined(StockCountDetailsViewModel._viewExtensionsManager) ?
                    [] :
                    StockCountDetailsViewModel._viewExtensionsManager.getStockCountLinesColumns();
                var defaultColumns = isAdvancedWarehousingEnabled ?
                    [
                        { titleResx: "string_3350", ratio: 20, collapseOrder: 5, minWidth: 120, field: "itemId" },
                        {
                            titleResx: "string_3351", ratio: 20, collapseOrder: 1, minWidth: 200, field: "$data",
                            converter: "Commerce.Core.Converter.StockCountVariantFormatter"
                        },
                        { titleResx: "string_3729", ratio: 20, collapseOrder: 2, minWidth: 80, field: "warehouseLocationId" },
                    ] :
                    [
                        { titleResx: "string_3350", ratio: 30, collapseOrder: 4, minWidth: 120, field: "itemId" },
                        {
                            titleResx: "string_3351", ratio: 30, collapseOrder: 1, minWidth: 200, field: "$data",
                            converter: "Commerce.Core.Converter.StockCountVariantFormatter"
                        }
                    ];
                if (this.estimatedOnHandInventoryFeatureIsEnabled) {
                    defaultColumns.push({
                        titleResx: "string_3365", ratio: 15,
                        collapseOrder: isAdvancedWarehousingEnabled ? 3 : 2,
                        minWidth: 60, field: "variance", isRightAligned: true
                    });
                    defaultColumns.push({
                        titleResx: "string_3364", ratio: 15,
                        collapseOrder: isAdvancedWarehousingEnabled ? 4 : 3,
                        minWidth: 60, field: "estimatedOnHandQuantity", isRightAligned: true
                    });
                    defaultColumns.push({
                        titleResx: "string_3352", ratio: 10,
                        collapseOrder: isAdvancedWarehousingEnabled ? 6 : 5,
                        minWidth: 80, field: "quantity", isRightAligned: true
                    });
                }
                else {
                    defaultColumns.push({
                        titleResx: "string_3352", ratio: 20,
                        collapseOrder: isAdvancedWarehousingEnabled ? 3 : 2,
                        minWidth: isAdvancedWarehousingEnabled ? 60 : 80,
                        field: "counted", isRightAligned: true
                    });
                    defaultColumns.push({
                        titleResx: "string_3353", ratio: 20,
                        collapseOrder: isAdvancedWarehousingEnabled ? 4 : 3,
                        minWidth: isAdvancedWarehousingEnabled ? 60 : 80,
                        field: "quantity", isRightAligned: true
                    });
                }
                this.stockCountLinesColumns = Commerce.ArrayExtensions.hasElements(customColumns) ? customColumns : defaultColumns;
            };
            StockCountDetailsViewModel.prototype._sendMessageToExtensions = function (messageType, messageData) {
                this.extensionCommandViewModels.forEach(function (vm) {
                    vm.sendMessage(messageType, messageData);
                });
            };
            return StockCountDetailsViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.StockCountDetailsViewModel = StockCountDetailsViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var StoreClientBooksViewModel = (function (_super) {
            __extends(StoreClientBooksViewModel, _super);
            function StoreClientBooksViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this.selectedCustomers = ko.observableArray([]);
                _this.clientListIsLoading = ko.observable(false);
                _this._isBusyWhen(ko.computed(function () { return _this.clientListIsLoading(); }));
                _this.reloadGetClientBookCustomers = ko.observable(function () { return; });
                _this.canAddSelectedCustomer = ko.computed(function () {
                    return Commerce.ArrayExtensions.hasElements(_this.selectedCustomers()) && _this.selectedCustomers().length === 1;
                });
                _this.canReassignSelectedCustomers = ko.computed(function () {
                    return Commerce.ArrayExtensions.hasElements(_this.selectedCustomers())
                        && _this.selectedCustomers().every(function (val, i, arr) { return val.clientBookCustomer.StaffId === arr[0].clientBookCustomer.StaffId; });
                });
                _this.canRemoveSelectedCustomers = ko.computed(function () {
                    return Commerce.ArrayExtensions.hasElements(_this.selectedCustomers());
                });
                _this._staffIdToNameMap = new Commerce.Dictionary();
                return _this;
            }
            StoreClientBooksViewModel.prototype.setSelectedCustomers = function (customers) {
                this.selectedCustomers(customers);
            };
            StoreClientBooksViewModel.prototype.getClientBookCustomers = function (pageSize, skip) {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var searchCriteria = {
                    FilterByCurrentEmployee: false,
                    Refinement: Commerce.ObjectExtensions.isNullOrUndefined(this._refinements) ? [] : this._refinements
                };
                var clientBookCustomerForDisplay = [];
                var asyncQueue = new Commerce.AsyncQueue();
                if (this._staffIdToNameMap.length() <= 0) {
                    asyncQueue.enqueue(function () {
                        return Commerce.ApplicationContext.Instance.storeEmployeeListAsync.value.done(function (operators) {
                            operators.forEach(function (employee) {
                                _this._staffIdToNameMap.setItem(employee.StaffId, employee.Name);
                            });
                        });
                    });
                }
                asyncQueue.enqueue(function () {
                    return _this.employeeManager.getClientBookCustomersAsync(searchCriteria, pageSize, skip)
                        .map(function (result) {
                        var clientBookCustomerWithOwnersList = [];
                        result.forEach(function (customer) {
                            var clientBookCustomerMappedToEmployee = {
                                employeeOwner: _this._getStaffName(customer.StaffId),
                                clientBookCustomer: customer,
                            };
                            clientBookCustomerWithOwnersList.push(clientBookCustomerMappedToEmployee);
                        });
                        clientBookCustomerForDisplay = clientBookCustomerWithOwnersList;
                    });
                });
                return this._isBusyUntil(asyncQueue.run().map(function () {
                    return clientBookCustomerForDisplay;
                })).fail(function (errors) {
                    Commerce.RetailLogger.viewModelSearchClientBookCustomersAsyncFailed(correlationId, Commerce.ErrorHelper.serializeError(errors));
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            StoreClientBooksViewModel.prototype.showCustomerDetailsAsync = function (customer) {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.viewsMerchandisingSearchViewModelShowCustomerDetailsStarted(correlationId);
                asyncQueue.enqueue(function () {
                    return _this.customerManager.getCustomersByAccountNumbersAsync([customer.clientBookCustomer.CustomerId])
                        .done(function (customers) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(customers[0])) {
                            Commerce.RetailLogger.viewsMerchandisingSearchViewShowCustomerDetails(correlationId, customers[0].AccountNumber);
                            var viewOptions = {
                                accountNumber: customers[0].AccountNumber,
                                correlationId: correlationId
                            };
                            Commerce.ViewModelAdapter.navigate("CustomerDetailsView", viewOptions);
                        }
                    });
                });
                return this._handleAsyncResult(asyncQueue.run()).map(function () { return void 0; });
            };
            StoreClientBooksViewModel.prototype.addToCartClick = function () {
                var accounts = this.selectedCustomers().map(function (account) { return account.clientBookCustomer.CustomerId; });
                if (Commerce.StringExtensions.isNullOrWhitespace(accounts[0])) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var setCustomerOnCartOperationRequest = new Commerce.SetCustomerOnCartOperationRequest(correlationId, accounts[0]);
                return this._isBusyUntil(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(setCustomerOnCartOperationRequest)))
                    .done(function (result) {
                    if (!result.canceled) {
                        Commerce.ViewModelAdapter.navigate("CartView");
                    }
                }).fail(function (errors) {
                    Commerce.RetailLogger.viewsCustomerDetailsAddCustomerFailed(correlationId);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            StoreClientBooksViewModel.prototype.removeCustomersClientBookAsync = function () {
                var _this = this;
                var clientBookCustomers = this.selectedCustomers()
                    .map(function (customerWithOwner) {
                    return customerWithOwner.clientBookCustomer;
                });
                var options = {
                    clientBookCustomers: clientBookCustomers
                };
                var operationResult = Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.RemoveCustomersFromClientBook, options).done(function (result) {
                    if (!result.canceled) {
                        _this.reloadGetClientBookCustomers()();
                    }
                }).map(function () { return void 0; });
                return this._handleAsyncResult(operationResult);
            };
            StoreClientBooksViewModel.prototype.reassignCustomersClientBookAsync = function () {
                var _this = this;
                var selectedCustomerAccountNumbers = [];
                var originalEmployeeId = "";
                this.selectedCustomers().forEach(function (customer) {
                    selectedCustomerAccountNumbers.push(customer.clientBookCustomer.CustomerId);
                    originalEmployeeId = customer.clientBookCustomer.StaffId;
                });
                var options = {
                    selectedCustomerIds: selectedCustomerAccountNumbers,
                    originalEmployeeId: originalEmployeeId
                };
                var operationResult = Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.ReassignClientBookCustomers, options).done(function (result) {
                    if (!result.canceled) {
                        _this.selectedCustomers([]);
                        _this.reloadGetClientBookCustomers()();
                    }
                }).map(function () { return void 0; });
                return this._handleAsyncResult(operationResult);
            };
            StoreClientBooksViewModel.prototype._getStaffName = function (staffId) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(staffId)) {
                    return Commerce.StringExtensions.EMPTY;
                }
                else {
                    return this._staffIdToNameMap.getItem(staffId);
                }
            };
            StoreClientBooksViewModel.prototype.filterClientBookCustomers = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return _this._getClientBookRefinersAsync(correlationId);
                }).enqueue(function (refiners) {
                    var activity = new Commerce.Activities.GetClientBookRefinersActivity({
                        correlationId: correlationId,
                        clientBookRefiners: refiners
                    });
                    return activity.execute().map(function () {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(activity.response)) {
                            _this._refinements = activity.response.clientBookRefinerValues;
                            _this.reloadGetClientBookCustomers()();
                        }
                    });
                });
                return asyncQueue.run();
            };
            StoreClientBooksViewModel.prototype._getClientBookRefinersAsync = function (correlationId) {
                var _this = this;
                if (Commerce.ArrayExtensions.hasElements(this._clientBookRefiners)) {
                    return Commerce.AsyncResult.createResolved(this._clientBookRefiners);
                }
                var refinerSources = [
                    Commerce.Proxy.Entities.ClientBookRefinerSource.Attribute,
                    Commerce.Proxy.Entities.ClientBookRefinerSource.CustomerSearchKeyword,
                    Commerce.Proxy.Entities.ClientBookRefinerSource.StaffId
                ];
                return this.employeeManager.getClientBookSearchRefinersAsync(refinerSources, null)
                    .done(function (refiners) {
                    _this._clientBookRefiners = refiners;
                }).fail(function (errors) {
                    Commerce.RetailLogger.viewModelGetClientBookRefinersAsyncFailed(correlationId, Commerce.ErrorHelper.serializeError(errors));
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            StoreClientBooksViewModel.prototype._handleAsyncResult = function (asyncResult) {
                return this._isBusyUntil(asyncResult).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            return StoreClientBooksViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.StoreClientBooksViewModel = StoreClientBooksViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        var WeekDays;
        (function (WeekDays) {
            WeekDays[WeekDays["Monday"] = 1] = "Monday";
            WeekDays[WeekDays["Tuesday"] = 2] = "Tuesday";
            WeekDays[WeekDays["Wednesday"] = 3] = "Wednesday";
            WeekDays[WeekDays["Thursday"] = 4] = "Thursday";
            WeekDays[WeekDays["Friday"] = 5] = "Friday";
            WeekDays[WeekDays["Saturday"] = 6] = "Saturday";
            WeekDays[WeekDays["Sunday"] = 7] = "Sunday";
        })(WeekDays = ViewModels.WeekDays || (ViewModels.WeekDays = {}));
        var WeekDayStoreHours = (function () {
            function WeekDayStoreHours() {
            }
            return WeekDayStoreHours;
        }());
        ViewModels.WeekDayStoreHours = WeekDayStoreHours;
        var StoreDetailsViewModel = (function (_super) {
            __extends(StoreDetailsViewModel, _super);
            function StoreDetailsViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                _this._storeId = options.storeId;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options.selectionOptions)) {
                    _this._selectionHandler = options.selectionOptions.selectionHandler;
                }
                _this.distance = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.distanceUnit = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.showMap = ko.computed(function () { return Commerce.ApplicationContext.Instance.channelConfiguration.BingMapsEnabled; }, _this);
                _this.storeDetails = ko.observable(new Commerce.Proxy.Entities.OrgUnitClass({
                    RecordId: 0,
                    OrgUnitName: Commerce.StringExtensions.EMPTY,
                    OrgUnitNumber: Commerce.StringExtensions.EMPTY,
                    OrgUnitAddress: {
                        Street: Commerce.StringExtensions.EMPTY,
                        City: Commerce.StringExtensions.EMPTY,
                        State: Commerce.StringExtensions.EMPTY,
                        County: Commerce.StringExtensions.EMPTY,
                        ZipCode: Commerce.StringExtensions.EMPTY,
                        Phone: Commerce.StringExtensions.EMPTY,
                        ThreeLetterISORegionName: Commerce.StringExtensions.EMPTY,
                        FullAddress: Commerce.StringExtensions.EMPTY
                    }
                }));
                _this.formattedStoreHours = ko.observableArray([]);
                _this.isStoreHoursVisible = ko.observable(false);
                return _this;
            }
            StoreDetailsViewModel.prototype.isBusyWhen = function (isBusyComputed) {
                this._isBusyWhen(isBusyComputed);
            };
            StoreDetailsViewModel.prototype.getStoreDistance = function () {
                var _this = this;
                var asyncResult = new Commerce.VoidAsyncResult();
                var storeDistances = Commerce.ApplicationContext.Instance.storeDistancesMap;
                if (storeDistances.length() === 0) {
                    var searchArea = {
                        Radius: 0,
                        DistanceUnitValue: Commerce.Proxy.Entities.DistanceUnit.Miles
                    };
                    this.channelManager.getStoreLocationByArea(searchArea)
                        .done(function (stores) {
                        var storeFound = false;
                        for (var i = 0; i < stores.length; i++) {
                            storeDistances.setItem(stores[i].OrgUnitNumber, stores[i].Distance);
                            if (stores[i].OrgUnitNumber === _this._storeId) {
                                _this.distance(Commerce.Proxy.Entities.StoreLocationWrapper.constructDistanceString(stores[i]));
                                _this.distanceUnit(Commerce.Proxy.Entities.StoreLocationWrapper.constructDistanceUnit(stores[i]));
                                storeFound = true;
                            }
                            Commerce.ApplicationContext.Instance.storeDistancesMap = storeDistances;
                        }
                        if (storeFound) {
                            asyncResult.resolve();
                        }
                        else {
                            _this.rejectStoreIdNotFound(asyncResult);
                        }
                    })
                        .fail(function (errors) {
                        asyncResult.reject(errors);
                    });
                }
                else if (storeDistances.hasItem(this._storeId)) {
                    var storeLocation = new Commerce.Proxy.Entities.OrgUnitLocationClass({
                        Distance: storeDistances.getItem(this._storeId)
                    });
                    this.distance(Commerce.Proxy.Entities.StoreLocationWrapper.constructDistanceString(storeLocation));
                    this.distanceUnit(Commerce.Proxy.Entities.StoreLocationWrapper.constructDistanceUnit(storeLocation));
                    asyncResult.resolve();
                }
                else {
                    this.rejectStoreIdNotFound(asyncResult);
                }
                return asyncResult;
            };
            StoreDetailsViewModel.prototype.getStoreDetails = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.viewModelStoreDetailsGetStoreDetailsStarted(correlationId);
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return _this.channelManager.getStoreDetailsAsync(_this._storeId)
                        .done(function (storeFound) {
                        _this.storeDetails(storeFound);
                    });
                }).enqueue(function () {
                    return _this.channelManager.getStoreHoursAsync(_this._storeId)
                        .done(function (storeHours) {
                        Commerce.RetailLogger.viewModelStoreDetailsFormatStoreHoursStarted(correlationId);
                        _this.formattedStoreHours(_this.formatStoreHours(storeHours));
                        Commerce.RetailLogger.viewModelStoreDetailsFormatStoreHoursSucceeded(correlationId);
                        _this.isStoreHoursVisible(!Commerce.ObjectExtensions.isNullOrUndefined(storeHours.RegularStoreHours));
                    });
                });
                var asyncResult = new Commerce.VoidAsyncResult();
                asyncQueue.run().done(function () {
                    asyncResult.resolve();
                    Commerce.RetailLogger.viewModelStoreDetailsGetStoreDetailsSucceeded(correlationId);
                }).fail(function (errors) {
                    asyncResult.reject(errors);
                    Commerce.RetailLogger.viewModelStoreDetailsGetStoreDetailsFailed(correlationId, Commerce.ErrorHelper.serializeError(errors));
                });
                return asyncResult;
            };
            StoreDetailsViewModel.prototype.cancelSelection = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._selectionHandler)) {
                    this._selectionHandler.cancel();
                }
            };
            StoreDetailsViewModel.prototype.formatStoreHours = function (storeHours) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(storeHours.RegularStoreHours)) {
                    return [];
                }
                var regularStoreHours = storeHours.RegularStoreHours;
                var localizedWeekDayNames = [
                    [WeekDays.Monday, Commerce.ViewModelAdapter.getResourceString("string_5480")],
                    [WeekDays.Tuesday, Commerce.ViewModelAdapter.getResourceString("string_5481")],
                    [WeekDays.Wednesday, Commerce.ViewModelAdapter.getResourceString("string_5482")],
                    [WeekDays.Thursday, Commerce.ViewModelAdapter.getResourceString("string_5483")],
                    [WeekDays.Friday, Commerce.ViewModelAdapter.getResourceString("string_5484")],
                    [WeekDays.Saturday, Commerce.ViewModelAdapter.getResourceString("string_5485")],
                    [WeekDays.Sunday, Commerce.ViewModelAdapter.getResourceString("string_5486")]
                ];
                var weekDayStoreHours = new Array();
                localizedWeekDayNames.forEach(function (localizedWeekDayName) {
                    var weekDayName = WeekDays[localizedWeekDayName[0]];
                    var openTime = regularStoreHours[weekDayName + "OpenTime"];
                    var closeTime = regularStoreHours[weekDayName + "CloseTime"];
                    var isClosed = regularStoreHours["IsClosedOn" + weekDayName];
                    if (isClosed) {
                        weekDayStoreHours.push({
                            weekDay: localizedWeekDayName[1],
                            openAndCloseTime: Commerce.ViewModelAdapter.getResourceString("string_5487")
                        });
                    }
                    else {
                        var openCloseTime = _this.convertSecondsToShortTime(openTime) + "-" + _this.convertSecondsToShortTime(closeTime);
                        weekDayStoreHours.push({
                            weekDay: localizedWeekDayName[1],
                            openAndCloseTime: openCloseTime
                        });
                    }
                });
                return weekDayStoreHours;
            };
            StoreDetailsViewModel.prototype.convertSecondsToShortTime = function (seconds) {
                var date = new Date(Date.UTC(70, 0, 1, 0, 0, 0));
                date.setSeconds(seconds);
                var formatter = new Commerce.Host.Globalization.TimeZoneDateTimeFormatter(Commerce.Host.Globalization.DateTimeFormat.SHORT_TIME, null, "UTC");
                var shortTime = formatter.format(date);
                return shortTime;
            };
            StoreDetailsViewModel.prototype.rejectStoreIdNotFound = function (asyncResult) {
                asyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.STORE_NOT_FOUND, false, null, [this._storeId])]);
            };
            return StoreDetailsViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.StoreDetailsViewModel = StoreDetailsViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var StoreViewModel = (function (_super) {
            __extends(StoreViewModel, _super);
            function StoreViewModel(context) {
                return _super.call(this, context) || this;
            }
            StoreViewModel.prototype.getCurrentStore = function () {
                return this.channelManager.getStoreDetailsAsync(Commerce.ApplicationContext.Instance.storeNumber);
            };
            StoreViewModel.prototype.getAvailableStores = function () {
                return this.channelManager.getAvailableStoresAsync();
            };
            return StoreViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.StoreViewModel = StoreViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        var TaskManagementViewTypes;
        (function (TaskManagementViewTypes) {
            TaskManagementViewTypes[TaskManagementViewTypes["MyTasks"] = 0] = "MyTasks";
            TaskManagementViewTypes[TaskManagementViewTypes["AllTasks"] = 1] = "AllTasks";
            TaskManagementViewTypes[TaskManagementViewTypes["OverdueTasks"] = 2] = "OverdueTasks";
            TaskManagementViewTypes[TaskManagementViewTypes["Checklists"] = 3] = "Checklists";
        })(TaskManagementViewTypes = ViewModels.TaskManagementViewTypes || (ViewModels.TaskManagementViewTypes = {}));
        var TasklistDetailViewMode;
        (function (TasklistDetailViewMode) {
            TasklistDetailViewMode[TasklistDetailViewMode["Active"] = 0] = "Active";
            TasklistDetailViewMode[TasklistDetailViewMode["Completed"] = 1] = "Completed";
        })(TasklistDetailViewMode = ViewModels.TasklistDetailViewMode || (ViewModels.TasklistDetailViewMode = {}));
        var StatusFilterType;
        (function (StatusFilterType) {
            StatusFilterType[StatusFilterType["Active"] = 0] = "Active";
            StatusFilterType[StatusFilterType["All"] = 1] = "All";
        })(StatusFilterType = ViewModels.StatusFilterType || (ViewModels.StatusFilterType = {}));
        var TaskManagementSortField;
        (function (TaskManagementSortField) {
            TaskManagementSortField[TaskManagementSortField["AssignedWorkerName"] = 0] = "AssignedWorkerName";
            TaskManagementSortField[TaskManagementSortField["DueDateTime"] = 1] = "DueDateTime";
            TaskManagementSortField[TaskManagementSortField["TargetDateTime"] = 2] = "TargetDateTime";
            TaskManagementSortField[TaskManagementSortField["Status"] = 3] = "Status";
            TaskManagementSortField[TaskManagementSortField["Checklist"] = 4] = "Checklist";
        })(TaskManagementSortField || (TaskManagementSortField = {}));
        var TaskManagementViewModel = (function (_super) {
            __extends(TaskManagementViewModel, _super);
            function TaskManagementViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw new Error("Invalid options passed to the TaskManagementViewModel constructor: options cannot be null or undefined.");
                }
                _this._cancelSelectionHandlerOnHidden = true;
                _this._selectionHandler = options.selectionHandler;
                _this.isBusyFlag = ko.observable(false);
                _this._isBusyWhen(ko.computed(function () { return _this.isBusyFlag(); }));
                _this.viewMode = ko.observable(TaskManagementViewTypes.MyTasks);
                _this.detailsExpanded = ko.observable(true);
                _this.isInMyTasksView = ko.computed(function () {
                    return _this.viewMode() === TaskManagementViewTypes.MyTasks;
                });
                _this.isInAllTasksView = ko.computed(function () {
                    return _this.viewMode() === TaskManagementViewTypes.AllTasks;
                });
                _this.isInOverDueTasksView = ko.computed(function () {
                    return _this.viewMode() === TaskManagementViewTypes.OverdueTasks;
                });
                _this.isInChecklistsView = ko.computed(function () {
                    return _this.viewMode() === TaskManagementViewTypes.Checklists;
                });
                _this.isMyTasksDatalistLoaded = ko.observable(false);
                _this.isAllTasksDatalistLoaded = ko.observable(false);
                _this.isOverDueTasksDatalistLoaded = ko.observable(false);
                _this.isChecklistsDatalistLoaded = ko.observable(false);
                _this.reloadChecklistsCallback = ko.observable(function () { return; });
                _this.reloadMyTasksCallback = ko.observable(function () { return; });
                _this.reloadAllTasksCallback = ko.observable(function () { return; });
                _this.reloadOverDueTasksCallback = ko.observable(function () { return; });
                _this.selectedChecklistDisplays = ko.observableArray([]);
                _this.selectedTasksDisplays = ko.observableArray([]);
                _this.isPhoneDetailVisible = ko.observable(false);
                _this.tasklistDetailViewMode = ko.observable(TasklistDetailViewMode.Active);
                _this._initSortColumns();
                _this.selectedItemsDisplay = ko.computed(function () {
                    if (_this.isInChecklistsView()) {
                        return _this.selectedChecklistDisplays();
                    }
                    else {
                        return _this.selectedTasksDisplays();
                    }
                });
                _this.selectedItemDisplay = ko.computed(function () {
                    if (Commerce.ArrayExtensions.hasElements(_this.selectedItemsDisplay())) {
                        return _this.selectedItemsDisplay()[0];
                    }
                    return null;
                });
                _this.selectedChecklistForDetailDisplay = ko.computed(function () {
                    if (Commerce.ArrayExtensions.hasElements(_this.selectedChecklistDisplays())) {
                        var checklistForDetailDisplay = Commerce.ObjectExtensions.clone(_this.selectedChecklistDisplays()[0]);
                        if (_this.tasklistDetailViewMode() === TasklistDetailViewMode.Active) {
                            checklistForDetailDisplay.Tasks =
                                checklistForDetailDisplay.Tasks.filter(function (t) { return (t.StatusValue === Commerce.Proxy.Entities.ChecklistTaskStatus.NotStarted ||
                                    t.StatusValue === Commerce.Proxy.Entities.ChecklistTaskStatus.InProgress); });
                        }
                        else if (_this.tasklistDetailViewMode() === TasklistDetailViewMode.Completed) {
                            checklistForDetailDisplay.Tasks =
                                checklistForDetailDisplay.Tasks.filter(function (t) { return t.StatusValue === Commerce.Proxy.Entities.ChecklistTaskStatus.Completed; });
                        }
                        return checklistForDetailDisplay;
                    }
                    return null;
                });
                _this.isAnyItemSelected = ko.computed(function () {
                    return Commerce.ArrayExtensions.hasElements(_this.selectedItemsDisplay());
                });
                _this.tasksFilterValue = StatusFilterType.Active;
                _this.checklistsFilterValue = StatusFilterType.Active;
                return _this;
            }
            TaskManagementViewModel.prototype.switchMode = function (event) {
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.viewModelTaskManagementSwitchMode(TaskManagementViewTypes[event.detail.index], correlationId);
                this.viewMode(event.detail.index);
                this.selectedTasksDisplays([]);
                this.selectedChecklistDisplays([]);
                this._clearSelection();
            };
            TaskManagementViewModel.prototype.onShown = function () {
                this._cancelSelectionHandlerOnHidden = true;
            };
            TaskManagementViewModel.prototype.onHidden = function () {
                if (this._cancelSelectionHandlerOnHidden) {
                    this._cancelSelectionHandler();
                }
            };
            TaskManagementViewModel.prototype.onNavigateBack = function () {
                if (Commerce.Config.isPhone && this.isPhoneDetailVisible()) {
                    this.isPhoneDetailVisible(false);
                    return false;
                }
                return true;
            };
            TaskManagementViewModel.prototype.navigateToCustomer = function (customerAccountId) {
                this._cancelSelectionHandlerOnHidden = false;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.viewsMerchandisingSearchViewShowCustomerDetails(correlationId, customerAccountId);
                var viewOptions = {
                    accountNumber: customerAccountId,
                    correlationId: correlationId
                };
                Commerce.ViewModelAdapter.navigate("CustomerDetailsView", viewOptions);
            };
            TaskManagementViewModel.prototype.changeChecklistsStatusAsync = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var asyncQueue = new Commerce.AsyncQueue();
                if (!Commerce.Session.instance.CurrentEmployee.Permissions.AllowTaskManagement) {
                    var error_1 = new Commerce.Proxy.Entities.Error("string_7762");
                    asyncQueue.enqueue(function () {
                        return Commerce.VoidAsyncResult.createRejected([error_1]);
                    });
                }
                else {
                    var getTasksStatusClientRequest_1 = new Commerce.TaskManagement.GetTasksStatusClientRequest(correlationId, Commerce.ViewModelAdapter.getResourceString("string_7764"));
                    asyncQueue
                        .enqueue(function () {
                        return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getTasksStatusClientRequest_1)));
                    })
                        .enqueue(function (result) {
                        var updatedChecklists = _this.selectedChecklistDisplays().map(function (selectedChecklist) {
                            var checklist = __assign({}, _this._convertChecklistForDisplayToUpdateChecklist(selectedChecklist));
                            checklist.StatusValue = result.data.result;
                            return checklist;
                        });
                        return _this._updateChecklistsByChecklistManagerAsync(updatedChecklists);
                    });
                }
                return this._isBusyUntil(asyncQueue.run()).fail(function (errors) {
                    Commerce.RetailLogger.viewModelTaskManagementUpdateChecklistsFailed(Commerce.ErrorHelper.getErrorMessages(errors), correlationId);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            TaskManagementViewModel.prototype.changeTasksStatusAsync = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var asyncQueue = new Commerce.AsyncQueue();
                var getTasksStatusClientRequest = new Commerce.TaskManagement.GetTasksStatusClientRequest(correlationId, Commerce.ViewModelAdapter.getResourceString("string_7742"));
                asyncQueue
                    .enqueue(function () {
                    return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getTasksStatusClientRequest)));
                })
                    .enqueue(function (result) {
                    var updatedTasks = _this.selectedTasksDisplays().map(function (task) {
                        var checklistTask = __assign({}, _this._convertChecklistTaskForDisplayToUpdateChecklist(task));
                        checklistTask.StatusValue = result.data.result;
                        return checklistTask;
                    });
                    return _this._updateTasksByChecklistManagerAsync(updatedTasks);
                });
                return this._isBusyUntil(asyncQueue.run()).fail(function (errors) {
                    Commerce.RetailLogger.viewModelTaskManagementUpdateTasksFailed(Commerce.ErrorHelper.getErrorMessages(errors), correlationId);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            TaskManagementViewModel.prototype.editTasksAsync = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var errorHandler = function (errors) {
                    Commerce.RetailLogger.viewModelTaskManagementUpdateTasksFailed(Commerce.ErrorHelper.getErrorMessages(errors), correlationId);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                };
                if (!Commerce.Session.instance.CurrentEmployee.Permissions.AllowTaskManagement) {
                    var error = new Commerce.Proxy.Entities.Error("string_7754");
                    return Commerce.VoidAsyncResult.createRejected([error]).fail(errorHandler);
                }
                else {
                    var editChecklistTask = this.selectedTasksDisplays()[0];
                    var editChecklistTaskClientRequest = new Commerce.TaskManagement.EditChecklistTaskClientRequest(correlationId, editChecklistTask, editChecklistTask.AssignedToWorkerName, editChecklistTask.ContactPersonName, editChecklistTask.DeepLinkCustomerAccountName, Commerce.ViewModelAdapter.getResourceString("string_7755"));
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(editChecklistTaskClientRequest)
                        .then(function (response) {
                        if (!response.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(response.data.result)) {
                            _this._isBusyUntil(_this._updateTasksByChecklistManagerAsync([response.data.result])).fail(errorHandler);
                        }
                        else {
                            Commerce.RetailLogger.viewModelTaskManagementUpdateTasksCanceled(correlationId);
                        }
                    }));
                }
            };
            TaskManagementViewModel.prototype.addTasksAsync = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var errorHandler = function (errors) {
                    Commerce.RetailLogger.viewModelTaskManagementCreateTaskFailed(Commerce.ErrorHelper.getErrorMessages(errors), correlationId);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                };
                if (!Commerce.Session.instance.CurrentEmployee.Permissions.AllowTaskManagement) {
                    var error = new Commerce.Proxy.Entities.Error("string_7761");
                    return Commerce.VoidAsyncResult.createRejected([error]).fail(errorHandler);
                }
                else {
                    var editChecklistTask = this._initNewChecklistTask();
                    var editChecklistTaskClientRequest = new Commerce.TaskManagement.EditChecklistTaskClientRequest(correlationId, editChecklistTask, null, null, null, Commerce.ViewModelAdapter.getResourceString("string_7763"));
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(editChecklistTaskClientRequest)
                        .then(function (response) {
                        if (!response.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(response.data.result)) {
                            _this._isBusyUntil(_this._createTaskByChecklistManagerAsync(response.data.result)).fail(errorHandler);
                        }
                        else {
                            Commerce.RetailLogger.viewModelTaskManagementCreateTasksCanceled(correlationId);
                        }
                    }));
                }
            };
            TaskManagementViewModel.prototype.reassignTasksAsync = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var asyncQueue = new Commerce.AsyncQueue();
                if (!Commerce.Session.instance.CurrentEmployee.Permissions.AllowTaskManagement) {
                    var error_2 = new Commerce.Proxy.Entities.Error("string_7752");
                    asyncQueue.enqueue(function () {
                        return Commerce.VoidAsyncResult.createRejected([error_2]);
                    });
                }
                else {
                    var getStoreEmployeeClientRequest_1 = new Commerce.GetStoreEmployeeClientRequest(correlationId, this.context.stringResourceManager.getString("string_7738"), this.context.stringResourceManager.getString("string_7739"));
                    asyncQueue
                        .enqueue(function () {
                        return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getStoreEmployeeClientRequest_1)));
                    })
                        .enqueue(function (result) {
                        var updatedTasks = _this.selectedTasksDisplays().map(function (task) {
                            var checklistTask = __assign({}, _this._convertChecklistTaskForDisplayToUpdateChecklist(task));
                            checklistTask.AssignedToPersonnelNumbers = [result.data.result.StaffId];
                            return checklistTask;
                        });
                        return _this._updateTasksByChecklistManagerAsync(updatedTasks);
                    });
                }
                return this._isBusyUntil(asyncQueue.run()).fail(function (errors) {
                    Commerce.RetailLogger.viewModelTaskManagementUpdateTasksFailed(Commerce.ErrorHelper.getErrorMessages(errors), correlationId);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            TaskManagementViewModel.prototype.filterTasksAsync = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var getTasksFilterClientRequest = new Commerce.TaskManagement.GetTasksFilterClientRequest(correlationId);
                return this._isBusyUntil(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getTasksFilterClientRequest)))
                    .done(function (result) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(result.data)) {
                        if (!_this.isInChecklistsView()) {
                            _this.tasksFilterValue = Number(result.data.result);
                            _this._refreshTaskView();
                        }
                        else {
                            _this.checklistsFilterValue = Number(result.data.result);
                            _this._refreshChecklistView();
                        }
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            TaskManagementViewModel.prototype.selectChecklist = function (selectedItems) {
                this.selectedChecklistDisplays(selectedItems);
            };
            TaskManagementViewModel.prototype.onInvokeSelectChecklistForPhone = function (selectedChecklist) {
                this.isPhoneDetailVisible(true);
                this.onInvokeSelectChecklist(selectedChecklist);
            };
            TaskManagementViewModel.prototype.onInvokeSelectChecklist = function (selectedChecklist) {
                this.selectedChecklistDisplays([selectedChecklist]);
            };
            TaskManagementViewModel.prototype.selectTask = function (selectedItems) {
                this.selectedTasksDisplays(selectedItems);
            };
            TaskManagementViewModel.prototype.onInvokeSelectTaskForPhone = function (selectedTask) {
                this.isPhoneDetailVisible(true);
                this.onInvokeSelectTask(selectedTask);
            };
            TaskManagementViewModel.prototype.onInvokeSelectTask = function (selectedTask) {
                this.selectedTasksDisplays([selectedTask]);
            };
            TaskManagementViewModel.prototype.toggleDetails = function () {
                this.detailsExpanded(!this.detailsExpanded());
            };
            TaskManagementViewModel.prototype.getMyTasks = function (pageSize, skip) {
                if (!this.isMyTasksDatalistLoaded()) {
                    this.isMyTasksDatalistLoaded(true);
                }
                return this._getTasksBySearchCriteria(TaskManagementViewTypes.MyTasks, this._sortMyTasksColumn, pageSize, skip);
            };
            TaskManagementViewModel.prototype.getOverDueTasks = function (pageSize, skip) {
                if (!this.isOverDueTasksDatalistLoaded()) {
                    this.isOverDueTasksDatalistLoaded(true);
                }
                return this._getTasksBySearchCriteria(TaskManagementViewTypes.OverdueTasks, this._sortOverDueTasksColumn, pageSize, skip);
            };
            TaskManagementViewModel.prototype.getAllTasks = function (pageSize, skip) {
                if (!this.isAllTasksDatalistLoaded()) {
                    this.isAllTasksDatalistLoaded(true);
                }
                return this._getTasksBySearchCriteria(TaskManagementViewTypes.AllTasks, this._sortAllTasksColumn, pageSize, skip);
            };
            TaskManagementViewModel.prototype.getChecklists = function (pageSize, skip) {
                var _this = this;
                if (!this.isChecklistsDatalistLoaded()) {
                    this.isChecklistsDatalistLoaded(true);
                }
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var asyncQueue = new Commerce.AsyncQueue();
                Commerce.RetailLogger.viewModelTaskManagementGetChecklistsStarted(correlationId);
                var searchCriteria = {
                    ChannelId: Commerce.ApplicationContext.Instance.storeInformation.RecordId,
                    PersonnelNumber: Commerce.Session.instance.CurrentEmployee.StaffId,
                    StatusValues: this._getStatusValues(this.checklistsFilterValue, Commerce.Proxy.Entities.ChecklistStatus)
                };
                var allCurrentEmployees = [];
                var allChecklists = [];
                asyncQueue
                    .enqueue(function () {
                    return Commerce.ApplicationContext.Instance.storeEmployeeListAsync.value;
                }).enqueue(function (currentEmployees) {
                    allCurrentEmployees = currentEmployees;
                    return _this.checklistManager.searchChecklistsAsync(searchCriteria, _this._sortChecklistsColumn, pageSize, skip)
                        .done(function (result) {
                        allChecklists = result;
                    });
                });
                return this._isBusyUntil(asyncQueue.run())
                    .map(function (queueResult) {
                    Commerce.RetailLogger.viewModelTaskManagementGetChecklistsCompleted(correlationId);
                    var presentationChecklists = [];
                    allChecklists.forEach(function (checklist) {
                        var associatedTasks = [];
                        checklist.Tasks.forEach(function (task) {
                            associatedTasks.push(task.Name);
                        });
                        var activeTasksCollection = checklist.Tasks.filter(function (task) {
                            return task.StatusValue === Commerce.Proxy.Entities.ChecklistTaskStatus.NotStarted
                                || task.StatusValue === Commerce.Proxy.Entities.ChecklistTaskStatus.InProgress;
                        });
                        var checklistForDisplay = __assign(__assign({}, checklist), { ActiveTasksCount: activeTasksCollection.length, AllTasksCount: checklist.Tasks.length, LocalizedStatus: _this._getLocalizedStringForTaskStatus(checklist.StatusValue), AssignedToChannelName: _this._getChannelName(checklist.AssignedToChannelId), AssignedToWorkerName: _this._getEmployeeName(allCurrentEmployees, checklist.AssignedToWorkerPersonnelNumber), AssignedToWorkerImageUri: _this._getEmployeeImageUri(allCurrentEmployees, checklist.AssignedToWorkerPersonnelNumber), AssociatedTaskNames: associatedTasks });
                        presentationChecklists.push(checklistForDisplay);
                    });
                    return presentationChecklists;
                }).fail(function (errors) {
                    Commerce.RetailLogger.viewModelTaskManagementGetChecklistsFailed(Commerce.ErrorHelper.getErrorMessages(errors), correlationId);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                }).always(function () {
                    _this.selectedChecklistDisplays([]);
                });
            };
            TaskManagementViewModel.prototype.refreshTaskManagementView = function () {
                this._refreshChecklistView();
                this._refreshTaskView();
            };
            TaskManagementViewModel.prototype.setClearSelectionCallback = function (value) {
                this._clearSelectionCallback = value;
            };
            TaskManagementViewModel.prototype.switchToActiveTasksMode = function () {
                this.tasklistDetailViewMode(TasklistDetailViewMode.Active);
            };
            TaskManagementViewModel.prototype.switchToCompletedTasksMode = function () {
                this.tasklistDetailViewMode(TasklistDetailViewMode.Completed);
            };
            TaskManagementViewModel.prototype._clearSelection = function () {
                var _this = this;
                Commerce.Host.instance.timers.setImmediate(function () {
                    _this._clearSelectionCallback();
                });
            };
            TaskManagementViewModel.prototype._getTasksBySearchCriteria = function (viewType, sortColumn, pageSize, skip) {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var asyncQueue = new Commerce.AsyncQueue();
                Commerce.RetailLogger.viewModelTaskManagementGetTasksStarted(TaskManagementViewTypes[viewType], correlationId);
                var searchCriteria = {
                    ChannelId: Commerce.ApplicationContext.Instance.storeInformation.RecordId,
                    PersonnelNumber: Commerce.Session.instance.CurrentEmployee.StaffId,
                    FilterMyTasks: viewType === TaskManagementViewTypes.MyTasks,
                    FilterOverdueTasks: viewType === TaskManagementViewTypes.OverdueTasks,
                    StatusValues: this._getStatusValues(this.tasksFilterValue, Commerce.Proxy.Entities.ChecklistTaskStatus)
                };
                var allChecklistTasks = [];
                var allCurrentEmployees = [];
                var allChecklists = [];
                var allCustomers = [];
                asyncQueue
                    .enqueue(function () {
                    return Commerce.ApplicationContext.Instance.storeEmployeeListAsync.value;
                }).enqueue(function (currentEmployees) {
                    allCurrentEmployees = currentEmployees;
                    return _this.checklistManager.searchTasksAsync(searchCriteria, sortColumn, pageSize, skip);
                }).enqueue(function (result) {
                    allChecklistTasks = result;
                    if (!Commerce.ArrayExtensions.hasElements(allChecklistTasks)) {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                    var checklistIds = result.map(function (task) {
                        return task.ChecklistId;
                    });
                    var checklistSearchCriteria = {
                        ChecklistIds: checklistIds
                    };
                    var customerIds = result.reduce(function (filtered, task) {
                        if (task.DeepLinkTypeValue === Commerce.Proxy.Entities.ChecklistTaskDeepLinkType.CustomerAccount) {
                            filtered.push(task.DeepLink);
                        }
                        return filtered;
                    }, []);
                    var asyncResults = [];
                    var asyncSearchChecklistsResult = _this.checklistManager.searchChecklistsAsync(checklistSearchCriteria)
                        .done(function (result) {
                        allChecklists = result;
                    });
                    asyncResults.push(asyncSearchChecklistsResult);
                    if (Commerce.ArrayExtensions.hasElements(customerIds)) {
                        var asyncSearchCustomersResult = _this.customerManager.getCustomersByAccountNumbersAsync(customerIds)
                            .done(function (result) {
                            allCustomers = result;
                        });
                        asyncResults.push(asyncSearchCustomersResult);
                    }
                    return Commerce.VoidAsyncResult.join(asyncResults);
                });
                return this._isBusyUntil(asyncQueue.run())
                    .map(function (queueResult) {
                    Commerce.RetailLogger.viewModelTaskManagementGetTasksCompleted(TaskManagementViewTypes[viewType], correlationId);
                    var presentationTasks = [];
                    allChecklistTasks.forEach(function (task) {
                        var checklist = Commerce.ArrayExtensions.firstOrUndefined(allChecklists, function (c) {
                            return c.ProcessId === task.ChecklistId;
                        });
                        var customer = null;
                        if (task.DeepLinkTypeValue === Commerce.Proxy.Entities.ChecklistTaskDeepLinkType.CustomerAccount) {
                            customer = Commerce.ArrayExtensions.firstOrUndefined(allCustomers, function (c) {
                                return c.AccountNumber === task.DeepLink;
                            });
                        }
                        var taskForDisplay = __assign(__assign({}, task), { LocalizedStatus: _this._getLocalizedStringForTaskStatus(task.StatusValue), AssignedToWorkerName: Commerce.ArrayExtensions.hasElements(task.AssignedToPersonnelNumbers) ?
                                _this._getEmployeeName(allCurrentEmployees, task.AssignedToPersonnelNumbers[0]) : Commerce.StringExtensions.EMPTY, AssignedToWorkerImageUri: Commerce.ArrayExtensions.hasElements(task.AssignedToPersonnelNumbers) ?
                                _this._getEmployeeImageUri(allCurrentEmployees, task.AssignedToPersonnelNumbers[0]) : Commerce.StringExtensions.EMPTY, ContactPersonName: _this._getEmployeeName(allCurrentEmployees, task.ContactPersonPersonnelNumber), ContactPersonImageUri: _this._getEmployeeImageUri(allCurrentEmployees, task.ContactPersonPersonnelNumber), ResolvedByName: _this._getEmployeeName(allCurrentEmployees, task.ResolvedByPersonnelNumber), ChecklistName: Commerce.ObjectExtensions.isNullOrUndefined(checklist) ? Commerce.StringExtensions.EMPTY : checklist.Name, ChecklistAssignedToChannelName: Commerce.ObjectExtensions.isNullOrUndefined(checklist) ?
                                null : _this._getChannelName(checklist.AssignedToChannelId), ChecklistAssignedToWorkerName: Commerce.ObjectExtensions.isNullOrUndefined(checklist) ?
                                null :
                                _this._getEmployeeName(allCurrentEmployees, checklist.AssignedToWorkerPersonnelNumber), DeepLinkCustomerAccountName: Commerce.ObjectExtensions.isNullOrUndefined(customer) ?
                                Commerce.StringExtensions.EMPTY : customer.Name, DeepLinkCustomerAccountImageUri: Commerce.ObjectExtensions.isNullOrUndefined(customer) ?
                                Commerce.StringExtensions.EMPTY : _this._getCustomerImageUri(customer), ChecklistAssignedToWorkerImageUri: Commerce.ObjectExtensions.isNullOrUndefined(checklist) ?
                                Commerce.StringExtensions.EMPTY :
                                _this._getEmployeeImageUri(allCurrentEmployees, checklist.AssignedToWorkerPersonnelNumber) });
                        presentationTasks.push(taskForDisplay);
                    });
                    return presentationTasks;
                }).fail(function (errors) {
                    Commerce.RetailLogger.viewModelTaskManagementGetTasksFailed(TaskManagementViewTypes[viewType], Commerce.ErrorHelper.getErrorMessages(errors), correlationId);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                }).always(function () {
                    _this.selectedTasksDisplays([]);
                });
            };
            TaskManagementViewModel.prototype._getChannelName = function (channelId) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(channelId) || channelId === 0) {
                    return null;
                }
                var store = Commerce.ArrayExtensions.firstOrUndefined(Commerce.ApplicationContext.Instance.availableStores.getItems(), function (orgUnit) {
                    return orgUnit.RecordId === channelId;
                });
                return Commerce.ObjectExtensions.isNullOrUndefined(store) ? Commerce.StringExtensions.EMPTY : store.OrgUnitName;
            };
            TaskManagementViewModel.prototype._getEmployeeName = function (currentEmployees, employeeStaffId) {
                if (Commerce.StringExtensions.isNullOrWhitespace(employeeStaffId)) {
                    return null;
                }
                var employee = Commerce.ArrayExtensions.firstOrUndefined(currentEmployees, function (e) {
                    return e.StaffId === employeeStaffId;
                });
                return Commerce.ObjectExtensions.isNullOrUndefined(employee) ? employeeStaffId : employee.Name;
            };
            TaskManagementViewModel.prototype._getEmployeeImageUri = function (currentEmployees, employeeStaffId) {
                if (Commerce.StringExtensions.isNullOrWhitespace(employeeStaffId)) {
                    return Commerce.StringExtensions.EMPTY;
                }
                var employee = Commerce.ArrayExtensions.firstOrUndefined(currentEmployees, function (e) {
                    return e.StaffId === employeeStaffId;
                });
                return Commerce.ObjectExtensions.isNullOrUndefined(employee) ?
                    Commerce.StringExtensions.EMPTY : Commerce.EmployeeHelper.getPicture(employee, Commerce.Session.instance.connectionStatus);
            };
            TaskManagementViewModel.prototype._getCustomerImageUri = function (customer) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(customer)) {
                    return Commerce.StringExtensions.EMPTY;
                }
                var picture;
                if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                    if (Commerce.ArrayExtensions.hasElements(customer.Images)
                        && !Commerce.StringExtensions.isNullOrWhitespace(customer.Images[0].Uri)) {
                        picture = customer.Images[0].Uri;
                    }
                    else {
                        picture = "/Assets/defaultSmall.png";
                    }
                }
                else {
                    picture = customer.OfflineImage;
                }
                return picture;
            };
            TaskManagementViewModel.prototype._getLocalizedStringForTaskStatus = function (taskStatusValue) {
                var statusLocalizedTexts = [
                    Commerce.StringExtensions.EMPTY,
                    Commerce.ViewModelAdapter.getResourceString("string_7723"),
                    Commerce.ViewModelAdapter.getResourceString("string_7724"),
                    Commerce.ViewModelAdapter.getResourceString("string_7725"),
                    Commerce.ViewModelAdapter.getResourceString("string_7726")
                ];
                return statusLocalizedTexts[taskStatusValue];
            };
            TaskManagementViewModel.prototype._initSortMenuItem = function (sortField, sortAxBubbleAttr, isAscending) {
                return {
                    displayName: Commerce.StringExtensions.format(this.context.stringResourceManager.getString("string_13187"), this._getSortColumnDisplayName(sortField), this.context.stringResourceManager.getString(isAscending ? "string_13184" : "string_13185")),
                    axBubbleAttr: sortAxBubbleAttr,
                    buttonId: Commerce.StringExtensions.EMPTY,
                    clickEvent: function () { return; }
                };
            };
            TaskManagementViewModel.prototype._initSortColumns = function () {
                var _this = this;
                var sortMenuItemsDictionary = new Commerce.Dictionary();
                sortMenuItemsDictionary.setItem("byDueDateTimeAsc", this._initSortMenuItem(TaskManagementSortField.DueDateTime, "taskManagementView_sortByDueDateAsc", true));
                sortMenuItemsDictionary.setItem("byDueDateTimeDesc", this._initSortMenuItem(TaskManagementSortField.DueDateTime, "taskManagementView_sortByDueDateDesc", false));
                sortMenuItemsDictionary.setItem("byStatusAsc", this._initSortMenuItem(TaskManagementSortField.Status, "taskManagementView_sortByStatusAsc", true));
                sortMenuItemsDictionary.setItem("byStatusDesc", this._initSortMenuItem(TaskManagementSortField.Status, "taskManagementView_sortByStatusDesc", false));
                sortMenuItemsDictionary.setItem("byAssignedWorkerNameAsc", this._initSortMenuItem(TaskManagementSortField.AssignedWorkerName, "taskManagementView_sortByAssignedToAsc", true));
                sortMenuItemsDictionary.setItem("byAssignedWorkerNameDesc", this._initSortMenuItem(TaskManagementSortField.AssignedWorkerName, "taskManagementView_sortByAssignedToDesc", false));
                sortMenuItemsDictionary.setItem("byChecklistAsc", this._initSortMenuItem(TaskManagementSortField.Checklist, "taskManagementView_sortByChecklistAsc", true));
                sortMenuItemsDictionary.setItem("byChecklistDesc", this._initSortMenuItem(TaskManagementSortField.Checklist, "taskManagementView_sortByChecklistDesc", false));
                sortMenuItemsDictionary.setItem("byTargetDateTimeAsc", this._initSortMenuItem(TaskManagementSortField.TargetDateTime, "taskManagementView_sortByTargetDateTimeAsc", true));
                sortMenuItemsDictionary.setItem("byTargetDateTimeDesc", this._initSortMenuItem(TaskManagementSortField.TargetDateTime, "taskManagementView_sortByTargetDateTimeDesc", false));
                this.sortMyTasksMenuItems = [];
                ["DueDateTime", "Status", "Checklist"].forEach(function (sortField) {
                    _this.sortMyTasksMenuItems.push(__assign(__assign({}, sortMenuItemsDictionary.getItem(Commerce.StringExtensions.format("by{0}Asc", sortField))), {
                        buttonId: Commerce.StringExtensions.format("btnSortMyTasksBy{0}Asc", sortField),
                        clickEvent: function () { return _this._sortMyTasks(_this._getSortColumnFieldId(TaskManagementSortField[sortField]), false); }
                    }));
                    _this.sortMyTasksMenuItems.push(__assign(__assign({}, sortMenuItemsDictionary.getItem(Commerce.StringExtensions.format("by{0}Desc", sortField))), {
                        buttonId: Commerce.StringExtensions.format("btnSortMyTasksBy{0}Desc", sortField),
                        clickEvent: function () { return _this._sortMyTasks(_this._getSortColumnFieldId(TaskManagementSortField[sortField]), true); }
                    }));
                });
                this.sortAllTasksMenuItems = [];
                ["AssignedWorkerName", "DueDateTime", "Status", "Checklist"].forEach(function (sortField) {
                    _this.sortAllTasksMenuItems.push(__assign(__assign({}, sortMenuItemsDictionary.getItem(Commerce.StringExtensions.format("by{0}Asc", sortField))), {
                        buttonId: Commerce.StringExtensions.format("btnSortAllTasksBy{0}Asc", sortField),
                        clickEvent: function () { return _this._sortAllTasks(_this._getSortColumnFieldId(TaskManagementSortField[sortField]), false); }
                    }));
                    _this.sortAllTasksMenuItems.push(__assign(__assign({}, sortMenuItemsDictionary.getItem(Commerce.StringExtensions.format("by{0}Desc", sortField))), {
                        buttonId: Commerce.StringExtensions.format("btnSortAllTasksBy{0}Desc", sortField),
                        clickEvent: function () { return _this._sortAllTasks(_this._getSortColumnFieldId(TaskManagementSortField[sortField]), true); }
                    }));
                });
                this.sortOverDueTasksMenuItems = [];
                ["AssignedWorkerName", "DueDateTime", "Status", "Checklist"].forEach(function (sortField) {
                    _this.sortOverDueTasksMenuItems.push(__assign(__assign({}, sortMenuItemsDictionary.getItem(Commerce.StringExtensions.format("by{0}Asc", sortField))), {
                        buttonId: Commerce.StringExtensions.format("btnSortOverDueTasksBy{0}Asc", sortField),
                        clickEvent: function () { return _this._sortOverDueTasks(_this._getSortColumnFieldId(TaskManagementSortField[sortField]), false); }
                    }));
                    _this.sortOverDueTasksMenuItems.push(__assign(__assign({}, sortMenuItemsDictionary.getItem(Commerce.StringExtensions.format("by{0}Desc", sortField))), {
                        buttonId: Commerce.StringExtensions.format("btnSortOverDueTasksBy{0}Desc", sortField),
                        clickEvent: function () { return _this._sortOverDueTasks(_this._getSortColumnFieldId(TaskManagementSortField[sortField]), true); }
                    }));
                });
                this.sortChecklistsMenuItems = [];
                ["TargetDateTime", "Status"].forEach(function (sortField) {
                    _this.sortChecklistsMenuItems.push(__assign(__assign({}, sortMenuItemsDictionary.getItem(Commerce.StringExtensions.format("by{0}Asc", sortField))), {
                        buttonId: Commerce.StringExtensions.format("btnSortChecklistsBy{0}Asc", sortField),
                        clickEvent: function () { return _this._sortChecklists(_this._getSortColumnFieldId(TaskManagementSortField[sortField]), false); }
                    }));
                    _this.sortChecklistsMenuItems.push(__assign(__assign({}, sortMenuItemsDictionary.getItem(Commerce.StringExtensions.format("by{0}Desc", sortField))), {
                        buttonId: Commerce.StringExtensions.format("btnSortChecklistsBy{0}Desc", sortField),
                        clickEvent: function () { return _this._sortChecklists(_this._getSortColumnFieldId(TaskManagementSortField[sortField]), true); }
                    }));
                });
            };
            TaskManagementViewModel.prototype._getSortColumnDisplayName = function (sortField) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(sortField)) {
                    switch (sortField) {
                        case TaskManagementSortField.AssignedWorkerName:
                            return this.context.stringResourceManager.getString("string_7729");
                        case TaskManagementSortField.Status:
                            return this.context.stringResourceManager.getString("string_7730");
                        case TaskManagementSortField.DueDateTime:
                            return this.context.stringResourceManager.getString("string_7731");
                        case TaskManagementSortField.TargetDateTime:
                            return this.context.stringResourceManager.getString("string_7732");
                        case TaskManagementSortField.Checklist:
                            return this.context.stringResourceManager.getString("string_7733");
                        default: break;
                    }
                }
                return Commerce.StringExtensions.EMPTY;
            };
            TaskManagementViewModel.prototype._getSortColumnFieldId = function (sortField) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(sortField)) {
                    return TaskManagementSortField[sortField];
                }
                return Commerce.StringExtensions.EMPTY;
            };
            TaskManagementViewModel.prototype._sortMyTasks = function (columnName, isDescending) {
                this._sortMyTasksColumn = { ColumnName: columnName, IsDescending: isDescending };
                this.selectedTasksDisplays.removeAll();
                this.reloadMyTasksCallback()();
            };
            TaskManagementViewModel.prototype._sortAllTasks = function (columnName, isDescending) {
                this._sortAllTasksColumn = { ColumnName: columnName, IsDescending: isDescending };
                this.selectedTasksDisplays.removeAll();
                this.reloadAllTasksCallback()();
            };
            TaskManagementViewModel.prototype._sortOverDueTasks = function (columnName, isDescending) {
                this._sortOverDueTasksColumn = { ColumnName: columnName, IsDescending: isDescending };
                this.selectedTasksDisplays.removeAll();
                this.reloadOverDueTasksCallback()();
            };
            TaskManagementViewModel.prototype._sortChecklists = function (columnName, isDescending) {
                this._sortChecklistsColumn = { ColumnName: columnName, IsDescending: isDescending };
                this._refreshChecklistView();
            };
            TaskManagementViewModel.prototype._updateChecklistsByChecklistManagerAsync = function (updateChecklists) {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.viewModelTaskManagementUpdateChecklistsStarted(updateChecklists.length, correlationId);
                return this.checklistManager.updateChecklistsAsync(updateChecklists)
                    .done(function (result) {
                    Commerce.RetailLogger.viewModelTaskManagementUpdateChecklistsSucceeded(updateChecklists.length, correlationId);
                    _this._refreshChecklistView();
                });
            };
            TaskManagementViewModel.prototype._updateTasksByChecklistManagerAsync = function (updateTasks) {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.viewModelTaskManagementUpdateTasksStarted(updateTasks.length, correlationId);
                return this.checklistManager.updateTasksAsync(updateTasks)
                    .done(function (result) {
                    Commerce.RetailLogger.viewModelTaskManagementUpdateTasksSucceeded(updateTasks.length, correlationId);
                    _this._refreshTaskView();
                });
            };
            TaskManagementViewModel.prototype._createTaskByChecklistManagerAsync = function (createTask) {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.viewModelTaskManagementCreateTaskStarted(Commerce.StringExtensions.isNullOrWhitespace(createTask.ChecklistId), correlationId);
                return this.checklistManager.createTaskAsync(createTask)
                    .done(function (result) {
                    Commerce.RetailLogger.viewModelTaskManagementCreateTaskSucceeded(Commerce.StringExtensions.isNullOrWhitespace(createTask.ChecklistId), correlationId);
                    _this._refreshChecklistView();
                    _this._refreshTaskView();
                });
            };
            TaskManagementViewModel.prototype._initNewChecklistTask = function () {
                var newChecklistTask = new Commerce.Proxy.Entities.ChecklistTaskClass();
                newChecklistTask.StatusValue = Commerce.Proxy.Entities.ChecklistTaskStatus.NotStarted;
                newChecklistTask.DeepLinkTypeValue = 0;
                newChecklistTask.DeepLink = Commerce.StringExtensions.EMPTY;
                return newChecklistTask;
            };
            TaskManagementViewModel.prototype._convertChecklistTaskForDisplayToUpdateChecklist = function (checklistTaskForDisplay) {
                var checklistTask = {
                    Version: checklistTaskForDisplay.Version,
                    AssignedToPersonnelNumbers: checklistTaskForDisplay.AssignedToPersonnelNumbers,
                    Id: checklistTaskForDisplay.Id,
                    Name: checklistTaskForDisplay.Name,
                    Description: checklistTaskForDisplay.Description,
                    DueDateTime: checklistTaskForDisplay.DueDateTime,
                    DeepLinkTypeValue: checklistTaskForDisplay.DeepLinkTypeValue,
                    DeepLink: checklistTaskForDisplay.DeepLink,
                    DeepLinkPosOperationName: checklistTaskForDisplay.DeepLinkPosOperationName,
                    ContactPersonPersonnelNumber: checklistTaskForDisplay.ContactPersonPersonnelNumber,
                    Instructions: checklistTaskForDisplay.Instructions,
                    StatusValue: checklistTaskForDisplay.StatusValue,
                    CompletionDateTime: checklistTaskForDisplay.CompletionDateTime,
                    ResolvedByPersonnelNumber: checklistTaskForDisplay.ResolvedByPersonnelNumber,
                    ChecklistId: checklistTaskForDisplay.ChecklistId,
                    ExtensionProperties: checklistTaskForDisplay.ExtensionProperties
                };
                return checklistTask;
            };
            TaskManagementViewModel.prototype._convertChecklistForDisplayToUpdateChecklist = function (checklistForDisplay) {
                var checklist = {
                    RecordId: checklistForDisplay.RecordId,
                    Tasks: checklistForDisplay.Tasks,
                    Version: checklistForDisplay.Version,
                    ProcessId: checklistForDisplay.ProcessId,
                    Name: checklistForDisplay.Name,
                    Description: checklistForDisplay.Description,
                    AssignedToChannelId: checklistForDisplay.AssignedToChannelId,
                    AssignedToWorkerPersonnelNumber: checklistForDisplay.AssignedToWorkerPersonnelNumber,
                    StatusValue: checklistForDisplay.StatusValue,
                    StartDateTime: checklistForDisplay.StartDateTime,
                    EndDateTime: checklistForDisplay.EndDateTime,
                    TargetDateTime: checklistForDisplay.TargetDateTime,
                    ExtensionProperties: checklistForDisplay.ExtensionProperties
                };
                return checklist;
            };
            TaskManagementViewModel.prototype._refreshTaskView = function () {
                this.isMyTasksDatalistLoaded(false);
                this.isAllTasksDatalistLoaded(false);
                this.isOverDueTasksDatalistLoaded(false);
                this.isPhoneDetailVisible(false);
                this.selectedTasksDisplays.removeAll();
                switch (this.viewMode()) {
                    case TaskManagementViewTypes.MyTasks:
                        this.reloadMyTasksCallback()();
                        break;
                    case TaskManagementViewTypes.AllTasks:
                        this.reloadAllTasksCallback()();
                        break;
                    case TaskManagementViewTypes.OverdueTasks:
                        this.reloadOverDueTasksCallback()();
                        break;
                }
            };
            TaskManagementViewModel.prototype._refreshChecklistView = function () {
                this.isChecklistsDatalistLoaded(false);
                this.isPhoneDetailVisible(false);
                this.selectedChecklistDisplays.removeAll();
                if (this.isInChecklistsView()) {
                    this.reloadChecklistsCallback()();
                }
            };
            TaskManagementViewModel.prototype._cancelSelectionHandler = function () {
                var selectionHandler = this._selectionHandler;
                this._selectionHandler = null;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(selectionHandler)) {
                    selectionHandler.cancel();
                }
            };
            TaskManagementViewModel.prototype._getStatusValues = function (filterValue, valueEnums) {
                var result;
                switch (filterValue) {
                    case StatusFilterType.Active:
                        result = [valueEnums.NotStarted, valueEnums.InProgress];
                        break;
                    case StatusFilterType.All:
                        result = [valueEnums.NotStarted, valueEnums.InProgress, valueEnums.Completed];
                        break;
                }
                return result;
            };
            TaskManagementViewModel.DEFAULT_PAGE_SIZE = 80;
            return TaskManagementViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.TaskManagementViewModel = TaskManagementViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var TenderCountingLine = (function () {
            function TenderCountingLine(currencyCode, tenderName, tenderType, denominations, exchangeRate, totalAmount, totalAmountInCurrency, numberOfTenderDeclarationRecount) {
                if (exchangeRate === void 0) { exchangeRate = 1; }
                if (totalAmount === void 0) { totalAmount = 0; }
                if (totalAmountInCurrency === void 0) { totalAmountInCurrency = 0; }
                if (numberOfTenderDeclarationRecount === void 0) { numberOfTenderDeclarationRecount = 0; }
                this.currencyCode = currencyCode;
                this.tenderName = tenderName;
                this.tenderType = tenderType;
                this.exchangeRate = exchangeRate;
                this.totalAmount = totalAmount;
                this.totalAmountInCurrency = totalAmountInCurrency;
                this.denominations = denominations;
                this.numberOfTenderDeclarationRecount = numberOfTenderDeclarationRecount;
                this.totalAmountInCurrencyToDisplay =
                    Commerce.NumberExtensions.formatCurrency(this.totalAmountInCurrency, this.currencyCode);
            }
            Object.defineProperty(TenderCountingLine.prototype, "ariaLabelPaymentCount", {
                get: function () {
                    return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_4202"), this.tenderName, this.currencyCode);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TenderCountingLine.prototype, "ariaLabelPaymentTotal", {
                get: function () {
                    return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_4203"), this.tenderName, this.totalAmountInCurrencyToDisplay);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TenderCountingLine.prototype, "hasDenominations", {
                get: function () {
                    return Commerce.ArrayExtensions.hasElements(this.denominations);
                },
                enumerable: true,
                configurable: true
            });
            return TenderCountingLine;
        }());
        ViewModels.TenderCountingLine = TenderCountingLine;
        var TenderCountingViewModel = (function (_super) {
            __extends(TenderCountingViewModel, _super);
            function TenderCountingViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw new Error("Invalid options passed to the TenderCountingViewModel constructor: options cannot be null or undefined.");
                }
                else if (!Commerce.ExtensibleEnumerations.ExtensibleTransactionType.BankDrop.equals(options.transactionType)
                    && !Commerce.ExtensibleEnumerations.ExtensibleTransactionType.TenderDeclaration.equals(options.transactionType)
                    && !Commerce.ExtensibleEnumerations.ExtensibleTransactionType.SafeDrop.equals(options.transactionType)) {
                    throw new Error("Invalid options passed to the TenderCountingViewModel constructor: options.transactionType is not a supported transaction type.");
                }
                else if (!Commerce.ObjectExtensions.isFunction(options.onTenderLineSelected)) {
                    throw new Error("Invalid options passed to the TenderCountingViewModel constructor: options.onTenderLineSelected must be a function.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.selectionHandler)) {
                    throw new Error("Invalid options passed to the TenderCountingViewModel constructor: options.selectionHandler cannot be null or undefined.");
                }
                _this.tenderCountingLines = Commerce.ObjectExtensions.isNullOrUndefined(options.tenderCountingLines) ?
                    ko.observableArray([]) : ko.observableArray(options.tenderCountingLines);
                _this.totalAmountCounted = ko.computed(function () {
                    return Commerce.ArrayExtensions.sum(_this.tenderCountingLines(), function (tenderLine) {
                        return tenderLine.totalAmount;
                    });
                }, _this);
                _this._selectionInProgress = ko.observable(false);
                _this._isBusyWhen(_this._selectionInProgress);
                _this._tenderAmountInput = Commerce.StringExtensions.EMPTY;
                _this._primaryCurrencyCode = Commerce.ApplicationContext.Instance.deviceConfiguration.Currency;
                _this._currencyAmountMap = new Commerce.Dictionary();
                _this._tenderCountingType = options.transactionType;
                _this._shiftToUse = Commerce.ObjectExtensions.isNullOrUndefined(options.shift) ? Commerce.Session.instance.Shift : options.shift;
                _this._tenderCountingLines = options.tenderCountingLines;
                _this._nextTenderLineToSelect = -1;
                _this._onTenderLineSelected = options.onTenderLineSelected;
                _this._selectionHandler = options.selectionHandler;
                _this._canAbortTransaction = true;
                return _this;
            }
            Object.defineProperty(TenderCountingViewModel.prototype, "selectedLineIndexForDenomination", {
                get: function () {
                    return this._selectedLineIndexForDenomination;
                },
                enumerable: true,
                configurable: true
            });
            TenderCountingViewModel.prototype.loadAsync = function () {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._tenderCountingLines)) {
                    return this._isBusyUntil(this._getCurrenciesForCurrentStoreAsync(Commerce.LoggerHelper.getNewCorrelationId()))
                        .done(function (countingLines) {
                        countingLines.forEach(function (countingLine) {
                            var tenderDeclarationNeeded = Commerce.ExtensibleEnumerations.ExtensibleTransactionType.TenderDeclaration.equals(_this._tenderCountingType) &&
                                countingLine.tenderType.CountingRequired === 1;
                            var bankDropNeeded = Commerce.ExtensibleEnumerations.ExtensibleTransactionType.BankDrop.equals(_this._tenderCountingType) &&
                                countingLine.tenderType.TakenToBank === 1;
                            var safeDropNeeded = Commerce.ExtensibleEnumerations.ExtensibleTransactionType.SafeDrop.equals(_this._tenderCountingType) &&
                                countingLine.tenderType.TakenToSafe === 1;
                            if (tenderDeclarationNeeded || bankDropNeeded || safeDropNeeded) {
                                _this.tenderCountingLines.push(countingLine);
                            }
                        });
                    }).fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }
                return Commerce.VoidAsyncResult.createResolved();
            };
            TenderCountingViewModel.prototype.switchToDenominationsMode = function (tenderCountingLineIndex) {
                if (tenderCountingLineIndex < this.tenderCountingLines().length && this.tenderCountingLines()[tenderCountingLineIndex].hasDenominations) {
                    this._selectedLineIndexForDenomination = tenderCountingLineIndex;
                }
                this._getDenominations();
            };
            TenderCountingViewModel.prototype.tenderLineSelectionhandler = function (selectedLines) {
                this._selectedTenderLine = Commerce.ArrayExtensions.firstOrUndefined(selectedLines);
                var lineIndex;
                if (this._nextTenderLineToSelect >= 0 && Commerce.ObjectExtensions.isNullOrUndefined(this._selectedTenderLine)) {
                    if (this._nextTenderLineToSelect >= this.tenderCountingLines().length) {
                        lineIndex = this._nextTenderLineToSelect - 1;
                    }
                    else {
                        lineIndex = this._nextTenderLineToSelect;
                    }
                    this._selectedTenderLine = this.tenderCountingLines()[lineIndex];
                    this._nextTenderLineToSelect = -1;
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._selectedTenderLine)) {
                    this._onTenderLineSelected(this._selectedTenderLine, lineIndex);
                }
            };
            TenderCountingViewModel.prototype.changeDeclareAmount = function (isDeclareAmount) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._selectedTenderLine)) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var asyncQueue = new Commerce.AsyncQueue();
                var title;
                if (Commerce.ExtensibleEnumerations.ExtensibleTransactionType.TenderDeclaration.equals(this._tenderCountingType)) {
                    title = Commerce.ViewModelAdapter.getResourceString("string_4029");
                }
                else if (Commerce.ExtensibleEnumerations.ExtensibleTransactionType.BankDrop.equals(this._tenderCountingType)) {
                    title = Commerce.ViewModelAdapter.getResourceString("string_4572");
                }
                else if (Commerce.ExtensibleEnumerations.ExtensibleTransactionType.SafeDrop.equals(this._tenderCountingType)) {
                    title = Commerce.ViewModelAdapter.getResourceString("string_4573");
                }
                this._tenderAmountInput = "0";
                if (isDeclareAmount) {
                    asyncQueue.enqueue(function () {
                        var tenderDetails = {
                            Amount: Commerce.NumberExtensions.parseNumber(_this._tenderAmountInput),
                            AmountInForeignCurrency: _this._selectedTenderLine.totalAmountInCurrency,
                            ForeignCurrencyExchangeRate: _this._selectedTenderLine.exchangeRate,
                            ForeignCurrency: _this._selectedTenderLine.currencyCode,
                            TenderTypeId: _this._selectedTenderLine.tenderType.TenderTypeId,
                            TenderRecount: _this._selectedTenderLine.numberOfTenderDeclarationRecount,
                            DenominationDetails: _this._selectedTenderLine.denominations,
                            ExtensionProperties: []
                        };
                        var getCountedTenderDetailAmountRequest = new Commerce.TenderCounting.GetCountedTenderDetailAmountClientRequest(correlationId, tenderDetails, _this._tenderCountingType);
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getCountedTenderDetailAmountRequest))
                            .done(function (response) {
                            if (response.canceled) {
                                asyncQueue.cancel();
                                return;
                            }
                            _this._changeAmountHandler(response.data.amount);
                        });
                    });
                }
                else {
                    asyncQueue.enqueue(function () {
                        var activity = new Commerce.Activities.GetQuantityActivity({
                            title: title,
                            subTitle: Commerce.StringExtensions.EMPTY,
                            inputLabel: Commerce.ViewModelAdapter.getResourceString("string_4196"),
                            quantity: _this._tenderAmountInput,
                            decimalPrecision: 0,
                            parser: new Commerce.NumberParser()
                        });
                        return activity.execute().done(function () {
                            if (!activity.response) {
                                asyncQueue.cancel();
                                return;
                            }
                            _this._changeAmountHandler(Commerce.NumberExtensions.parseNumber(activity.response.quantity));
                        });
                    });
                }
                return asyncQueue.run();
            };
            TenderCountingViewModel.prototype.onSave = function () {
                this._selectionInProgress(true);
                this._selectionHandler.select({
                    tenderCountingLines: this._convertCountLinesToDetailLines(this.tenderCountingLines()),
                    isOperationAborted: false
                }, this._onSelectionAttemptAsyncCallbackCanceled.bind(this), this._onSelectionAttemptAsyncCallbackFailed.bind(this));
            };
            TenderCountingViewModel.prototype.abortOperationAsync = function () {
                this._canAbortTransaction = false;
                this._selectionInProgress(true);
                this._selectionHandler.select({
                    tenderCountingLines: this._convertCountLinesToDetailLines(this.tenderCountingLines()),
                    isOperationAborted: true
                }, this._onSelectionAttemptAsyncCallbackCanceled.bind(this), this._onSelectionAttemptAsyncCallbackFailed.bind(this));
                return Commerce.VoidAsyncResult.createResolved();
            };
            TenderCountingViewModel.prototype.onHidden = function () {
                if (this._canAbortTransaction) {
                    this._selectionInProgress(false);
                    var selectionHandler = this._selectionHandler;
                    this._selectionHandler = null;
                    selectionHandler.cancel();
                }
            };
            TenderCountingViewModel.prototype._changeAmountHandler = function (numberEntered) {
                if (isNaN(numberEntered)) {
                    Commerce.NotificationHandler.displayClientErrors([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.AMOUNT_IS_NOT_VALID)]);
                    return;
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._selectedTenderLine)) {
                    this._selectedTenderLine.exchangeRate = this._getCurrencyExchangeRate(this._selectedTenderLine.currencyCode);
                    this._selectedTenderLine.totalAmount =
                        this._convertToStoreCurrency(numberEntered, this._selectedTenderLine.currencyCode, this._selectedTenderLine.exchangeRate);
                    this._selectedTenderLine.totalAmountInCurrency = numberEntered;
                    this._selectedTenderLine.totalAmountInCurrencyToDisplay =
                        Commerce.NumberExtensions.formatCurrency(this._selectedTenderLine.totalAmountInCurrency, this._selectedTenderLine.currencyCode);
                    this._selectedTenderLine.denominations.forEach(function (denominationLine) {
                        denominationLine.AmountDeclared = 0;
                        denominationLine.QuantityDeclared = 0;
                    });
                    this.tenderCountingLines(this.tenderCountingLines());
                }
            };
            TenderCountingViewModel.prototype._convertToStoreCurrency = function (amount, fromCurrencyCode, fromCurrencyExchangeRate) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(amount)) {
                    return amount;
                }
                if (Commerce.StringExtensions.isNullOrWhitespace(fromCurrencyCode)) {
                    fromCurrencyCode = this.applicationContext.deviceConfiguration.Currency;
                }
                if (!this._currencyAmountMap.hasItem(fromCurrencyCode)) {
                    return amount;
                }
                var storeAmount = amount * fromCurrencyExchangeRate;
                return Commerce.NumberExtensions.roundToNDigits(storeAmount, Commerce.NumberExtensions.getDecimalPrecision());
            };
            TenderCountingViewModel.prototype._getCurrencyExchangeRate = function (currencyCode) {
                if (Commerce.StringExtensions.isNullOrWhitespace(currencyCode)) {
                    currencyCode = this.applicationContext.deviceConfiguration.Currency;
                }
                var exchangeRate = 0;
                if (currencyCode === this._primaryCurrencyCode) {
                    exchangeRate = 1;
                }
                else if (this._currencyAmountMap.hasItem(currencyCode)) {
                    var currency = this._currencyAmountMap.getItem(currencyCode);
                    exchangeRate = currency.ExchangeRate === 0 ? 0 : (1 / currency.ExchangeRate);
                }
                return exchangeRate;
            };
            TenderCountingViewModel.prototype._convertCountLinesToDetailLines = function (tenderCountingLines) {
                var tenderDetailLines = [];
                if (Commerce.ArrayExtensions.hasElements(tenderCountingLines)) {
                    tenderCountingLines.forEach(function (tenderCountingLine) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(tenderCountingLine)) {
                            var tenderDetailLine_1 = new Commerce.Proxy.Entities.TenderDetailClass();
                            tenderDetailLine_1.Amount = tenderCountingLine.totalAmount;
                            tenderDetailLine_1.ForeignCurrency = tenderCountingLine.currencyCode;
                            tenderDetailLine_1.ForeignCurrencyExchangeRate = tenderCountingLine.exchangeRate;
                            tenderDetailLine_1.AmountInForeignCurrency = tenderCountingLine.totalAmountInCurrency;
                            tenderDetailLine_1.TenderTypeId = tenderCountingLine.tenderType.TenderTypeId;
                            tenderDetailLine_1.TenderRecount = tenderCountingLine.numberOfTenderDeclarationRecount;
                            tenderDetailLine_1.DenominationDetails = [];
                            tenderCountingLine.denominations.forEach(function (denominationLine) {
                                if (denominationLine.QuantityDeclared > 0) {
                                    tenderDetailLine_1.DenominationDetails.push(denominationLine);
                                }
                            });
                            tenderDetailLines.push(tenderDetailLine_1);
                        }
                    });
                }
                return tenderDetailLines;
            };
            TenderCountingViewModel.prototype._processTenderDeclarationError = function (errors) {
                var errorCode = "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_MAXCOUNTINGDIFFERENCEEXCEEDED";
                var countingError = Commerce.ErrorHelper.getError(errors, errorCode, Commerce.TenderCounting.TenderValidationError);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(countingError)) {
                    var id = countingError.commerceException.TenderTypeId;
                    var tenderTypeId_1 = !Commerce.ObjectExtensions.isNullOrUndefined(id) ? id : Commerce.StringExtensions.EMPTY;
                    this.tenderCountingLines().forEach(function (tenderCountingLine) {
                        if (tenderCountingLine.tenderType.TenderTypeId === tenderTypeId_1) {
                            tenderCountingLine.numberOfTenderDeclarationRecount++;
                        }
                    });
                }
            };
            TenderCountingViewModel.prototype._getTenderLinesForCountingAsync = function (correlationId, currencies) {
                var _this = this;
                var cashDeclarationsMap;
                var tenderList = [];
                var tenderTypesMap = Commerce.ApplicationContext.Instance.tenderTypesMap;
                var tenderTypesForSalesTransaction = tenderTypesMap.getTenderTypesForSalesTransactions();
                var tenderDetails = [];
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return Commerce.ApplicationContext.Instance.cashDeclarationsMapAsync.value;
                }).enqueue(function (result) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(result)) {
                        cashDeclarationsMap = result;
                    }
                    var request = new Commerce.GetTenderDetailsClientRequest(correlationId, _this._shiftToUse.ShiftId, _this._shiftToUse.TerminalId, _this._tenderCountingType);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                        .done(function (result) {
                        if (!result.canceled) {
                            tenderDetails = result.data.result;
                        }
                    });
                });
                return asyncQueue.run().map(function () {
                    if (Commerce.ArrayExtensions.hasElements(tenderDetails)) {
                        Commerce.RetailLogger.tenderDetailsInitializedFromExtensions(correlationId, JSON.stringify(tenderDetails));
                        tenderDetails.forEach(function (tenderDetail) {
                            tenderList.push(_this._convertDetailLinesToCountLines(tenderDetail, cashDeclarationsMap));
                        });
                    }
                    else {
                        Commerce.RetailLogger.tenderDetailsInitializedFromDefault(correlationId);
                        tenderTypesForSalesTransaction.forEach(function (tenderType) {
                            if (Commerce.ArrayExtensions.hasElements(currencies) && tenderType.OperationId === Commerce.Operations.RetailOperation.PayCurrency) {
                                currencies.forEach(function (currency) {
                                    if (currency.CurrencyCode !== _this._primaryCurrencyCode) {
                                        var denominationsForCurrency = _this._getDenominationsFromCashDeclarationsMap(currency.CurrencyCode, tenderType, cashDeclarationsMap);
                                        var tenderLineName = Commerce.StringExtensions.format("{0} - {1}", tenderType.Name, currency.CurrencyCode);
                                        var newCurrencyTenderLine = new TenderCountingLine(currency.CurrencyCode, tenderLineName, tenderType, denominationsForCurrency, currency.ExchangeRate);
                                        tenderList.push(newCurrencyTenderLine);
                                    }
                                });
                            }
                            else {
                                var denominations = _this._getDenominationsFromCashDeclarationsMap(_this._primaryCurrencyCode, tenderType, cashDeclarationsMap);
                                var newTenderLine = new TenderCountingLine(_this._primaryCurrencyCode, tenderType.Name, tenderType, denominations);
                                tenderList.push(newTenderLine);
                            }
                        });
                    }
                    return tenderList;
                });
            };
            TenderCountingViewModel.prototype._getCurrenciesForCurrentStoreAsync = function (correlationId) {
                var _this = this;
                var primaryCurrencyMainDenominationValue = 1;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return _this.paymentManager.getCurrenciesAmount(_this._primaryCurrencyCode, primaryCurrencyMainDenominationValue);
                }).enqueue(function (currencyAmounts) {
                    if (Commerce.ArrayExtensions.hasElements(currencyAmounts)) {
                        _this._currencyAmountMap = new Commerce.Dictionary();
                        currencyAmounts.forEach(function (currencyAmount) {
                            _this._currencyAmountMap.setItem(currencyAmount.CurrencyCode, currencyAmount);
                        });
                    }
                    return _this._getTenderLinesForCountingAsync(correlationId, currencyAmounts);
                });
                return asyncQueue.run()
                    .map(function (result) {
                    return result.data;
                }).fail(function () {
                    Commerce.RetailLogger.viewModelStoreOperationsGetCurrenciesForStoreFailed();
                });
            };
            TenderCountingViewModel.prototype._getDenominations = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.navigatetoDenominationViewClicked(correlationId);
                var tenderCountingLine = this.tenderCountingLines()[this._selectedLineIndexForDenomination];
                var operationTitle = Commerce.StringExtensions.EMPTY;
                if (Commerce.ExtensibleEnumerations.ExtensibleTransactionType.TenderDeclaration.equals(this._tenderCountingType)) {
                    operationTitle = "string_4029";
                }
                else if (Commerce.ExtensibleEnumerations.ExtensibleTransactionType.BankDrop.equals(this._tenderCountingType)) {
                    operationTitle = "string_4572";
                }
                else if (Commerce.ExtensibleEnumerations.ExtensibleTransactionType.SafeDrop.equals(this._tenderCountingType)) {
                    operationTitle = "string_4573";
                }
                this._canAbortTransaction = false;
                var activity = new Commerce.Activities.GetDenominationTotalsActivity({
                    pageTitle: operationTitle,
                    denominationDetails: tenderCountingLine.denominations,
                    tenderTypeId: tenderCountingLine.tenderType.TenderTypeId,
                    currencyCode: tenderCountingLine.currencyCode,
                    correlationId: correlationId
                });
                activity.execute().done(function () {
                    var wasCanceled = Commerce.ObjectExtensions.isNullOrUndefined(activity.response);
                    if (!wasCanceled) {
                        var updatedLines = Commerce.ObjectExtensions.clone(_this.tenderCountingLines());
                        var modifiedTenderCountingLine = updatedLines[_this._selectedLineIndexForDenomination];
                        modifiedTenderCountingLine.denominations = activity.response.denominationDetails;
                        modifiedTenderCountingLine.totalAmountInCurrency = Commerce.Helpers.CurrencyHelper.getTotalDenominationAmountDeclaredInCurrency(modifiedTenderCountingLine.denominations, modifiedTenderCountingLine.currencyCode);
                        modifiedTenderCountingLine.totalAmountInCurrencyToDisplay = Commerce.NumberExtensions.formatCurrency(modifiedTenderCountingLine.totalAmountInCurrency, modifiedTenderCountingLine.currencyCode);
                        modifiedTenderCountingLine.exchangeRate = _this._getCurrencyExchangeRate(modifiedTenderCountingLine.currencyCode);
                        modifiedTenderCountingLine.totalAmount = _this._convertToStoreCurrency(modifiedTenderCountingLine.totalAmountInCurrency, modifiedTenderCountingLine.currencyCode, modifiedTenderCountingLine.exchangeRate);
                        _this.tenderCountingLines(updatedLines);
                        _this._canAbortTransaction = true;
                    }
                    else {
                        if (Commerce.ViewModelAdapter.isInView("TenderCountingView")) {
                            return;
                        }
                        else {
                            var selectionHandler = _this._selectionHandler;
                            _this._selectionHandler = null;
                            selectionHandler.cancel();
                        }
                    }
                });
            };
            TenderCountingViewModel.prototype._onSelectionAttemptAsyncCallbackCanceled = function () {
                this._selectionInProgress(false);
            };
            TenderCountingViewModel.prototype._onSelectionAttemptAsyncCallbackFailed = function (errors) {
                this._selectionInProgress(false);
                if (Commerce.ExtensibleEnumerations.ExtensibleTransactionType.TenderDeclaration.equals(this._tenderCountingType)) {
                    this._processTenderDeclarationError(errors);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                }
                else {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                }
            };
            TenderCountingViewModel.prototype._getDenominationsFromCashDeclarationsMap = function (currencyCode, tenderType, cashMap) {
                if (Commerce.StringExtensions.isNullOrWhitespace(currencyCode)
                    || !cashMap.hasItem(currencyCode)
                    || Commerce.ObjectExtensions.isNullOrUndefined(tenderType)
                    || (tenderType.OperationId !== Commerce.Operations.RetailOperation.PayCash
                        && tenderType.OperationId !== Commerce.Operations.RetailOperation.PayCurrency)) {
                    return [];
                }
                var cashDeclarations = cashMap.getItem(currencyCode);
                return this._convertCashDeclarationsToDenominationDetails(cashDeclarations);
            };
            TenderCountingViewModel.prototype._convertDetailLinesToCountLines = function (tenderDetail, cashDeclarationMap) {
                var tenderType = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderByTypeId(tenderDetail.TenderTypeId);
                var tenderTypeName = tenderType.Name;
                var currencyCode = this._primaryCurrencyCode;
                var exchangeRate = 1;
                var amount = tenderDetail.Amount;
                var amountInForeignCurrency = amount;
                var denominations = tenderDetail.DenominationDetails;
                if (tenderType.OperationId === Commerce.Operations.RetailOperation.PayCurrency) {
                    currencyCode = tenderDetail.ForeignCurrency;
                    exchangeRate = Commerce.NumberExtensions.isNullOrZero(tenderDetail.ForeignCurrencyExchangeRate)
                        ? this._getCurrencyExchangeRate(currencyCode)
                        : tenderDetail.ForeignCurrencyExchangeRate;
                    amount = this._convertToStoreCurrency(tenderDetail.AmountInForeignCurrency, currencyCode, exchangeRate);
                    amountInForeignCurrency = tenderDetail.AmountInForeignCurrency;
                    tenderTypeName = Commerce.StringExtensions.format("{0} - {1}", tenderType.Name, currencyCode);
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(cashDeclarationMap) && !Commerce.ArrayExtensions.hasElements(denominations)) {
                    denominations = this._getDenominationsFromCashDeclarationsMap(currencyCode, tenderType, cashDeclarationMap);
                }
                return new TenderCountingLine(currencyCode, tenderTypeName, tenderType, denominations, exchangeRate, amount, amountInForeignCurrency, tenderDetail.TenderRecount);
            };
            TenderCountingViewModel.prototype._convertCashDeclarationsToDenominationDetails = function (cashDeclarations) {
                var denominationDetails = cashDeclarations.map(function (cashDeclaration) {
                    var denominationDetail = {};
                    denominationDetail.Type = cashDeclaration.CashTypeValue;
                    denominationDetail.Currency = cashDeclaration.Currency;
                    denominationDetail.DenominationAmount = cashDeclaration.Amount;
                    denominationDetail.QuantityDeclared = 0;
                    denominationDetail.AmountDeclared = 0;
                    return denominationDetail;
                });
                return denominationDetails;
            };
            return TenderCountingViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.TenderCountingViewModel = TenderCountingViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var TimeClockManagerViewModel = (function (_super) {
            __extends(TimeClockManagerViewModel, _super);
            function TimeClockManagerViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                _this._registrationsPeriodInDays = 90;
                _this.timeRegistrations = ko.observableArray([]);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options) && !Commerce.StringExtensions.isNullOrWhitespace(options.storeId)) {
                    _this._storeFilter = options.storeId;
                }
                else {
                    _this._storeFilter = Commerce.ApplicationContext.Instance.storeNumber;
                }
                _this._activityFilters = [Commerce.Proxy.Entities.EmployeeActivityType.ClockIn, Commerce.Proxy.Entities.EmployeeActivityType.BreakFlowStop];
                return _this;
            }
            TimeClockManagerViewModel.prototype.loadAsync = function () {
                return this.loadRegistrationsAsync();
            };
            TimeClockManagerViewModel.prototype.filterClockInAsync = function () {
                this._activityFilters = [Commerce.Proxy.Entities.EmployeeActivityType.ClockIn, Commerce.Proxy.Entities.EmployeeActivityType.BreakFlowStop];
                return this.loadRegistrationsAsync();
            };
            TimeClockManagerViewModel.prototype.filterClockOutAsync = function () {
                this._activityFilters = [Commerce.Proxy.Entities.EmployeeActivityType.ClockOut];
                return this.loadRegistrationsAsync();
            };
            TimeClockManagerViewModel.prototype.filterBreakForLunchAsync = function () {
                this._activityFilters = [Commerce.Proxy.Entities.EmployeeActivityType.BreakForLunch];
                return this.loadRegistrationsAsync();
            };
            TimeClockManagerViewModel.prototype.filterBreakFromWorkAsync = function () {
                this._activityFilters = [Commerce.Proxy.Entities.EmployeeActivityType.BreakFromWork];
                return this.loadRegistrationsAsync();
            };
            TimeClockManagerViewModel.prototype.clearStoreFilterAsync = function () {
                this._storeFilter = null;
                return this.loadRegistrationsAsync();
            };
            TimeClockManagerViewModel.prototype.loadRegistrationsAsync = function () {
                var _this = this;
                var startDate = Commerce.DateExtensions.now;
                startDate = Commerce.DateExtensions.addDays(startDate, -this._registrationsPeriodInDays);
                var activitiesFilterValues = [];
                this._activityFilters.forEach(function (f) {
                    activitiesFilterValues.push(f);
                });
                var searchCriteria = {
                    FromDateTimeOffset: startDate,
                    ToDateTimeOffset: Commerce.DateExtensions.now,
                    StoreNumber: this._storeFilter,
                    DataLevelValue: 4,
                    EmployeeActivityTypeValues: activitiesFilterValues
                };
                return this._isBusyUntil(this.storeOperationsManager.getTimeRegistrationsForManager(searchCriteria))
                    .done(function (registrations) {
                    for (var i = 0; i < registrations.length; i++) {
                        switch (_this._activityFilters[0]) {
                            case Commerce.Proxy.Entities.EmployeeActivityType.BreakForLunch:
                                registrations[i].Activity = Commerce.ViewModelAdapter.getResourceString("string_4087");
                                break;
                            case Commerce.Proxy.Entities.EmployeeActivityType.BreakFromWork:
                                registrations[i].Activity = Commerce.ViewModelAdapter.getResourceString("string_4086");
                                break;
                            case Commerce.Proxy.Entities.EmployeeActivityType.ClockIn:
                                registrations[i].Activity = Commerce.ViewModelAdapter.getResourceString("string_4084");
                                break;
                            case Commerce.Proxy.Entities.EmployeeActivityType.ClockOut:
                                registrations[i].Activity = Commerce.ViewModelAdapter.getResourceString("string_4085");
                                break;
                        }
                    }
                    _this.timeRegistrations(registrations);
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            return TimeClockManagerViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.TimeClockManagerViewModel = TimeClockManagerViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var TimeClockViewModel = (function (_super) {
            __extends(TimeClockViewModel, _super);
            function TimeClockViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this.timeRegistrations = ko.observableArray([]);
                _this.availableStores = ko.observableArray([]);
                _this._logbookDayWindow = 1;
                _this._logbookStoreFilter = Commerce.ApplicationContext.Instance.storeNumber;
                return _this;
            }
            TimeClockViewModel.prototype.loadAsync = function () {
                var _this = this;
                var getStoresResult = this.storeOperationsManager.getEmployeeStores()
                    .done(function (stores) {
                    _this.availableStores(stores.map(function (s) {
                        return { store: s.OrgUnitNumber, filter: function () { return _this.filterByStoreAsync(s.OrgUnitNumber); } };
                    }));
                });
                var getLogbookResult = this.getLogbookAsync();
                return this.handleAsyncResult(Commerce.VoidAsyncResult.join([getStoresResult, getLogbookResult]));
            };
            TimeClockViewModel.prototype.filterLast24HoursAsync = function () {
                this._logbookDayWindow = 1;
                return this.handleAsyncResult(this.getLogbookAsync());
            };
            TimeClockViewModel.prototype.filterLastWeekAsync = function () {
                this._logbookDayWindow = 7;
                return this.handleAsyncResult(this.getLogbookAsync());
            };
            TimeClockViewModel.prototype.filterLastMonthAsync = function () {
                this._logbookDayWindow = 31;
                return this.handleAsyncResult(this.getLogbookAsync());
            };
            TimeClockViewModel.prototype.filterByStoreAsync = function (store) {
                this._logbookStoreFilter = store;
                return this.handleAsyncResult(this.getLogbookAsync());
            };
            TimeClockViewModel.prototype.getLogbookAsync = function () {
                var _this = this;
                var myDate = new Date();
                myDate.setDate(myDate.getDate() - this._logbookDayWindow);
                var searchCriteria = {
                    FromDateTimeOffset: myDate,
                    ToDateTimeOffset: new Date(),
                    StoreNumber: this._logbookStoreFilter,
                    DataLevelValue: 5,
                    EmployeeActivityTypeValues: [
                        Commerce.Proxy.Entities.EmployeeActivityType.ClockIn,
                        Commerce.Proxy.Entities.EmployeeActivityType.ClockOut,
                        Commerce.Proxy.Entities.EmployeeActivityType.BreakFromWork,
                        Commerce.Proxy.Entities.EmployeeActivityType.BreakForLunch
                    ]
                };
                return this.storeOperationsManager.getTimeRegistrations(searchCriteria)
                    .done(function (registrations) {
                    _this.timeRegistrations(registrations);
                });
            };
            TimeClockViewModel.prototype.handleAsyncResult = function (asyncResult) {
                return this._isBusyUntil(asyncResult).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            return TimeClockViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.TimeClockViewModel = TimeClockViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var TransferOrderDetailsViewModel = (function (_super) {
            __extends(TransferOrderDetailsViewModel, _super);
            function TransferOrderDetailsViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                _this._options = options || { TransferId: Commerce.StringExtensions.EMPTY };
                _this.transferId = ko.observable(_this._options.TransferId);
                _this.transferOrder = ko.observable(null);
                _this.orderLines = ko.observableArray([]);
                _this.hasTransferOrderLines = ko.computed(function () { return Commerce.ArrayExtensions.hasElements(_this.orderLines()); }, _this);
                _this.isTransferOrderSaved = ko.observable(true);
                _this._deletedTransferOrderLines = [];
                _this.totalProducts = ko.computed(function () {
                    var total = Commerce.ArrayExtensions.hasElements(_this.orderLines()) ? _this.orderLines().length : 0;
                    return Commerce.NumberExtensions.formatNumber(total, 0);
                });
                _this.totalQuantity = ko.computed(function () {
                    var total = Commerce.ArrayExtensions.sum(_this.orderLines(), function (transferOrderLine) {
                        return transferOrderLine.QuantityTransferred;
                    });
                    return Commerce.NumberExtensions.formatNumber(total, Commerce.NumberExtensions.getDecimalPrecision());
                }, _this);
                _this.viewSubTitle = ko.computed(function () {
                    if (Commerce.StringExtensions.isNullOrWhitespace(_this.transferId())) {
                        return Commerce.ViewModelAdapter.getResourceString("string_3890");
                    }
                    else {
                        var formatString = Commerce.ViewModelAdapter.getResourceString("string_198");
                        var suffix = Commerce.ViewModelAdapter.getResourceString("string_3417");
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.transferOrder())) {
                            suffix = _this.transferOrder().Status;
                        }
                        return Commerce.StringExtensions.formattedJoin([_this.transferId(), suffix], formatString);
                    }
                });
                _this.selectedOrderLine = ko.observable(null);
                _this.hasTransferOrder = ko.computed(function () { return !Commerce.ObjectExtensions.isNullOrUndefined(_this.transferOrder()); }, _this);
                _this.isOrderLineSelected = ko.computed(function () { return !Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedOrderLine()); }, _this);
                _this.selectedOrderLineIndex = ko.computed(function () {
                    var selectedIndex = -1;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedOrderLine())) {
                        selectedIndex = _this.orderLines().indexOf(_this.selectedOrderLine());
                    }
                    return selectedIndex;
                }, _this);
                _this.enableAddTransferLine = ko.computed(function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.transferOrder())) {
                        return _this.transferOrder().Status === TransferOrderDetailsViewModel.DRAFT_STATUS;
                    }
                    else {
                        return false;
                    }
                });
                _this.enableEdit = ko.computed(function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.transferOrder())) {
                        return _this.transferOrder().Status === TransferOrderDetailsViewModel.DRAFT_STATUS &&
                            _this.isOrderLineSelected();
                    }
                    else {
                        return false;
                    }
                });
                _this.refreshTransferOrderLines = ko.computed(function () {
                    var transferId = _this.transferId();
                    return Commerce.StringExtensions.isNullOrWhitespace(transferId) || _this.isOrderLineSelected();
                });
                _this._isExtensionCommandViewModelBusy = ko.observable(false);
                if (Commerce.ObjectExtensions.isNullOrUndefined(TransferOrderDetailsViewModel._viewExtensionsManager)) {
                    _this._extensionCommandViewModels = [];
                }
                else {
                    _this._extensionCommandViewModels = TransferOrderDetailsViewModel._viewExtensionsManager.getAppBarCommands()
                        .map(function (command) {
                        var commandVM = new ViewModels.CommandViewModel(command);
                        commandVM.addMessageHandler("RefreshTransferOrderDetails", function () {
                            _this.refreshTransferOrderLinesValidator();
                        });
                        commandVM.addMessageHandler("IsProcessingChanged", function (isProcessing) {
                            if (isProcessing) {
                                _this._isExtensionCommandViewModelBusy(true);
                            }
                            else {
                                var isAnyCommandProcessing = _this._extensionCommandViewModels.some(function (vm) {
                                    return vm.isProcessing;
                                });
                                _this._isExtensionCommandViewModelBusy(isAnyCommandProcessing);
                            }
                        });
                        return commandVM;
                    });
                    _this._isBusyWhen(_this._isExtensionCommandViewModelBusy);
                    _this._subscribeExtensionsToChanges();
                }
                _this.transferOrderLinesListColumns = _this._getTransferOrderDetailsLinesColumns();
                return _this;
            }
            Object.defineProperty(TransferOrderDetailsViewModel, "viewExtensionManager", {
                set: function (manager) {
                    TransferOrderDetailsViewModel._viewExtensionsManager = manager;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TransferOrderDetailsViewModel.prototype, "extensionCommandViewModels", {
                get: function () {
                    return this._extensionCommandViewModels;
                },
                enumerable: true,
                configurable: true
            });
            TransferOrderDetailsViewModel.prototype.loadTransferOrder = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                if (!Commerce.StringExtensions.isNullOrWhitespace(this.transferId())) {
                    asyncQueue.enqueue(function () {
                        return _this.inventoryManager.getTransferOrderDetailsAsync(_this.transferId())
                            .done(function (transferOrder) {
                            _this.transferOrder(transferOrder);
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.transferOrder())) {
                                if (Commerce.ObjectExtensions.isNullOrUndefined(_this.transferOrder().OrderLines)) {
                                    _this.transferOrder().OrderLines = [];
                                }
                                _this.orderLines(_this.transferOrder().OrderLines);
                            }
                        });
                    });
                    asyncQueue.enqueue(function () {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(_this._options.productToTransfer)) {
                            var newOrderLine = _this._addTransferOrderLine(_this._options.productToTransfer, Commerce.NumberExtensions.parseNumber(TransferOrderDetailsViewModel.DEFAULT_QUANTITY));
                            return asyncQueue.cancelOn(_this._enterTransferQuantityAsync(newOrderLine));
                        }
                        else if (!Commerce.ArrayExtensions.hasElements(_this.orderLines())) {
                            return asyncQueue.cancelOn(_this.addTransferOrderLineHandler());
                        }
                        else {
                            return Commerce.AsyncResult.createResolved({ canceled: false });
                        }
                    });
                }
                return this._isBusyUntil(asyncQueue.run()).done(function () {
                    var commandState = {
                        transferOrder: _this.transferOrder(),
                    };
                    _this._extensionCommandViewModels.forEach(function (commandVM) {
                        commandVM.sendMessage("Initialize", commandState);
                    });
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            TransferOrderDetailsViewModel.prototype.commitTransferOrderLinesHandler = function () {
                var originalTransferOrder = this.transferOrder();
                if (!Commerce.StringExtensions.isNullOrWhitespace(originalTransferOrder.OrderId)) {
                    return this._isBusyUntil(this.inventoryManager.createTransferOrderAsync(originalTransferOrder))
                        .done(function () {
                        Commerce.ViewModelAdapter.navigate("SearchPickingAndReceivingView");
                    })
                        .fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }
                else {
                    return Commerce.VoidAsyncResult.createResolved();
                }
            };
            TransferOrderDetailsViewModel.prototype.removeTransferLineHandler = function () {
                if (this.isOrderLineSelected()) {
                    var deletedLine = this.transferOrder().OrderLines.splice(this.selectedOrderLineIndex(), 1)[0];
                    this.orderLines(this.transferOrder().OrderLines);
                    this._deletedTransferOrderLines.push(deletedLine);
                    this.selectedOrderLine(undefined);
                    this.isTransferOrderSaved(false);
                }
            };
            TransferOrderDetailsViewModel.prototype.addTransferOrderLineHandler = function () {
                var _this = this;
                var addOrderLineAsyncQueue = new Commerce.AsyncQueue();
                var searchText = Commerce.StringExtensions.EMPTY;
                var newOrderLine;
                addOrderLineAsyncQueue
                    .enqueue(function () {
                    var getSearchTextActivity;
                    getSearchTextActivity = new Commerce.Activities.GetSearchTextActivity({
                        searchText: Commerce.StringExtensions.EMPTY,
                        title: Commerce.ViewModelAdapter.getResourceString("string_3377"),
                        subTitle: Commerce.StringExtensions.EMPTY,
                        inputLabel: Commerce.ViewModelAdapter.getResourceString("string_3371")
                    });
                    getSearchTextActivity.responseHandler = function (response) {
                        searchText = response.searchText;
                        return Commerce.VoidAsyncResult.createResolved();
                    };
                    return getSearchTextActivity.execute()
                        .done(function () {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(getSearchTextActivity.response)) {
                            addOrderLineAsyncQueue.cancel();
                        }
                    });
                })
                    .enqueue(function () {
                    return addOrderLineAsyncQueue.cancelOn(_this.onProductSearchTextChange(searchText, Commerce.LoggerHelper.getNewCorrelationId()))
                        .done(function (result) {
                        if (!result.canceled) {
                            newOrderLine = _this._addTransferOrderLine(result.data, 1);
                        }
                    });
                })
                    .enqueue(function () {
                    return addOrderLineAsyncQueue.cancelOn(_this._enterTransferQuantityAsync(newOrderLine));
                });
                return this._isBusyUntil(addOrderLineAsyncQueue.run())
                    .done(function () {
                    _this.isTransferOrderSaved(false);
                })
                    .fail(function (error) {
                    Commerce.NotificationHandler.displayClientErrors(error);
                });
            };
            TransferOrderDetailsViewModel.prototype.addOrViewTransferOrderCommentAsync = function () {
                var _this = this;
                var queue = new Commerce.AsyncQueue();
                var transferComments;
                queue.enqueue(function () {
                    return _this.inventoryManager.getTransferOrderCommentsAsync(_this.transferId())
                        .done(function (comments) {
                        transferComments = comments;
                    });
                });
                queue.enqueue(function () {
                    var context = {
                        comments: transferComments,
                        inputLabel: Commerce.ViewModelAdapter.getResourceString("string_3428"),
                        title: Commerce.ViewModelAdapter.getResourceString("string_3427"),
                        subTitle: Commerce.StringExtensions.EMPTY,
                        listTitle: Commerce.ViewModelAdapter.getResourceString("string_3426")
                    };
                    var commentActivity = new Commerce.Activities.HandleCommentsActivity(context);
                    commentActivity.responseHandler = function (response) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(response) &&
                            !Commerce.StringExtensions.isNullOrWhitespace(response.newCommentText)) {
                            var loggedOnStaff = Commerce.Session.instance.CurrentEmployee.StaffId;
                            return _this.inventoryManager.addTransferOrderCommentAsync(_this.transferId(), loggedOnStaff, response.newCommentText);
                        }
                        else {
                            return Commerce.VoidAsyncResult.createResolved();
                        }
                    };
                    return commentActivity.execute();
                });
                return this._isBusyUntil(queue.run())
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            TransferOrderDetailsViewModel.prototype.showOrderHeaderClickHandler = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var modifiedTransferOrderHeader;
                var updateQueue = new Commerce.AsyncQueue();
                updateQueue.enqueue(function () {
                    var transferOrder = {
                        OrderId: _this.transferId(),
                        InventLocationIdFrom: _this.transferOrder().InventLocationIdFrom,
                        InventLocationIdTo: _this.transferOrder().InventLocationIdTo,
                        ShipDate: _this.transferOrder().ShipDate,
                        ReceiveDate: _this.transferOrder().ReceiveDate,
                        OrderTypeValue: _this.transferOrder().OrderTypeValue,
                        DeliveryModeId: _this.transferOrder().DeliveryModeId
                    };
                    var getTransferOrderHeaderClientRequest = new Commerce.GetTransferOrderHeaderClientRequest(correlationId, transferOrder, 2);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getTransferOrderHeaderClientRequest))
                        .done(function (result) {
                        if (result.canceled) {
                            updateQueue.cancel();
                        }
                        else {
                            modifiedTransferOrderHeader = result.data.result;
                            modifiedTransferOrderHeader.OrderId = _this.transferId();
                            modifiedTransferOrderHeader.RecordId = _this.transferOrder().RecordId;
                        }
                    }).fail(function () {
                        updateQueue.cancel();
                    });
                });
                updateQueue.enqueue(function () {
                    var options = { transferOrder: modifiedTransferOrderHeader };
                    return updateQueue.cancelOn(_this.context.triggerManager.execute(Commerce.Triggers.CancelableTriggerType.PreUpdateTransferOrder, options));
                }).enqueue(function (triggerResult) {
                    modifiedTransferOrderHeader = triggerResult.data.transferOrder;
                    return _this.inventoryManager.createTransferOrderAsync(modifiedTransferOrderHeader);
                });
                return this._isBusyUntil(updateQueue.run())
                    .done(function (result) {
                    if (result.canceled) {
                        return;
                    }
                    _this.transferOrder().ShipDate = modifiedTransferOrderHeader.ShipDate;
                    _this.transferOrder().ReceiveDate = modifiedTransferOrderHeader.ReceiveDate;
                    _this.transferOrder().DeliveryModeId = modifiedTransferOrderHeader.DeliveryModeId;
                    _this._sendMessageToExtensions("TransferOrderUpdated", { transferOrder: _this.transferOrder(), isSaved: true });
                })
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            TransferOrderDetailsViewModel.prototype.productSelectionChanged = function (selectedLines) {
                if (this.orderLines().indexOf(this.selectedOrderLine()) ===
                    this.orderLines().indexOf(selectedLines[0])) {
                    return;
                }
                if (selectedLines.length !== 1) {
                    this.selectedOrderLine(undefined);
                }
                else {
                    this.selectedOrderLine(selectedLines[0]);
                }
            };
            TransferOrderDetailsViewModel.prototype.refreshTransferOrderLinesValidator = function () {
                return this._isBusyUntil(this._refreshProductLines())
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            TransferOrderDetailsViewModel.prototype.saveTransferOrder = function () {
                var _this = this;
                var saveQueue = new Commerce.AsyncQueue();
                if (Commerce.ArrayExtensions.hasElements(this.orderLines())) {
                    var updatedOrderLines_1 = [];
                    updatedOrderLines_1 = this.orderLines().filter(function (line) {
                        return !Commerce.NumberExtensions.isNullNaNOrZero(line.RecordId);
                    });
                    var newOrderLines_1 = [];
                    newOrderLines_1 = this.orderLines().filter(function (line) {
                        return Commerce.NumberExtensions.isNullNaNOrZero(line.RecordId);
                    });
                    if (Commerce.ArrayExtensions.hasElements(updatedOrderLines_1)) {
                        saveQueue.enqueue(function () {
                            return _this.inventoryManager.updateTransferOrderLinesAsync(_this.transferId(), updatedOrderLines_1)
                                .done(function (orderLines) {
                                updatedOrderLines_1 = orderLines;
                            });
                        });
                    }
                    if (Commerce.ArrayExtensions.hasElements(newOrderLines_1)) {
                        saveQueue.enqueue(function () {
                            return _this.inventoryManager.createTransferOrderLinesAsync(_this.transferId(), newOrderLines_1)
                                .done(function (orderLines) {
                                newOrderLines_1 = orderLines;
                            });
                        });
                    }
                    saveQueue.enqueue(function () {
                        var combinedLines = updatedOrderLines_1.concat(newOrderLines_1);
                        _this.orderLines(combinedLines);
                        _this.transferOrder().OrderLines = combinedLines;
                        return Commerce.VoidAsyncResult.createResolved();
                    });
                }
                if (Commerce.ArrayExtensions.hasElements(this._deletedTransferOrderLines)) {
                    saveQueue.enqueue(function () {
                        return _this.inventoryManager.deleteTransferOrderLinesAsync(_this.transferId(), _this._deletedTransferOrderLines)
                            .done(function () {
                            _this._deletedTransferOrderLines = [];
                        });
                    });
                }
                return this._isBusyUntil(saveQueue.run())
                    .done(function () {
                    _this.isTransferOrderSaved(true);
                })
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            TransferOrderDetailsViewModel.prototype.onProductSearchTextChange = function (searchText, correlationId) {
                var _this = this;
                var getProductByKeyWordQueue = new Commerce.AsyncQueue();
                var product;
                var productSearchResults;
                getProductByKeyWordQueue.enqueue(function () {
                    var scanResultAsyncResult = new Commerce.VoidAsyncResult();
                    var scanResultRequest = new Commerce.GetScanResultClientRequest(searchText, correlationId);
                    _this.context.runtime.executeAsync(scanResultRequest)
                        .then(function (result) {
                        if (result.canceled || Commerce.ObjectExtensions.isNullOrUndefined(result.data)) {
                            getProductByKeyWordQueue.cancel();
                            scanResultAsyncResult.resolve();
                            return;
                        }
                        var scanResult = result.data.result;
                        var scanResultType = scanResult.MaskTypeValue;
                        if (scanResultType === Commerce.Proxy.Entities.BarcodeMaskType.Item) {
                            product = scanResult.Product;
                            scanResultAsyncResult.resolve();
                        }
                        else if (scanResultType === Commerce.Proxy.Entities.BarcodeMaskType.None) {
                            scanResultAsyncResult.resolve();
                        }
                        else {
                            var unsupportedScanTypeError = new Commerce.Proxy.Entities.Error("string_2626");
                            scanResultAsyncResult.reject([unsupportedScanTypeError]);
                        }
                    }).catch(function (reason) {
                        var errors = Commerce.ErrorHelper.toProxyErrors(reason);
                        scanResultAsyncResult.reject(errors);
                    });
                    return scanResultAsyncResult;
                }).enqueue(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(product)
                        || product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Variant
                        || product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Standalone
                        || product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.KitVariant) {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                    else if (product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Master) {
                        var selectProductVariantClientRequest = new Commerce.Products.SelectProductVariantClientRequest(product);
                        return getProductByKeyWordQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(selectProductVariantClientRequest)))
                            .done(function (variantSelectionResult) {
                            if (!variantSelectionResult.canceled) {
                                product = variantSelectionResult.data.result;
                            }
                        });
                    }
                    else {
                        _this._navigateToProductDetails(product);
                        getProductByKeyWordQueue.cancel();
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                }).enqueue(function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(product)) {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                    else {
                        var channelId = Commerce.Session.instance.productCatalogStore.Context.ChannelId;
                        var pageSize = 1;
                        var skip = 0;
                        return _this.productManager.searchByTextAsync(searchText, channelId, 0, pageSize, skip)
                            .done(function (searchResults) {
                            productSearchResults = searchResults;
                        });
                    }
                }).enqueue(function () {
                    if (Commerce.ArrayExtensions.hasElements(productSearchResults)) {
                        getProductByKeyWordQueue.cancel();
                        return _this._searchForProductInSearchView(searchText);
                    }
                    else if (Commerce.ObjectExtensions.isNullOrUndefined(product)) {
                        Commerce.ViewModelAdapter.displayMessage("string_3382", Commerce.MessageType.Error, Commerce.MessageBoxButtons.Default, "string_3381");
                        getProductByKeyWordQueue.cancel();
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                });
                return getProductByKeyWordQueue.run().map(function (queueResult) {
                    return { canceled: queueResult.canceled, data: product };
                });
            };
            TransferOrderDetailsViewModel.prototype.performEditQuantityAsync = function () {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.selectedOrderLine())) {
                    return Commerce.AsyncResult.createResolved({ canceled: true });
                }
                var transferLine = this.selectedOrderLine();
                var activity = new Commerce.Activities.GetQuantityActivity({
                    title: Commerce.ViewModelAdapter.getResourceString("string_3374"),
                    subTitle: this._getProductDescription(this.selectedOrderLine()),
                    inputLabel: Commerce.ViewModelAdapter.getResourceString("string_3375"),
                    quantity: transferLine.QuantityTransferred.toString()
                });
                activity.responseHandler = function (response) {
                    return _this._handleQuantityInputAsync(transferLine, response.quantity);
                };
                return this._isBusyUntil(activity.execute()).done(function () {
                    if (!activity.response) {
                        _this.selectedOrderLine(undefined);
                    }
                    else {
                        _this.isTransferOrderSaved(false);
                    }
                });
            };
            TransferOrderDetailsViewModel.prototype._searchForProductInSearchView = function (searchText) {
                var _this = this;
                return this.saveTransferOrder()
                    .done(function () {
                    var productSelectionHandler = new Commerce.CancelableSelectionHandler(function (selectionResult) {
                        var returnOptions = {
                            TransferId: _this.transferOrder().OrderId,
                            productToTransfer: selectionResult.simpleProduct
                        };
                        Commerce.ViewModelAdapter.collapseAndNavigate("TransferOrderDetailsView", returnOptions);
                    }, function () {
                        Commerce.ViewModelAdapter.collapse("TransferOrderDetailsView");
                    });
                    var searchViewModelOption = {
                        searchText: searchText,
                        searchEntity: ViewModels.SearchViewSearchEntity.Product,
                        selectionMode: ViewModels.SearchViewSelectionMode.Product,
                        productSelectionOptions: {
                            productSelectionHandler: productSelectionHandler,
                            allowKitMasterSelection: false
                        },
                        correlationId: Commerce.StringExtensions.EMPTY
                    };
                    Commerce.ViewModelAdapter.navigate("SearchView", searchViewModelOption);
                });
            };
            TransferOrderDetailsViewModel.prototype._handleQuantityInputAsync = function (transferOrderLine, quantityStr) {
                var asyncResult;
                var quantity = Commerce.NumberExtensions.parseNumber(quantityStr);
                if (quantity >= 0) {
                    transferOrderLine.QuantityTransferred = quantity;
                    var index = this.orderLines().indexOf(transferOrderLine);
                    this.orderLines.splice(index, 1, transferOrderLine);
                    this.isTransferOrderSaved(false);
                    asyncResult = Commerce.VoidAsyncResult.createResolved();
                }
                else {
                    var error = new Commerce.Proxy.Entities.Error("string_3400");
                    error.errorTitleResourceId = "string_3383";
                    asyncResult = Commerce.VoidAsyncResult.createRejected([error]);
                }
                return asyncResult;
            };
            TransferOrderDetailsViewModel.prototype._enterTransferQuantityAsync = function (transferOrderLine) {
                var _this = this;
                var activity = new Commerce.Activities.GetQuantityActivity({
                    title: Commerce.ViewModelAdapter.getResourceString("string_3401"),
                    subTitle: this._getProductDescription(transferOrderLine),
                    inputLabel: Commerce.ViewModelAdapter.getResourceString("string_3375"),
                    quantity: TransferOrderDetailsViewModel.DEFAULT_QUANTITY
                });
                activity.responseHandler = function (response) {
                    return _this._handleQuantityInputAsync(transferOrderLine, response.quantity);
                };
                return activity.execute();
            };
            TransferOrderDetailsViewModel.prototype._getProductDescription = function (orderLine) {
                var variantStringValues = Commerce.StringExtensions.EMPTY;
                var variantValues = [
                    orderLine.ItemName,
                    orderLine.InventColorId,
                    orderLine.InventSizeId,
                    orderLine.InventStyleId,
                    orderLine.ConfigId
                ];
                variantValues.forEach(function (variantValue) {
                    if (!Commerce.StringExtensions.isNullOrWhitespace(variantValue)) {
                        if (variantStringValues === Commerce.StringExtensions.EMPTY) {
                            variantStringValues = variantValue;
                        }
                        else {
                            variantStringValues = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_610"), variantStringValues, variantValue);
                        }
                    }
                });
                return variantStringValues;
            };
            TransferOrderDetailsViewModel.prototype._addTransferOrderLine = function (product, newQuantity) {
                var newTransferOrderLine = {
                    OrderId: this.transferOrder().OrderId,
                    ProductRecordId: product.RecordId,
                    ItemId: product.ItemId,
                    InventColorId: Commerce.SimpleProductHelper.getDimensionValue(product, Commerce.Proxy.Entities.ProductDimensionType.Color),
                    ConfigId: Commerce.SimpleProductHelper.getDimensionValue(product, Commerce.Proxy.Entities.ProductDimensionType.Configuration),
                    InventSizeId: Commerce.SimpleProductHelper.getDimensionValue(product, Commerce.Proxy.Entities.ProductDimensionType.Size),
                    InventStyleId: Commerce.SimpleProductHelper.getDimensionValue(product, Commerce.Proxy.Entities.ProductDimensionType.Style),
                    ItemName: product.Name,
                    QuantityTransferred: newQuantity,
                    PurchaseUnit: product.DefaultUnitOfMeasure,
                    InventLocationId: this.transferOrder().InventLocationIdFrom,
                    DataAreaId: Commerce.ApplicationContext.Instance.channelConfiguration.InventLocationDataAreaId
                };
                this.transferOrder().OrderLines.push(newTransferOrderLine);
                this.orderLines(this.transferOrder().OrderLines);
                this.selectedOrderLine(newTransferOrderLine);
                this.isTransferOrderSaved(false);
                return newTransferOrderLine;
            };
            TransferOrderDetailsViewModel.prototype._refreshProductLines = function () {
                var _this = this;
                return this._isBusyUntil(this.inventoryManager.getTransferOrderDetailsAsync(this.transferOrder().OrderId))
                    .done(function (transferOrder) {
                    _this.transferOrder(transferOrder);
                    _this.orderLines(_this.transferOrder().OrderLines);
                    _this._deletedTransferOrderLines = [];
                    _this.isTransferOrderSaved(true);
                });
            };
            TransferOrderDetailsViewModel.prototype._navigateToProductDetails = function (product) {
                var _this = this;
                this.saveTransferOrder()
                    .done(function () {
                    var productSelectionHandler = new Commerce.CancelableSelectionHandler(function (selectionResult) {
                        var returnOptions = {
                            TransferId: _this.transferOrder().OrderId,
                            productToTransfer: selectionResult.simpleProduct
                        };
                        Commerce.ViewModelAdapter.collapseAndNavigate("TransferOrderDetailsView", returnOptions);
                    }, function () {
                        Commerce.ViewModelAdapter.collapse("TransferOrderDetailsView");
                    });
                    var simpleProductDetailsViewModelOptions = {
                        productId: product.RecordId,
                        product: undefined,
                        isSelectionMode: true,
                        selectionOptions: {
                            productSelectionHandler: productSelectionHandler
                        },
                        correlationId: Commerce.StringExtensions.EMPTY
                    };
                    Commerce.ViewModelAdapter.navigate("SimpleProductDetailsView", simpleProductDetailsViewModelOptions);
                });
            };
            TransferOrderDetailsViewModel.prototype._getTransferOrderDetailsLinesColumns = function () {
                var customColumns = Commerce.ObjectExtensions.isNullOrUndefined(TransferOrderDetailsViewModel._viewExtensionsManager) ?
                    [] :
                    TransferOrderDetailsViewModel._viewExtensionsManager.getTransferOrderDetailsLinesColumns();
                var defaultColumns = [
                    {
                        titleResx: "string_3350",
                        ratio: 25,
                        collapseOrder: 4,
                        minWidth: 120,
                        field: "ItemId"
                    }, {
                        titleResx: "string_3351",
                        ratio: 45,
                        collapseOrder: 3,
                        minWidth: 200,
                        field: "$data",
                        converter: "Commerce.Core.Converter.TransferOrderLineVariantFormatter"
                    }, {
                        titleResx: "string_3394",
                        ratio: 20,
                        collapseOrder: 2,
                        minWidth: 60,
                        field: "QuantityTransferred",
                        isRightAligned: true
                    }, {
                        titleResx: "string_3393",
                        ratio: 10,
                        collapseOrder: 1,
                        minWidth: 40,
                        field: "PurchaseUnit"
                    }
                ];
                return Commerce.ArrayExtensions.hasElements(customColumns) ? customColumns : defaultColumns;
            };
            TransferOrderDetailsViewModel.prototype._subscribeExtensionsToChanges = function () {
                var _this = this;
                this.selectedOrderLine.subscribe(function (line) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(line)) {
                        _this._sendMessageToExtensions("TransferOrderLineSelected", { transferOrderLine: line });
                    }
                    else {
                        _this._sendMessageToExtensions("TransferOrderLineSelectionCleared", undefined);
                    }
                });
                this.isTransferOrderSaved.subscribe(function (saved) {
                    var mergedOrder = __assign(__assign({}, _this.transferOrder()), { OrderLines: _this.orderLines() });
                    _this._sendMessageToExtensions("TransferOrderUpdated", { transferOrder: mergedOrder, isSaved: saved });
                });
            };
            TransferOrderDetailsViewModel.prototype._sendMessageToExtensions = function (messageType, messageData) {
                this._extensionCommandViewModels.forEach(function (vm) {
                    vm.sendMessage(messageType, messageData);
                });
            };
            TransferOrderDetailsViewModel.DRAFT_STATUS = "Draft";
            TransferOrderDetailsViewModel.DEFAULT_QUANTITY = "1";
            return TransferOrderDetailsViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.TransferOrderDetailsViewModel = TransferOrderDetailsViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var UrlOperationViewModel = (function (_super) {
            __extends(UrlOperationViewModel, _super);
            function UrlOperationViewModel() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return UrlOperationViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.UrlOperationViewModel = UrlOperationViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var DeviceActivationViewModelBase = (function (_super) {
            __extends(DeviceActivationViewModelBase, _super);
            function DeviceActivationViewModelBase(context) {
                var _this = _super.call(this, context) || this;
                if (Commerce.StringExtensions.isNullOrWhitespace(Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.DEVICE_ID_KEY))) {
                    Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.DEVICE_ID_KEY, Commerce.Configuration.ConfigurationProvider.getValue(Commerce.ApplicationArgumentId.DEVICE_NUMBER) || "");
                }
                if (Commerce.StringExtensions.isNullOrWhitespace(Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.REGISTER_ID_KEY))) {
                    Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.REGISTER_ID_KEY, Commerce.Configuration.ConfigurationProvider.getValue(Commerce.ApplicationArgumentId.TERMINAL_NUMBER) || "");
                }
                _this.password = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.deviceId = ko.observable(Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.DEVICE_ID_KEY)
                    || Commerce.StringExtensions.EMPTY);
                _this.registerId = ko.observable(Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.REGISTER_ID_KEY)
                    || Commerce.StringExtensions.EMPTY);
                _this.serviceUrl = ko.observable(Commerce.Config.retailServerUrl);
                _this.storeId = ko.observable(Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.STORE_ID_KEY));
                _this.forceActivate = false;
                _this.skipConnectivityOperation = false;
                _this.currentActivationOperation = null;
                _this.currentOperationStep = ko.observable(0);
                _this.totalOperationSteps = ko.observable(0);
                return _this;
            }
            DeviceActivationViewModelBase.prototype.updateServerUrl = function () {
                this.serviceUrl(Commerce.StringExtensions.cleanUri(this.serviceUrl()));
                return Commerce.ApplicationContext.updateServerUrl(this.serviceUrl());
            };
            DeviceActivationViewModelBase.prototype._createDeviceActivationState = function (operatorId) {
                var operationState = {
                    serviceUrl: this.serviceUrl(),
                    operatorId: operatorId,
                    password: this.password(),
                    deviceId: this.deviceId(),
                    registerId: this.registerId(),
                    forceActivate: this.forceActivate,
                    skipConnectivityOperation: this.skipConnectivityOperation
                };
                return operationState;
            };
            return DeviceActivationViewModelBase;
        }(ViewModels.ViewModelBase));
        ViewModels.DeviceActivationViewModelBase = DeviceActivationViewModelBase;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var DeviceActivationProcessViewModel = (function (_super) {
            __extends(DeviceActivationProcessViewModel, _super);
            function DeviceActivationProcessViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this._extensionsLoadingErrorCodesToSkip = [];
                return _this;
            }
            DeviceActivationProcessViewModel.prototype.activateDeviceAsync = function (operatorId) {
                var _this = this;
                if (!Commerce.Helpers.DeviceActivationHelper.isActivationPermitted(this.serviceUrl(), operatorId, this.password())) {
                    return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.DEVICE_ACTIVATION_DETAILS_NOT_SPECIFIED)]);
                }
                Commerce.Helpers.DeviceActivationHelper.startDeviceActivation();
                return new Commerce.AsyncQueue().enqueue(function () {
                    return _this.updateServerUrl();
                }).enqueue(function () {
                    return _this._runDeviceActivationSequence(operatorId);
                }).run().map(function () {
                    Commerce.Helpers.DeviceActivationHelper.completeDeviceActivation();
                });
            };
            DeviceActivationProcessViewModel.prototype.launchAsync = function (operatorId) {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return _this._executePostActivationTrigger(operatorId).recoverOnFailure(function (errors) {
                        return Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }).enqueue(function () {
                    return _this._navigateToLoginView();
                });
                return this._isBusyUntil(asyncQueue.run().map(function () { return void 0; }));
            };
            DeviceActivationProcessViewModel.prototype.setSkipExtensionsLoadingErrorCode = function (errorCode) {
                this._extensionsLoadingErrorCodesToSkip.push(errorCode);
            };
            DeviceActivationProcessViewModel.prototype._executePostActivationTrigger = function (operatorId) {
                var triggerOption = {
                    operatorId: operatorId,
                    registerId: Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.REGISTER_ID_KEY),
                    storeId: Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.STORE_ID_KEY)
                };
                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostDeviceActivation, triggerOption);
            };
            DeviceActivationProcessViewModel.prototype._navigateToLoginView = function () {
                if (Commerce.Config.aadEnabled) {
                    return Commerce.Utilities.LogonHelper.logoffAuthenticationProviderAsync(true).always(function () {
                        Commerce.ViewModelAdapter.navigate("LoginView");
                    }).recoverOnFailure(function () {
                        return Commerce.AsyncResult.createResolved();
                    });
                }
                else {
                    Commerce.ViewModelAdapter.navigate("LoginView");
                    return Commerce.AsyncResult.createResolved();
                }
            };
            DeviceActivationProcessViewModel.prototype._runDeviceActivationSequence = function (operatorId) {
                var _this = this;
                var stepName = Commerce.ObjectExtensions.isNullOrUndefined(this.currentActivationOperation) ?
                    Commerce.StringExtensions.EMPTY : this.currentActivationOperation.operationName();
                var operationState = this._createDeviceActivationState(operatorId);
                operationState.extensionLoadingErrorCodesToSkip = this._extensionsLoadingErrorCodesToSkip;
                Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.REGISTER_ID_KEY, this.registerId());
                Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.DEVICE_ID_KEY, this.deviceId());
                var activationSequence = new Commerce.Operations.DeviceActivationSequence(operationState, stepName);
                var operations = activationSequence.constructActivationSequence();
                this.totalOperationSteps(operations.length);
                var deviceActivationCorrelationId = Commerce.LoggerHelper.getNewCorrelationId();
                var deviceActivationQueue = new Commerce.AsyncQueue();
                var _loop_1 = function (i) {
                    deviceActivationQueue.enqueue(function () {
                        _this.currentActivationOperation = operations[i];
                        _this.currentOperationStep(i + 1);
                        return Commerce.AsyncResult.createResolved();
                    });
                    deviceActivationQueue.enqueue(operations[i].preOperation());
                    deviceActivationQueue.enqueue(operations[i].validateState());
                    deviceActivationQueue.enqueue(operations[i].operationProcess(deviceActivationCorrelationId));
                };
                for (var i = 0; i < operations.length; i++) {
                    _loop_1(i);
                }
                return deviceActivationQueue.run();
            };
            return DeviceActivationProcessViewModel;
        }(ViewModels.DeviceActivationViewModelBase));
        ViewModels.DeviceActivationProcessViewModel = DeviceActivationProcessViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var DeviceActivationViewModel = (function (_super) {
            __extends(DeviceActivationViewModel, _super);
            function DeviceActivationViewModel() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return DeviceActivationViewModel;
        }(ViewModels.DeviceActivationViewModelBase));
        ViewModels.DeviceActivationViewModel = DeviceActivationViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var GuidedActivationViewModel = (function (_super) {
            __extends(GuidedActivationViewModel, _super);
            function GuidedActivationViewModel() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            GuidedActivationViewModel.prototype.startOverHandlerAsync = function () {
                Commerce.RetailLogger.viewsCloudDeviceActivationViewStartOver();
                Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.RETAIL_SERVER_URL, Commerce.StringExtensions.EMPTY);
                Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.RETAILSERVER_TENANT_ID, Commerce.StringExtensions.EMPTY);
                Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.CURRENT_ACTIVATION_PROCESS, Commerce.StringExtensions.EMPTY);
                if (Commerce.Utilities.LogonHelper.isLoggedOn()) {
                    var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                    return this._isBusyUntil(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(new Commerce.LogOffOperationRequest(correlationId))))
                        .map(function () {
                        Commerce.Helpers.DeviceActivationHelper.navigateToGetStartedPage();
                        return void 0;
                    });
                }
                else {
                    Commerce.Helpers.DeviceActivationHelper.navigateToGetStartedPage();
                    return Commerce.AsyncResult.createResolved();
                }
            };
            GuidedActivationViewModel.prototype.authenticateUser = function () {
                if (!Commerce.Config.aadEnabled) {
                    var error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_POS_AADCONFIGURATION_ERROR.serverErrorCode);
                    Commerce.RetailLogger.viewModelLoginAuthenticateUserFailed(Commerce.ErrorHelper.formatErrorMessage(error));
                    return Commerce.VoidAsyncResult.createRejected([error]);
                }
                var operationState = this._createDeviceActivationState();
                var aadAuthenticationOperation = new Commerce.Operations.AADLogonOperation(operationState);
                return aadAuthenticationOperation.operationProcess()();
            };
            return GuidedActivationViewModel;
        }(ViewModels.DeviceActivationViewModelBase));
        ViewModels.GuidedActivationViewModel = GuidedActivationViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Extensibility;
    (function (Extensibility) {
        var CustomControlViewModelBase = (function () {
            function CustomControlViewModelBase(control, messageChannel, packagePublisher, packageName, packageVersion) {
                var _this = this;
                this.messageChannel = messageChannel;
                this.isBusy = ko.observable(false);
                this._control = control;
                this._packageName = packageName;
                this._packagePublisher = packagePublisher;
                this._packageVersion = packageVersion;
                this.messageChannel.addMessageHandler("IsProcessingChanged", function (isProcessingValue) {
                    _this.isBusy(isProcessingValue);
                });
            }
            Object.defineProperty(CustomControlViewModelBase.prototype, "controlId", {
                get: function () {
                    return this._control.id;
                },
                enumerable: true,
                configurable: true
            });
            CustomControlViewModelBase.prototype.dispose = function () {
                Commerce.ObjectExtensions.disposeAllProperties(this);
            };
            CustomControlViewModelBase.prototype.onReady = function (element) {
                try {
                    this._control.onReady(element);
                }
                catch (ex) {
                    Commerce.RetailLogger.viewModelCustomControlViewModelCustomControlOnReadyFailed(this._control.id, JSON.stringify(ex), this._packagePublisher, this._packageName, this._packageVersion);
                }
            };
            CustomControlViewModelBase.prototype.init = function (data) {
                Commerce.RetailLogger.viewModelCustomControlViewModelIntializingCustomControl(this._control.id, this._packagePublisher, this._packageName, this._packageVersion);
                this.messageChannel.sendMessage("Initialize", data);
            };
            CustomControlViewModelBase.prototype.sendMessage = function (messageType, data) {
                Commerce.RetailLogger.viewModelCustomControlViewModelSendingMessageToCustomControl(this._control.id, messageType, this._packagePublisher, this._packageName, this._packageVersion);
                this.messageChannel.sendMessage(messageType, data);
            };
            return CustomControlViewModelBase;
        }());
        Extensibility.CustomControlViewModelBase = CustomControlViewModelBase;
    })(Extensibility = Commerce.Extensibility || (Commerce.Extensibility = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Extensibility;
    (function (Extensibility) {
        var AddressAddEditCustomControlViewModel = (function (_super) {
            __extends(AddressAddEditCustomControlViewModel, _super);
            function AddressAddEditCustomControlViewModel(control, messageChannel, packagePublisher, packageName, packageVersion, handler) {
                var _this = _super.call(this, control, messageChannel, packagePublisher, packageName, packageVersion) || this;
                _this.isVisible = ko.observable(false);
                _this.messageChannel.addMessageHandler("VisibilityChanged", function (visible) {
                    _this.isVisible(visible);
                });
                _this.messageChannel.addMessageHandler("UpdateAddress", handler);
                _this.messageChannel.start();
                return _this;
            }
            return AddressAddEditCustomControlViewModel;
        }(Extensibility.CustomControlViewModelBase));
        Extensibility.AddressAddEditCustomControlViewModel = AddressAddEditCustomControlViewModel;
    })(Extensibility = Commerce.Extensibility || (Commerce.Extensibility = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Extensibility;
    (function (Extensibility) {
        var CartViewCustomControlViewModel = (function (_super) {
            __extends(CartViewCustomControlViewModel, _super);
            function CartViewCustomControlViewModel(control, messageChannel, packagePublisher, packageName, packageVersion, layout, handler) {
                var _this = _super.call(this, control, messageChannel, packagePublisher, packageName, packageVersion) || this;
                Commerce.ThrowIf.argumentIsNotObject(layout, "layout");
                _this._top = layout.Top;
                _this._left = layout.Left;
                _this._width = layout.Width;
                _this._height = layout.Height;
                _this._layoutId = layout.ID;
                _this.messageChannel.addMessageHandler("SetSelectedCartLines", handler);
                _this.messageChannel.start();
                return _this;
            }
            Object.defineProperty(CartViewCustomControlViewModel.prototype, "top", {
                get: function () {
                    return this._top;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CartViewCustomControlViewModel.prototype, "left", {
                get: function () {
                    return this._left;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CartViewCustomControlViewModel.prototype, "width", {
                get: function () {
                    return this._width;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CartViewCustomControlViewModel.prototype, "height", {
                get: function () {
                    return this._height;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CartViewCustomControlViewModel.prototype, "layoutId", {
                get: function () {
                    return this._layoutId;
                },
                enumerable: true,
                configurable: true
            });
            return CartViewCustomControlViewModel;
        }(Extensibility.CustomControlViewModelBase));
        Extensibility.CartViewCustomControlViewModel = CartViewCustomControlViewModel;
    })(Extensibility = Commerce.Extensibility || (Commerce.Extensibility = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Extensibility;
    (function (Extensibility) {
        var CartViewTotalsPanelCustomField = (function () {
            function CartViewTotalsPanelCustomField(fieldName, field, packagePublisher, packageName, packageVersion) {
                this._fieldName = fieldName;
                this._field = field;
            }
            Object.defineProperty(CartViewTotalsPanelCustomField.prototype, "fieldName", {
                get: function () {
                    return this._fieldName;
                },
                enumerable: true,
                configurable: true
            });
            CartViewTotalsPanelCustomField.prototype.computeValue = function (cart) {
                return this._field.computeValue(cart);
            };
            return CartViewTotalsPanelCustomField;
        }());
        Extensibility.CartViewTotalsPanelCustomField = CartViewTotalsPanelCustomField;
    })(Extensibility = Commerce.Extensibility || (Commerce.Extensibility = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Extensibility;
    (function (Extensibility) {
        var CartViewTotalsPanelCustomFieldViewModel = (function () {
            function CartViewTotalsPanelCustomFieldViewModel(customField) {
                this._field = customField;
                this.id = this._field.fieldName;
                this.captionResourceId = Commerce.StringExtensions.EMPTY;
                this.value = ko.observable(Commerce.StringExtensions.EMPTY);
            }
            CartViewTotalsPanelCustomFieldViewModel.prototype.updateValue = function (cart) {
                this.value(this._field.computeValue(cart));
            };
            return CartViewTotalsPanelCustomFieldViewModel;
        }());
        Extensibility.CartViewTotalsPanelCustomFieldViewModel = CartViewTotalsPanelCustomFieldViewModel;
    })(Extensibility = Commerce.Extensibility || (Commerce.Extensibility = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Extensibility;
    (function (Extensibility) {
        var CustomGridColumnViewModel = (function () {
            function CustomGridColumnViewModel(customGridColumn, columnName, gridName, viewName) {
                this._customGridColumn = customGridColumn;
                this._columnName = columnName;
                this._gridName = gridName;
                this._viewName = viewName;
            }
            CustomGridColumnViewModel.prototype.init = function (screenLayout) {
                this._screenLayout = screenLayout;
            };
            CustomGridColumnViewModel.prototype.dispose = function () {
                Commerce.ObjectExtensions.disposeAllProperties(this);
            };
            CustomGridColumnViewModel.prototype.isVisible = function () {
                if (!this._isInScreenLayout) {
                    return false;
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._customGridColumn)) {
                    Commerce.RetailLogger.coreHelpersGridExtensionModuleNotProvided(this._columnName, this._gridName, this._viewName);
                    return false;
                }
                return true;
            };
            CustomGridColumnViewModel.prototype.computeValue = function (data) {
                return Commerce.ObjectExtensions.isNullOrUndefined(this._customGridColumn) ? null : this._customGridColumn.computeValue(data);
            };
            CustomGridColumnViewModel.prototype.alignment = function () {
                return Commerce.ObjectExtensions.isNullOrUndefined(this._customGridColumn) ? null : this._customGridColumn.alignment();
            };
            CustomGridColumnViewModel.prototype.title = function () {
                return Commerce.ObjectExtensions.isNullOrUndefined(this._customGridColumn) ? null : this._customGridColumn.title();
            };
            Object.defineProperty(CustomGridColumnViewModel.prototype, "_isInScreenLayout", {
                get: function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(this._screenLayout) ||
                        Commerce.StringExtensions.isNullOrWhitespace(CustomGridColumnViewModel.GRID_NAME_TO_SCREEN_LAYOUT_CONFIG_PROPERTY[this._gridName.toString()])) {
                        return false;
                    }
                    return this._screenLayout.getConfigurationProperty(CustomGridColumnViewModel.GRID_NAME_TO_SCREEN_LAYOUT_CONFIG_PROPERTY[this._gridName.toString()], this._columnName);
                },
                enumerable: true,
                configurable: true
            });
            CustomGridColumnViewModel.GRID_NAME_TO_SCREEN_LAYOUT_CONFIG_PROPERTY = {
                "LinesGrid": "SelectedLinesFields",
                "DeliveryGrid": "SelectedDeliveryFields",
                "PaymentsGrid": "SelectedPaymentsFields",
            };
            return CustomGridColumnViewModel;
        }());
        Extensibility.CustomGridColumnViewModel = CustomGridColumnViewModel;
    })(Extensibility = Commerce.Extensibility || (Commerce.Extensibility = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Extensibility;
    (function (Extensibility) {
        var CustomGridColumnsViewModel = (function () {
            function CustomGridColumnsViewModel(customGridColumns, gridName, pageName) {
                this._customGridColumns = {
                    customColumn1: new Extensibility.CustomGridColumnViewModel(customGridColumns.customColumn1, "customColumn1", gridName, pageName),
                    customColumn2: new Extensibility.CustomGridColumnViewModel(customGridColumns.customColumn2, "customColumn2", gridName, pageName),
                    customColumn3: new Extensibility.CustomGridColumnViewModel(customGridColumns.customColumn3, "customColumn3", gridName, pageName),
                    customColumn4: new Extensibility.CustomGridColumnViewModel(customGridColumns.customColumn4, "customColumn4", gridName, pageName),
                    customColumn5: new Extensibility.CustomGridColumnViewModel(customGridColumns.customColumn5, "customColumn5", gridName, pageName),
                    customColumn6: new Extensibility.CustomGridColumnViewModel(customGridColumns.customColumn6, "customColumn6", gridName, pageName),
                    customColumn7: new Extensibility.CustomGridColumnViewModel(customGridColumns.customColumn7, "customColumn7", gridName, pageName),
                    customColumn8: new Extensibility.CustomGridColumnViewModel(customGridColumns.customColumn8, "customColumn8", gridName, pageName),
                    customColumn9: new Extensibility.CustomGridColumnViewModel(customGridColumns.customColumn9, "customColumn9", gridName, pageName),
                    customColumn10: new Extensibility.CustomGridColumnViewModel(customGridColumns.customColumn10, "customColumn10", gridName, pageName)
                };
            }
            CustomGridColumnsViewModel.prototype.init = function (screenLayout) {
                this._customGridColumns.customColumn1.init(screenLayout);
                this._customGridColumns.customColumn2.init(screenLayout);
                this._customGridColumns.customColumn3.init(screenLayout);
                this._customGridColumns.customColumn4.init(screenLayout);
                this._customGridColumns.customColumn5.init(screenLayout);
                this._customGridColumns.customColumn6.init(screenLayout);
                this._customGridColumns.customColumn7.init(screenLayout);
                this._customGridColumns.customColumn8.init(screenLayout);
                this._customGridColumns.customColumn9.init(screenLayout);
                this._customGridColumns.customColumn10.init(screenLayout);
            };
            CustomGridColumnsViewModel.prototype.dispose = function () {
                Commerce.ObjectExtensions.disposeAllProperties(this);
            };
            Object.defineProperty(CustomGridColumnsViewModel.prototype, "customColumn1", {
                get: function () {
                    return this._customGridColumns.customColumn1;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CustomGridColumnsViewModel.prototype, "customColumn2", {
                get: function () {
                    return this._customGridColumns.customColumn2;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CustomGridColumnsViewModel.prototype, "customColumn3", {
                get: function () {
                    return this._customGridColumns.customColumn3;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CustomGridColumnsViewModel.prototype, "customColumn4", {
                get: function () {
                    return this._customGridColumns.customColumn4;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CustomGridColumnsViewModel.prototype, "customColumn5", {
                get: function () {
                    return this._customGridColumns.customColumn5;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CustomGridColumnsViewModel.prototype, "customColumn6", {
                get: function () {
                    return this._customGridColumns.customColumn6;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CustomGridColumnsViewModel.prototype, "customColumn7", {
                get: function () {
                    return this._customGridColumns.customColumn7;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CustomGridColumnsViewModel.prototype, "customColumn8", {
                get: function () {
                    return this._customGridColumns.customColumn8;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CustomGridColumnsViewModel.prototype, "customColumn9", {
                get: function () {
                    return this._customGridColumns.customColumn9;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CustomGridColumnsViewModel.prototype, "customColumn10", {
                get: function () {
                    return this._customGridColumns.customColumn10;
                },
                enumerable: true,
                configurable: true
            });
            return CustomGridColumnsViewModel;
        }());
        Extensibility.CustomGridColumnsViewModel = CustomGridColumnsViewModel;
    })(Extensibility = Commerce.Extensibility || (Commerce.Extensibility = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Extensibility;
    (function (Extensibility) {
        var CustomGridItemSubfieldViewModel = (function () {
            function CustomGridItemSubfieldViewModel(customGridItemSubfield) {
                this._customGridItemSubfield = customGridItemSubfield;
            }
            CustomGridItemSubfieldViewModel.prototype.isVisible = function (item) {
                return !Commerce.StringExtensions.isNullOrWhitespace(this.computeValue(item));
            };
            CustomGridItemSubfieldViewModel.prototype.computeValue = function (item) {
                return this._customGridItemSubfield.computeValue(item);
            };
            return CustomGridItemSubfieldViewModel;
        }());
        Extensibility.CustomGridItemSubfieldViewModel = CustomGridItemSubfieldViewModel;
    })(Extensibility = Commerce.Extensibility || (Commerce.Extensibility = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Extensibility;
    (function (Extensibility) {
        var CustomGridItemSubfieldsViewModel = (function () {
            function CustomGridItemSubfieldsViewModel(customGridItemSubfields) {
                customGridItemSubfields = Commerce.ObjectExtensions.isNullOrUndefined(customGridItemSubfields) ? [] : customGridItemSubfields;
                this.customGridItemSubfields = customGridItemSubfields.map(function (customGridItemSubfield) {
                    return new Extensibility.CustomGridItemSubfieldViewModel(customGridItemSubfield);
                });
            }
            CustomGridItemSubfieldsViewModel.prototype.dispose = function () {
                Commerce.ObjectExtensions.disposeAllProperties(this);
            };
            CustomGridItemSubfieldsViewModel.prototype.hasVisibleCustomGridItemSubfields = function (item) {
                if (!Commerce.ArrayExtensions.hasElements(this.customGridItemSubfields)) {
                    return false;
                }
                return this.customGridItemSubfields.some(function (customGridItemSubfields) {
                    return customGridItemSubfields.isVisible(item);
                });
            };
            return CustomGridItemSubfieldsViewModel;
        }());
        Extensibility.CustomGridItemSubfieldsViewModel = CustomGridItemSubfieldsViewModel;
    })(Extensibility = Commerce.Extensibility || (Commerce.Extensibility = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Extensibility;
    (function (Extensibility) {
        var CustomerAddEditCustomControlViewModel = (function (_super) {
            __extends(CustomerAddEditCustomControlViewModel, _super);
            function CustomerAddEditCustomControlViewModel(control, messageChannel, packagePublisher, packageName, packageVersion) {
                var _this = _super.call(this, control, messageChannel, packagePublisher, packageName, packageVersion) || this;
                _this.isVisible = ko.observable(false);
                _this.messageChannel.addMessageHandler("VisibilityChanged", function (visible) {
                    _this.isVisible(visible);
                });
                _this.messageChannel.start();
                return _this;
            }
            CustomerAddEditCustomControlViewModel.prototype.addMessageHandlerForCustomerChanged = function (handler) {
                this.messageChannel.addMessageHandler("CustomerChanged", handler);
            };
            return CustomerAddEditCustomControlViewModel;
        }(Extensibility.CustomControlViewModelBase));
        Extensibility.CustomerAddEditCustomControlViewModel = CustomerAddEditCustomControlViewModel;
    })(Extensibility = Commerce.Extensibility || (Commerce.Extensibility = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Extensibility;
    (function (Extensibility) {
        var CustomerDetailsCustomControlViewModel = (function (_super) {
            __extends(CustomerDetailsCustomControlViewModel, _super);
            function CustomerDetailsCustomControlViewModel(control, messageChannel, packagePublisher, packageName, packageVersion) {
                var _this = _super.call(this, control, messageChannel, packagePublisher, packageName, packageVersion) || this;
                _this.isVisible = ko.observable(false);
                _this.messageChannel.addMessageHandler("VisibilityChanged", function (visible) {
                    _this.isVisible(visible);
                });
                _this.messageChannel.start();
                return _this;
            }
            return CustomerDetailsCustomControlViewModel;
        }(Extensibility.CustomControlViewModelBase));
        Extensibility.CustomerDetailsCustomControlViewModel = CustomerDetailsCustomControlViewModel;
    })(Extensibility = Commerce.Extensibility || (Commerce.Extensibility = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Extensibility;
    (function (Extensibility) {
        var DesignerGridViewModel = (function () {
            function DesignerGridViewModel(screenLayout, customColumnsViewModel, customItemSubfieldsViewModel) {
                this.screenLayout = screenLayout;
                this.customColumnsViewModel = customColumnsViewModel;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.customColumnsViewModel)) {
                    this.customColumnsViewModel.init(this.screenLayout);
                }
                this.customItemSubfieldsViewModel = customItemSubfieldsViewModel;
            }
            return DesignerGridViewModel;
        }());
        Extensibility.DesignerGridViewModel = DesignerGridViewModel;
    })(Extensibility = Commerce.Extensibility || (Commerce.Extensibility = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Extensibility;
    (function (Extensibility) {
        var DualDisplayCustomControlViewModel = (function (_super) {
            __extends(DualDisplayCustomControlViewModel, _super);
            function DualDisplayCustomControlViewModel(control, messageChannel, packagePublisher, packageName, packageVersion) {
                var _this = _super.call(this, control, messageChannel, packagePublisher, packageName, packageVersion) || this;
                _this.messageChannel.start();
                return _this;
            }
            return DualDisplayCustomControlViewModel;
        }(Extensibility.CustomControlViewModelBase));
        Extensibility.DualDisplayCustomControlViewModel = DualDisplayCustomControlViewModel;
    })(Extensibility = Commerce.Extensibility || (Commerce.Extensibility = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Extensibility;
    (function (Extensibility) {
        "use strict";
        var ExtensionCommand = (function (_super) {
            __extends(ExtensionCommand, _super);
            function ExtensionCommand(command, messageChannel, extensionPublisher, extensionPackageName, extensionPackageVersion) {
                var _this = _super.call(this, command.id) || this;
                _this._extraClass = command.extraClass;
                _this._id = command.id;
                _this._label = command.label;
                _this._messageChannel = messageChannel;
                _this._extensionPackageVersion = extensionPackageVersion;
                _this._extensionPublisher = extensionPublisher;
                _this._extensionPackageName = extensionPackageName;
                _this._canExecute = false;
                _this._isVisible = false;
                _this._isProcessing = false;
                _this._messageChannel.addMessageHandler("CanExecuteChanged", function (newValue) {
                    _this._canExecute = newValue;
                });
                _this._messageChannel.addMessageHandler("VisibilityChanged", function (newValue) {
                    _this._isVisible = newValue;
                });
                _this._messageChannel.addMessageHandler("IsProcessingChanged", function (newValue) {
                    _this._isProcessing = newValue;
                });
                _this._messageChannel.start();
                return _this;
            }
            Object.defineProperty(ExtensionCommand.prototype, "extraClass", {
                get: function () {
                    return this._extraClass;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ExtensionCommand.prototype, "isVisible", {
                get: function () {
                    return this._isVisible;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ExtensionCommand.prototype, "canExecute", {
                get: function () {
                    return this._canExecute;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ExtensionCommand.prototype, "isProcessing", {
                get: function () {
                    return this._isProcessing;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ExtensionCommand.prototype, "label", {
                get: function () {
                    return this._label;
                },
                enumerable: true,
                configurable: true
            });
            ExtensionCommand.prototype.execute = function (args) {
                this._messageChannel.sendMessage("Execute", undefined);
                Commerce.RetailLogger.viewModelExtensionCommandExecuted(this._id, this.extensionPublisher, this.extensionPackageName, this.extensionPackageVersion);
                return Promise.resolve();
            };
            ExtensionCommand.prototype.dispose = function () {
                this._messageChannel.sendMessage("Dispose", undefined);
                _super.prototype.dispose.call(this);
            };
            Object.defineProperty(ExtensionCommand.prototype, "messageChannel", {
                get: function () {
                    return this._messageChannel;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ExtensionCommand.prototype, "extensionPublisher", {
                get: function () {
                    return this._extensionPublisher;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ExtensionCommand.prototype, "extensionPackageName", {
                get: function () {
                    return this._extensionPackageName;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ExtensionCommand.prototype, "extensionPackageVersion", {
                get: function () {
                    return this._extensionPackageVersion;
                },
                enumerable: true,
                configurable: true
            });
            return ExtensionCommand;
        }(Commerce.ViewModels.CommandBase));
        Extensibility.ExtensionCommand = ExtensionCommand;
    })(Extensibility = Commerce.Extensibility || (Commerce.Extensibility = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var ExtensionDetailsViewModel = (function (_super) {
            __extends(ExtensionDetailsViewModel, _super);
            function ExtensionDetailsViewModel(context, extensionLoadInfo) {
                var _this = _super.call(this, context) || this;
                _this._loadInfo = extensionLoadInfo;
                return _this;
            }
            Object.defineProperty(ExtensionDetailsViewModel.prototype, "loadInfo", {
                get: function () {
                    return this._loadInfo;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ExtensionDetailsViewModel.prototype, "isLoadFailed", {
                get: function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(this._loadInfo) &&
                        !Commerce.ObjectExtensions.isNullOrUndefined(this._loadInfo.loadError);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ExtensionDetailsViewModel.prototype, "loadError", {
                get: function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(this._loadInfo) ||
                        Commerce.ObjectExtensions.isNullOrUndefined(this._loadInfo.loadError)) {
                        return Commerce.StringExtensions.EMPTY;
                    }
                    return this._loadInfo.loadError.message;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ExtensionDetailsViewModel.prototype, "modulePath", {
                get: function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(this._loadInfo) ||
                        Commerce.ObjectExtensions.isNullOrUndefined(this._loadInfo.extensionInfo)) {
                        return Commerce.StringExtensions.EMPTY;
                    }
                    return this._loadInfo.extensionInfo.extensionModulePath;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ExtensionDetailsViewModel.prototype, "description", {
                get: function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(this._loadInfo) ||
                        Commerce.ObjectExtensions.isNullOrUndefined(this._loadInfo.extensionInfo)) {
                        return Commerce.StringExtensions.EMPTY;
                    }
                    return this._loadInfo.extensionInfo.extensionDescription;
                },
                enumerable: true,
                configurable: true
            });
            return ExtensionDetailsViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.ExtensionDetailsViewModel = ExtensionDetailsViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Extensibility;
    (function (Extensibility) {
        var ExtensionMenuCommandViewModel = (function () {
            function ExtensionMenuCommandViewModel(command, messageChannel, packagePublisher, packageName, packageVersion) {
                var _this = this;
                this._messageChannel = messageChannel;
                this.isBusy = ko.observable(false);
                this.enabled = ko.observable(false);
                this._command = command;
                this._packageName = packageName;
                this._packagePublisher = packagePublisher;
                this._packageVersion = packageVersion;
                this._messageChannel.addMessageHandler("IsProcessingChanged", function (isProcessingValue) {
                    _this.isBusy(isProcessingValue);
                });
                this._messageChannel.addMessageHandler("CanExecuteChanged", function (canExecuteValue) {
                    _this.enabled(canExecuteValue);
                });
                this._messageChannel.start();
            }
            Object.defineProperty(ExtensionMenuCommandViewModel.prototype, "id", {
                get: function () {
                    return Commerce.StringExtensions.format(ExtensionMenuCommandViewModel.ID_FORMAT_STRING, this._packagePublisher, this._packageName, this._command.id);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ExtensionMenuCommandViewModel.prototype, "label", {
                get: function () {
                    return this._command.label;
                },
                enumerable: true,
                configurable: true
            });
            ExtensionMenuCommandViewModel.prototype.dispose = function () {
                this._messageChannel.sendMessage("Dispose", undefined);
                Commerce.ObjectExtensions.disposeAllProperties(this);
            };
            ExtensionMenuCommandViewModel.prototype.init = function (data) {
                this._messageChannel.sendMessage("Initialize", data);
                Commerce.RetailLogger.viewModelExtensionMenuCommandIntialized(this._command.id, this._packagePublisher, this._packageName, this._packageVersion);
            };
            ExtensionMenuCommandViewModel.prototype.execute = function () {
                this._messageChannel.sendMessage("Execute", undefined);
                Commerce.RetailLogger.viewModelExtensionMenuCommandExecuted(this._command.id, this._packagePublisher, this._packageName, this._packageVersion);
            };
            ExtensionMenuCommandViewModel.prototype.sendMessage = function (messageType, data) {
                this._messageChannel.sendMessage(messageType, data);
            };
            ExtensionMenuCommandViewModel.ID_FORMAT_STRING = "extensionMenuCommand_{0}_{1}_{2}";
            return ExtensionMenuCommandViewModel;
        }());
        Extensibility.ExtensionMenuCommandViewModel = ExtensionMenuCommandViewModel;
    })(Extensibility = Commerce.Extensibility || (Commerce.Extensibility = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var ExtensionPackageDetailsViewModel = (function (_super) {
            __extends(ExtensionPackageDetailsViewModel, _super);
            function ExtensionPackageDetailsViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw "Invalid options passed to the ExtensionPackageDetailsViewModel constructor: options cannot be null or undefined.";
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.extensionPackageLoadInfo)) {
                    throw "Invalid options passed to the ExtensionPackageDetailsViewModel constructor: extensionPackageLoadInfo cannot be null or undefined.";
                }
                _this._extensionPackageLoadInfo = options.extensionPackageLoadInfo;
                _this.selectedExtensionDetailsViewModel = ko.observable(null);
                _this.isExtensionSelected = ko.computed(function () { return !Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedExtensionDetailsViewModel()); });
                _this._isDetailsPanelVisible = ko.observable(true);
                _this.isDetailsPanelVisible = ko.computed(function () { return _this._isDetailsPanelVisible(); });
                return _this;
            }
            Object.defineProperty(ExtensionPackageDetailsViewModel.prototype, "extensionLoadInfos", {
                get: function () {
                    return Commerce.ArrayExtensions.hasElements(this._extensionPackageLoadInfo.extensionLoadInfos)
                        ? this._extensionPackageLoadInfo.extensionLoadInfos
                        : [];
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ExtensionPackageDetailsViewModel.prototype, "extensionPackageName", {
                get: function () {
                    return this._extensionPackageLoadInfo.extensionPackageInfo.name;
                },
                enumerable: true,
                configurable: true
            });
            ExtensionPackageDetailsViewModel.prototype.toggleDetailsPanel = function () {
                this._isDetailsPanelVisible(!this._isDetailsPanelVisible());
            };
            ExtensionPackageDetailsViewModel.prototype.onExtensionLoadInfoSelected = function (selectedExtensionLoadInfo) {
                this.selectedExtensionDetailsViewModel(new ViewModels.ExtensionDetailsViewModel(this.context, selectedExtensionLoadInfo));
            };
            ExtensionPackageDetailsViewModel.prototype.getLocalizedStatus = function (error) {
                return Commerce.ObjectExtensions.isNullOrUndefined(error)
                    ? Commerce.ViewModelAdapter.getResourceString("string_7452")
                    : Commerce.ViewModelAdapter.getResourceString("string_7453");
            };
            return ExtensionPackageDetailsViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.ExtensionPackageDetailsViewModel = ExtensionPackageDetailsViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Extensibility;
    (function (Extensibility) {
        "use strict";
        var ExtensionViewController = (function () {
            function ExtensionViewController(messageChannel, extensionPublisher, extensionPackageName, extensionPackageVersion) {
                this._messageChannel = messageChannel;
                this._extensionPackageVersion = extensionPackageVersion;
                this._extensionPublisher = extensionPublisher;
                this._extensionPackageName = extensionPackageName;
                this._messageChannel.start();
            }
            Object.defineProperty(ExtensionViewController.prototype, "extensionPublisher", {
                get: function () {
                    return this._extensionPublisher;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ExtensionViewController.prototype, "extensionPackageName", {
                get: function () {
                    return this._extensionPackageName;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ExtensionViewController.prototype, "extensionPackageVersion", {
                get: function () {
                    return this._extensionPackageVersion;
                },
                enumerable: true,
                configurable: true
            });
            ExtensionViewController.prototype.init = function (data) {
                this.sendMessage("Initialize", data);
            };
            ExtensionViewController.prototype.sendMessage = function (messageType, data) {
                this._messageChannel.sendMessage(messageType, data);
            };
            ExtensionViewController.prototype.addMessageHandler = function (type, handler) {
                return this._messageChannel.addMessageHandler(type, handler);
            };
            return ExtensionViewController;
        }());
        Extensibility.ExtensionViewController = ExtensionViewController;
    })(Extensibility = Commerce.Extensibility || (Commerce.Extensibility = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Extensibility;
    (function (Extensibility) {
        var PriceCheckCustomControlViewModel = (function (_super) {
            __extends(PriceCheckCustomControlViewModel, _super);
            function PriceCheckCustomControlViewModel(control, messageChannel, packagePublisher, packageName, packageVersion) {
                var _this = _super.call(this, control, messageChannel, packagePublisher, packageName, packageVersion) || this;
                _this.isVisible = ko.observable(false);
                _this.messageChannel.addMessageHandler("VisibilityChanged", function (visible) {
                    _this.isVisible(visible);
                });
                _this.messageChannel.start();
                return _this;
            }
            return PriceCheckCustomControlViewModel;
        }(Extensibility.CustomControlViewModelBase));
        Extensibility.PriceCheckCustomControlViewModel = PriceCheckCustomControlViewModel;
    })(Extensibility = Commerce.Extensibility || (Commerce.Extensibility = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Extensibility;
    (function (Extensibility) {
        var SimpleProductDetailsCustomControlViewModel = (function (_super) {
            __extends(SimpleProductDetailsCustomControlViewModel, _super);
            function SimpleProductDetailsCustomControlViewModel(control, messageChannel, packagePublisher, packageName, packageVersion) {
                var _this = _super.call(this, control, messageChannel, packagePublisher, packageName, packageVersion) || this;
                _this.isVisible = ko.observable(false);
                _this.messageChannel.addMessageHandler("VisibilityChanged", function (visible) {
                    _this.isVisible(visible);
                });
                _this.messageChannel.start();
                return _this;
            }
            return SimpleProductDetailsCustomControlViewModel;
        }(Extensibility.CustomControlViewModelBase));
        Extensibility.SimpleProductDetailsCustomControlViewModel = SimpleProductDetailsCustomControlViewModel;
    })(Extensibility = Commerce.Extensibility || (Commerce.Extensibility = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        var Framework;
        (function (Framework) {
            "use strict";
            var WorkflowStepViewModelBase = (function () {
                function WorkflowStepViewModelBase(context) {
                    this.context = context;
                }
                Object.defineProperty(WorkflowStepViewModelBase.prototype, "primaryCommand", {
                    get: function () {
                        return null;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(WorkflowStepViewModelBase.prototype, "secondaryCommand", {
                    get: function () {
                        return null;
                    },
                    enumerable: true,
                    configurable: true
                });
                WorkflowStepViewModelBase.prototype.dispose = function () {
                    Commerce.ObjectExtensions.disposeAllProperties(this);
                };
                return WorkflowStepViewModelBase;
            }());
            Framework.WorkflowStepViewModelBase = WorkflowStepViewModelBase;
        })(Framework = ViewModels.Framework || (ViewModels.Framework = {}));
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        var Framework;
        (function (Framework) {
            "use strict";
            var WorkflowErrorStepViewModel = (function (_super) {
                __extends(WorkflowErrorStepViewModel, _super);
                function WorkflowErrorStepViewModel(context, options) {
                    var _this = _super.call(this, context) || this;
                    _this.id = "ErrorStep";
                    var name = options.title;
                    if (Commerce.StringExtensions.isNullOrWhitespace(name)) {
                        name = Commerce.ViewModelAdapter.getResourceString("string_31100");
                    }
                    _this.name = name;
                    _this.errorMessage = options.errorMessage;
                    return _this;
                }
                Object.defineProperty(WorkflowErrorStepViewModel.prototype, "primaryCommand", {
                    get: function () {
                        var _this = this;
                        var command = {
                            canExecute: true,
                            executeAsync: function () {
                                _this.context.raiseEvent("GoBack", void 0);
                                return Promise.resolve();
                            },
                            name: Commerce.ViewModelAdapter.getResourceString("string_75")
                        };
                        return command;
                    },
                    enumerable: true,
                    configurable: true
                });
                return WorkflowErrorStepViewModel;
            }(Framework.WorkflowStepViewModelBase));
            Framework.WorkflowErrorStepViewModel = WorkflowErrorStepViewModel;
        })(Framework = ViewModels.Framework || (ViewModels.Framework = {}));
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        var Framework;
        (function (Framework) {
            "use strict";
            var WorkflowResult = (function () {
                function WorkflowResult(data) {
                    this.data = data;
                    Object.freeze(this);
                }
                return WorkflowResult;
            }());
            Framework.WorkflowResult = WorkflowResult;
            var WorkflowCommandViewModel = (function () {
                function WorkflowCommandViewModel(id, actionId) {
                    this.id = id;
                    this.actionId = actionId;
                    this.name = ko.observable(Commerce.StringExtensions.EMPTY);
                    this.canExecute = ko.observable(false);
                    this.isVisible = ko.observable(false);
                }
                WorkflowCommandViewModel.prototype.setCommand = function (command) {
                    this._command = command;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(command)) {
                        this.canExecute(command.canExecute);
                        this.name(command.name);
                        this.isVisible(true);
                    }
                    else {
                        this.isVisible(false);
                        this.name(Commerce.StringExtensions.EMPTY);
                        this.canExecute(false);
                    }
                };
                WorkflowCommandViewModel.prototype.executeAsync = function () {
                    if (!this.canExecute() || Commerce.ObjectExtensions.isNullOrUndefined(this._command)) {
                        return Promise.resolve();
                    }
                    return this._command.executeAsync();
                };
                return WorkflowCommandViewModel;
            }());
            var WorkflowDataViewModel = (function () {
                function WorkflowDataViewModel() {
                }
                return WorkflowDataViewModel;
            }());
            Framework.WorkflowDataViewModel = WorkflowDataViewModel;
            var MultiStepWorkflowOperationIds;
            (function (MultiStepWorkflowOperationIds) {
                MultiStepWorkflowOperationIds["PRIMARY"] = "Primary";
                MultiStepWorkflowOperationIds["SECONDARY"] = "Secondary";
            })(MultiStepWorkflowOperationIds || (MultiStepWorkflowOperationIds = {}));
            var MultiStepWorkflowViewModelBase = (function () {
                function MultiStepWorkflowViewModelBase(options) {
                    var _this = this;
                    this._workflowState = [];
                    this.workflowDataViewModel = options.dataViewModel;
                    this.id = options.id;
                    this.title = ko.observable(options.name);
                    this._currentStep = ko.observable(null);
                    this._isFirstStep = ko.observable(true);
                    this._isGoBackAllowed = ko.observable(false);
                    this._isCancellationAllowed = ko.observable(false);
                    this._isProcessing = ko.observable(false);
                    this._onCancel = null;
                    this._onComplete = null;
                    this._onReject = null;
                    this._correlationId = Commerce.StringExtensions.EMPTY;
                    this.goBack = function () {
                        if (Commerce.ArrayExtensions.hasElements(_this._workflowState) && _this._workflowState.length > 1) {
                            var stateToRemove = _this._workflowState[_this._workflowState.length - 1];
                            var newCurrentState = _this._workflowState[_this._workflowState.length - 2];
                            Commerce.RetailLogger.multiStepWorkflowViewModelGoBackToPreviousStateStarted(_this._correlationId, stateToRemove.step.id, newCurrentState.step.id);
                            _this._workflowState.pop();
                            _this._currentStep(newCurrentState.step);
                            _this._updateState();
                            var delay = Commerce.Config.disposalDelay();
                            setTimeout(function (step) {
                                step.dispose();
                            }, delay, stateToRemove.step);
                            Commerce.RetailLogger.multiStepWorkflowViewModelGoBackToPreviousStateSucceeded(_this._correlationId, stateToRemove.step.id, newCurrentState.step.id);
                        }
                        else if (!Commerce.ArrayExtensions.hasElements(_this._workflowState)) {
                            Commerce.RetailLogger.multiStepWorkflowViewModelGoBackNotAllowedNoStates(_this._correlationId);
                        }
                        else {
                            var currentState = _this._workflowState[_this._workflowState.length - 1];
                            Commerce.RetailLogger.multiStepWorkflowViewModelGoBackNotAllowedOneState(_this._correlationId, currentState.step.id);
                        }
                    };
                    this.cancelWorkflow = function () {
                        if (Commerce.ObjectExtensions.isFunction(_this._onCancel)) {
                            _this._onCancel();
                        }
                    };
                    this._primaryCommandViewModel = new WorkflowCommandViewModel("MultiStepWorkflow.PrimaryCommand", MultiStepWorkflowOperationIds.PRIMARY);
                    this._secondaryCommandViewModel = new WorkflowCommandViewModel("MultiStepWorkflow.SecondaryCommand", MultiStepWorkflowOperationIds.SECONDARY);
                    this.commands = [this._primaryCommandViewModel, this._secondaryCommandViewModel];
                    this.runOperation = function (operationId) {
                        if (operationId === MultiStepWorkflowOperationIds.PRIMARY) {
                            _this._primaryCommandViewModel.executeAsync();
                        }
                        else {
                            _this._secondaryCommandViewModel.executeAsync();
                        }
                    };
                    Object.preventExtensions(this);
                }
                Object.defineProperty(MultiStepWorkflowViewModelBase.prototype, "currentStep", {
                    get: function () {
                        return this._currentStep;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MultiStepWorkflowViewModelBase.prototype, "isFirstStep", {
                    get: function () {
                        return this._isFirstStep;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MultiStepWorkflowViewModelBase.prototype, "isGoBackAllowed", {
                    get: function () {
                        return this._isGoBackAllowed;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MultiStepWorkflowViewModelBase.prototype, "isCancellationAllowed", {
                    get: function () {
                        return this._isCancellationAllowed;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MultiStepWorkflowViewModelBase.prototype, "isProcessing", {
                    get: function () {
                        return this._isProcessing;
                    },
                    enumerable: true,
                    configurable: true
                });
                MultiStepWorkflowViewModelBase.prototype.runWorkflowAsync = function (correlationId, initialData) {
                    var _this = this;
                    if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                        correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                    }
                    this._correlationId = correlationId;
                    Commerce.RetailLogger.multiStepWorkflowStarted(this._correlationId, this.id);
                    return new Promise(function (resolve, reject) {
                        _this._onCancel = function () {
                            Commerce.RetailLogger.multiStepWorkflowCancelled(_this._correlationId, _this.id);
                            _this._cleanupOnWorkflowEnd();
                            resolve({ canceled: true, data: null });
                        };
                        _this._onComplete = function (output) {
                            Commerce.RetailLogger.multiStepWorkflowSucceeded(_this._correlationId, _this.id);
                            _this._cleanupOnWorkflowEnd();
                            resolve({ canceled: false, data: output });
                        };
                        _this._onReject = function (reason) {
                            Commerce.RetailLogger.multiStepWorkflowFailed(_this._correlationId, _this.id, Commerce.ErrorHelper.serializeError(reason));
                            _this._cleanupOnWorkflowEnd();
                            reject(reason);
                        };
                        var initialState = _this.getInitialWorkflowState(initialData);
                        _this._addState(initialState);
                    });
                };
                MultiStepWorkflowViewModelBase.prototype.dispose = function () {
                    Commerce.ObjectExtensions.disposeAllProperties(this);
                };
                MultiStepWorkflowViewModelBase.isEventType = function (event, eventType) {
                    return event.name === eventType;
                };
                MultiStepWorkflowViewModelBase.prototype.createStepContext = function () {
                    var _this = this;
                    var context = {
                        raiseEvent: function (eventType, data) {
                            var event = { name: eventType, data: data };
                            try {
                                _this._handleWorkflowEvent(event);
                            }
                            catch (ex) {
                                _this._onReject(ex);
                            }
                        },
                        runtime: Commerce.Runtime,
                        peripherals: Commerce.Peripherals.instance,
                        managerFactory: Commerce.Model.Managers.Factory,
                        stringResourceManager: Commerce.StringResourceManager,
                        triggerManager: Commerce.Triggers.TriggerManager.instance
                    };
                    return context;
                };
                Object.defineProperty(MultiStepWorkflowViewModelBase.prototype, "_currentState", {
                    get: function () {
                        var currentState = null;
                        if (this._workflowState.length > 0) {
                            currentState = this._workflowState[this._workflowState.length - 1];
                        }
                        return currentState;
                    },
                    enumerable: true,
                    configurable: true
                });
                MultiStepWorkflowViewModelBase.prototype._handleWorkflowEvent = function (event) {
                    if (MultiStepWorkflowViewModelBase.isEventType(event, "IsProcessingChanged")) {
                        this._isProcessing(event.data);
                    }
                    else if (MultiStepWorkflowViewModelBase.isEventType(event, "CommandStateChanged")) {
                        this._updateCommands();
                    }
                    else if (MultiStepWorkflowViewModelBase.isEventType(event, "StepFailed")) {
                        this._onReject(event.data);
                    }
                    else if (MultiStepWorkflowViewModelBase.isEventType(event, "StepError")) {
                        this._handleStepError(event);
                    }
                    else if (MultiStepWorkflowViewModelBase.isEventType(event, "GoBack")) {
                        this.goBack();
                    }
                    else if (MultiStepWorkflowViewModelBase.isEventType(event, "StepCancelled")) {
                        this._onCancel();
                    }
                    else {
                        var nextState = this.getNextWorkflowState(this._currentState, event);
                        if (nextState instanceof WorkflowResult) {
                            this._onComplete(nextState.data);
                        }
                        else {
                            if (nextState.step !== this._currentState.step) {
                                this._addState(nextState);
                            }
                            else {
                                this._workflowState.splice(this._workflowState.length - 1, 1, nextState);
                                this._updateState();
                            }
                        }
                    }
                };
                MultiStepWorkflowViewModelBase.prototype._addState = function (state) {
                    var id = !Commerce.ObjectExtensions.isNullOrUndefined(state) ? state.step.id : Commerce.StringExtensions.EMPTY;
                    try {
                        Commerce.RetailLogger.multiStepWorkflowAddState(this._correlationId, id);
                        this._currentStep(state.step);
                        this._workflowState.push(state);
                        this._updateState();
                    }
                    catch (ex) {
                        Commerce.RetailLogger.multiStepWorkflowAddStateFailed(this._correlationId, id, Commerce.ErrorHelper.serializeError(ex));
                        this._onReject(ex);
                    }
                };
                MultiStepWorkflowViewModelBase.prototype._updateState = function () {
                    if (Commerce.ArrayExtensions.hasElements(this._workflowState)) {
                        if (this._workflowState.length > 1) {
                            this._isFirstStep(false);
                        }
                        else {
                            this._isFirstStep(true);
                        }
                    }
                    else {
                        throw new Error("Unable to update state in MultiStepWorkFlowViewModelBase when there are not states defined.");
                    }
                    this._isCancellationAllowed(this._currentState.isCancellationAllowed);
                    this._isGoBackAllowed(this._currentState.isGoBackAllowed);
                    this._isProcessing(false);
                    this.workflowDataViewModel.update(this._currentState.data);
                    this._updateCommands();
                };
                MultiStepWorkflowViewModelBase.prototype._updateCommands = function () {
                    var curStep = this.currentStep();
                    this._primaryCommandViewModel.setCommand(curStep.primaryCommand);
                    this._secondaryCommandViewModel.setCommand(curStep.secondaryCommand);
                };
                MultiStepWorkflowViewModelBase.prototype._cleanupOnWorkflowEnd = function () {
                    this._correlationId = Commerce.StringExtensions.EMPTY;
                    this._onCancel = null;
                    this._onComplete = null;
                    this._onReject = null;
                };
                MultiStepWorkflowViewModelBase.prototype._handleStepError = function (event) {
                    var errorStepOptions = {
                        errorMessage: event.data.errorMessage,
                        title: event.data.title
                    };
                    var errorStep = new Framework.WorkflowErrorStepViewModel(this.createStepContext(), errorStepOptions);
                    this._currentStep(errorStep);
                    var errorState = {
                        data: null,
                        isGoBackAllowed: false,
                        isCancellationAllowed: false,
                        step: errorStep
                    };
                    this._workflowState.push(errorState);
                    this._updateState();
                };
                return MultiStepWorkflowViewModelBase;
            }());
            Framework.MultiStepWorkflowViewModelBase = MultiStepWorkflowViewModelBase;
        })(Framework = ViewModels.Framework || (ViewModels.Framework = {}));
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var CustomHealthCheckEntityViewModel = (function () {
            function CustomHealthCheckEntityViewModel(customHealthCheckEntity, packagePublisher, packageName, packageVersion) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(customHealthCheckEntity)) {
                    throw new Error("Invalid options passed to the CustomHealthCheckEntityViewModel constructor: "
                        + "customHealthCheckEntity cannot be null or undefined.");
                }
                this.name = customHealthCheckEntity.name;
                this._healthCheckStatus = {
                    healthCheckState: Commerce.Client.Entities.HealthCheckStatusEnum.NotRun,
                    result: null,
                    timestamp: null
                };
                this.configurations = customHealthCheckEntity.setupDetails.map(function (item) {
                    return {
                        Key: item.label,
                        Value: {
                            StringValue: item.value
                        }
                    };
                });
                this.entityType = customHealthCheckEntity.entityType;
                this._customHealthCheck = customHealthCheckEntity;
                this._extensionPackageName = packageName;
                this._extensionPackageVersion = packageVersion;
                this._extensionPublisher = packagePublisher;
            }
            Object.defineProperty(CustomHealthCheckEntityViewModel.prototype, "healthCheckStatus", {
                get: function () {
                    return this._healthCheckStatus;
                },
                set: function (value) {
                    this._healthCheckStatus = value;
                },
                enumerable: true,
                configurable: true
            });
            CustomHealthCheckEntityViewModel.prototype.executeHealthCheckAsync = function (correlationId) {
                var _this = this;
                Commerce.RetailLogger.healthCheckCustomExecuteHealthCheckStarted(correlationId, this.name, this._extensionPublisher, this._extensionPackageName, this._extensionPackageVersion);
                try {
                    var result = this._customHealthCheck.executeHealthCheckAsync();
                    if (result instanceof Promise) {
                        return result.catch(function (error) {
                            var sanitizedError;
                            if (error instanceof Commerce.Client.Entities.ExtensionError) {
                                sanitizedError = new Commerce.Client.Entities.PosExtensionError(error);
                            }
                            else {
                                sanitizedError = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.APPLICATION_ERROR);
                            }
                            Commerce.RetailLogger.healthCheckCustomExecuteHealthCheckFailed(correlationId, _this.name, Commerce.ErrorHelper.serializeError(sanitizedError));
                            return Promise.reject(sanitizedError);
                        }).then(function (value) {
                            if (Commerce.ObjectExtensions.isNullOrUndefined(value) || !Commerce.ObjectExtensions.isObject(value)) {
                                _this.healthCheckStatus = {
                                    healthCheckState: Commerce.Client.Entities.HealthCheckStatusEnum.Unsupported,
                                    result: {
                                        title: Commerce.StringExtensions.EMPTY,
                                        message: Commerce.StringExtensions.EMPTY,
                                        errorCode: Commerce.StringExtensions.EMPTY
                                    },
                                    timestamp: new Date()
                                };
                                Commerce.RetailLogger.healthCheckCustomExecuteHealthCheckIncorrectResultProvided(correlationId, _this.name, "Invalid health check status object.");
                                Commerce.RetailLogger.healthCheckCustomExecuteHealthCheckSucceeded(correlationId, _this.name);
                                return Promise.resolve(_this.healthCheckStatus);
                            }
                            else {
                                var result_1;
                                if (Commerce.ObjectExtensions.isNullOrUndefined(value.result)) {
                                    Commerce.RetailLogger.healthCheckCustomExecuteHealthCheckIncorrectResultProvided(correlationId, _this.name, "Invalid health check status result.");
                                    result_1 = {
                                        title: Commerce.StringExtensions.EMPTY,
                                        message: Commerce.StringExtensions.EMPTY,
                                        errorCode: Commerce.StringExtensions.EMPTY
                                    };
                                }
                                else {
                                    var title = value.result.title;
                                    if (!Commerce.ObjectExtensions.isString(title)) {
                                        Commerce.RetailLogger.healthCheckCustomExecuteHealthCheckIncorrectResultProvided(correlationId, _this.name, "Invalid health check status result title.");
                                        title = Commerce.StringExtensions.EMPTY;
                                    }
                                    var message = value.result.message;
                                    if (!Commerce.ObjectExtensions.isString(message)) {
                                        Commerce.RetailLogger.healthCheckCustomExecuteHealthCheckIncorrectResultProvided(correlationId, _this.name, "Invalid health check status result message.");
                                        message = Commerce.StringExtensions.EMPTY;
                                    }
                                    var errorCode = value.result.errorCode;
                                    if (!Commerce.ObjectExtensions.isString(errorCode)) {
                                        Commerce.RetailLogger.healthCheckCustomExecuteHealthCheckIncorrectResultProvided(correlationId, _this.name, "Invalid health check status result error code.");
                                        errorCode = Commerce.StringExtensions.EMPTY;
                                    }
                                    result_1 = { title: title, message: message, errorCode: errorCode };
                                }
                                var healthCheckState = value.healthCheckState;
                                if (Commerce.ObjectExtensions.isNullOrUndefined(healthCheckState)) {
                                    Commerce.RetailLogger.healthCheckCustomExecuteHealthCheckIncorrectResultProvided(correlationId, _this.name, "Invalid health check status state.");
                                    healthCheckState = Commerce.Client.Entities.HealthCheckStatusEnum.Unsupported;
                                }
                                var timestamp = value.timestamp;
                                if (!(timestamp instanceof Date)) {
                                    Commerce.RetailLogger.healthCheckCustomExecuteHealthCheckIncorrectResultProvided(correlationId, _this.name, "Invalid health check status timestamp.");
                                    timestamp = new Date();
                                }
                                var status_1 = {
                                    healthCheckState: healthCheckState,
                                    result: result_1,
                                    timestamp: timestamp
                                };
                                Commerce.RetailLogger.healthCheckCustomExecuteHealthCheckSucceeded(correlationId, _this.name);
                                _this.healthCheckStatus = status_1;
                                return Promise.resolve(status_1);
                            }
                        });
                    }
                    else {
                        Commerce.RetailLogger.healthCheckCustomExecuteHealthCheckFailed(correlationId, this.name, "Invalid result type");
                        return Promise.reject(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.APPLICATION_ERROR));
                    }
                }
                catch (ex) {
                    Commerce.RetailLogger.healthCheckCustomExecuteHealthCheckFailed(correlationId, this.name, Commerce.ErrorHelper.serializeError(ex));
                    return Promise.reject(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.APPLICATION_ERROR));
                }
            };
            return CustomHealthCheckEntityViewModel;
        }());
        ViewModels.CustomHealthCheckEntityViewModel = CustomHealthCheckEntityViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var CreateOrUpdateInventoryDocumentHeaderDialogViewModel = (function (_super) {
            __extends(CreateOrUpdateInventoryDocumentHeaderDialogViewModel, _super);
            function CreateOrUpdateInventoryDocumentHeaderDialogViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this.isInbound = ko.observable(false);
                _this.document = ko.observable(null);
                _this.isCreationOperation = ko.observable(true);
                _this.transferFromWarehouse = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.transferFromWarehouseDetails = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.transferToWarehouse = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.transferToWarehouseDetails = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.shipDate = ko.observable(new Date());
                _this.receiveDate = ko.observable(new Date());
                _this.deliveryModes = ko.observableArray([]);
                _this.selectedDeliveryModeId = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.note = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.title = ko.computed(function () {
                    if (_this.isCreationOperation()) {
                        return _this.context.stringResourceManager.getString("string_12700");
                    }
                    return _this.context.stringResourceManager.getString("string_12636");
                });
                _this.primaryButtonLabel = ko.computed(function () {
                    if (_this.isCreationOperation()) {
                        return _this.context.stringResourceManager.getString("string_12702");
                    }
                    return _this.context.stringResourceManager.getString("string_12703");
                });
                _this.isDocumentInitialized = ko.computed(function () { return !Commerce.ObjectExtensions.isNullOrUndefined(_this.document()); });
                _this.disableOkButton = ko.computed(function () {
                    return Commerce.ObjectExtensions.isNullOrUndefined(_this.document())
                        || Commerce.StringExtensions.isNullOrWhitespace(_this.transferFromWarehouse())
                        || Commerce.StringExtensions.isNullOrWhitespace(_this.transferToWarehouse());
                });
                _this.transferFromWarehouseLabel = ko.computed(function () {
                    return _this.transferFromWarehouse() || _this.context.stringResourceManager.getString("string_12706");
                });
                _this.transferToWarehouseLabel = ko.computed(function () {
                    return _this.transferToWarehouse() || _this.context.stringResourceManager.getString("string_12706");
                });
                _this.isNoteEmpty = ko.computed(function () {
                    return Commerce.ObjectExtensions.isNullOrUndefined(_this.note()) || Commerce.StringExtensions.isEmpty(_this.note());
                });
                _this.transferFromTileIconClass = ko.computed(function () { return "iconRetail icon-20x20 " +
                    (_this.isInbound() ? "accentColor" : "secondaryFontColor"); });
                _this.transferToTileIconClass = ko.computed(function () { return "iconRetail icon-20x20 " +
                    (_this.isInbound() ? "secondaryFontColor" : "accentColor"); });
                _this.transferFromCheveronCssClass = ko.computed(function () { return "icon-24x24 " +
                    (_this.isInbound() ? "accentColor" : "secondaryFontColor"); });
                _this.transferToCheveronCssClass = ko.computed(function () { return "icon-24x24 " +
                    (_this.isInbound() ? "secondaryFontColor" : "accentColor"); });
                return _this;
            }
            CreateOrUpdateInventoryDocumentHeaderDialogViewModel.prototype.load = function (options) {
                var _this = this;
                this.isInbound(options.isInbound);
                this.deliveryModes(__spreadArrays([
                    { Code: Commerce.StringExtensions.EMPTY, Description: Commerce.StringExtensions.EMPTY, RecordId: 0 }
                ], Commerce.ApplicationContext.Instance.deliveryOptions));
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options.document)) {
                    this.document(options.document);
                    this.isCreationOperation(false);
                    this.transferFromWarehouse(this.document().Sender);
                    this.transferFromWarehouseDetails(this.document().SenderDetails);
                    this.transferToWarehouse(this.document().Receiver);
                    this.transferToWarehouseDetails(this.document().ReceiverDetails);
                    this.shipDate(this.document().ShipDate);
                    this.receiveDate(this.document().ReceiveDate);
                    this.selectedDeliveryModeId(this.document().DeliveryMode);
                }
                else {
                    var document_1 = {
                        WorkDocumentId: Commerce.StringExtensions.EMPTY,
                        TerminalId: Commerce.StringExtensions.EMPTY,
                        OperationTypeValue: Commerce.Proxy.Entities.InventoryInboundOutboundDocumentOperationType.CreateTransferOrder,
                        StatusValue: Commerce.Proxy.Entities.InventoryDocumentStatus.InProgress,
                        ReceiptId: Commerce.StringExtensions.EMPTY,
                        Note: Commerce.StringExtensions.EMPTY,
                        OperationResultMessage: Commerce.StringExtensions.EMPTY,
                    };
                    this.document(document_1);
                    this.isCreationOperation(true);
                    this.transferFromWarehouse(this.isInbound() ? Commerce.StringExtensions.EMPTY : Commerce.ApplicationContext.Instance.channelConfiguration.InventLocation);
                    this.transferToWarehouse(this.isInbound() ? Commerce.ApplicationContext.Instance.channelConfiguration.InventLocation : Commerce.StringExtensions.EMPTY);
                    this.warehouseManager.getWarehouseByIdAsync(Commerce.ApplicationContext.Instance.channelConfiguration.InventLocation).getPromise()
                        .then(function (response) {
                        _this.transferFromWarehouseDetails(_this.isInbound() ? Commerce.StringExtensions.EMPTY : response.Name);
                        _this.transferToWarehouseDetails(_this.isInbound() ? response.Name : Commerce.StringExtensions.EMPTY);
                    });
                }
                this.note(this.document().Note);
            };
            CreateOrUpdateInventoryDocumentHeaderDialogViewModel.prototype.saveDocumentAsync = function (shipDate, receiveDate) {
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                return this._updateDocumentAsync(correlationId, shipDate, receiveDate, this.document());
            };
            CreateOrUpdateInventoryDocumentHeaderDialogViewModel.prototype.selectFromWarehouseAsync = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var clientRequest = new Commerce.Inventory.SelectInventoryDocumentWarehouseClientRequest(correlationId, this.transferFromWarehouse());
                return this.context.runtime.executeAsync(clientRequest).then(function (response) {
                    if (!response.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(response.data.result)) {
                        _this.transferFromWarehouse(response.data.result.InventLocation);
                        _this.transferFromWarehouseDetails(response.data.result.Name);
                        return { canceled: false, data: null };
                    }
                    return { canceled: true, data: null };
                });
            };
            CreateOrUpdateInventoryDocumentHeaderDialogViewModel.prototype.selectToWarehouseAsync = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var clientRequest = new Commerce.Inventory.SelectInventoryDocumentWarehouseClientRequest(correlationId, this.transferToWarehouse());
                return this.context.runtime.executeAsync(clientRequest).then(function (response) {
                    if (!response.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(response.data.result)) {
                        _this.transferToWarehouse(response.data.result.InventLocation);
                        _this.transferToWarehouseDetails(response.data.result.Name);
                        return { canceled: false, data: null };
                    }
                    return { canceled: true, data: null };
                });
            };
            CreateOrUpdateInventoryDocumentHeaderDialogViewModel.prototype.updateNoteAsync = function () {
                var _this = this;
                var showTextInputDialogClientRequest = new Commerce.ShowTextInputDialogClientRequest({
                    label: this.context.stringResourceManager.getString(this.isNoteEmpty() ? "string_12441" : "string_12450"),
                    defaultText: this.note(),
                });
                return this.context.runtime.executeAsync(showTextInputDialogClientRequest).then(function (textInputResult) {
                    if (textInputResult.canceled) {
                        return { canceled: true, data: null };
                    }
                    else {
                        _this.note(textInputResult.data.result.value);
                        return { canceled: false, data: null };
                    }
                });
            };
            CreateOrUpdateInventoryDocumentHeaderDialogViewModel.prototype._updateDocumentAsync = function (correlationId, shipDate, receiveDate, document) {
                var _this = this;
                document.Sender = this.transferFromWarehouse();
                document.Receiver = this.transferToWarehouse();
                document.ShipDate = this._convertDateToUtcFormat(shipDate);
                document.ReceiveDate = this._convertDateToUtcFormat(receiveDate);
                document.DeliveryMode = this.selectedDeliveryModeId();
                document.Note = this.note();
                return this._isBusyUntil(this.isCreationOperation() ? this.inventoryManager.createInventoryDocumentHeaderAsync(document)
                    : this.inventoryManager.updateInventoryDocumentHeaderAsync(document)).getPromise()
                    .then(function (response) {
                    return {
                        canceled: false,
                        data: response,
                    };
                }).catch(function (reason) {
                    var errors = Commerce.ErrorHelper.toProxyErrors(reason, correlationId);
                    var inventoryError = Commerce.ErrorHelper.getError(errors, Commerce.Inventory.InventoryDocumentLockedByOtherTerminalError);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(inventoryError)) {
                        var exception = inventoryError.commerceException;
                        var updateTerminalRequest = new Commerce.Inventory.UpdateInventoryDocumentWorkingTerminalClientRequest(correlationId, document, exception.WorkingTerminalId);
                        return Commerce.Runtime.executeAsync(updateTerminalRequest)
                            .then(function (response) {
                            if (!response.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(response.data.result)) {
                                return _this._updateDocumentAsync(correlationId, shipDate, receiveDate, response.data.result);
                            }
                            return {
                                canceled: true,
                                data: null,
                            };
                        }).catch(function (updateTerminalErrors) {
                            Commerce.NotificationHandler.displayClientErrors(updateTerminalErrors);
                            return Promise.reject(updateTerminalErrors);
                        });
                    }
                    Commerce.NotificationHandler.displayClientErrors(errors);
                    return Promise.reject(errors);
                });
            };
            CreateOrUpdateInventoryDocumentHeaderDialogViewModel.prototype._convertDateToUtcFormat = function (localDate) {
                return new Date(Date.UTC(localDate.getFullYear(), localDate.getMonth(), localDate.getDate()));
            };
            return CreateOrUpdateInventoryDocumentHeaderDialogViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.CreateOrUpdateInventoryDocumentHeaderDialogViewModel = CreateOrUpdateInventoryDocumentHeaderDialogViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var GetInventoryDocumentSearchCriteriaCommand = (function (_super) {
            __extends(GetInventoryDocumentSearchCriteriaCommand, _super);
            function GetInventoryDocumentSearchCriteriaCommand(context) {
                var _this = _super.call(this, context, "performInventoryDocumentSearch", ViewModels.Icons.Filter, "string_935") || this;
                _this.context.messageChannel.addMessageHandler("SwitchDocumentState", function (data) {
                    _this._updateFilterStatus(data);
                });
                _this.setIsVisible(true);
                _this.setCanExecute(true);
                return _this;
            }
            GetInventoryDocumentSearchCriteriaCommand.prototype.execute = function (args) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._inventoryDocumentSearchCriteria)) {
                    this._inventoryDocumentSearchCriteria = {};
                }
                var refiners = Commerce.InventoryDocumentSearchCriteriaConverter.getRefiners(this._inventoryDocumentSearchCriteria);
                var getRefinerValuesRequest = new Commerce.Refiners.GetRefinerValuesClientRequest(refiners, "string_12630", false, Commerce.ErrorTypeEnum.INVALID_SEARCH_CRITERIA, args.correlationId);
                return this.context.runtime.executeAsync(getRefinerValuesRequest)
                    .then(function (result) {
                    if (!result.canceled) {
                        _this._inventoryDocumentSearchCriteria
                            = Commerce.InventoryDocumentSearchCriteriaConverter.getInventoryDocumentSearchCriteria(result.data.refiners);
                        _this.context.messageChannel.sendMessage("UpdateDocumentSearchCriteria", _this._inventoryDocumentSearchCriteria);
                    }
                });
            };
            GetInventoryDocumentSearchCriteriaCommand.prototype.init = function (data) {
                this._inventoryDocumentSearchCriteria = data.inventoryDocumentSearchCriteria;
                this.setIsVisible(true);
                this.setCanExecute(true);
            };
            GetInventoryDocumentSearchCriteriaCommand.prototype._updateFilterStatus = function (mode) {
                this.setCanExecute(mode !== Commerce.Proxy.Entities.InventoryInboundOutboundDocumentState.Draft);
            };
            return GetInventoryDocumentSearchCriteriaCommand;
        }(ViewModels.Command));
        ViewModels.GetInventoryDocumentSearchCriteriaCommand = GetInventoryDocumentSearchCriteriaCommand;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var InventoryDocumentCreationViewModel = (function (_super) {
            __extends(InventoryDocumentCreationViewModel, _super);
            function InventoryDocumentCreationViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                _this.defaultPageSize = 80;
                _this._validateOptions(options);
                _this._fullOrderLineIndexes = new Commerce.Dictionary();
                _this._fullOrderLineCache = [];
                _this._selectFullOrderLinesCallback = options.selectFullOrderLinesCallback;
                _this._initialSelectedProduct = options.selectedProduct;
                _this._initialCorrelationIdForSelectedProduct = options.correlationIdForSelectedProduct;
                _this._initialSelectedProductSearchText = options.selectedProductSearchText;
                _this._productDataCache = new Commerce.Dictionary();
                _this._getProductDataRequests = new Commerce.Dictionary();
                _this.document = ko.observable(options.document);
                _this.isPhoneDetailVisible = ko.observable(false);
                _this.isDetailsPaneVisible = ko.observable(true);
                _this.reloadFullOrderListCallback = ko.observable(function () { return null; });
                _this.updateFullOrderLineCallback = ko.observable(function () { return null; });
                _this.selectedLines = ko.observable([]);
                _this.totalLines = ko.observable(0);
                _this.totalQuantity = ko.observable(0);
                _this.isReceivingOperation = ko.computed(function () {
                    return _this.document().Receiver === Commerce.ApplicationContext.Instance.channelConfiguration.InventLocation;
                });
                _this.fullOrderListHeader = ko.computed(function () {
                    var formatString = _this.context.stringResourceManager.getString("string_12714");
                    var draftString = _this.context.stringResourceManager.getString("string_12608");
                    return Commerce.StringExtensions.format(formatString, _this.document().DocumentId, draftString);
                });
                _this.dataListColumns = ko.computed(function () { return _this._getDataListColumns(); });
                _this.hasSelectedLine = ko.computed(function () { return _this.selectedLines().length > 0; });
                _this.singleSelectedLine = ko.computed(function () {
                    if (_this.selectedLines().length === 1) {
                        return _this.selectedLines()[0];
                    }
                    return null;
                });
                _this.singleSelectedLineProductDimensionsDescription = ko.computed(function () {
                    if (_this.selectedLines().length === 1) {
                        return Commerce.SimpleProductHelper.getProductDimensionsDescription(_this.selectedLines()[0].product.Dimensions);
                    }
                    return Commerce.StringExtensions.EMPTY;
                });
                _this.isSingleSelectedLineNoteEmpty = ko.computed(function () {
                    if (_this.selectedLines().length === 1) {
                        return Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedLines()[0].Note) || Commerce.StringExtensions.isEmpty(_this.selectedLines()[0].Note);
                    }
                    return false;
                });
                _this.isSingleSelectedLineLocationActive = ko.computed(function () {
                    if (_this.selectedLines().length === 1) {
                        return _this.selectedLines()[0].product.Behavior.IsStorageDimensionGroupLocationActive;
                    }
                    return false;
                });
                _this.hasLines = ko.computed(function () { return _this.totalLines() > 0; });
                _this.isSingleSelectedLineWmsLocationIdEmpty = ko.computed(function () {
                    if (_this.selectedLines().length === 1) {
                        return Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedLines()[0].LocationId)
                            || Commerce.StringExtensions.isEmpty(_this.selectedLines()[0].LocationId);
                    }
                    return false;
                });
                _this._productLastLocationById = new Commerce.Dictionary();
                for (var _i = 0, _a = _this.selectedLines(); _i < _a.length; _i++) {
                    var line = _a[_i];
                    _this._productLastLocationById.setItem(line.ProductId, line.LocationId);
                }
                return _this;
            }
            InventoryDocumentCreationViewModel.prototype.loadAsync = function () {
                var _this = this;
                this._updateTotalLinesAndQuantityAsync();
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._initialSelectedProduct)) {
                    return Commerce.AsyncResult.fromPromise(this._keyInProductWithLocationAndQuantityAsync(this._initialCorrelationIdForSelectedProduct, this._initialSelectedProduct, this._initialSelectedProductSearchText)
                        .then(function () {
                        _this._initialSelectedProduct = null;
                        _this._initialCorrelationIdForSelectedProduct = Commerce.StringExtensions.EMPTY;
                        _this._initialSelectedProductSearchText = Commerce.StringExtensions.EMPTY;
                    }).catch(this._handleAsyncOperationRejection));
                }
                return Commerce.VoidAsyncResult.createResolved();
            };
            InventoryDocumentCreationViewModel.prototype.onShowHeaderAsync = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var showHeaderRequest = new Commerce.Inventory.CreateOrUpdateInventoryDocumentHeaderClientRequest(correlationId, this.isReceivingOperation(), this.document());
                return this.context.runtime.executeAsync(showHeaderRequest).then(function (response) {
                    if (!response.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(response.data.result)) {
                        _this.document(response.data.result);
                        return { canceled: false, data: null };
                    }
                    return { canceled: true, data: null };
                }).catch(this._handleAsyncOperationRejection);
            };
            InventoryDocumentCreationViewModel.prototype.onDeleteLineAsync = function () {
                var _this = this;
                if (this.selectedLines().length === 1) {
                    var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                    var deleteRequest = new Commerce.Inventory.DeleteInventoryDocumentLineClientRequest(correlationId, this.document(), this.selectedLines()[0]);
                    return this.context.runtime.executeAsync(deleteRequest).then(function (response) {
                        if (!response.canceled) {
                            _this.reloadFullOrderListCallback()();
                            _this.selectedLines([]);
                            _this._selectFullOrderLinesCallback([]);
                            _this.isPhoneDetailVisible(false);
                            return { canceled: false, data: null };
                        }
                        return { canceled: true, data: null };
                    }).then(function (response) {
                        if (!response.canceled) {
                            return _this._updateTotalLinesAndQuantityAsync();
                        }
                        return { canceled: true, data: null };
                    }).catch(this._handleAsyncOperationRejection);
                }
                return Promise.resolve({ canceled: true, data: null });
            };
            InventoryDocumentCreationViewModel.prototype.onSaveLinesAsync = function () {
                return this._updateTotalLinesAndQuantityAsync().catch(this._handleAsyncOperationRejection);
            };
            InventoryDocumentCreationViewModel.prototype.onSubmitLinesAsync = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var commitRequest = new Commerce.Inventory.CommitInventoryDocumentClientRequest(correlationId, this.document());
                return this.context.runtime.executeAsync(commitRequest)
                    .then(function (response) {
                    if (!response.canceled) {
                        _this.document(response.data.result);
                        var feedbackRequest = new Commerce.Inventory.ShowInventoryDocumentAsyncFeedbackClientRequest(correlationId, response.data.result, Commerce.Client.Entities.InventoryDocumentAsyncFeedbackActionType.Commit);
                        return _this.context.runtime.executeAsync(feedbackRequest);
                    }
                    return { canceled: true, data: null };
                }).then(function (response) {
                    if (!response.canceled) {
                        _this._navigateToInventoryDocumentListPage();
                        return { canceled: false, data: null };
                    }
                    return { canceled: true, data: null };
                }).catch(this._handleAsyncOperationRejection);
            };
            InventoryDocumentCreationViewModel.prototype.onKeyInProductAsync = function () {
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                return this._keyInProductWithLocationAndQuantityAsync(correlationId, null, Commerce.StringExtensions.EMPTY)
                    .then(function (response) { return ({ canceled: response.canceled, data: null }); })
                    .catch(this._handleAsyncOperationRejection);
            };
            InventoryDocumentCreationViewModel.prototype.onNavigateBack = function () {
                if (Commerce.Config.isPhone && this.isPhoneDetailVisible()) {
                    this.isPhoneDetailVisible(false);
                    return false;
                }
                return true;
            };
            InventoryDocumentCreationViewModel.prototype.onScanProductAsync = function (barcode) {
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                return this._scanProductWithQuantityAndLocationAsync(correlationId, barcode)
                    .then(function (response) { return ({ canceled: response.canceled, data: null }); })
                    .catch(this._handleAsyncOperationRejection);
            };
            InventoryDocumentCreationViewModel.prototype.getFullOrderLinesAsync = function (pageSize, skip) {
                var _this = this;
                var criteria = { WorkDocumentId: this.document().WorkDocumentId };
                var asyncQueue = new Commerce.AsyncQueue();
                var originalLines;
                asyncQueue
                    .enqueue(function () {
                    return _this.inventoryManager.searchInventoryDocumentLinesAsync(criteria, pageSize, skip)
                        .done(function (result) {
                        originalLines = result;
                    });
                }).enqueue(function (result) {
                    var productIds = result.map(function (elem) { return elem.ProductId; });
                    return Commerce.AsyncResult.fromPromise(_this._getProductsByIdsAsync(productIds));
                }).enqueue(function (products) {
                    var lines = originalLines.map(function (elem, index) {
                        return new Commerce.Client.Entities.InventoryInboundOutboundDocumentLineWithProduct(elem, products[index]);
                    });
                    if (skip === 0) {
                        _this._fullOrderLineIndexes.clear();
                        _this._fullOrderLineCache = [];
                    }
                    lines.forEach(function (value, index) {
                        _this._fullOrderLineIndexes.setItem(value.LineId, index + skip);
                        _this._fullOrderLineCache.push(value);
                    });
                    return Commerce.AsyncResult.createResolved(lines);
                });
                return this._isBusyUntil(asyncQueue.run())
                    .map(function (result) { return result.data; })
                    .fail(this._handleAsyncOperationRejection);
            };
            InventoryDocumentCreationViewModel.prototype.onFullOrderListSelectionChanged = function (lines) {
                this.selectedLines(lines);
                this.isPhoneDetailVisible(lines.length === 1);
            };
            InventoryDocumentCreationViewModel.prototype.onToggleDetailsPane = function () {
                this.isDetailsPaneVisible(!this.isDetailsPaneVisible());
            };
            InventoryDocumentCreationViewModel.prototype.onUpdateLineQuantityAsync = function () {
                var _this = this;
                if (this.selectedLines().length === 1) {
                    var correlationId_4 = Commerce.LoggerHelper.getNewCorrelationId();
                    var line_1 = this.selectedLines()[0];
                    return this._startWorkingAsync(correlationId_4)
                        .then(function (response) {
                        if (!response.canceled) {
                            return _this._editLineQuantityAsync(_this._createEditLineOptions(correlationId_4, line_1));
                        }
                        return { canceled: true, data: null };
                    }).then(function (response) {
                        if (!response.canceled) {
                            return _this._submitUpdatedLineToServerAsync(response.data);
                        }
                        return { canceled: true, data: null };
                    }).then(function (response) {
                        if (!response.canceled) {
                            return _this._updateTotalLinesAndQuantityAsync();
                        }
                        return { canceled: true, data: null };
                    }).catch(this._handleAsyncOperationRejection);
                }
                return Promise.resolve({ canceled: true, data: null });
            };
            InventoryDocumentCreationViewModel.prototype.onUpdateLineLocationAsync = function () {
                var _this = this;
                if (this.selectedLines().length === 1) {
                    var correlationId_5 = Commerce.LoggerHelper.getNewCorrelationId();
                    var line_2 = this.selectedLines()[0];
                    return this._startWorkingAsync(correlationId_5)
                        .then(function (response) {
                        if (!response.canceled) {
                            return _this._editLineLocationAsync(_this._createEditLineOptions(correlationId_5, line_2));
                        }
                        return { canceled: true, data: null };
                    }).then(function (response) {
                        if (!response.canceled) {
                            return _this._submitUpdatedLineToServerAsync(response.data);
                        }
                        return { canceled: true, data: null };
                    }).catch(this._handleAsyncOperationRejection);
                }
                return Promise.resolve({ canceled: true, data: null });
            };
            InventoryDocumentCreationViewModel.prototype.onUpdateLineNoteAsync = function () {
                var _this = this;
                if (this.selectedLines().length === 1) {
                    var correlationId_6 = Commerce.LoggerHelper.getNewCorrelationId();
                    var line_3 = this.selectedLines()[0];
                    return this._startWorkingAsync(correlationId_6)
                        .then(function (response) {
                        if (!response.canceled) {
                            return _this._editLineNoteAsync(_this._createEditLineOptions(correlationId_6, line_3));
                        }
                        return { canceled: true, data: null };
                    }).then(function (response) {
                        if (!response.canceled) {
                            return _this._submitUpdatedLineToServerAsync(response.data);
                        }
                        return { canceled: true, data: null };
                    }).catch(this._handleAsyncOperationRejection);
                }
                return Promise.resolve({ canceled: true, data: null });
            };
            InventoryDocumentCreationViewModel.prototype._handleAsyncOperationRejection = function (error) {
                if (error instanceof Commerce.Proxy.Entities.Error) {
                    Commerce.NotificationHandler.displayClientErrors([error]);
                    return Promise.reject([error]);
                }
                else if (error instanceof Array) {
                    Commerce.NotificationHandler.displayClientErrors(error);
                }
                else if (!Commerce.ObjectExtensions.isNullOrUndefined(error)) {
                    setTimeout(function () {
                        throw error;
                    });
                }
                return Promise.reject(error);
            };
            InventoryDocumentCreationViewModel.prototype._validateOptions = function (options) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw Error("'options' is required for InventoryDocumentCreationViewModel");
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.document)) {
                    throw Error("'options.document' is required for InventoryDocumentCreationViewModel");
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.selectFullOrderLinesCallback)) {
                    throw Error("'options.selectFullOrderLinesCallback' is required for InventoryDocumentCreationViewModel");
                }
                var hasInitialSelectedProduct = !Commerce.ObjectExtensions.isNullOrUndefined(options.selectedProduct);
                var hasInitialCorrelationIdForSelectedProduct = !Commerce.StringExtensions.isNullOrWhitespace(options.correlationIdForSelectedProduct);
                if (hasInitialSelectedProduct !== hasInitialCorrelationIdForSelectedProduct) {
                    throw Error("Both 'options.selectedProduct' and 'options.correlationIdForSelectedProduct' should be provided or none at all.");
                }
            };
            InventoryDocumentCreationViewModel.prototype._getDataListColumns = function () {
                var _this = this;
                if (this.isReceivingOperation()) {
                    return [
                        {
                            titleResx: "string_12413",
                            ratio: 30,
                            minWidth: 150,
                            collapseOrder: 3,
                            computeValue: function (row) { return row.product.ItemId; },
                            converter: "Commerce.Core.Converter.textContentFormatter",
                        },
                        {
                            titleResx: "string_12414",
                            ratio: 40,
                            minWidth: 280,
                            collapseOrder: 1,
                            computeValue: function (row) {
                                if (Commerce.ArrayExtensions.hasElements(row.product.Dimensions)) {
                                    var formatString = _this.context.stringResourceManager.getString("string_4385");
                                    return Commerce.StringExtensions.format(formatString, row.product.Name, Commerce.SimpleProductHelper.getProductDimensionsDescription(row.product.Dimensions));
                                }
                                return row.product.Name;
                            },
                            converter: "Commerce.Core.Converter.textContentFormatter",
                        },
                        {
                            titleResx: "string_12701",
                            ratio: 30,
                            minWidth: 120,
                            collapseOrder: 2,
                            field: "QuantityToUpdate",
                            isRightAligned: true
                        },
                    ];
                }
                return [
                    {
                        titleResx: "string_12413",
                        ratio: 20,
                        minWidth: 150,
                        collapseOrder: 4,
                        computeValue: function (row) { return row.product.ItemId; },
                        converter: "Commerce.Core.Converter.textContentFormatter",
                    },
                    {
                        titleResx: "string_12414",
                        ratio: 40,
                        minWidth: 280,
                        collapseOrder: 1,
                        computeValue: function (row) {
                            if (Commerce.ArrayExtensions.hasElements(row.product.Dimensions)) {
                                var formatString = _this.context.stringResourceManager.getString("string_4385");
                                return Commerce.StringExtensions.format(formatString, row.product.Name, Commerce.SimpleProductHelper.getProductDimensionsDescription(row.product.Dimensions));
                            }
                            return row.product.Name;
                        },
                        converter: "Commerce.Core.Converter.textContentFormatter",
                    },
                    {
                        titleResx: "string_12415",
                        ratio: 20,
                        minWidth: 150,
                        collapseOrder: 2,
                        field: "LocationId",
                        converter: "Commerce.Core.Converter.textContentFormatter",
                    },
                    {
                        titleResx: "string_12701",
                        ratio: 20,
                        minWidth: 120,
                        collapseOrder: 3,
                        field: "QuantityToUpdate",
                        isRightAligned: true
                    },
                ];
            };
            InventoryDocumentCreationViewModel.prototype._keyInProductWithLocationAndQuantityAsync = function (correlationId, selectedProduct, searchText) {
                var _this = this;
                var clientRequest = new Commerce.Inventory.GetInventoryDocumentProductWithLocationAndQuantityClientRequest(correlationId, this.document(), false, searchText, selectedProduct, undefined, this._productLastLocationById);
                return this.context.runtime.executeAsync(clientRequest)
                    .then(function (response) {
                    if (!response.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(response.data.result)) {
                        if (response.data.result.product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.KitMaster) {
                            _this._navigateToSimpleProductDetailsPage(correlationId, response.data.result.product, searchText);
                            return { canceled: true, data: null };
                        }
                        _this._productLastLocationById.setItem(response.data.result.product.RecordId, response.data.result.wmsLocationId);
                        return _this._updateLinesByProductFromKeyInOrScanningAsync(correlationId, response.data.result.product.RecordId, response.data.result.wmsLocationId, response.data.result.quantity);
                    }
                    return { canceled: true, data: null };
                }).then(function (response) {
                    if (!response.canceled) {
                        return _this._updateTotalLinesAndQuantityAsync();
                    }
                    return { canceled: true, data: null };
                }).then(function (response) {
                    if (!response.canceled) {
                        return _this._keyInProductWithLocationAndQuantityAsync(correlationId, null, Commerce.StringExtensions.EMPTY);
                    }
                    return { canceled: true, data: null };
                });
            };
            InventoryDocumentCreationViewModel.prototype._scanProductWithQuantityAndLocationAsync = function (correlationId, barcode) {
                var _this = this;
                var clientRequest = new Commerce.Inventory.GetInventoryDocumentProductWithLocationAndQuantityClientRequest(correlationId, this.document(), true, barcode, undefined, undefined, this._productLastLocationById);
                return this.context.runtime.executeAsync(clientRequest)
                    .then(function (response) {
                    if (!response.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(response.data.result)) {
                        if (response.data.result.product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.KitMaster) {
                            _this._navigateToSimpleProductDetailsPage(correlationId, response.data.result.product, barcode);
                            return { canceled: true, data: null };
                        }
                        _this._productLastLocationById.setItem(response.data.result.product.RecordId, response.data.result.wmsLocationId);
                        return _this._updateLinesByProductFromKeyInOrScanningAsync(correlationId, response.data.result.product.RecordId, response.data.result.wmsLocationId, response.data.result.quantity);
                    }
                    return { canceled: true, data: null };
                }).then(function (response) {
                    if (!response.canceled) {
                        return _this._updateTotalLinesAndQuantityAsync();
                    }
                    return { canceled: true, data: null };
                });
            };
            InventoryDocumentCreationViewModel.prototype._navigateToSimpleProductDetailsPage = function (correlationId, product, searchText) {
                var _this = this;
                var productSelectionHandler = new Commerce.CancelableSelectionHandler(function (selectionResult) {
                    var returnOptions = {
                        document: _this.document(),
                        selectedProduct: selectionResult.simpleProduct,
                        correlationIdForSelectedProduct: correlationId,
                        selectedProductSearchText: searchText,
                        selectFullOrderLinesCallback: _this._selectFullOrderLinesCallback,
                    };
                    Commerce.ViewModelAdapter.collapseAndNavigate("InventoryDocumentCreationView", returnOptions);
                }, function () {
                    Commerce.ViewModelAdapter.collapse("InventoryDocumentCreationView");
                });
                var simpleProductDetailsViewModelOptions = {
                    productId: product.RecordId,
                    product: undefined,
                    isSelectionMode: true,
                    selectionOptions: {
                        productSelectionHandler: productSelectionHandler
                    },
                    correlationId: Commerce.StringExtensions.EMPTY
                };
                Commerce.ViewModelAdapter.navigate("SimpleProductDetailsView", simpleProductDetailsViewModelOptions);
            };
            InventoryDocumentCreationViewModel.prototype._updateLinesByProductFromKeyInOrScanningAsync = function (correlationId, productId, wmsLocationId, quantity) {
                var _this = this;
                return this._startWorkingAsync(correlationId)
                    .then(function (response) {
                    if (!response.canceled) {
                        var newLine = {
                            WorkDocumentId: _this.document().WorkDocumentId,
                            QuantityToUpdate: quantity,
                            LocationId: wmsLocationId,
                            ProductId: productId,
                        };
                        return _this.inventoryManager.addInventoryDocumentLineAsync(_this.document().WorkDocumentId, newLine).getPromise()
                            .then(function (result) {
                            return { canceled: false, data: result };
                        });
                    }
                    return { canceled: true, data: null };
                }).then(function (response) {
                    if (!response.canceled) {
                        _this.reloadFullOrderListCallback()();
                        return { canceled: false, data: null };
                    }
                    return { canceled: true, data: null };
                }).catch(function (errors) { return _this._exitOrPromptToUpdateWorkingTerminalAsync(correlationId, errors)
                    .then(function (response) {
                    if (!response.canceled) {
                        return _this._updateLinesByProductFromKeyInOrScanningAsync(correlationId, productId, wmsLocationId, quantity);
                    }
                    return { canceled: true, data: null };
                }); });
            };
            InventoryDocumentCreationViewModel.prototype._updateLocalLines = function (resultLines) {
                var _this = this;
                resultLines.forEach(function (line) {
                    var key = line.LineId;
                    if (_this._fullOrderLineIndexes.hasItem(key)) {
                        _this.updateFullOrderLineCallback()(_this._fullOrderLineIndexes.getItem(key), line);
                    }
                    if (_this.selectedLines().length === 1 && _this.selectedLines()[0].LineId === line.LineId) {
                        _this._selectFullOrderLinesCallback([line]);
                    }
                });
            };
            InventoryDocumentCreationViewModel.prototype._startWorkingAsync = function (correlationId) {
                var _this = this;
                var startRequest = new Commerce.Inventory.StartInventoryDocumentClientRequest(correlationId, this.document());
                return this._isBusyUntil(Commerce.AsyncResult.fromPromise(this.context.runtime.executeAsync(startRequest).then(function (response) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(response.data.result)) {
                        _this.document(response.data.result);
                        return { canceled: false, data: null };
                    }
                    return { canceled: true, data: null };
                }))).getPromise();
            };
            InventoryDocumentCreationViewModel.prototype._exitOrPromptToUpdateWorkingTerminalAsync = function (correlationId, errors) {
                var _this = this;
                var documentLockedError = Commerce.ErrorHelper.getError(errors, Commerce.Inventory.InventoryDocumentLockedByOtherTerminalError);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(documentLockedError)) {
                    var exception = documentLockedError.commerceException;
                    var request = new Commerce.Inventory.UpdateInventoryDocumentWorkingTerminalClientRequest(correlationId, this.document(), exception.WorkingTerminalId);
                    return this.context.runtime.executeAsync(request)
                        .then(function (response) {
                        if (!response.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(response.data.result)) {
                            _this.document(response.data.result);
                            return { canceled: false, data: null };
                        }
                        return { canceled: true, data: null };
                    });
                }
                return Promise.reject(errors);
            };
            InventoryDocumentCreationViewModel.prototype._navigateToInventoryDocumentListPage = function () {
                Commerce.ViewModelAdapter.navigateBack();
            };
            InventoryDocumentCreationViewModel.prototype._updateTotalLinesAndQuantityAsync = function () {
                var _this = this;
                return this.inventoryManager.getInventoryDocumentLinesSummaryAsync(this.document().WorkDocumentId).getPromise()
                    .then(function (response) {
                    _this.totalLines(response.TotalLineNumber);
                    _this.totalQuantity(response.InProgressQuantity);
                    return { canceled: false, data: null };
                });
            };
            InventoryDocumentCreationViewModel.prototype._createEditLineOptions = function (correlationId, line) {
                return {
                    line: line,
                    correlationId: correlationId,
                    result: {
                        quantity: null,
                        wmsLocationId: null,
                        note: null,
                    }
                };
            };
            InventoryDocumentCreationViewModel.prototype._editLineQuantityAsync = function (editOptionsAndResult) {
                var request = new Commerce.Inventory.GetInventoryDocumentLineQuantityClientRequest(editOptionsAndResult.correlationId, this.document(), Commerce.ObjectExtensions.isNumber(editOptionsAndResult.result.quantity) ?
                    editOptionsAndResult.result.quantity : editOptionsAndResult.line.QuantityToUpdate);
                return this.context.runtime.executeAsync(request).then(function (response) {
                    if (!response.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(response.data.result)) {
                        editOptionsAndResult.result.quantity = response.data.result;
                        return { canceled: false, data: editOptionsAndResult };
                    }
                    return { canceled: true, data: null };
                });
            };
            InventoryDocumentCreationViewModel.prototype._editLineLocationAsync = function (editOptionsAndResult) {
                var _this = this;
                return Commerce.ApplicationContext.Instance.warehouseAsync.value.getPromise().then(function (warehouse) {
                    var predefinedLocations = [];
                    var allowBlankLocation = (_this.isReceivingOperation() && editOptionsAndResult.line.product.Behavior.IsStorageDimensionGroupLocationAllowBlankReceiptEnabled)
                        || (!_this.isReceivingOperation() && editOptionsAndResult.line.product.Behavior.IsStorageDimensionGroupLocationBlankIssueAllowed);
                    if (allowBlankLocation) {
                        predefinedLocations.push(Commerce.StringExtensions.EMPTY);
                    }
                    var request = new Commerce.Inventory.SelectInventoryDocumentLineWarehouseLocationClientRequest(editOptionsAndResult.correlationId, warehouse.IsWMSEnabled, predefinedLocations, editOptionsAndResult.line.LocationId);
                    return _this.context.runtime.executeAsync(request).then(function (response) {
                        if (!response.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(response.data.result)) {
                            editOptionsAndResult.result.wmsLocationId = response.data.result.LocationId;
                            _this._productLastLocationById.setItem(editOptionsAndResult.line.ProductId, response.data.result.LocationId);
                            return { canceled: false, data: editOptionsAndResult };
                        }
                        return { canceled: true, data: null };
                    });
                });
            };
            InventoryDocumentCreationViewModel.prototype._editLineNoteAsync = function (editOptionsAndResult) {
                var showTextInputDialogClientRequest = new Commerce.ShowTextInputDialogClientRequest({
                    label: this.context.stringResourceManager.getString(Commerce.ObjectExtensions.isNullOrUndefined(editOptionsAndResult.line.Note) || Commerce.StringExtensions.isEmpty(editOptionsAndResult.line.Note)
                        ? "string_12441" : "string_12450"),
                    defaultText: editOptionsAndResult.line.Note,
                });
                return this.context.runtime.executeAsync(showTextInputDialogClientRequest).then(function (textInputResult) {
                    if (textInputResult.canceled) {
                        return { canceled: true, data: null };
                    }
                    else {
                        editOptionsAndResult.result.note = textInputResult.data.result.value;
                        return { canceled: false, data: editOptionsAndResult };
                    }
                });
            };
            InventoryDocumentCreationViewModel.prototype._submitUpdatedLineToServerAsync = function (editOptionsAndResult) {
                var _this = this;
                var line = new Commerce.Proxy.Entities.InventoryInboundOutboundDocumentLineClass(editOptionsAndResult.line);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(editOptionsAndResult.result.quantity)) {
                    line.QuantityToUpdate = editOptionsAndResult.result.quantity;
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(editOptionsAndResult.result.wmsLocationId)) {
                    line.LocationId = editOptionsAndResult.result.wmsLocationId;
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(editOptionsAndResult.result.note)) {
                    line.Note = editOptionsAndResult.result.note;
                }
                return this.inventoryManager.updateInventoryDocumentLineAsync(this.document().WorkDocumentId, line).getPromise()
                    .then(function (updatedLine) {
                    var updatedLineWithProduct = new Commerce.Client.Entities.InventoryInboundOutboundDocumentLineWithProduct(updatedLine, editOptionsAndResult.line.product);
                    _this._updateLocalLines([updatedLineWithProduct]);
                    return { canceled: false, data: editOptionsAndResult };
                }).catch(function (errors) {
                    return _this._exitOrPromptToUpdateWorkingTerminalAsync(editOptionsAndResult.correlationId, errors).then(function (response) {
                        if (!response.canceled) {
                            return _this._submitUpdatedLineToServerAsync(editOptionsAndResult);
                        }
                        return { canceled: true, data: null };
                    });
                });
            };
            InventoryDocumentCreationViewModel.prototype._getProductsByIdsAsync = function (productIds) {
                var _this = this;
                if (!Commerce.ArrayExtensions.hasElements(productIds)) {
                    return Promise.resolve([]);
                }
                var returnProductRequests = [];
                var productIdsToQuery = [];
                var productIdsToQueryDict = new Commerce.Dictionary();
                productIds.forEach(function (productId, index) {
                    if (_this._productDataCache.hasItem(productId)) {
                        returnProductRequests[index] = Promise.resolve(_this._productDataCache.getItem(productId));
                    }
                    else if (_this._getProductDataRequests.hasItem(productId)) {
                        returnProductRequests[index] = _this._getProductDataRequests.getItem(productId);
                    }
                    else {
                        productIdsToQuery.push(productId);
                        productIdsToQueryDict.setItem(productId, true);
                    }
                });
                if (Commerce.ArrayExtensions.hasElements(productIdsToQuery)) {
                    var productManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IProductManagerName);
                    var getByIdsAsync_1 = productManager.getByIdsAsync(productIdsToQuery, 0).getPromise();
                    productIds.forEach(function (productId, index) {
                        if (productIdsToQueryDict.hasItem(productId)) {
                            returnProductRequests[index] = getByIdsAsync_1.then(function (result) {
                                var foundProduct = Commerce.ArrayExtensions.firstOrUndefined(result, function (elem) { return elem.RecordId === productId; });
                                if (!Commerce.ObjectExtensions.isNullOrUndefined(foundProduct)) {
                                    _this._productDataCache.setItem(productId, foundProduct);
                                    _this._getProductDataRequests.removeItem(productId);
                                    return Promise.resolve(foundProduct);
                                }
                                else {
                                    var productNotFoundError = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PRODUCT_DETAILS_NOT_FOUND_ERROR_MESSAGE);
                                    return Promise.reject(productNotFoundError);
                                }
                            }).catch(function (errors) {
                                _this._getProductDataRequests.removeItem(productId);
                                return Promise.reject(errors);
                            });
                            _this._getProductDataRequests.setItem(productId, returnProductRequests[index]);
                        }
                    });
                }
                return Promise.all(returnProductRequests);
            };
            return InventoryDocumentCreationViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.InventoryDocumentCreationViewModel = InventoryDocumentCreationViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var InventoryDocumentHeaderViewModel = (function (_super) {
            __extends(InventoryDocumentHeaderViewModel, _super);
            function InventoryDocumentHeaderViewModel(context, document) {
                if (document === void 0) { document = null; }
                var _this = _super.call(this, context) || this;
                _this.document = ko.observable(document);
                _this.totalUpdateNowQuantity = ko.observable(0);
                _this.title = ko.observable(_this.context.stringResourceManager.getString("string_12636"));
                _this.isDocumentPaused = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.document()) && _this.document().StatusValue === Commerce.Proxy.Entities.InventoryDocumentStatus.Paused;
                });
                _this.isDocumentStartedWorking = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.document()) && !Commerce.StringExtensions.isNullOrWhitespace(_this.document().WorkDocumentId);
                });
                _this.quantityNotStarted = ko.computed(function () {
                    var quantity = 0;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.document())) {
                        var selectedSourceDocument = _this.document().SourceDocument;
                        if (_this.isInboundOperation()) {
                            quantity = selectedSourceDocument.TotalQuantityOrdered
                                - (selectedSourceDocument.TotalQuantityReceived + selectedSourceDocument.TotalQuantityCancelled + _this.totalUpdateNowQuantity());
                        }
                        else {
                            quantity = selectedSourceDocument.TotalQuantityOrdered
                                - (selectedSourceDocument.TotalQuantityShipped + selectedSourceDocument.TotalQuantityCancelled + _this.totalUpdateNowQuantity());
                        }
                    }
                    return Math.max(0, quantity);
                });
                _this.quantityDecimalPrecision = ko.computed(function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.document())) {
                        return Math.max(Commerce.NumberExtensions.getNumberOfDecimals(_this.document().SourceDocument.TotalQuantityOrdered), Commerce.NumberExtensions.getNumberOfDecimals(_this.document().SourceDocument.TotalQuantityShipped), Commerce.NumberExtensions.getNumberOfDecimals(_this.document().SourceDocument.TotalQuantityReceived), Commerce.NumberExtensions.getNumberOfDecimals(_this.totalUpdateNowQuantity()));
                    }
                    return 0;
                });
                _this.deliveryMode = ko.computed(function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.document())) {
                        var mode = _this.document().SourceDocument.DeliveryMode;
                        if (Commerce.ApplicationContext.Instance.deliveryOptionsMap.hasItem(mode)) {
                            return Commerce.ApplicationContext.Instance.deliveryOptionsMap.getItem(mode).Description;
                        }
                    }
                    return Commerce.StringExtensions.EMPTY;
                });
                _this.hasNote = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.document()) &&
                        !Commerce.ObjectExtensions.isNullOrUndefined(_this.document().Note) &&
                        !Commerce.StringExtensions.isEmpty(_this.document().Note);
                });
                _this.isPurchaseOrder = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.document()) &&
                        _this.document().SourceDocument.DocumentTypeValue === Commerce.Proxy.Entities.InventorySourceDocumentType.PurchaseOrder;
                });
                _this.isInboundOperation = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.document()) &&
                        (_this.document().OperationTypeValue === Commerce.Proxy.Entities.InventoryInboundOutboundDocumentOperationType.ReceivePurchaseOrder
                            || _this.document().OperationTypeValue === Commerce.Proxy.Entities.InventoryInboundOutboundDocumentOperationType.ReceiveTransferOrder);
                });
                _this.isDocumentCompleted = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.document()) &&
                        (_this.document().SourceDocument.StatusValue === Commerce.Proxy.Entities.InventoryInboundOutboundSourceDocumentStatus.Cancelled
                            || _this.document().SourceDocument.StatusValue === Commerce.Proxy.Entities.InventoryInboundOutboundSourceDocumentStatus.Received
                            || (_this.document().SourceDocument.StatusValue === Commerce.Proxy.Entities.InventoryInboundOutboundSourceDocumentStatus.Shipped
                                && _this.document().SourceDocument.Sender === Commerce.ApplicationContext.Instance.channelConfiguration.InventLocation));
                });
                return _this;
            }
            InventoryDocumentHeaderViewModel.prototype.load = function (document, totalUpdateNowQuantity) {
                this.document(document);
                this.totalUpdateNowQuantity(totalUpdateNowQuantity);
            };
            InventoryDocumentHeaderViewModel.prototype.onUpdateNoteAsync = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                return this._isBusyUntil(Commerce.AsyncResult.fromPromise(this._startWorkingAsync(correlationId))).getPromise()
                    .then(function () { return _this._editNoteAsync()
                    .then(function (response) {
                    if (!response.canceled) {
                        return _this._submitUpdatedDocumentToServerAsync(correlationId, response.data);
                    }
                    return { canceled: true, data: null };
                }); }).catch(this._handleOperationRejectionAsync);
            };
            InventoryDocumentHeaderViewModel.prototype._editNoteAsync = function () {
                var showTextInputDialogClientRequest = new Commerce.ShowTextInputDialogClientRequest({
                    label: this.context.stringResourceManager.getString(this.hasNote() ? "string_12450" : "string_12441"),
                    defaultText: this.document().Note,
                });
                return this.context.runtime.executeAsync(showTextInputDialogClientRequest).then(function (result) {
                    if (result.canceled) {
                        return { canceled: true, data: null };
                    }
                    return { canceled: false, data: result.data.result.value };
                });
            };
            InventoryDocumentHeaderViewModel.prototype._exitOrPromptToUpdateWorkingTerminalAsync = function (correlationId, errors) {
                var _this = this;
                var documentLockedError = Commerce.ErrorHelper.getError(errors, Commerce.Inventory.InventoryDocumentLockedByOtherTerminalError);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(documentLockedError)) {
                    var exception = documentLockedError.commerceException;
                    return this.context.runtime.executeAsync(new Commerce.Inventory.UpdateInventoryDocumentWorkingTerminalClientRequest(correlationId, this.document(), exception.WorkingTerminalId))
                        .then(function (response) {
                        if (!response.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(response.data.result)) {
                            _this.document(response.data.result);
                            return { canceled: false, data: null };
                        }
                        return { canceled: true, data: null };
                    });
                }
                return Promise.reject(errors);
            };
            InventoryDocumentHeaderViewModel.prototype._handleOperationRejectionAsync = function (error) {
                if (error instanceof Commerce.Proxy.Entities.Error) {
                    Commerce.NotificationHandler.displayClientErrors([error]);
                    return Promise.reject([error]);
                }
                else if (error instanceof Array) {
                    Commerce.NotificationHandler.displayClientErrors(error);
                }
                else if (!Commerce.ObjectExtensions.isNullOrUndefined(error)) {
                    setTimeout(function () {
                        throw error;
                    });
                }
                return Promise.reject(error);
            };
            InventoryDocumentHeaderViewModel.prototype._startWorkingAsync = function (correlationId) {
                var _this = this;
                var startRequest = new Commerce.Inventory.StartInventoryDocumentClientRequest(correlationId, this.document());
                return this._isBusyUntil(Commerce.AsyncResult.fromPromise(this.context.runtime.executeAsync(startRequest).then(function (response) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(response.data.result)) {
                        _this.document(response.data.result);
                        return { canceled: false, data: null };
                    }
                    return { canceled: true, data: null };
                }))).getPromise();
            };
            InventoryDocumentHeaderViewModel.prototype._submitUpdatedDocumentToServerAsync = function (correlationId, note) {
                var _this = this;
                return this.inventoryManager.updateInventoryDocumentNoteAsync(this.document().WorkDocumentId, note, this.document().LongVersion).getPromise()
                    .then(function (updatedDocument) {
                    _this.document(updatedDocument);
                    return { canceled: false, data: null };
                }).catch(function (errors) {
                    return _this._exitOrPromptToUpdateWorkingTerminalAsync(correlationId, errors).then(function (response) {
                        if (!response.canceled) {
                            return _this._submitUpdatedDocumentToServerAsync(correlationId, note);
                        }
                        return { canceled: true, data: null };
                    });
                });
            };
            return InventoryDocumentHeaderViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.InventoryDocumentHeaderViewModel = InventoryDocumentHeaderViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var InventoryDocumentListCreateHeaderCommand = (function (_super) {
            __extends(InventoryDocumentListCreateHeaderCommand, _super);
            function InventoryDocumentListCreateHeaderCommand(context) {
                var _this = _super.call(this, context, "InventoryDocumentListCreateHeaderCommand", ViewModels.Icons.Add, "string_12648") || this;
                _this.context.messageChannel.addMessageHandler("SetCreateInventoryDocumentHeaderData", function (data) {
                    _this._isInboundOperation = data.isInboundOperation;
                });
                _this.setIsVisible(true);
                _this.setCanExecute(true);
                return _this;
            }
            InventoryDocumentListCreateHeaderCommand.prototype.execute = function () {
                var _this = this;
                if (this.canExecute) {
                    var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                    var clientRequest = new Commerce.Inventory.CreateOrUpdateInventoryDocumentHeaderClientRequest(correlationId, this._isInboundOperation, null);
                    return this.context.runtime.executeAsync(clientRequest).then(function (response) {
                        if (!response.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(response.data.result)) {
                            Commerce.ViewModelAdapter.navigate("InventoryDocumentCreationView", { document: response.data.result });
                            _this.context.messageChannel.sendMessage("HidePhoneDetail", undefined);
                        }
                    });
                }
                return Promise.resolve();
            };
            InventoryDocumentListCreateHeaderCommand.prototype.init = function () {
                return;
            };
            return InventoryDocumentListCreateHeaderCommand;
        }(ViewModels.Command));
        ViewModels.InventoryDocumentListCreateHeaderCommand = InventoryDocumentListCreateHeaderCommand;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var InventoryDocumentListDeleteCommand = (function (_super) {
            __extends(InventoryDocumentListDeleteCommand, _super);
            function InventoryDocumentListDeleteCommand(context) {
                var _this = _super.call(this, context, "InventoryDocumentListDeleteCommand", ViewModels.Icons.Delete, "string_12647") || this;
                _this.context.messageChannel.addMessageHandler("DocumentSelected", function (data) {
                    _this._updateSelectedDocument(data.inventoryDocument);
                });
                _this.setIsVisible(true);
                _this.setCanExecute(false);
                return _this;
            }
            InventoryDocumentListDeleteCommand.prototype.execute = function () {
                var _this = this;
                if (this.canExecute) {
                    var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                    var clientRequest = new Commerce.Inventory.CancelInventoryDocumentClientRequest(correlationId, this._document);
                    return this.context.runtime.executeAsync(clientRequest).then(function (response) {
                        if (!response.canceled) {
                            _this.context.messageChannel.sendMessage("RefreshDocumentList", null);
                        }
                    });
                }
                return Promise.resolve();
            };
            InventoryDocumentListDeleteCommand.prototype.init = function () {
                return;
            };
            InventoryDocumentListDeleteCommand.prototype._updateSelectedDocument = function (document) {
                this._document = document;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._document)) {
                    this.setCanExecute(this._document.OperationTypeValue === Commerce.Proxy.Entities.InventoryInboundOutboundDocumentOperationType.CreateTransferOrder);
                }
                else {
                    this.setCanExecute(false);
                }
            };
            return InventoryDocumentListDeleteCommand;
        }(ViewModels.Command));
        ViewModels.InventoryDocumentListDeleteCommand = InventoryDocumentListDeleteCommand;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var InventoryDocumentListEditDraftDocumentCommand = (function (_super) {
            __extends(InventoryDocumentListEditDraftDocumentCommand, _super);
            function InventoryDocumentListEditDraftDocumentCommand(context) {
                var _this = _super.call(this, context, "InventoryDocumentListEditDraftDocumentCommand", ViewModels.Icons.Edit, "string_12450") || this;
                _this.context.messageChannel.addMessageHandler("DocumentSelected", function (data) {
                    _this._updateSelectedDocument(data.inventoryDocument);
                });
                _this.setIsVisible(true);
                _this.setCanExecute(false);
                return _this;
            }
            InventoryDocumentListEditDraftDocumentCommand.prototype.execute = function () {
                if (this.canExecute) {
                    Commerce.ViewModelAdapter.navigate("InventoryDocumentCreationView", { document: this._document });
                    this.context.messageChannel.sendMessage("HidePhoneDetail", undefined);
                }
                return Promise.resolve();
            };
            InventoryDocumentListEditDraftDocumentCommand.prototype.init = function () {
                return;
            };
            InventoryDocumentListEditDraftDocumentCommand.prototype._updateSelectedDocument = function (document) {
                this._document = document;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._document)) {
                    this.setCanExecute(this._document.OperationTypeValue === Commerce.Proxy.Entities.InventoryInboundOutboundDocumentOperationType.CreateTransferOrder);
                }
                else {
                    this.setCanExecute(false);
                }
            };
            return InventoryDocumentListEditDraftDocumentCommand;
        }(ViewModels.Command));
        ViewModels.InventoryDocumentListEditDraftDocumentCommand = InventoryDocumentListEditDraftDocumentCommand;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var InventoryDocumentListRefreshCommand = (function (_super) {
            __extends(InventoryDocumentListRefreshCommand, _super);
            function InventoryDocumentListRefreshCommand(context) {
                var _this = _super.call(this, context, "InventoryDocumentListRefreshCommand", ViewModels.Icons.Refresh, "string_12708") || this;
                _this.setIsVisible(true);
                _this.setCanExecute(true);
                return _this;
            }
            InventoryDocumentListRefreshCommand.prototype.execute = function () {
                this.context.messageChannel.sendMessage("RefreshDocumentList", null);
                return Promise.resolve();
            };
            InventoryDocumentListRefreshCommand.prototype.init = function () {
                return;
            };
            return InventoryDocumentListRefreshCommand;
        }(ViewModels.Command));
        ViewModels.InventoryDocumentListRefreshCommand = InventoryDocumentListRefreshCommand;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var InventoryDocumentListSetActionCommand = (function (_super) {
            __extends(InventoryDocumentListSetActionCommand, _super);
            function InventoryDocumentListSetActionCommand(context) {
                var _this = _super.call(this, context, "InventoryDocumentListSetActionCommand", ViewModels.Icons.SetAction, "string_4394") || this;
                _this._createHeaderAction = {
                    id: "createHeaderCommand",
                    label: _this.context.stringResourceManager.getString("string_12648"),
                    canExecute: true,
                };
                _this._navigateToCreationViewAction = {
                    id: "navigateToCreationViewCommand",
                    label: _this.context.stringResourceManager.getString("string_12450"),
                    canExecute: false,
                };
                _this._deleteAction = {
                    id: "deleteCommand",
                    label: _this.context.stringResourceManager.getString("string_12647"),
                    canExecute: false,
                };
                _this._contextualActions = [
                    _this._createHeaderAction,
                    _this._navigateToCreationViewAction,
                    _this._deleteAction,
                ];
                _this.context.messageChannel.addMessageHandler("SetCreateInventoryDocumentHeaderData", function (data) {
                    _this._isInboundOperation = data.isInboundOperation;
                });
                _this.context.messageChannel.addMessageHandler("DocumentSelected", function (data) {
                    _this._updateSelectedDocument(data.inventoryDocument);
                });
                _this.setIsVisible(true);
                _this.setCanExecute(true);
                return _this;
            }
            InventoryDocumentListSetActionCommand.prototype.execute = function (args) {
                var _this = this;
                switch (args.actionId) {
                    case this._createHeaderAction.id: {
                        var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                        var clientRequest = new Commerce.Inventory.CreateOrUpdateInventoryDocumentHeaderClientRequest(correlationId, this._isInboundOperation, null);
                        return this.context.runtime.executeAsync(clientRequest)
                            .then(function (response) {
                            if (!response.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(response.data.result)) {
                                Commerce.ViewModelAdapter.navigate("InventoryDocumentCreationView", { document: response.data.result });
                                _this.context.messageChannel.sendMessage("HidePhoneDetail", undefined);
                            }
                        });
                    }
                    case this._navigateToCreationViewAction.id: {
                        Commerce.ViewModelAdapter.navigate("InventoryDocumentCreationView", { document: this._document });
                        this.context.messageChannel.sendMessage("HidePhoneDetail", undefined);
                        return Promise.resolve();
                    }
                    case this._deleteAction.id: {
                        var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                        var clientRequest = new Commerce.Inventory.CancelInventoryDocumentClientRequest(correlationId, this._document);
                        return this.context.runtime.executeAsync(clientRequest)
                            .then(function (response) {
                            if (!response.canceled) {
                                _this.context.messageChannel.sendMessage("RefreshDocumentList", null);
                                _this.context.messageChannel.sendMessage("HidePhoneDetail", undefined);
                            }
                        });
                    }
                    default:
                        return Promise.resolve();
                }
            };
            InventoryDocumentListSetActionCommand.prototype.init = function () {
                return;
            };
            InventoryDocumentListSetActionCommand.prototype._updateSelectedDocument = function (document) {
                this._document = document;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._document)) {
                    var isDraft = this._document.OperationTypeValue === Commerce.Proxy.Entities.InventoryInboundOutboundDocumentOperationType.CreateTransferOrder;
                    this._navigateToCreationViewAction.canExecute = isDraft;
                    this._deleteAction.canExecute = isDraft;
                }
                else {
                    this._navigateToCreationViewAction.canExecute = false;
                    this._deleteAction.canExecute = false;
                }
            };
            Object.defineProperty(InventoryDocumentListSetActionCommand.prototype, "contextualActions", {
                get: function () {
                    return this._contextualActions;
                },
                enumerable: true,
                configurable: true
            });
            return InventoryDocumentListSetActionCommand;
        }(ViewModels.Command));
        ViewModels.InventoryDocumentListSetActionCommand = InventoryDocumentListSetActionCommand;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var InventoryDocumentListShipOrReceiveCommand = (function (_super) {
            __extends(InventoryDocumentListShipOrReceiveCommand, _super);
            function InventoryDocumentListShipOrReceiveCommand(context) {
                var _this = _super.call(this, context, "viewInventoryDocument", ViewModels.Icons.PageList, "string_12605") || this;
                _this.context.messageChannel.addMessageHandler("DocumentSelected", function (data) {
                    _this._updateSelectedDocument(data.inventoryDocument);
                });
                _this.setIsVisible(true);
                _this.setCanExecute(false);
                return _this;
            }
            InventoryDocumentListShipOrReceiveCommand.prototype.execute = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.navigatetoInventoryDocumentShippingAndReceivingViewClicked(correlationId);
                if (this.canExecute) {
                    Commerce.RetailLogger.viewModelInventoryDocumentListViewstartShippingAndReceivingStarted(correlationId);
                    if (this._selectedDocument.StatusValue === Commerce.Proxy.Entities.InventoryDocumentStatus.Paused
                        || this._selectedDocument.StatusValue === Commerce.Proxy.Entities.InventoryDocumentStatus.ProcessFailed) {
                        var resumeRequest = new Commerce.Inventory.ResumeInventoryDocumentClientRequest(correlationId, this._selectedDocument);
                        this.context.runtime.executeAsync(resumeRequest).then(function (response) {
                            if (!response.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(response.data.result)) {
                                _this._selectedDocument = response.data.result;
                            }
                        }).then(function () {
                            _this._navigateToShippingAndReceivingView(correlationId);
                        }).catch(this._handleAsyncOperationRejection);
                    }
                    else {
                        this._navigateToShippingAndReceivingView(correlationId);
                    }
                }
                return Promise.resolve();
            };
            InventoryDocumentListShipOrReceiveCommand.prototype.init = function () {
                this.setIsVisible(true);
                this.setCanExecute(false);
            };
            InventoryDocumentListShipOrReceiveCommand.prototype._updateSelectedDocument = function (inventoryDocument) {
                this._selectedDocument = inventoryDocument;
                this.setCanExecute(this._canViewInventoryDocument());
            };
            InventoryDocumentListShipOrReceiveCommand.prototype._canViewInventoryDocument = function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._selectedDocument)) {
                    return false;
                }
                else {
                    return this._selectedDocument.OperationTypeValue !== Commerce.Proxy.Entities.InventoryInboundOutboundDocumentOperationType.CreateTransferOrder;
                }
            };
            InventoryDocumentListShipOrReceiveCommand.prototype._handleAsyncOperationRejection = function (error) {
                if (error instanceof Commerce.Proxy.Entities.Error) {
                    Commerce.NotificationHandler.displayClientErrors([error]);
                    return Promise.reject([error]);
                }
                else if (error instanceof Array) {
                    Commerce.NotificationHandler.displayClientErrors(error);
                }
                else if (!Commerce.ObjectExtensions.isNullOrUndefined(error)) {
                    setTimeout(function () {
                        throw error;
                    });
                }
                return Promise.reject(error);
            };
            InventoryDocumentListShipOrReceiveCommand.prototype._navigateToShippingAndReceivingView = function (correlationId) {
                Commerce.ViewModelAdapter.navigate("InventoryDocumentShippingAndReceivingView", { document: this._selectedDocument });
                Commerce.RetailLogger.viewModelInventoryDocumentListViewstartShippingAndReceivingFinished(correlationId);
                this.context.messageChannel.sendMessage("HidePhoneDetail", undefined);
            };
            return InventoryDocumentListShipOrReceiveCommand;
        }(ViewModels.Command));
        ViewModels.InventoryDocumentListShipOrReceiveCommand = InventoryDocumentListShipOrReceiveCommand;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var InventoryDocumentListViewModel = (function (_super) {
            __extends(InventoryDocumentListViewModel, _super);
            function InventoryDocumentListViewModel(context, options) {
                var _this = this;
                var componentsConfig = {
                    commands: {
                        definitions: Commerce.Config.isPhone ? InventoryDocumentListViewModel.COMMAND_DEFINITIONS_PHONE : InventoryDocumentListViewModel.COMMAND_DEFINITIONS,
                        extensions: Commerce.ObjectExtensions.isNullOrUndefined(InventoryDocumentListViewModel._viewExtensionsManager) ?
                            [] : InventoryDocumentListViewModel._viewExtensionsManager.getAppBarCommands()
                    }
                };
                _this = _super.call(this, context, componentsConfig) || this;
                _this._validateOptions(options);
                _this._searchCriteria = {};
                _this.mode = ko.observable(Commerce.Proxy.Entities.InventoryInboundOutboundDocumentState.Active);
                _this.isInboundOperation = ko.observable(options.operation === Commerce.Operations.RetailOperation.InboundInventory);
                _this.reloadActiveInventoryDocumentsCallback = ko.observable(function () { return; });
                _this.reloadCompleteInventoryDocumentsCallback = ko.observable(function () { return; });
                _this.reloadDraftInventoryDocumentsCallback = ko.observable(function () { return; });
                _this.isHeaderVisible = ko.observable(true);
                _this.isDetailsPaneErrorMessageExpanded = ko.observable(true);
                _this.isPhoneDetailVisible = ko.observable(false);
                _this.selectedDocument = ko.observable(null);
                _this.selectedDocumentWorkInProgressQuantity = ko.observable(0);
                _this.isActiveDatalistLoaded = ko.observable(false);
                _this.isCompleteDatalistLoaded = ko.observable(false);
                _this.isDraftDatalistLoaded = ko.observable(false);
                _this.isDetailsPaneQuantityExpanded = ko.observable(true);
                _this.isDocumentSelected = ko.computed(function () { return !Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedDocument()); });
                _this.isSelectedDocumentNotePopulated = ko.computed(function () {
                    if (_this.isDocumentSelected()) {
                        return !Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedDocument().Note) && !Commerce.StringExtensions.isEmpty(_this.selectedDocument().Note);
                    }
                    return false;
                });
                _this.isSelectedDocumentErrorPopulated = ko.computed(function () { return _this.isDocumentSelected()
                    && !Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedDocument().OperationResultMessage)
                    && !Commerce.StringExtensions.isEmpty(_this.selectedDocument().OperationResultMessage); });
                _this.isSelectedDocumentPurchaseOrder = ko.computed(function () { return _this.isDocumentSelected()
                    && _this.selectedDocument().OperationTypeValue === Commerce.Proxy.Entities.InventoryInboundOutboundDocumentOperationType.ReceivePurchaseOrder; });
                _this.isSelectedDocumentCreateTransferOrder = ko.computed(function () { return _this.isDocumentSelected()
                    && _this.selectedDocument().OperationTypeValue === Commerce.Proxy.Entities.InventoryInboundOutboundDocumentOperationType.CreateTransferOrder; });
                _this.isDetailsPaneQuantitySectionVisible = ko.computed(function () { return _this.isDocumentSelected() && (_this.selectedDocument().OperationTypeValue === Commerce.Proxy.Entities.InventoryInboundOutboundDocumentOperationType.ReceivePurchaseOrder
                    || _this.selectedDocument().OperationTypeValue === Commerce.Proxy.Entities.InventoryInboundOutboundDocumentOperationType.ReceiveTransferOrder
                    || _this.selectedDocument().OperationTypeValue === Commerce.Proxy.Entities.InventoryInboundOutboundDocumentOperationType.ShipTransferOrder); });
                _this.selectedDocumentQuantityOrdered = ko.computed(function () {
                    if (_this.isDocumentSelected() && !_this.isSelectedDocumentCreateTransferOrder()) {
                        return _this.selectedDocument().SourceDocument.TotalQuantityOrdered;
                    }
                    return 0;
                });
                _this.selectedDocumentQuantityReceived = ko.computed(function () {
                    if (_this.isDocumentSelected() && !_this.isSelectedDocumentCreateTransferOrder()) {
                        return _this.selectedDocument().SourceDocument.TotalQuantityReceived;
                    }
                    return 0;
                });
                _this.selectedDocumentQuantityShipped = ko.computed(function () {
                    if (_this.isDocumentSelected() && !_this.isSelectedDocumentCreateTransferOrder()) {
                        return _this.selectedDocument().SourceDocument.TotalQuantityShipped;
                    }
                    return 0;
                });
                _this.selectedDocumentQuantityCanceled = ko.computed(function () {
                    if (_this.isDocumentSelected()
                        && !_this.isSelectedDocumentCreateTransferOrder()
                        && _this.selectedDocument().SourceDocument.TotalQuantityCancelled > 0) {
                        return _this.selectedDocument().SourceDocument.TotalQuantityCancelled;
                    }
                    return 0;
                });
                _this._isSelectedDocumentEditable = ko.computed(function () {
                    if (_this.isSelectedDocumentCreateTransferOrder()) {
                        return true;
                    }
                    if (_this.isDocumentSelected()) {
                        var selectedSourceDocument = _this.selectedDocument().SourceDocument;
                        return !(selectedSourceDocument.StatusValue === Commerce.Proxy.Entities.InventoryInboundOutboundSourceDocumentStatus.Received
                            || selectedSourceDocument.StatusValue === Commerce.Proxy.Entities.InventoryInboundOutboundSourceDocumentStatus.Cancelled
                            || (selectedSourceDocument.StatusValue === Commerce.Proxy.Entities.InventoryInboundOutboundSourceDocumentStatus.Shipped
                                && selectedSourceDocument.Sender === Commerce.ApplicationContext.Instance.deviceConfiguration.InventLocationId)
                            || selectedSourceDocument.StatusValue === Commerce.Proxy.Entities.InventoryDocumentStatus.Committed
                            || selectedSourceDocument.StatusValue === Commerce.Proxy.Entities.InventoryDocumentStatus.ProcessSucceeded);
                    }
                    return false;
                });
                _this._selectedDocumentQuantityOverReceivedOrShipped = ko.computed(function () {
                    if (_this.isDocumentSelected() && !_this.isSelectedDocumentCreateTransferOrder()) {
                        var selectedSourceDocument = _this.selectedDocument().SourceDocument;
                        if (!_this._isSelectedDocumentEditable()) {
                            if (selectedSourceDocument.TotalQuantityCancelled < 0) {
                                return -selectedSourceDocument.TotalQuantityCancelled;
                            }
                        }
                        else if (_this.selectedDocumentWorkInProgressQuantity() > selectedSourceDocument.TotalQuantityOrdered) {
                            return Commerce.NumberExtensions.roundToNDigits(_this.selectedDocumentWorkInProgressQuantity() - selectedSourceDocument.TotalQuantityOrdered, _this.selectedDocumentDecimalPrecision());
                        }
                    }
                    return 0;
                });
                _this.selectedDocumentQuantityOverReceived = ko.computed(function () {
                    if (_this.isInboundOperation()) {
                        return _this._selectedDocumentQuantityOverReceivedOrShipped();
                    }
                    return 0;
                });
                _this.selectedDocumentQuantityOverShipped = ko.computed(function () {
                    if (!_this.isInboundOperation()) {
                        return _this._selectedDocumentQuantityOverReceivedOrShipped();
                    }
                    return 0;
                });
                _this.selectedDocumentDecimalPrecision = ko.computed(function () {
                    if (_this.isDocumentSelected() && !_this.isSelectedDocumentCreateTransferOrder()) {
                        return Math.max(Commerce.NumberExtensions.getNumberOfDecimals(_this.selectedDocument().SourceDocument.TotalQuantityOrdered), Commerce.NumberExtensions.getNumberOfDecimals(_this.selectedDocumentQuantityShipped()), Commerce.NumberExtensions.getNumberOfDecimals(_this.selectedDocumentQuantityReceived()), Commerce.NumberExtensions.getNumberOfDecimals(_this.selectedDocumentWorkInProgressQuantity()));
                    }
                    return 0;
                });
                _this.selectedDocumentQuantityNotStarted = ko.computed(function () {
                    var quantity = 0;
                    if (_this.isDocumentSelected() && !_this.isSelectedDocumentCreateTransferOrder()) {
                        var selectedSourceDocument = _this.selectedDocument().SourceDocument;
                        if (_this.isInboundOperation()) {
                            quantity = selectedSourceDocument.TotalQuantityOrdered
                                - (selectedSourceDocument.TotalQuantityReceived + selectedSourceDocument.TotalQuantityCancelled);
                        }
                        else {
                            quantity = selectedSourceDocument.TotalQuantityOrdered
                                - (selectedSourceDocument.TotalQuantityShipped + selectedSourceDocument.TotalQuantityCancelled);
                        }
                        if (!_this._isDocumentCompleted(_this.selectedDocument())) {
                            quantity -= _this.selectedDocumentWorkInProgressQuantity();
                        }
                    }
                    return Math.max(0, quantity);
                });
                _this.selectedDocumentSender = ko.computed(function () {
                    if (_this.isDocumentSelected()) {
                        return _this.isSelectedDocumentCreateTransferOrder() ? _this.selectedDocument().Sender : _this.selectedDocument().SourceDocument.Sender;
                    }
                    return Commerce.StringExtensions.EMPTY;
                });
                _this.selectedDocumentSenderDetails = ko.computed(function () {
                    if (_this.isDocumentSelected()) {
                        return _this.isSelectedDocumentCreateTransferOrder() ? _this.selectedDocument().SenderDetails
                            : _this.selectedDocument().SourceDocument.SenderDetails;
                    }
                    return Commerce.StringExtensions.EMPTY;
                });
                _this.selectedDocumentReceiver = ko.computed(function () {
                    if (_this.isDocumentSelected()) {
                        return _this.isSelectedDocumentCreateTransferOrder() ? _this.selectedDocument().Receiver : _this.selectedDocument().SourceDocument.Receiver;
                    }
                    return Commerce.StringExtensions.EMPTY;
                });
                _this.selectedDocumentReceiverDetails = ko.computed(function () {
                    if (_this.isDocumentSelected()) {
                        return _this.isSelectedDocumentCreateTransferOrder() ? _this.selectedDocument().ReceiverDetails
                            : _this.selectedDocument().SourceDocument.ReceiverDetails;
                    }
                    return Commerce.StringExtensions.EMPTY;
                });
                _this.selectedDocumentShipDate = ko.computed(function () {
                    if (_this.isDocumentSelected()) {
                        return _this.isSelectedDocumentCreateTransferOrder() ? _this.selectedDocument().ShipDate
                            : _this.selectedDocument().SourceDocument.ShipDate;
                    }
                    return null;
                });
                _this.selectedDocumentReceiveDate = ko.computed(function () {
                    if (_this.isDocumentSelected()) {
                        return _this.isSelectedDocumentCreateTransferOrder() ? _this.selectedDocument().ReceiveDate
                            : _this.selectedDocument().SourceDocument.ReceiveDate;
                    }
                    return null;
                });
                _this.selectedDocumentDeliveryMode = ko.computed(function () {
                    if (_this.isDocumentSelected()) {
                        var mode = _this.isSelectedDocumentCreateTransferOrder() ? _this.selectedDocument().DeliveryMode
                            : _this.selectedDocument().SourceDocument.DeliveryMode;
                        if (Commerce.ApplicationContext.Instance.deliveryOptionsMap.hasItem(mode)) {
                            return Commerce.ApplicationContext.Instance.deliveryOptionsMap.getItem(mode).Description;
                        }
                    }
                    return Commerce.StringExtensions.EMPTY;
                });
                _this.selectedDocumentNote = ko.computed(function () {
                    if (_this.isDocumentSelected()) {
                        return _this.isSelectedDocumentCreateTransferOrder() ? _this.selectedDocument().Note
                            : (_this.selectedDocument().Note || _this.selectedDocument().SourceDocument.Note);
                    }
                    return Commerce.StringExtensions.EMPTY;
                });
                _this.selectedDocumentOrderNumber = ko.computed(function () {
                    if (_this.isDocumentSelected()) {
                        return _this.isSelectedDocumentCreateTransferOrder() ? _this.selectedDocument().DocumentId
                            : _this.selectedDocument().SourceDocument.DocumentId;
                    }
                    return Commerce.StringExtensions.EMPTY;
                });
                _this.setSelectedInventoryDocument = function () { return; };
                _this.isInActiveView = ko.computed(function () { return _this.mode() === Commerce.Proxy.Entities.InventoryInboundOutboundDocumentState.Active; });
                _this.isInCompleteView = ko.computed(function () { return _this.mode() === Commerce.Proxy.Entities.InventoryInboundOutboundDocumentState.Complete; });
                _this.isInDraftView = ko.computed(function () { return _this.mode() === Commerce.Proxy.Entities.InventoryInboundOutboundDocumentState.Draft; });
                _this.activeInventoryDocumentColumns = _this._getActiveInventoryDocumentColumns();
                _this.completeInventoryDocumentColumns = _this._getCompleteInventoryDocumentColumns();
                _this.draftInventoryDocumentColumns = _this._getDraftInventoryDocumentColumns();
                _this.addMessageHandler("HidePhoneDetail", function () {
                    _this.isPhoneDetailVisible(false);
                });
                _this.addMessageHandler("UpdateDocumentSearchCriteria", function (data) {
                    _this._setDocumentSearchCriteria(data);
                    _this._refreshDocuments();
                });
                _this.addMessageHandler("RefreshDocumentList", function () {
                    _this._refreshDocuments();
                });
                _this._subscribeChildComponentsToChanges();
                return _this;
            }
            Object.defineProperty(InventoryDocumentListViewModel, "viewExtensionManager", {
                set: function (manager) {
                    InventoryDocumentListViewModel._viewExtensionsManager = manager;
                },
                enumerable: true,
                configurable: true
            });
            InventoryDocumentListViewModel.prototype.loadAsync = function () {
                var _this = this;
                return Commerce.VoidAsyncResult.createResolved().done(function () {
                    _this.sendMessageToChildComponents("Initialize", {
                        operationType: _this.isInboundOperation() ? Commerce.Client.Entities.InventoryDocumentOperationType.Inbound
                            : Commerce.Client.Entities.InventoryDocumentOperationType.Outbound,
                        inventoryDocumentSearchCriteria: _this._searchCriteria,
                    });
                    _this.sendMessageToChildComponents("SetCreateInventoryDocumentHeaderData", {
                        isInboundOperation: _this.isInboundOperation(),
                    });
                });
            };
            InventoryDocumentListViewModel.prototype.toggleHeader = function () {
                this.isHeaderVisible(!this.isHeaderVisible());
            };
            InventoryDocumentListViewModel.prototype.onToggleDetailsPaneQuantity = function () {
                this.isDetailsPaneQuantityExpanded(!this.isDetailsPaneQuantityExpanded());
            };
            InventoryDocumentListViewModel.prototype.toggleDetailsPaneErrorMessage = function () {
                this.isDetailsPaneErrorMessageExpanded(!this.isDetailsPaneErrorMessageExpanded());
            };
            InventoryDocumentListViewModel.prototype.getActiveInventoryDocumentsAsync = function (pageSize, skip) {
                if (!this.isActiveDatalistLoaded()) {
                    this.isActiveDatalistLoaded(true);
                }
                this._searchCriteria.DocumentStateValue = Commerce.Proxy.Entities.InventoryInboundOutboundDocumentState.Active;
                return this._getInventoryDocumentsAsync(pageSize, skip);
            };
            InventoryDocumentListViewModel.prototype.getCompleteInventoryDocumentsAsync = function (pageSize, skip) {
                if (!this.isCompleteDatalistLoaded()) {
                    this.isCompleteDatalistLoaded(true);
                }
                this._searchCriteria.DocumentStateValue = Commerce.Proxy.Entities.InventoryInboundOutboundDocumentState.Complete;
                return this._getInventoryDocumentsAsync(pageSize, skip);
            };
            InventoryDocumentListViewModel.prototype.getDraftInventoryDocumentsAsync = function (pageSize, skip) {
                if (!this.isDraftDatalistLoaded()) {
                    this.isDraftDatalistLoaded(true);
                }
                this._searchCriteria.DocumentStateValue = Commerce.Proxy.Entities.InventoryInboundOutboundDocumentState.Draft;
                return this._getInventoryDocumentsAsync(pageSize, skip);
            };
            InventoryDocumentListViewModel.prototype.onSelectionChanged = function (inventoryDocuments) {
                var _this = this;
                if (Commerce.ArrayExtensions.hasElements(inventoryDocuments)) {
                    var inventoryDocument = inventoryDocuments[0];
                    this.selectedDocument(inventoryDocument);
                    if (!Commerce.StringExtensions.isNullOrWhitespace(inventoryDocument.WorkDocumentId) && !this._isDocumentCompleted(inventoryDocument)) {
                        var correlationId_7 = Commerce.LoggerHelper.getNewCorrelationId();
                        Commerce.RetailLogger.viewModelInventoryDocumentListViewGetWorkInProgressQuantityStarted(correlationId_7);
                        this.inventoryManager.getInventoryDocumentLinesSummaryAsync(inventoryDocument.WorkDocumentId)
                            .map(function (result) {
                            _this.selectedDocumentWorkInProgressQuantity(result.InProgressQuantity);
                            Commerce.RetailLogger.viewModelInventoryDocumentListViewGetWorkInProgressQuantityFinished(correlationId_7);
                        }).fail(function (errors) {
                            Commerce.RetailLogger.viewModelInventoryDocumentListViewGetWorkInProgressQuantityFailed(correlationId_7);
                            Commerce.NotificationHandler.displayClientErrors(errors);
                        });
                    }
                    else {
                        this.selectedDocumentWorkInProgressQuantity(0);
                    }
                    this.isPhoneDetailVisible(true);
                }
                else {
                    this.selectedDocument(null);
                    this.sendMessageToChildComponents("DocumentSelected", {
                        inventoryDocument: this.selectedDocument(),
                    });
                }
            };
            InventoryDocumentListViewModel.prototype.onNavigateBack = function () {
                if (Commerce.Config.isPhone && this.isPhoneDetailVisible()) {
                    this.isPhoneDetailVisible(false);
                    return false;
                }
                return true;
            };
            InventoryDocumentListViewModel.prototype.setDocumentFilter = function (mode) {
                this.mode(mode);
                this.sendMessageToChildComponents("SwitchDocumentState", mode);
                this._refreshDocuments();
            };
            InventoryDocumentListViewModel.prototype.onShown = function () {
                this._refreshDocuments();
            };
            InventoryDocumentListViewModel.prototype._refreshDocuments = function () {
                if (this.mode() === Commerce.Proxy.Entities.InventoryInboundOutboundDocumentState.Active) {
                    if (Commerce.ObjectExtensions.isFunction(this.reloadActiveInventoryDocumentsCallback)) {
                        this.reloadActiveInventoryDocumentsCallback()();
                    }
                }
                else if (this.mode() === Commerce.Proxy.Entities.InventoryInboundOutboundDocumentState.Complete) {
                    if (Commerce.ObjectExtensions.isFunction(this.reloadCompleteInventoryDocumentsCallback)) {
                        this.reloadCompleteInventoryDocumentsCallback()();
                    }
                }
                else if (this.mode() === Commerce.Proxy.Entities.InventoryInboundOutboundDocumentState.Draft) {
                    if (Commerce.ObjectExtensions.isFunction(this.reloadDraftInventoryDocumentsCallback)) {
                        this.reloadDraftInventoryDocumentsCallback()();
                    }
                }
                this.selectedDocument(null);
                this.sendMessageToChildComponents("DocumentSelected", {
                    inventoryDocument: null,
                });
            };
            InventoryDocumentListViewModel.prototype._setDocumentSearchCriteria = function (searchCriteria) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(searchCriteria)) {
                    searchCriteria = new Commerce.Proxy.Entities.InventoryDocumentSearchCriteriaClass({
                        DocumentId: Commerce.StringExtensions.EMPTY,
                        DocumentStateValue: this.mode
                    });
                }
                else {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(searchCriteria.DocumentId)) {
                        searchCriteria.DocumentId = Commerce.StringExtensions.EMPTY;
                    }
                    searchCriteria.DocumentStateValue = this.mode();
                }
                this._searchCriteria = searchCriteria;
            };
            InventoryDocumentListViewModel.prototype._validateOptions = function (options) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw Error("'options' is required for InventoryDocumentListViewModel");
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.operation)) {
                    throw Error("'options.operation' is required for InventoryDocumentListViewModel.");
                }
                if (options.operation !== Commerce.Operations.RetailOperation.InboundInventory &&
                    options.operation !== Commerce.Operations.RetailOperation.OutboundInventory) {
                    throw Error("'options.operation' must be InboundInventory or OutboundInventory for InventoryDocumentListView.");
                }
            };
            InventoryDocumentListViewModel.prototype._getActiveInventoryDocumentColumns = function () {
                if (this.isInboundOperation()) {
                    return [
                        {
                            titleResx: "string_12600",
                            ratio: 40,
                            collapseOrder: 3,
                            minWidth: 150,
                            field: "SourceDocument.DocumentId"
                        },
                        {
                            titleResx: "string_12601",
                            ratio: 30,
                            collapseOrder: 1,
                            minWidth: 150,
                            field: "SourceDocument.DocumentTypeValue",
                            converter: "Commerce.Core.Converter.InventorySourceDocumentTypeEnumFormatter"
                        },
                        {
                            titleResx: "string_12602",
                            ratio: 30,
                            collapseOrder: 2,
                            minWidth: 150,
                            field: "$data",
                            converter: "Commerce.Core.Converter.InventoryDocumentStatusEnumFormatter"
                        }
                    ];
                }
                return [
                    {
                        titleResx: "string_12600",
                        ratio: 60,
                        collapseOrder: 2,
                        minWidth: 150,
                        field: "SourceDocument.DocumentId"
                    },
                    {
                        titleResx: "string_12602",
                        ratio: 40,
                        collapseOrder: 1,
                        minWidth: 150,
                        field: "$data",
                        converter: "Commerce.Core.Converter.InventoryDocumentStatusEnumFormatter"
                    }
                ];
            };
            InventoryDocumentListViewModel.prototype._getCompleteInventoryDocumentColumns = function () {
                if (this.isInboundOperation()) {
                    return [
                        {
                            titleResx: "string_12600",
                            ratio: 25,
                            collapseOrder: 4,
                            minWidth: 150,
                            field: "SourceDocument.DocumentId"
                        },
                        {
                            titleResx: "string_12601",
                            ratio: 25,
                            collapseOrder: 1,
                            minWidth: 150,
                            field: "SourceDocument.DocumentTypeValue",
                            converter: "Commerce.Core.Converter.InventorySourceDocumentTypeEnumFormatter"
                        },
                        {
                            titleResx: "string_12602",
                            ratio: 25,
                            collapseOrder: 3,
                            minWidth: 150,
                            field: "$data",
                            converter: "Commerce.Core.Converter.InventoryDocumentStatusEnumFormatter"
                        },
                        {
                            titleResx: "string_12644",
                            ratio: 25,
                            collapseOrder: 2,
                            minWidth: 120,
                            field: "SourceDocument.ReceiveDate",
                            converter: "Commerce.Formatters.DateWithoutTimeIgnoreTimezone"
                        }
                    ];
                }
                return [
                    {
                        titleResx: "string_12600",
                        ratio: 40,
                        collapseOrder: 3,
                        minWidth: 150,
                        field: "SourceDocument.DocumentId"
                    },
                    {
                        titleResx: "string_12602",
                        ratio: 30,
                        collapseOrder: 2,
                        minWidth: 150,
                        field: "$data",
                        converter: "Commerce.Core.Converter.InventoryDocumentStatusEnumFormatter"
                    },
                    {
                        titleResx: "string_12644",
                        ratio: 30,
                        collapseOrder: 1,
                        minWidth: 120,
                        field: "SourceDocument.ShipDate",
                        converter: "Commerce.Formatters.DateWithoutTimeIgnoreTimezone"
                    }
                ];
            };
            InventoryDocumentListViewModel.prototype._getDraftInventoryDocumentColumns = function () {
                var _this = this;
                if (this.isInboundOperation()) {
                    return [
                        {
                            titleResx: "string_12600",
                            ratio: 28,
                            collapseOrder: 4,
                            minWidth: 150,
                            field: "DocumentId"
                        },
                        {
                            titleResx: "string_12601",
                            ratio: 24,
                            collapseOrder: 1,
                            minWidth: 150,
                            computeValue: function () { return _this.context.stringResourceManager.getString("string_12607"); },
                        },
                        {
                            titleResx: "string_12602",
                            ratio: 24,
                            collapseOrder: 3,
                            minWidth: 150,
                            field: "$data",
                            converter: "Commerce.Core.Converter.InventoryDocumentStatusEnumFormatter"
                        },
                        {
                            titleResx: "string_12649",
                            ratio: 24,
                            collapseOrder: 2,
                            minWidth: 150,
                            field: "CreatedDateTime",
                            converter: "Commerce.Formatters.DateWithoutTimeIgnoreTimezone"
                        }
                    ];
                }
                return [
                    {
                        titleResx: "string_12600",
                        ratio: 40,
                        collapseOrder: 3,
                        minWidth: 150,
                        field: "DocumentId"
                    },
                    {
                        titleResx: "string_12602",
                        ratio: 30,
                        collapseOrder: 2,
                        minWidth: 150,
                        field: "$data",
                        converter: "Commerce.Core.Converter.InventoryDocumentStatusEnumFormatter"
                    },
                    {
                        titleResx: "string_12649",
                        ratio: 30,
                        collapseOrder: 1,
                        minWidth: 150,
                        field: "CreatedDateTime",
                        converter: "Commerce.Formatters.DateWithoutTimeIgnoreTimezone"
                    },
                ];
            };
            InventoryDocumentListViewModel.prototype._getInventoryDocumentsAsync = function (pageSize, skip) {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var documentStateString = Commerce.Proxy.Entities.InventoryInboundOutboundDocumentState[this._searchCriteria.DocumentStateValue];
                Commerce.RetailLogger.viewModelGetInventoryDocumentsStarted(correlationId, documentStateString);
                return this._isBusyUntil(this.isInboundOperation() ?
                    this.inventoryManager.getInventoryInboundDocumentsAsync(this._searchCriteria, pageSize, skip) :
                    this.inventoryManager.getInventoryOutboundDocumentsAsync(this._searchCriteria, pageSize, skip))
                    .done(function (documents) {
                    Commerce.RetailLogger.viewModelGetInventoryDocumentsCompleted(correlationId, documentStateString);
                    _this._sendInventoryDocumentsLoadedMessage(documents, pageSize, skip);
                })
                    .fail(function (errors) {
                    Commerce.RetailLogger.viewModelGetInventoryDocumentsFailed(correlationId, documentStateString);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                }).always(function () {
                    _this.selectedDocument(null);
                });
            };
            InventoryDocumentListViewModel.prototype._isDocumentCompleted = function (document) {
                return !Commerce.ObjectExtensions.isNullOrUndefined(document.SourceDocument)
                    && (document.SourceDocument.StatusValue === Commerce.Proxy.Entities.InventoryInboundOutboundSourceDocumentStatus.Cancelled
                        || document.SourceDocument.StatusValue === Commerce.Proxy.Entities.InventoryInboundOutboundSourceDocumentStatus.Received
                        || (document.SourceDocument.StatusValue === Commerce.Proxy.Entities.InventoryInboundOutboundSourceDocumentStatus.Shipped
                            && document.SourceDocument.Sender === Commerce.ApplicationContext.Instance.channelConfiguration.InventLocation));
            };
            InventoryDocumentListViewModel.prototype._subscribeChildComponentsToChanges = function () {
                var _this = this;
                this.selectedDocument.subscribe(function (document) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(document)) {
                        _this.sendMessageToChildComponents("DocumentSelected", {
                            inventoryDocument: document
                        });
                    }
                    else {
                        _this.sendMessageToChildComponents("DocumentSelectionCleared", null);
                    }
                });
            };
            InventoryDocumentListViewModel.prototype._sendInventoryDocumentsLoadedMessage = function (documents, pageSize, skip) {
                var searchCriteria = this.mode() === Commerce.Proxy.Entities.InventoryInboundOutboundDocumentState.Draft
                    ? { DocumentStateValue: Commerce.Proxy.Entities.InventoryInboundOutboundDocumentState.Draft }
                    : this._searchCriteria;
                this.sendMessageToChildComponents("InventoryDocumentsLoaded", {
                    inventoryDocuments: documents,
                    searchCriteria: searchCriteria,
                    pageSize: pageSize,
                    skip: skip
                });
            };
            InventoryDocumentListViewModel.COMMAND_DEFINITIONS = [
                ViewModels.InventoryDocumentListShipOrReceiveCommand,
                ViewModels.InventoryDocumentListCreateHeaderCommand,
                ViewModels.InventoryDocumentListEditDraftDocumentCommand,
                ViewModels.InventoryDocumentListDeleteCommand,
                ViewModels.InventoryDocumentListRefreshCommand,
                ViewModels.GetInventoryDocumentSearchCriteriaCommand,
            ];
            InventoryDocumentListViewModel.COMMAND_DEFINITIONS_PHONE = [
                ViewModels.InventoryDocumentListShipOrReceiveCommand,
                ViewModels.InventoryDocumentListSetActionCommand,
                ViewModels.InventoryDocumentListRefreshCommand,
                ViewModels.GetInventoryDocumentSearchCriteriaCommand,
            ];
            return InventoryDocumentListViewModel;
        }(ViewModels.ComponentHostViewModelBase));
        ViewModels.InventoryDocumentListViewModel = InventoryDocumentListViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var InventoryDocumentQuantityDialogViewModel = (function (_super) {
            __extends(InventoryDocumentQuantityDialogViewModel, _super);
            function InventoryDocumentQuantityDialogViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this.document = ko.observable(null);
                _this.itemName = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.itemId = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.itemPrimaryImageUrl = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.productDimensionsDescription = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.isLocationActive = ko.observable(false);
                _this.wmsLocationId = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.quantityThreshold = ko.observable(null);
                _this.numpadTextValue = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.numpadLabel = ko.observable(Commerce.ViewModelAdapter.getResourceString("string_12449"));
                _this.isUpdateLinesByProduct = ko.observable(false);
                _this.isLocationBlankReceiptAllowed = ko.observable(false);
                _this.isOverDeliveryAllowed = ko.observable(false);
                _this.isReceivingOperation = ko.computed(function () { return !Commerce.ObjectExtensions.isNullOrUndefined(_this.document())
                    && _this.document().OperationTypeValue !== Commerce.Proxy.Entities.InventoryInboundOutboundDocumentOperationType.ShipTransferOrder; });
                _this.hasProductData = ko.computed(function () { return !Commerce.StringExtensions.isNullOrWhitespace(_this.itemId()); });
                _this.showWarning = ko.computed(function () { return !Commerce.ObjectExtensions.isNullOrUndefined(_this.quantityThreshold()); });
                _this.computedTitle = ko.computed(function () {
                    if (_this.showWarning()) {
                        return Commerce.ViewModelAdapter.getResourceString("string_12409");
                    }
                    return Commerce.ViewModelAdapter.getResourceString("string_12448");
                });
                _this.warningText = ko.computed(function () {
                    if (_this.showWarning()) {
                        var resourceId = void 0;
                        if (_this.isReceivingOperation() && _this.isOverDeliveryAllowed()) {
                            resourceId = "string_12469";
                        }
                        else if (_this.isReceivingOperation() && !_this.isOverDeliveryAllowed()) {
                            resourceId = "string_12458";
                        }
                        else if (_this.isOverDeliveryAllowed()) {
                            resourceId = "string_12525";
                        }
                        else {
                            resourceId = "string_12524";
                        }
                        var formatString = Commerce.ViewModelAdapter.getResourceString(resourceId);
                        return Commerce.StringExtensions.format(formatString, _this.quantityThreshold());
                    }
                    return Commerce.StringExtensions.EMPTY;
                });
                _this.isWmsLocationIdEmpty = ko.computed(function () {
                    return Commerce.ObjectExtensions.isNullOrUndefined(_this.wmsLocationId()) || Commerce.StringExtensions.isEmpty(_this.wmsLocationId());
                });
                _this.showBackButton = ko.computed(function () { return _this.isUpdateLinesByProduct() || _this.showWarning(); });
                return _this;
            }
            InventoryDocumentQuantityDialogViewModel.prototype.load = function (options) {
                this.document(options.document);
                this.itemName(options.itemName);
                this.itemId(options.itemId);
                this.itemPrimaryImageUrl(options.itemPrimaryImageUrl);
                this.productDimensionsDescription(options.productDimensionsDescription);
                this.isLocationActive(options.isLocationActive);
                this.wmsLocationId(options.wmsLocationId);
                this.quantityThreshold(options.quantityThreshold);
                this.isUpdateLinesByProduct(options.isUpdateLinesByProduct);
                this.isLocationBlankReceiptAllowed(options.isLocationBlankReceiptAllowed);
                this.numpadTextValue(options.initialQuantity.toString());
                this.isOverDeliveryAllowed(options.isOverDeliveryAllowed);
            };
            InventoryDocumentQuantityDialogViewModel.prototype.selectLocationAsync = function () {
                var _this = this;
                return Commerce.ApplicationContext.Instance.warehouseAsync.value.getPromise().then(function (warehouse) {
                    var predefinedLocations = [];
                    if (_this.isLocationBlankReceiptAllowed()) {
                        predefinedLocations.push(Commerce.StringExtensions.EMPTY);
                    }
                    var activity = new Commerce.Activities.SelectInventoryDocumentWarehouseLocationActivity({
                        itemId: _this.itemId(),
                        itemName: _this.itemName(),
                        itemPrimaryImageUrl: _this.itemPrimaryImageUrl(),
                        productDimensionsDescription: _this.productDimensionsDescription(),
                        isWmsEnabled: warehouse.IsWMSEnabled,
                        predefinedLocations: predefinedLocations,
                        defaultLocation: _this.wmsLocationId(),
                        isUpdateLinesByProduct: true,
                    });
                    return activity.execute()
                        .map(function () { return activity.response; }).getPromise()
                        .then(function (response) {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(response)) {
                            return { canceled: true, data: null };
                        }
                        _this.wmsLocationId(response.selectedWarehouseLocation.LocationId);
                        return { canceled: false, data: null };
                    });
                });
            };
            return InventoryDocumentQuantityDialogViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.InventoryDocumentQuantityDialogViewModel = InventoryDocumentQuantityDialogViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var InventoryDocumentSerialNumberManagementGoBackCommand = (function (_super) {
            __extends(InventoryDocumentSerialNumberManagementGoBackCommand, _super);
            function InventoryDocumentSerialNumberManagementGoBackCommand(context) {
                var _this = _super.call(this, context, "InventoryDocumentSerialNumberManagementGoBackCommand", ViewModels.Icons.Accept, "string_75") || this;
                _this.setIsVisible(true);
                _this.setCanExecute(true);
                return _this;
            }
            InventoryDocumentSerialNumberManagementGoBackCommand.prototype.execute = function () {
                this.context.navigator.navigateBack();
                return Promise.resolve();
            };
            InventoryDocumentSerialNumberManagementGoBackCommand.prototype.init = function () {
                return;
            };
            return InventoryDocumentSerialNumberManagementGoBackCommand;
        }(ViewModels.Command));
        ViewModels.InventoryDocumentSerialNumberManagementGoBackCommand = InventoryDocumentSerialNumberManagementGoBackCommand;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var InventoryDocumentSerialNumberManagementRegisterSerialNumberCommand = (function (_super) {
            __extends(InventoryDocumentSerialNumberManagementRegisterSerialNumberCommand, _super);
            function InventoryDocumentSerialNumberManagementRegisterSerialNumberCommand(context) {
                var _this = _super.call(this, context, "InventoryDocumentSerialNumberManagementRegisterSerialNumberCommand", ViewModels.Icons.NumberSymbol, "string_12800") || this;
                _this.context.messageChannel.addMessageHandler("LineSelected", function (data) {
                    if (data.lines.length === 1) {
                        _this._line = data.lines[0];
                    }
                    else {
                        _this._line = null;
                    }
                    _this._updateCanExecuteValue();
                });
                _this.context.messageChannel.addMessageHandler("ChangeActiveMode", function (data) {
                    _this._activeMode = data;
                    _this._updateCanExecuteValue();
                });
                _this.setIsVisible(true);
                _this.setCanExecute(false);
                return _this;
            }
            InventoryDocumentSerialNumberManagementRegisterSerialNumberCommand.prototype.execute = function () {
                if (this.canExecute) {
                    this.context.messageChannel.sendMessage("RegisterOrEditSerialNumberLine", null);
                }
                return Promise.resolve();
            };
            InventoryDocumentSerialNumberManagementRegisterSerialNumberCommand.prototype.init = function () {
                return;
            };
            InventoryDocumentSerialNumberManagementRegisterSerialNumberCommand.prototype._updateCanExecuteValue = function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._line)
                    && this._activeMode === ViewModels.InventoryDocumentSerialNumberManagementViewModelActiveMode.AllOrderLines) {
                    this.setCanExecute(false);
                }
                else {
                    this.setCanExecute(true);
                }
            };
            return InventoryDocumentSerialNumberManagementRegisterSerialNumberCommand;
        }(ViewModels.Command));
        ViewModels.InventoryDocumentSerialNumberManagementRegisterSerialNumberCommand = InventoryDocumentSerialNumberManagementRegisterSerialNumberCommand;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var InventoryDocumentSerialNumberManagementViewModelActiveMode;
        (function (InventoryDocumentSerialNumberManagementViewModelActiveMode) {
            InventoryDocumentSerialNumberManagementViewModelActiveMode[InventoryDocumentSerialNumberManagementViewModelActiveMode["SingleOrderLine"] = 0] = "SingleOrderLine";
            InventoryDocumentSerialNumberManagementViewModelActiveMode[InventoryDocumentSerialNumberManagementViewModelActiveMode["AllOrderLines"] = 1] = "AllOrderLines";
        })(InventoryDocumentSerialNumberManagementViewModelActiveMode = ViewModels.InventoryDocumentSerialNumberManagementViewModelActiveMode || (ViewModels.InventoryDocumentSerialNumberManagementViewModelActiveMode = {}));
        var InventoryDocumentSerialNumberManagementViewModel = (function (_super) {
            __extends(InventoryDocumentSerialNumberManagementViewModel, _super);
            function InventoryDocumentSerialNumberManagementViewModel(context, options) {
                var _this = this;
                var componentsConfig = {
                    commands: {
                        definitions: InventoryDocumentSerialNumberManagementViewModel.COMMAND_DEFINITIONS,
                    }
                };
                _this = _super.call(this, context, componentsConfig) || this;
                _this._validateOptions(options);
                _this._singleOrderLineSerialNumberLineIndexes = new Commerce.Dictionary();
                _this._singleOrderLineSerialNumberLineCache = [];
                _this._allOrderLinesSerialNumberLineIndexes = new Commerce.Dictionary();
                _this._allOrderLinesSerialNumberLineCache = [];
                _this._productDataCache = new Commerce.Dictionary();
                _this._getProductDataRequests = new Commerce.Dictionary();
                _this.document = ko.observable(options.document);
                _this.documentLine = ko.observable(options.documentLine);
                _this.selectedSerialNumberLines = ko.observableArray([]);
                _this.activeMode = ko.observable(Commerce.ObjectExtensions.isNullOrUndefined(options.documentLine)
                    ? InventoryDocumentSerialNumberManagementViewModelActiveMode.AllOrderLines
                    : InventoryDocumentSerialNumberManagementViewModelActiveMode.SingleOrderLine);
                _this.isDetailsPaneVisible = ko.observable(true);
                _this.isSingleOrderLineDatalistLoaded = ko.observable(false);
                _this.isAllOrderLinesDatalistLoaded = ko.observable(false);
                _this.isPhoneDetailVisible = ko.observable(false);
                _this.reloadSingleOrderLinePivotCallback = ko.observable(function () { return null; });
                _this.reloadAllOrderLinesPivotCallback = ko.observable(function () { return null; });
                _this.totalLines = ko.observable(0);
                _this.totalRegisteringQuantity = ko.observable(0);
                _this.updateSingleOrderLineDataListCallback = ko.observable(function () { return null; });
                _this.updateAllOrderLinesDataListCallback = ko.observable(function () { return null; });
                _this._selectedLineForAllOrderLines = ko.observableArray([]);
                _this._selectedLineForSingleOrderLine = ko.observableArray([]);
                _this.hasSingleOrderLineMode = ko.computed(function () { return !Commerce.ObjectExtensions.isNullOrUndefined(_this.documentLine()); });
                _this.singleOrderLinePivotLabel = ko.computed(function () {
                    return _this.hasSingleOrderLineMode() ? _this.documentLine().product.ItemId : Commerce.StringExtensions.EMPTY;
                });
                _this.isInSingleOrderLineMode = ko.computed(function () {
                    return _this.activeMode() === InventoryDocumentSerialNumberManagementViewModelActiveMode.SingleOrderLine;
                });
                _this.isInAllOrderLinesMode = ko.computed(function () {
                    return _this.activeMode() === InventoryDocumentSerialNumberManagementViewModelActiveMode.AllOrderLines;
                });
                _this.selectedSerialNumberLines = ko.computed(function () {
                    return _this.isInSingleOrderLineMode() ? _this._selectedLineForSingleOrderLine() : _this._selectedLineForAllOrderLines();
                });
                _this.singleSelectedLine = ko.computed(function () {
                    if (_this.selectedSerialNumberLines().length === 1) {
                        return _this.selectedSerialNumberLines()[0];
                    }
                    return null;
                });
                _this.hasSingleSelectedLine = ko.computed(function () { return !Commerce.ObjectExtensions.isNullOrUndefined(_this.singleSelectedLine()); });
                _this.singleSelectedLineProductDimensionsDescription = ko.computed(function () {
                    if (_this.hasSingleSelectedLine()) {
                        return Commerce.SimpleProductHelper.getProductDimensionsDescription(_this.singleSelectedLine().product.Dimensions);
                    }
                    return Commerce.StringExtensions.EMPTY;
                });
                _this.isSingleSelectedLineSerialNumberNotRegistered = ko.computed(function () {
                    return _this.hasSingleSelectedLine() && _this.singleSelectedLine().StatusValue === Commerce.Proxy.Entities.InventorySerialNumberLineStatus.NotRegistered;
                });
                _this.isSingleSelectedLineSerialNumberRegistering = ko.computed(function () {
                    return _this.hasSingleSelectedLine() && _this.singleSelectedLine().StatusValue === Commerce.Proxy.Entities.InventorySerialNumberLineStatus.Registering;
                });
                _this.isSingleSelectedLineSerialNumberEmpty = ko.computed(function () {
                    return _this.hasSingleSelectedLine() && Commerce.StringExtensions.isNullOrWhitespace(_this.singleSelectedLine().SerialNumber);
                });
                _this.isTransferOrder = ko.computed(function () {
                    return _this.document().SourceDocument.DocumentTypeValue === Commerce.Proxy.Entities.InventorySourceDocumentType.TransferOrder;
                });
                _this.isPurchaseOrder = ko.computed(function () {
                    return _this.document().SourceDocument.DocumentTypeValue === Commerce.Proxy.Entities.InventorySourceDocumentType.PurchaseOrder;
                });
                _this.singleOrderLineColumns = _this._getDataListColumns();
                _this.allOrderLinesColumns = _this._getDataListColumns();
                _this.addMessageHandler("RegisterOrEditSerialNumberLine", function () {
                    var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                    Commerce.RetailLogger.viewModelInventoryDocumentSerialNumberManagementViewModelAppBarSerialNumberButtonClicked(correlationId);
                    _this._startSerialNumberLineRegistrationLoopAsync(correlationId)
                        .catch(_this._handleAsyncOperationRejection);
                });
                return _this;
            }
            InventoryDocumentSerialNumberManagementViewModel.prototype.loadAsync = function () {
                var _this = this;
                return Commerce.VoidAsyncResult.createResolved().done(function () {
                    Commerce.RetailLogger.viewModelInventoryDocumentSerialNumberManagementViewModelLoadedSuccess();
                    _this.sendMessageToChildComponents("Initialize", {});
                }).fail(function (errors) {
                    if (Commerce.ArrayExtensions.hasElements(errors)) {
                        Commerce.RetailLogger.viewModelInventoryDocumentSerialNumberManagementViewModelLoadedFailed(errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                    }
                });
            };
            InventoryDocumentSerialNumberManagementViewModel.prototype.switchSelectionMode = function (event) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(event.detail)) {
                    if (!this.hasSingleOrderLineMode() || event.detail.index !== 0) {
                        this.activeMode(InventoryDocumentSerialNumberManagementViewModelActiveMode.AllOrderLines);
                    }
                    else {
                        this.activeMode(InventoryDocumentSerialNumberManagementViewModelActiveMode.SingleOrderLine);
                    }
                }
                this.sendMessageToChildComponents("ChangeActiveMode", this.activeMode());
                this.sendMessageToChildComponents("LineSelected", { lines: this.selectedSerialNumberLines() });
                this._updateLinesSummaryAsync();
            };
            InventoryDocumentSerialNumberManagementViewModel.prototype.toggleDetailsPane = function () {
                this.isDetailsPaneVisible(!this.isDetailsPaneVisible());
            };
            InventoryDocumentSerialNumberManagementViewModel.prototype.getSerialNumberLinesForSingleOrderLineAsync = function (pageSize, skip) {
                if (!this.isSingleOrderLineDatalistLoaded()) {
                    this.isSingleOrderLineDatalistLoaded(true);
                }
                var criteria = {
                    DocumentLineId: this.documentLine().LineId,
                };
                return this._getSerialNumberLinesAsync(pageSize, skip, criteria, InventoryDocumentSerialNumberManagementViewModelActiveMode.SingleOrderLine);
            };
            InventoryDocumentSerialNumberManagementViewModel.prototype.getSerialNumberLinesForAllOrderLinesAsync = function (pageSize, skip) {
                if (!this.isAllOrderLinesDatalistLoaded()) {
                    this.isAllOrderLinesDatalistLoaded(true);
                }
                var criteria = {};
                return this._getSerialNumberLinesAsync(pageSize, skip, criteria, InventoryDocumentSerialNumberManagementViewModelActiveMode.AllOrderLines);
            };
            InventoryDocumentSerialNumberManagementViewModel.prototype.onSelectionChanged = function (lines) {
                if (this.isInSingleOrderLineMode()) {
                    this._selectedLineForSingleOrderLine(lines);
                }
                else if (this.isInAllOrderLinesMode()) {
                    this._selectedLineForAllOrderLines(lines);
                }
                this.sendMessageToChildComponents("LineSelected", { lines: this.selectedSerialNumberLines() });
                if (Commerce.Config.isPhone) {
                    if (this.selectedSerialNumberLines().length === 1) {
                        if (this._isDataListSelectionChangedTriggeredByAutoRefresh) {
                            this._isDataListSelectionChangedTriggeredByAutoRefresh = false;
                        }
                        else {
                            this.isPhoneDetailVisible(true);
                        }
                    }
                    else {
                        this.isPhoneDetailVisible(false);
                    }
                }
            };
            InventoryDocumentSerialNumberManagementViewModel.prototype.onNavigateBack = function () {
                if (Commerce.Config.isPhone && this.isPhoneDetailVisible()) {
                    this.isPhoneDetailVisible(false);
                    return false;
                }
                return true;
            };
            InventoryDocumentSerialNumberManagementViewModel.prototype.onRegisterSerialNumberLineAsync = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.viewModelInventoryDocumentSerialNumberManagementViewModelRegisterSerialNumberClicked(correlationId);
                var serialNumberLine = this.singleSelectedLine();
                var getSerialNumberRequest = new Commerce.Inventory.GetInventoryDocumentSerialNumberClientRequest(correlationId, serialNumberLine.product);
                return this.context.runtime.executeAsync(getSerialNumberRequest)
                    .then(function (response) {
                    if (!response.canceled) {
                        return _this._updateSerialNumberByClientRequestAsync(correlationId, response.data.result, true, null, _this.singleSelectedLine());
                    }
                    return { canceled: true };
                }).then(function (response) {
                    if (!response.canceled) {
                        return _this._updateLocalDocumentAndSerialNumberLines(response.data.result.document, response.data.result.updatedLine, serialNumberLine.product, false);
                    }
                    return { canceled: true };
                }).catch(this._handleAsyncOperationRejection);
            };
            InventoryDocumentSerialNumberManagementViewModel.prototype.onEditSerialNumberLineAsync = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.viewModelInventoryDocumentSerialNumberManagementViewModelEditSerialNumberClicked(correlationId);
                var serialNumberLine = this.singleSelectedLine();
                var getSerialNumberRequest = new Commerce.Inventory.GetInventoryDocumentSerialNumberClientRequest(correlationId, serialNumberLine.product, serialNumberLine.SerialNumber);
                return this.context.runtime.executeAsync(getSerialNumberRequest)
                    .then(function (response) {
                    if (!response.canceled) {
                        return _this._updateSerialNumberByClientRequestAsync(correlationId, response.data.result, true, null, serialNumberLine);
                    }
                    return { canceled: true };
                }).then(function (response) {
                    if (!response.canceled) {
                        return _this._updateLocalDocumentAndSerialNumberLines(response.data.result.document, response.data.result.updatedLine, serialNumberLine.product, false);
                    }
                    return { canceled: true };
                }).catch(this._handleAsyncOperationRejection);
            };
            InventoryDocumentSerialNumberManagementViewModel.prototype.onResetSerialNumberLineAsync = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.viewModelInventoryDocumentSerialNumberManagementViewModelResetSerialNumberClicked(correlationId);
                var serialNumberLine = this.singleSelectedLine();
                var askQuestionRequest = new Commerce.ShowQuestionDialogClientRequest(correlationId, {
                    title: this.context.stringResourceManager.getString("string_12816"),
                    question: this.context.stringResourceManager.getString("string_12817"),
                    additionalInformation: [
                        {
                            header: this.context.stringResourceManager.getString("string_12800"),
                            content: serialNumberLine.SerialNumber,
                        },
                    ],
                    showCloseX: true,
                    button1: {
                        id: Commerce.Activities.DisplayMessageOperationIds.OK,
                        result: "OK_RESULT",
                        label: this.context.stringResourceManager.getString("string_77"),
                        isPrimary: true,
                    },
                    button2: {
                        id: Commerce.Activities.DisplayMessageOperationIds.CANCEL,
                        result: "CANCEL_RESULT",
                        label: this.context.stringResourceManager.getString("string_76"),
                        isPrimary: false,
                    },
                });
                return this.context.runtime.executeAsync(askQuestionRequest)
                    .then(function (response) {
                    if (!response.canceled && response.data.result.dialogResult === "OK_RESULT") {
                        var resetRequest = new Commerce.Inventory.ResetInventoryDocumentSerialNumberLineClientRequest(correlationId, _this.document(), serialNumberLine);
                        return _this.context.runtime.executeAsync(resetRequest);
                    }
                    return { canceled: true };
                }).then(function (response) {
                    if (!response.canceled) {
                        return _this._updateLocalDocumentAndSerialNumberLines(response.data.result.document, response.data.result.updatedLine, serialNumberLine.product, false);
                    }
                    return { canceled: true };
                });
            };
            InventoryDocumentSerialNumberManagementViewModel.prototype.onScanBarcodeAsync = function (barcode) {
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.viewModelInventoryDocumentSerialNumberManagementViewModelBarcodeScanned(correlationId);
                if (this.isInAllOrderLinesMode() && Commerce.ObjectExtensions.isNullOrUndefined(this.singleSelectedLine())) {
                    var showMessageRequest = new Commerce.ShowMessageDialogClientRequest({
                        title: this.context.stringResourceManager.getString("string_12800"),
                        message: this.context.stringResourceManager.getString("string_12820"),
                        showCloseX: true,
                        button1: {
                            id: Commerce.Activities.DisplayMessageOperationIds.OK,
                            result: "OK_RESULT",
                            label: this.context.stringResourceManager.getString("string_75"),
                            isPrimary: true
                        },
                    }, correlationId);
                    return this.context.runtime.executeAsync(showMessageRequest).then(function () { return ({ canceled: true }); });
                }
                return this._startSerialNumberLineRegistrationLoopAsync(correlationId, barcode)
                    .catch(this._handleAsyncOperationRejection);
            };
            InventoryDocumentSerialNumberManagementViewModel.prototype.onGotoReceivingNow = function () {
                Commerce.ViewModelAdapter.navigateBack();
            };
            InventoryDocumentSerialNumberManagementViewModel.prototype._validateOptions = function (options) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw Error("'options' is required for InventoryDocumentSerialNumberManagementViewModel");
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.document)) {
                    throw Error("'options.document' is required for InventoryDocumentSerialNumberManagementViewModel.");
                }
            };
            InventoryDocumentSerialNumberManagementViewModel.prototype._getDataListColumns = function () {
                var _this = this;
                return [
                    {
                        titleResx: "string_12413",
                        ratio: 20,
                        collapseOrder: 2,
                        minWidth: 150,
                        field: "product.ItemId"
                    },
                    {
                        titleResx: "string_12414",
                        ratio: 40,
                        collapseOrder: 1,
                        minWidth: 280,
                        computeValue: function (row) {
                            if (Commerce.ArrayExtensions.hasElements(row.product.Dimensions)) {
                                var formatString = _this.context.stringResourceManager.getString("string_4385");
                                return Commerce.StringExtensions.format(formatString, row.product.Dimensions, Commerce.SimpleProductHelper.getProductDimensionsDescription(row.product.Dimensions));
                            }
                            return row.product.Name;
                        },
                    },
                    {
                        titleResx: "string_12805",
                        ratio: 20,
                        collapseOrder: 3,
                        minWidth: 150,
                        field: "SerialNumber",
                    },
                    {
                        titleResx: "string_12602",
                        ratio: 20,
                        collapseOrder: 4,
                        minWidth: 150,
                        computeValue: function (row) {
                            switch (row.StatusValue) {
                                case Commerce.Proxy.Entities.InventorySerialNumberLineStatus.NotRegistered:
                                    return _this.context.stringResourceManager.getString("string_12807");
                                case Commerce.Proxy.Entities.InventorySerialNumberLineStatus.Registering:
                                    return _this.context.stringResourceManager.getString("string_12808");
                                case Commerce.Proxy.Entities.InventorySerialNumberLineStatus.Registered:
                                    return _this.context.stringResourceManager.getString("string_12809");
                                default:
                                    return Commerce.StringExtensions.EMPTY;
                            }
                        }
                    },
                ];
            };
            InventoryDocumentSerialNumberManagementViewModel.prototype._updateLinesSummaryAsync = function () {
                var _this = this;
                var documentLineId = this.isInSingleOrderLineMode() ? this.documentLine().LineId : null;
                return this.inventoryManager.getInventoryDocumentSerialNumberLinesSummaryAsync(this.document().WorkDocumentId, documentLineId).getPromise()
                    .then(function (result) {
                    _this.totalLines(result.TotalLineNumber);
                    _this.totalRegisteringQuantity(result.RegisteringQuantity);
                    return { canceled: false };
                });
            };
            InventoryDocumentSerialNumberManagementViewModel.prototype._handleAsyncOperationRejection = function (error) {
                if (error instanceof Commerce.Proxy.Entities.Error) {
                    Commerce.NotificationHandler.displayClientErrors([error]);
                    return Promise.reject([error]);
                }
                else if (error instanceof Array) {
                    Commerce.NotificationHandler.displayClientErrors(error);
                }
                else if (!Commerce.ObjectExtensions.isNullOrUndefined(error)) {
                    setTimeout(function () {
                        throw error;
                    });
                }
                return Promise.reject(error);
            };
            InventoryDocumentSerialNumberManagementViewModel.prototype._startSerialNumberLineRegistrationLoopAsync = function (correlationId, barcode) {
                var _this = this;
                if (this._isInRegistrationLoop) {
                    return Promise.resolve({ canceled: true });
                }
                this._isInRegistrationLoop = true;
                var serialNumberLine = this.singleSelectedLine();
                var documentLine = this.isInSingleOrderLineMode() ? this.documentLine() : null;
                return this._registerSerialNumberLineLoopAsync(correlationId, barcode, documentLine, serialNumberLine)
                    .then(function (response) {
                    _this._isInRegistrationLoop = false;
                    return response;
                }).catch(function (errors) {
                    _this._isInRegistrationLoop = false;
                    return Promise.reject(errors);
                });
            };
            InventoryDocumentSerialNumberManagementViewModel.prototype._registerSerialNumberLineLoopAsync = function (correlationId, barcode, documentLine, serialNumberLine) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(documentLine) && Commerce.ObjectExtensions.isNullOrUndefined(serialNumberLine)) {
                    return Promise.resolve({ canceled: true });
                }
                var getSerialNumberPromise;
                if (Commerce.ObjectExtensions.isNullOrUndefined(barcode)) {
                    var productId = Commerce.ObjectExtensions.isNullOrUndefined(serialNumberLine) ? documentLine.SourceDocumentLine.ProductId
                        : serialNumberLine.ProductId;
                    getSerialNumberPromise = this._getProductsByIdsAsync([productId])
                        .then(function (products) {
                        var request = new Commerce.Inventory.GetInventoryDocumentSerialNumberClientRequest(correlationId, products[0]);
                        return _this.context.runtime.executeAsync(request);
                    });
                }
                else {
                    getSerialNumberPromise = Promise.resolve({ canceled: false, data: new Commerce.Inventory.GetInventoryDocumentSerialNumberClientResponse(barcode) });
                }
                return getSerialNumberPromise.then(function (response) {
                    if (!response.canceled) {
                        return _this._updateSerialNumberByClientRequestAsync(correlationId, response.data.result, false, documentLine, serialNumberLine);
                    }
                    return { canceled: true };
                }).then(function (response) {
                    if (!response.canceled) {
                        return _this._getProductsByIdsAsync([response.data.result.updatedLine.ProductId])
                            .then(function (products) {
                            return _this._updateLocalDocumentAndSerialNumberLines(response.data.result.document, response.data.result.updatedLine, products[0], true);
                        }).then(function (updateLocalResponse) {
                            if (!updateLocalResponse.canceled) {
                                if (_this.isInSingleOrderLineMode()
                                    && Commerce.ObjectExtensions.isNullOrUndefined(barcode)
                                    && _this.totalRegisteringQuantity() < _this.documentLine().QuantityToUpdate) {
                                    Commerce.RetailLogger.viewModelInventoryDocumentSerialNumberManagementViewModelNextLineToRegisterPrompted(correlationId);
                                    return _this._registerSerialNumberLineLoopAsync(correlationId, null, documentLine);
                                }
                                else if (_this.isInAllOrderLinesMode()) {
                                    var criteria = {
                                        WorkDocumentId: _this.document().WorkDocumentId,
                                        AvailableSerializedLineOnly: true,
                                    };
                                    return _this.inventoryManager.searchInventoryDocumentLinesAsync(criteria, 1, 0).getPromise()
                                        .then(function (documentLines) {
                                        if (Commerce.ArrayExtensions.hasElements(documentLines)) {
                                            Commerce.RetailLogger.viewModelInventoryDocumentSerialNumberManagementViewModelNextLineToRegisterPrompted(correlationId);
                                            return _this._registerSerialNumberLineLoopAsync(correlationId, null, documentLines[0]);
                                        }
                                        return { canceled: true };
                                    });
                                }
                                return { canceled: true };
                            }
                            return { canceled: true };
                        });
                    }
                    return { canceled: true };
                });
            };
            InventoryDocumentSerialNumberManagementViewModel.prototype._refreshCurrentPivot = function () {
                if (this.isInSingleOrderLineMode()) {
                    this.reloadSingleOrderLinePivotCallback()();
                }
                else if (this.isInAllOrderLinesMode()) {
                    this.reloadAllOrderLinesPivotCallback()();
                }
            };
            InventoryDocumentSerialNumberManagementViewModel.prototype._getSerialNumberLinesAsync = function (pageSize, skip, criteria, activeMode) {
                var _this = this;
                this._isDataListSelectionChangedTriggeredByAutoRefresh = true;
                return this._isBusyUntil(Commerce.AsyncResult.fromPromise(this.inventoryManager.searchInventoryDocumentSerialNumberLinesAsync(this.document().WorkDocumentId, criteria, pageSize, skip).getPromise()
                    .then(function (result) {
                    return _this._getProductsByIdsAsync(result.map(function (elem) { return elem.ProductId; }))
                        .then(function (products) {
                        return result.map(function (elem, index) {
                            return new Commerce.Client.Entities.InventoryInboundOutboundDocumentSerialNumberLineWithProduct(elem, products[index]);
                        });
                    });
                }).then(function (result) {
                    var indexes;
                    var cache;
                    if (activeMode === InventoryDocumentSerialNumberManagementViewModelActiveMode.SingleOrderLine) {
                        indexes = _this._singleOrderLineSerialNumberLineIndexes;
                        cache = _this._singleOrderLineSerialNumberLineCache;
                    }
                    else {
                        indexes = _this._allOrderLinesSerialNumberLineIndexes;
                        cache = _this._allOrderLinesSerialNumberLineCache;
                    }
                    if (skip === 0) {
                        indexes.clear();
                        if (activeMode === InventoryDocumentSerialNumberManagementViewModelActiveMode.SingleOrderLine) {
                            _this._singleOrderLineSerialNumberLineCache = [];
                            cache = _this._singleOrderLineSerialNumberLineCache;
                        }
                        else {
                            _this._allOrderLinesSerialNumberLineCache = [];
                            cache = _this._allOrderLinesSerialNumberLineCache;
                        }
                    }
                    result.forEach(function (value, index) {
                        indexes.setItem(value.LineId, index + skip);
                        cache.push(value);
                    });
                    return result;
                }))).fail(this._handleAsyncOperationRejection);
            };
            InventoryDocumentSerialNumberManagementViewModel.prototype._getProductsByIdsAsync = function (productIds) {
                var _this = this;
                if (!Commerce.ArrayExtensions.hasElements(productIds)) {
                    return Promise.resolve([]);
                }
                var returnProductRequests = [];
                var productIdsToQuery = [];
                var productIdsToQueryDict = new Commerce.Dictionary();
                productIds.forEach(function (productId, index) {
                    if (_this._productDataCache.hasItem(productId)) {
                        returnProductRequests[index] = Promise.resolve(_this._productDataCache.getItem(productId));
                    }
                    else if (_this._getProductDataRequests.hasItem(productId)) {
                        returnProductRequests[index] = _this._getProductDataRequests.getItem(productId);
                    }
                    else if (!productIdsToQueryDict.hasItem(productId) && !Commerce.ObjectExtensions.isNullOrUndefined(productId)) {
                        productIdsToQuery.push(productId);
                        productIdsToQueryDict.setItem(productId, true);
                    }
                });
                if (Commerce.ArrayExtensions.hasElements(productIdsToQuery)) {
                    var productManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IProductManagerName);
                    var getByIdsAsync_2 = productManager.getByIdsAsync(productIdsToQuery, 0).getPromise();
                    productIds.forEach(function (productId, index) {
                        if (productIdsToQueryDict.hasItem(productId)) {
                            returnProductRequests[index] = getByIdsAsync_2.then(function (result) {
                                var foundProduct = Commerce.ArrayExtensions.firstOrUndefined(result, function (elem) { return elem.RecordId === productId; });
                                if (!Commerce.ObjectExtensions.isNullOrUndefined(foundProduct)) {
                                    _this._productDataCache.setItem(productId, foundProduct);
                                    _this._getProductDataRequests.removeItem(productId);
                                    return Promise.resolve(foundProduct);
                                }
                                else {
                                    var productNotFoundError = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PRODUCT_DETAILS_NOT_FOUND_ERROR_MESSAGE);
                                    return Promise.reject(productNotFoundError);
                                }
                            }).catch(function (errors) {
                                _this._getProductDataRequests.removeItem(productId);
                                return Promise.reject(errors);
                            });
                        }
                    });
                }
                return Promise.all(returnProductRequests);
            };
            InventoryDocumentSerialNumberManagementViewModel.prototype._updateSerialNumberByClientRequestAsync = function (correlationId, serialNumber, updateAgainstSerialNumberLine, documentLine, serialNumberLine) {
                var updateRequest = new Commerce.Inventory.UpdateInventoryDocumentSerialNumberLineClientRequest(correlationId, this.document(), serialNumber, Commerce.ObjectExtensions.isNullOrUndefined(documentLine) ? serialNumberLine.WorkDocumentLineId : documentLine.LineId, updateAgainstSerialNumberLine && !Commerce.ObjectExtensions.isNullOrUndefined(serialNumberLine) ? serialNumberLine.LineId : null);
                return this.context.runtime.executeAsync(updateRequest);
            };
            InventoryDocumentSerialNumberManagementViewModel.prototype._updateLocalDocumentAndSerialNumberLines = function (document, serialNumberLine, product, refreshCurrentPivot) {
                this.document(document);
                var line = new Commerce.Client.Entities.InventoryInboundOutboundDocumentSerialNumberLineWithProduct(serialNumberLine, product);
                if (this._singleOrderLineSerialNumberLineIndexes.hasItem(line.LineId)) {
                    this._singleOrderLineSerialNumberLineCache[this._singleOrderLineSerialNumberLineIndexes.getItem(line.LineId)] = line;
                    this.updateSingleOrderLineDataListCallback()(this._singleOrderLineSerialNumberLineIndexes.getItem(line.LineId), line);
                }
                if (this._allOrderLinesSerialNumberLineIndexes.hasItem(line.LineId)) {
                    this._allOrderLinesSerialNumberLineCache[this._allOrderLinesSerialNumberLineIndexes.getItem(line.LineId)] = line;
                    this.updateAllOrderLinesDataListCallback()(this._allOrderLinesSerialNumberLineIndexes.getItem(line.LineId), line);
                }
                if (this._selectedLineForSingleOrderLine().length === 1 && this._selectedLineForSingleOrderLine()[0].LineId === line.LineId) {
                    this._selectedLineForSingleOrderLine([line]);
                }
                if (this._selectedLineForAllOrderLines().length === 1 && this._selectedLineForAllOrderLines()[0].LineId === line.LineId) {
                    this._selectedLineForAllOrderLines([line]);
                }
                if (refreshCurrentPivot) {
                    this._refreshCurrentPivot();
                }
                return this._updateLinesSummaryAsync();
            };
            InventoryDocumentSerialNumberManagementViewModel.COMMAND_DEFINITIONS = [
                ViewModels.InventoryDocumentSerialNumberManagementRegisterSerialNumberCommand,
                ViewModels.InventoryDocumentSerialNumberManagementGoBackCommand,
            ];
            return InventoryDocumentSerialNumberManagementViewModel;
        }(ViewModels.ComponentHostViewModelBase));
        ViewModels.InventoryDocumentSerialNumberManagementViewModel = InventoryDocumentSerialNumberManagementViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var InventoryDocumentShippingAndReceivingViewModelActiveMode;
        (function (InventoryDocumentShippingAndReceivingViewModelActiveMode) {
            InventoryDocumentShippingAndReceivingViewModelActiveMode[InventoryDocumentShippingAndReceivingViewModelActiveMode["UpdateNowList"] = 0] = "UpdateNowList";
            InventoryDocumentShippingAndReceivingViewModelActiveMode[InventoryDocumentShippingAndReceivingViewModelActiveMode["FullOrderList"] = 1] = "FullOrderList";
        })(InventoryDocumentShippingAndReceivingViewModelActiveMode = ViewModels.InventoryDocumentShippingAndReceivingViewModelActiveMode || (ViewModels.InventoryDocumentShippingAndReceivingViewModelActiveMode = {}));
        var InventoryDocumentShippingAndReceivingViewModel = (function (_super) {
            __extends(InventoryDocumentShippingAndReceivingViewModel, _super);
            function InventoryDocumentShippingAndReceivingViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                _this.defaultPageSize = 80;
                _this._validateOptions(options);
                _this._fullOrderLineIndexes = new Commerce.Dictionary();
                _this._fullOrderLineCache = [];
                _this._switchToFullOrderListCallback = options.switchToFullOrderListCallback;
                _this._switchToUpdateNowListCallback = options.switchToUpdateNowListCallback;
                _this._selectUpdateNowLinesCallback = options.selectUpdateNowLinesCallback;
                _this._selectFullOrderLinesCallback = options.selectFullOrderLinesCallback;
                _this._initialSelectedProduct = options.selectedProduct;
                _this._initialCorrelationIdForSelectedProduct = options.correlationIdForSelectedProduct;
                _this._initialSelectedProductSearchText = options.selectedProductSearchText;
                _this._productDataCache = new Commerce.Dictionary();
                _this._getProductDataRequests = new Commerce.Dictionary();
                _this.document = ko.observable(options.document);
                _this.activeMode = ko.observable(InventoryDocumentShippingAndReceivingViewModelActiveMode.UpdateNowList);
                _this.updateNowLines = ko.observableArray(Commerce.ArrayExtensions.hasElements(options.initialUpdateNowLines) ? options.initialUpdateNowLines : []);
                _this.isDetailsPaneVisible = ko.observable(true);
                _this.isDetailsPaneQuantityExpanded = ko.observable(true);
                _this.reloadFullOrderListCallback = ko.observable(function () { return null; });
                _this.updateFullOrderLineCallback = ko.observable(function () { return null; });
                _this._selectedLinesForUpdateNowList = ko.observableArray([]);
                _this._selectedLinesForFullOrderList = ko.observableArray([]);
                _this.isPhoneDetailVisible = ko.observable(false);
                _this.packingSlipForPrint = ko.observable(null);
                _this.packingSlipForPreview = ko.observable(null);
                _this.packingSlipText = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.isValidationEnabled = ko.observable(Commerce.ApplicationSession.instance.featureStateContext.isFeatureEnabled(Commerce.Client.Entities.FeatureNameEnum.InboundOutboundInventoryValidationFeature));
                _this.totalFullOrderListQuantity = ko.observable(0);
                _this.selectedLines = ko.computed(function () {
                    switch (_this.activeMode()) {
                        case InventoryDocumentShippingAndReceivingViewModelActiveMode.UpdateNowList: return _this._selectedLinesForUpdateNowList();
                        case InventoryDocumentShippingAndReceivingViewModelActiveMode.FullOrderList: return _this._selectedLinesForFullOrderList();
                        default: return [];
                    }
                });
                _this.isDocumentEditable = ko.computed(function () {
                    return !(_this.document().SourceDocument.StatusValue === Commerce.Proxy.Entities.InventoryInboundOutboundSourceDocumentStatus.Received
                        || _this.document().SourceDocument.StatusValue === Commerce.Proxy.Entities.InventoryInboundOutboundSourceDocumentStatus.Cancelled
                        || (_this.document().SourceDocument.StatusValue === Commerce.Proxy.Entities.InventoryInboundOutboundSourceDocumentStatus.Shipped
                            && _this.document().SourceDocument.Sender === Commerce.ApplicationContext.Instance.deviceConfiguration.InventLocationId)
                        || _this.document().StatusValue === Commerce.Proxy.Entities.InventoryDocumentStatus.Committed
                        || _this.document().StatusValue === Commerce.Proxy.Entities.InventoryDocumentStatus.ProcessSucceeded);
                });
                _this.isDocumentPaused = ko.computed(function () { return _this.document().StatusValue === Commerce.Proxy.Entities.InventoryDocumentStatus.Paused; });
                _this.isDocumentPurchaseOrder = ko.computed(function () {
                    return _this.document().OperationTypeValue === Commerce.Proxy.Entities.InventoryInboundOutboundDocumentOperationType.ReceivePurchaseOrder;
                });
                _this.totalUpdateNowLines = ko.computed(function () { return _this.updateNowLines().length; });
                _this.totalUpdateNowQuantity = ko.computed(function () { return _this.updateNowLines().reduce(function (sum, line) { return sum + line.QuantityToUpdate; }, 0); });
                _this.isDocumentStartedWorking = ko.computed(function () { return !Commerce.StringExtensions.isNullOrWhitespace(_this.document().WorkDocumentId); });
                _this.canDocumentBePaused = ko.computed(function () {
                    return _this.isDocumentEditable()
                        && _this.isDocumentStartedWorking()
                        && _this.document().StatusValue === Commerce.Proxy.Entities.InventoryDocumentStatus.InProgress;
                });
                _this.isReceivingOperation = ko.computed(function () {
                    return _this.document().OperationTypeValue !== Commerce.Proxy.Entities.InventoryInboundOutboundDocumentOperationType.ShipTransferOrder;
                });
                _this.dataListColumns = ko.computed(function () { return _this._getDataListColumns(); });
                _this.singleSelectedLine = ko.computed(function () {
                    if (_this.selectedLines().length === 1) {
                        return _this.selectedLines()[0];
                    }
                    return null;
                });
                _this.singleSelectedLineProductDimensionsDescription = ko.computed(function () {
                    if (_this.selectedLines().length === 1) {
                        return Commerce.SimpleProductHelper.getProductDimensionsDescription(_this.selectedLines()[0].product.Dimensions);
                    }
                    return Commerce.StringExtensions.EMPTY;
                });
                _this.isSingleSelectedLineNoteEmpty = ko.computed(function () {
                    if (_this.selectedLines().length === 1) {
                        return Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedLines()[0].Note) || Commerce.StringExtensions.isEmpty(_this.selectedLines()[0].Note);
                    }
                    return false;
                });
                _this.isSingleSelectedLineWmsLocationIdEmpty = ko.computed(function () {
                    if (_this.selectedLines().length === 1) {
                        return Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedLines()[0].LocationId)
                            || Commerce.StringExtensions.isEmpty(_this.selectedLines()[0].LocationId);
                    }
                    return false;
                });
                _this.isSingleSelectedLineLocationActive = ko.computed(function () {
                    if (_this.selectedLines().length === 1) {
                        return _this.selectedLines()[0].product.Behavior.IsStorageDimensionGroupLocationActive;
                    }
                    return false;
                });
                _this.isSingleSelectedLineSerialNumberActive = ko.computed(function () {
                    if (_this.selectedLines().length === 1) {
                        return _this.selectedLines()[0].product.Behavior.IsSerialNumberRequired;
                    }
                    return false;
                });
                _this.singleSelectedLineQuantityCanceled = ko.computed(function () {
                    if (_this.selectedLines().length === 1 && _this.selectedLines()[0].SourceDocumentLine.QuantityCancelled > 0) {
                        return _this.selectedLines()[0].SourceDocumentLine.QuantityCancelled;
                    }
                    return 0;
                });
                _this.singleSelectedLineDecimalPrecision = ko.computed(function () {
                    if (_this.selectedLines().length === 1) {
                        var line = _this.selectedLines()[0];
                        return Math.max(Commerce.NumberExtensions.getNumberOfDecimals(line.SourceDocumentLine.QuantityOrdered), Commerce.NumberExtensions.getNumberOfDecimals(line.SourceDocumentLine.QuantityShipped), Commerce.NumberExtensions.getNumberOfDecimals(line.SourceDocumentLine.QuantityReceived), Commerce.NumberExtensions.getNumberOfDecimals(line.QuantityToUpdate));
                    }
                    return 0;
                });
                _this._singleSelectedLineQuantityOverReceivedOrShipped = ko.computed(function () {
                    if (_this.selectedLines().length === 1) {
                        var line = _this.selectedLines()[0];
                        if (!_this.isDocumentEditable()) {
                            if (line.SourceDocumentLine.QuantityCancelled < 0) {
                                return -line.SourceDocumentLine.QuantityCancelled;
                            }
                        }
                        else if (line.QuantityToUpdate > line.SourceDocumentLine.QuantityOrdered) {
                            return Commerce.NumberExtensions.roundToNDigits(line.QuantityToUpdate - line.SourceDocumentLine.QuantityOrdered, _this.singleSelectedLineDecimalPrecision());
                        }
                    }
                    return 0;
                });
                _this.singleSelectedLineQuantityOverReceived = ko.computed(function () {
                    if (_this.isReceivingOperation()) {
                        return _this._singleSelectedLineQuantityOverReceivedOrShipped();
                    }
                    return 0;
                });
                _this.singleSelectedLineQuantityOverShipped = ko.computed(function () {
                    if (!_this.isReceivingOperation()) {
                        return _this._singleSelectedLineQuantityOverReceivedOrShipped();
                    }
                    return 0;
                });
                _this.isNoLineSelected = ko.computed(function () { return _this.selectedLines().length === 0; });
                _this.isInUpdateNowListView = ko.computed(function () {
                    return _this.activeMode() === InventoryDocumentShippingAndReceivingViewModelActiveMode.UpdateNowList;
                });
                _this.isInFullOrderListView = ko.computed(function () {
                    return _this.activeMode() === InventoryDocumentShippingAndReceivingViewModelActiveMode.FullOrderList;
                });
                _this.emptyUpdateNowListTips = ko.computed(function () {
                    if (_this.isDocumentPaused() || _this.isDocumentStartedWorking()) {
                        return "string_12435";
                    }
                    return _this.isReceivingOperation() ? "string_12427" : "string_12509";
                });
                _this.isUpdateNowListViewVisible = ko.computed(function () { return _this.isDocumentEditable() && _this.isReceivingOperation(); });
                _this.updateNowListHeader = ko.computed(function () { return _this.isReceivingOperation() ? "string_12401" : "string_12501"; });
                _this.fullOrderListHeader = ko.computed(function () {
                    if (!_this.isUpdateNowListViewVisible()) {
                        return _this.document().SourceDocument.DocumentId;
                    }
                    return _this.context.stringResourceManager.getString("string_12402");
                });
                _this.noLineSelectedTipsPlaceholder = ko.computed(function () {
                    if (!_this.isDocumentEditable()) {
                        return "string_12431";
                    }
                    if (!_this.isDocumentStartedWorking()) {
                        return _this.isReceivingOperation() ? "string_12428" : "string_12510";
                    }
                    return _this.isReceivingOperation() ? "string_12429" : "string_12511";
                });
                _this.detailsPaneQuantityRemaining = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this.singleSelectedLine())) {
                        return 0;
                    }
                    return _this._getLineRemainingQuantity(_this.singleSelectedLine());
                });
                _this.receiveOrShipAllButtonLabel = ko.computed(function () {
                    return _this.isReceivingOperation() ? "string_12405" : "string_12502";
                });
                _this.pauseButtonLabel = ko.computed(function () {
                    return _this.isReceivingOperation() ? "string_12407" : "string_12503";
                });
                _this.finishButtonLabel = ko.computed(function () {
                    return _this.isReceivingOperation() ? "string_12408" : "string_12504";
                });
                _this.keyInProductButtonLabel = ko.computed(function () {
                    return _this.isReceivingOperation() ? "string_12410" : "string_12505";
                });
                _this.resumeButtonLabel = ko.computed(function () {
                    return _this.isReceivingOperation() ? "string_12411" : "string_12506";
                });
                _this.cancelButtonLabel = ko.computed(function () {
                    return _this.isReceivingOperation() ? "string_12454" : "string_12515";
                });
                _this.detailsPaneUpdateNowQuantityLabel = ko.computed(function () {
                    return _this.isReceivingOperation() ? "string_12436" : "string_12512";
                });
                _this.detailsPaneEditUpdateNowQuantityLabel = ko.computed(function () {
                    return _this.isReceivingOperation() ? "string_12437" : "string_12513";
                });
                _this.detailsPaneWmsLocationLabel = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this.singleSelectedLine())) {
                        return Commerce.StringExtensions.EMPTY;
                    }
                    if (Commerce.StringExtensions.isNullOrWhitespace(_this.singleSelectedLine().LocationId)) {
                        return _this.context.stringResourceManager.getString("string_12434");
                    }
                    return _this.singleSelectedLine().LocationId;
                });
                _this.isPackingSlipSelected = ko.computed(function () { return !Commerce.ObjectExtensions.isNullOrUndefined(_this.packingSlipForPreview()); });
                _this.isSelectedPackingSlipPrintable = ko.computed(function () { return Commerce.ReceiptHelper.canReceiptBePrinted(_this.packingSlipForPrint()); });
                _this.isSelectedLineCloseLineEnabled = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this.singleSelectedLine()) || !_this._isSelectedLineCloseable()) {
                        return false;
                    }
                    return _this.singleSelectedLine().IsCloseLine;
                });
                _this.isCloseLineAllowedForCompany = ko.observable(false);
                _this.isSelectedLineCloseLineToggleEnabled = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this.singleSelectedLine())) {
                        return false;
                    }
                    return _this._isSelectedLineCloseable();
                });
                _this.totalFullOrderListLines = ko.computed(function () { return _this.document().SourceDocument.TotalLines; });
                _this.totalQuantityToDisplay = ko.computed(function () {
                    if (_this.isInUpdateNowListView()) {
                        return _this.totalUpdateNowQuantity();
                    }
                    else if (!_this.isDocumentEditable()) {
                        if (_this.isReceivingOperation()) {
                            return _this.document().SourceDocument.TotalQuantityReceived;
                        }
                        return _this.document().SourceDocument.TotalQuantityShipped;
                    }
                    return _this.totalFullOrderListQuantity();
                });
                if (!_this.isUpdateNowListViewVisible()) {
                    _this.activeMode(InventoryDocumentShippingAndReceivingViewModelActiveMode.FullOrderList);
                }
                _this._productLastLocationById = new Commerce.Dictionary();
                for (var _i = 0, _a = _this.updateNowLines(); _i < _a.length; _i++) {
                    var line = _a[_i];
                    _this._productLastLocationById.setItem(line.ProductId, line.LocationId);
                }
                _this._isExtensionCommandViewModelBusy = ko.observable(false);
                if (Commerce.ObjectExtensions.isNullOrUndefined(InventoryDocumentShippingAndReceivingViewModel._viewExtensionsManager)) {
                    _this._extensionCommandViewModels = [];
                }
                else {
                    _this._extensionCommandViewModels = InventoryDocumentShippingAndReceivingViewModel._viewExtensionsManager.getAppBarCommands()
                        .map(function (command) {
                        var commandVM = new ViewModels.CommandViewModel(command);
                        var commandState = {
                            document: _this.document(),
                            operationType: _this.isReceivingOperation()
                                ? Commerce.Client.Entities.InventoryDocumentOperationType.Inbound
                                : Commerce.Client.Entities.InventoryDocumentOperationType.Outbound
                        };
                        commandVM.sendMessage("Initialize", commandState);
                        commandVM.addMessageHandler("RefreshDocumentLines", function () {
                            _this.onSyncDocumentAsync();
                        });
                        commandVM.addMessageHandler("IsProcessingChanged", function (isProcessing) {
                            if (isProcessing) {
                                _this._isExtensionCommandViewModelBusy(true);
                            }
                            else {
                                var isAnyCommandProcessing = _this._extensionCommandViewModels.some(function (vm) {
                                    return vm.isProcessing;
                                });
                                _this._isExtensionCommandViewModelBusy(isAnyCommandProcessing);
                            }
                        });
                        return commandVM;
                    });
                    _this._isBusyWhen(_this._isExtensionCommandViewModelBusy);
                    _this._subscribeExtensionsToChanges();
                }
                return _this;
            }
            Object.defineProperty(InventoryDocumentShippingAndReceivingViewModel, "viewExtensionManager", {
                set: function (manager) {
                    InventoryDocumentShippingAndReceivingViewModel._viewExtensionsManager = manager;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(InventoryDocumentShippingAndReceivingViewModel.prototype, "extensionCommandViewModels", {
                get: function () {
                    return this._extensionCommandViewModels;
                },
                enumerable: true,
                configurable: true
            });
            InventoryDocumentShippingAndReceivingViewModel.prototype.loadAsync = function () {
                var _this = this;
                var promisesToFulfill = [];
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._initialSelectedProduct)) {
                    promisesToFulfill.push(this._keyInProductWithLocationAndQuantityAsync(this._initialCorrelationIdForSelectedProduct, this._initialSelectedProduct, this._initialSelectedProductSearchText)
                        .then(function () {
                        _this._initialSelectedProduct = null;
                        _this._initialCorrelationIdForSelectedProduct = Commerce.StringExtensions.EMPTY;
                        _this._initialSelectedProductSearchText = Commerce.StringExtensions.EMPTY;
                    }));
                }
                promisesToFulfill.push(this._allowTransferOrderUnderDeliveryAsync()
                    .then(function (allowUnderDelivery) {
                    _this.isCloseLineAllowedForCompany(allowUnderDelivery);
                }));
                promisesToFulfill.push(this._updateFullOrderTabSummaryAsync());
                return Commerce.AsyncResult.fromPromise(Promise.all(promisesToFulfill)
                    .catch(this._handleAsyncOperationRejection));
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype.reloadFullOrderLines = function () {
                this.reloadFullOrderListCallback()();
                this._updateSelectedLines([], InventoryDocumentShippingAndReceivingViewModelActiveMode.FullOrderList);
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype.switchSelectionMode = function (event) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(event.detail)) {
                    if (!this.isUpdateNowListViewVisible() || event.detail.index !== 0) {
                        this.activeMode(InventoryDocumentShippingAndReceivingViewModelActiveMode.FullOrderList);
                    }
                    else {
                        this.activeMode(InventoryDocumentShippingAndReceivingViewModelActiveMode.UpdateNowList);
                    }
                }
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype.onShowHeaderAsync = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var documentHeaderDialogRequest = new Commerce.Inventory.ShowInventoryDocumentHeaderClientRequest(correlationId, this.document());
                return this.context.runtime.executeAsync(documentHeaderDialogRequest)
                    .then(function (response) {
                    if (!response.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(response.data.result)) {
                        _this.document(response.data.result);
                        return { canceled: false, data: null };
                    }
                    return { canceled: true, data: null };
                }).catch(this._handleAsyncOperationRejection);
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype.onPackingSlipHandlerAsync = function () {
                return this._onPackingSlipHandlerAsync(false);
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype.printPackingSlipAsync = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.packingSlipForPrint())) {
                    var activity = new Commerce.Activities.PrintReceiptActivity({
                        receipts: [this.packingSlipForPrint()],
                        notifyOnNoPrintableReceipts: true
                    });
                    return activity.execute();
                }
                else {
                    return Commerce.VoidAsyncResult.createResolved();
                }
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype.clearPackingSlipSelectionHandler = function () {
                this.packingSlipForPrint(null);
                this.packingSlipForPreview(null);
                this.packingSlipText(Commerce.StringExtensions.EMPTY);
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype.onReceiveOrShipAllLinesAsync = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                return this._startWorkingAsync(correlationId).then(function (response) {
                    if (!response.canceled) {
                        return _this.inventoryManager.receiveOrShipAllLinesAsync(_this.document().WorkDocumentId).getPromise()
                            .then(function () { return ({ canceled: false, data: null }); });
                    }
                    return { canceled: true, data: null };
                }).then(function (response) {
                    if (response.canceled) {
                        return response;
                    }
                    return _this._updateFullOrderTabSummaryAsync().then(function (summaryResponse) {
                        var canceled = summaryResponse.canceled;
                        return { canceled: canceled, data: canceled ? null : response.data };
                    });
                }).then(function (response) {
                    if (response.canceled) {
                        return { canceled: true, data: null };
                    }
                    _this._receiveAllOrShipAllFlag = true;
                    _this.reloadFullOrderListCallback()();
                    _this._updateSelectedLines([], InventoryDocumentShippingAndReceivingViewModelActiveMode.FullOrderList);
                    _this.updateNowLines([]);
                    _this._switchToFullOrderListCallback();
                    var showMessageDialogClientRequest = new Commerce.ShowMessageDialogClientRequest({
                        title: _this.context.stringResourceManager.getString(_this.isReceivingOperation() ? "string_12405" : "string_12502"),
                        message: _this.context.stringResourceManager.getString("string_12420"),
                        showCloseX: true,
                        button1: {
                            id: Commerce.Activities.DisplayMessageOperationIds.OK,
                            result: "OK_RESULT",
                            label: _this.context.stringResourceManager.getString("string_75"),
                            isPrimary: true
                        },
                    });
                    return _this.context.runtime.executeAsync(showMessageDialogClientRequest).then(function () { return ({ canceled: false, data: null }); });
                }).catch(function (errors) {
                    return _this._exitOrPromptToUpdateWorkingTerminalAsync(correlationId, errors).then(function (response) {
                        if (!response.canceled) {
                            return _this.onReceiveOrShipAllLinesAsync();
                        }
                        return { canceled: true, data: null };
                    });
                }).catch(this._handleAsyncOperationRejection);
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype.onPauseDocumentAsync = function () {
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                return this._pauseDocumentAsync(correlationId, true);
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype.onCancelDocumentAsync = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var cancelRequest = new Commerce.Inventory.CancelInventoryDocumentClientRequest(correlationId, this.document());
                return this.context.runtime.executeAsync(cancelRequest).then(function (response) {
                    if (!response.canceled) {
                        _this._navigateToInventoryDocumentListPage();
                        return { canceled: false, data: null };
                    }
                    else if (!Commerce.ObjectExtensions.isNullOrUndefined(response.data.result)) {
                        _this.document(response.data.result);
                    }
                    return { canceled: true, data: null };
                }).catch(this._handleAsyncOperationRejection);
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype.onCommitDocumentAsync = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var commitRequest = new Commerce.Inventory.CommitInventoryDocumentClientRequest(correlationId, this.document());
                return this.context.runtime.executeAsync(commitRequest)
                    .then(function (response) {
                    if (response.canceled) {
                        return { canceled: true, data: null };
                    }
                    _this.document(response.data.result);
                    var inventoryManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IInventoryManagerName);
                    return inventoryManager.syncInventorySourceDocumentAsync(_this.document().SourceDocument.DocumentId, _this.document().SourceDocument.DocumentTypeValue).getPromise().then(function () {
                        _this._needToUpdateNowLinesWhenRefreshFullOrderLines = true;
                        _this.reloadFullOrderListCallback()();
                        return _this._validateAsync(correlationId, _this.document(), false)
                            .then(function (response) {
                            if (response.canceled) {
                                return { canceled: true, data: null };
                            }
                            var feedbackRequest = new Commerce.Inventory.ShowInventoryDocumentAsyncFeedbackClientRequest(correlationId, _this.document(), Commerce.Client.Entities.InventoryDocumentAsyncFeedbackActionType.Commit);
                            return _this.context.runtime.executeAsync(feedbackRequest)
                                .then(function (response) {
                                if (response.canceled) {
                                    return { canceled: true, data: null };
                                }
                                _this._navigateToInventoryDocumentListPage();
                                return { canceled: false, data: null };
                            });
                        });
                    });
                }).catch(this._handleAsyncOperationRejection);
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype.onToggleDetailsPane = function () {
                this.isDetailsPaneVisible(!this.isDetailsPaneVisible());
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype.onToggleDetailsPaneQuantity = function () {
                this.isDetailsPaneQuantityExpanded(!this.isDetailsPaneQuantityExpanded());
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype.onHidePhoneDetail = function () {
                this.isPhoneDetailVisible(false);
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype.onGotoFullOrderList = function () {
                this._switchToFullOrderListCallback();
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype.onUpdateLineQuantityAsync = function () {
                var _this = this;
                if (this.selectedLines().length === 1) {
                    var correlationId_8 = Commerce.LoggerHelper.getNewCorrelationId();
                    var line_4 = this.selectedLines()[0];
                    var quantityBeforeUpdate_1 = line_4.QuantityToUpdate;
                    return this._startWorkingAsync(correlationId_8)
                        .then(function (response) {
                        if (!response.canceled) {
                            return _this._editLineQuantityAsync(_this._createEditLineOptions(correlationId_8, line_4));
                        }
                        return { canceled: true, data: null };
                    })
                        .then(function (response) {
                        if (!response.canceled) {
                            return _this._submitUpdatedLineToServerAsync(response.data);
                        }
                        return { canceled: true, data: null };
                    }).then(function (response) {
                        if (response.canceled) {
                            return response;
                        }
                        return _this._updateFullOrderTabSummaryAsync().then(function (summaryResponse) {
                            var canceled = summaryResponse.canceled;
                            return { canceled: canceled, data: canceled ? null : response.data };
                        });
                    }).then(function (response) {
                        if (!response.canceled) {
                            if (_this.isReceivingOperation()
                                && response.data.line.QuantityToUpdate > 0
                                && response.data.line.product.Behavior.IsSerialNumberRequired) {
                                if (response.data.line.QuantityToUpdate - quantityBeforeUpdate_1 === 1) {
                                    return _this._registerSerialNumberForLineAsync(correlationId_8, response.data.line);
                                }
                                return _this._promptToRegisterSerialNumberAsync(correlationId_8, response.data.line)
                                    .then(function (response) {
                                    return { canceled: !response.canceled, data: null };
                                });
                            }
                            return { canceled: false, data: null };
                        }
                        return { canceled: true, data: null };
                    }).catch(this._handleAsyncOperationRejection);
                }
                return Promise.resolve({ canceled: true, data: null });
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype.onUpdateLineCloseLineAsync = function (closeLineEnabled) {
                var _this = this;
                if (this.selectedLines().length === 1 && closeLineEnabled !== this.selectedLines()[0].IsCloseLine) {
                    var correlationId_9 = Commerce.LoggerHelper.getNewCorrelationId();
                    var line_5 = this.selectedLines()[0];
                    return this._isBusyUntil(Commerce.AsyncResult.fromPromise(this._startWorkingAsync(correlationId_9)
                        .then(function (response) {
                        if (!response.canceled) {
                            var editOptions = _this._createEditLineOptions(correlationId_9, line_5);
                            editOptions.result.isCloseLine = closeLineEnabled;
                            return _this._submitUpdatedLineToServerAsync(editOptions);
                        }
                        return { canceled: true, data: null };
                    }).catch(function (error) {
                        _this._selectedLinesForFullOrderList.valueHasMutated();
                        return _this._handleAsyncOperationRejection(error);
                    }))).getPromise();
                }
                return Promise.resolve({ canceled: true, data: null });
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype.onUpdateLineLocationAsync = function () {
                var _this = this;
                if (this.selectedLines().length === 1) {
                    var correlationId_10 = Commerce.LoggerHelper.getNewCorrelationId();
                    var line_6 = this.selectedLines()[0];
                    return this._startWorkingAsync(correlationId_10)
                        .then(function (response) {
                        if (!response.canceled) {
                            return _this._editLineLocationAsync(_this._createEditLineOptions(correlationId_10, line_6));
                        }
                        return { canceled: true, data: null };
                    }).then(function (response) {
                        if (!response.canceled) {
                            return _this._submitUpdatedLineToServerAsync(response.data);
                        }
                        return { canceled: true, data: null };
                    }).catch(this._handleAsyncOperationRejection);
                }
                return Promise.resolve({ canceled: true, data: null });
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype.onUpdateLineNoteAsync = function () {
                var _this = this;
                if (this.selectedLines().length === 1) {
                    var correlationId_11 = Commerce.LoggerHelper.getNewCorrelationId();
                    var line_7 = this.selectedLines()[0];
                    return this._startWorkingAsync(correlationId_11)
                        .then(function (response) {
                        if (!response.canceled) {
                            return _this._editLineNoteAsync(_this._createEditLineOptions(correlationId_11, line_7));
                        }
                        return { canceled: true, data: null };
                    }).then(function (response) {
                        if (!response.canceled) {
                            return _this._submitUpdatedLineToServerAsync(response.data);
                        }
                        return { canceled: true, data: null };
                    }).catch(this._handleAsyncOperationRejection);
                }
                return Promise.resolve({ canceled: true, data: null });
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype.onKeyInProductAsync = function () {
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                return this._keyInProductWithLocationAndQuantityAsync(correlationId, null, Commerce.StringExtensions.EMPTY)
                    .then(function (response) { return ({ canceled: response.canceled, data: null }); })
                    .catch(this._handleAsyncOperationRejection);
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype.onScanProductAsync = function (barcode) {
                if (this.isDocumentEditable()) {
                    var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                    return this._scanProductWithQuantityAndLocationAsync(correlationId, barcode)
                        .then(function (response) { return ({ canceled: response.canceled, data: null }); })
                        .catch(this._handleAsyncOperationRejection);
                }
                return Promise.resolve({ canceled: true, data: null });
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype.onUpdateNowListSelectionChanged = function (lines) {
                this._updateSelectedLines(lines, InventoryDocumentShippingAndReceivingViewModelActiveMode.UpdateNowList);
                if (this.selectedLines().length === 1) {
                    if (this._isUpdateNowListSelectionChangeTriggeredByUpdateLinesByProduct) {
                        this._isUpdateNowListSelectionChangeTriggeredByUpdateLinesByProduct = false;
                    }
                    else {
                        this.isPhoneDetailVisible(true);
                    }
                }
                else {
                    this.isPhoneDetailVisible(false);
                }
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype.onFullOrderListSelectionChanged = function (lines) {
                this._updateSelectedLines(lines, InventoryDocumentShippingAndReceivingViewModelActiveMode.FullOrderList);
                this.isPhoneDetailVisible(lines.length === 1);
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype.onUpdatedUpdateNowList = function (dataListViewModel) {
                if (this.isUpdateNowListViewVisible()) {
                    this._selectUpdateNowLinesCallback([this._lastUpdatedUpdateNowLine]);
                }
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype.onUpdatedFullOrderList = function (dataListViewModel) {
                if (this._receiveAllOrShipAllFlag) {
                    this._receiveAllOrShipAllFlag = false;
                    this._selectFullOrderLinesCallback([]);
                }
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype.onNavigateBack = function () {
                if (Commerce.Config.isPhone && this.isPhoneDetailVisible()) {
                    this.isPhoneDetailVisible(false);
                    return false;
                }
                if (this.isDocumentStartedWorking()
                    && this.document().StatusValue === Commerce.Proxy.Entities.InventoryDocumentStatus.InProgress
                    && this.document().TerminalId === Commerce.ApplicationContext.Instance.deviceConfiguration.TerminalId) {
                    if (this._skipPausingDocumentOnNavigateBack) {
                        this._skipPausingDocumentOnNavigateBack = false;
                        return true;
                    }
                    var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                    this._pauseDocumentAsync(correlationId, false);
                    return false;
                }
                return true;
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype.getFullOrderLinesAsync = function (pageSize, skip) {
                var _this = this;
                var criteria = {
                    SourceDocumentId: this.document().SourceDocument.DocumentId,
                    SourceDocumentTypeValue: this.document().SourceDocument.DocumentTypeValue,
                };
                var asyncQueue = new Commerce.AsyncQueue();
                var originalLines;
                asyncQueue
                    .enqueue(function () {
                    return _this.inventoryManager.searchInventoryDocumentLinesAsync(criteria, pageSize, skip)
                        .done(function (result) {
                        originalLines = result;
                    });
                }).enqueue(function (result) {
                    var productIds = result.map(function (elem) { return elem.SourceDocumentLine.ProductId; });
                    return Commerce.AsyncResult.fromPromise(_this._getProductsByIdsAsync(productIds));
                }).enqueue(function (products) {
                    var lines = originalLines.map(function (elem, index) {
                        return new Commerce.Client.Entities.InventoryInboundOutboundDocumentLineWithProduct(elem, products[index]);
                    });
                    if (skip === 0) {
                        _this._fullOrderLineIndexes.clear();
                        _this._fullOrderLineCache = [];
                    }
                    lines.forEach(function (value, index) {
                        _this._fullOrderLineIndexes.setItem(_this._getDocumentLineKey(value), index + skip);
                        _this._fullOrderLineCache.push(value);
                    });
                    if (_this._needToUpdateNowLinesWhenRefreshFullOrderLines) {
                        _this._needToUpdateNowLinesWhenRefreshFullOrderLines = false;
                        _this._tryToSyncUpdateNowLinesWithFullOrderLines();
                    }
                    return Commerce.AsyncResult.createResolved(lines);
                });
                return this._isBusyUntil(asyncQueue.run())
                    .map(function (result) {
                    _this._sendMessageToExtensions("DocumentLinesLoaded", { documentLines: result.data, pageSize: pageSize, skip: skip });
                    return result.data;
                }).fail(this._handleAsyncOperationRejection);
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype.areDocumentLinesSameRecord = function (source, target) {
                return (!Commerce.ObjectExtensions.isNullOrUndefined(source) && !Commerce.ObjectExtensions.isNullOrUndefined(target))
                    && source.SourceDocumentRecordId === target.SourceDocumentRecordId
                    && source.SourceDocumentTypeValue === target.SourceDocumentTypeValue
                    && source.SourceDocumentLineRecordId === target.SourceDocumentLineRecordId;
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype.onNavigateToSerialNumberViewAsync = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                return this._startWorkingAsync(correlationId)
                    .then(function (response) {
                    if (!response.canceled) {
                        var options = {
                            correlationId: correlationId,
                            document: _this.document(),
                        };
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.singleSelectedLine())
                            && !Commerce.StringExtensions.isNullOrWhitespace(_this.singleSelectedLine().LineId)
                            && _this.singleSelectedLine().product.Behavior.IsSerialNumberRequired) {
                            options.documentLine = _this.singleSelectedLine();
                        }
                        Commerce.ViewModelAdapter.navigate("InventoryDocumentSerialNumberManagementView", options);
                        return { canceled: false, data: null };
                    }
                    return { canceled: true, data: null };
                }).catch(this._handleAsyncOperationRejection);
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype.onSyncDocumentAsync = function () {
                var _this = this;
                var inventoryManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IInventoryManagerName);
                return inventoryManager.syncInventorySourceDocumentAsync(this.document().SourceDocument.DocumentId, this.document().SourceDocument.DocumentTypeValue).getPromise().then(function () {
                    _this._needToUpdateNowLinesWhenRefreshFullOrderLines = true;
                    _this.reloadFullOrderListCallback()();
                    return { canceled: false, data: null };
                }).catch(this._handleAsyncOperationRejection);
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype.onValidateAsync = function () {
                return this._validateAsync(Commerce.LoggerHelper.getNewCorrelationId(), this.document(), true);
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._validateOptions = function (options) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw Error("'options' is required for InventoryDocumentShippingAndReceivingViewModel");
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.document)) {
                    throw Error("'options.document' is required for InventoryDocumentShippingAndReceivingViewModel");
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.switchToFullOrderListCallback)) {
                    throw Error("'options.switchToFullOrderListCallback' is required for InventoryDocumentShippingAndReceivingViewModel");
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.switchToUpdateNowListCallback)) {
                    throw Error("'options.switchToUpdateNowListCallback' is required for InventoryDocumentShippingAndReceivingViewModel");
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.selectUpdateNowLinesCallback)) {
                    throw Error("'options.selectUpdateNowLinesCallback' is required for InventoryDocumentShippingAndReceivingViewModel");
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.selectFullOrderLinesCallback)) {
                    throw Error("'options.selectFullOrderLinesCallback' is required for InventoryDocumentShippingAndReceivingViewModel");
                }
                var hasInitialSelectedProduct = !Commerce.ObjectExtensions.isNullOrUndefined(options.selectedProduct);
                var hasInitialCorrelationIdForSelectedProduct = !Commerce.StringExtensions.isNullOrWhitespace(options.correlationIdForSelectedProduct);
                if (hasInitialSelectedProduct !== hasInitialCorrelationIdForSelectedProduct) {
                    throw Error("Both 'options.selectedProduct' and 'options.correlationIdForSelectedProduct' should be provided or none at all.");
                }
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._getDataListColumns = function () {
                var _this = this;
                if (this.isDocumentEditable()) {
                    return [
                        {
                            titleResx: "string_12413",
                            ratio: 15,
                            minWidth: 150,
                            collapseOrder: 6,
                            computeValue: function (row) { return row.product.ItemId; },
                            converter: "Commerce.Core.Converter.textContentFormatter",
                        },
                        {
                            titleResx: "string_12414",
                            ratio: 24,
                            minWidth: 280,
                            collapseOrder: 1,
                            computeValue: function (row) {
                                if (Commerce.ArrayExtensions.hasElements(row.product.Dimensions)) {
                                    var formatString = _this.context.stringResourceManager.getString("string_4385");
                                    return Commerce.StringExtensions.format(formatString, row.product.Name, Commerce.SimpleProductHelper.getProductDimensionsDescription(row.product.Dimensions));
                                }
                                return row.product.Name;
                            },
                            converter: "Commerce.Core.Converter.textContentFormatter",
                        },
                        {
                            titleResx: "string_12415",
                            ratio: 15,
                            minWidth: 150,
                            collapseOrder: 2,
                            field: "LocationId",
                            converter: "Commerce.Core.Converter.textContentFormatter",
                        },
                        {
                            titleResx: "string_12416",
                            ratio: 15,
                            minWidth: 150,
                            collapseOrder: 3,
                            computeValue: function (row) { return row.SourceDocumentLine.QuantityOrdered; },
                            isRightAligned: true
                        },
                        {
                            titleResx: this.isReceivingOperation() ? "string_12417" : "string_12621",
                            ratio: 16,
                            minWidth: 150,
                            collapseOrder: 4,
                            computeValue: function (row) {
                                return _this.isReceivingOperation() ? row.SourceDocumentLine.QuantityReceived : row.SourceDocumentLine.QuantityShipped;
                            },
                            isRightAligned: true
                        },
                        {
                            titleResx: this.isReceivingOperation() ? "string_12418" : "string_12508",
                            ratio: 15,
                            minWidth: 150,
                            collapseOrder: 5,
                            field: "QuantityToUpdate",
                            isRightAligned: true
                        },
                    ];
                }
                return [
                    {
                        titleResx: "string_12413",
                        ratio: 20,
                        minWidth: 150,
                        collapseOrder: 5,
                        computeValue: function (row) { return row.product.ItemId; },
                        converter: "Commerce.Core.Converter.textContentFormatter",
                    },
                    {
                        titleResx: "string_12414",
                        ratio: 30,
                        minWidth: 280,
                        collapseOrder: 1,
                        computeValue: function (row) {
                            if (Commerce.ArrayExtensions.hasElements(row.product.Dimensions)) {
                                var formatString = _this.context.stringResourceManager.getString("string_4385");
                                return Commerce.StringExtensions.format(formatString, row.product.Name, Commerce.SimpleProductHelper.getProductDimensionsDescription(row.product.Dimensions));
                            }
                            return row.product.Name;
                        },
                        converter: "Commerce.Core.Converter.textContentFormatter",
                    },
                    {
                        titleResx: "string_12415",
                        ratio: 20,
                        minWidth: 150,
                        collapseOrder: 2,
                        field: "LocationId",
                        converter: "Commerce.Core.Converter.textContentFormatter",
                    },
                    {
                        titleResx: "string_12416",
                        ratio: 15,
                        minWidth: 120,
                        collapseOrder: 3,
                        computeValue: function (row) { return row.SourceDocumentLine.QuantityOrdered; },
                        isRightAligned: true
                    },
                    {
                        titleResx: this.isReceivingOperation() ? "string_12455" : "string_12516",
                        ratio: 15,
                        minWidth: 120,
                        collapseOrder: 4,
                        computeValue: function (row) {
                            if (_this.isReceivingOperation()) {
                                return row.SourceDocumentLine.QuantityReceived;
                            }
                            return row.SourceDocumentLine.QuantityShipped;
                        },
                        isRightAligned: true
                    },
                ];
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._getDocumentLineKey = function (line) {
                return line.SourceDocumentRecordId.toString() + line.SourceDocumentTypeValue.toString() + line.SourceDocumentLineRecordId.toString();
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._matchAndUpdateLocalLine = function (line, skipUpdateNow) {
                var _this = this;
                if (skipUpdateNow === void 0) { skipUpdateNow = false; }
                var key = this._getDocumentLineKey(line);
                if (this._fullOrderLineIndexes.hasItem(key)) {
                    this.updateFullOrderLineCallback()(this._fullOrderLineIndexes.getItem(key), line);
                }
                var selectedLinesFullOrderList = this._selectedLinesForFullOrderList();
                if (selectedLinesFullOrderList.length === 1 && this.areDocumentLinesSameRecord(selectedLinesFullOrderList[0], line)) {
                    this._selectedLinesForFullOrderList([line]);
                }
                if (!skipUpdateNow) {
                    var updateNowLines = this.updateNowLines();
                    var updateNowIndex = Commerce.ArrayExtensions.findIndex(updateNowLines, function (element) { return _this.areDocumentLinesSameRecord(element, line); });
                    if (updateNowIndex !== -1) {
                        updateNowLines[updateNowIndex] = line;
                        this._lastUpdatedUpdateNowLine = line;
                        this.updateNowLines(updateNowLines);
                    }
                    var selectedLinesUpdateNowList = this._selectedLinesForUpdateNowList();
                    if (selectedLinesUpdateNowList.length === 1 && this.areDocumentLinesSameRecord(selectedLinesUpdateNowList[0], line)) {
                        this._selectedLinesForUpdateNowList([line]);
                    }
                }
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._editLineQuantityAsync = function (editOptionsAndResult, quantityThreshold, isOverDeliveryAllowed) {
                var request = new Commerce.Inventory.GetInventoryDocumentLineQuantityClientRequest(editOptionsAndResult.correlationId, this.document(), Commerce.ObjectExtensions.isNumber(editOptionsAndResult.result.quantity) ?
                    editOptionsAndResult.result.quantity : editOptionsAndResult.line.QuantityToUpdate, quantityThreshold, isOverDeliveryAllowed);
                return this.context.runtime.executeAsync(request)
                    .then(function (response) {
                    if (!response.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(response.data.result)) {
                        editOptionsAndResult.result.quantity = response.data.result;
                        return { canceled: false, data: editOptionsAndResult };
                    }
                    return { canceled: true, data: null };
                });
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._editLineLocationAsync = function (editOptionsAndResult) {
                var _this = this;
                return Commerce.ApplicationContext.Instance.warehouseAsync.value.getPromise().then(function (warehouse) {
                    var predefinedLocations = [];
                    var allowBlankLocation = (_this.isReceivingOperation() && editOptionsAndResult.line.product.Behavior.IsStorageDimensionGroupLocationAllowBlankReceiptEnabled)
                        || (!_this.isReceivingOperation() && editOptionsAndResult.line.product.Behavior.IsStorageDimensionGroupLocationBlankIssueAllowed);
                    if (allowBlankLocation) {
                        predefinedLocations.push(Commerce.StringExtensions.EMPTY);
                    }
                    var request = new Commerce.Inventory.SelectInventoryDocumentLineWarehouseLocationClientRequest(editOptionsAndResult.correlationId, warehouse.IsWMSEnabled, predefinedLocations, editOptionsAndResult.line.LocationId);
                    return _this.context.runtime.executeAsync(request)
                        .then(function (response) {
                        if (!response.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(response.data.result)) {
                            editOptionsAndResult.result.wmsLocationId = response.data.result.LocationId;
                            _this._productLastLocationById.setItem(editOptionsAndResult.line.SourceDocumentLine.ProductId, response.data.result.LocationId);
                            return { canceled: false, data: editOptionsAndResult };
                        }
                        return { canceled: true, data: null };
                    });
                });
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._editLineNoteAsync = function (editOptionsAndResult) {
                var showTextInputDialogClientRequest = new Commerce.ShowTextInputDialogClientRequest({
                    label: this.context.stringResourceManager.getString(Commerce.ObjectExtensions.isNullOrUndefined(editOptionsAndResult.line.Note) || Commerce.StringExtensions.isEmpty(editOptionsAndResult.line.Note)
                        ? "string_12441" : "string_12450"),
                    defaultText: editOptionsAndResult.line.Note,
                });
                return this.context.runtime.executeAsync(showTextInputDialogClientRequest)
                    .then(function (textInputResult) {
                    if (textInputResult.canceled) {
                        return { canceled: true, data: null };
                    }
                    else {
                        editOptionsAndResult.result.note = textInputResult.data.result.value;
                        return { canceled: false, data: editOptionsAndResult };
                    }
                });
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._getPackingSlipAsync = function (transferJournal, isPreview, isCopy) {
                return this.inventoryManager.getTransferPackingSlipAsync(transferJournal, isPreview, isCopy);
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._keyInProductWithLocationAndQuantityAsync = function (correlationId, selectedProduct, searchText) {
                var _this = this;
                var editOptionsAndResult = this._createEditProductOptions(correlationId);
                var clientRequest = new Commerce.Inventory.GetInventoryDocumentProductWithLocationAndQuantityClientRequest(correlationId, this.document(), false, searchText, selectedProduct, this.context.stringResourceManager.getString(this.keyInProductButtonLabel()), this._productLastLocationById);
                return this.context.runtime.executeAsync(clientRequest)
                    .then(function (response) {
                    if (!response.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(response.data.result)) {
                        if (response.data.result.product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.KitMaster) {
                            _this._navigateToSimpleProductDetailsPage(correlationId, response.data.result.product, searchText);
                            return { canceled: true, data: null };
                        }
                        editOptionsAndResult.result.variant = response.data.result.product;
                        editOptionsAndResult.result.wmsLocationId = response.data.result.wmsLocationId;
                        editOptionsAndResult.result.quantity = response.data.result.quantity;
                        _this._productLastLocationById.setItem(response.data.result.product.RecordId, response.data.result.wmsLocationId);
                        return _this._updateLinesByProductFromKeyInOrScanningAsync(editOptionsAndResult);
                    }
                    return { canceled: true, data: null };
                }).then(function (response) {
                    if (!response.canceled) {
                        return _this._keyInProductWithLocationAndQuantityAsync(correlationId, null, Commerce.StringExtensions.EMPTY);
                    }
                    return { canceled: true, data: null };
                });
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._scanProductWithQuantityAndLocationAsync = function (correlationId, barcode) {
                var _this = this;
                var editOptionsAndResult = this._createEditProductOptions(correlationId);
                var clientRequest = new Commerce.Inventory.GetInventoryDocumentProductWithLocationAndQuantityClientRequest(correlationId, this.document(), true, barcode, undefined, this.context.stringResourceManager.getString(this.keyInProductButtonLabel()), this._productLastLocationById);
                return this.context.runtime.executeAsync(clientRequest)
                    .then(function (response) {
                    if (!response.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(response.data.result)) {
                        if (response.data.result.product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.KitMaster) {
                            _this._navigateToSimpleProductDetailsPage(correlationId, response.data.result.product, barcode);
                            return { canceled: true, data: null };
                        }
                        editOptionsAndResult.result.variant = response.data.result.product;
                        editOptionsAndResult.result.wmsLocationId = response.data.result.wmsLocationId;
                        editOptionsAndResult.result.quantity = response.data.result.quantity;
                        _this._productLastLocationById.setItem(response.data.result.product.RecordId, response.data.result.wmsLocationId);
                        return _this._updateLinesByProductFromKeyInOrScanningAsync(editOptionsAndResult);
                    }
                    return { canceled: true, data: null };
                });
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._exitOrPromptToUpdateWorkingTerminalAsync = function (correlationId, errors) {
                var _this = this;
                var documentLockedError = Commerce.ErrorHelper.getError(errors, Commerce.Inventory.InventoryDocumentLockedByOtherTerminalError);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(documentLockedError)) {
                    var exception = documentLockedError.commerceException;
                    return this.context.runtime.executeAsync(new Commerce.Inventory.UpdateInventoryDocumentWorkingTerminalClientRequest(correlationId, this.document(), exception.WorkingTerminalId))
                        .then(function (response) {
                        if (!response.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(response.data.result)) {
                            _this.document(response.data.result);
                            return { canceled: false, data: null };
                        }
                        return { canceled: true, data: null };
                    });
                }
                return Promise.reject(errors);
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._navigateToSimpleProductDetailsPage = function (correlationId, product, searchText) {
                var _this = this;
                var productSelectionHandler = new Commerce.CancelableSelectionHandler(function (selectionResult) {
                    var returnOptions = {
                        document: _this.document(),
                        selectedProduct: selectionResult.simpleProduct,
                        correlationIdForSelectedProduct: correlationId,
                        selectedProductSearchText: searchText,
                        initialUpdateNowLines: _this.updateNowLines(),
                        switchToFullOrderListCallback: _this._switchToFullOrderListCallback,
                        switchToUpdateNowListCallback: _this._switchToUpdateNowListCallback,
                        selectUpdateNowLinesCallback: _this._selectUpdateNowLinesCallback,
                        selectFullOrderLinesCallback: _this._selectFullOrderLinesCallback,
                    };
                    Commerce.ViewModelAdapter.collapseAndNavigate("InventoryDocumentShippingAndReceivingView", returnOptions);
                }, function () {
                    Commerce.ViewModelAdapter.collapse("InventoryDocumentShippingAndReceivingView");
                });
                var simpleProductDetailsViewModelOptions = {
                    productId: product.RecordId,
                    product: undefined,
                    isSelectionMode: true,
                    selectionOptions: {
                        productSelectionHandler: productSelectionHandler
                    },
                    correlationId: Commerce.StringExtensions.EMPTY
                };
                Commerce.ViewModelAdapter.navigate("SimpleProductDetailsView", simpleProductDetailsViewModelOptions);
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._presentPackingSlipContent = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.packingSlipForPreview())) {
                    this.packingSlipText(Commerce.ReceiptHelper.convertToHtml(this.packingSlipForPreview().Header + this.packingSlipForPreview().Body + this.packingSlipForPreview().Footer));
                }
                else {
                    var errors = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.RECEIPT_NOT_AVAILABLE_FOR_ORDER)];
                    Commerce.NotificationHandler.displayClientErrors(errors, "string_4127");
                }
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._updateLinesByProductFromKeyInOrScanningAsync = function (editOptionsAndResult) {
                var _this = this;
                return this._startWorkingAsync(editOptionsAndResult.correlationId)
                    .then(function (response) {
                    if (!response.canceled) {
                        return _this.inventoryManager.updateInventoryDocumentLinesByProductAsync(_this.document().WorkDocumentId, editOptionsAndResult.result.variant.RecordId, editOptionsAndResult.result.wmsLocationId, editOptionsAndResult.result.quantity).getPromise()
                            .then(function (result) {
                            return { canceled: false, data: result.UpdatedLines };
                        });
                    }
                    return { canceled: true, data: null };
                }).then(function (response) {
                    if (!response.canceled) {
                        return _this._getProductsByIdsAsync(response.data.map(function (elem) { return elem.SourceDocumentLine.ProductId; }))
                            .then(function (products) {
                            var linesWithProduct = response.data.map(function (elem, index) {
                                return new Commerce.Client.Entities.InventoryInboundOutboundDocumentLineWithProduct(elem, products[index]);
                            });
                            return { canceled: false, data: linesWithProduct };
                        });
                    }
                    return { canceled: true, data: null };
                }).then(function (response) {
                    if (!response.canceled) {
                        _this._updateLocalLinesAfterUpdateLinesByProduct(response.data);
                        if (_this.isReceivingOperation() && Commerce.ArrayExtensions.hasElements(response.data)
                            && response.data[0].product.Behavior.IsSerialNumberRequired) {
                            if (response.data.length === 1 && editOptionsAndResult.result.quantity === 1) {
                                return _this._registerSerialNumberForLineAsync(editOptionsAndResult.correlationId, response.data[0])
                                    .then(function (serialNumberResponse) {
                                    if (!serialNumberResponse.canceled) {
                                        return { canceled: false, data: editOptionsAndResult };
                                    }
                                    return { canceled: true, data: null };
                                });
                            }
                            return _this._promptToRegisterSerialNumberAsync(editOptionsAndResult.correlationId, response.data.length === 1 ? response.data[0] : null)
                                .then(function (promptResponse) {
                                if (promptResponse.canceled) {
                                    return { canceled: false, data: editOptionsAndResult };
                                }
                                return { canceled: true, data: null };
                            });
                        }
                        return { canceled: false, data: editOptionsAndResult };
                    }
                    return { canceled: true, data: null };
                }).then(function (response) {
                    if (response.canceled) {
                        return response;
                    }
                    return _this._updateFullOrderTabSummaryAsync()
                        .then(function (summaryResponse) {
                        var canceled = summaryResponse.canceled;
                        return { canceled: canceled, data: canceled ? null : response.data };
                    });
                }).then(function (response) {
                    if (!response.canceled) {
                        if (_this.activeMode() === InventoryDocumentShippingAndReceivingViewModelActiveMode.FullOrderList && _this.isReceivingOperation()) {
                            _this._switchToUpdateNowListCallback();
                        }
                        return { canceled: false, data: editOptionsAndResult };
                    }
                    return { canceled: true, data: null };
                }).catch(function (errors) { return _this._exitOrPromptToUpdateWorkingTerminalAsync(editOptionsAndResult.correlationId, errors)
                    .then(function (response) {
                    if (!response.canceled) {
                        return _this._updateLinesByProductFromKeyInOrScanningAsync(editOptionsAndResult);
                    }
                    return { canceled: true, data: null };
                }); });
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._updateLocalLinesAfterUpdateLinesByProduct = function (resultLines) {
                var _this = this;
                var updateNowLines = this.updateNowLines();
                resultLines.forEach(function (resultLine) {
                    _this._matchAndUpdateLocalLine(resultLine, true);
                    var foundIndex = Commerce.ArrayExtensions.findIndex(updateNowLines, function (line) { return _this.areDocumentLinesSameRecord(resultLine, line); });
                    if (foundIndex !== -1) {
                        updateNowLines[foundIndex] = resultLine;
                    }
                    else {
                        updateNowLines.unshift(resultLine);
                    }
                    _this._lastUpdatedUpdateNowLine = resultLine;
                });
                this._isUpdateNowListSelectionChangeTriggeredByUpdateLinesByProduct = true;
                this.updateNowLines(updateNowLines);
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._startWorkingAsync = function (correlationId) {
                var _this = this;
                var startRequest = new Commerce.Inventory.StartInventoryDocumentClientRequest(correlationId, this.document());
                return this._isBusyUntil(Commerce.AsyncResult.fromPromise(this.context.runtime.executeAsync(startRequest).then(function (response) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(response.data.result)) {
                        _this.document(response.data.result);
                        return { canceled: false, data: null };
                    }
                    return { canceled: true, data: null };
                }))).getPromise();
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._handleAsyncOperationRejection = function (error) {
                if (error instanceof Commerce.Proxy.Entities.Error) {
                    Commerce.NotificationHandler.displayClientErrors([error]);
                    return Promise.reject([error]);
                }
                else if (error instanceof Array) {
                    Commerce.NotificationHandler.displayClientErrors(error);
                }
                else if (!Commerce.ObjectExtensions.isNullOrUndefined(error)) {
                    setTimeout(function () {
                        throw error;
                    });
                }
                return Promise.reject(error);
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._createEditProductOptions = function (correlationId) {
                return {
                    correlationId: correlationId,
                    result: {
                        variant: null,
                        quantity: 1,
                        wmsLocationId: Commerce.StringExtensions.EMPTY,
                    }
                };
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._createEditLineOptions = function (correlationId, line) {
                return {
                    line: line,
                    correlationId: correlationId,
                    result: {
                        quantity: null,
                        wmsLocationId: null,
                        note: null,
                        isCloseLine: null,
                    }
                };
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._submitUpdatedLineToServerAsync = function (editOptionsAndResult) {
                var _this = this;
                var line = new Commerce.Proxy.Entities.InventoryInboundOutboundDocumentLineClass(editOptionsAndResult.line);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(editOptionsAndResult.result.quantity)) {
                    line.QuantityToUpdate = editOptionsAndResult.result.quantity;
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(editOptionsAndResult.result.wmsLocationId)) {
                    line.LocationId = editOptionsAndResult.result.wmsLocationId;
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(editOptionsAndResult.result.note)) {
                    line.Note = editOptionsAndResult.result.note;
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(editOptionsAndResult.result.isCloseLine)) {
                    line.IsCloseLine = editOptionsAndResult.result.isCloseLine;
                }
                return this.inventoryManager.updateInventoryDocumentLineAsync(this.document().WorkDocumentId, line).getPromise()
                    .then(function (updatedLine) {
                    var updatedLineWithProduct = new Commerce.Client.Entities.InventoryInboundOutboundDocumentLineWithProduct(updatedLine, editOptionsAndResult.line.product);
                    _this._matchAndUpdateLocalLine(updatedLineWithProduct);
                    editOptionsAndResult.line = updatedLineWithProduct;
                    _this._sendMessageToExtensions("DocumentLineUpdated", { documentLine: updatedLineWithProduct });
                    return { canceled: false, data: editOptionsAndResult };
                }).catch(function (errors) {
                    var exceedMaximumQuantityError = Commerce.ErrorHelper.getError(errors, Commerce.Inventory.InventoryDocumentExceedMaximumQuantityError);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(exceedMaximumQuantityError)) {
                        var exception = exceedMaximumQuantityError.commerceException;
                        editOptionsAndResult.result.quantity = exception.MaximumQuantity;
                        return _this._editLineQuantityAsync(editOptionsAndResult, exception.MaximumQuantity, exception.AllowOverDelivery)
                            .then(function (response) {
                            if (!response.canceled) {
                                return _this._submitUpdatedLineToServerAsync(response.data);
                            }
                            return { canceled: true, data: null };
                        });
                    }
                    return _this._exitOrPromptToUpdateWorkingTerminalAsync(editOptionsAndResult.correlationId, errors)
                        .then(function (response) {
                        if (!response.canceled) {
                            return _this._submitUpdatedLineToServerAsync(editOptionsAndResult);
                        }
                        return { canceled: true, data: null };
                    });
                });
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._updateSelectedLines = function (lines, mode) {
                var value = Commerce.ArrayExtensions.hasElements(lines) ? lines : [];
                switch (mode) {
                    case InventoryDocumentShippingAndReceivingViewModelActiveMode.UpdateNowList:
                        this._selectedLinesForUpdateNowList(value);
                        break;
                    case InventoryDocumentShippingAndReceivingViewModelActiveMode.FullOrderList:
                        this._selectedLinesForFullOrderList(value);
                        break;
                    default:
                        break;
                }
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._navigateToInventoryDocumentListPage = function () {
                this._skipPausingDocumentOnNavigateBack = true;
                Commerce.ViewModelAdapter.navigateBack();
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._navigateToInventoryDocumentValidationPage = function (summary) {
                Commerce.ViewModelAdapter.navigate("InventoryDocumentValidationView", { document: this.document(), summary: summary });
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._pauseDocumentAsync = function (correlationId, promptToUpdateWorkingTerminal) {
                var _this = this;
                var pauseRequest = new Commerce.Inventory.PauseInventoryDocumentClientRequest(correlationId, this.document(), promptToUpdateWorkingTerminal);
                return this.context.runtime.executeAsync(pauseRequest).then(function (response) {
                    if (!response.canceled) {
                        _this._navigateToInventoryDocumentListPage();
                        return { canceled: false, data: null };
                    }
                    else if (!Commerce.ObjectExtensions.isNullOrUndefined(response.data.result)) {
                        _this.document(response.data.result);
                    }
                    return { canceled: true, data: null };
                }).catch(function (errors) {
                    if (!promptToUpdateWorkingTerminal) {
                        _this._navigateToInventoryDocumentListPage();
                        return { canceled: true, data: null };
                    }
                    return _this._handleAsyncOperationRejection(errors);
                });
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._onPackingSlipHandlerAsync = function (printLastSlip) {
                var _this = this;
                var getTransferJournalsQueue = new Commerce.AsyncQueue();
                var transferOrderJournals = [];
                var selectedTransferJournal = null;
                var transferId = this.document().SourceDocument.DocumentId;
                getTransferJournalsQueue.enqueue(function () {
                    return _this.inventoryManager.getTransferOrderJournalsAsync(transferId)
                        .done(function (transferJournals) {
                        transferOrderJournals = transferJournals;
                    });
                });
                getTransferJournalsQueue.enqueue(function () {
                    if (printLastSlip && Commerce.ArrayExtensions.hasElements(transferOrderJournals)) {
                        selectedTransferJournal = transferOrderJournals[0];
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                    else {
                        var activity_3 = new Commerce.Activities.SelectPackingSlipActivity({
                            journalOptions: transferOrderJournals
                        });
                        return activity_3.execute()
                            .done(function () {
                            if (Commerce.ObjectExtensions.isNullOrUndefined(activity_3.response)) {
                                getTransferJournalsQueue.cancel();
                            }
                            else {
                                selectedTransferJournal = activity_3.response.selectedTransferOrderJournal;
                            }
                        });
                    }
                });
                getTransferJournalsQueue.enqueue(function () {
                    var isPreview = !printLastSlip;
                    var isCopy = false;
                    return _this._getPackingSlipAsync(selectedTransferJournal, isPreview, isCopy)
                        .done(function (packingSlips) {
                        if (Commerce.ArrayExtensions.hasElements(packingSlips)) {
                            _this.packingSlipForPreview(isPreview ? packingSlips[0] : null);
                            if (isPreview && packingSlips.length > 1) {
                                _this.packingSlipForPrint(packingSlips[1]);
                            }
                            else if (!isPreview) {
                                _this.packingSlipForPrint(packingSlips[0]);
                            }
                            else {
                                _this.packingSlipForPrint(null);
                            }
                        }
                    });
                });
                getTransferJournalsQueue.enqueue(function () {
                    if (printLastSlip) {
                        return _this.printPackingSlipAsync();
                    }
                    else {
                        _this._presentPackingSlipContent();
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                });
                return this._isBusyUntil(getTransferJournalsQueue.run())
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._getLineRemainingQuantity = function (line) {
                var remaining;
                if (this.isReceivingOperation()) {
                    remaining = line.SourceDocumentLine.QuantityOrdered - (line.SourceDocumentLine.QuantityReceived + line.SourceDocumentLine.QuantityCancelled);
                }
                else {
                    remaining = line.SourceDocumentLine.QuantityOrdered - (line.SourceDocumentLine.QuantityShipped + line.SourceDocumentLine.QuantityCancelled);
                }
                return Math.max(0, remaining);
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._promptToRegisterSerialNumberAsync = function (correlationId, line) {
                var _this = this;
                var request = new Commerce.Inventory.PromptToRegisterInventoryDocumentSerialNumberClientRequest(correlationId, line);
                return this.context.runtime.executeAsync(request)
                    .then(function (response) {
                    if (!response.canceled) {
                        var options = {
                            correlationId: correlationId,
                            document: _this.document(),
                            documentLine: line,
                        };
                        Commerce.ViewModelAdapter.navigate("InventoryDocumentSerialNumberManagementView", options);
                        return { canceled: false, data: null };
                    }
                    return { canceled: true, data: null };
                });
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._registerSerialNumberForLineAsync = function (correlationId, line) {
                var _this = this;
                return this.context.runtime.executeAsync(new Commerce.Inventory.GetInventoryDocumentSerialNumberClientRequest(correlationId, line.product))
                    .then(function (response) {
                    if (!response.canceled) {
                        var updateRequest = new Commerce.Inventory.UpdateInventoryDocumentSerialNumberLineClientRequest(correlationId, _this.document(), response.data.result, line.LineId);
                        return _this.context.runtime.executeAsync(updateRequest);
                    }
                    return { canceled: true, data: null };
                }).then(function (response) {
                    if (!response.canceled) {
                        _this.document(response.data.result.document);
                        return { canceled: false, data: null };
                    }
                    return { canceled: true, data: null };
                });
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._tryToSyncUpdateNowLinesWithFullOrderLines = function () {
                var _this = this;
                var linesToUpdate = [];
                var hasUpdate = false;
                this.updateNowLines().forEach(function (value, index) {
                    var key = _this._getDocumentLineKey(value);
                    if (_this._fullOrderLineIndexes.hasItem(key)) {
                        hasUpdate = true;
                        var refreshedLine = _this._fullOrderLineCache[_this._fullOrderLineIndexes.getItem(key)];
                        linesToUpdate.push(refreshedLine);
                    }
                    else {
                        linesToUpdate.push(value);
                    }
                });
                if (hasUpdate) {
                    this.updateNowLines(linesToUpdate);
                }
                this._selectedLinesForFullOrderList([]);
                this._selectedLinesForUpdateNowList([]);
                this._lastUpdatedUpdateNowLine = null;
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._getProductsByIdsAsync = function (productIds) {
                var _this = this;
                if (!Commerce.ArrayExtensions.hasElements(productIds)) {
                    return Promise.resolve([]);
                }
                var returnProductRequests = [];
                var productIdsToQuery = [];
                var productIdsToQueryDict = new Commerce.Dictionary();
                productIds.forEach(function (productId, index) {
                    if (_this._productDataCache.hasItem(productId)) {
                        returnProductRequests[index] = Promise.resolve(_this._productDataCache.getItem(productId));
                    }
                    else if (_this._getProductDataRequests.hasItem(productId)) {
                        returnProductRequests[index] = _this._getProductDataRequests.getItem(productId);
                    }
                    else {
                        productIdsToQuery.push(productId);
                        productIdsToQueryDict.setItem(productId, true);
                    }
                });
                if (Commerce.ArrayExtensions.hasElements(productIdsToQuery)) {
                    var productManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IProductManagerName);
                    var getByIdsAsync_3 = productManager.getByIdsAsync(productIdsToQuery, 0).getPromise();
                    productIds.forEach(function (productId, index) {
                        if (productIdsToQueryDict.hasItem(productId)) {
                            returnProductRequests[index] = getByIdsAsync_3.then(function (result) {
                                var foundProduct = Commerce.ArrayExtensions.firstOrUndefined(result, function (elem) { return elem.RecordId === productId; });
                                if (!Commerce.ObjectExtensions.isNullOrUndefined(foundProduct)) {
                                    _this._productDataCache.setItem(productId, foundProduct);
                                    _this._getProductDataRequests.removeItem(productId);
                                    return Promise.resolve(foundProduct);
                                }
                                else {
                                    var productNotFoundError = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PRODUCT_DETAILS_NOT_FOUND_ERROR_MESSAGE);
                                    return Promise.reject(productNotFoundError);
                                }
                            }).catch(function (errors) {
                                _this._getProductDataRequests.removeItem(productId);
                                return Promise.reject(errors);
                            });
                            _this._getProductDataRequests.setItem(productId, returnProductRequests[index]);
                        }
                    });
                }
                return Promise.all(returnProductRequests);
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._allowTransferOrderUnderDeliveryAsync = function () {
                return this.channelManager.getInventoryConfigurationAsync().getPromise()
                    .then(function (data) {
                    return data.AllowTransferOrderUnderDelivery;
                });
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._isSelectedLineCloseable = function () {
                return this.singleSelectedLine().QuantityToUpdate < this.detailsPaneQuantityRemaining();
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._validateAsync = function (correlationId, document, isManuallyValidated) {
                var _this = this;
                if (!this.isValidationEnabled()) {
                    return Promise.resolve({ canceled: false, data: null });
                }
                if (!Commerce.ApplicationContext.Instance.channelConfiguration.IsInventoryAutomaticValidationEnabled && !isManuallyValidated) {
                    return Promise.resolve({ canceled: false, data: null });
                }
                var request = new Commerce.Inventory.ValidateInventoryDocumentClientRequest(correlationId, document, isManuallyValidated);
                return this.context.runtime.executeAsync(request).then(function (response) {
                    if (!response.canceled && response.data.result.actionType === Commerce.Client.Entities.InventoryDocumentValidationResultSummaryDialogActionType.Review) {
                        _this._navigateToInventoryDocumentValidationPage(response.data.result.summary);
                        return { canceled: true, data: null };
                    }
                    return { canceled: response.canceled, data: null };
                });
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._updateFullOrderTabSummaryAsync = function () {
                var _this = this;
                var workDocumentId = this.document().WorkDocumentId;
                if (!this.isDocumentStartedWorking()) {
                    this.totalFullOrderListQuantity(0);
                    return Promise.resolve({ canceled: false });
                }
                return this.inventoryManager
                    .getInventoryDocumentLinesSummaryAsync(workDocumentId)
                    .getPromise().then(function (lineSummary) {
                    _this.totalFullOrderListQuantity(lineSummary.InProgressQuantity);
                    return { canceled: false };
                });
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._subscribeExtensionsToChanges = function () {
                var _this = this;
                this.activeMode.subscribe(function (modeSelected) {
                    var activeMode = (modeSelected === InventoryDocumentShippingAndReceivingViewModelActiveMode.UpdateNowList)
                        ? Commerce.Extensibility.InventoryDocumentShippingAndReceivingMode.UpdateNow
                        : Commerce.Extensibility.InventoryDocumentShippingAndReceivingMode.FullOrder;
                    _this._sendMessageToExtensions("ModeUpdated", { mode: activeMode });
                });
                this._selectedLinesForUpdateNowList.subscribe(function (lines) {
                    if (Commerce.ArrayExtensions.hasElements(lines)) {
                        _this._sendMessageToExtensions("DocumentLinesSelected", { documentLines: lines });
                    }
                    else {
                        _this._sendMessageToExtensions("DocumentLinesSelectionCleared", undefined);
                    }
                });
                this._selectedLinesForFullOrderList.subscribe(function (lines) {
                    if (Commerce.ArrayExtensions.hasElements(lines)) {
                        _this._sendMessageToExtensions("DocumentLinesSelected", { documentLines: lines });
                    }
                    else {
                        _this._sendMessageToExtensions("DocumentLinesSelectionCleared", undefined);
                    }
                });
                this.isPackingSlipSelected.subscribe(function (isSelected) {
                    if (isSelected) {
                        _this._sendMessageToExtensions("PackingSlipSelected", { packingSlips: [_this.packingSlipForPreview(), _this.packingSlipForPrint()] });
                    }
                    else {
                        _this._sendMessageToExtensions("PackingSlipSelectionCleared", undefined);
                    }
                });
            };
            InventoryDocumentShippingAndReceivingViewModel.prototype._sendMessageToExtensions = function (messageType, messageData) {
                this.extensionCommandViewModels.forEach(function (vm) {
                    vm.sendMessage(messageType, messageData);
                });
            };
            return InventoryDocumentShippingAndReceivingViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.InventoryDocumentShippingAndReceivingViewModel = InventoryDocumentShippingAndReceivingViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var InventoryDocumentValidationResultSummaryViewModel = (function (_super) {
            __extends(InventoryDocumentValidationResultSummaryViewModel, _super);
            function InventoryDocumentValidationResultSummaryViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this.summary = ko.observable(null);
                _this.isManuallyValidated = ko.observable(false);
                _this.validationErrorDetails = ko.observableArray([]);
                _this.validationWarningDetails = ko.observableArray([]);
                _this.hasValidationError = ko.computed(function () {
                    return _this.validationErrorDetails().reduce(function (hasError, errorDetail) { return hasError || errorDetail.hasError; }, false);
                });
                _this.hasValidationWarning = ko.computed(function () {
                    return _this.validationWarningDetails().reduce(function (hasError, errorDetail) { return hasError || errorDetail.hasError; }, false);
                });
                _this.hasValidationResult = ko.computed(function () {
                    return _this.hasValidationError() || _this.hasValidationWarning();
                });
                _this.isFinishButtonVisible = ko.computed(function () {
                    return !_this.hasValidationError() && !_this.isManuallyValidated();
                });
                _this.isReviewButtonVisible = ko.computed(function () {
                    return _this.hasValidationResult();
                });
                _this.isOkButtonVisible = ko.computed(function () {
                    return !_this.hasValidationResult() && _this.isManuallyValidated();
                });
                _this.isCancelButtonVisible = ko.computed(function () {
                    return _this.hasValidationError() || (_this.hasValidationWarning() && _this.isManuallyValidated());
                });
                _this.isFinishButtonPrimary = ko.computed(function () {
                    return !_this.hasValidationError() && _this.hasValidationWarning() && !_this.isManuallyValidated();
                });
                _this.isReviewButtonPrimary = ko.computed(function () {
                    return _this.hasValidationError() || (_this.hasValidationWarning() && _this.isManuallyValidated());
                });
                _this.isOkButtonPrimary = ko.computed(function () {
                    return !_this.hasValidationResult();
                });
                _this.documentOperationType = ko.observable(Commerce.Proxy.Entities.InventoryInboundOutboundDocumentOperationType.None);
                _this._isReceivingOperation = ko.computed(function () {
                    return _this.documentOperationType() !== Commerce.Proxy.Entities.InventoryInboundOutboundDocumentOperationType.ShipTransferOrder;
                });
                _this.title = ko.computed(function () { return _this.isManuallyValidated() ?
                    _this.context.stringResourceManager.getString("string_12900") :
                    _this.context.stringResourceManager.getString(_this._isReceivingOperation() ? "string_12408" : "string_12504"); });
                _this.errorPrompt = ko.computed(function () {
                    return _this._isReceivingOperation() ? "string_12901" : "string_12918";
                });
                _this.warningPrompt = ko.observable("string_12902");
                _this.okPrompt = ko.computed(function () {
                    return _this._isReceivingOperation() ? "string_12903" : "string_12919";
                });
                return _this;
            }
            InventoryDocumentValidationResultSummaryViewModel.prototype.load = function (summary, isManuallyValidated, documentOperationType) {
                var _this = this;
                this.summary(summary);
                this.isManuallyValidated(isManuallyValidated);
                this.documentOperationType(documentOperationType);
                this.validationErrorDetails(Object.keys(ViewModels.InventoryDocumentValidationCategory)
                    .map(function (key) { return ViewModels.InventoryDocumentValidationCategory[key]; })
                    .map(function (category) {
                    var count = _this._getCount(_this._getCategoryFullNameByCategory(category), Commerce.Proxy.Entities.InventoryDocumentValidationResultSeverity.Error);
                    return {
                        hasError: count > 0,
                        categoryName: _this._getCategoryNameResxByCategory(category),
                        errorCount: count
                    };
                }));
                this.validationWarningDetails(Object.keys(ViewModels.InventoryDocumentValidationCategory)
                    .map(function (key) { return ViewModels.InventoryDocumentValidationCategory[key]; })
                    .map(function (category) {
                    var count = _this._getCount(_this._getCategoryFullNameByCategory(category), Commerce.Proxy.Entities.InventoryDocumentValidationResultSeverity.Warning);
                    return {
                        hasError: count > 0,
                        categoryName: _this._getCategoryNameResxByCategory(category),
                        errorCount: count
                    };
                }));
                this.summary().CategorySummaries.forEach(function (categorySummary) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this._getValidationCategoryByCategoryName(categorySummary.CategoryName))) {
                        if (categorySummary.SeverityValue >= Commerce.Proxy.Entities.InventoryDocumentValidationResultSeverity.Error) {
                            _this.validationErrorDetails(_this.validationErrorDetails().concat({
                                hasError: true,
                                categoryName: categorySummary.CategoryName,
                                errorCount: 1
                            }));
                        }
                        else {
                            _this.validationWarningDetails(_this.validationWarningDetails().concat({
                                hasError: true,
                                categoryName: categorySummary.CategoryName,
                                errorCount: 1
                            }));
                        }
                    }
                });
            };
            InventoryDocumentValidationResultSummaryViewModel.prototype._getCount = function (categoryName, severityValue) {
                return Commerce.ObjectExtensions.isNullOrUndefined(this.summary()) ? 0 :
                    this.summary().CategorySummaries.filter(function (categorySummary) {
                        return categorySummary.CategoryName === categoryName &&
                            categorySummary.SeverityValue === severityValue;
                    }).reduce(function (previousValue, currentValue) {
                        return previousValue + currentValue.TotalValidationResultCount;
                    }, 0);
            };
            InventoryDocumentValidationResultSummaryViewModel.prototype._getCategoryFullNameByCategory = function (category) {
                switch (category) {
                    case ViewModels.InventoryDocumentValidationCategory.SerialNumber:
                        return Commerce.Client.Entities.InventoryDocumentValidationCategoryName.SERIAL_NUMBER_ERRORS;
                    case ViewModels.InventoryDocumentValidationCategory.Location:
                        return Commerce.Client.Entities.InventoryDocumentValidationCategoryName.LOCATION_CONTROLLED_LINE_ERRORS;
                    case ViewModels.InventoryDocumentValidationCategory.Overshipping:
                        return Commerce.Client.Entities.InventoryDocumentValidationCategoryName.OVERSHIPPING_ERRORS;
                    case ViewModels.InventoryDocumentValidationCategory.Overreceiving:
                        return Commerce.Client.Entities.InventoryDocumentValidationCategoryName.OVERRECEIVING_ERRORS;
                    case ViewModels.InventoryDocumentValidationCategory.Undershipping:
                        return Commerce.Client.Entities.InventoryDocumentValidationCategoryName.UNDERSHIPPING_ERRORS;
                    case ViewModels.InventoryDocumentValidationCategory.Underreceiving:
                        return Commerce.Client.Entities.InventoryDocumentValidationCategoryName.UNDERRECEIVING_ERRORS;
                    case ViewModels.InventoryDocumentValidationCategory.SourceLineDeleted:
                        return Commerce.Client.Entities.InventoryDocumentValidationCategoryName.LINE_DELETED_ERRORS;
                    default:
                        return Commerce.StringExtensions.EMPTY;
                }
            };
            InventoryDocumentValidationResultSummaryViewModel.prototype._getCategoryNameResxByCategory = function (category) {
                switch (category) {
                    case ViewModels.InventoryDocumentValidationCategory.SerialNumber:
                        return "string_12800";
                    case ViewModels.InventoryDocumentValidationCategory.Location:
                        return "string_12438";
                    case ViewModels.InventoryDocumentValidationCategory.Overshipping:
                        return "string_12916";
                    case ViewModels.InventoryDocumentValidationCategory.Overreceiving:
                        return "string_12907";
                    case ViewModels.InventoryDocumentValidationCategory.Undershipping:
                        return "string_12917";
                    case ViewModels.InventoryDocumentValidationCategory.Underreceiving:
                        return "string_12908";
                    case ViewModels.InventoryDocumentValidationCategory.SourceLineDeleted:
                        return "string_12909";
                    default:
                        return Commerce.StringExtensions.EMPTY;
                }
            };
            InventoryDocumentValidationResultSummaryViewModel.prototype._getValidationCategoryByCategoryName = function (categoryName) {
                switch (categoryName) {
                    case Commerce.Client.Entities.InventoryDocumentValidationCategoryName.SERIAL_NUMBER_ERRORS:
                        return ViewModels.InventoryDocumentValidationCategory.SerialNumber;
                    case Commerce.Client.Entities.InventoryDocumentValidationCategoryName.LOCATION_ERRORS:
                    case Commerce.Client.Entities.InventoryDocumentValidationCategoryName.LOCATION_CONTROLLED_LINE_ERRORS:
                        return ViewModels.InventoryDocumentValidationCategory.Location;
                    case Commerce.Client.Entities.InventoryDocumentValidationCategoryName.OVERSHIPPING_ERRORS:
                        return ViewModels.InventoryDocumentValidationCategory.Overshipping;
                    case Commerce.Client.Entities.InventoryDocumentValidationCategoryName.OVERRECEIVING_ERRORS:
                        return ViewModels.InventoryDocumentValidationCategory.Overreceiving;
                    case Commerce.Client.Entities.InventoryDocumentValidationCategoryName.UNDERSHIPPING_ERRORS:
                        return ViewModels.InventoryDocumentValidationCategory.Undershipping;
                    case Commerce.Client.Entities.InventoryDocumentValidationCategoryName.UNDERRECEIVING_ERRORS:
                        return ViewModels.InventoryDocumentValidationCategory.Underreceiving;
                    case Commerce.Client.Entities.InventoryDocumentValidationCategoryName.LINE_DELETED_ERRORS:
                        return ViewModels.InventoryDocumentValidationCategory.SourceLineDeleted;
                    default:
                        return null;
                }
            };
            return InventoryDocumentValidationResultSummaryViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.InventoryDocumentValidationResultSummaryViewModel = InventoryDocumentValidationResultSummaryViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var InventoryDocumentValidationCategory;
        (function (InventoryDocumentValidationCategory) {
            InventoryDocumentValidationCategory[InventoryDocumentValidationCategory["SerialNumber"] = 0] = "SerialNumber";
            InventoryDocumentValidationCategory[InventoryDocumentValidationCategory["Location"] = 1] = "Location";
            InventoryDocumentValidationCategory[InventoryDocumentValidationCategory["Overshipping"] = 2] = "Overshipping";
            InventoryDocumentValidationCategory[InventoryDocumentValidationCategory["Overreceiving"] = 3] = "Overreceiving";
            InventoryDocumentValidationCategory[InventoryDocumentValidationCategory["Undershipping"] = 4] = "Undershipping";
            InventoryDocumentValidationCategory[InventoryDocumentValidationCategory["Underreceiving"] = 5] = "Underreceiving";
            InventoryDocumentValidationCategory[InventoryDocumentValidationCategory["SourceLineDeleted"] = 6] = "SourceLineDeleted";
        })(InventoryDocumentValidationCategory = ViewModels.InventoryDocumentValidationCategory || (ViewModels.InventoryDocumentValidationCategory = {}));
        var InventoryDocumentValidationViewModel = (function (_super) {
            __extends(InventoryDocumentValidationViewModel, _super);
            function InventoryDocumentValidationViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                _this.defaultPageSize = 80;
                _this._validationResultLinesIndexes = new Commerce.Dictionary();
                _this._productDataCache = new Commerce.Dictionary();
                _this._getProductDataRequests = new Commerce.Dictionary();
                _this.isPhoneDetailVisible = ko.observable(false);
                _this.isDetailsPaneVisible = ko.observable(true);
                _this.isDetailsPaneQuantityExpanded = ko.observable(true);
                _this._document = ko.observable(options.document);
                _this._summary = ko.observable(options.summary);
                _this._validationResultLines = ko.observableArray([]);
                _this._isReceivingOperation = ko.computed(function () {
                    return _this._document().OperationTypeValue !== Commerce.Proxy.Entities.InventoryInboundOutboundDocumentOperationType.ShipTransferOrder;
                });
                _this.title = ko.computed(function () {
                    return _this._isReceivingOperation() ? "string_12400" : "string_12500";
                });
                _this.detailsPaneUpdateNowQuantityLabel = ko.computed(function () {
                    return _this._isReceivingOperation() ? "string_12436" : "string_12512";
                });
                _this.detailsPaneEditUpdateNowQuantityLabel = ko.computed(function () {
                    return _this._isReceivingOperation() ? "string_12437" : "string_12513";
                });
                _this.updateSerialNumberLineCallback = ko.observable(function () { return null; });
                _this.updateLocationLineCallback = ko.observable(function () { return null; });
                _this.updateOvershippingLineCallback = ko.observable(function () { return null; });
                _this.updateOverreceivingLineCallback = ko.observable(function () { return null; });
                _this.updateUndershippingLineCallback = ko.observable(function () { return null; });
                _this.updateUnderreceivingLineCallback = ko.observable(function () { return null; });
                _this.updateSourceLineDeletedLineCallback = ko.observable(function () { return null; });
                _this.isSerialNumberListViewVisible = ko.computed(function () {
                    return _this._summary().CategorySummaries.some(function (categorySummary) {
                        return categorySummary.CategoryName === Commerce.Client.Entities.InventoryDocumentValidationCategoryName.SERIAL_NUMBER_ERRORS;
                    });
                });
                _this.isLocationListViewVisible = ko.computed(function () {
                    return _this._summary().CategorySummaries.some(function (categorySummary) {
                        return categorySummary.CategoryName === Commerce.Client.Entities.InventoryDocumentValidationCategoryName.LOCATION_ERRORS ||
                            categorySummary.CategoryName === Commerce.Client.Entities.InventoryDocumentValidationCategoryName.LOCATION_CONTROLLED_LINE_ERRORS;
                    });
                });
                _this.isOvershippingListViewVisible = ko.computed(function () {
                    return _this._summary().CategorySummaries.some(function (categorySummary) {
                        return categorySummary.CategoryName === Commerce.Client.Entities.InventoryDocumentValidationCategoryName.OVERSHIPPING_ERRORS;
                    });
                });
                _this.isOverreceivingListViewVisible = ko.computed(function () {
                    return _this._summary().CategorySummaries.some(function (categorySummary) {
                        return categorySummary.CategoryName === Commerce.Client.Entities.InventoryDocumentValidationCategoryName.OVERRECEIVING_ERRORS;
                    });
                });
                _this.isUndershippingListViewVisible = ko.computed(function () {
                    return _this._summary().CategorySummaries.some(function (categorySummary) {
                        return categorySummary.CategoryName === Commerce.Client.Entities.InventoryDocumentValidationCategoryName.UNDERSHIPPING_ERRORS;
                    });
                });
                _this.isUnderreceivingListViewVisible = ko.computed(function () {
                    return _this._summary().CategorySummaries.some(function (categorySummary) {
                        return categorySummary.CategoryName === Commerce.Client.Entities.InventoryDocumentValidationCategoryName.UNDERRECEIVING_ERRORS;
                    });
                });
                _this.isSourceLineDeletedListViewVisible = ko.computed(function () {
                    return _this._summary().CategorySummaries.some(function (categorySummary) {
                        return categorySummary.CategoryName === Commerce.Client.Entities.InventoryDocumentValidationCategoryName.LINE_DELETED_ERRORS;
                    });
                });
                _this._activeCategory = ko.observable(Math.min.apply(Math, _this._summary().CategorySummaries.map(function (categorySummary) { return _this._getValidationCategoryByCategoryName(categorySummary.CategoryName); })));
                _this.isSerialNumberCategoryActive = ko.computed(function () {
                    return _this._activeCategory() === InventoryDocumentValidationCategory.SerialNumber;
                });
                _this.isLocationCategoryActive = ko.computed(function () {
                    return _this._activeCategory() === InventoryDocumentValidationCategory.Location;
                });
                _this.isOvershippingCategoryActive = ko.computed(function () {
                    return _this._activeCategory() === InventoryDocumentValidationCategory.Overshipping;
                });
                _this.isOverreceivingCategoryActive = ko.computed(function () {
                    return _this._activeCategory() === InventoryDocumentValidationCategory.Overreceiving;
                });
                _this.isUndershippingCategoryActive = ko.computed(function () {
                    return _this._activeCategory() === InventoryDocumentValidationCategory.Undershipping;
                });
                _this.isUnderreceivingCategoryActive = ko.computed(function () {
                    return _this._activeCategory() === InventoryDocumentValidationCategory.Underreceiving;
                });
                _this.isQuantityActive = ko.computed(function () {
                    return _this.isOvershippingCategoryActive() ||
                        _this.isOverreceivingCategoryActive() ||
                        _this.isUndershippingCategoryActive() ||
                        _this.isUnderreceivingCategoryActive();
                });
                _this.isSourceLineDeletedCategoryActive = ko.computed(function () {
                    return _this._activeCategory() === InventoryDocumentValidationCategory.SourceLineDeleted;
                });
                _this.dataListColumns = ko.computed(function () { return _this._getDataListColumns(); });
                _this.selectedLines = ko.observableArray([]);
                _this.singleSelectedLine = ko.computed(function () {
                    var lines = _this.selectedLines().filter(function (line) {
                        return line.CategoryName === _this._getCategoryName(_this._activeCategory());
                    });
                    if (lines.length === 1) {
                        return Commerce.ArrayExtensions.firstOrUndefined(lines);
                    }
                    return null;
                });
                _this.singleSelectedDocumentLine = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this.singleSelectedLine())) {
                        return null;
                    }
                    return _this.singleSelectedLine().InventoryDocumentLine;
                });
                _this.singleSelectedLineProductDimensionsDescription = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this.singleSelectedLine())) {
                        return Commerce.StringExtensions.EMPTY;
                    }
                    return Commerce.SimpleProductHelper.getProductDimensionsDescription(_this.singleSelectedLine().InventoryDocumentLine.product.Dimensions);
                });
                _this.isSingleSelectedLineError = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this.singleSelectedLine())) {
                        return false;
                    }
                    return _this.singleSelectedLine().SeverityValue >= Commerce.Proxy.Entities.InventoryDocumentValidationResultSeverity.Error;
                });
                _this.isSingleSelectedLineWarning = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this.singleSelectedLine())) {
                        return false;
                    }
                    return _this.singleSelectedLine().SeverityValue <= Commerce.Proxy.Entities.InventoryDocumentValidationResultSeverity.Warning;
                });
                _this.singleSelectedLineErrorMessage = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this.singleSelectedLine())) {
                        return Commerce.StringExtensions.EMPTY;
                    }
                    return _this.singleSelectedLine().ErrorMessage;
                });
                _this.totalLines = ko.computed(function () {
                    return _this._summary().CategorySummaries.reduce(function (count, categorySummary) {
                        return count + (categorySummary.CategoryName === _this._getCategoryName(_this._activeCategory()) ?
                            categorySummary.TotalValidationResultCount : 0);
                    }, 0);
                });
                _this.isSingleSelectedLineWmsLocationIdEmpty = ko.computed(function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.singleSelectedLine())) {
                        return Commerce.ObjectExtensions.isNullOrUndefined(_this.singleSelectedLine().InventoryDocumentLine.LocationId)
                            || Commerce.StringExtensions.isEmpty(_this.singleSelectedLine().InventoryDocumentLine.LocationId);
                    }
                    return false;
                });
                _this.detailsPaneQuantityRemaining = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this.singleSelectedLine())) {
                        return 0;
                    }
                    return _this._getLineRemainingQuantity(_this.singleSelectedLine().InventoryDocumentLine);
                });
                _this.isSingleSelectedLineLocationActive = ko.computed(function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.singleSelectedLine())) {
                        return _this.singleSelectedDocumentLine().product.Behavior.IsStorageDimensionGroupLocationActive;
                    }
                    return false;
                });
                _this.isSingleSelectedLineSerialNumberActive = ko.computed(function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.singleSelectedLine())) {
                        return _this.singleSelectedDocumentLine().product.Behavior.IsSerialNumberRequired;
                    }
                    return false;
                });
                _this.isSingleSelectedLineNoteEmpty = ko.computed(function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.singleSelectedLine())) {
                        return Commerce.ObjectExtensions.isNullOrUndefined(_this.singleSelectedLine().InventoryDocumentLine.Note) ||
                            Commerce.StringExtensions.isEmpty(_this.singleSelectedLine().InventoryDocumentLine.Note);
                    }
                    return false;
                });
                _this._categories = Object.keys(InventoryDocumentValidationCategory)
                    .map(function (key) { return InventoryDocumentValidationCategory[key]; })
                    .filter(function (category) {
                    return _this._summary().CategorySummaries.some(function (categorySummary) {
                        return categorySummary.CategoryName === _this._getCategoryName(category);
                    });
                });
                return _this;
            }
            InventoryDocumentValidationViewModel.prototype.onClickOK = function () {
                Commerce.ViewModelAdapter.navigateBack();
            };
            InventoryDocumentValidationViewModel.prototype.onNavigateBack = function () {
                if (Commerce.Config.isPhone && this.isPhoneDetailVisible()) {
                    this.isPhoneDetailVisible(false);
                    return false;
                }
                return true;
            };
            InventoryDocumentValidationViewModel.prototype.onToggleDetailsPane = function () {
                this.isDetailsPaneVisible(!this.isDetailsPaneVisible());
            };
            InventoryDocumentValidationViewModel.prototype.onToggleDetailsPaneQuantity = function () {
                this.isDetailsPaneQuantityExpanded(!this.isDetailsPaneQuantityExpanded());
            };
            InventoryDocumentValidationViewModel.prototype.onUpdateLineLocationAsync = function () {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.singleSelectedLine())) {
                    var correlationId_12 = Commerce.LoggerHelper.getNewCorrelationId();
                    var line_8 = this.singleSelectedLine().InventoryDocumentLine;
                    return this._startWorkingAsync(correlationId_12)
                        .then(function (response) {
                        if (!response.canceled) {
                            return _this._editLineLocationAsync(_this._createEditLineOptions(correlationId_12, line_8));
                        }
                        return { canceled: true, data: null };
                    }).then(function (response) {
                        if (!response.canceled) {
                            return _this._submitUpdatedLineToServerAsync(response.data);
                        }
                        return { canceled: true, data: null };
                    }).catch(this._handleAsyncOperationRejection);
                }
                return Promise.resolve({ canceled: true, data: null });
            };
            InventoryDocumentValidationViewModel.prototype.onUpdateLineQuantityAsync = function () {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.singleSelectedLine())) {
                    var correlationId_13 = Commerce.LoggerHelper.getNewCorrelationId();
                    var line_9 = this.singleSelectedLine().InventoryDocumentLine;
                    var quantityBeforeUpdate_2 = line_9.QuantityToUpdate;
                    return this._startWorkingAsync(correlationId_13)
                        .then(function (response) {
                        if (!response.canceled) {
                            return _this._editLineQuantityAsync(_this._createEditLineOptions(correlationId_13, line_9));
                        }
                        return { canceled: true, data: null };
                    })
                        .then(function (response) {
                        if (!response.canceled) {
                            return _this._submitUpdatedLineToServerAsync(response.data);
                        }
                        return { canceled: true, data: null };
                    }).then(function (response) {
                        if (!response.canceled) {
                            if (response.data.line.QuantityToUpdate > 0 && response.data.line.product.Behavior.IsSerialNumberRequired) {
                                if (response.data.line.QuantityToUpdate - quantityBeforeUpdate_2 === 1) {
                                    return _this._registerSerialNumberForLineAsync(correlationId_13, response.data.line);
                                }
                                return _this._promptToRegisterSerialNumberAsync(correlationId_13, response.data.line)
                                    .then(function (response) {
                                    return { canceled: !response.canceled, data: null };
                                });
                            }
                            return { canceled: false, data: null };
                        }
                        return { canceled: true, data: null };
                    }).catch(this._handleAsyncOperationRejection);
                }
                return Promise.resolve({ canceled: true, data: null });
            };
            InventoryDocumentValidationViewModel.prototype.onDataListSelectionChanged = function (lines) {
                var _this = this;
                this.selectedLines(this.selectedLines()
                    .filter(function (line) {
                    return line.CategoryName !== _this._getCategoryName(_this._activeCategory());
                }));
                if (Commerce.ArrayExtensions.hasElements(lines)) {
                    this.selectedLines(this.selectedLines().concat(Commerce.ArrayExtensions.firstOrUndefined(lines)));
                }
                this.isPhoneDetailVisible(Commerce.ArrayExtensions.hasElements(lines));
            };
            InventoryDocumentValidationViewModel.prototype.getSerialNumberLinesAsync = function (pageSize, skip) {
                return this._getValidationResultLinesAsync(InventoryDocumentValidationCategory.SerialNumber, pageSize, skip);
            };
            InventoryDocumentValidationViewModel.prototype.getLocationLinesAsync = function (pageSize, skip) {
                return this._getValidationResultLinesAsync(InventoryDocumentValidationCategory.Location, pageSize, skip);
            };
            InventoryDocumentValidationViewModel.prototype.getOvershippingLinesAsync = function (pageSize, skip) {
                return this._getValidationResultLinesAsync(InventoryDocumentValidationCategory.Overshipping, pageSize, skip);
            };
            InventoryDocumentValidationViewModel.prototype.getOverreceivingLinesAsync = function (pageSize, skip) {
                return this._getValidationResultLinesAsync(InventoryDocumentValidationCategory.Overreceiving, pageSize, skip);
            };
            InventoryDocumentValidationViewModel.prototype.getUndershippingLinesAsync = function (pageSize, skip) {
                return this._getValidationResultLinesAsync(InventoryDocumentValidationCategory.Undershipping, pageSize, skip);
            };
            InventoryDocumentValidationViewModel.prototype.getUnderreceivingLinesAsync = function (pageSize, skip) {
                return this._getValidationResultLinesAsync(InventoryDocumentValidationCategory.Underreceiving, pageSize, skip);
            };
            InventoryDocumentValidationViewModel.prototype.getSourceLineDeletedLinesAsync = function (pageSize, skip) {
                return this._getValidationResultLinesAsync(InventoryDocumentValidationCategory.SourceLineDeleted, pageSize, skip);
            };
            InventoryDocumentValidationViewModel.prototype.onNavigateToSerialNumberViewAsync = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                return this._startWorkingAsync(correlationId)
                    .then(function (response) {
                    if (!response.canceled) {
                        var options = {
                            correlationId: correlationId,
                            document: _this._document(),
                        };
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.singleSelectedLine())
                            && !Commerce.StringExtensions.isNullOrWhitespace(_this.singleSelectedLine().InventoryDocumentLine.LineId)
                            && _this.singleSelectedLine().InventoryDocumentLine.product.Behavior.IsSerialNumberRequired) {
                            options.documentLine = _this.singleSelectedLine().InventoryDocumentLine;
                        }
                        Commerce.ViewModelAdapter.navigate("InventoryDocumentSerialNumberManagementView", options);
                        return { canceled: false, data: null };
                    }
                    return { canceled: true, data: null };
                }).catch(this._handleAsyncOperationRejection);
            };
            InventoryDocumentValidationViewModel.prototype.onUpdateLineNoteAsync = function () {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.singleSelectedLine())) {
                    var correlationId_14 = Commerce.LoggerHelper.getNewCorrelationId();
                    var line_10 = this.singleSelectedLine().InventoryDocumentLine;
                    return this._startWorkingAsync(correlationId_14)
                        .then(function (response) {
                        if (!response.canceled) {
                            return _this._editLineNoteAsync(_this._createEditLineOptions(correlationId_14, line_10));
                        }
                        return { canceled: true, data: null };
                    }).then(function (response) {
                        if (!response.canceled) {
                            return _this._submitUpdatedLineToServerAsync(response.data);
                        }
                        return { canceled: true, data: null };
                    }).catch(this._handleAsyncOperationRejection);
                }
                return Promise.resolve({ canceled: true, data: null });
            };
            InventoryDocumentValidationViewModel.prototype.switchSelectionMode = function (event) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(event.detail)) {
                    this._activeCategory(this._categories[event.detail.index]);
                }
            };
            InventoryDocumentValidationViewModel.prototype._createEditLineOptions = function (correlationId, line) {
                return {
                    line: line,
                    correlationId: correlationId,
                    result: {
                        quantity: null,
                        wmsLocationId: null,
                        note: null,
                        isCloseLine: null,
                    }
                };
            };
            InventoryDocumentValidationViewModel.prototype._editLineLocationAsync = function (editOptionsAndResult) {
                var _this = this;
                return Commerce.ApplicationContext.Instance.warehouseAsync.value.getPromise().then(function (warehouse) {
                    var predefinedLocations = [];
                    if (editOptionsAndResult.line.product.Behavior.IsStorageDimensionGroupLocationAllowBlankReceiptEnabled) {
                        predefinedLocations.push(Commerce.StringExtensions.EMPTY);
                    }
                    var request = new Commerce.Inventory.SelectInventoryDocumentLineWarehouseLocationClientRequest(editOptionsAndResult.correlationId, warehouse.IsWMSEnabled, predefinedLocations, editOptionsAndResult.line.LocationId);
                    return _this.context.runtime.executeAsync(request)
                        .then(function (response) {
                        if (!response.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(response.data.result)) {
                            editOptionsAndResult.result.wmsLocationId = response.data.result.LocationId;
                            return { canceled: false, data: editOptionsAndResult };
                        }
                        return { canceled: true, data: null };
                    });
                });
            };
            InventoryDocumentValidationViewModel.prototype._editLineNoteAsync = function (editOptionsAndResult) {
                var showTextInputDialogClientRequest = new Commerce.ShowTextInputDialogClientRequest({
                    label: this.context.stringResourceManager.getString(Commerce.ObjectExtensions.isNullOrUndefined(editOptionsAndResult.line.Note) || Commerce.StringExtensions.isEmpty(editOptionsAndResult.line.Note)
                        ? "string_12441" : "string_12450"),
                    defaultText: editOptionsAndResult.line.Note,
                });
                return this.context.runtime.executeAsync(showTextInputDialogClientRequest)
                    .then(function (textInputResult) {
                    if (textInputResult.canceled) {
                        return { canceled: true, data: null };
                    }
                    else {
                        editOptionsAndResult.result.note = textInputResult.data.result.value;
                        return { canceled: false, data: editOptionsAndResult };
                    }
                });
            };
            InventoryDocumentValidationViewModel.prototype._editLineQuantityAsync = function (editOptionsAndResult, quantityThreshold, isOverDeliveryAllowed) {
                var request = new Commerce.Inventory.GetInventoryDocumentLineQuantityClientRequest(editOptionsAndResult.correlationId, this._document(), Commerce.ObjectExtensions.isNumber(editOptionsAndResult.result.quantity) ?
                    editOptionsAndResult.result.quantity : editOptionsAndResult.line.QuantityToUpdate, quantityThreshold, isOverDeliveryAllowed);
                return this.context.runtime.executeAsync(request)
                    .then(function (response) {
                    if (!response.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(response.data.result)) {
                        editOptionsAndResult.result.quantity = response.data.result;
                        return { canceled: false, data: editOptionsAndResult };
                    }
                    return { canceled: true, data: null };
                });
            };
            InventoryDocumentValidationViewModel.prototype._exitOrPromptToUpdateWorkingTerminalAsync = function (correlationId, errors) {
                var _this = this;
                var documentLockedError = Commerce.ErrorHelper.getError(errors, Commerce.Inventory.InventoryDocumentLockedByOtherTerminalError);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(documentLockedError)) {
                    var exception = documentLockedError.commerceException;
                    return this.context.runtime.executeAsync(new Commerce.Inventory.UpdateInventoryDocumentWorkingTerminalClientRequest(correlationId, this._document(), exception.WorkingTerminalId))
                        .then(function (response) {
                        if (!response.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(response.data.result)) {
                            _this._document(response.data.result);
                            return { canceled: false, data: null };
                        }
                        return { canceled: true, data: null };
                    });
                }
                return Promise.reject(errors);
            };
            InventoryDocumentValidationViewModel.prototype._getCategoryName = function (category) {
                switch (category) {
                    case InventoryDocumentValidationCategory.SerialNumber:
                        return Commerce.Client.Entities.InventoryDocumentValidationCategoryName.SERIAL_NUMBER_ERRORS;
                    case InventoryDocumentValidationCategory.Location:
                        return Commerce.Client.Entities.InventoryDocumentValidationCategoryName.LOCATION_CONTROLLED_LINE_ERRORS;
                    case InventoryDocumentValidationCategory.Overshipping:
                        return Commerce.Client.Entities.InventoryDocumentValidationCategoryName.OVERSHIPPING_ERRORS;
                    case InventoryDocumentValidationCategory.Overreceiving:
                        return Commerce.Client.Entities.InventoryDocumentValidationCategoryName.OVERRECEIVING_ERRORS;
                    case InventoryDocumentValidationCategory.Undershipping:
                        return Commerce.Client.Entities.InventoryDocumentValidationCategoryName.UNDERSHIPPING_ERRORS;
                    case InventoryDocumentValidationCategory.Underreceiving:
                        return Commerce.Client.Entities.InventoryDocumentValidationCategoryName.UNDERRECEIVING_ERRORS;
                    case InventoryDocumentValidationCategory.SourceLineDeleted:
                        return Commerce.Client.Entities.InventoryDocumentValidationCategoryName.LINE_DELETED_ERRORS;
                    default:
                        return Commerce.StringExtensions.EMPTY;
                }
            };
            InventoryDocumentValidationViewModel.prototype._getDataListColumns = function () {
                var _this = this;
                switch (this._activeCategory()) {
                    case InventoryDocumentValidationCategory.SerialNumber:
                    case InventoryDocumentValidationCategory.Location:
                    case InventoryDocumentValidationCategory.Overshipping:
                    case InventoryDocumentValidationCategory.Overreceiving:
                    case InventoryDocumentValidationCategory.Undershipping:
                    case InventoryDocumentValidationCategory.Underreceiving:
                    case InventoryDocumentValidationCategory.SourceLineDeleted:
                        return [
                            {
                                titleResx: "string_12413",
                                ratio: 13,
                                minWidth: 150,
                                collapseOrder: 6,
                                computeValue: function (row) {
                                    return row.InventoryDocumentLine.product.ItemId;
                                },
                                converter: "Commerce.Core.Converter.textContentFormatter",
                            },
                            {
                                titleResx: "string_12414",
                                ratio: 22,
                                minWidth: 280,
                                collapseOrder: 1,
                                computeValue: function (row) {
                                    if (Commerce.ArrayExtensions.hasElements(row.InventoryDocumentLine.product.Dimensions)) {
                                        var formatString = _this.context.stringResourceManager.getString("string_4385");
                                        return Commerce.StringExtensions.format(formatString, row.InventoryDocumentLine.product.Name, Commerce.SimpleProductHelper.getProductDimensionsDescription(row.InventoryDocumentLine.product.Dimensions));
                                    }
                                    return row.InventoryDocumentLine.product.Name;
                                },
                                converter: "Commerce.Core.Converter.textContentFormatter",
                            },
                            {
                                titleResx: "string_12415",
                                ratio: 13,
                                minWidth: 150,
                                collapseOrder: 2,
                                computeValue: function (row) {
                                    return row.InventoryDocumentLine.LocationId;
                                },
                                converter: "Commerce.Core.Converter.textContentFormatter",
                            },
                            {
                                titleResx: "string_12416",
                                ratio: 13,
                                minWidth: 150,
                                collapseOrder: 3,
                                computeValue: function (row) {
                                    return Commerce.ObjectExtensions.isNullOrUndefined(row.InventoryDocumentLine.QuantityOrdered) ||
                                        (row.InventoryDocumentLine.QuantityOrdered === row.InventoryDocumentLine.SourceDocumentLine.QuantityOrdered) ?
                                        "" + row.InventoryDocumentLine.SourceDocumentLine.QuantityOrdered :
                                        row.InventoryDocumentLine.SourceDocumentLine.QuantityOrdered + " (" + row.InventoryDocumentLine.QuantityOrdered + ")";
                                },
                                isRightAligned: true
                            },
                            {
                                titleResx: this._isReceivingOperation() ? "string_12417" : "string_12621",
                                ratio: 13,
                                minWidth: 150,
                                collapseOrder: 4,
                                computeValue: function (row) {
                                    return _this._isReceivingOperation() ?
                                        row.InventoryDocumentLine.SourceDocumentLine.QuantityReceived :
                                        row.InventoryDocumentLine.SourceDocumentLine.QuantityShipped;
                                },
                                isRightAligned: true
                            },
                            {
                                titleResx: this._isReceivingOperation() ? "string_12418" : "string_12508",
                                ratio: 13,
                                minWidth: 150,
                                collapseOrder: 5,
                                computeValue: function (row) {
                                    return row.InventoryDocumentLine.QuantityToUpdate;
                                },
                                isRightAligned: true
                            },
                            {
                                titleResx: "string_12911",
                                ratio: 13,
                                minWidth: 150,
                                collapseOrder: 7,
                                computeValue: function (row) {
                                    return _this.context.stringResourceManager.getString(row.SeverityValue >= Commerce.Proxy.Entities.InventoryDocumentValidationResultSeverity.Error ? "string_12912" : "string_12913");
                                }
                            },
                        ];
                    default:
                        return [];
                }
            };
            InventoryDocumentValidationViewModel.prototype._getDocumentLineKey = function (line, category) {
                return line.SourceDocumentRecordId.toString() +
                    line.SourceDocumentTypeValue.toString() +
                    line.SourceDocumentLineRecordId.toString() +
                    category.toString();
            };
            InventoryDocumentValidationViewModel.prototype._getValidationResultLinesAsync = function (category, pageSize, skip) {
                var _this = this;
                var criteria = {
                    DocumentId: this._document().WorkDocumentId,
                    DocumentVersion: this._document().LongVersion,
                    SeverityValue: Commerce.Proxy.Entities.InventoryDocumentValidationResultSeverity.Informational,
                    Categories: [this._getCategoryName(category)]
                };
                return Commerce.AsyncResult.fromPromise(this._isBusyUntil(this.inventoryManager.searchInventoryDocumentValidationResultLinesAsync(criteria, pageSize, skip)).getPromise()
                    .then(function (validationResultLines) {
                    var criteria = {
                        DocumentLineIds: validationResultLines.map(function (validationResultLine) {
                            return validationResultLine.DocumentLineId;
                        })
                    };
                    if (!Commerce.ArrayExtensions.hasElements(criteria.DocumentLineIds)) {
                        return [];
                    }
                    var asyncQueue = new Commerce.AsyncQueue();
                    var originalLines;
                    asyncQueue.enqueue(function () {
                        return _this.inventoryManager.searchInventoryDocumentLinesAsync(criteria, pageSize, skip)
                            .done(function (documentLines) {
                            originalLines = documentLines;
                        });
                    }).enqueue(function (documentLines) {
                        var productIds = documentLines.map(function (documentLine) { return documentLine.SourceDocumentLine.ProductId; });
                        return Commerce.AsyncResult.fromPromise(_this._getProductsByIdsAsync(productIds));
                    }).enqueue(function (products) {
                        var documentLines = originalLines.map(function (originalLine, index) {
                            return new Commerce.Client.Entities.InventoryInboundOutboundDocumentLineWithProduct(originalLine, products[index]);
                        });
                        validationResultLines.forEach(function (validationResultLine) {
                            validationResultLine.InventoryDocumentLine =
                                documentLines.filter(function (documentLine) {
                                    return validationResultLine.DocumentLineId === documentLine.LineId;
                                })[0];
                        });
                        return Commerce.AsyncResult.createResolved(validationResultLines);
                    });
                    return _this._isBusyUntil(asyncQueue.run())
                        .map(function (result) { return result.data; }).getPromise();
                })
                    .then(function (result) {
                    result.forEach(function (value, index) {
                        _this._validationResultLinesIndexes.setItem(_this._getDocumentLineKey(value.InventoryDocumentLine, category), index + skip);
                    });
                    _this._validationResultLines(__spreadArrays(_this._validationResultLines().filter(function (line) {
                        return line.CategoryName !== _this._getCategoryName(category);
                    }), result));
                    return result;
                })).fail(this._handleAsyncOperationRejection);
            };
            InventoryDocumentValidationViewModel.prototype._getLineRemainingQuantity = function (line) {
                var remaining;
                if (this._isReceivingOperation()) {
                    remaining = line.SourceDocumentLine.QuantityOrdered - line.SourceDocumentLine.QuantityReceived;
                }
                else {
                    remaining = line.SourceDocumentLine.QuantityOrdered - line.SourceDocumentLine.QuantityShipped;
                }
                return Math.max(0, remaining);
            };
            InventoryDocumentValidationViewModel.prototype._handleAsyncOperationRejection = function (error) {
                if (error instanceof Commerce.Proxy.Entities.Error) {
                    Commerce.NotificationHandler.displayClientErrors([error]);
                    return Promise.reject([error]);
                }
                else if (error instanceof Array) {
                    Commerce.NotificationHandler.displayClientErrors(error);
                }
                else if (!Commerce.ObjectExtensions.isNullOrUndefined(error)) {
                    setTimeout(function () {
                        throw error;
                    });
                }
                return Promise.reject(error);
            };
            InventoryDocumentValidationViewModel.prototype._matchAndUpdateLocalLine = function (updatedLine) {
                var _this = this;
                Object.keys(InventoryDocumentValidationCategory)
                    .map(function (key) { return InventoryDocumentValidationCategory[key]; })
                    .forEach(function (category) {
                    var updatedLineKey = _this._getDocumentLineKey(updatedLine, category);
                    if (_this._validationResultLinesIndexes.hasItem(updatedLineKey)) {
                        var index = _this._validationResultLinesIndexes.getItem(updatedLineKey);
                        var validationResultLine_1 = Commerce.ArrayExtensions.firstOrUndefined(_this._validationResultLines()
                            .filter(function (line) {
                            return line.CategoryName === _this._getCategoryName(category) && line.DocumentLineId === updatedLine.LineId;
                        }));
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(validationResultLine_1)) {
                            validationResultLine_1.InventoryDocumentLine = updatedLine;
                            _this._getUpdateLineCallbackFunctionByCategory(category)(index, validationResultLine_1);
                            _this._validationResultLines.valueHasMutated();
                        }
                    }
                });
                var validationResultLine = this.singleSelectedLine();
                validationResultLine.InventoryDocumentLine = updatedLine;
                this.selectedLines(this.selectedLines()
                    .filter(function (line) {
                    return line.CategoryName !== validationResultLine.CategoryName;
                })
                    .concat(validationResultLine));
            };
            InventoryDocumentValidationViewModel.prototype._promptToRegisterSerialNumberAsync = function (correlationId, line) {
                var _this = this;
                var request = new Commerce.Inventory.PromptToRegisterInventoryDocumentSerialNumberClientRequest(correlationId, line);
                return this.context.runtime.executeAsync(request)
                    .then(function (response) {
                    if (!response.canceled) {
                        var options = {
                            correlationId: correlationId,
                            document: _this._document(),
                            documentLine: line,
                        };
                        Commerce.ViewModelAdapter.navigate("InventoryDocumentSerialNumberManagementView", options);
                        return { canceled: false, data: null };
                    }
                    return { canceled: true, data: null };
                });
            };
            InventoryDocumentValidationViewModel.prototype._registerSerialNumberForLineAsync = function (correlationId, line) {
                var _this = this;
                return this.context.runtime.executeAsync(new Commerce.Inventory.GetInventoryDocumentSerialNumberClientRequest(correlationId, line.product))
                    .then(function (response) {
                    if (!response.canceled) {
                        var updateRequest = new Commerce.Inventory.UpdateInventoryDocumentSerialNumberLineClientRequest(correlationId, _this._document(), response.data.result, line.LineId);
                        return _this.context.runtime.executeAsync(updateRequest);
                    }
                    return { canceled: true, data: null };
                }).then(function (response) {
                    if (!response.canceled) {
                        _this._document(response.data.result.document);
                        return { canceled: false, data: null };
                    }
                    return { canceled: true, data: null };
                });
            };
            InventoryDocumentValidationViewModel.prototype._startWorkingAsync = function (correlationId) {
                var _this = this;
                var startRequest = new Commerce.Inventory.StartInventoryDocumentClientRequest(correlationId, this._document());
                return this._isBusyUntil(Commerce.AsyncResult.fromPromise(this.context.runtime.executeAsync(startRequest).then(function (response) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(response.data.result)) {
                        _this._document(response.data.result);
                        return { canceled: false, data: null };
                    }
                    return { canceled: true, data: null };
                }))).getPromise();
            };
            InventoryDocumentValidationViewModel.prototype._submitUpdatedLineToServerAsync = function (editOptionsAndResult) {
                var _this = this;
                var line = new Commerce.Proxy.Entities.InventoryInboundOutboundDocumentLineClass(editOptionsAndResult.line);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(editOptionsAndResult.result.quantity)) {
                    line.QuantityToUpdate = editOptionsAndResult.result.quantity;
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(editOptionsAndResult.result.wmsLocationId)) {
                    line.LocationId = editOptionsAndResult.result.wmsLocationId;
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(editOptionsAndResult.result.note)) {
                    line.Note = editOptionsAndResult.result.note;
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(editOptionsAndResult.result.isCloseLine)) {
                    line.IsCloseLine = editOptionsAndResult.result.isCloseLine;
                }
                return this.inventoryManager.updateInventoryDocumentLineAsync(this._document().WorkDocumentId, line).getPromise()
                    .then(function (updatedLine) {
                    var updatedLineWithProduct = new Commerce.Client.Entities.InventoryInboundOutboundDocumentLineWithProduct(updatedLine, editOptionsAndResult.line.product);
                    _this._matchAndUpdateLocalLine(updatedLineWithProduct);
                    editOptionsAndResult.line = updatedLineWithProduct;
                    return { canceled: false, data: editOptionsAndResult };
                }).catch(function (errors) {
                    var exceedMaximumQuantityError = Commerce.ErrorHelper.getError(errors, Commerce.Inventory.InventoryDocumentExceedMaximumQuantityError);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(exceedMaximumQuantityError)) {
                        var exception = exceedMaximumQuantityError.commerceException;
                        editOptionsAndResult.result.quantity = exception.MaximumQuantity;
                        return _this._editLineQuantityAsync(editOptionsAndResult, exception.MaximumQuantity, exception.AllowOverDelivery)
                            .then(function (response) {
                            if (!response.canceled) {
                                return _this._submitUpdatedLineToServerAsync(response.data);
                            }
                            return { canceled: true, data: null };
                        });
                    }
                    return _this._exitOrPromptToUpdateWorkingTerminalAsync(editOptionsAndResult.correlationId, errors)
                        .then(function (response) {
                        if (!response.canceled) {
                            return _this._submitUpdatedLineToServerAsync(editOptionsAndResult);
                        }
                        return { canceled: true, data: null };
                    });
                });
            };
            InventoryDocumentValidationViewModel.prototype._getProductsByIdsAsync = function (productIds) {
                var _this = this;
                if (!Commerce.ArrayExtensions.hasElements(productIds)) {
                    return Promise.resolve([]);
                }
                var returnProductRequests = [];
                var productIdsToQuery = [];
                var productIdsToQueryDict = new Commerce.Dictionary();
                productIds.forEach(function (productId, index) {
                    if (_this._productDataCache.hasItem(productId)) {
                        returnProductRequests[index] = Promise.resolve(_this._productDataCache.getItem(productId));
                    }
                    else if (_this._getProductDataRequests.hasItem(productId)) {
                        returnProductRequests[index] = _this._getProductDataRequests.getItem(productId);
                    }
                    else {
                        productIdsToQuery.push(productId);
                        productIdsToQueryDict.setItem(productId, true);
                    }
                });
                if (Commerce.ArrayExtensions.hasElements(productIdsToQuery)) {
                    var productManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IProductManagerName);
                    var getByIdsAsync_4 = productManager.getByIdsAsync(productIdsToQuery, 0).getPromise();
                    productIds.forEach(function (productId, index) {
                        if (productIdsToQueryDict.hasItem(productId)) {
                            returnProductRequests[index] = getByIdsAsync_4.then(function (result) {
                                var foundProduct = Commerce.ArrayExtensions.firstOrUndefined(result, function (elem) { return elem.RecordId === productId; });
                                if (!Commerce.ObjectExtensions.isNullOrUndefined(foundProduct)) {
                                    _this._productDataCache.setItem(productId, foundProduct);
                                    _this._getProductDataRequests.removeItem(productId);
                                    return Promise.resolve(foundProduct);
                                }
                                else {
                                    var productNotFoundError = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PRODUCT_DETAILS_NOT_FOUND_ERROR_MESSAGE);
                                    return Promise.reject(productNotFoundError);
                                }
                            }).catch(function (errors) {
                                _this._getProductDataRequests.removeItem(productId);
                                return Promise.reject(errors);
                            });
                            _this._getProductDataRequests.setItem(productId, returnProductRequests[index]);
                        }
                    });
                }
                return Promise.all(returnProductRequests);
            };
            InventoryDocumentValidationViewModel.prototype._getValidationCategoryByCategoryName = function (categoryName) {
                switch (categoryName) {
                    case Commerce.Client.Entities.InventoryDocumentValidationCategoryName.SERIAL_NUMBER_ERRORS:
                        return InventoryDocumentValidationCategory.SerialNumber;
                    case Commerce.Client.Entities.InventoryDocumentValidationCategoryName.LOCATION_ERRORS:
                    case Commerce.Client.Entities.InventoryDocumentValidationCategoryName.LOCATION_CONTROLLED_LINE_ERRORS:
                        return InventoryDocumentValidationCategory.Location;
                    case Commerce.Client.Entities.InventoryDocumentValidationCategoryName.OVERSHIPPING_ERRORS:
                        return InventoryDocumentValidationCategory.Overshipping;
                    case Commerce.Client.Entities.InventoryDocumentValidationCategoryName.OVERRECEIVING_ERRORS:
                        return InventoryDocumentValidationCategory.Overreceiving;
                    case Commerce.Client.Entities.InventoryDocumentValidationCategoryName.UNDERSHIPPING_ERRORS:
                        return InventoryDocumentValidationCategory.Undershipping;
                    case Commerce.Client.Entities.InventoryDocumentValidationCategoryName.UNDERRECEIVING_ERRORS:
                        return InventoryDocumentValidationCategory.Underreceiving;
                    case Commerce.Client.Entities.InventoryDocumentValidationCategoryName.LINE_DELETED_ERRORS:
                        return InventoryDocumentValidationCategory.SourceLineDeleted;
                    default:
                        return null;
                }
            };
            InventoryDocumentValidationViewModel.prototype._getUpdateLineCallbackFunctionByCategory = function (category) {
                switch (category) {
                    case InventoryDocumentValidationCategory.SerialNumber:
                        return this.updateSerialNumberLineCallback();
                    case InventoryDocumentValidationCategory.Location:
                        return this.updateLocationLineCallback();
                    case InventoryDocumentValidationCategory.Overshipping:
                        return this.updateOvershippingLineCallback();
                    case InventoryDocumentValidationCategory.Overreceiving:
                        return this.updateOverreceivingLineCallback();
                    case InventoryDocumentValidationCategory.Undershipping:
                        return this.updateUndershippingLineCallback();
                    case InventoryDocumentValidationCategory.Underreceiving:
                        return this.updateUnderreceivingLineCallback();
                    case InventoryDocumentValidationCategory.SourceLineDeleted:
                        return this.updateSourceLineDeletedLineCallback();
                    default:
                        return null;
                }
            };
            return InventoryDocumentValidationViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.InventoryDocumentValidationViewModel = InventoryDocumentValidationViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var SelectInventoryDocumentWarehouseDialogViewModel = (function (_super) {
            __extends(SelectInventoryDocumentWarehouseDialogViewModel, _super);
            function SelectInventoryDocumentWarehouseDialogViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this.reloadWarehousesCallback = ko.observable(function () { return; });
                _this.searchText = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.isBusyFlag = ko.observable(false);
                _this._isBusyWhen(ko.computed(function () { return _this.isBusyFlag(); }));
                _this.isWarehouseEmpty = ko.observable(true);
                _this.selectedWarehouse = ko.observable(Commerce.StringExtensions.EMPTY);
                return _this;
            }
            SelectInventoryDocumentWarehouseDialogViewModel.prototype.load = function (options) {
                this.selectedWarehouse(options.defaultWarehouse);
                this.performWarehouseSearch();
            };
            SelectInventoryDocumentWarehouseDialogViewModel.prototype.getWarehousesAsync = function (pageSize, skip) {
                var _this = this;
                return this.warehouseManager.searchWarehousesAsync(this.searchText(), pageSize, skip)
                    .map(function (result) {
                    _this.isWarehouseEmpty(Commerce.ArrayExtensions.hasElements(result));
                    return result.map(function (element) { return (__assign(__assign({}, element), { selected: element.InventLocation === _this.selectedWarehouse() })); });
                })
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            SelectInventoryDocumentWarehouseDialogViewModel.prototype.performWarehouseSearch = function () {
                this.reloadWarehousesCallback()();
            };
            return SelectInventoryDocumentWarehouseDialogViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.SelectInventoryDocumentWarehouseDialogViewModel = SelectInventoryDocumentWarehouseDialogViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var SelectInventoryDocumentWarehouseLocationDialogViewModel = (function (_super) {
            __extends(SelectInventoryDocumentWarehouseLocationDialogViewModel, _super);
            function SelectInventoryDocumentWarehouseLocationDialogViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this.reloadWarehouseLocationsCallback = ko.observable(function () { return; });
                _this.searchText = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.isBusyFlag = ko.observable(false);
                _this._isBusyWhen(ko.computed(function () { return _this.isBusyFlag(); }));
                _this.itemName = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.itemId = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.itemPrimaryImageUrl = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.productDimensionsDescription = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.isWmsEnabled = ko.observable(false);
                _this.predefinedLocations = ko.observableArray([]);
                _this.selectedWarehouseLocation = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.isUpdateLinesByProduct = ko.observable(false);
                _this.hasProductData = ko.computed(function () { return !Commerce.StringExtensions.isNullOrWhitespace(_this.itemId()); });
                return _this;
            }
            SelectInventoryDocumentWarehouseLocationDialogViewModel.prototype.load = function (options) {
                this.itemName(options.itemName);
                this.itemId(options.itemId);
                this.itemPrimaryImageUrl(options.itemPrimaryImageUrl);
                this.productDimensionsDescription(options.productDimensionsDescription);
                this.isWmsEnabled(options.isWmsEnabled);
                this.predefinedLocations(options.predefinedLocations);
                this.selectedWarehouseLocation(options.defaultLocation);
                this.isUpdateLinesByProduct(options.isUpdateLinesByProduct);
                this.performWarehouseLocationSearch();
            };
            SelectInventoryDocumentWarehouseLocationDialogViewModel.prototype.getWarehouseLocationsAsync = function (pageSize, skip) {
                var _this = this;
                var searchCriteria = {
                    WarehouseIds: [Commerce.ApplicationContext.Instance.deviceConfiguration.InventLocationId],
                    IsLocationProfileRequired: false,
                    SearchText: this.searchText(),
                };
                var locationQueue = new Commerce.AsyncQueue();
                locationQueue.enqueue(function () {
                    return _this.warehouseManager.searchWarehouseLocationsAsync(searchCriteria, pageSize, skip);
                }).enqueue(function (result) {
                    var warehouseLocations = skip === 0 ? _this._getPredefinedCustomLocations() : [];
                    result.forEach(function (element) {
                        var extendedElement = __assign(__assign({}, element), { selected: element.LocationId === _this.selectedWarehouseLocation(), friendlyLabel: element.LocationId, isWmsLocationIdEmpty: Commerce.StringExtensions.isNullOrWhitespace(element.LocationId) });
                        warehouseLocations.push(extendedElement);
                    });
                    return Commerce.AsyncResult.createResolved(warehouseLocations);
                }).enqueue(function (result) {
                    return _this.channelManager.getInventoryConfigurationAsync()
                        .map(function (parameters) {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(parameters)
                            || Commerce.StringExtensions.isNullOrWhitespace(parameters.UserLocationProfileId)) {
                            return result;
                        }
                        return result.filter(function (location) {
                            return location.ProfileId !== parameters.UserLocationProfileId;
                        });
                    });
                });
                return locationQueue.run()
                    .map(function (result) {
                    return result.data;
                });
            };
            SelectInventoryDocumentWarehouseLocationDialogViewModel.prototype.performWarehouseLocationSearch = function () {
                this.reloadWarehouseLocationsCallback()();
            };
            SelectInventoryDocumentWarehouseLocationDialogViewModel.prototype._getPredefinedCustomLocations = function () {
                var _this = this;
                return this.predefinedLocations().map(function (element) { return ({
                    LocationId: element,
                    IsLicensePlateControlled: false,
                    selected: element === _this.selectedWarehouseLocation(),
                    friendlyLabel: element === SelectInventoryDocumentWarehouseLocationDialogViewModel.LOCATION_NOT_SET
                        ? _this.context.stringResourceManager.getString("string_12434")
                        : element,
                    isWmsLocationIdEmpty: Commerce.StringExtensions.isNullOrWhitespace(element),
                }); });
            };
            SelectInventoryDocumentWarehouseLocationDialogViewModel.LOCATION_NOT_SET = Commerce.StringExtensions.EMPTY;
            return SelectInventoryDocumentWarehouseLocationDialogViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.SelectInventoryDocumentWarehouseLocationDialogViewModel = SelectInventoryDocumentWarehouseLocationDialogViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        ko.observableArray["fn"].update = function (newArray, updateItemPredicate) {
            if (!Commerce.ArrayExtensions.hasElements(newArray)) {
                this.removeAll();
                return;
            }
            var originalArray = this();
            var wasUpdated = false;
            updateItemPredicate = Commerce.ObjectExtensions.isFunction(updateItemPredicate) ? updateItemPredicate : function (_) { return false; };
            var linesToReplace = (newArray.length <= originalArray.length) ? newArray.length : originalArray.length;
            for (var i = 0; i < linesToReplace; i++) {
                if (updateItemPredicate(originalArray[i].item(), newArray[i])) {
                    originalArray[i].item(newArray[i]);
                    wasUpdated = true;
                }
            }
            var linesToAdd = (newArray.length > originalArray.length) ? (newArray.length - originalArray.length) : 0;
            for (var i = 0; i < linesToAdd; i++) {
                originalArray.push({ item: ko.observable(newArray[linesToReplace + i]) });
            }
            var linesToRemove = (originalArray.length > newArray.length) ? (originalArray.length - newArray.length) : 0;
            if (linesToRemove > 0) {
                originalArray.splice(linesToReplace, linesToRemove);
            }
            if (wasUpdated || linesToAdd > 0 || linesToRemove > 0) {
                this.valueHasMutated();
            }
        };
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var AddWarrantyToAnExistingTransactionViewModel = (function (_super) {
            __extends(AddWarrantyToAnExistingTransactionViewModel, _super);
            function AddWarrantyToAnExistingTransactionViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                _this.selectedSalesOrder = ko.observable(options.salesOrder);
                _this.hasSelectedSalesOrder = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedSalesOrder());
                }, _this);
                _this.salesLinesForDisplay = ko.observableArray([]);
                _this.hasSalesLinesForDisplay = ko.computed(function () {
                    return Commerce.ArrayExtensions.hasElements(_this.salesLinesForDisplay());
                }, _this);
                _this.selectedSalesLines = ko.observableArray([]);
                _this.hasSelectedSalesLines = ko.computed(function () {
                    return Commerce.ArrayExtensions.hasElements(_this.selectedSalesLines());
                }, _this);
                _this._productsByProductId = new Commerce.Dictionary();
                _this._isBusyFlag = ko.observable(false);
                _this._isBusyWhen(ko.computed(function () { return _this._isBusyFlag(); }));
                _this._isBusyUntilCounterInternal = ko.observable(0);
                _this._isBusyWhen(ko.computed(function () { return _this._isBusyUntilCounterInternal() > 0; }));
                _this._selectionHandler = options.selectionHandler;
                _this._cancelSelectionHandlerOnHidden = true;
                return _this;
            }
            AddWarrantyToAnExistingTransactionViewModel.prototype.loadAsync = function () {
                var CORRELATION_ID = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.viewModelAddWarrantyToAnExistingTransactionViewModelLoadAsyncStarted(CORRELATION_ID);
                return this._isBusyUntil(this._prepareAndSetSalesLineDataFromOrderAsync())
                    .done(function () {
                    Commerce.RetailLogger.viewModelAddWarrantyToAnExistingTransactionViewModelLoadAsyncFinished(CORRELATION_ID);
                }).fail(function (loadErrors) {
                    Commerce.NotificationHandler.displayClientErrors(loadErrors);
                    Commerce.RetailLogger.viewModelAddWarrantyToAnExistingTransactionViewModelLoadAsyncFailed(CORRELATION_ID, Commerce.ErrorHelper.serializeErrorsForRetailLogger(loadErrors));
                });
            };
            AddWarrantyToAnExistingTransactionViewModel.prototype.sellWarrantyForSalesOrderLinesAsync = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var selectedSalesLines = this.selectedSalesLines();
                if (!Commerce.ArrayExtensions.hasElements(selectedSalesLines)) {
                    this._selectionHandler.cancel();
                    return Commerce.AsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.WARRANTY_NO_ITEM_SELECTED)]);
                }
                var asyncQueue = new Commerce.AsyncQueue();
                if (!Commerce.StringExtensions.isNullOrWhitespace(this.selectedSalesOrder().CustomerId) &&
                    this.selectedSalesOrder().CustomerId !== Commerce.Session.instance.cart.CustomerId) {
                    asyncQueue.enqueue(function () {
                        var customerId = _this.selectedSalesOrder().CustomerId;
                        var setCustomerOnCartOperationRequest = new Commerce.SetCustomerOnCartOperationRequest(correlationId, customerId);
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(setCustomerOnCartOperationRequest));
                    });
                }
                asyncQueue.enqueue(function () {
                    var selectedItemLines = selectedSalesLines.map(function (salesLine) {
                        return {
                            product: _this._productsByProductId.getItem(salesLine.ProductId),
                            SerialNumber: salesLine.SerialNumber,
                            LineNumber: salesLine.LineNumber
                        };
                    });
                    var request = new Commerce.Operations.BuyWarrantyOperationRequest(Commerce.LoggerHelper.getNewCorrelationId(), selectedSalesLines[0].CatalogId, Commerce.ExtensibleEnumerations.ExtensibleTransactionType.Sales.equals(_this.selectedSalesOrder().TransactionTypeValue) ?
                        _this.selectedSalesOrder().Id :
                        _this.selectedSalesOrder().SalesId, selectedItemLines, true, Commerce.ExtensibleEnumerations.ExtensibleTransactionType.getByValue(_this.selectedSalesOrder().TransactionTypeValue));
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request)
                        .then(function (result) {
                        if (result.canceled) {
                            _this._selectionHandler.cancel();
                        }
                        else {
                            _this._selectionHandler.select(selectedItemLines, function () { return void 0; }, function () { return void 0; });
                        }
                    }));
                });
                return this._isBusyUntil(asyncQueue.run()
                    .fail(function (errors) {
                    Commerce.RetailLogger.viewModelAddWarrantyToAnExistingTransactionAddCustomerFailed(correlationId, Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors));
                    Commerce.NotificationHandler.displayClientErrors(errors);
                }));
            };
            AddWarrantyToAnExistingTransactionViewModel.prototype.onShown = function () {
                this._cancelSelectionHandlerOnHidden = true;
            };
            AddWarrantyToAnExistingTransactionViewModel.prototype.onHidden = function () {
                if (this._cancelSelectionHandlerOnHidden) {
                    this._cancelSelectionHandler();
                }
            };
            AddWarrantyToAnExistingTransactionViewModel.prototype.isBusyUntil = function (asyncResult) {
                var _this = this;
                this._isBusyUntilCounterInternal(this._isBusyUntilCounterInternal() + 1);
                return asyncResult.always(function () {
                    _this._isBusyUntilCounterInternal(Math.max(0, _this._isBusyUntilCounterInternal() - 1));
                    if (_this._isBusyUntilCounterInternal() === 0) {
                        _this._isBusyFlag(false);
                    }
                });
            };
            AddWarrantyToAnExistingTransactionViewModel.prototype.setIsBusy = function (isBusy) {
                if (!isBusy) {
                    this._isBusyUntilCounterInternal(0);
                }
                this._isBusyFlag(isBusy);
            };
            AddWarrantyToAnExistingTransactionViewModel.prototype.cancelOnHidden = function (cancelOnHidden) {
                this._cancelSelectionHandlerOnHidden = cancelOnHidden;
            };
            AddWarrantyToAnExistingTransactionViewModel.prototype._cancelSelectionHandler = function () {
                var selectionHandler = this._selectionHandler;
                this._selectionHandler = null;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(selectionHandler)) {
                    selectionHandler.cancel();
                }
            };
            AddWarrantyToAnExistingTransactionViewModel.prototype._prepareAndSetSalesLineDataFromOrderAsync = function () {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.selectedSalesOrder())) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                var salesOrder = this.selectedSalesOrder();
                var salesLines = salesOrder.SalesLines;
                var allStoreChannelId = 0;
                var prepareAndSetSalesLineQueue = new Commerce.AsyncQueue();
                prepareAndSetSalesLineQueue.enqueue(function () {
                    var productIds = salesLines.map(function (salesLine) { return salesLine.ProductId; });
                    return _this.productManager.getByIdsAsync(productIds, allStoreChannelId);
                }).enqueue(function (products) {
                    products.forEach(function (product) {
                        _this._productsByProductId.setItem(product.RecordId, product);
                    });
                    var warrantableLineNumbersInCurrentOrder = salesLines
                        .filter(function (line) {
                        return line.IsWarrantyLine && (line.WarrantableTransactionId === salesOrder.Id || line.WarrantableSalesId === salesOrder.Id);
                    })
                        .map(function (line) { return line.WarrantableLineNumber; });
                    var filteredSalesLines = salesLines.filter(function (line) {
                        var lineForDisplay = new ViewModels.SalesLineForDisplay(line, _this._productsByProductId.getItem(line.ProductId));
                        return _this._shouldDisplaySalesLine(lineForDisplay, warrantableLineNumbersInCurrentOrder);
                    });
                    if (!Commerce.ArrayExtensions.hasElements(filteredSalesLines)) {
                        return Commerce.AsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.WARRANTY_NO_WARRANTABLE_PRODUCTS_FOUND, null)]);
                    }
                    _this._updateSalesLinesForDisplay(filteredSalesLines);
                    return Commerce.AsyncResult.createResolved();
                });
                return prepareAndSetSalesLineQueue.run();
            };
            AddWarrantyToAnExistingTransactionViewModel.prototype._updateSalesLinesForDisplay = function (salesLines) {
                var _this = this;
                var salesLinesForDisplay = salesLines.map(function (line) {
                    return new ViewModels.SalesLineForDisplay(line, _this._productsByProductId.getItem(line.ProductId));
                });
                this.salesLinesForDisplay(salesLinesForDisplay);
            };
            AddWarrantyToAnExistingTransactionViewModel.prototype._shouldDisplaySalesLine = function (salesLine, warrantableLineNumbersInCurrentOrder) {
                if (salesLine.IsVoided || salesLine.IsGiftCardLine || salesLine.IsInvoiceLine || salesLine.IsWarrantyLine) {
                    return false;
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(salesLine.product) || !salesLine.product.Behavior.HasSerialNumber) {
                    return false;
                }
                if (Commerce.ArrayExtensions.hasElement(warrantableLineNumbersInCurrentOrder, salesLine.LineNumber)) {
                    return false;
                }
                var cart = Commerce.Session.instance.cart;
                var cartLineFound = Commerce.ArrayExtensions.firstOrUndefined(cart.CartLines, function (cartLine) {
                    return !Commerce.StringExtensions.isEmptyOrWhitespace(salesLine.SerialNumber) &&
                        (salesLine.SerialNumber === cartLine.SerialNumber || salesLine.SerialNumber === cartLine.WarrantableSerialNumber);
                });
                if (!Commerce.ObjectExtensions.isNullOrUndefined(cartLineFound)) {
                    return false;
                }
                return true;
            };
            return AddWarrantyToAnExistingTransactionViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.AddWarrantyToAnExistingTransactionViewModel = AddWarrantyToAnExistingTransactionViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var ProductDimensionViewModel = (function (_super) {
            __extends(ProductDimensionViewModel, _super);
            function ProductDimensionViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw "Invalid options passed to the ProductDimensionViewModel constructor: options cannot be null or undefined.";
                }
                else if (Commerce.NumberExtensions.isNullNaNOrZero(options.productId)) {
                    throw "Invalid options passed to the ProductDimensionViewModel constructor: options.productId is a required field.";
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.productDimension)) {
                    throw "Invalid options passed to the ProductDimensionViewModel constructor: options.productDimension is a required field.";
                }
                else if (!Commerce.ObjectExtensions.isFunction(options.onProductDimensionValueSelected)) {
                    throw "Invalid options passed to the ProductDimensionViewModel constructor: options.onProductDimensionValueSelected is a required field.";
                }
                var initialDimensionValue = options.productDimension.DimensionValue;
                var initialDimensionValues = [];
                var initialDimensionValueRecId = undefined;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(initialDimensionValue)) {
                    initialDimensionValues.push(initialDimensionValue);
                    initialDimensionValueRecId = initialDimensionValue.RecordId;
                }
                _this.isSelectionEnabled = ko.observable(false);
                _this.productDimensionValues = ko.observableArray(initialDimensionValues);
                _this.selectedDimensionValueRecId = ko.observable(initialDimensionValueRecId);
                _this.selectedDimensionValueRecId.subscribe(function (newValue) {
                    _this._onProductDimensionValueSelected(_this._selectedDimensionValue);
                }, _this);
                _this._productId = options.productId;
                _this._productDimension = options.productDimension;
                _this._onProductDimensionValueSelected = options.onProductDimensionValueSelected;
                _this._dimensionTypeLabel = Commerce.ProductPropertiesHelper.getDimensionString(_this._productDimension.DimensionTypeValue, Commerce.DimensionStringKind.LABEL);
                _this._optionsCaption = Commerce.ProductPropertiesHelper.getDimensionString(_this._productDimension.DimensionTypeValue, Commerce.DimensionStringKind.OPTIONSCAPTION);
                _this._productDimensionIdentifier = _this._getProductDimensionIdentifier(_this._productDimension.DimensionTypeValue);
                return _this;
            }
            Object.defineProperty(ProductDimensionViewModel.prototype, "isDimensionValueSelected", {
                get: function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(this._selectedDimensionValue)
                        && !Commerce.StringExtensions.isNullOrWhitespace(this._selectedDimensionValue.Value);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ProductDimensionViewModel.prototype, "selectedDimension", {
                get: function () {
                    var selectedDimension = Commerce.ObjectExtensions.clone(this._productDimension);
                    selectedDimension.DimensionValue = this._selectedDimensionValue;
                    return selectedDimension;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ProductDimensionViewModel.prototype, "optionsCaption", {
                get: function () {
                    return this._optionsCaption;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ProductDimensionViewModel.prototype, "dimensionTypeLabel", {
                get: function () {
                    return this._dimensionTypeLabel;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ProductDimensionViewModel.prototype, "productDimensionIdentifier", {
                get: function () {
                    return this._productDimensionIdentifier;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ProductDimensionViewModel.prototype, "_selectedDimensionValue", {
                get: function () {
                    var dimensionValue;
                    var dimensionValueRecId = this.selectedDimensionValueRecId();
                    if (!Commerce.NumberExtensions.isNullNaNOrZero(dimensionValueRecId)) {
                        dimensionValue = Commerce.ArrayExtensions.firstOrUndefined(this.productDimensionValues(), function (curDimensionValue) {
                            return dimensionValueRecId === curDimensionValue.RecordId;
                        });
                    }
                    return dimensionValue;
                },
                enumerable: true,
                configurable: true
            });
            ProductDimensionViewModel.prototype.loadAsync = function (selectedDimensions, kitVariantResolutionContext) {
                var _this = this;
                if (kitVariantResolutionContext === void 0) { kitVariantResolutionContext = null; }
                var channelId = Commerce.Session.instance.productCatalogStore.Context.ChannelId;
                return this.productManager.getDimensionValuesAsync(this._productId, channelId, this._productDimension.DimensionTypeValue, selectedDimensions, kitVariantResolutionContext).done(function (dimensionValues) {
                    _this.isSelectionEnabled(true);
                    _this.productDimensionValues(dimensionValues);
                    if (Commerce.ArrayExtensions.hasElements(dimensionValues) && dimensionValues.length === 1) {
                        _this._selectDimensionValue(dimensionValues[0]);
                    }
                    else if ((_this.isDimensionValueSelected) && !_this._hasDimensionValue(_this._selectedDimensionValue)) {
                        _this._clearSelectedDimensionValue();
                    }
                });
            };
            ProductDimensionViewModel.prototype.disableDimensionValueSelection = function () {
                this.isSelectionEnabled(false);
            };
            ProductDimensionViewModel.prototype._hasDimensionValue = function (dimensionValue) {
                if (!Commerce.ArrayExtensions.hasElements(this.productDimensionValues())) {
                    return false;
                }
                var dimensionValueId = dimensionValue.RecordId;
                for (var i = 0; i < this.productDimensionValues().length; i++) {
                    var currentValue = this.productDimensionValues()[i];
                    if (currentValue.RecordId === dimensionValueId || Commerce.StringExtensions.compare(dimensionValue.Value, currentValue.Value, true) === 0) {
                        return true;
                    }
                }
                return false;
            };
            ProductDimensionViewModel.prototype._selectDimensionValue = function (dimensionValue) {
                var dimensionValueId = Commerce.ObjectExtensions.isNullOrUndefined(dimensionValue) ? undefined : dimensionValue.RecordId;
                if (dimensionValueId !== this.selectedDimensionValueRecId()) {
                    this.selectedDimensionValueRecId(dimensionValueId);
                }
            };
            ProductDimensionViewModel.prototype._clearSelectedDimensionValue = function () {
                this.selectedDimensionValueRecId(undefined);
            };
            ProductDimensionViewModel.prototype._getProductDimensionIdentifier = function (dimension) {
                var result = Commerce.StringExtensions.EMPTY;
                var dimensionString = Commerce.Proxy.Entities.ProductDimensionType[dimension];
                if (!Commerce.StringExtensions.isNullOrWhitespace(dimensionString)) {
                    result = Commerce.StringExtensions.format("{0}_{1}", ProductDimensionViewModel.DIMENSION_IDENTIFIER_PREFIX, dimensionString);
                }
                return result;
            };
            ProductDimensionViewModel.DIMENSION_IDENTIFIER_PREFIX = "productDetailsView_dimension";
            return ProductDimensionViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.ProductDimensionViewModel = ProductDimensionViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var VariantSelectionViewModelBase = (function (_super) {
            __extends(VariantSelectionViewModelBase, _super);
            function VariantSelectionViewModelBase(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw "Invalid options passed to the VariantSelectionViewModelBase constructor: options cannot be null or undefined.";
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.productMaster)) {
                    throw "Invalid options passed to the VariantSelectionViewModelBase constructor: options.productMaster is a required field.";
                }
                else if (!Commerce.ObjectExtensions.isFunction(options.onVariantSelectionChanged)) {
                    throw "Invalid options passed to the VariantSelectionViewModelBase constructor: options.onVariantSelectionChanged is a required field.";
                }
                _this.dataRetrievalFailed = ko.observable(false);
                _this._isBusyFlag = ko.observable(false);
                _this._isBusyWhen(ko.computed(function () { return _this._isBusyFlag(); }));
                _this._productMaster = options.productMaster;
                _this._currentlySelectedVariant = options.defaultVariant;
                _this._onVariantSelectionChanged = options.onVariantSelectionChanged;
                _this._isProcessingInternal = false;
                return _this;
            }
            Object.defineProperty(VariantSelectionViewModelBase.prototype, "isVariantSelected", {
                get: function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(this._selectedVariant);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VariantSelectionViewModelBase.prototype, "productMaster", {
                get: function () {
                    return this._productMaster;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VariantSelectionViewModelBase.prototype, "_selectedVariant", {
                get: function () {
                    return this._currentlySelectedVariant;
                },
                set: function (selectedVariant) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(this._currentlySelectedVariant) && !Commerce.ObjectExtensions.isNullOrUndefined(selectedVariant)) {
                        this._currentlySelectedVariant = selectedVariant;
                        this._onVariantSelectionChanged(this._currentlySelectedVariant);
                    }
                    else if (!Commerce.ObjectExtensions.isNullOrUndefined(this._currentlySelectedVariant) && Commerce.ObjectExtensions.isNullOrUndefined(selectedVariant)) {
                        this._currentlySelectedVariant = selectedVariant;
                        this._onVariantSelectionChanged(this._productMaster);
                    }
                    else if (!Commerce.ObjectExtensions.isNullOrUndefined(this._currentlySelectedVariant)
                        && !Commerce.ObjectExtensions.isNullOrUndefined(selectedVariant)
                        && this._currentlySelectedVariant.RecordId !== selectedVariant.RecordId) {
                        this._currentlySelectedVariant = selectedVariant;
                        this._onVariantSelectionChanged(this._currentlySelectedVariant);
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VariantSelectionViewModelBase.prototype, "_isProcessing", {
                get: function () {
                    return this._isProcessingInternal;
                },
                set: function (newProcessingValue) {
                    if (newProcessingValue === this._isProcessingInternal) {
                        return;
                    }
                    this._isProcessingInternal = newProcessingValue;
                    this._isBusyFlag(newProcessingValue);
                },
                enumerable: true,
                configurable: true
            });
            VariantSelectionViewModelBase.prototype._handleAsyncResult = function (asyncResult) {
                var _this = this;
                return asyncResult.done(function () {
                    _this.dataRetrievalFailed(false);
                }).fail(function (errors) {
                    _this.dataRetrievalFailed(true);
                }).always(function () {
                    _this._isProcessing = false;
                });
            };
            return VariantSelectionViewModelBase;
        }(ViewModels.ViewModelBase));
        ViewModels.VariantSelectionViewModelBase = VariantSelectionViewModelBase;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var VariantSelectionViewModel = (function (_super) {
            __extends(VariantSelectionViewModel, _super);
            function VariantSelectionViewModel(context, options) {
                var _this = _super.call(this, context, options) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw "Invalid options passed to the VariantSelectionViewModel constructor: options cannot be null or undefined.";
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.channelId) || isNaN(options.channelId)) {
                    throw "Invalid options passed to the VariantSelectionViewModel constructor: options.channelId must be a valid number.";
                }
                _this._channelId = options.channelId;
                var initialDimensions = _this.isVariantSelected ? _this._selectedVariant.Dimensions : _this._productMaster.Dimensions;
                _this._productDimensionViewModels =
                    initialDimensions.map(function (dimension, index) {
                        var viewModelOptions = {
                            onProductDimensionValueSelected: function (value) {
                                _this._productDimensionValueSelectionChangedHandler(value, index);
                            },
                            productDimension: dimension,
                            productId: _this._productMaster.RecordId
                        };
                        return new ViewModels.ProductDimensionViewModel(context, viewModelOptions);
                    });
                _this._currentDimensionIndex = 0;
                return _this;
            }
            Object.defineProperty(VariantSelectionViewModel.prototype, "productDimensionViewModels", {
                get: function () {
                    return this._productDimensionViewModels;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VariantSelectionViewModel.prototype, "selectedDimensions", {
                get: function () {
                    return this._productDimensionViewModels.filter(function (viewModel) {
                        return viewModel.isDimensionValueSelected;
                    }).map(function (viewModel) {
                        return viewModel.selectedDimension;
                    });
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VariantSelectionViewModel.prototype, "_currentProductDimensionViewModel", {
                get: function () {
                    return this._productDimensionViewModels[this._currentDimensionIndex];
                },
                enumerable: true,
                configurable: true
            });
            VariantSelectionViewModel.prototype.loadAsync = function () {
                var _this = this;
                this._isProcessing = true;
                var loadResult;
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._selectedVariant)) {
                    loadResult = this._loadDimensionsInOrderAsync();
                }
                else {
                    loadResult = this._loadAllDimensionsAsync().done(function () {
                        _this._currentDimensionIndex = _this.productDimensionViewModels.length - 1;
                    });
                }
                return this._handleAsyncResult(loadResult);
            };
            VariantSelectionViewModel.prototype._productDimensionValueSelectionChangedHandler = function (selectedValue, dimensionIndex) {
                if (this._isProcessing) {
                    return;
                }
                if (dimensionIndex === this._currentDimensionIndex) {
                    if (this._currentDimensionIndex < this.productDimensionViewModels.length - 1) {
                        this._currentDimensionIndex++;
                        this._isProcessing = true;
                        this._handleAsyncResult(this._loadDimensionsInOrderAsync());
                    }
                    else {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(selectedValue)) {
                            this._isProcessing = true;
                            this._handleAsyncResult(this._getSelectedVariantAsync());
                        }
                        else {
                            this._selectedVariant = undefined;
                        }
                    }
                }
                else {
                    this.productDimensionViewModels.forEach(function (viewModel, viewModelIndex) {
                        if (viewModelIndex > dimensionIndex) {
                            viewModel.disableDimensionValueSelection();
                        }
                    });
                    this._currentDimensionIndex = dimensionIndex;
                    if (Commerce.ObjectExtensions.isNullOrUndefined(selectedValue)) {
                        this._selectedVariant = undefined;
                    }
                    else {
                        this._currentDimensionIndex++;
                        this._isProcessing = true;
                        this._handleAsyncResult(this._loadDimensionsInOrderAsync());
                    }
                }
            };
            VariantSelectionViewModel.prototype._loadCurrentDimensionViewModel = function () {
                var relativeSelectedDimensions = this.selectedDimensions.slice(0, this._currentDimensionIndex);
                return this._currentProductDimensionViewModel.loadAsync(relativeSelectedDimensions);
            };
            VariantSelectionViewModel.prototype._loadAllDimensionsAsync = function () {
                var _this = this;
                var loadResults = [];
                this.productDimensionViewModels.forEach(function (dimensionViewModel, dimensionIndex) {
                    var selectedDimensions = _this._selectedVariant.Dimensions.slice(0, dimensionIndex);
                    var dimensionLoadResult = dimensionViewModel.loadAsync(selectedDimensions);
                    loadResults.push(dimensionLoadResult);
                });
                return Commerce.VoidAsyncResult.join(loadResults);
            };
            VariantSelectionViewModel.prototype._loadDimensionsInOrderAsync = function () {
                var _this = this;
                var processingQueue = new Commerce.AsyncQueue();
                for (var i = this._currentDimensionIndex; i < this.productDimensionViewModels.length; i++) {
                    processingQueue.enqueue(function () {
                        return _this._loadCurrentDimensionViewModel().done(function () {
                            if (_this._currentProductDimensionViewModel.isDimensionValueSelected) {
                                _this._currentDimensionIndex++;
                            }
                            else {
                                processingQueue.cancel();
                                _this._selectedVariant = undefined;
                            }
                        });
                    });
                }
                processingQueue.enqueue(function () {
                    return _this._getSelectedVariantAsync();
                });
                return processingQueue.run();
            };
            VariantSelectionViewModel.prototype._getSelectedVariantAsync = function () {
                var _this = this;
                var pageSize = 1;
                var skip = 0;
                return this.productManager.getVariantsByDimensionValuesAsync(this._productMaster.RecordId, this._channelId, this.selectedDimensions, pageSize, skip)
                    .done(function (variants) {
                    _this._selectedVariant = Commerce.ArrayExtensions.firstOrUndefined(variants);
                });
            };
            return VariantSelectionViewModel;
        }(ViewModels.VariantSelectionViewModelBase));
        ViewModels.VariantSelectionViewModel = VariantSelectionViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var KitComponentVariantSelectionViewModel = (function (_super) {
            __extends(KitComponentVariantSelectionViewModel, _super);
            function KitComponentVariantSelectionViewModel(context, options) {
                var _this = _super.call(this, context, options) || this;
                _this._kitVariantResolutionContext = {
                    SlotId: options.slotId
                };
                return _this;
            }
            KitComponentVariantSelectionViewModel.prototype.loadAsync = function (componentsInOtherSlots) {
                var _this = this;
                componentsInOtherSlots = componentsInOtherSlots || [];
                this._kitVariantResolutionContext.SelectedComponents = componentsInOtherSlots;
                return _super.prototype.loadAsync.call(this).map(function () {
                    return _this.isVariantSelected ? _this._selectedVariant : _this._productMaster;
                });
            };
            KitComponentVariantSelectionViewModel.prototype.updateAsync = function (componentsInOtherSlots) {
                var _this = this;
                componentsInOtherSlots = componentsInOtherSlots || [];
                this._kitVariantResolutionContext.SelectedComponents = componentsInOtherSlots;
                this._isProcessing = true;
                this._currentDimensionIndex = 0;
                var updateQueue = new Commerce.AsyncQueue();
                updateQueue.enqueue(function () {
                    return _this._loadDimensionsInOrderAsync();
                });
                return this._handleAsyncResult(updateQueue.run()).map(function () {
                    return _this.isVariantSelected ? _this._selectedVariant : _this._productMaster;
                });
            };
            KitComponentVariantSelectionViewModel.prototype.disableVariantSelection = function () {
                this.productDimensionViewModels.forEach(function (viewModel) {
                    viewModel.disableDimensionValueSelection();
                });
            };
            KitComponentVariantSelectionViewModel.prototype._loadCurrentDimensionViewModel = function () {
                var relativeSelectedDimensions = this.selectedDimensions.slice(0, this._currentDimensionIndex);
                return this._currentProductDimensionViewModel.loadAsync(relativeSelectedDimensions, this._kitVariantResolutionContext);
            };
            KitComponentVariantSelectionViewModel.prototype._loadAllDimensionsAsync = function () {
                var _this = this;
                var loadResults = [];
                this.productDimensionViewModels.forEach(function (dimensionViewModel, dimensionIndex) {
                    var selectedDimensions = _this._selectedVariant.Dimensions.slice(0, dimensionIndex);
                    var dimensionLoadResult = dimensionViewModel.loadAsync(selectedDimensions, _this._kitVariantResolutionContext);
                    loadResults.push(dimensionLoadResult);
                });
                return Commerce.VoidAsyncResult.join(loadResults);
            };
            return KitComponentVariantSelectionViewModel;
        }(ViewModels.VariantSelectionViewModel));
        ViewModels.KitComponentVariantSelectionViewModel = KitComponentVariantSelectionViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var ComponentInSlotViewModel = (function (_super) {
            __extends(ComponentInSlotViewModel, _super);
            function ComponentInSlotViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw "Invalid options passed to the ComponentInSlotViewModel constructor: options cannot be null or undefined.";
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.defaultComponent)) {
                    throw "Invalid options passed to the ComponentInSlotViewModel constructor: options.defaultComponent is a required field.";
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.kitMaster)) {
                    throw "Invalid options passed to the ComponentInSlotViewModel constructor: options.kitMaster is a required field.";
                }
                else if (!Commerce.ObjectExtensions.isFunction(options.onComponentSelectionChanged)) {
                    throw "Invalid options passed to the ComponentInSlotViewModel constructor: options.onComponentSelectionChanged is a required field.";
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.channelId) || isNaN(options.channelId)) {
                    throw "Invalid options passed to the ComponentInSlotViewModel constructor: options.channelId cannot be null, undefined.";
                }
                _this.currentComponent = ko.observable(options.defaultComponent);
                _this.componentName = ko.computed(function () {
                    return Commerce.ObjectExtensions.isNullOrUndefined(_this.currentComponent()) ? Commerce.StringExtensions.EMPTY : _this.currentComponent().Product.Name;
                }, _this);
                _this.componentItemId = ko.computed(function () {
                    return Commerce.ObjectExtensions.isNullOrUndefined(_this.currentComponent()) ? Commerce.StringExtensions.EMPTY : _this.currentComponent().Product.ItemId;
                }, _this);
                _this.image = ko.computed(function () {
                    return { source: _this.currentComponent().Product.PrimaryImageUrl, altText: _this.currentComponent().Product.Name };
                }, _this);
                _this.additionalCharge = ko.computed(function () {
                    var additionalCharge = _this.currentComponent().AdditionalChargeForComponent;
                    var included = Commerce.ViewModelAdapter.getResourceString("string_836");
                    return Commerce.NumberExtensions.isNullNaNOrZero(additionalCharge) ? included : Commerce.NumberExtensions.formatCurrency(additionalCharge);
                }, _this);
                _this.quantityWithUnitOfMeasure = ko.computed(function () {
                    var formatString = Commerce.ViewModelAdapter.getResourceString("string_837");
                    var quantityString = Commerce.ObjectExtensions.isNullOrUndefined(_this.currentComponent().Quantity) ?
                        Commerce.StringExtensions.EMPTY :
                        _this.currentComponent().Quantity.toString();
                    return Commerce.StringExtensions.format(formatString, quantityString, _this.currentComponent().UnitOfMeasure || Commerce.StringExtensions.EMPTY);
                }, _this);
                _this.areSubstitutesAvailable = ko.observable(false);
                _this.variantSelectionViewModel = ko.observable(undefined);
                _this.isVariantSelectionEnabled = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.variantSelectionViewModel());
                }, _this);
                _this.isComponentSelectionEnabled = ko.observable(false);
                _this.dataRetrievalFailed = ko.observable(false);
                _this._isBusyFlag = ko.observable(false);
                _this._isBusyWhen(ko.computed(function () { return _this._isBusyFlag(); }));
                var isVariantSelectionViewModelBusy = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.variantSelectionViewModel()) && _this.variantSelectionViewModel().isBusy();
                });
                _this._isBusyWhen(isVariantSelectionViewModelBusy);
                _this._channelId = options.channelId;
                _this._componentSubstitutionEventCallbacks = options.componentSubstitutionEventCallbacks;
                _this._onComponentChanged = options.onComponentSelectionChanged;
                _this._slotId = options.defaultComponent.SlotId;
                _this._kitMaster = options.kitMaster;
                return _this;
            }
            Object.defineProperty(ComponentInSlotViewModel.prototype, "componentInSlotRelation", {
                get: function () {
                    return { ComponentId: this.currentComponent().Product.RecordId, SlotId: this._slotId };
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ComponentInSlotViewModel.prototype, "isComponentSelectionComplete", {
                get: function () {
                    return !this.isVariantSelectionEnabled() || this.variantSelectionViewModel().isVariantSelected;
                },
                enumerable: true,
                configurable: true
            });
            ComponentInSlotViewModel.prototype.loadAsync = function (componentsInOtherSlots) {
                var _this = this;
                this._otherComponentInSlotRelations = componentsInOtherSlots;
                this._isBusyFlag(true);
                var pageSize = 2;
                var skip = 0;
                var loadResults = [];
                var getFilteredSlotComponentsResult = this.productManager.getFilteredSlotComponentsAsync(this._kitMaster.RecordId, this._channelId, this._slotId, componentsInOtherSlots, pageSize, skip)
                    .done(function (results) {
                    var isMoreThanOneComponentAvailable = Commerce.ArrayExtensions.hasElements(results) && results.length > 1;
                    _this.areSubstitutesAvailable(isMoreThanOneComponentAvailable);
                });
                loadResults.push(getFilteredSlotComponentsResult);
                loadResults.push(this._createAndLoadVariantSelectionViewModelAsync(this.currentComponent()));
                return this._handleAsyncResult(Commerce.VoidAsyncResult.join(loadResults));
            };
            ComponentInSlotViewModel.prototype.viewComponentDetails = function () {
                var simpleProductDetailsOptions = {
                    productId: this.currentComponent().Product.RecordId,
                    product: this.currentComponent().Product,
                    isSelectionMode: false,
                    correlationId: Commerce.StringExtensions.EMPTY
                };
                Commerce.ViewModelAdapter.navigate("SimpleProductDetailsView", simpleProductDetailsOptions);
            };
            ComponentInSlotViewModel.prototype.selectSubstituteComponentAsync = function () {
                var _this = this;
                if (!this.isComponentSelectionEnabled() || !this.areSubstitutesAvailable()) {
                    return Commerce.AsyncResult.createResolved({ canceled: true });
                }
                var substitutionQueue = new Commerce.AsyncQueue();
                var currentComponentId = this.currentComponent().ProductTypeValue === Commerce.Proxy.Entities.ProductType.Variant ?
                    this.currentComponent().Product.MasterProductId :
                    this.currentComponent().Product.RecordId;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._componentSubstitutionEventCallbacks)
                    && Commerce.ObjectExtensions.isFunction(this._componentSubstitutionEventCallbacks.onSubstitutionStarted)) {
                    this._componentSubstitutionEventCallbacks.onSubstitutionStarted();
                }
                this._isBusyFlag(true);
                var substituteComponent;
                substitutionQueue.enqueue(function () {
                    var activityContext = {
                        kitMaster: _this._kitMaster,
                        currentComponentId: currentComponentId,
                        slotId: _this.currentComponent().SlotId,
                        selectedComponents: _this._otherComponentInSlotRelations
                    };
                    var activity = new Commerce.Activities.SelectKitComponentSubstituteActivity(activityContext);
                    return activity.execute().done(function () {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(activity.response)) {
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(_this._componentSubstitutionEventCallbacks)
                                && Commerce.ObjectExtensions.isFunction(_this._componentSubstitutionEventCallbacks.onSubstitutionCompleted)) {
                                _this._componentSubstitutionEventCallbacks.onSubstitutionCompleted(true);
                            }
                            substitutionQueue.cancel();
                        }
                        else {
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(_this._componentSubstitutionEventCallbacks)
                                && Commerce.ObjectExtensions.isFunction(_this._componentSubstitutionEventCallbacks.onSubstitutionCompleted)) {
                                _this._componentSubstitutionEventCallbacks.onSubstitutionCompleted(false);
                            }
                            if (activity.response.componentSubstitute.Product.RecordId === currentComponentId) {
                                substitutionQueue.cancel();
                            }
                            else {
                                substituteComponent = activity.response.componentSubstitute;
                            }
                        }
                    });
                }).enqueue(function () {
                    return _this._createAndLoadVariantSelectionViewModelAsync(substituteComponent);
                });
                return this._handleAsyncResult(substitutionQueue.run());
            };
            ComponentInSlotViewModel.prototype.updateAsync = function (componentsInOtherSlots) {
                var _this = this;
                this._otherComponentInSlotRelations = componentsInOtherSlots;
                this._isBusyFlag(true);
                var updateQueue = new Commerce.AsyncQueue();
                var availableComponents;
                updateQueue.enqueue(function () {
                    return _this.productManager.getFilteredSlotComponentsAsync(_this._kitMaster.RecordId, _this._channelId, _this._slotId, componentsInOtherSlots)
                        .done(function (components) {
                        availableComponents = components;
                        var isMoreThanOneComponentAvailable = Commerce.ArrayExtensions.hasElements(components) && components.length > 1;
                        _this.areSubstitutesAvailable(isMoreThanOneComponentAvailable);
                    });
                }).enqueue(function () {
                    return _this._processAvailableComponents(availableComponents);
                });
                return this._handleAsyncResult(updateQueue.run());
            };
            ComponentInSlotViewModel.prototype.disableComponentSelection = function () {
                this.isComponentSelectionEnabled(false);
                if (this.isVariantSelectionEnabled()) {
                    this.variantSelectionViewModel().disableVariantSelection();
                }
            };
            ComponentInSlotViewModel.prototype.dispose = function () {
                if (this.isVariantSelectionEnabled()) {
                    var variantSelectionViewModel = this.variantSelectionViewModel();
                    this.variantSelectionViewModel(undefined);
                    variantSelectionViewModel.dispose();
                }
                _super.prototype.dispose.call(this);
            };
            ComponentInSlotViewModel.prototype._onVariantSelectionChanged = function (variantSelection) {
                if (this._isBusyFlag()) {
                    return;
                }
                if (variantSelection.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Master) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(this._currentComponentMaster)) {
                        this._currentComponentMaster = Commerce.ObjectExtensions.clone(this.currentComponent());
                        this._currentComponentMaster.Product = variantSelection;
                        this._currentComponentMaster.ProductId = variantSelection.RecordId;
                        this._currentComponentMaster.ProductTypeValue = variantSelection.ProductTypeValue;
                        this._currentComponentMaster.Name = variantSelection.Name;
                        this._currentComponentMaster.Description = variantSelection.Description;
                    }
                    this._setCurrentComponent(this._currentComponentMaster);
                }
                else {
                    this._isBusyFlag(true);
                    this._handleAsyncResult(this._getProductComponentFromProduct(variantSelection));
                }
            };
            ComponentInSlotViewModel.prototype._processAvailableComponents = function (availableComponents) {
                var _this = this;
                var currentComponentIndex = this._getCurrentComponentIndex(availableComponents);
                if (currentComponentIndex < 0) {
                    return this._processCurrentComponentNoLongerAvailableAsync(availableComponents);
                }
                var currentComponentType = this.currentComponent().Product.ProductTypeValue;
                if (currentComponentType === Commerce.Proxy.Entities.ProductType.Standalone) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                var processAvailableComponentsQueue = new Commerce.AsyncQueue();
                var variantSelection;
                processAvailableComponentsQueue.enqueue(function () {
                    return _this.variantSelectionViewModel().updateAsync(_this._otherComponentInSlotRelations)
                        .done(function (activeProduct) {
                        variantSelection = activeProduct;
                    });
                }).enqueue(function () {
                    if (variantSelection.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Master) {
                        _this._setCurrentComponent(availableComponents[currentComponentIndex]);
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                    else {
                        return _this._getProductComponentFromProduct(variantSelection);
                    }
                });
                return processAvailableComponentsQueue.run();
            };
            ComponentInSlotViewModel.prototype._getCurrentComponentIndex = function (components) {
                var _this = this;
                var componentSelector;
                if (this.currentComponent().Product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Variant) {
                    componentSelector = function (component) {
                        return component.Product.RecordId === _this.currentComponent().Product.MasterProductId;
                    };
                }
                else {
                    componentSelector = function (component) {
                        return component.Product.RecordId === _this.currentComponent().Product.RecordId;
                    };
                }
                return Commerce.ArrayExtensions.findIndex(components, componentSelector);
            };
            ComponentInSlotViewModel.prototype._setCurrentComponent = function (component) {
                if (component.Product.RecordId === this.currentComponent().Product.RecordId) {
                    return;
                }
                if (component.Product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Master) {
                    var previousComponentType = this.currentComponent().ProductTypeValue;
                    this.currentComponent(component);
                    this._currentComponentMaster = component;
                    if (previousComponentType !== Commerce.Proxy.Entities.ProductType.Master) {
                        this._onComponentChanged(undefined);
                    }
                }
                else if (component.Product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Standalone) {
                    this._currentComponentMaster = undefined;
                    this._setVariantSelectionViewModel(undefined);
                    this.currentComponent(component);
                    this._onComponentChanged(component);
                }
                else {
                    if (this.currentComponent().Product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Master
                        && this.currentComponent().Product.RecordId === component.Product.MasterProductId) {
                        this._currentComponentMaster = this.currentComponent();
                    }
                    else if (this.currentComponent().Product.MasterProductId !== component.Product.MasterProductId) {
                        this._currentComponentMaster = undefined;
                    }
                    this.currentComponent(component);
                    this._onComponentChanged(component);
                }
            };
            ComponentInSlotViewModel.prototype._processCurrentComponentNoLongerAvailableAsync = function (availableComponents) {
                var newComponent = Commerce.ArrayExtensions.firstOrUndefined(availableComponents);
                return this._createAndLoadVariantSelectionViewModelAsync(newComponent);
            };
            ComponentInSlotViewModel.prototype._getProductComponentFromProduct = function (product) {
                var _this = this;
                if (this.currentComponent().Product.RecordId === product.RecordId) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                var componentInSlot = {
                    SlotId: this._slotId,
                    ComponentId: product.RecordId
                };
                return this.productManager.getComponentByProductSlotRelationAsync(this._channelId, componentInSlot)
                    .done(function (component) {
                    _this._setCurrentComponent(component);
                });
            };
            ComponentInSlotViewModel.prototype._createAndLoadVariantSelectionViewModelAsync = function (productComponent) {
                var _this = this;
                var componentProductType = productComponent.Product.ProductTypeValue;
                if (componentProductType === Commerce.Proxy.Entities.ProductType.Standalone) {
                    this._setCurrentComponent(productComponent);
                    return Commerce.VoidAsyncResult.createResolved();
                }
                var componentMasterProduct;
                var loadQueue = new Commerce.AsyncQueue();
                var componentIsMaster = componentProductType === Commerce.Proxy.Entities.ProductType.Master;
                if (componentIsMaster) {
                    componentMasterProduct = productComponent.Product;
                }
                else {
                    loadQueue.enqueue(function () {
                        return _this.productManager.getByIdAsync(productComponent.Product.MasterProductId, _this._channelId).done(function (result) {
                            componentMasterProduct = result;
                        });
                    });
                }
                var variantSelection;
                loadQueue.enqueue(function () {
                    var variantSelectionViewModelOptions = {
                        channelId: _this._channelId,
                        productMaster: componentMasterProduct,
                        defaultVariant: componentIsMaster ? undefined : productComponent.Product,
                        slotId: productComponent.SlotId,
                        onVariantSelectionChanged: function (selectedVariant) {
                            _this._onVariantSelectionChanged(selectedVariant);
                        },
                        correlationId: Commerce.StringExtensions.EMPTY
                    };
                    _this._setVariantSelectionViewModel(new ViewModels.KitComponentVariantSelectionViewModel(_this.context, variantSelectionViewModelOptions));
                    return _this.variantSelectionViewModel().loadAsync(_this._otherComponentInSlotRelations).done(function (result) {
                        variantSelection = result;
                    });
                });
                loadQueue.enqueue(function () {
                    if (variantSelection.RecordId === productComponent.Product.RecordId) {
                        _this._setCurrentComponent(productComponent);
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                    return _this._getProductComponentFromProduct(variantSelection);
                });
                return loadQueue.run();
            };
            ComponentInSlotViewModel.prototype._setVariantSelectionViewModel = function (newViewModel) {
                var currentVariantSelectionViewModel = this.variantSelectionViewModel();
                this.variantSelectionViewModel(newViewModel);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(currentVariantSelectionViewModel)) {
                    currentVariantSelectionViewModel.dispose();
                }
            };
            ComponentInSlotViewModel.prototype._handleAsyncResult = function (asyncResult) {
                var _this = this;
                return this._isBusyUntil(asyncResult).done(function () {
                    _this.isComponentSelectionEnabled(true);
                    _this.dataRetrievalFailed(false);
                }).fail(function (errors) {
                    _this.isComponentSelectionEnabled(false);
                    _this.dataRetrievalFailed(true);
                }).always(function () {
                    _this._isBusyFlag(false);
                });
            };
            return ComponentInSlotViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.ComponentInSlotViewModel = ComponentInSlotViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var InventoryLookupMatrixViewModel = (function (_super) {
            __extends(InventoryLookupMatrixViewModel, _super);
            function InventoryLookupMatrixViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw "Invalid options passed to the InventoryLookupMatrixViewModel constructor: options cannot be null or undefined.";
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.product)) {
                    throw "Invalid options passed to the InventoryLookupMatrixViewModel constructor: product cannot be null or undefined.";
                }
                else if (options.product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.KitMaster
                    || options.product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.KitVariant) {
                    throw "Invalid options passed to the InventoryLookupMatrixViewModel constructor: product cannot be a kit.";
                }
                else if (options.product.ProductTypeValue !== Commerce.Proxy.Entities.ProductType.Master) {
                    throw "Invalid options passed to the InventoryLookupMatrixViewModel constructor: product must be a master product.";
                }
                _this.isMatrixVisible = ko.observable(false);
                _this.product = options.product;
                _this.isCurrentStoreSelected = ko.observable(true);
                _this.productDimensionDetails = new Array(_this.product.Dimensions.length);
                _this._selectedItemAvailability = null;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.selectedStore)) {
                    _this.selectedStore = Commerce.ApplicationContext.Instance.storeInformation;
                }
                else {
                    _this.selectedStore = options.selectedStore;
                    if (_this.selectedStore.OrgUnitNumber !== _this.applicationContext.storeInformation.OrgUnitNumber) {
                        _this.isCurrentStoreSelected(false);
                    }
                }
                _this.disableAddToTransaction = ko.computed(function () {
                    return !_this.isCurrentStoreSelected();
                }, _this);
                if (Commerce.ObjectExtensions.isNullOrUndefined(InventoryLookupMatrixViewModel._viewExtensionsManager)) {
                    _this._menuCommandViewModels = [];
                }
                else {
                    _this._menuCommandViewModels = InventoryLookupMatrixViewModel._viewExtensionsManager.getCellInteractionMenuCommands();
                    _this._menuCommandViewModels.forEach(function (vm) {
                        _this._isBusyWhen(vm.isBusy);
                    });
                }
                return _this;
            }
            Object.defineProperty(InventoryLookupMatrixViewModel, "viewExtensionManager", {
                set: function (manager) {
                    InventoryLookupMatrixViewModel._viewExtensionsManager = manager;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(InventoryLookupMatrixViewModel.prototype, "menuCommandViewModels", {
                get: function () {
                    return this._menuCommandViewModels;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(InventoryLookupMatrixViewModel.prototype, "selectedItemAvailability", {
                get: function () {
                    return this._selectedItemAvailability;
                },
                set: function (value) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(value)) {
                        this._sendMessageToExtensions("ItemAvailabilitySelected", { itemAvailability: value });
                    }
                    this._selectedItemAvailability = value;
                },
                enumerable: true,
                configurable: true
            });
            InventoryLookupMatrixViewModel.prototype.loadAsync = function () {
                var _this = this;
                return this._isBusyUntil(this._setDimensionDetailsAsync()).done(function () {
                    _this.menuCommandViewModels.forEach(function (vm) {
                        var state = {
                            masterProduct: _this.product,
                            productDimensionCombinations: _this.productDimensionDetails,
                            store: _this.selectedStore
                        };
                        vm.init(state);
                    });
                    _this.isMatrixVisible(true);
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            InventoryLookupMatrixViewModel.prototype.getItemAvailabilities = function (dimensionCombinations) {
                return this.productManager.getProductAvailabilityByDimensionsAsync([this.selectedStore.InventoryLocationId], this.product.RecordId, dimensionCombinations).map(function (orgUnitAvailabilities) {
                    var items = [];
                    orgUnitAvailabilities.forEach(function (orgUnitAvailability) {
                        items = items.concat(orgUnitAvailability.ItemAvailabilities);
                    });
                    return items;
                });
            };
            InventoryLookupMatrixViewModel.prototype.isItemAvailable = function (item) {
                return item.AvailableQuantity === 0;
            };
            InventoryLookupMatrixViewModel.prototype.changeStoreAsync = function (variantMatrixViewModel) {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var searchArea = {
                        Radius: 0,
                        DistanceUnitValue: Commerce.Proxy.Entities.DistanceUnit.Miles
                    };
                    return _this.channelManager.getStoreLocationByArea(searchArea);
                }).enqueue(function (orgUnitLocations) {
                    var orgUnits = [];
                    orgUnits = orgUnitLocations.map(function (storeLocation) {
                        return Commerce.ApplicationContext.Instance.availableStores.getItem(storeLocation.OrgUnitNumber);
                    });
                    orgUnits = orgUnits.filter(function (orgUnit) {
                        return orgUnit.OrgUnitNumber !== _this.selectedStore.OrgUnitNumber;
                    });
                    var activity = new Commerce.Activities.SelectStoreActivity({
                        storeOptions: orgUnits
                    });
                    return activity.execute().done(function () {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(activity.response)) {
                            _this.selectedStore = activity.response.selectedStore;
                            if (_this.selectedStore.OrgUnitNumber !== _this.applicationContext.storeInformation.OrgUnitNumber) {
                                _this.isCurrentStoreSelected(false);
                            }
                            else {
                                _this.isCurrentStoreSelected(true);
                            }
                            _this._sendMessageToExtensions("StoreChanged", { store: _this.selectedStore });
                            variantMatrixViewModel.refreshMatrix();
                        }
                    });
                });
                return this._isBusyUntil(asyncQueue.run()).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            InventoryLookupMatrixViewModel.prototype.sellNowAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return _this._getVariantProductAsync();
                }).enqueue(function (variantProduct) {
                    var options = {
                        productSaleDetails: [{
                                product: variantProduct,
                                quantity: 0
                            }]
                    };
                    return _this.operationsManager.runOperation(Commerce.Operations.RetailOperation.ItemSale, options);
                });
                return this._isBusyUntil(asyncQueue.run()).done(function (result) {
                    if (!result.canceled) {
                        Commerce.ViewModelAdapter.navigate("CartView");
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            InventoryLookupMatrixViewModel.prototype.pickUpInStoreAsync = function () {
                var _this = this;
                var pickUpInStoreQueue = new Commerce.AsyncQueue();
                var cart = Commerce.Session.instance.cart;
                var requestedPickupDate;
                var customerOrderType;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                if (!Commerce.CustomerOrderHelper.isCustomerOrderOrQuoteCreationOrEdition(cart)) {
                    pickUpInStoreQueue.enqueue(function () {
                        var selectOrderTypeRequest = new Commerce.SalesOrders.SelectCustomerOrderTypeClientRequest(correlationId);
                        return pickUpInStoreQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(selectOrderTypeRequest)))
                            .done(function (customerOrderTypeResult) {
                            if (!customerOrderTypeResult.canceled) {
                                customerOrderType = customerOrderTypeResult.data.result;
                            }
                        });
                    });
                }
                pickUpInStoreQueue.enqueue(function () {
                    var shippingDateActivityParameters = {
                        title: Commerce.ViewModelAdapter.getResourceString("string_2505"),
                        subTitle: Commerce.StringExtensions.EMPTY,
                        dateInputLabel: Commerce.ViewModelAdapter.getResourceString("string_2507"),
                        originalShippingDate: Commerce.DeliveryHelper.getDeliveryDate(Commerce.Session.instance.cart, []),
                        deliveryMethodDescription: Commerce.StringExtensions.EMPTY
                    };
                    var getShippingDateActivity = new Commerce.Activities.GetShippingDateActivity(shippingDateActivityParameters);
                    return getShippingDateActivity.execute().done(function () {
                        if (!getShippingDateActivity.response) {
                            pickUpInStoreQueue.cancel();
                            return;
                        }
                        var activityResponse = getShippingDateActivity.response;
                        requestedPickupDate = activityResponse.requestedShippingDate;
                    });
                });
                if (!Commerce.CustomerOrderHelper.isCustomerOrderOrQuoteCreationOrEdition(cart)) {
                    pickUpInStoreQueue.enqueue(function () {
                        switch (customerOrderType) {
                            case Commerce.Proxy.Entities.CustomerOrderType.SalesOrder:
                                var options = {
                                    cart: Commerce.Session.instance.cart
                                };
                                return pickUpInStoreQueue.cancelOn(_this.operationsManager.runOperation(Commerce.Operations.RetailOperation.CreateCustomerOrder, options));
                            case Commerce.Proxy.Entities.CustomerOrderType.Quote:
                                var createCustomerQuoteOperationRequest = new Commerce.CreateCustomerQuoteOperationRequest(correlationId);
                                return pickUpInStoreQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(createCustomerQuoteOperationRequest)));
                            default:
                                pickUpInStoreQueue.cancel();
                                return Commerce.VoidAsyncResult.createResolved();
                        }
                    });
                }
                pickUpInStoreQueue.enqueue(function () {
                    return _this._addProductPickUpToCart(requestedPickupDate);
                });
                return pickUpInStoreQueue.run().done(function (queueResult) {
                    if (!queueResult.canceled) {
                        Commerce.ViewModelAdapter.navigate("CartView");
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            InventoryLookupMatrixViewModel.prototype.shipFromStoreAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                var cart = Commerce.Session.instance.cart;
                var customerOrderType;
                var createOfflineCustomerOrders = Commerce.ApplicationContext.Instance.deviceConfiguration.CreateOfflineCustomerOrders;
                var lineIdsByLineId = {};
                var variantProduct;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                if (Commerce.Session.instance.connectionStatus !== Commerce.Client.Entities.ConnectionStatusType.Online || createOfflineCustomerOrders) {
                    Commerce.NotificationHandler.displayErrorMessage("string_2559");
                    return Commerce.AsyncResult.createResolved({ canceled: true });
                }
                if (!Commerce.CustomerOrderHelper.isCustomerOrderOrQuoteCreationOrEdition(cart)) {
                    asyncQueue.enqueue(function () {
                        var selectOrderTypeRequest = new Commerce.SalesOrders.SelectCustomerOrderTypeClientRequest(correlationId);
                        return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(selectOrderTypeRequest)))
                            .done(function (customerOrderTypeResult) {
                            if (!customerOrderTypeResult.canceled) {
                                customerOrderType = customerOrderTypeResult.data.result;
                            }
                        });
                    }).enqueue(function () {
                        switch (customerOrderType) {
                            case Commerce.Proxy.Entities.CustomerOrderType.SalesOrder:
                                var options = {
                                    cart: Commerce.Session.instance.cart
                                };
                                return asyncQueue.cancelOn(_this.operationsManager.runOperation(Commerce.Operations.RetailOperation.CreateCustomerOrder, options));
                            case Commerce.Proxy.Entities.CustomerOrderType.Quote:
                                var createCustomerQuoteOperationRequest = new Commerce.CreateCustomerQuoteOperationRequest(correlationId);
                                return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(createCustomerQuoteOperationRequest)));
                            default:
                                asyncQueue.cancel();
                                return Commerce.VoidAsyncResult.createResolved();
                        }
                    });
                }
                asyncQueue.enqueue(function () {
                    return _this._getVariantProductAsync();
                }).enqueue(function (product) {
                    variantProduct = product;
                    Commerce.Session.instance.cart.CartLines.forEach(function (c) { lineIdsByLineId[c.LineId] = c.LineId; });
                    var options = {
                        productSaleDetails: [
                            { product: variantProduct, quantity: 0 }
                        ]
                    };
                    return asyncQueue.cancelOn(_this.operationsManager.runOperation(Commerce.Operations.RetailOperation.ItemSale, options));
                }).enqueue(function () {
                    var cart = Commerce.Session.instance.cart;
                    var isAggregateLine = Commerce.ApplicationContext.Instance.deviceConfiguration.AllowItemsAggregation;
                    var newCartLineAsArray = cart.CartLines.filter(function (c) {
                        return c.ProductId === variantProduct.RecordId && (isAggregateLine || (!isAggregateLine && !lineIdsByLineId[c.LineId]));
                    });
                    var selectedStore = Commerce.ApplicationContext.Instance.availableStores.getItem(_this.selectedStore.OrgUnitNumber);
                    var isShipAll = Commerce.CartHelper.areAllCartLinesSelected(cart, newCartLineAsArray);
                    if (isShipAll) {
                        var shippingInformation = {
                            fulfillmentOrgUnit: selectedStore,
                            shippingAddress: null
                        };
                        var shipAllOperationRequest = new Commerce.Cart.ShipAllCartLinesOperationRequest(correlationId, shippingInformation);
                        return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(shipAllOperationRequest)));
                    }
                    else {
                        var shippingInformation = {
                            fulfillmentOrgUnit: selectedStore,
                            shippingAddress: null
                        };
                        var shipSelectedOperationRequest = new Commerce.Cart.ShipSelectedCartLinesOperationRequest(correlationId, newCartLineAsArray, shippingInformation);
                        return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(shipSelectedOperationRequest)));
                    }
                });
                return asyncQueue.run().done(function (result) {
                    if (!result.canceled) {
                        Commerce.ViewModelAdapter.navigate("CartView");
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            InventoryLookupMatrixViewModel.prototype.showStoreAvailableToPromise = function () {
                var _this = this;
                this._isBusyUntil(this._getVariantProductAsync()).done(function (variantProduct) {
                    var availableToPromiseOptions = {
                        product: variantProduct,
                        location: Commerce.Proxy.Entities.StoreLocationWrapper.convertToOrgUnitLocation(_this.selectedStore)
                    };
                    Commerce.ViewModelAdapter.navigate("InventoryAvailableToPromiseView", availableToPromiseOptions);
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            InventoryLookupMatrixViewModel.prototype.showAllLocations = function () {
                this._isBusyUntil(this._getVariantProductAsync()).done(function (variantProduct) {
                    var inventoryLookupViewModelOptions = {
                        product: variantProduct
                    };
                    Commerce.ViewModelAdapter.navigate("InventoryLookupView", inventoryLookupViewModelOptions);
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            InventoryLookupMatrixViewModel.prototype.viewProductDetails = function () {
                var _this = this;
                this._isBusyUntil(this._getVariantProductAsync()).done(function (variantProduct) {
                    var simpleProductDetailsViewModelOptions = {
                        productId: variantProduct.RecordId,
                        product: variantProduct,
                        isSelectionMode: false,
                        correlationId: Commerce.StringExtensions.EMPTY,
                        channelId: _this.selectedStore.RecordId
                    };
                    Commerce.ViewModelAdapter.navigate("SimpleProductDetailsView", simpleProductDetailsViewModelOptions);
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            InventoryLookupMatrixViewModel.prototype._setDimensionDetailsAsync = function () {
                var _this = this;
                var channelId = Commerce.Session.instance.productCatalogStore.Context.ChannelId;
                var dimensionValueResults = [];
                this.product.Dimensions.forEach(function (dimension, dimensionIndex) {
                    var dimensionTypeValue = dimension.DimensionTypeValue;
                    var innerAsyncResult = new Commerce.VoidAsyncResult();
                    _this.productManager.getDimensionValuesAsync(_this.product.RecordId, channelId, dimensionTypeValue, [], null)
                        .done(function (dimensionValues) {
                        var dimensionWithValues = [];
                        dimensionValues.forEach(function (dimensionValue) {
                            dimensionWithValues.push({
                                DimensionTypeValue: dimension.DimensionTypeValue,
                                DimensionValue: dimensionValue
                            });
                        });
                        _this.productDimensionDetails[dimensionIndex] = { ProductDimensions: dimensionWithValues };
                        innerAsyncResult.resolve();
                    }).fail(function (errors) {
                        innerAsyncResult.reject(errors);
                    });
                    dimensionValueResults.push(innerAsyncResult);
                });
                return Commerce.VoidAsyncResult.join(dimensionValueResults);
            };
            InventoryLookupMatrixViewModel.prototype._getVariantProductAsync = function () {
                var asyncResult = new Commerce.AsyncResult();
                this.productManager.getVariantsByDimensionValuesAsync(this.product.RecordId, Commerce.Session.instance.productCatalogStore.Context.ChannelId, this.selectedItemAvailability.ProductDimensions).done(function (products) {
                    asyncResult.resolve(products[0]);
                });
                return asyncResult;
            };
            InventoryLookupMatrixViewModel.prototype._addProductPickUpToCart = function (pickupDate) {
                var _this = this;
                var lineIdsByLineId = {};
                Commerce.Session.instance.cart.CartLines.forEach(function (c) { lineIdsByLineId[c.LineId] = c.LineId; });
                var product;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return _this._getVariantProductAsync();
                }).enqueue(function (variantProduct) {
                    product = variantProduct;
                    var itemSaleOptions = {
                        productSaleDetails: [{
                                product: product,
                                quantity: 0
                            }]
                    };
                    return _this.operationsManager.runOperation(Commerce.Operations.RetailOperation.ItemSale, itemSaleOptions);
                }).enqueue(function () {
                    var cart = Commerce.Session.instance.cart;
                    var isAggregateLine = Commerce.ApplicationContext.Instance.deviceConfiguration.AllowItemsAggregation;
                    var newCartLineAsArray = cart.CartLines.filter(function (c) {
                        return c.ProductId === product.RecordId && (isAggregateLine || (!isAggregateLine && !lineIdsByLineId[c.LineId]));
                    });
                    var pickupOptions = {
                        cart: cart,
                        cartLines: newCartLineAsArray,
                        pickupDate: pickupDate,
                        storeAddress: _this.selectedStore.OrgUnitAddress,
                        storeNumber: _this.selectedStore.OrgUnitNumber
                    };
                    if (cart.CartLines.length === 1) {
                        return _this.operationsManager.runOperation(Commerce.Operations.RetailOperation.PickupAllProducts, pickupOptions);
                    }
                    return _this.operationsManager.runOperation(Commerce.Operations.RetailOperation.PickupSelectedProducts, pickupOptions);
                });
                return asyncQueue.run();
            };
            InventoryLookupMatrixViewModel.prototype._sendMessageToExtensions = function (messageType, messageData) {
                this.menuCommandViewModels.forEach(function (vm) {
                    vm.sendMessage(messageType, messageData);
                });
            };
            return InventoryLookupMatrixViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.InventoryLookupMatrixViewModel = InventoryLookupMatrixViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var KitComponentSubstitutesViewModel = (function (_super) {
            __extends(KitComponentSubstitutesViewModel, _super);
            function KitComponentSubstitutesViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw "Invalid options passed to the KitComponentSubstitutesViewModel constructor: options cannot be null or undefined.";
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.kitMaster)) {
                    throw "Invalid options passed to the KitComponentSubstitutesViewModel constructor: options.kitMaster cannot be null or undefined.";
                }
                else if (Commerce.NumberExtensions.isNullNaNOrZero(options.slotId)) {
                    throw "Invalid options passed to the KitComponentSubstitutesViewModel constructor: options.slotId cannot be NaN, null or zero.";
                }
                else if (Commerce.NumberExtensions.isNullNaNOrZero(options.currentComponentId)) {
                    throw "Invalid options passed to the KitComponentSubstitutesViewModel constructor: options.currentComponentId cannot be NaN, null or zero.";
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.selectedComponents)) {
                    throw "Invalid options passed to the KitComponentSubstitutesViewModel constructor: options.selectedComponents cannot be null or undefined.";
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.kitComponentSubstitutesSelectionHandler)) {
                    throw "Invalid options passed to the KitComponentSubstitutesViewModel constructor: options.kitComponentSubstitutesSelectionHandler must "
                        + "be a function.";
                }
                _this.productComponents = ko.observableArray([]);
                _this._isBusyFlag = ko.observable(false);
                _this._isBusyWhen(ko.computed(function () { return _this._isBusyFlag(); }));
                _this._kitMaster = options.kitMaster;
                _this._slotId = options.slotId;
                _this._currentComponentId = options.currentComponentId;
                _this._selectedComponents = options.selectedComponents;
                _this._componentSubstituteSelectionHandler = options.kitComponentSubstitutesSelectionHandler;
                return _this;
            }
            KitComponentSubstitutesViewModel.prototype.loadAsync = function () {
                return this._isBusyUntil(this._getProductComponents()).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            KitComponentSubstitutesViewModel.prototype.productComponentItemInvokeHandler = function (productComponent) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(productComponent)) {
                    this._productComponentSelectionHandler(productComponent);
                }
            };
            KitComponentSubstitutesViewModel.prototype.cancelSubstituteSelection = function () {
                this._componentSubstituteSelectionHandler.cancel();
            };
            KitComponentSubstitutesViewModel.prototype.reselectCurrentComponent = function () {
                this._productComponentSelectionHandler(this._currentComponent);
            };
            KitComponentSubstitutesViewModel.prototype._productComponentSelectionHandler = function (selectedProductComponent) {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(selectedProductComponent)) {
                    this._isBusyFlag(true);
                    this._componentSubstituteSelectionHandler.select(selectedProductComponent, function () {
                        _this._isBusyFlag(false);
                    }, function (selectionErrors) {
                        _this._isBusyFlag(false);
                        Commerce.NotificationHandler.displayClientErrors(selectionErrors);
                    });
                }
            };
            KitComponentSubstitutesViewModel.prototype._getProductComponents = function () {
                var _this = this;
                var channelId = Commerce.Session.instance.productCatalogStore.Context.ChannelId;
                return this.productManager.getFilteredSlotComponentsAsync(this._kitMaster.RecordId, channelId, this._slotId, this._selectedComponents)
                    .done(function (results) {
                    var currentComponentId = _this._currentComponentId;
                    _this._currentComponent = Commerce.ArrayExtensions.firstOrUndefined(results, function (component) {
                        return component.ProductId === currentComponentId;
                    });
                    _this.productComponents(results.filter(function (productComponent) { return productComponent.ProductId !== currentComponentId; }));
                });
            };
            return KitComponentSubstitutesViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.KitComponentSubstitutesViewModel = KitComponentSubstitutesViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var KitVariantSelectionViewModel = (function (_super) {
            __extends(KitVariantSelectionViewModel, _super);
            function KitVariantSelectionViewModel(context, options) {
                var _this = _super.call(this, context, options) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.channelId) || isNaN(options.channelId)) {
                    throw "Invalid options passed to the KitVariantSelectionViewModel constructor: options.channelId cannot be null, undefined.";
                }
                _this.componentInSlotViewModels = ko.observableArray([]);
                _this.kitComponentsLoaded = ko.observable(false);
                _this.kitComponentsLoaded.subscribe(function (newValue) {
                    if (newValue) {
                        Commerce.RetailLogger.viewModelKitVariantSelectionViewModelKitComponentsLoaded(Commerce.LoggerHelper.getFormattedCorrelationId(options));
                    }
                }, _this);
                _this._channelId = options.channelId;
                _this._componentSubstitutionEventCallbacks = options.componentSubstitutionEventCallbacks;
                _this._currentComponentIndex = 0;
                _this._subscriptions = [];
                return _this;
            }
            Object.defineProperty(KitVariantSelectionViewModel.prototype, "_componentInSlotRelations", {
                get: function () {
                    return this.componentInSlotViewModels().map(function (viewModel) {
                        return viewModel.componentInSlotRelation;
                    });
                },
                enumerable: true,
                configurable: true
            });
            KitVariantSelectionViewModel.prototype.loadAsync = function () {
                var _this = this;
                var loadQueue = new Commerce.AsyncQueue();
                this._isProcessing = true;
                var initialComponents;
                if (this.isVariantSelected) {
                    initialComponents = this._selectedVariant.Components;
                }
                else {
                    loadQueue.enqueue(function () {
                        return _this.productManager.getDefaultComponentsAsync(_this._productMaster.RecordId, _this._channelId)
                            .done(function (defaultComponents) {
                            initialComponents = defaultComponents;
                        });
                    });
                }
                loadQueue.enqueue(function () {
                    _this.componentInSlotViewModels(_this._createComponentInSlotViewModels(initialComponents));
                    return _this._loadComponentInSlotViewModelsAsync();
                });
                if (!this.isVariantSelected) {
                    loadQueue.enqueue(function () {
                        return _this._getVariantByComponentsInSlotsAndUpdateSelectedVariantAsync();
                    });
                }
                return this._handleAsyncResult(loadQueue.run()).done(function (queueResult) {
                    _this.kitComponentsLoaded(true);
                    _this._currentComponentIndex = _this.componentInSlotViewModels().length - 1;
                });
            };
            KitVariantSelectionViewModel.prototype.dispose = function () {
                if (Commerce.ArrayExtensions.hasElements(this._subscriptions)) {
                    this._subscriptions.forEach(function (subscription) {
                        subscription.dispose();
                    });
                }
                var componentViewModels = this.componentInSlotViewModels();
                this.componentInSlotViewModels([]);
                if (Commerce.ArrayExtensions.hasElements(componentViewModels)) {
                    componentViewModels.forEach(function (viewModel) {
                        viewModel.dispose();
                    });
                }
                _super.prototype.dispose.call(this);
            };
            KitVariantSelectionViewModel.prototype._createComponentInSlotViewModels = function (defaultComponents) {
                var _this = this;
                return defaultComponents.map(function (defaultComponent, componentIndex) {
                    var viewModelOptions = {
                        channelId: _this._channelId,
                        defaultComponent: defaultComponent,
                        kitMaster: _this._productMaster,
                        onComponentSelectionChanged: function (selectedComponent) {
                            _this._onComponentSelectionChanged(selectedComponent, componentIndex);
                        },
                        componentSubstitutionEventCallbacks: _this._componentSubstitutionEventCallbacks
                    };
                    var componentInSlotViewModel = new ViewModels.ComponentInSlotViewModel(_this.context, viewModelOptions);
                    var subscription = componentInSlotViewModel.isBusy.subscribe(function (componentInSlotIsBusyValue) {
                        if (componentInSlotIsBusyValue === _this.isBusy()) {
                            return;
                        }
                        if (componentInSlotIsBusyValue) {
                            _this._isBusyFlag(componentInSlotIsBusyValue);
                        }
                        else {
                            var areAnyComponentViewModelsBusy = _this.componentInSlotViewModels().some(function (componentInSlotViewModel) {
                                return componentInSlotViewModel.isBusy();
                            });
                            if (!areAnyComponentViewModelsBusy && !_this._isProcessing) {
                                _this._isBusyFlag(componentInSlotIsBusyValue);
                            }
                        }
                    });
                    _this._subscriptions.push(subscription);
                    return componentInSlotViewModel;
                });
            };
            KitVariantSelectionViewModel.prototype._loadComponentInSlotViewModelsAsync = function () {
                var loadResults = [];
                var componentInSlotRelations = this._componentInSlotRelations;
                this.componentInSlotViewModels().forEach(function (viewModel, vmIndex) {
                    var relativeComponentInSlotRelations = componentInSlotRelations.slice(0, vmIndex);
                    loadResults.push(viewModel.loadAsync(relativeComponentInSlotRelations));
                });
                return Commerce.VoidAsyncResult.join(loadResults);
            };
            KitVariantSelectionViewModel.prototype._onComponentSelectionChanged = function (selectedComponent, componentIndex) {
                var _this = this;
                if (this._isProcessing) {
                    return;
                }
                if (componentIndex === this._currentComponentIndex) {
                    if (this._currentComponentIndex < this.componentInSlotViewModels().length - 1) {
                        this._currentComponentIndex++;
                        this._isProcessing = true;
                        this._updateComponentInSlotViewModelsAsync().always(function () {
                            _this._isProcessing = false;
                        });
                    }
                    else {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(selectedComponent)) {
                            this._handleAsyncResult(this._getVariantByComponentsInSlotsAndUpdateSelectedVariantAsync());
                        }
                        else {
                            this._selectedVariant = undefined;
                        }
                    }
                }
                else {
                    this.componentInSlotViewModels().forEach(function (viewModel, viewModelIndex) {
                        if (viewModelIndex > componentIndex) {
                            viewModel.disableComponentSelection();
                        }
                    });
                    this._currentComponentIndex = componentIndex;
                    if (Commerce.ObjectExtensions.isNullOrUndefined(selectedComponent)) {
                        this._selectedVariant = undefined;
                    }
                    else {
                        this._currentComponentIndex++;
                        this._isProcessing = true;
                        this._updateComponentInSlotViewModelsAsync().always(function () {
                            _this._isProcessing = false;
                        });
                    }
                }
            };
            KitVariantSelectionViewModel.prototype._updateComponentInSlotViewModelsAsync = function () {
                var _this = this;
                var updateQueue = new Commerce.AsyncQueue();
                for (var i = this._currentComponentIndex; i < this.componentInSlotViewModels().length; i++) {
                    updateQueue.enqueue(function () {
                        var currentViewModel = _this.componentInSlotViewModels()[_this._currentComponentIndex];
                        var relativeComponentsInSlots = _this._componentInSlotRelations.slice(0, _this._currentComponentIndex);
                        return currentViewModel.updateAsync(relativeComponentsInSlots).done(function () {
                            if (currentViewModel.isComponentSelectionComplete) {
                                _this._currentComponentIndex++;
                            }
                            else {
                                updateQueue.cancel();
                                _this._selectedVariant = undefined;
                            }
                        });
                    });
                }
                updateQueue.enqueue(function () {
                    return _this._getVariantByComponentsInSlotsAndUpdateSelectedVariantAsync();
                });
                return this._handleAsyncResult(updateQueue.run());
            };
            KitVariantSelectionViewModel.prototype._getVariantByComponentsInSlotsAndUpdateSelectedVariantAsync = function () {
                var _this = this;
                var channelId = Commerce.Session.instance.productCatalogStore.Context.ChannelId;
                var pageSize = 1;
                var skip = 0;
                return this.productManager.getVariantsByComponentsInSlotsAsync(this._productMaster.RecordId, channelId, this._componentInSlotRelations, pageSize, skip).done(function (variants) {
                    _this._selectedVariant = Commerce.ArrayExtensions.firstOrUndefined(variants);
                });
            };
            return KitVariantSelectionViewModel;
        }(ViewModels.VariantSelectionViewModelBase));
        ViewModels.KitVariantSelectionViewModel = KitVariantSelectionViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var AttributeValueForDisplay = (function () {
            function AttributeValueForDisplay(attribute) {
                this._name = attribute.Name;
                this._textValue = this._getAttributeTextValue(attribute);
            }
            Object.defineProperty(AttributeValueForDisplay.prototype, "name", {
                get: function () {
                    return this._name;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AttributeValueForDisplay.prototype, "textValue", {
                get: function () {
                    return this._textValue;
                },
                enumerable: true,
                configurable: true
            });
            AttributeValueForDisplay.prototype._getAttributeTextValue = function (attribute) {
                var textValue = Commerce.StringExtensions.EMPTY;
                switch (attribute.DataTypeValue) {
                    case Commerce.Proxy.Entities.AttributeDataType.Text:
                        textValue = attribute.TextValue;
                        break;
                    case Commerce.Proxy.Entities.AttributeDataType.Integer:
                        var integerUnitOfMeasureSymbol = attribute.UnitOfMeasureSymbol;
                        var decimalPrecision = 0;
                        textValue = Commerce.NumberExtensions.formatNumber(attribute.IntegerValue, decimalPrecision);
                        if (!Commerce.StringExtensions.isNullOrWhitespace(integerUnitOfMeasureSymbol)) {
                            textValue = this._formatWithUnitOfMeasure(textValue, integerUnitOfMeasureSymbol);
                        }
                        break;
                    case Commerce.Proxy.Entities.AttributeDataType.Decimal:
                        var decimalUnitOfMeasureSymbol = attribute.UnitOfMeasureSymbol;
                        if (Commerce.StringExtensions.isNullOrWhitespace(decimalUnitOfMeasureSymbol)) {
                            textValue = Commerce.NumberExtensions.formatNumber(attribute.FloatValue, Commerce.NumberExtensions.getDecimalPrecision());
                        }
                        else {
                            var decimalPrecision_1 = Commerce.UnitOfMeasureHelper.getDecimalPrecision(decimalUnitOfMeasureSymbol);
                            var formattedNumber = Commerce.NumberExtensions.formatNumber(attribute.FloatValue, decimalPrecision_1);
                            textValue = this._formatWithUnitOfMeasure(formattedNumber, decimalUnitOfMeasureSymbol);
                        }
                        break;
                    case Commerce.Proxy.Entities.AttributeDataType.TrueFalse:
                        textValue = attribute.BooleanValue ? Commerce.ViewModelAdapter.getResourceString("string_831") : Commerce.ViewModelAdapter.getResourceString("string_832");
                        break;
                    case Commerce.Proxy.Entities.AttributeDataType.Currency:
                        textValue = Commerce.NumberExtensions.formatCurrency(attribute.CurrencyValue, attribute.CurrencyCode);
                        break;
                    case Commerce.Proxy.Entities.AttributeDataType.DateTime:
                        textValue =
                            Commerce.Host.instance.globalization.getDateTimeFormatter(Commerce.Host.Globalization.DateTimeFormat.DATE_TIME).format(attribute.DateTimeOffsetValue);
                        break;
                    default:
                        Commerce.RetailLogger.viewModelProductAttributesViewModelUnsupportedAttributeType(Commerce.Proxy.Entities.AttributeDataType[attribute.DataTypeValue], attribute.RecordId);
                }
                return textValue;
            };
            AttributeValueForDisplay.prototype._formatWithUnitOfMeasure = function (formattedAttribute, unitOfMeasure) {
                var formatString = Commerce.ViewModelAdapter.getResourceString("string_833");
                return Commerce.StringExtensions.format(formatString, formattedAttribute, unitOfMeasure);
            };
            return AttributeValueForDisplay;
        }());
        ViewModels.AttributeValueForDisplay = AttributeValueForDisplay;
        var ProductAttributesViewModel = (function (_super) {
            __extends(ProductAttributesViewModel, _super);
            function ProductAttributesViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this.attributes = ko.observableArray([]);
                _this.dataRetrievalFailed = ko.observable(false);
                _this.hasAttributes = ko.computed(function () {
                    return Commerce.ArrayExtensions.hasElements(_this.attributes());
                }, _this);
                _this.hasContent = ko.computed(function () {
                    return _this.hasAttributes() || _this.isBusy() || _this.dataRetrievalFailed();
                }, _this);
                _this._channelId = Commerce.Session.instance.productCatalogStore.Context.ChannelId;
                _this._currentProductId = 0;
                return _this;
            }
            ProductAttributesViewModel.prototype.loadAsync = function (productId, channelId) {
                var _this = this;
                if (Commerce.NumberExtensions.isNullNaNOrZero(productId)) {
                    throw "ProductAttributesViewModel.loadAsync - Invalid argument exception: productId";
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(channelId) || isNaN(channelId)) {
                    throw "ProductAttributesViewModel.loadAsync - Invalid argument exception: channelId.";
                }
                this._currentProductId = productId;
                this._channelId = channelId;
                return this._isBusyUntil(this._getProductAttributes(productId, channelId)).done(function () {
                    _this.dataRetrievalFailed(false);
                }).fail(function (loadErrors) {
                    Commerce.RetailLogger.viewModelProductAttributesViewModelLoadAsyncFailed(productId, JSON.stringify(loadErrors));
                    _this.dataRetrievalFailed(true);
                });
            };
            ProductAttributesViewModel.prototype.refreshAsync = function () {
                return this.loadAsync(this._currentProductId, this._channelId);
            };
            ProductAttributesViewModel.prototype._getProductAttributes = function (productId, channelId) {
                var _this = this;
                var catalogId = Commerce.Session.instance.productCatalogStore.Context.CatalogId;
                return this.productManager.getAttributeValuesAsync(productId, channelId, catalogId)
                    .done(function (attributes) {
                    var attributesForDisplay = attributes.map(function (attribute) {
                        return new AttributeValueForDisplay(attribute);
                    });
                    _this.attributes(attributesForDisplay);
                });
            };
            return ProductAttributesViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.ProductAttributesViewModel = ProductAttributesViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var ImageLoadSatus;
        (function (ImageLoadSatus) {
            ImageLoadSatus[ImageLoadSatus["Pending"] = 0] = "Pending";
            ImageLoadSatus[ImageLoadSatus["Success"] = 1] = "Success";
            ImageLoadSatus[ImageLoadSatus["Failed"] = 2] = "Failed";
        })(ImageLoadSatus = ViewModels.ImageLoadSatus || (ViewModels.ImageLoadSatus = {}));
        var ProductImagesViewModel = (function (_super) {
            __extends(ProductImagesViewModel, _super);
            function ProductImagesViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(options.channelId) || isNaN(options.channelId)) {
                        throw "Invalid options passed to the ProductImagesViewModel constructor: options.channelId cannot be null, undefined.";
                    }
                    else {
                        _this._channelId = options.channelId;
                    }
                }
                else {
                    _this._channelId = Commerce.Session.instance.productCatalogStore.Context.ChannelId;
                }
                _this._allImages = [];
                _this.imagesForDisplay = ko.observableArray([]);
                _this.dataRetrievalFailed = ko.observable(false);
                _this.hasImages = ko.computed(function () {
                    return Commerce.ArrayExtensions.hasElements(_this.imagesForDisplay());
                }, _this);
                _this.hasContent = ko.computed(function () {
                    return _this.hasImages() || _this.isBusy() || _this.dataRetrievalFailed();
                }, _this);
                _this.onImagesVisible = ko.observable(function () { return; });
                _this._currentProduct = null;
                if ((!Commerce.ObjectExtensions.isNullOrUndefined(options)) && (Commerce.ObjectExtensions.isFunction(options.expandImageHandler))) {
                    _this._expandImageHandler = options.expandImageHandler;
                }
                _this.isImageExpansionAvailable = ko.computed(function () {
                    return (!Commerce.ObjectExtensions.isNullOrUndefined(_this._expandImageHandler))
                        && (Commerce.ObjectExtensions.isFunction(_this._expandImageHandler))
                        && (!_this.dataRetrievalFailed());
                }, _this);
                _this._imageLoadStatusByUrlCache = new Commerce.Dictionary();
                return _this;
            }
            Object.defineProperty(ProductImagesViewModel.prototype, "_catalogId", {
                get: function () {
                    return Commerce.Session.instance.productCatalogStore.Context.CatalogId;
                },
                enumerable: true,
                configurable: true
            });
            ProductImagesViewModel.prototype.loadAsync = function (product) {
                var _this = this;
                if (Commerce.NumberExtensions.isNullNaNOrZero(product.RecordId)) {
                    throw "ProductImagesViewModel.loadAsync - Invalid argument exception: productId";
                }
                this._currentProduct = product;
                return this._isBusyUntil(this._getMedia(product.RecordId)).done(function () {
                    _this.dataRetrievalFailed(false);
                }).fail(function (loadErrors) {
                    Commerce.RetailLogger.viewModelProductImagesViewModelLoadAsyncFailed(product.RecordId, JSON.stringify(loadErrors));
                    _this.dataRetrievalFailed(true);
                });
            };
            ProductImagesViewModel.prototype.refreshAsync = function () {
                return this.loadAsync(this._currentProduct);
            };
            ProductImagesViewModel.prototype.selectProductImage = function () {
                if (Commerce.ObjectExtensions.isFunction(this._expandImageHandler)) {
                    this._expandImageHandler(this.imagesForDisplay());
                }
            };
            ProductImagesViewModel.prototype._getMedia = function (productId) {
                var _this = this;
                var imageLoadQueue = new Commerce.AsyncQueue();
                if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                    imageLoadQueue.enqueue(function () {
                        return _this.productManager.getMediaLocationsAsync(productId, _this._channelId, _this._catalogId);
                    }).enqueue(function (mediaLocations) {
                        mediaLocations = mediaLocations || [];
                        _this._allImages = mediaLocations.map(function (mediaLocation) {
                            return {
                                source: mediaLocation.Uri,
                                altText: mediaLocation.AltText || _this._currentProduct.Name,
                                loadStatus: ImageLoadSatus.Pending
                            };
                        });
                        var imageValidationResults = _this._allImages.map(function (image) {
                            return _this._validateImageAsync(image);
                        });
                        return Commerce.VoidAsyncResult.join(imageValidationResults);
                    });
                }
                else {
                    imageLoadQueue.enqueue(function () {
                        return _this.productManager.getMediaBlobsAsync(productId, _this._channelId, _this._catalogId)
                            .done(function (mediaBlobs) {
                            mediaBlobs = mediaBlobs || [];
                            var imagesForDisplay = mediaBlobs.map(function (mediaBlob) {
                                return { source: mediaBlob.Content, altText: mediaBlob.AltText };
                            });
                            _this.imagesForDisplay(imagesForDisplay);
                        });
                    });
                }
                return imageLoadQueue.run();
            };
            ProductImagesViewModel.prototype._validateImageAsync = function (imageInfo) {
                var _this = this;
                var url = Commerce.ImageDisplayHelper.getFormattedChannelRichMediaBaseUrl(Commerce.ApplicationContext.Instance.channelConfiguration) + imageInfo.source;
                if (this._imageLoadStatusByUrlCache.hasItem(url)) {
                    this._updateImagesForDisplay(imageInfo, this._imageLoadStatusByUrlCache.getItem(url));
                    return Commerce.VoidAsyncResult.createResolved();
                }
                else {
                    var img = new Image();
                    var asyncValidationCompletedResult_1 = new Commerce.VoidAsyncResult();
                    img.onload = function (event) {
                        _this._imageLoadStatusByUrlCache.setItem(url, ImageLoadSatus.Success);
                        _this._updateImagesForDisplay(imageInfo, ImageLoadSatus.Success);
                        asyncValidationCompletedResult_1.resolve();
                    };
                    img.onerror = function (event) {
                        _this._imageLoadStatusByUrlCache.setItem(url, ImageLoadSatus.Failed);
                        _this._updateImagesForDisplay(imageInfo, ImageLoadSatus.Failed);
                        asyncValidationCompletedResult_1.resolve();
                    };
                    img.src = url;
                    return asyncValidationCompletedResult_1;
                }
            };
            ProductImagesViewModel.prototype._hasPendingImageLoads = function () {
                return this._allImages.some(function (imageInfo) {
                    return imageInfo.loadStatus === ImageLoadSatus.Pending;
                });
            };
            ProductImagesViewModel.prototype._updateImagesForDisplay = function (info, loadStatus) {
                info.loadStatus = loadStatus;
                if (this._hasPendingImageLoads()) {
                    return;
                }
                var successfulImageLoads = [];
                var unsuccessfulImageLoads = [];
                this._allImages.forEach(function (imageInfo) {
                    if (imageInfo.loadStatus === ImageLoadSatus.Success) {
                        successfulImageLoads.push(imageInfo);
                    }
                    else {
                        unsuccessfulImageLoads.push(imageInfo);
                    }
                });
                if (Commerce.ArrayExtensions.hasElements(unsuccessfulImageLoads)) {
                    Commerce.RetailLogger.viewModelProductImagesViewModelImageValidationFailed(this._currentProduct.RecordId, unsuccessfulImageLoads.length);
                }
                if (!Commerce.ArrayExtensions.hasElements(successfulImageLoads)) {
                    var placeHolderInfo = Commerce.ArrayExtensions.firstOrUndefined(this._allImages) || { source: " ", altText: " " };
                    successfulImageLoads.push(placeHolderInfo);
                    Commerce.RetailLogger.viewModelProductImagesViewModelImageNoValidImage(this._currentProduct.RecordId);
                }
                else if (!Commerce.ArrayExtensions.hasElements(unsuccessfulImageLoads)) {
                    Commerce.RetailLogger.viewModelProductImagesViewModelImageValidationSucceeded(this._currentProduct.RecordId, successfulImageLoads.length);
                }
                var imageSetsAreEqual = this.imagesForDisplay().length === successfulImageLoads.length;
                if (imageSetsAreEqual) {
                    for (var i = 0; i < successfulImageLoads.length; ++i) {
                        if (Commerce.StringExtensions.compare(successfulImageLoads[i].source, this.imagesForDisplay()[i].source, true) !== 0) {
                            imageSetsAreEqual = false;
                            break;
                        }
                    }
                }
                if (!imageSetsAreEqual) {
                    this.imagesForDisplay(successfulImageLoads);
                }
            };
            return ProductImagesViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.ProductImagesViewModel = ProductImagesViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var ProductPriceViewModel = (function (_super) {
            __extends(ProductPriceViewModel, _super);
            function ProductPriceViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this.productPrice = ko.observable(0);
                _this.dataRetrievalFailed = ko.observable(false);
                return _this;
            }
            ProductPriceViewModel.prototype.loadAsync = function (productId, unitOfMeasure) {
                var _this = this;
                if (Commerce.NumberExtensions.isNullNaNOrZero(productId)) {
                    throw "ProductPriceViewModel.loadAsync - Invalid argument exception: productId";
                }
                else if (Commerce.StringExtensions.isNullOrWhitespace(unitOfMeasure)) {
                    throw "ProductPriceViewModel.loadAsync - Invalid argument exception: unitOfMeasure";
                }
                this._currentProductId = productId;
                this._currentUnitOfMeasure = unitOfMeasure;
                return this._isBusyUntil(this.productManager.getDiscountedProductPriceAsync(this._currentProductId, Commerce.Session.instance.cart.CustomerId, this._currentUnitOfMeasure, Commerce.Session.instance.cart.LoyaltyCardId, Commerce.Session.instance.cart.AffiliationLines)).done(function (result) {
                    _this.productPrice(result.CustomerContextualPrice);
                    _this.dataRetrievalFailed(false);
                }).fail(function (loadErrors) {
                    Commerce.RetailLogger.viewModelProductPriceViewModelLoadAsyncFailed(_this._currentProductId, JSON.stringify(loadErrors));
                    _this.dataRetrievalFailed(true);
                });
            };
            ProductPriceViewModel.prototype.refreshAsync = function () {
                return this.loadAsync(this._currentProductId, this._currentUnitOfMeasure);
            };
            return ProductPriceViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.ProductPriceViewModel = ProductPriceViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var ProductRatingViewModel = (function (_super) {
            __extends(ProductRatingViewModel, _super);
            function ProductRatingViewModel(context) {
                var _this = _super.call(this, context) || this;
                _this.productRating = ko.observable(new Commerce.Proxy.Entities.ProductRatingClass());
                _this.dataRetrievalFailed = ko.observable(false);
                return _this;
            }
            ProductRatingViewModel.prototype.loadAsync = function (productId) {
                var _this = this;
                if (Commerce.NumberExtensions.isNullNaNOrZero(productId)) {
                    throw "ProductRatingViewModel.loadAsync - Invalid argument exception: productId";
                }
                this._currentProductId = productId;
                return this._isBusyUntil(this.productManager.getProductRatingsAsync([this._currentProductId])
                    .done(function (result) {
                    if (Commerce.ArrayExtensions.hasElements(result)) {
                        _this.productRating(Commerce.ArrayExtensions.firstOrUndefined(result));
                    }
                    _this.dataRetrievalFailed(false);
                }).fail(function (loadErrors) {
                    _this.dataRetrievalFailed(true);
                }));
            };
            ProductRatingViewModel.prototype.refreshAsync = function () {
                return this.loadAsync(this._currentProductId);
            };
            return ProductRatingViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.ProductRatingViewModel = ProductRatingViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var RecommendedProductsViewModel = (function (_super) {
            __extends(RecommendedProductsViewModel, _super);
            function RecommendedProductsViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw "Invalid options passed to the RecommendedProductsViewModel constructor: options cannot be null or undefined.";
                }
                else if (!Commerce.ObjectExtensions.isFunction(options.productSelectionHandler)) {
                    throw "Invalid options passed to the RecommendedProductsViewModel constructor: options.productSelectionHandler must be a function.";
                }
                else if (!Commerce.ObjectExtensions.isFunction(options.seeAllHandler)) {
                    throw "Invalid options passed to the RecommendedProductsViewModel constructor: options.seeAllHandler must be a function.";
                }
                _this.areMoreRecommendedProductsAvailable = ko.observable(false);
                _this.dataRetrievalFailed = ko.observable(false);
                _this.recommendedProductsForDisplay = ko.observableArray([]);
                _this.hasRecommendedProducts = ko.computed(function () {
                    return Commerce.ArrayExtensions.hasElements(_this.recommendedProductsForDisplay());
                }, _this);
                _this.hasContent = ko.computed(function () {
                    return _this.hasRecommendedProducts() || _this.isBusy() || _this.dataRetrievalFailed();
                }, _this);
                _this._productIds = [];
                _this._productSelectionHandler = options.productSelectionHandler;
                _this._recommendedProducts = [];
                _this._seeAllHandler = options.seeAllHandler;
                return _this;
            }
            RecommendedProductsViewModel.prototype.loadAsync = function (productIds) {
                var _this = this;
                if (!Commerce.ApplicationContext.Instance.channelConfiguration.EnableProductRecommendations) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                this._productIds = productIds;
                var customer = Commerce.Session.instance.customerContext.customer;
                var accountNumber = Commerce.ObjectExtensions.isNullOrUndefined(customer) ? Commerce.StringExtensions.EMPTY : customer.AccountNumber;
                var pageSize = RecommendedProductsViewModel.MAX_RECOMMENDED_PRODUCTS_TO_RETRIEVE_COUNT;
                var skip = 0;
                return this._isBusyUntil(this.productManager.getRecommendedProductsAsync(productIds, accountNumber, pageSize, skip))
                    .done(function (results) {
                    _this.recommendedProductsForDisplay(results.slice(0, RecommendedProductsViewModel.RECOMMENDED_PRODUCTS_FOR_DISPLAY_COUNT));
                    _this.areMoreRecommendedProductsAvailable(results.length > RecommendedProductsViewModel.RECOMMENDED_PRODUCTS_FOR_DISPLAY_COUNT);
                    _this._recommendedProducts = results;
                    _this.dataRetrievalFailed(false);
                    var trackingId = !Commerce.ArrayExtensions.hasElements(results) ? Commerce.StringExtensions.EMPTY : results[0].TrackingId;
                    Commerce.RetailLogger.viewModelProductDetailsLoadRecommendedProductsSucceeded(trackingId, results.length, _this.recommendedProductsForDisplay().length);
                }).fail(function (errors) {
                    Commerce.RetailLogger.viewModelProductDetailsLoadRecommendedProductsFailed(Commerce.ErrorHelper.getErrorMessages(errors));
                    _this.dataRetrievalFailed(true);
                });
            };
            RecommendedProductsViewModel.prototype.refreshAsync = function () {
                return this.loadAsync(this._productIds);
            };
            RecommendedProductsViewModel.prototype.seeAllRecommendedProducts = function () {
                if (Commerce.ArrayExtensions.hasElements(this._recommendedProducts)) {
                    var trackingId = this._recommendedProducts[0].TrackingId;
                    Commerce.RetailLogger.viewModelProductDetailsSeeAllRecommendedProductsLinkClicked(trackingId, this._recommendedProducts.length, this.recommendedProductsForDisplay().length);
                    this._seeAllHandler(this._recommendedProducts, trackingId);
                }
            };
            RecommendedProductsViewModel.prototype.selectRecommendedProduct = function (product) {
                this._productSelectionHandler(product);
            };
            RecommendedProductsViewModel.RECOMMENDED_PRODUCTS_FOR_DISPLAY_COUNT = 4;
            RecommendedProductsViewModel.MAX_RECOMMENDED_PRODUCTS_TO_RETRIEVE_COUNT = 10;
            return RecommendedProductsViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.RecommendedProductsViewModel = RecommendedProductsViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var RelatedProductsViewModel = (function (_super) {
            __extends(RelatedProductsViewModel, _super);
            function RelatedProductsViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw "Invalid options passed to the RelatedProductsViewModel constructor: options cannot be null or undefined.";
                }
                else if (Commerce.NumberExtensions.isNullNaNOrZero(options.productId)) {
                    throw "Invalid options passed to the RelatedProductsViewModel constructor: options.productId cannot be NaN, null or zero.";
                }
                else if (!Commerce.ObjectExtensions.isFunction(options.productSelectionHandler)) {
                    throw "Invalid options passed to the RelatedProductsViewModel constructor: options.productSelectionHandler must be a function.";
                }
                else if (!Commerce.ObjectExtensions.isFunction(options.seeAllHandler)) {
                    throw "Invalid options passed to the RelatedProductsViewModel constructor: options.seeAllHandler must be a function.";
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.channelId) || isNaN(options.channelId)) {
                    throw "Invalid options passed to the RelatedProductsViewModel constructor: options.channelId cannot be null, undefined.";
                }
                _this.relatedProducts = ko.observableArray([]);
                _this.areMoreRelatedProductsAvailable = ko.observable(false);
                _this.dataRetrievalFailed = ko.observable(false);
                _this.hasRelatedProducts = ko.computed(function () {
                    return Commerce.ArrayExtensions.hasElements(_this.relatedProducts());
                }, _this);
                _this.hasContent = ko.computed(function () {
                    return _this.hasRelatedProducts() || _this.isBusy() || _this.dataRetrievalFailed();
                }, _this);
                _this._channelId = options.channelId;
                _this._productId = options.productId;
                _this._seeAllHandler = options.seeAllHandler;
                _this._productSelectionHandler = options.productSelectionHandler;
                _this._productRelationTypes = [];
                return _this;
            }
            Object.defineProperty(RelatedProductsViewModel.prototype, "_catalogId", {
                get: function () {
                    return Commerce.Session.instance.productCatalogStore.Context.CatalogId;
                },
                enumerable: true,
                configurable: true
            });
            RelatedProductsViewModel.prototype.loadAsync = function () {
                var _this = this;
                var loadQueue = new Commerce.AsyncQueue();
                loadQueue.enqueue(function () {
                    return _this.productManager.getRelationTypesAsync(_this._productId, _this._channelId, _this._catalogId)
                        .done(function (relationTypesResult) {
                        _this._productRelationTypes = relationTypesResult;
                    });
                }).enqueue(function () {
                    return _this.getDistinctRelatedProductsAsync(RelatedProductsViewModel.RELATED_PRODUCTS_FOR_DISPLAY_COUNT + 1)
                        .done(function (relatedProducts) {
                        relatedProducts.forEach(function (product) { product.Price = null; });
                        _this.relatedProducts(relatedProducts.slice(0, RelatedProductsViewModel.RELATED_PRODUCTS_FOR_DISPLAY_COUNT));
                        _this.areMoreRelatedProductsAvailable(relatedProducts.length > RelatedProductsViewModel.RELATED_PRODUCTS_FOR_DISPLAY_COUNT);
                    });
                });
                return this._isBusyUntil(loadQueue.run()).done(function (queueResult) {
                    _this.dataRetrievalFailed(false);
                    Commerce.ProductPropertiesHelper.getActivePricesRatingsAndUpdateProductSearchResults(_this.relatedProducts())
                        .done(function (searchResults) {
                        _this.relatedProducts(searchResults);
                    });
                }).fail(function (loadErrors) {
                    Commerce.RetailLogger.viewModelRelatedProductsViewModelLoadAsyncFailed(_this._productId, JSON.stringify(loadErrors));
                    _this.dataRetrievalFailed(true);
                });
            };
            RelatedProductsViewModel.prototype.seeAllRelatedProductsAsync = function () {
                var _this = this;
                return this._isBusyUntil(this.getDistinctRelatedProductsAsync())
                    .done(function (relatedProducts) {
                    _this._seeAllHandler(relatedProducts, null);
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            RelatedProductsViewModel.prototype.selectRelatedProduct = function (product) {
                this._productSelectionHandler(product);
            };
            RelatedProductsViewModel.prototype.getDistinctRelatedProductsAsync = function (maxProductsToLoad) {
                var _this = this;
                if (Commerce.ArrayExtensions.hasElements(this._productRelationTypes)) {
                    var loadAllProducts_1 = Commerce.NumberExtensions.isNullNaNOrZero(maxProductsToLoad);
                    maxProductsToLoad = maxProductsToLoad || -1;
                    var loadRelatedProductsQueue_1 = new Commerce.AsyncQueue();
                    var distinctRelatedProducts_1 = [];
                    var relatedProductsByRecId_1 = new Commerce.Dictionary();
                    this._productRelationTypes.forEach(function (relationType) {
                        loadRelatedProductsQueue_1.enqueue(function () {
                            var loadedProductsCount = distinctRelatedProducts_1.length;
                            if (loadAllProducts_1 || loadedProductsCount < maxProductsToLoad) {
                                var pageSize = loadAllProducts_1 ? undefined : maxProductsToLoad - loadedProductsCount;
                                var skip = loadAllProducts_1 ? undefined : 0;
                                return _this.productManager.getRelatedProductsAsync(_this._productId, _this._channelId, _this._catalogId, relationType.RecordId, pageSize, skip).done(function (relatedProductsResult) {
                                    if (Commerce.ArrayExtensions.hasElements(relatedProductsResult)) {
                                        relatedProductsResult.forEach(function (relatedProduct) {
                                            if (!relatedProductsByRecId_1.hasItem(relatedProduct.RecordId)) {
                                                distinctRelatedProducts_1.push(relatedProduct);
                                                relatedProductsByRecId_1.setItem(relatedProduct.RecordId, relatedProduct);
                                            }
                                        });
                                    }
                                });
                            }
                            else {
                                return Commerce.VoidAsyncResult.createResolved();
                            }
                        });
                    });
                    return loadRelatedProductsQueue_1.run().map(function (queueResult) {
                        return distinctRelatedProducts_1;
                    });
                }
                else {
                    return Commerce.AsyncResult.createResolved([]);
                }
            };
            RelatedProductsViewModel.RELATED_PRODUCTS_FOR_DISPLAY_COUNT = 4;
            return RelatedProductsViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.RelatedProductsViewModel = RelatedProductsViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var SimilarLooksProductsViewModel = (function (_super) {
            __extends(SimilarLooksProductsViewModel, _super);
            function SimilarLooksProductsViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw "Invalid options passed to the SimilarLooksProductsViewModel constructor: options cannot be null or undefined.";
                }
                else if (!Commerce.ObjectExtensions.isFunction(options.productSelectionHandler)) {
                    throw "Invalid options passed to the SimilarLooksProductsViewModel constructor: options.productSelectionHandler must be a function.";
                }
                else if (!Commerce.ObjectExtensions.isFunction(options.seeAllHandler)) {
                    throw "Invalid options passed to the SimilarLooksProductsViewModel constructor: options.seeAllHandler must be a function.";
                }
                _this.similarLooksProductsForDisplay = ko.observableArray([]);
                _this.areMoreSimilarLooksProductsAvailable = ko.observable(false);
                _this.dataRetrievalFailed = ko.observable(false);
                _this.hasSimilarLooksProducts = ko.computed(function () {
                    return Commerce.ArrayExtensions.hasElements(_this.similarLooksProductsForDisplay());
                }, _this);
                _this.hasContent = ko.computed(function () {
                    return _this.hasSimilarLooksProducts() || _this.isBusy() || _this.dataRetrievalFailed();
                }, _this);
                _this._seeAllHandler = options.seeAllHandler;
                _this._productSelectionHandler = options.productSelectionHandler;
                _this._similarLooksProducts = [];
                return _this;
            }
            SimilarLooksProductsViewModel.prototype.loadAsync = function (productId) {
                var _this = this;
                if (!Commerce.ApplicationContext.Instance.channelConfiguration.EnableProductRecommendations) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                this._productId = productId;
                this._productSearchCriteria = new Commerce.Proxy.Entities.ProductSearchCriteriaClass();
                this._productSearchCriteria.Context = Commerce.Session.instance.productCatalogStore.Context;
                this._productSearchCriteria.Ids = [productId];
                this._productSearchCriteria.RecommendationListId = SimilarLooksProductsViewModel.VISUAL_RECOMMENDATION;
                var pageSize = SimilarLooksProductsViewModel.MAX_PRODUCTS_TO_RETRIEVE_COUNT;
                var skip = 0;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var loadQueue = new Commerce.AsyncQueue();
                loadQueue.enqueue(function () {
                    return _this.productManager.searchByCriteriaAsync(_this._productSearchCriteria, correlationId, pageSize, skip)
                        .done(function (similarLooksProducts) {
                        _this._similarLooksProducts = similarLooksProducts;
                        similarLooksProducts.forEach(function (product) {
                            product.Price = null;
                        });
                        _this.areMoreSimilarLooksProductsAvailable(similarLooksProducts.length > SimilarLooksProductsViewModel.PRODUCTS_DISPLAY_COUNT);
                        _this.similarLooksProductsForDisplay(similarLooksProducts.slice(0, SimilarLooksProductsViewModel.PRODUCTS_DISPLAY_COUNT));
                        Commerce.ProductPropertiesHelper.getActivePricesRatingsAndUpdateProductSearchResults(_this.similarLooksProductsForDisplay())
                            .done(function (searchResults) {
                            _this.similarLooksProductsForDisplay(searchResults);
                        });
                        var trackingId = !Commerce.ArrayExtensions.hasElements(similarLooksProducts)
                            ? Commerce.StringExtensions.EMPTY : similarLooksProducts[0].TrackingId;
                        Commerce.RetailLogger.viewModelProductDetailsLoadSimilarLooksProductsSucceeded(trackingId, similarLooksProducts.length, _this.similarLooksProductsForDisplay().length);
                    });
                });
                return this._isBusyUntil(loadQueue.run()).done(function (queueResult) {
                    _this.dataRetrievalFailed(false);
                }).fail(function (loadErrors) {
                    Commerce.RetailLogger.viewModelSimilarLooksProductsViewModelLoadAsyncFailed(_this._productId, JSON.stringify(loadErrors));
                    _this.dataRetrievalFailed(true);
                });
            };
            SimilarLooksProductsViewModel.prototype.refreshAsync = function () {
                return this.loadAsync(this._productId);
            };
            SimilarLooksProductsViewModel.prototype.seeAllSimilarLooksProducts = function () {
                if (Commerce.ArrayExtensions.hasElements(this._similarLooksProducts)) {
                    var trackingId = SimilarLooksProductsViewModel.VISUAL_RECOMMENDATION;
                    Commerce.RetailLogger.viewModelProductDetailsSeeAllSimilarLooksProductsLinkClicked(trackingId, this._similarLooksProducts.length, this.similarLooksProductsForDisplay().length);
                    this._seeAllHandler(this._similarLooksProducts, trackingId);
                }
            };
            SimilarLooksProductsViewModel.prototype.selectSimilarLookProduct = function (product) {
                this._productSelectionHandler(product);
            };
            SimilarLooksProductsViewModel.VISUAL_RECOMMENDATION = "looks";
            SimilarLooksProductsViewModel.PRODUCTS_DISPLAY_COUNT = 4;
            SimilarLooksProductsViewModel.MAX_PRODUCTS_TO_RETRIEVE_COUNT = 50;
            return SimilarLooksProductsViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.SimilarLooksProductsViewModel = SimilarLooksProductsViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var SimpleProductDetailsViewModel = (function (_super) {
            __extends(SimpleProductDetailsViewModel, _super);
            function SimpleProductDetailsViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw "Invalid options passed to the SimpleProductDetailsViewModel constructor: options cannot be null or undefined.";
                }
                else if (Commerce.NumberExtensions.isNullNaNOrZero(options.productId)) {
                    throw "Invalid options passed to the SimpleProductDetailsViewModel constructor: options.productId cannot be NaN, null or zero.";
                }
                else if (!Commerce.ObjectExtensions.isNullOrUndefined(options.product) && options.product.RecordId !== options.productId) {
                    throw "Invalid options passed to the SimpleProductDetailsViewModel constructor: options.productId must correspond to options.product";
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.isSelectionMode)) {
                    throw "Invalid options passed to the SimpleProductDetailsViewModel constructor: options.isSelectionMode cannot be null or undefined.";
                }
                else if (options.isSelectionMode && Commerce.ObjectExtensions.isNullOrUndefined(options.selectionOptions)) {
                    throw "Invalid options passed to the SimpleProductDetailsViewModel constructor: options.selectionOptions cannot be null in selection mode.";
                }
                else if (options.isSelectionMode && Commerce.ObjectExtensions.isNullOrUndefined(options.selectionOptions.productSelectionHandler)) {
                    throw "Invalid options passed to the SimpleProductDetailsViewModel constructor: productSelectionHandler cannot be null in selection mode.";
                }
                else if (!Commerce.ObjectExtensions.isFunction(options.expandImageHandler)) {
                    throw "Invalid options passed to the SimpleProductDetailsViewModel constructor: options.expandImageHandler must be a function.";
                }
                _this.product = ko.observable(options.product);
                _this.productIsKit = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.product())
                        && (_this.product().ProductTypeValue === Commerce.Proxy.Entities.ProductType.KitMaster
                            || _this.product().ProductTypeValue === Commerce.Proxy.Entities.ProductType.KitVariant);
                }, _this);
                _this.variantSelectionViewModel = ko.observable(undefined);
                _this.isVariantSelectionEnabled = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.variantSelectionViewModel());
                }, _this);
                _this.isViewAllVariantsVisible = ko.computed(function () {
                    return !_this.isSelectionMode
                        && !_this.productIsKit()
                        && !Commerce.ObjectExtensions.isNullOrUndefined(_this.product())
                        && (_this.product().ProductTypeValue === Commerce.Proxy.Entities.ProductType.Master
                            || _this.product().ProductTypeValue === Commerce.Proxy.Entities.ProductType.Variant);
                }, _this);
                _this.ignoreSelectionModeCancelation = false;
                _this._isBusyFlag = ko.observable(false);
                _this._isBusyWhen(ko.computed(function () { return _this._isBusyFlag(); }));
                _this._productId = options.productId;
                _this._channelId = (!Commerce.ObjectExtensions.isNullOrUndefined(options.channelId)
                    && !isNaN(options.channelId)
                    && options.channelId !== Commerce.Session.instance.productCatalogStore.Context.ChannelId) ?
                    0 : Commerce.Session.instance.productCatalogStore.Context.ChannelId;
                _this._isSelectionMode = options.isSelectionMode;
                if (_this._isSelectionMode) {
                    _this._productSelectionHandler = options.selectionOptions.productSelectionHandler;
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.addToCartOptions)) {
                    _this._quantity = 0;
                    _this._trackingId = Commerce.StringExtensions.EMPTY;
                }
                else {
                    _this._quantity = options.addToCartOptions.quantity || 0;
                    _this._trackingId = options.addToCartOptions.trackingId || Commerce.StringExtensions.EMPTY;
                }
                _this._productAttributesViewModel = new ViewModels.ProductAttributesViewModel(context);
                var productImagesViewModelOptions = {
                    channelId: _this._channelId,
                    expandImageHandler: options.expandImageHandler
                };
                _this._productImagesViewModel = new ViewModels.ProductImagesViewModel(context, productImagesViewModelOptions);
                _this._productPriceViewModel = new ViewModels.ProductPriceViewModel(context);
                _this._productRatingViewModel = new ViewModels.ProductRatingViewModel(context);
                var seeAllHandler = function (products, trackingId) {
                    var searchOptions = {
                        selectionMode: ViewModels.SearchViewSelectionMode.None,
                        searchEntity: ViewModels.SearchViewSearchEntity.Product,
                        productSearchResults: products,
                        correlationId: Commerce.StringExtensions.EMPTY,
                        trackingId: trackingId
                    };
                    Commerce.ViewModelAdapter.navigate("SearchView", searchOptions);
                };
                var onProductInvoked = function (product) {
                    var productDetailsOptions = {
                        productId: product.RecordId,
                        product: undefined,
                        isSelectionMode: false,
                        addToCartOptions: {
                            trackingId: product.TrackingId
                        },
                        correlationId: Commerce.StringExtensions.EMPTY
                    };
                    Commerce.ViewModelAdapter.navigate("SimpleProductDetailsView", productDetailsOptions);
                };
                var recommendedProductsViewModelOptions = {
                    productSelectionHandler: onProductInvoked,
                    seeAllHandler: seeAllHandler
                };
                _this._recommendedProductsViewModel = new ViewModels.RecommendedProductsViewModel(context, recommendedProductsViewModelOptions);
                var relatedProductsViewModelOptions = {
                    channelId: _this._channelId,
                    seeAllHandler: seeAllHandler,
                    productId: Commerce.ObjectExtensions.isNullOrUndefined(_this.product()) ? options.productId : _this.product().RecordId,
                    productSelectionHandler: onProductInvoked
                };
                _this._relatedProductsViewModel = new ViewModels.RelatedProductsViewModel(context, relatedProductsViewModelOptions);
                var similarLooksProductsViewModelOptions = {
                    seeAllHandler: seeAllHandler,
                    productSelectionHandler: onProductInvoked
                };
                _this._similarLooksProductsViewModel = new ViewModels.SimilarLooksProductsViewModel(context, similarLooksProductsViewModelOptions);
                _this._isExtensionCommandViewModelBusy = ko.observable(false);
                if (Commerce.ObjectExtensions.isNullOrUndefined(SimpleProductDetailsViewModel._viewExtensionsManager)) {
                    _this._customControlViewModels = [];
                    _this._extensionCommandViewModels = [];
                }
                else {
                    _this._extensionCommandViewModels = SimpleProductDetailsViewModel._viewExtensionsManager.getAppBarCommands()
                        .map(function (command) {
                        var commandVM = new ViewModels.CommandViewModel(command);
                        commandVM.addMessageHandler("IsProcessingChanged", function (isProcessing) {
                            if (isProcessing) {
                                _this._isExtensionCommandViewModelBusy(true);
                            }
                            else {
                                var isAnyCommandProcessing = _this._extensionCommandViewModels.some(function (vm) {
                                    return vm.isProcessing;
                                });
                                _this._isExtensionCommandViewModelBusy(isAnyCommandProcessing);
                            }
                        });
                        return commandVM;
                    });
                    _this._isBusyWhen(_this._isExtensionCommandViewModelBusy);
                    _this._customControlViewModels = SimpleProductDetailsViewModel._viewExtensionsManager.getCustomControls();
                    var isCustomControlViewModelBusy = ko.computed(function () {
                        return _this._customControlViewModels.some(function (customControlViewModel) {
                            return customControlViewModel.isBusy();
                        });
                    });
                    _this._isBusyWhen(isCustomControlViewModelBusy);
                }
                return _this;
            }
            Object.defineProperty(SimpleProductDetailsViewModel, "viewExtensionManager", {
                set: function (manager) {
                    SimpleProductDetailsViewModel._viewExtensionsManager = manager;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SimpleProductDetailsViewModel.prototype, "isSelectionMode", {
                get: function () {
                    return this._isSelectionMode;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SimpleProductDetailsViewModel.prototype, "productAttributesViewModel", {
                get: function () {
                    return this._productAttributesViewModel;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SimpleProductDetailsViewModel.prototype, "productImagesViewModel", {
                get: function () {
                    return this._productImagesViewModel;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SimpleProductDetailsViewModel.prototype, "productPriceViewModel", {
                get: function () {
                    return this._productPriceViewModel;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SimpleProductDetailsViewModel.prototype, "productRatingViewModel", {
                get: function () {
                    return this._productRatingViewModel;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SimpleProductDetailsViewModel.prototype, "recommendedProductsViewModel", {
                get: function () {
                    return this._recommendedProductsViewModel;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SimpleProductDetailsViewModel.prototype, "relatedProductsViewModel", {
                get: function () {
                    return this._relatedProductsViewModel;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SimpleProductDetailsViewModel.prototype, "similarLooksProductsViewModel", {
                get: function () {
                    return this._similarLooksProductsViewModel;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SimpleProductDetailsViewModel.prototype, "extensionCommandViewModels", {
                get: function () {
                    return this._extensionCommandViewModels;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SimpleProductDetailsViewModel.prototype, "customPanelViewModels", {
                get: function () {
                    return this._customControlViewModels;
                },
                enumerable: true,
                configurable: true
            });
            SimpleProductDetailsViewModel.prototype.loadAsync = function (correlationId) {
                var _this = this;
                var loadQueue = new Commerce.AsyncQueue();
                if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                    correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                }
                Commerce.RetailLogger.viewModelProductDetailsLoadStarted(correlationId);
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.product())) {
                    loadQueue.enqueue(function () {
                        return _this.productManager.getByIdAsync(_this._productId, _this._channelId)
                            .done(function (product) {
                            _this.product(product);
                        });
                    });
                }
                var loadResult = new Commerce.VoidAsyncResult();
                this._isBusyUntil(loadResult);
                loadQueue.run().done(function (queueResult) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this.product())) {
                        var productNotFoundErrors = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PRODUCT_DETAILS_NOT_FOUND_ERROR_MESSAGE)];
                        Commerce.RetailLogger.viewModelProductDetailsLoadProductDetailsProductNotFound(correlationId, _this._productId, _this._channelId);
                        Commerce.NotificationHandler.displayClientErrors(productNotFoundErrors, Commerce.ErrorTypeEnum.PRODUCT_DETAILS_NOT_FOUND_ERROR_TITLE);
                        loadResult.reject(productNotFoundErrors);
                        return;
                    }
                    Commerce.RetailLogger.viewsMerchandisingProductDetailsLoaded();
                    var productType = _this.product().ProductTypeValue;
                    if (productType !== Commerce.Proxy.Entities.ProductType.Standalone) {
                        _this._createAndLoadVariantSelectionViewModelAsync(correlationId);
                    }
                    var productId = _this.product().RecordId;
                    _this.productPriceViewModel.loadAsync(productId, _this.product().DefaultUnitOfMeasure);
                    if (Commerce.ApplicationContext.Instance.channelConfiguration.EnableProductRatingsForRetailStores) {
                        _this.productRatingViewModel.loadAsync(productId);
                    }
                    _this.productAttributesViewModel.loadAsync(productId, _this._channelId);
                    _this.productImagesViewModel.loadAsync(_this.product());
                    _this.relatedProductsViewModel.loadAsync();
                    _this.similarLooksProductsViewModel.loadAsync(productId);
                    _this.recommendedProductsViewModel.loadAsync([productId]);
                    _this.extensionCommandViewModels.forEach(function (vm) {
                        vm.sendMessage("Initialize", { product: _this.product(), isSelectionMode: _this.isSelectionMode });
                    });
                    _this._customControlViewModels.forEach(function (vm) {
                        vm.init({ product: _this.product(), isSelectionMode: _this.isSelectionMode });
                    });
                    loadResult.resolve();
                }).fail(function (errors) {
                    Commerce.RetailLogger.viewModelProductDetailsLoadProductDetailsFailed(correlationId, _this._productId, Commerce.ErrorHelper.serializeError(errors));
                    Commerce.NotificationHandler.displayClientErrors(errors);
                    loadResult.reject(errors);
                }).always(function () {
                    Commerce.RetailLogger.viewModelProductDetailsLoadCompleted(correlationId);
                });
                return loadResult;
            };
            SimpleProductDetailsViewModel.prototype.addProductToCartAsync = function () {
                Commerce.RetailLogger.viewsMerchandisingProductDetailsAddItem();
                return this._isBusyUntil(this._addProductToCartInternal())
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            SimpleProductDetailsViewModel.prototype.sellNowAsync = function () {
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.viewsMerchandisingProductDetailsQuickSale(correlationId);
                return this._isBusyUntil(this._addProductToCartInternal()).done(function (addToCartResult) {
                    if (!addToCartResult.canceled) {
                        var cartViewOptions = { correlationId: correlationId };
                        Commerce.ViewModelAdapter.navigate("CartView", cartViewOptions);
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            SimpleProductDetailsViewModel.prototype.addProductToCallbackPage = function () {
                var _this = this;
                if (!this.isSelectionMode) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                else if (this.product().ProductTypeValue === Commerce.Proxy.Entities.ProductType.KitMaster) {
                    return this._displayKitVariantNotSelectedError();
                }
                this._isBusyFlag(true);
                var selectionResult = {
                    simpleProduct: this.product()
                };
                this._productSelectionHandler.select(selectionResult, function () {
                    _this._isBusyFlag(false);
                }, function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                    _this._isBusyFlag(false);
                });
                return Commerce.VoidAsyncResult.createResolved();
            };
            SimpleProductDetailsViewModel.prototype.cancelProductSelection = function () {
                if (this.isSelectionMode && !Commerce.ObjectExtensions.isNullOrUndefined(this._productSelectionHandler) && !this.ignoreSelectionModeCancelation) {
                    this._productSelectionHandler.cancel();
                }
            };
            SimpleProductDetailsViewModel.prototype.viewAllVariants = function () {
                var productMaster;
                if (this.isVariantSelectionEnabled() && this.product().ProductTypeValue === Commerce.Proxy.Entities.ProductType.Variant) {
                    productMaster = this.variantSelectionViewModel().productMaster;
                }
                else {
                    productMaster = this.product();
                }
                var inventoryLookupMatrixViewOptions = {
                    product: productMaster
                };
                Commerce.ViewModelAdapter.navigate("InventoryLookupMatrixView", inventoryLookupMatrixViewOptions);
            };
            SimpleProductDetailsViewModel.prototype.switchMode = function (event) {
                this._productImagesViewModel.onImagesVisible()();
            };
            SimpleProductDetailsViewModel.prototype.dispose = function () {
                if (this.isVariantSelectionEnabled()) {
                    var variantSelectionViewModel = this.variantSelectionViewModel();
                    this.variantSelectionViewModel(undefined);
                    variantSelectionViewModel.dispose();
                }
                _super.prototype.dispose.call(this);
            };
            SimpleProductDetailsViewModel.prototype._addProductToCartInternal = function () {
                if (this.product().ProductTypeValue === Commerce.Proxy.Entities.ProductType.KitMaster) {
                    return this._displayKitVariantNotSelectedError().map(function () {
                        return { canceled: true };
                    });
                }
                var selectedDimensions = [];
                if (this.product().ProductTypeValue === Commerce.Proxy.Entities.ProductType.Master) {
                    var variantSelectionViewModel = this.variantSelectionViewModel();
                    if (variantSelectionViewModel instanceof ViewModels.VariantSelectionViewModel) {
                        selectedDimensions = variantSelectionViewModel.selectedDimensions;
                    }
                }
                var trackingId = Commerce.StringExtensions.EMPTY;
                var productId = this.product().RecordId;
                if (!Commerce.StringExtensions.isEmptyOrWhitespace(this._trackingId)) {
                    trackingId = this._trackingId;
                    Commerce.RetailLogger.viewsMerchandisingProductDetailsAddToCart(trackingId, productId);
                }
                var options = {
                    productSaleDetails: [{
                            productId: productId,
                            product: this.product(),
                            quantity: this._quantity,
                            trackingId: trackingId,
                            catalogId: Commerce.Session.instance.productCatalogStore.Context.CatalogId,
                            preSelectedDimensions: selectedDimensions
                        }]
                };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.ItemSale, options);
            };
            SimpleProductDetailsViewModel.prototype._createAndLoadVariantSelectionViewModelAsync = function (correlationId) {
                var _this = this;
                Commerce.RetailLogger.viewsMerchandisingProductDetailsLoadingVariantSelectionStarted(correlationId);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.variantSelectionViewModel())) {
                    return this.variantSelectionViewModel().loadAsync();
                }
                var loadQueue = new Commerce.AsyncQueue();
                var productType = this.product().ProductTypeValue;
                if (productType === Commerce.Proxy.Entities.ProductType.Variant || productType === Commerce.Proxy.Entities.ProductType.KitVariant) {
                    loadQueue.enqueue(function () {
                        return _this.productManager.getByIdAsync(_this.product().MasterProductId, _this._channelId)
                            .done(function (masterProduct) {
                            _this.variantSelectionViewModel(_this._createVariantSelectionViewModel(correlationId, masterProduct, _this.product()));
                        });
                    });
                }
                else {
                    this.variantSelectionViewModel(this._createVariantSelectionViewModel(correlationId, this.product()));
                }
                loadQueue.enqueue(function () {
                    return _this.variantSelectionViewModel().loadAsync();
                });
                return loadQueue.run().done(function (result) {
                    Commerce.RetailLogger.viewsMerchandisingProductDetailsLoadingVariantSelectionSuccessful(correlationId);
                }).fail(function (errors) {
                    Commerce.RetailLogger.viewsMerchandisingProductDetailsLoadingVariantSelectionFailed(correlationId, Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors));
                });
            };
            SimpleProductDetailsViewModel.prototype._createVariantSelectionViewModel = function (correlationId, masterProduct, variantProduct) {
                var _this = this;
                var variantSelectionViewModelOptions = {
                    channelId: this._channelId,
                    productMaster: masterProduct,
                    defaultVariant: variantProduct,
                    onVariantSelectionChanged: function (selectedVariant) {
                        _this._onVariantSelectionChanged(selectedVariant);
                    },
                    correlationId: correlationId
                };
                var productType = masterProduct.ProductTypeValue;
                var variantSelectionViewModel;
                if (productType === Commerce.Proxy.Entities.ProductType.Master) {
                    variantSelectionViewModel = new ViewModels.VariantSelectionViewModel(this.context, variantSelectionViewModelOptions);
                }
                else if (productType === Commerce.Proxy.Entities.ProductType.KitMaster) {
                    variantSelectionViewModelOptions.componentSubstitutionEventCallbacks = {
                        onSubstitutionStarted: function () { _this.ignoreSelectionModeCancelation = true; },
                        onSubstitutionCompleted: function (canceled) {
                            _this.ignoreSelectionModeCancelation = false;
                            if (canceled) {
                                if (!Commerce.ViewModelAdapter.isInView("SimpleProductDetailsView")) {
                                    Commerce.ViewModelAdapter.collapse("SimpleProductDetailsView");
                                }
                                _this.cancelProductSelection();
                            }
                            else if (!Commerce.ViewModelAdapter.isInView("SimpleProductDetailsView")) {
                                Commerce.ViewModelAdapter.navigateBack();
                            }
                        }
                    };
                    variantSelectionViewModel = new ViewModels.KitVariantSelectionViewModel(this.context, variantSelectionViewModelOptions);
                }
                return variantSelectionViewModel;
            };
            SimpleProductDetailsViewModel.prototype._onVariantSelectionChanged = function (selectedVariant) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(selectedVariant)) {
                    this._productId = selectedVariant.RecordId;
                    this.product(selectedVariant);
                    this.productPriceViewModel.loadAsync(this._productId, selectedVariant.DefaultUnitOfMeasure);
                    this.productAttributesViewModel.loadAsync(this._productId, this._channelId);
                    this.productImagesViewModel.loadAsync(this.product());
                    this._sendMessageToExtensions("ProductChanged", { product: selectedVariant });
                }
            };
            SimpleProductDetailsViewModel.prototype._displayKitVariantNotSelectedError = function () {
                var notAllDimensionsSelectedError = new Commerce.Proxy.Entities.Error("string_829");
                return Commerce.NotificationHandler.displayClientErrors([notAllDimensionsSelectedError], "string_828");
            };
            SimpleProductDetailsViewModel.prototype._sendMessageToExtensions = function (messageType, messageData) {
                this.extensionCommandViewModels.forEach(function (vm) {
                    vm.sendMessage(messageType, messageData);
                });
                this._customControlViewModels.forEach(function (vm) {
                    vm.sendMessage(messageType, messageData);
                });
            };
            return SimpleProductDetailsViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.SimpleProductDetailsViewModel = SimpleProductDetailsViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var GetSignatureFromDeviceViewModel = (function (_super) {
            __extends(GetSignatureFromDeviceViewModel, _super);
            function GetSignatureFromDeviceViewModel(context, correlationId) {
                var _this = _super.call(this, context) || this;
                _this.correlationId = correlationId;
                _this.isSignatureCaptureDeviceOpen = ko.observable(false);
                _this._isOperationSkipSignature = false;
                return _this;
            }
            Object.defineProperty(GetSignatureFromDeviceViewModel.prototype, "isOperationSkipSignature", {
                get: function () {
                    return this._isOperationSkipSignature;
                },
                enumerable: true,
                configurable: true
            });
            GetSignatureFromDeviceViewModel.prototype.getSignatureFromDeviceAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                var signatureData = null;
                asyncQueue.enqueue(function () {
                    return asyncQueue.cancelOn(Commerce.Peripherals.instance.signatureCapture.openDevice(_this.correlationId));
                });
                asyncQueue.enqueue(function () {
                    _this.isSignatureCaptureDeviceOpen(true);
                    return Commerce.Peripherals.instance.signatureCapture.getSignature(_this.correlationId)
                        .done(function (result) {
                        signatureData = result.data;
                    });
                });
                return asyncQueue.run()
                    .map(function (result) {
                    return {
                        canceled: result.canceled,
                        data: result.canceled ? null : signatureData
                    };
                })
                    .always(function () {
                    if (Commerce.Peripherals.instance.signatureCapture.isActive) {
                        Commerce.Peripherals.instance.signatureCapture.closeDevice(_this.correlationId);
                    }
                });
            };
            GetSignatureFromDeviceViewModel.prototype.endGetSignatureFromDevice = function (isOperationSkipSignature) {
                var _this = this;
                this._isOperationSkipSignature = isOperationSkipSignature;
                return Commerce.Peripherals.instance.signatureCapture.cancelSignature(this.correlationId)
                    .fail(function (errors) {
                    Commerce.Peripherals.instance.signatureCapture.closeDevice(_this.correlationId);
                });
            };
            return GetSignatureFromDeviceViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.GetSignatureFromDeviceViewModel = GetSignatureFromDeviceViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var PaymentMethodViewModelBase = (function (_super) {
            __extends(PaymentMethodViewModelBase, _super);
            function PaymentMethodViewModelBase(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw new Error("Invalid options passed to the PaymentMethodViewModelBase constructor: options cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.tenderType)) {
                    throw new Error("Invalid options passed to the PaymentMethodViewModelBase constructor: tenderType cannot be null or undefined.");
                }
                else if (Commerce.StringExtensions.isNullOrWhitespace(options.correlationId)) {
                    throw new Error("Invalid options passed to the PaymentMethodViewModelBase constructor: correlationId cannot be null, undefined, or empty.");
                }
                options.fullAmountDue = options.fullAmountDue || 0;
                options.correlationId = options.correlationId || Commerce.StringExtensions.EMPTY;
                _this.tenderType = options.tenderType;
                _this.correlationId = options.correlationId;
                _this.fullAmountDue = ko.observable(options.fullAmountDue);
                _this.currency = ko.observable(_this.applicationContext.deviceConfiguration.Currency);
                _this.selectedCurrencyAmount = ko.observable(null);
                _this.paymentAmountText = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.currencyDenominationList = ko.observableArray([]);
                _this._isDenominationAdded = false;
                _this._onPaymentCardChanged = options.onPaymentCardChanged;
                _this.setPaymentAmount(options.fullAmountDue);
                _this.paymentAmount = ko.computed(function () {
                    return Commerce.NumberExtensions.parseNumber(_this.paymentAmountText());
                });
                _this.fullAmountDueTextFormattedByCurrency = ko.computed(function () {
                    return Commerce.NumberExtensions.formatCurrency(_this.fullAmountDue(), _this.currency());
                });
                _this.currencyDecimalPrecision = ko.computed(function () {
                    return Commerce.NumberExtensions.getDecimalPrecision(_this.currency());
                });
                _this.areDenominationsAllowed = ko.computed(function () {
                    return Commerce.ArrayExtensions.hasElements(_this.currencyDenominationList());
                });
                _this.isExemptFromReturnPolicy = !Commerce.ObjectExtensions.isNullOrUndefined(options.isExemptFromReturnPolicy) ? options.isExemptFromReturnPolicy : false;
                return _this;
            }
            Object.defineProperty(PaymentMethodViewModelBase.prototype, "isCurrencyPayment", {
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PaymentMethodViewModelBase.prototype, "isCardPayment", {
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PaymentMethodViewModelBase.prototype, "isGiftCardPayment", {
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PaymentMethodViewModelBase.prototype, "isCustomerAccountPayment", {
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PaymentMethodViewModelBase.prototype, "isLoyaltyCardPayment", {
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PaymentMethodViewModelBase.prototype, "isCreditMemoPayment", {
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PaymentMethodViewModelBase.prototype, "arePaymentDetailsAvailable", {
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PaymentMethodViewModelBase.prototype, "isPaymentAmountEditable", {
                get: function () {
                    return !this.isCreditMemoPayment;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PaymentMethodViewModelBase.prototype, "checkForRecoveredPaymentsBeforePaymentProcessing", {
                get: function () {
                    return true;
                },
                enumerable: true,
                configurable: true
            });
            PaymentMethodViewModelBase.prototype.afterBind = function () {
                return;
            };
            PaymentMethodViewModelBase.prototype.loadAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                Commerce.RetailLogger.posPaymentMethodViewModelLoadStarted(this.correlationId, this.tenderType.OperationId, this.tenderType.OperationName);
                asyncQueue.enqueue(function () {
                    return _this._roundAmountsAndUpdateLineDisplayAsync(_this.fullAmountDue());
                }).enqueue(function () {
                    return asyncQueue.cancelOn(_this.loadPaymentMethodAsync());
                });
                return asyncQueue.run()
                    .done(function (result) {
                    if (!result.canceled) {
                        Commerce.RetailLogger.posPaymentMethodViewModelLoadSucceeded(_this.correlationId, _this.tenderType.OperationId, _this.tenderType.OperationName);
                    }
                    else {
                        Commerce.RetailLogger.posPaymentMethodViewModelLoadCancelled(_this.correlationId, _this.tenderType.OperationId, _this.tenderType.OperationName);
                    }
                }).fail(function (errors) {
                    Commerce.RetailLogger.posPaymentMethodViewModelLoadFailed(_this.correlationId, _this.tenderType.OperationId, _this.tenderType.OperationName, Commerce.ErrorHelper.serializeError(errors));
                });
            };
            PaymentMethodViewModelBase.prototype.setPaymentAmountToFullAmountDue = function () {
                this.setPaymentAmount(this.fullAmountDue());
                Commerce.RetailLogger.posPaymentAmountSetToFullAmountDue(this.correlationId, this.paymentAmountText());
                this._isDenominationAdded = false;
            };
            PaymentMethodViewModelBase.prototype.addDenominationAmountToPaymentAmount = function (denominationAmount) {
                var newAmount;
                if (this._isDenominationAdded) {
                    newAmount = this.paymentAmount() + denominationAmount;
                    Commerce.RetailLogger.posDenominationAmountAddedToPaymentAmount(this.correlationId, denominationAmount);
                }
                else {
                    newAmount = denominationAmount;
                    this._isDenominationAdded = true;
                    Commerce.RetailLogger.posPaymentAmountSetToDenominationAmount(this.correlationId, denominationAmount);
                }
                this.setPaymentAmount(newAmount);
                if (this.paymentAmount() >= this.fullAmountDue()) {
                    return true;
                }
                return false;
            };
            PaymentMethodViewModelBase.prototype.processPaymentAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return _this.validatePaymentInfoAsync();
                }).enqueue(function () {
                    if (_this.checkForRecoveredPaymentsBeforePaymentProcessing) {
                        var checkRecoveryRequest = new Commerce.CheckForRecoveredPaymentTransactionClientRequest(_this.correlationId, _this.paymentAmount(), Commerce.Payments.TransactionReferenceAllowedActions.Read);
                        return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(checkRecoveryRequest))
                            .map(function (correlationContainer) {
                            if (Commerce.ObjectExtensions.isNullOrUndefined(correlationContainer) ||
                                correlationContainer.canceled ||
                                Commerce.ObjectExtensions.isNullOrUndefined(correlationContainer.data) ||
                                Commerce.ObjectExtensions.isNullOrUndefined(correlationContainer.data.result)) {
                                return { canceled: true };
                            }
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(correlationContainer.data.result.foundTransaction)) {
                                Commerce.RetailLogger.posOperationCanceledDueToRecoveredPayment(_this.tenderType.Name, _this.correlationId);
                                return { canceled: true };
                            }
                            return { canceled: false };
                        }));
                    }
                    return Commerce.AsyncResult.createResolved({ canceled: false });
                }).enqueue(function () {
                    return asyncQueue.cancelOn(_this.executePaymentProcessingAsync());
                });
                return asyncQueue.run();
            };
            PaymentMethodViewModelBase.prototype.barcodeScannerEventHandlerAsync = function (barcode) {
                return Commerce.VoidAsyncResult.createResolved();
            };
            PaymentMethodViewModelBase.prototype.msrEventHandlerAsync = function (cardInfo) {
                return Commerce.VoidAsyncResult.createResolved();
            };
            PaymentMethodViewModelBase.prototype.getPaymentAmountTitle = function () {
                return "string_1107";
            };
            PaymentMethodViewModelBase.prototype.initializePaymentCardChanged = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._onPaymentCardChanged)) {
                    this.updatePaymentCard(null, null);
                }
            };
            PaymentMethodViewModelBase.prototype.setPaymentAmount = function (paymentAmount) {
                var decimalPrecision = Commerce.NumberExtensions.getDecimalPrecision(this.currency());
                this.paymentAmountText(Commerce.NumberExtensions.formatNumber(paymentAmount, decimalPrecision));
            };
            Object.defineProperty(PaymentMethodViewModelBase.prototype, "isCashPayment", {
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            PaymentMethodViewModelBase.prototype.validatePaymentInfoAsync = function () {
                var _this = this;
                Commerce.RetailLogger.posValidatePaymentAmountStarted(this.correlationId, this.tenderType.OperationId, this.tenderType.OperationName, this.paymentAmountText());
                var asyncQueue = new Commerce.AsyncQueue();
                var shouldUseReturnPolicy = false;
                asyncQueue.enqueue(function () {
                    if (Commerce.ReturnHelper.returnPolicyWouldBeApplicable(Commerce.Session.instance.cart)) {
                        return Commerce.ReturnHelper.returnPolicyIsConfiguredAndApplicable(Commerce.Session.instance.cart)
                            .done(function (result) {
                            shouldUseReturnPolicy = result;
                        });
                    }
                    else {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                }).enqueue(function () {
                    var _a = _this.convertAmountsToStoreCurrency(), paymentAmount = _a[0], fullAmountDue = _a[1], errors = _a[2];
                    if (Commerce.ObjectExtensions.isNullOrUndefined(paymentAmount) || isNaN(paymentAmount)) {
                        errors = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PAYMENT_INVALID_NUMBER)];
                    }
                    else if (paymentAmount === 0
                        && !(_this.isCashPayment && fullAmountDue === 0)) {
                        errors = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PAYMENT_AMOUNT_CANNOT_BE_ZERO)];
                    }
                    else if ((fullAmountDue > 0) && (paymentAmount < 0)) {
                        errors = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PAYMENT_AMOUNT_MUST_GREATER_THAN_ZERO)];
                    }
                    else if ((fullAmountDue < 0) && (paymentAmount > 0)) {
                        errors = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PAYMENT_AMOUNT_MUST_LESS_THAN_ZERO)];
                    }
                    else if (!Commerce.Helpers.CurrencyHelper.isValidAmount(_this.paymentAmount(), _this.currency())) {
                        errors = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.INVALID_CURRENCY_AMOUNT)];
                    }
                    else if (Math.abs(fullAmountDue) < Math.abs(paymentAmount)) {
                        if (shouldUseReturnPolicy) {
                            errors = [
                                new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_REFUNDMORETHANPOLICYALLOWS)
                            ];
                        }
                        else if (!_this.tenderType.IsOvertenderAllowed) {
                            errors = [
                                new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CHANGEBACKISNOTALLOWED)
                            ];
                        }
                    }
                    if (Commerce.ObjectExtensions.isNullOrUndefined(errors)) {
                        Commerce.RetailLogger.posValidatePaymentAmountSucceeded(_this.correlationId, _this.tenderType.OperationId, _this.tenderType.OperationName, _this.paymentAmountText());
                        return Commerce.AsyncResult.createResolved();
                    }
                    else {
                        Commerce.RetailLogger.posValidatePaymentAmountFailed(_this.correlationId, _this.tenderType.OperationId, _this.tenderType.OperationName, _this.paymentAmountText(), Commerce.ErrorHelper.serializeError(errors));
                        return Commerce.AsyncResult.createRejected(errors);
                    }
                });
                return asyncQueue.run();
            };
            PaymentMethodViewModelBase.prototype.createCartTenderLine = function () {
                var tenderLine = {
                    TenderLineId: Commerce.StringExtensions.EMPTY,
                    Currency: this.currency(),
                    TenderTypeId: this.tenderType.TenderTypeId,
                    SignatureData: null,
                    Amount: this.paymentAmount(),
                    IsPolicyBypassed: this.isExemptFromReturnPolicy
                };
                return tenderLine;
            };
            PaymentMethodViewModelBase.prototype.createPreprocessedTenderLine = function (paymentInfo, cardType) {
                var cardTypeInfoId = cardType ? cardType.TypeId : Commerce.StringExtensions.EMPTY;
                var preProcessedTenderLine = {
                    Authorization: paymentInfo.PaymentSdkData,
                    CardTypeId: cardTypeInfoId,
                    Currency: Commerce.ApplicationContext.Instance.deviceConfiguration.Currency,
                    MaskedCardNumber: paymentInfo.CardNumberMasked,
                    TenderTypeId: this.tenderType.TenderTypeId
                };
                if (this.paymentAmount() >= 0) {
                    preProcessedTenderLine.CashBackAmount = paymentInfo.CashbackAmount;
                    preProcessedTenderLine.Amount = paymentInfo.ApprovedAmount;
                    preProcessedTenderLine.IsVoidable = true;
                    preProcessedTenderLine.StatusValue = Commerce.Proxy.Entities.TenderLineStatus.PendingCommit;
                }
                else {
                    preProcessedTenderLine.IsVoidable = true;
                    preProcessedTenderLine.Amount = paymentInfo.ApprovedAmount * -1;
                    preProcessedTenderLine.StatusValue = Commerce.Proxy.Entities.TenderLineStatus.Committed;
                }
                return preProcessedTenderLine;
            };
            PaymentMethodViewModelBase.prototype.addCartTenderLineToCart = function (tenderLine) {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                Commerce.RetailLogger.posPaymentAddCartTenderLineStarted(this.correlationId, this.tenderType.OperationId, this.tenderType.OperationName);
                asyncQueue.enqueue(function () {
                    var preTriggerOptions = { cart: Commerce.Session.instance.cart, tenderLine: tenderLine };
                    var preTriggerResult = Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreAddTenderLine, preTriggerOptions);
                    return asyncQueue.cancelOn(preTriggerResult);
                }).enqueue(function () {
                    var addTenderLineToCartRequest = new Commerce.AddTenderLineToCartClientRequest(tenderLine);
                    var addTenderLineToCartResponse = Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(addTenderLineToCartRequest));
                    return asyncQueue.cancelOn(addTenderLineToCartResponse);
                });
                return asyncQueue.run().done(function (result) {
                    if (!result.canceled) {
                        var addedTenderLine = Commerce.CartHelper.getLastTenderLine(Commerce.Session.instance.cart);
                        Commerce.Payments.Utilities.PaymentFeatureHelper.clearSensitiveDataOnTenderLine(addedTenderLine, Commerce.ApplicationContext.Instance.storeInformation);
                        Commerce.RetailLogger.posPaymentAddCartTenderLineSucceeded(_this.correlationId, _this.tenderType.OperationId, _this.tenderType.OperationName);
                    }
                    else {
                        Commerce.RetailLogger.posPaymentAddCartTenderLineCancelled(_this.correlationId, _this.tenderType.OperationId, _this.tenderType.OperationName);
                    }
                }).fail(function (errors) {
                    Commerce.RetailLogger.posPaymentAddCartTenderLineFailed(_this.correlationId, _this.tenderType.OperationId, _this.tenderType.OperationName, Commerce.ErrorHelper.serializeError(errors));
                });
            };
            PaymentMethodViewModelBase.prototype.addPreprocessedTenderLineToCart = function (tenderLine) {
                var _this = this;
                Commerce.RetailLogger.posPaymentAddPreprocessedTenderLineStarted(this.correlationId, this.tenderType.OperationId, this.tenderType.OperationName);
                var request = new Commerce.AddPreprocessedTenderLineToCartClientRequest(tenderLine);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                    .done(function (result) {
                    if (result.canceled) {
                        Commerce.RetailLogger.posPaymentAddPreprocessedTenderLineCancelled(_this.correlationId, _this.tenderType.OperationId, _this.tenderType.OperationName);
                    }
                    else {
                        Commerce.RetailLogger.posPaymentAddPreprocessedTenderLineSucceeded(_this.correlationId, _this.tenderType.OperationId, _this.tenderType.OperationName);
                    }
                }).fail(function (errors) {
                    Commerce.RetailLogger.posPaymentAddPreprocessedTenderLineFailed(_this.correlationId, _this.tenderType.OperationId, _this.tenderType.OperationName, Commerce.ErrorHelper.serializeError(errors));
                });
            };
            PaymentMethodViewModelBase.prototype.getSignatureAndUpdateTenderLine = function () {
                var _this = this;
                if (this._isSignatureRequiredToCompletePayment(this.tenderType, this.paymentAmount())) {
                    var tenderLineId = Commerce.CartHelper.getLastTenderLine(Commerce.Session.instance.cart).TenderLineId;
                    var request = new Commerce.Payments.GetAndUpdateTenderLineSignatureClientRequest(this.correlationId, tenderLineId);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                        .map(function (result) {
                        return { canceled: false };
                    }).recoverOnFailure(function (errors) {
                        Commerce.RetailLogger.posGetValidatedSignatureAndUpdateTenderLineFlowFailed(_this.correlationId, Commerce.ErrorHelper.serializeError(errors));
                        return Commerce.VoidAsyncResult.createResolved();
                    });
                }
                else {
                    return Commerce.VoidAsyncResult.createResolved();
                }
            };
            PaymentMethodViewModelBase.prototype.validateSignatureAndUpdateTenderLine = function (signatureData) {
                var _this = this;
                if (this._isSignatureRequiredToCompletePayment(this.tenderType, this.paymentAmount())
                    && !Commerce.StringExtensions.isNullOrWhitespace(signatureData)) {
                    var asyncQueue_4 = new Commerce.AsyncQueue();
                    var tenderLine_1 = Commerce.CartHelper.getLastTenderLine(Commerce.Session.instance.cart);
                    asyncQueue_4.enqueue(function () {
                        var request = new Commerce.Payments.ValidateAndUpdateTenderLineSignatureClientRequest(_this.correlationId, signatureData, tenderLine_1.TenderLineId);
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request));
                    }).enqueue(function (result) {
                        if (result.canceled) {
                            var options = { tenderLines: [tenderLine_1], correlationId: _this.correlationId };
                            return asyncQueue_4.cancelOn(_this.operationsManager.runOperation(Commerce.Operations.RetailOperation.VoidPayment, options));
                        }
                        else {
                            return Commerce.VoidAsyncResult.createResolved();
                        }
                    });
                    return asyncQueue_4.run()
                        .map(function () { return void 0; })
                        .recoverOnFailure(function (errors) {
                        Commerce.RetailLogger.posValidateSignatureAndUpdateTenderLineFlowFailed(_this.correlationId, Commerce.ErrorHelper.serializeError(errors));
                        return Commerce.VoidAsyncResult.createResolved();
                    });
                }
                else {
                    return Commerce.VoidAsyncResult.createResolved();
                }
            };
            PaymentMethodViewModelBase.prototype.convertAmountsToStoreCurrency = function () {
                return [this.paymentAmount(), this.fullAmountDue(), null];
            };
            PaymentMethodViewModelBase.prototype.updatePaymentCard = function (cardInfo, cardSource) {
                var paymentCard = this.createEmptyPaymentCard();
                if (!Commerce.ObjectExtensions.isNullOrUndefined(cardInfo)) {
                    var isManual = cardSource === Commerce.Proxy.Entities.CardSource.Manual || cardSource === Commerce.Proxy.Entities.CardSource.Unknown;
                    paymentCard.CardNumber = cardInfo.CardNumber;
                    paymentCard.ExpirationMonth = cardInfo.ExpirationMonth;
                    paymentCard.ExpirationYear = ((cardInfo.ExpirationYear < 100) && (cardInfo.ExpirationYear >= 0))
                        ? cardInfo.ExpirationYear + 2000 : cardInfo.ExpirationYear;
                    paymentCard.Track1 = cardInfo.Track1;
                    paymentCard.Track2 = cardInfo.Track2;
                    paymentCard.Track3 = cardInfo.Track3;
                    paymentCard.EncryptedPin = cardInfo.EncryptedPin;
                    paymentCard.AdditionalSecurityData = cardInfo.AdditionalSecurityData;
                    paymentCard.IsSwipe = !isManual;
                }
                else {
                    paymentCard.CardNumber = Commerce.StringExtensions.EMPTY;
                    var date = new Date();
                    paymentCard.ExpirationMonth = date.getMonth() + 1;
                    paymentCard.ExpirationYear = date.getFullYear();
                    paymentCard.Track1 = Commerce.StringExtensions.EMPTY;
                    paymentCard.Track2 = Commerce.StringExtensions.EMPTY;
                    paymentCard.Track3 = Commerce.StringExtensions.EMPTY;
                    paymentCard.EncryptedPin = Commerce.StringExtensions.EMPTY;
                    paymentCard.AdditionalSecurityData = Commerce.StringExtensions.EMPTY;
                    paymentCard.IsSwipe = false;
                }
                this.notifyOnPaymentCardChanged(paymentCard);
                return paymentCard;
            };
            PaymentMethodViewModelBase.prototype.notifyOnPaymentCardChanged = function (paymentCard) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._onPaymentCardChanged)) {
                    var paymentCardProxy = ViewModels.Utilities.ObservableProxyHelper.cloneToObservableProxyObject(paymentCard);
                    this._onPaymentCardChanged(paymentCardProxy);
                }
            };
            PaymentMethodViewModelBase.prototype.createEmptyPaymentCard = function () {
                var date = new Date();
                var paymentCard = {
                    UseShippingAddress: false,
                    Address1: Commerce.StringExtensions.EMPTY,
                    Country: Commerce.Payments.Utilities.PaymentFeatureHelper.getStoreCountryRegionISOCode(Commerce.ApplicationContext.Instance.storeInformation),
                    Zip: Commerce.StringExtensions.EMPTY,
                    CardNumber: Commerce.StringExtensions.EMPTY,
                    CCID: Commerce.StringExtensions.EMPTY,
                    ExpirationMonth: date.getMonth() + 1,
                    ExpirationYear: date.getFullYear(),
                    Track1: Commerce.StringExtensions.EMPTY,
                    Track2: Commerce.StringExtensions.EMPTY,
                    Track3: Commerce.StringExtensions.EMPTY,
                    EncryptedPin: Commerce.StringExtensions.EMPTY,
                    AdditionalSecurityData: Commerce.StringExtensions.EMPTY,
                    IsSwipe: false,
                    VoiceAuthorizationCode: Commerce.StringExtensions.EMPTY
                };
                return paymentCard;
            };
            PaymentMethodViewModelBase.prototype._isSignatureRequiredToCompletePayment = function (tenderType, paymentAmount) {
                var result = false;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(tenderType) && !isNaN(paymentAmount)) {
                    result = tenderType.UseSignatureCaptureDevice &&
                        Math.abs(paymentAmount) >= tenderType.MinimumSignatureCaptureAmount;
                }
                return result;
            };
            PaymentMethodViewModelBase.prototype._roundAmountsAndUpdateLineDisplayAsync = function (amount) {
                var _this = this;
                if (this.isCurrencyPayment) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return _this.paymentManager.roundAmountByTenderType(amount, _this.tenderType.TenderTypeId);
                }).enqueue(function (roundedAmount) {
                    _this.fullAmountDue(roundedAmount);
                    _this.setPaymentAmount(roundedAmount);
                    return _this.paymentManager.roundAmountByTenderType(Commerce.Session.instance.cart.TotalAmount, _this.tenderType.TenderTypeId);
                }).enqueue(function (roundedTotalAmount) {
                    return Commerce.Peripherals.HardwareStation.LineDisplayHelper.displayBalance(_this.correlationId, roundedTotalAmount, _this.fullAmountDue());
                });
                return asyncQueue.run().map(function () { return void 0; });
            };
            return PaymentMethodViewModelBase;
        }(ViewModels.ViewModelBase));
        ViewModels.PaymentMethodViewModelBase = PaymentMethodViewModelBase;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var CardInputOption;
        (function (CardInputOption) {
            CardInputOption[CardInputOption["Swipe"] = 0] = "Swipe";
            CardInputOption[CardInputOption["Manual"] = 1] = "Manual";
            CardInputOption[CardInputOption["VoiceAuth"] = 2] = "VoiceAuth";
        })(CardInputOption = ViewModels.CardInputOption || (ViewModels.CardInputOption = {}));
        var PayCardPaymentMethodViewModel = (function (_super) {
            __extends(PayCardPaymentMethodViewModel, _super);
            function PayCardPaymentMethodViewModel(context, options) {
                var _this = _super.call(this, context, options) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.cardPaymentOptions)) {
                    throw new Error("Invalid options passed to the PayCardPaymentMethodViewModel constructor: cardPaymentOptions cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.onPaymentCardChanged)) {
                    throw new Error("Invalid options passed to the PayCardPaymentMethodViewModel constructor: onPaymentCardChanged cannot be null or undefined.");
                }
                _this._cardTypeSelectedForTenderDiscount =
                    !Commerce.ObjectExtensions.isNullOrUndefined(options.cardPaymentOptions.cardTypeSelectedForTenderDiscount) ?
                        options.cardPaymentOptions.cardTypeSelectedForTenderDiscount : null;
                _this.isTokenizePayment = options.cardPaymentOptions.isTokenizePayment || false;
                _this.cardPaymentAcceptPageUrl = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.isCardPaymentAcceptPageEnabled = ko.computed(function () {
                    return !Commerce.StringExtensions.isNullOrWhitespace(_this.cardPaymentAcceptPageUrl());
                });
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options.cardPaymentOptions.cardPaymentAcceptPoint)) {
                    _this._cardPaymentAcceptPoint = options.cardPaymentOptions.cardPaymentAcceptPoint;
                    _this._sendMessageToCardPaymentAcceptPage = options.cardPaymentOptions.sendMessageToCardPaymentAcceptPage;
                    _this._getStylizedCardPaymentAcceptPageUrl = options.cardPaymentOptions.getStylizedCardPaymentAcceptPageUrl;
                }
                _this._cardType = null;
                _this.cardNumber = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.maskedCardNumber = ko.computed(function () {
                    return Commerce.Payments.Utilities.PaymentFeatureHelper.getMaskedNumber(_this.cardNumber(), true);
                });
                _this.tokenizedPaymentCard = null;
                _this.cardInputOptionsList = ko.observableArray(_this._getCardInputOptions());
                _this.selectedCardInputOption = ko.observable(CardInputOption.Swipe);
                _this.isSwipeInputEnabled = ko.computed(function () {
                    return _this.selectedCardInputOption() === CardInputOption.Swipe;
                });
                _this.isManualInputEnabled = ko.computed(function () {
                    return _this.selectedCardInputOption() === CardInputOption.Manual;
                });
                _this.isVoiceAuthInputEnabled = ko.computed(function () {
                    return _this.selectedCardInputOption() === CardInputOption.VoiceAuth;
                });
                _this._selectedCardInputOptionSubscription = _this.selectedCardInputOption.subscribe(_this._clearCardFields, _this);
                _this.paymentCard = ViewModels.Utilities.ObservableProxyHelper.cloneToSimpleObservableProxyObject(_this.createEmptyPaymentCard());
                _this._updateCardInfo(null, null);
                return _this;
            }
            Object.defineProperty(PayCardPaymentMethodViewModel.prototype, "checkForRecoveredPaymentsBeforePaymentProcessing", {
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            PayCardPaymentMethodViewModel.prototype.afterBind = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._cardPaymentAcceptPoint) && Commerce.StringExtensions.isNullOrWhitespace(this.cardPaymentAcceptPageUrl())) {
                    var updatedPaymentAcceptUrl = this._getStylizedCardPaymentAcceptPageUrl(this._cardPaymentAcceptPoint.AcceptPageUrl, this._cardPaymentAcceptPoint.AcceptPageSubmitUrl);
                    this.cardPaymentAcceptPageUrl(updatedPaymentAcceptUrl);
                    Commerce.RetailLogger.posCardPaymentAcceptPageUrlInitialized(this.correlationId);
                }
            };
            PayCardPaymentMethodViewModel.prototype.dispose = function () {
                this._selectedCardInputOptionSubscription.dispose();
                _super.prototype.dispose.call(this);
            };
            Object.defineProperty(PayCardPaymentMethodViewModel.prototype, "isCardPayment", {
                get: function () {
                    return this instanceof PayCardPaymentMethodViewModel;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PayCardPaymentMethodViewModel.prototype, "isPaymentAmountEditable", {
                get: function () {
                    return !this.isTokenizePayment;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PayCardPaymentMethodViewModel.prototype, "arePaymentDetailsAvailable", {
                get: function () {
                    return this.isCardPayment
                        && !(Commerce.Peripherals.HardwareStation.HardwareStationContext.instance.isActive() && this.tenderType.HideCardInputDetails);
                },
                enumerable: true,
                configurable: true
            });
            PayCardPaymentMethodViewModel.prototype.msrEventHandlerAsync = function (cardInfo) {
                var _this = this;
                if (this.isCardPaymentAcceptPageEnabled()) {
                    var swipe = cardInfo.Track1 + cardInfo.Track2;
                    this._sendCardPaymentAcceptSwipeMessage(swipe);
                    return Commerce.VoidAsyncResult.createResolved();
                }
                else if (!this.isManualInputEnabled()) {
                    this._updateCardInfo(cardInfo, Commerce.Proxy.Entities.CardSource.MSR);
                    return this._getCardTypeAsync().done(function (result) {
                        if (!result.canceled) {
                            _this._cardType = result.data;
                        }
                    });
                }
                else {
                    return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error("string_7207")]);
                }
            };
            PayCardPaymentMethodViewModel.prototype.getPaymentAmountTitle = function () {
                return this.isTokenizePayment ? "string_1173" : "string_1107";
            };
            PayCardPaymentMethodViewModel.prototype.viewDisclaimerAsync = function () {
                Commerce.RetailLogger.posPaymentUIButtonClicked(this.correlationId, "PaymentView", "Card payment accept page view disclaimer");
                var viewDisclaimerActivity = new Commerce.Activities.DisplayPaymentMessageDialogActivity({
                    title: Commerce.ViewModelAdapter.getResourceString("string_7213"),
                    messageText: Commerce.ViewModelAdapter.getResourceString("string_7214"),
                    buttonText: Commerce.ViewModelAdapter.getResourceString("string_80")
                });
                return viewDisclaimerActivity.execute();
            };
            PayCardPaymentMethodViewModel.prototype.cardPaymentAcceptPageMessageHandler = function (eventInfo) {
                var _this = this;
                if (!this.isCardPaymentAcceptPageEnabled()
                    || Commerce.StringExtensions.isNullOrWhitespace(this._cardPaymentAcceptPoint.MessageOrigin)
                    || Commerce.ObjectExtensions.isNullOrUndefined(eventInfo)
                    || this._cardPaymentAcceptPoint.MessageOrigin.indexOf(eventInfo.origin) !== 0) {
                    return;
                }
                var message = eventInfo.data;
                if (Commerce.ObjectExtensions.isString(message) && !Commerce.StringExtensions.isNullOrWhitespace(message)) {
                    var messageObject = JSON.parse(message);
                    Commerce.RetailLogger.posCardPaymentAcceptPageMessageReceived(this.correlationId, messageObject.type);
                    switch (messageObject.type) {
                        case PayCardPaymentMethodViewModel.CARDPAYMENTACCEPTCARDPREFIX:
                            this._cardPaymentAcceptPageCardPrefix = messageObject.value;
                            break;
                        case PayCardPaymentMethodViewModel.CARDPAYMENTACCEPTERROR:
                            var paymentErrors = messageObject.value;
                            var errorsToDisplay = paymentErrors.filter(function (paymentError) {
                                return !Commerce.ObjectExtensions.isNullOrUndefined(paymentError) && !Commerce.ObjectExtensions.isNullOrUndefined(paymentError.Code);
                            }).map(function (paymentError) {
                                return new Commerce.Proxy.Entities.Error(paymentError.Code.toString(), false, paymentError.Message);
                            });
                            errorsToDisplay = Commerce.Payments.Utilities.PaymentViewModelErrorHelper.ConvertToClientErrors(errorsToDisplay);
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(this._cardPaymentAcceptPageAsyncResult)) {
                                this._cardPaymentAcceptPageAsyncResult.reject(errorsToDisplay);
                            }
                            else {
                                Commerce.NotificationHandler.displayClientErrors(errorsToDisplay);
                            }
                            break;
                        case PayCardPaymentMethodViewModel.CARDPAYMENTACCEPTPARTIALAMOUNT:
                            var approvedAmount = Commerce.NumberExtensions.parseNumber(messageObject.value);
                            var approvePartialAmountActivityContext = {
                                amountAuthorized: approvedAmount,
                                amountRequested: this.paymentAmount(),
                                amountAuthorizedCurrencyCode: this.currency(),
                                amountRequestedCurrencyCode: this.currency(),
                                correlationId: this.correlationId
                            };
                            var approvePartialAmountActivity_1 = new Commerce.Activities.ApprovePartialAmountActivity(approvePartialAmountActivityContext);
                            approvePartialAmountActivity_1.execute()
                                .done(function () {
                                var isPartialAmountApproved = !Commerce.ObjectExtensions.isNullOrUndefined(approvePartialAmountActivity_1.response)
                                    && approvePartialAmountActivity_1.response.isApproved;
                                if (isPartialAmountApproved) {
                                    Commerce.RetailLogger.posCardPaymentAcceptPagePartialPaymentApproved(_this.correlationId);
                                }
                                else {
                                    Commerce.RetailLogger.posCardPaymentAcceptPagePartialPaymentDeclined(_this.correlationId);
                                }
                                var cardPaymentAcceptMessage = {
                                    type: PayCardPaymentMethodViewModel.CARDPAYMENTACCEPTPARTIALOK,
                                    value: isPartialAmountApproved.toString()
                                };
                                _this._sendMessageToCardPaymentAcceptPage(JSON.stringify(cardPaymentAcceptMessage), _this._cardPaymentAcceptPoint.MessageOrigin);
                            }).fail(function (errors) {
                                Commerce.RetailLogger.posCardPaymentAcceptPagePartialPaymentFailed(_this.correlationId, Commerce.ErrorHelper.serializeError(errors));
                                if (!Commerce.ObjectExtensions.isNullOrUndefined(_this._cardPaymentAcceptPageAsyncResult)) {
                                    _this._cardPaymentAcceptPageAsyncResult.reject(errors);
                                }
                            });
                            break;
                        case PayCardPaymentMethodViewModel.CARDPAYMENTACCEPTRESULT:
                            this._cardPaymentAcceptPageResultAccessCode = messageObject.value;
                            this._retrieveCardPaymentAcceptPageResultAsync(this._cardPaymentAcceptPageResultAccessCode)
                                .done(function (result) {
                                if (!Commerce.ObjectExtensions.isNullOrUndefined(_this._cardPaymentAcceptPageAsyncResult)) {
                                    _this._cardPaymentAcceptPageAsyncResult.resolve({ canceled: result.canceled });
                                }
                            }).fail(function (errors) {
                                if (!Commerce.ObjectExtensions.isNullOrUndefined(_this._cardPaymentAcceptPageAsyncResult)) {
                                    _this._cardPaymentAcceptPageAsyncResult.reject(errors);
                                }
                            });
                            break;
                        default:
                    }
                }
            };
            PayCardPaymentMethodViewModel.prototype.loadPaymentMethodAsync = function () {
                return Commerce.AsyncResult.createResolved();
            };
            PayCardPaymentMethodViewModel.prototype.validatePaymentInfoAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return _super.prototype.validatePaymentInfoAsync.call(_this);
                }).enqueue(function () {
                    return _this._canProcessPaymentWithPaymentTerminal();
                }).enqueue(function (canProcessPaymentWithPaymentTerminal) {
                    if (canProcessPaymentWithPaymentTerminal || _this.isCardPaymentAcceptPageEnabled()) {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                    var isCardDataAvailable = _this._cardSource !== Commerce.Proxy.Entities.CardSource.Unknown;
                    if (!isCardDataAvailable && _this.isSwipeInputEnabled()) {
                        return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error("string_7200")]);
                    }
                    if (!isCardDataAvailable && !_this.isSwipeInputEnabled()) {
                        var cardInfo = {
                            CardNumber: _this.cardNumber(),
                            ExpirationMonth: _this.paymentCard().ExpirationMonth(),
                            ExpirationYear: _this.paymentCard().ExpirationYear(),
                            CCID: _this.paymentCard().CCID(),
                            VoiceAuthorizationCode: _this.paymentCard().VoiceAuthorizationCode(),
                            Address1: _this.paymentCard().Address1(),
                            Zip: _this.paymentCard().Zip()
                        };
                        _this._updateCardInfo(cardInfo, Commerce.Proxy.Entities.CardSource.Manual);
                    }
                    if ((!_this.isSwipeInputEnabled() && Commerce.StringExtensions.isNullOrWhitespace(_this.cardNumber()))
                        || (_this.isVoiceAuthInputEnabled() && Commerce.StringExtensions.isNullOrWhitespace(_this.paymentCard().VoiceAuthorizationCode()))) {
                        return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error("string_1166")]);
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                });
                return asyncQueue.run();
            };
            PayCardPaymentMethodViewModel.prototype.executePaymentProcessingAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                var getSignature = false;
                asyncQueue.enqueue(function () {
                    return _this._canProcessPaymentWithPaymentTerminal();
                }).enqueue(function (canProcessPayment) {
                    if (_this.isCardPaymentAcceptPageEnabled()) {
                        Commerce.RetailLogger.posProcessingPayCardUsingCardPaymentAcceptPage(_this.correlationId);
                        return asyncQueue.cancelOn(_this._processByCardPaymentAcceptPageAsync());
                    }
                    else if (_this.isTokenizePayment) {
                        Commerce.RetailLogger.posProcessingPayCardUsingPaymentTerminalTokenize(_this.correlationId);
                        return asyncQueue.cancelOn(_this._processByPaymentTerminalTokenizeAsync());
                    }
                    else if (canProcessPayment) {
                        Commerce.RetailLogger.posProcessingPayCardUsingPaymentTerminal(_this.correlationId);
                        return asyncQueue.cancelOn(_this._processByPaymentTerminalAsync());
                    }
                    else {
                        Commerce.RetailLogger.posProcessingPayCardUsingCardPayment(_this.correlationId);
                        getSignature = true;
                        return asyncQueue.cancelOn(_this._processByCardPaymentAsync());
                    }
                }).enqueue(function () {
                    if (getSignature) {
                        return _this.getSignatureAndUpdateTenderLine();
                    }
                    else {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                });
                return asyncQueue.run();
            };
            PayCardPaymentMethodViewModel.prototype._createTokenizedPaymentCardResult = function (fetchTokenPaymentInfo, tenderType) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(fetchTokenPaymentInfo) && fetchTokenPaymentInfo.IsApproved) {
                    var tokenString = fetchTokenPaymentInfo.PaymentSdkData.substring(36);
                    var tokenId = fetchTokenPaymentInfo.PaymentSdkData.substring(0, 36);
                    var cardTokenInfo = {
                        CardToken: tokenString,
                        MaskedCardNumber: fetchTokenPaymentInfo.CardNumberMasked,
                        ServiceAccountId: Commerce.ApplicationContext.Instance.hardwareProfile.EftCompanyId,
                        UniqueCardId: tokenId
                    };
                    var tokenizedPaymentCard = {
                        TenderType: tenderType,
                        CardTokenInfo: cardTokenInfo
                    };
                    return { canceled: false, data: tokenizedPaymentCard };
                }
                else {
                    return { canceled: true, data: null };
                }
            };
            PayCardPaymentMethodViewModel.prototype._processByPaymentTerminalTokenizeAsync = function () {
                var _this = this;
                Commerce.RetailLogger.posTokenizePaymentCardStarted(this.correlationId);
                var paymentTerminalMessageActivity = new Commerce.Activities.DisplayPaymentMessageDialogActivity({
                    title: Commerce.ViewModelAdapter.getResourceString("string_6908"),
                    messageText: Commerce.ViewModelAdapter.getResourceString("string_1174"),
                    buttonText: Commerce.ViewModelAdapter.getResourceString("string_76")
                });
                paymentTerminalMessageActivity.execute();
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var request = new Commerce.PaymentTerminalFetchTokenPeripheralRequest(_this.correlationId, _this.isManualInputEnabled(), null);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                        .recoverOnFailure(function (errors) {
                        Commerce.RetailLogger.posTokenizePaymentCardFailed(_this.correlationId, Commerce.ErrorHelper.serializeError(errors));
                        return Commerce.AsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.HARDWARESTATION_BALANCE_TOKEN_ERROR)]);
                    });
                }).enqueue(function (response) {
                    var tokenizedPaymentCardResult = response.canceled
                        ? undefined
                        : _this._createTokenizedPaymentCardResult(response.data.paymentInfo, _this.tenderType.TenderTypeId);
                    if (Commerce.ObjectExtensions.isNullOrUndefined(tokenizedPaymentCardResult)) {
                        Commerce.RetailLogger.posTokenizePaymentCardCancelled(_this.correlationId);
                        return Commerce.AsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.HARDWARESTATION_BALANCE_TOKEN_ERROR)]);
                    }
                    else {
                        Commerce.RetailLogger.posTokenizePaymentCardSucceeded(_this.correlationId);
                        _this.tokenizedPaymentCard = tokenizedPaymentCardResult.data;
                        return Commerce.AsyncResult.createResolved({ canceled: false, data: tokenizedPaymentCardResult.data });
                    }
                });
                return asyncQueue.run()
                    .always(function () {
                    paymentTerminalMessageActivity.cancel();
                });
            };
            PayCardPaymentMethodViewModel.prototype._processByCardPaymentAcceptPageAsync = function () {
                var _this = this;
                if (!Commerce.StringExtensions.isNullOrWhitespace(this._cardPaymentAcceptPageResultAccessCode)) {
                    return this._retrieveCardPaymentAcceptPageResultAsync(this._cardPaymentAcceptPageResultAccessCode);
                }
                this._cardPaymentAcceptPageAsyncResult = new Commerce.AsyncResult();
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return asyncQueue.cancelOn(_this._submitCardPaymentAcceptPagePaymentAsync());
                }).enqueue(function () {
                    return asyncQueue.cancelOn(_this._cardPaymentAcceptPageAsyncResult.always(function () {
                        _this._cardPaymentAcceptPageAsyncResult = null;
                    }));
                });
                return asyncQueue.run();
            };
            PayCardPaymentMethodViewModel.prototype._processByPaymentTerminalAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                if (Commerce.StringExtensions.isNullOrWhitespace(Commerce.Peripherals.instance.paymentTerminal.lockToken)) {
                    Commerce.RetailLogger.paymentTerminalLockTokenIsNotObtained(this.correlationId);
                    asyncQueue.enqueue(function () {
                        var obtainLockRequest = new Commerce.Peripherals.PaymentTerminalObtainLockRequest(_this.correlationId);
                        return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(obtainLockRequest)));
                    });
                }
                asyncQueue.enqueue(function () {
                    return asyncQueue.cancelOn(Commerce.ErrorHandler.isCartVersionValid()
                        .recoverOnFailure(function (errors) {
                        Commerce.ErrorHandler.cartVersionErrorHandler(errors, true);
                        return Commerce.AsyncResult.createResolved({ canceled: true });
                    }));
                }).enqueue(function () {
                    var authRefundRequest = new Commerce.Payments.AuthorizeOrRefundPaymentClientRequest(_this.correlationId, _this.currency(), _this.isManualInputEnabled(), _this.isSwipeInputEnabled(), _this.paymentAmount(), Commerce.Proxy.Entities.PeripheralPaymentType.PaymentTerminal, null, _this.tenderType, null, _this.paymentCard().VoiceAuthorizationCode(), false, _this._cardTypeSelectedForTenderDiscount, _this.isExemptFromReturnPolicy);
                    return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(authRefundRequest)));
                }).enqueue(function (result) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(result.data.result)) {
                        var paymentInfo = result.data.result;
                        var cardInfo = {
                            CardNumber: paymentInfo.CardNumberMasked,
                            CardTypeId: paymentInfo.CardType.toString()
                        };
                        _this._updateCardInfo(cardInfo, Commerce.Proxy.Entities.CardSource.PaymentTerminal);
                        return _this.validateSignatureAndUpdateTenderLine(paymentInfo.SignatureData);
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                });
                return asyncQueue.run();
            };
            PayCardPaymentMethodViewModel.prototype._processByCardPaymentAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                var tenderInfo = null;
                asyncQueue.enqueue(function () {
                    if (_this.isManualInputEnabled()
                        || Commerce.ObjectExtensions.isNullOrUndefined(_this._cardType)
                        || Commerce.ObjectExtensions.isNullOrUndefined(_this._cardInfo)) {
                        return _this._getCardTypeAsync().done(function (result) {
                            if (!result.canceled) {
                                _this._cardType = result.data;
                            }
                        });
                    }
                    else {
                        return Commerce.AsyncResult.createResolved({ canceled: false });
                    }
                }).enqueue(function () {
                    if (_this._cardType.CardTypeValue !== Commerce.Proxy.Entities.CardType.InternationalCreditCard
                        && _this._cardType.CardTypeValue !== Commerce.Proxy.Entities.CardType.CorporateCard
                        && _this._cardType.CardTypeValue !== Commerce.Proxy.Entities.CardType.InternationalDebitCard) {
                        return Commerce.AsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PAYMENT_CARD_NOT_SUPPORTED)]);
                    }
                    var request = new Commerce.Payments.ComposeTenderInfoForCardPaymentClientRequest(_this.correlationId, _this._cardType, _this.currency(), _this.paymentAmount(), ViewModels.Utilities.ObservableProxyHelper.unwrapSimpleObservableProxyObject(_this.paymentCard), _this.tenderType.TenderTypeId);
                    return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request)))
                        .done(function (result) {
                        tenderInfo = result.canceled ? null : result.data.result;
                    });
                }).enqueue(function () {
                    return asyncQueue.cancelOn(Commerce.ErrorHandler.isCartVersionValid()
                        .recoverOnFailure(function (errors) {
                        Commerce.ErrorHandler.cartVersionErrorHandler(errors, true);
                        return Commerce.AsyncResult.createResolved({ canceled: true });
                    }));
                }).enqueue(function () {
                    var request = new Commerce.Payments.AuthorizeOrRefundPaymentClientRequest(_this.correlationId, _this.currency(), _this.isManualInputEnabled(), _this.isSwipeInputEnabled(), _this.paymentAmount(), Commerce.Proxy.Entities.PeripheralPaymentType.CardPaymentController, tenderInfo, _this.tenderType, _this._cardType, null, false, _this._cardTypeSelectedForTenderDiscount);
                    return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request)));
                });
                return asyncQueue.run();
            };
            PayCardPaymentMethodViewModel.prototype._updateCardInfo = function (cardInfo, cardSource) {
                this._cardInfo = cardInfo;
                this._cardSource = cardSource || Commerce.Proxy.Entities.CardSource.Unknown;
                var newCardNumber = Commerce.ObjectExtensions.isNullOrUndefined(this._cardInfo) ? Commerce.StringExtensions.EMPTY : this._cardInfo.CardNumber;
                this.cardNumber(newCardNumber);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._cardInfo)) {
                    var isManual = this._cardSource === Commerce.Proxy.Entities.CardSource.Manual || this._cardSource === Commerce.Proxy.Entities.CardSource.Unknown;
                    this.paymentCard().CardNumber(this._cardInfo.CardNumber);
                    this.paymentCard().ExpirationMonth(this._cardInfo.ExpirationMonth);
                    this.paymentCard().ExpirationYear(((this._cardInfo.ExpirationYear < 100) && (this._cardInfo.ExpirationYear >= 0))
                        ? this._cardInfo.ExpirationYear + 2000 : this._cardInfo.ExpirationYear);
                    this.paymentCard().Track1(this._cardInfo.Track1);
                    this.paymentCard().Track2(this._cardInfo.Track2);
                    this.paymentCard().Track3(this._cardInfo.Track3);
                    this.paymentCard().EncryptedPin(this._cardInfo.EncryptedPin);
                    this.paymentCard().AdditionalSecurityData(this._cardInfo.AdditionalSecurityData);
                    this.paymentCard().IsSwipe(!isManual);
                }
                else {
                    this.paymentCard().CardNumber(Commerce.StringExtensions.EMPTY);
                    var date = new Date();
                    this.paymentCard().ExpirationMonth(date.getMonth() + 1);
                    this.paymentCard().ExpirationYear(date.getFullYear());
                    this.paymentCard().Track1(Commerce.StringExtensions.EMPTY);
                    this.paymentCard().Track2(Commerce.StringExtensions.EMPTY);
                    this.paymentCard().Track3(Commerce.StringExtensions.EMPTY);
                    this.paymentCard().EncryptedPin(Commerce.StringExtensions.EMPTY);
                    this.paymentCard().AdditionalSecurityData(Commerce.StringExtensions.EMPTY);
                    this.paymentCard().IsSwipe(false);
                }
                var unwrappedPaymentCard = ViewModels.Utilities.ObservableProxyHelper.unwrapSimpleObservableProxyObject(this.paymentCard);
                this.notifyOnPaymentCardChanged(unwrappedPaymentCard);
            };
            PayCardPaymentMethodViewModel.prototype._getCardTypeAsync = function () {
                var cardNumber = this.isCardPaymentAcceptPageEnabled() ? this._cardPaymentAcceptPageCardPrefix : this.paymentCard().CardNumber();
                var request = new Commerce.Payments.GetCardTypeClientRequest(this.correlationId, this.tenderType, cardNumber, this._cardInfo, this.isSwipeInputEnabled(), this.isCardPaymentAcceptPageEnabled(), this._cardTypeSelectedForTenderDiscount);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                    .map(function (result) {
                    return { canceled: result.canceled, data: result.canceled ? null : result.data.result };
                });
            };
            PayCardPaymentMethodViewModel.prototype._getCardInputOptions = function () {
                var swipe = {
                    caption: Commerce.ViewModelAdapter.getResourceString("string_1182"),
                    value: CardInputOption.Swipe
                };
                var manual = {
                    caption: Commerce.ViewModelAdapter.getResourceString("string_1127"),
                    value: CardInputOption.Manual
                };
                if (this.isTokenizePayment) {
                    return [swipe, manual];
                }
                else {
                    var voice = {
                        caption: Commerce.ViewModelAdapter.getResourceString("string_1183"),
                        value: CardInputOption.VoiceAuth
                    };
                    return [swipe, manual, voice];
                }
            };
            PayCardPaymentMethodViewModel.prototype._clearCardFields = function () {
                this.paymentCard().UseShippingAddress(false);
                this.paymentCard().Address1(Commerce.StringExtensions.EMPTY);
                this.paymentCard().Zip(Commerce.StringExtensions.EMPTY);
                this.paymentCard().Country(Commerce.Payments.Utilities.PaymentFeatureHelper.getStoreCountryRegionISOCode(Commerce.ApplicationContext.Instance.storeInformation));
                this.paymentCard().CardNumber(Commerce.StringExtensions.EMPTY);
                this.paymentCard().CCID(Commerce.StringExtensions.EMPTY);
                this.paymentCard().Track1(Commerce.StringExtensions.EMPTY);
                this.paymentCard().Track2(Commerce.StringExtensions.EMPTY);
                this.paymentCard().IsSwipe(false);
                this.paymentCard().VoiceAuthorizationCode(Commerce.StringExtensions.EMPTY);
                var date = new Date();
                this.paymentCard().ExpirationMonth(date.getMonth() + 1);
                this.paymentCard().ExpirationYear(date.getFullYear());
                this.cardNumber(Commerce.StringExtensions.EMPTY);
                this._cardType = null;
                this._updateCardInfo(null, null);
            };
            PayCardPaymentMethodViewModel.prototype._canProcessPaymentWithPaymentTerminal = function () {
                var _this = this;
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(new Commerce.Peripherals.HardwareStation.IsPaymentTerminalAvailableClientRequest(Commerce.Utilities.GuidHelper.newGuid())))
                    .map(function (result) {
                    return result.data.result.isAvailable &&
                        (_this._cardSource === Commerce.Proxy.Entities.CardSource.Unknown || _this._cardSource === Commerce.Proxy.Entities.CardSource.PaymentTerminal);
                });
            };
            PayCardPaymentMethodViewModel.prototype._sendCardPaymentAcceptSwipeMessage = function (swipeData) {
                if (Commerce.StringExtensions.isNullOrWhitespace(swipeData) || Commerce.StringExtensions.isNullOrWhitespace(this._cardPaymentAcceptPoint.MessageOrigin)) {
                    return;
                }
                var cardPaymentAcceptMessage = {
                    type: PayCardPaymentMethodViewModel.CARDPAYMENTACCEPTSWIPE,
                    value: swipeData
                };
                this._sendMessageToCardPaymentAcceptPage(JSON.stringify(cardPaymentAcceptMessage), this._cardPaymentAcceptPoint.MessageOrigin);
            };
            PayCardPaymentMethodViewModel.prototype._submitCardPaymentAcceptPagePaymentAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                if (!Commerce.StringExtensions.isNullOrWhitespace(this._cardPaymentAcceptPageCardPrefix)) {
                    asyncQueue.enqueue(function () {
                        return asyncQueue.cancelOn(_this._getCardTypeAsync()
                            .done(function (result) {
                            _this._cardType = result.canceled ? null : result.data;
                        }));
                    }).enqueue(function () {
                        if (!_this.isTokenizePayment && _this.paymentAmount() >= 0) {
                            var tenderLineToValidate = {
                                Amount: _this.paymentAmount(),
                                Currency: _this.currency(),
                                TenderTypeId: _this.tenderType.TenderTypeId,
                                CardTypeId: _this._cardType.TypeId
                            };
                            return _this.cartManager.validateTenderLineForAddAsync(tenderLineToValidate);
                        }
                        else {
                            return Commerce.VoidAsyncResult.createResolved();
                        }
                    });
                }
                asyncQueue.enqueue(function () {
                    if (!Commerce.StringExtensions.isNullOrWhitespace(_this._cardPaymentAcceptPoint.AcceptPageSubmitUrl)) {
                        Commerce.RetailLogger.posCardPaymentAcceptPageSubmitPaymentUsingUrl(_this.correlationId);
                        var submitUrl = _this._cardPaymentAcceptPoint.AcceptPageSubmitUrl;
                        var currentDate = new Date();
                        submitUrl = Commerce.StringExtensions.format(PayCardPaymentMethodViewModel.CARDPAYMENTACCEPTSUBMITURLFORMAT, submitUrl, currentDate.getTime());
                        _this.cardPaymentAcceptPageUrl(submitUrl);
                    }
                    else if (!Commerce.StringExtensions.isNullOrWhitespace(_this._cardPaymentAcceptPoint.MessageOrigin)) {
                        Commerce.RetailLogger.posCardPaymentAcceptPageSubmitPaymentUsingMessage(_this.correlationId);
                        var cardPaymentAcceptMessage = void 0;
                        if (!_this.isTokenizePayment && _this.paymentAmount() >= 0) {
                            cardPaymentAcceptMessage = {
                                type: PayCardPaymentMethodViewModel.CARDPAYMENTACCEPTAMOUNT,
                                value: _this.paymentAmount().toString()
                            };
                        }
                        _this._sendMessageToCardPaymentAcceptPage(JSON.stringify(cardPaymentAcceptMessage), _this._cardPaymentAcceptPoint.MessageOrigin);
                        cardPaymentAcceptMessage = {
                            type: PayCardPaymentMethodViewModel.CARDPAYMENTACCEPTSUBMIT,
                            value: "true"
                        };
                        _this._sendMessageToCardPaymentAcceptPage(JSON.stringify(cardPaymentAcceptMessage), _this._cardPaymentAcceptPoint.MessageOrigin);
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                });
                return asyncQueue.run();
            };
            PayCardPaymentMethodViewModel.prototype._retrieveCardPaymentAcceptPageResultAsync = function (resultAccessCode) {
                var _this = this;
                var request = new Commerce.Payments.GetAndProcessCardPaymentAcceptPageResultClientRequest(this.correlationId, this.isTokenizePayment, this.paymentAmount(), resultAccessCode, this.tenderType, this._cardType, this._cardTypeSelectedForTenderDiscount, this.isExemptFromReturnPolicy);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                    .map(function (result) {
                    if (_this.isTokenizePayment && !result.canceled) {
                        _this.tokenizedPaymentCard = result.data.result.TokenizedPaymentCard;
                    }
                    return { canceled: result.canceled, data: result.canceled ? null : result.data.result };
                });
            };
            PayCardPaymentMethodViewModel.CARDPAYMENTACCEPTSWIPE = "msax-cc-swipe";
            PayCardPaymentMethodViewModel.CARDPAYMENTACCEPTPARTIALOK = "msax-cc-partialok";
            PayCardPaymentMethodViewModel.CARDPAYMENTACCEPTAMOUNT = "msax-cc-amount";
            PayCardPaymentMethodViewModel.CARDPAYMENTACCEPTSUBMIT = "msax-cc-submit";
            PayCardPaymentMethodViewModel.CARDPAYMENTACCEPTERROR = "msax-cc-error";
            PayCardPaymentMethodViewModel.CARDPAYMENTACCEPTPARTIALAMOUNT = "msax-cc-partialamount";
            PayCardPaymentMethodViewModel.CARDPAYMENTACCEPTRESULT = "msax-cc-result";
            PayCardPaymentMethodViewModel.CARDPAYMENTACCEPTCARDPREFIX = "msax-cc-cardprefix";
            PayCardPaymentMethodViewModel.CARDPAYMENTACCEPTSUBMITURLFORMAT = "{0}#{1}";
            return PayCardPaymentMethodViewModel;
        }(ViewModels.PaymentMethodViewModelBase));
        ViewModels.PayCardPaymentMethodViewModel = PayCardPaymentMethodViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var PayCashPaymentMethodViewModel = (function (_super) {
            __extends(PayCashPaymentMethodViewModel, _super);
            function PayCashPaymentMethodViewModel(context, options) {
                return _super.call(this, context, options) || this;
            }
            Object.defineProperty(PayCashPaymentMethodViewModel.prototype, "isCashPayment", {
                get: function () {
                    return true;
                },
                enumerable: true,
                configurable: true
            });
            PayCashPaymentMethodViewModel.prototype.loadPaymentMethodAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var getCurrencyAmountsRequest = new Commerce.Payments.GetCurrencyAmountsClientRequest(_this.correlationId, _this.fullAmountDue(), false);
                    return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getCurrencyAmountsRequest)));
                }).enqueue(function (result) {
                    var currencyAmounts = result.data.result;
                    var getCurrencyInfoRequest = new Commerce.Payments.GetDenominationListClientRequest(_this.correlationId, currencyAmounts[0]);
                    return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getCurrencyInfoRequest)))
                        .done(function (result) {
                        if (!result.canceled) {
                            _this.currencyDenominationList(result.data.result);
                        }
                    });
                });
                return asyncQueue.run()
                    .recoverOnFailure(function (errors) {
                    return Commerce.AsyncResult.createResolved();
                });
            };
            PayCashPaymentMethodViewModel.prototype.executePaymentProcessingAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var tenderLine = _this.createCartTenderLine();
                    return asyncQueue.cancelOn(_this.addCartTenderLineToCart(tenderLine));
                }).enqueue(function () {
                    return asyncQueue.cancelOn(_this.getSignatureAndUpdateTenderLine());
                });
                return asyncQueue.run();
            };
            return PayCashPaymentMethodViewModel;
        }(ViewModels.PaymentMethodViewModelBase));
        ViewModels.PayCashPaymentMethodViewModel = PayCashPaymentMethodViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var PayCheckPaymentMethodViewModel = (function (_super) {
            __extends(PayCheckPaymentMethodViewModel, _super);
            function PayCheckPaymentMethodViewModel(context, options) {
                return _super.call(this, context, options) || this;
            }
            PayCheckPaymentMethodViewModel.prototype.loadPaymentMethodAsync = function () {
                return Commerce.VoidAsyncResult.createResolved();
            };
            PayCheckPaymentMethodViewModel.prototype.executePaymentProcessingAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var tenderLine = _this.createCartTenderLine();
                    return asyncQueue.cancelOn(_this.addCartTenderLineToCart(tenderLine));
                }).enqueue(function () {
                    return asyncQueue.cancelOn(_this.getSignatureAndUpdateTenderLine());
                });
                return asyncQueue.run();
            };
            return PayCheckPaymentMethodViewModel;
        }(ViewModels.PaymentMethodViewModelBase));
        ViewModels.PayCheckPaymentMethodViewModel = PayCheckPaymentMethodViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var PayCreditMemoPaymentMethodViewModel = (function (_super) {
            __extends(PayCreditMemoPaymentMethodViewModel, _super);
            function PayCreditMemoPaymentMethodViewModel(context, options) {
                var _this = _super.call(this, context, options) || this;
                _this.creditMemoId = ko.observable(null);
                _this.creditMemoAmount = ko.observable(0);
                _this.creditMemoAmountTimestamp = ko.observable(new Date());
                _this.isCreditMemoBalanceAvailable = ko.observable(false);
                return _this;
            }
            Object.defineProperty(PayCreditMemoPaymentMethodViewModel.prototype, "isCreditMemoPayment", {
                get: function () {
                    return this instanceof PayCreditMemoPaymentMethodViewModel;
                },
                enumerable: true,
                configurable: true
            });
            PayCreditMemoPaymentMethodViewModel.prototype.checkCreditMemoBalanceAsync = function () {
                var _this = this;
                Commerce.RetailLogger.posCheckCreditMemoBalanceStarted(this.correlationId, this.tenderType.OperationId, this.tenderType.OperationName);
                return this.paymentManager.getCreditMemoById(this.creditMemoId())
                    .done(function (creditMemo) {
                    _this.creditMemoAmount(creditMemo.Balance);
                    _this.creditMemoAmountTimestamp(new Date());
                    _this.isCreditMemoBalanceAvailable(true);
                    Commerce.RetailLogger.posCheckCreditMemoBalanceSucceeded(_this.correlationId, _this.tenderType.OperationId, _this.tenderType.OperationName);
                    return Commerce.AsyncResult.createResolved();
                })
                    .fail(function (errors) {
                    _this.isCreditMemoBalanceAvailable(false);
                    Commerce.RetailLogger.posCheckCreditMemoBalanceFailed(_this.correlationId, _this.tenderType.OperationId, _this.tenderType.OperationName, Commerce.ErrorHelper.serializeError(errors));
                    return Commerce.AsyncResult.createRejected(errors);
                });
            };
            PayCreditMemoPaymentMethodViewModel.prototype.barcodeScannerEventHandlerAsync = function (barcode) {
                this.creditMemoId(barcode);
                return Commerce.VoidAsyncResult.createResolved();
            };
            PayCreditMemoPaymentMethodViewModel.prototype.validatePaymentInfoAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return _super.prototype.validatePaymentInfoAsync.call(_this);
                }).enqueue(function () {
                    Commerce.RetailLogger.posValidatePaymentInfoStarted(_this.correlationId, _this.tenderType.OperationId, _this.tenderType.OperationName);
                    if (Commerce.StringExtensions.isNullOrWhitespace(_this.creditMemoId())) {
                        var errors = [new Commerce.Proxy.Entities.Error("string_1169")];
                        Commerce.RetailLogger.posValidatePaymentInfoFailed(_this.correlationId, _this.tenderType.OperationId, _this.tenderType.OperationName, Commerce.ErrorHelper.serializeError(errors));
                        return Commerce.VoidAsyncResult.createRejected(errors);
                    }
                    Commerce.RetailLogger.posValidatePaymentInfoSucceeded(_this.correlationId, _this.tenderType.OperationId, _this.tenderType.OperationName);
                    return Commerce.VoidAsyncResult.createResolved();
                });
                return asyncQueue.run();
            };
            PayCreditMemoPaymentMethodViewModel.prototype.loadPaymentMethodAsync = function () {
                return Commerce.AsyncResult.createResolved();
            };
            PayCreditMemoPaymentMethodViewModel.prototype.executePaymentProcessingAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var tenderLine = _this.createCartTenderLine();
                    tenderLine.CreditMemoId = _this.creditMemoId();
                    tenderLine.Amount = 0;
                    tenderLine.AmountInTenderedCurrency = 0;
                    return asyncQueue.cancelOn(_this.addCartTenderLineToCart(tenderLine));
                }).enqueue(function () {
                    return asyncQueue.cancelOn(_this.getSignatureAndUpdateTenderLine());
                });
                return asyncQueue.run();
            };
            return PayCreditMemoPaymentMethodViewModel;
        }(ViewModels.PaymentMethodViewModelBase));
        ViewModels.PayCreditMemoPaymentMethodViewModel = PayCreditMemoPaymentMethodViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var PayCurrencyPaymentMethodViewModel = (function (_super) {
            __extends(PayCurrencyPaymentMethodViewModel, _super);
            function PayCurrencyPaymentMethodViewModel(context, options) {
                var _this = _super.call(this, context, options) || this;
                _this.hideCurrencyCodeFlyout = ko.observable(function () { return; });
                _this.toggleShowHideCurrencyCodeFlyout = ko.observable(function () { return; });
                _this.currencyAmountList = ko.observableArray([]);
                _this.hasMultipleCurrencyAmounts = ko.computed(function () { return _this.currencyAmountList().length > 1; });
                _this._currencyDenominationMap = new Commerce.Dictionary();
                return _this;
            }
            Object.defineProperty(PayCurrencyPaymentMethodViewModel.prototype, "isCurrencyPayment", {
                get: function () {
                    return this instanceof PayCurrencyPaymentMethodViewModel;
                },
                enumerable: true,
                configurable: true
            });
            PayCurrencyPaymentMethodViewModel.prototype.onForeignCurrencyItemInvoked = function (itemSelected) {
                this.toggleShowHideCurrencyCodeFlyout()();
                if (Commerce.StringExtensions.compare(itemSelected.CurrencyCode, this.currency()) !== 0) {
                    this.selectedCurrencyAmount(itemSelected);
                    this._setCurrency();
                }
            };
            PayCurrencyPaymentMethodViewModel.prototype.loadPaymentMethodAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return asyncQueue.cancelOn(_this._getCurrencyAmountsAsync(true)
                        .recoverOnFailure(function () {
                        return Commerce.AsyncResult.createResolved({ canceled: false, data: [] });
                    }));
                }).enqueue(function (result) {
                    if (Commerce.ArrayExtensions.hasElements(result.data)) {
                        return Commerce.AsyncResult.createResolved(result);
                    }
                    return asyncQueue.cancelOn(_this._getCurrencyAmountsAsync(false));
                }).enqueue(function (result) {
                    var currencyAmounts = result.data;
                    var roundResults = currencyAmounts
                        .map(function (currency) {
                        return _this.paymentManager.roundAmountByTenderType(currency.ConvertedAmount, _this.tenderType.TenderTypeId)
                            .done(function (roundedAmount) {
                            if (roundedAmount !== currency.ConvertedAmount) {
                                currency.RoundedConvertedAmount = roundedAmount;
                            }
                        });
                    });
                    return Commerce.VoidAsyncResult.join(roundResults).done(function () {
                        _this.currencyAmountList(currencyAmounts);
                    });
                }).enqueue(function () {
                    var denominationResult = _this.currencyAmountList()
                        .map(function (currency) {
                        var getCurrencyInfoRequest = new Commerce.Payments.GetDenominationListClientRequest(_this.correlationId, currency);
                        return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getCurrencyInfoRequest)))
                            .done(function (denominations) {
                            if (!denominations.canceled) {
                                _this._currencyDenominationMap.setItem(currency.CurrencyCode, denominations.data.result);
                            }
                        });
                    });
                    return Commerce.VoidAsyncResult.join(denominationResult).done(function () {
                        var currencyAmount = Commerce.ArrayExtensions.lastOrUndefined(_this.currencyAmountList());
                        _this.selectedCurrencyAmount(currencyAmount);
                        _this._setCurrency();
                    });
                });
                return asyncQueue.run().recoverOnFailure(function () {
                    return Commerce.AsyncResult.createRejected([new Commerce.Proxy.Entities.Error("string_1143")]);
                });
            };
            PayCurrencyPaymentMethodViewModel.prototype.convertAmountsToStoreCurrency = function () {
                var errors;
                var paymentAmount = this.paymentAmount();
                var fullAmountDue = this.fullAmountDue();
                if (this.currency() !== this.applicationContext.deviceConfiguration.Currency) {
                    var currencyAmount = this.selectedCurrencyAmount();
                    if (Commerce.ObjectExtensions.isNullOrUndefined(currencyAmount)) {
                        errors = [new Commerce.Proxy.Entities.Error("string_1196", false, null, [this.currency()])];
                    }
                    else if (Commerce.NumberExtensions.areEquivalent(currencyAmount.ExchangeRate, 0)) {
                        errors = [new Commerce.Proxy.Entities.Error("string_1197")];
                    }
                    else {
                        paymentAmount = Commerce.NumberExtensions.roundToNDigits(paymentAmount / currencyAmount.ExchangeRate, Commerce.NumberExtensions.getDecimalPrecision());
                        fullAmountDue = Commerce.NumberExtensions.roundToNDigits(fullAmountDue / currencyAmount.ExchangeRate, Commerce.NumberExtensions.getDecimalPrecision());
                    }
                }
                return [paymentAmount, fullAmountDue, errors];
            };
            PayCurrencyPaymentMethodViewModel.prototype.executePaymentProcessingAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var tenderLine = _this.createCartTenderLine();
                    if (_this.currency() === _this.applicationContext.deviceConfiguration.Currency) {
                        var cashTenderType = _this.applicationContext.tenderTypesMap.getTenderTypeByOperationId(Commerce.Operations.RetailOperation.PayCash);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(cashTenderType)) {
                            tenderLine.TenderTypeId = cashTenderType.TenderTypeId;
                        }
                    }
                    else {
                        var currencyAmount = _this.selectedCurrencyAmount();
                        var paymentAmount = _this.paymentAmount();
                        tenderLine.AmountInTenderedCurrency = Commerce.NumberExtensions.areEquivalent(currencyAmount.RoundedConvertedAmount, paymentAmount) ?
                            currencyAmount.ConvertedAmount : paymentAmount;
                    }
                    return asyncQueue.cancelOn(_this.addCartTenderLineToCart(tenderLine));
                }).enqueue(function () {
                    return asyncQueue.cancelOn(_this.getSignatureAndUpdateTenderLine());
                });
                return asyncQueue.run();
            };
            PayCurrencyPaymentMethodViewModel.prototype._setCurrency = function () {
                var currencyAmount = this.selectedCurrencyAmount();
                this.currency(currencyAmount.CurrencyCode);
                this.currencyDenominationList(this._currencyDenominationMap.getItem(currencyAmount.CurrencyCode));
                this.fullAmountDue(currencyAmount.RoundedConvertedAmount);
                this.setPaymentAmountToFullAmountDue();
            };
            PayCurrencyPaymentMethodViewModel.prototype._getCurrencyAmountsAsync = function (retrieveForAllCurrencies) {
                var getStoreCurrencyAmountRequest = new Commerce.Payments.GetCurrencyAmountsClientRequest(this.correlationId, this.fullAmountDue(), retrieveForAllCurrencies);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getStoreCurrencyAmountRequest))
                    .map(function (result) {
                    return { canceled: result.canceled, data: result.canceled ? null : result.data.result };
                });
            };
            return PayCurrencyPaymentMethodViewModel;
        }(ViewModels.PaymentMethodViewModelBase));
        ViewModels.PayCurrencyPaymentMethodViewModel = PayCurrencyPaymentMethodViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var PayCustomerAccountPaymentMethodViewModel = (function (_super) {
            __extends(PayCustomerAccountPaymentMethodViewModel, _super);
            function PayCustomerAccountPaymentMethodViewModel(context, options) {
                var _this = _super.call(this, context, options) || this;
                _this.customerCardViewModel = _this._createCustomerCardViewModel(options);
                return _this;
            }
            Object.defineProperty(PayCustomerAccountPaymentMethodViewModel.prototype, "isCustomerAccountPayment", {
                get: function () {
                    return this instanceof PayCustomerAccountPaymentMethodViewModel;
                },
                enumerable: true,
                configurable: true
            });
            PayCustomerAccountPaymentMethodViewModel.prototype.validatePaymentInfoAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return _super.prototype.validatePaymentInfoAsync.call(_this);
                }).enqueue(function () {
                    Commerce.RetailLogger.posValidatePaymentInfoStarted(_this.correlationId, _this.tenderType.OperationId, _this.tenderType.OperationName);
                    if (_this.customerCardViewModel.hasCustomer()) {
                        Commerce.RetailLogger.posValidatePaymentInfoSucceeded(_this.correlationId, _this.tenderType.OperationId, _this.tenderType.OperationName);
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                    var errors = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PAYMENT_CUSTOMER_ACCOUNT_EMPTY)];
                    Commerce.RetailLogger.posValidatePaymentInfoFailed(_this.correlationId, _this.tenderType.OperationId, _this.tenderType.OperationName, Commerce.ErrorHelper.serializeError(errors));
                    return Commerce.VoidAsyncResult.createRejected(errors);
                });
                return asyncQueue.run();
            };
            PayCustomerAccountPaymentMethodViewModel.prototype.loadPaymentMethodAsync = function () {
                return this.customerCardViewModel.loadCustomerAsync(Commerce.Session.instance.cart.CustomerId);
            };
            PayCustomerAccountPaymentMethodViewModel.prototype.executePaymentProcessingAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return asyncQueue.cancelOn(_this._checkFloorLimitIfNeededAsync());
                }).enqueue(function () {
                    var tenderLine = _this.createCartTenderLine();
                    var customer = _this.customerCardViewModel.customer();
                    tenderLine.CustomerId = customer.InvoiceAccount || customer.AccountNumber;
                    return asyncQueue.cancelOn(_this.addCartTenderLineToCart(tenderLine));
                }).enqueue(function () {
                    return asyncQueue.cancelOn(_this.getSignatureAndUpdateTenderLine());
                });
                return asyncQueue.run();
            };
            PayCustomerAccountPaymentMethodViewModel.prototype._createCustomerCardViewModel = function (options) {
                var customerCardViewModelOptions = {
                    isLoyaltyCardDataReadOnly: true,
                    onAddressEditClicked: function (address) { options.onAddressEditClicked(address); }
                };
                return new ViewModels.CustomerCardViewModel(this.context, customerCardViewModelOptions);
            };
            PayCustomerAccountPaymentMethodViewModel.prototype._checkFloorLimitIfNeededAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                return asyncQueue.enqueue(function () {
                    if (Commerce.Session.instance.customerContext.hasCustomer() &&
                        Commerce.Session.instance.customerContext.customer.AccountNumber === Commerce.Session.instance.cart.CustomerId) {
                        return Commerce.AsyncResult.createResolved(Commerce.Session.instance.customerContext.customer);
                    }
                    return _this.customerManager.getCustomerDetailsAsync(Commerce.Session.instance.cart.CustomerId)
                        .map(function (customerDetails) {
                        return customerDetails.customer;
                    });
                }).enqueue(function (customer) {
                    return _this.customerManager
                        .getCustomerBalanceAsync(customer.AccountNumber, customer.InvoiceAccount)
                        .done(function (customerBalances) {
                        Commerce.Session.instance.customerContext.update(customer, customerBalances);
                    }).recoverOnFailure(function (errors) {
                        Commerce.Session.instance.customerContext.update(customer, null);
                        return Commerce.AsyncResult.createResolved(null);
                    });
                }).enqueue(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.customerContext.customerBalance)) {
                        return asyncQueue.cancelOn(_this._showCustomerAccountFloorLimitConfirmationPaymentDialogAsync());
                    }
                    return Commerce.AsyncResult.createResolved({ canceled: false });
                }).run();
            };
            PayCustomerAccountPaymentMethodViewModel.prototype._showCustomerAccountFloorLimitConfirmationPaymentDialogAsync = function () {
                var _this = this;
                var totalAmount = Commerce.Session.instance.cart.TotalAmount;
                var customerAccountFloorLimit = Commerce.ApplicationContext.Instance.deviceConfiguration.CustomerAccountFloorLimit;
                var isFloorLimitBlocked = Commerce.Session.instance.customerContext.customer.IsFloorLimitBlocked;
                if (Commerce.NumberExtensions.isNullNaNOrZero(customerAccountFloorLimit)) {
                    return Commerce.AsyncResult.createRejected([new Commerce.Proxy.Entities.Error("string_4491")]);
                }
                else if (totalAmount > customerAccountFloorLimit || isFloorLimitBlocked) {
                    return Commerce.AsyncResult.createRejected([new Commerce.Proxy.Entities.Error("string_4492")]);
                }
                else {
                    var yesButton = {
                        id: Commerce.Activities.DisplayMessageOperationIds.OK,
                        label: Commerce.ViewModelAdapter.getResourceString("string_7430"),
                        isPrimary: true,
                        result: "YES_RESULT"
                    };
                    var noButton_1 = {
                        id: Commerce.Activities.DisplayMessageOperationIds.NO,
                        label: Commerce.ViewModelAdapter.getResourceString("string_7431"),
                        isPrimary: false,
                        result: "NO_RESULT"
                    };
                    var dialogRequest = new Commerce.ShowMessageDialogClientRequest({
                        title: null,
                        message: Commerce.ViewModelAdapter.getResourceString("string_4490"),
                        showCloseX: true,
                        button1: yesButton,
                        button2: noButton_1
                    }, this.correlationId);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(dialogRequest))
                        .map(function (response) {
                        if (response.canceled
                            || Commerce.ObjectExtensions.isNullOrUndefined(response.data.result)
                            || response.data.result.dialogResult === noButton_1.result) {
                            Commerce.RetailLogger.posOperationCanceledAsCustomerChooseNotToProcessPaymentWithFloorLimit(_this.tenderType.Name, _this.correlationId);
                            return { canceled: true };
                        }
                        return { canceled: false };
                    });
                }
            };
            return PayCustomerAccountPaymentMethodViewModel;
        }(ViewModels.PaymentMethodViewModelBase));
        ViewModels.PayCustomerAccountPaymentMethodViewModel = PayCustomerAccountPaymentMethodViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var PayGiftCardPaymentMethodViewModel = (function (_super) {
            __extends(PayGiftCardPaymentMethodViewModel, _super);
            function PayGiftCardPaymentMethodViewModel(context, options) {
                var _this = _super.call(this, context, options) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.onPaymentCardChanged)) {
                    throw new Error("Invalid options passed to the PayGiftCardPaymentMethodViewModel constructor: onPaymentCardChanged cannot be null or undefined.");
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.onGiftCardBalanceChecked)) {
                    throw new Error("Invalid options passed to the PayGiftCardPaymentMethodViewModel constructor: onGiftCardBalanceChecked cannot be null or undefined.");
                }
                _this._onGiftCardBalanceChecked = options.onGiftCardBalanceChecked;
                _this.isManualEntryAllowedInCardSetup = ko.observable(true);
                _this.giftCardBalance = ko.observable(NaN);
                _this.giftCardBalanceLastCheckedAtTimestamp = ko.observable(new Date());
                _this.cardInputOptionsList = ko.observableArray([]);
                _this.selectedCardInputOption = ko.observable(ViewModels.CardInputOption.Swipe);
                _this._giftCardId = ko.observable(Commerce.StringExtensions.EMPTY);
                _this._updateCardInfo(null, null);
                _this.giftCardIdText = ko.computed(function () {
                    return Commerce.StringExtensions.isNullOrWhitespace(_this._giftCardId())
                        ? Commerce.ViewModelAdapter.getResourceString("string_7219")
                        : _this._giftCardId();
                });
                _this.isGiftCardIdProvided = ko.computed(function () {
                    return !Commerce.StringExtensions.isNullOrWhitespace(_this._giftCardId());
                });
                _this.isGiftCardBalanceAvailable = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.giftCardBalance()) && !isNaN(_this.giftCardBalance());
                });
                _this.isManualInputEnabled = ko.computed(function () {
                    return _this.selectedCardInputOption() === ViewModels.CardInputOption.Manual;
                });
                return _this;
            }
            PayGiftCardPaymentMethodViewModel.prototype.dispose = function () {
                this._selectedCardInputOptionSubscription.dispose();
                _super.prototype.dispose.call(this);
            };
            Object.defineProperty(PayGiftCardPaymentMethodViewModel.prototype, "isGiftCardPayment", {
                get: function () {
                    return this instanceof PayGiftCardPaymentMethodViewModel;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PayGiftCardPaymentMethodViewModel.prototype, "arePaymentDetailsAvailable", {
                get: function () {
                    return this.isGiftCardPayment;
                },
                enumerable: true,
                configurable: true
            });
            PayGiftCardPaymentMethodViewModel.prototype.msrEventHandlerAsync = function (cardInfo) {
                this._updateCardInfo(cardInfo, Commerce.Proxy.Entities.CardSource.MSR);
                return Commerce.VoidAsyncResult.createResolved();
            };
            PayGiftCardPaymentMethodViewModel.prototype.barcodeScannerEventHandlerAsync = function (barcode) {
                this._updateCardInfo({ CardNumber: barcode }, Commerce.Proxy.Entities.CardSource.MSR);
                return Commerce.VoidAsyncResult.createResolved();
            };
            PayGiftCardPaymentMethodViewModel.prototype.getGiftCardIdAsync = function () {
                var _this = this;
                var getGiftCardRequest = new Commerce.Payments.GetGiftCardClientRequest(this.correlationId, this._giftCardId(), this.isManualEntryAllowedInCardSetup(), this._isExternal);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getGiftCardRequest))
                    .done(function (result) {
                    if (!result.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(result.data)) {
                        _this._setGiftCardId(result.data.result.giftCardId);
                    }
                });
            };
            PayGiftCardPaymentMethodViewModel.prototype.checkGiftCardBalanceAsync = function () {
                var _this = this;
                Commerce.RetailLogger.posPaymentCheckGiftCardBalanceStarted(this.correlationId, this.tenderType.TenderTypeId);
                var cardTypeId = Commerce.Proxy.Entities.CardType.GiftCard.toString();
                var newCardInfo = {
                    CardNumber: this._giftCardId(),
                    CardTypeId: cardTypeId
                };
                this._updateCardInfo(newCardInfo, Commerce.Proxy.Entities.CardSource.MSR);
                return Commerce.AsyncResult.fromPromise(this.context.runtime.executeAsync(new Commerce.Payments.GetGiftCardByIdClientRequest(this.correlationId, this.tenderType, this._giftCardId())))
                    .map(function (result) {
                    return result.data.result;
                }).done(function (giftCard) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(giftCard)) {
                        _this.giftCardBalance(NaN);
                    }
                    else {
                        _this.giftCardBalance(giftCard.Balance);
                        _this.giftCardBalanceLastCheckedAtTimestamp(new Date());
                    }
                    _this._onGiftCardBalanceChecked(giftCard);
                    Commerce.RetailLogger.posPaymentCheckGiftCardBalanceSucceeded(_this.correlationId, _this.tenderType.TenderTypeId);
                }).fail(function (errors) {
                    _this.giftCardBalance(NaN);
                    Commerce.RetailLogger.posPaymentCheckGiftCardBalanceFailed(_this.correlationId, _this.tenderType.TenderTypeId, Commerce.ErrorHelper.serializeError(errors));
                });
            };
            PayGiftCardPaymentMethodViewModel.prototype.loadPaymentMethodAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return Commerce.ApplicationContext.Instance.cardTypesAsync.value
                        .recoverOnFailure(function () {
                        return Commerce.AsyncResult.createResolved(null);
                    });
                }).enqueue(function (cardTypes) {
                    if (Commerce.ArrayExtensions.hasElements(cardTypes)) {
                        _this.isManualEntryAllowedInCardSetup(cardTypes.some(function (cardType) {
                            return cardType.PaymentMethodId === _this.tenderType.TenderTypeId
                                && cardType.CardTypeValue === Commerce.Proxy.Entities.CardType.GiftCard
                                && cardType.AllowManualInput;
                        }));
                    }
                    return asyncQueue.cancelOn(_this.getGiftCardIdAsync());
                });
                return asyncQueue.run()
                    .always(function () {
                    _this.cardInputOptionsList(_this._getCardInputOptions());
                    _this._selectedCardInputOptionSubscription = _this.selectedCardInputOption.subscribe(_this._clearCardInfo, _this);
                });
            };
            PayGiftCardPaymentMethodViewModel.prototype.validatePaymentInfoAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return _super.prototype.validatePaymentInfoAsync.call(_this);
                }).enqueue(function () {
                    if (!_this.isGiftCardIdProvided()) {
                        return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error("string_1171")]);
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                });
                return asyncQueue.run();
            };
            PayGiftCardPaymentMethodViewModel.prototype.executePaymentProcessingAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    if (_this._isExternal) {
                        Commerce.RetailLogger.posProcessingPayGiftCardUsingExternalGiftCard(_this.correlationId);
                        return asyncQueue.cancelOn(_this._processExternalGiftCardAsync());
                    }
                    else {
                        Commerce.RetailLogger.posProcessingPayGiftCardUsingInternalGiftCard(_this.correlationId);
                        return asyncQueue.cancelOn(_this._processInternalGiftCardAsync());
                    }
                }).enqueue(function (result) {
                    if (Commerce.StringExtensions.isNullOrWhitespace(result.data)) {
                        return _this.getSignatureAndUpdateTenderLine();
                    }
                    else {
                        return _this.validateSignatureAndUpdateTenderLine(result.data);
                    }
                });
                return asyncQueue.run();
            };
            Object.defineProperty(PayGiftCardPaymentMethodViewModel.prototype, "_isExternal", {
                get: function () {
                    return !Commerce.StringExtensions.isNullOrWhitespace(this.tenderType.ConnectorId);
                },
                enumerable: true,
                configurable: true
            });
            PayGiftCardPaymentMethodViewModel.prototype._processExternalGiftCardAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(new Commerce.Peripherals.HardwareStation.IsPaymentTerminalAvailableClientRequest(Commerce.Utilities.GuidHelper.newGuid())))
                        .map(function (result) {
                        return result.data.result.isAvailable;
                    });
                }).enqueue(function (isPaymentTerminalAvailable) {
                    if (!isPaymentTerminalAvailable) {
                        return Commerce.AsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PAYMENT_TERMINAL_NOT_CONFIGURED)]);
                    }
                    else {
                        return Commerce.AsyncResult.createResolved();
                    }
                });
                if (Commerce.StringExtensions.isNullOrWhitespace(Commerce.Peripherals.instance.paymentTerminal.lockToken)) {
                    Commerce.RetailLogger.paymentTerminalLockTokenIsNotObtained(this.correlationId);
                    asyncQueue.enqueue(function () {
                        var obtainLockRequest = new Commerce.Peripherals.PaymentTerminalObtainLockRequest(_this.correlationId);
                        return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(obtainLockRequest)));
                    });
                }
                asyncQueue.enqueue(function () {
                    return asyncQueue.cancelOn(Commerce.ErrorHandler.isCartVersionValid()
                        .recoverOnFailure(function (errors) {
                        Commerce.ErrorHandler.cartVersionErrorHandler(errors, true);
                        return Commerce.AsyncResult.createResolved({ canceled: true });
                    }));
                }).enqueue(function () {
                    var tenderInfo = {
                        CardNumber: _this._giftCardId(),
                        CardTypeId: Commerce.Proxy.Entities.CardType.GiftCard.toString(),
                        IsSwipe: !_this.isManualInputEnabled(),
                        TenderId: null
                    };
                    var authOrRefundRequest = new Commerce.Payments.AuthorizeOrRefundPaymentClientRequest(_this.correlationId, _this.currency(), _this.isManualInputEnabled(), !_this.isManualInputEnabled(), _this.paymentAmount(), Commerce.Proxy.Entities.PeripheralPaymentType.PaymentTerminal, tenderInfo, _this.tenderType, null, Commerce.StringExtensions.EMPTY, true);
                    return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(authOrRefundRequest)))
                        .map(function (result) {
                        return result.canceled ? null : result.data;
                    });
                });
                return asyncQueue.run()
                    .map(function (result) {
                    if (!result.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(result.data.result)) {
                        var cardInfo = {
                            CardNumber: result.data.result.CardNumberMasked,
                            CardTypeId: result.data.result.CardType.toString()
                        };
                        _this._updateCardInfo(cardInfo, Commerce.Proxy.Entities.CardSource.PaymentTerminal);
                    }
                    return { canceled: result.canceled, data: result.canceled ? null : result.data.result.SignatureData };
                });
            };
            PayGiftCardPaymentMethodViewModel.prototype._processInternalGiftCardAsync = function () {
                var cardInfo = {
                    CardNumber: this._giftCardId(),
                    CardTypeId: Commerce.Proxy.Entities.CardType.GiftCard.toString()
                };
                this._updateCardInfo(cardInfo, Commerce.Proxy.Entities.CardSource.MSR);
                var tenderLine = this.createCartTenderLine();
                tenderLine.GiftCardId = this._giftCardId();
                return this.addCartTenderLineToCart(tenderLine)
                    .map(function (result) {
                    return { canceled: result.canceled, data: result.canceled ? null : Commerce.StringExtensions.EMPTY };
                });
            };
            PayGiftCardPaymentMethodViewModel.prototype._setGiftCardId = function (newGiftCardId) {
                if (this._giftCardId() !== newGiftCardId) {
                    this.giftCardBalance(NaN);
                    this._giftCardId(newGiftCardId);
                }
            };
            PayGiftCardPaymentMethodViewModel.prototype._updateCardInfo = function (cardInfo, cardSource) {
                this._cardInfo = cardInfo;
                this._cardSource = cardSource || Commerce.Proxy.Entities.CardSource.Unknown;
                var cardNumber = (!Commerce.ObjectExtensions.isNullOrUndefined(cardInfo) && !Commerce.ObjectExtensions.isNullOrUndefined(cardInfo.CardNumber))
                    ? cardInfo.CardNumber : Commerce.StringExtensions.EMPTY;
                this._setGiftCardId(cardNumber);
                this.updatePaymentCard(this._cardInfo, this._cardSource);
            };
            PayGiftCardPaymentMethodViewModel.prototype._getCardInputOptions = function () {
                var swipe = {
                    caption: Commerce.ViewModelAdapter.getResourceString("string_1182"),
                    value: ViewModels.CardInputOption.Swipe
                };
                var manual = {
                    caption: Commerce.ViewModelAdapter.getResourceString("string_1127"),
                    value: ViewModels.CardInputOption.Manual
                };
                if (!this.isManualEntryAllowedInCardSetup()) {
                    return [swipe];
                }
                else {
                    return [swipe, manual];
                }
            };
            PayGiftCardPaymentMethodViewModel.prototype._clearCardInfo = function () {
                this._updateCardInfo(null, null);
            };
            return PayGiftCardPaymentMethodViewModel;
        }(ViewModels.PaymentMethodViewModelBase));
        ViewModels.PayGiftCardPaymentMethodViewModel = PayGiftCardPaymentMethodViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var PayLoyaltyCardPaymentMethodViewModel = (function (_super) {
            __extends(PayLoyaltyCardPaymentMethodViewModel, _super);
            function PayLoyaltyCardPaymentMethodViewModel(context, options) {
                var _this = _super.call(this, context, options) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.onPaymentCardChanged)) {
                    throw new Error("Invalid options passed to the PayLoyaltyCardPaymentMethodViewModel constructor: onPaymentCardChanged cannot be null or undefined.");
                }
                _this._loyaltyCardId = ko.observable(Commerce.Session.instance.cart.LoyaltyCardId);
                _this.loyaltyCardIdText = ko.computed(function () {
                    return Commerce.StringExtensions.isNullOrWhitespace(_this._loyaltyCardId())
                        ? Commerce.ViewModelAdapter.getResourceString("string_7218")
                        : _this._loyaltyCardId();
                });
                _this.rewardPointsToRedeemList = ko.observableArray([]);
                _this._maxCurrencyValueOfLoyaltyPoints = ko.observable(0);
                _this.maxCurrencyValueOfLoyaltyPointsAsCurrency = ko.computed(function () {
                    return Commerce.NumberExtensions.formatCurrency(_this._maxCurrencyValueOfLoyaltyPoints(), _this.currency());
                });
                return _this;
            }
            Object.defineProperty(PayLoyaltyCardPaymentMethodViewModel.prototype, "isLoyaltyCardPayment", {
                get: function () {
                    return this instanceof PayLoyaltyCardPaymentMethodViewModel;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PayLoyaltyCardPaymentMethodViewModel.prototype, "arePaymentDetailsAvailable", {
                get: function () {
                    return this.isLoyaltyCardPayment;
                },
                enumerable: true,
                configurable: true
            });
            PayLoyaltyCardPaymentMethodViewModel.prototype.msrEventHandlerAsync = function (cardInfo) {
                this._updateCardInfo(cardInfo);
                return Commerce.VoidAsyncResult.createResolved();
            };
            PayLoyaltyCardPaymentMethodViewModel.prototype.barcodeScannerEventHandlerAsync = function (barcode) {
                this._updateCardInfo({ CardNumber: barcode });
                return Commerce.VoidAsyncResult.createResolved();
            };
            PayLoyaltyCardPaymentMethodViewModel.prototype.checkLoyaltyCardBalanceAsync = function () {
                var _this = this;
                Commerce.RetailLogger.posPaymentCheckLoyaltyCardBalanceStarted(this.correlationId, this.tenderType.TenderTypeId);
                if (Commerce.StringExtensions.isNullOrWhitespace(this._loyaltyCardId())) {
                    return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PAYMENT_LOYALTY_CARD_NUMBER_EMPTY)]);
                }
                var loyaltyCardPointsBalanceOperationRequest = new Commerce.LoyaltyCardPointsBalanceOperationRequest(this.correlationId, this._loyaltyCardId());
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(loyaltyCardPointsBalanceOperationRequest))
                    .done(function () {
                    Commerce.RetailLogger.posPaymentCheckLoyaltyCardBalanceSucceeded(_this.correlationId, _this.tenderType.TenderTypeId);
                })
                    .fail(function (errors) {
                    Commerce.RetailLogger.posPaymentCheckLoyaltyCardBalanceFailed(_this.correlationId, _this.tenderType.TenderTypeId, Commerce.ErrorHelper.serializeError(errors));
                });
            };
            PayLoyaltyCardPaymentMethodViewModel.prototype.getLoyaltyCardIdFromNumpadAsync = function () {
                var _this = this;
                var getLoyaltyCardRequest = new Commerce.Payments.GetLoyaltyCardClientRequest(this.correlationId, this._loyaltyCardId());
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getLoyaltyCardRequest))
                    .done(function (result) {
                    if (!result.canceled) {
                        _this._setLoyaltyCardId(result.data.result.loyaltyCardId);
                    }
                });
            };
            PayLoyaltyCardPaymentMethodViewModel.prototype.loadLoyaltyPaymentInformationAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                var loyaltyCard = null;
                asyncQueue.enqueue(function () {
                    return asyncQueue.cancelOn(_this.getLoyaltyCardIdFromNumpadAsync());
                }).enqueue(function () {
                    return asyncQueue.cancelOn(_this._getLoyaltyCardAsync(_this._loyaltyCardId()));
                }).enqueue(function (result) {
                    loyaltyCard = result.data;
                    return _this._getMaxLoyaltyPointsToRedeemForTransactionBalanceAsync(_this._loyaltyCardId(), _this.currency());
                }).enqueue(function (loyaltyPointsToRedeemObject) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(loyaltyPointsToRedeemObject)) {
                        _this._maxCurrencyValueOfLoyaltyPoints(loyaltyPointsToRedeemObject.MaxCurrencyValueOfLoyaltyPoints);
                        _this.rewardPointsToRedeemList(_this._createRewardPointsToRedeemList(loyaltyCard, loyaltyPointsToRedeemObject.RewardPointToRedeemList));
                        _this.setPaymentAmount(loyaltyPointsToRedeemObject.MaxCurrencyValueOfLoyaltyPoints);
                    }
                    return Commerce.AsyncResult.createResolved();
                });
                return asyncQueue.run();
            };
            PayLoyaltyCardPaymentMethodViewModel.prototype.loadPaymentMethodAsync = function () {
                return this.loadLoyaltyPaymentInformationAsync();
            };
            PayLoyaltyCardPaymentMethodViewModel.prototype.validatePaymentInfoAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return _super.prototype.validatePaymentInfoAsync.call(_this);
                }).enqueue(function () {
                    Commerce.RetailLogger.posValidatePaymentInfoStarted(_this.correlationId, _this.tenderType.OperationId, _this.tenderType.OperationName);
                    if (Commerce.StringExtensions.isNullOrWhitespace(_this._loyaltyCardId())) {
                        var errors = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PAYMENT_LOYALTY_CARD_NUMBER_EMPTY)];
                        Commerce.RetailLogger.posValidatePaymentInfoFailed(_this.correlationId, _this.tenderType.OperationId, _this.tenderType.OperationName, Commerce.ErrorHelper.serializeError(errors));
                        return Commerce.VoidAsyncResult.createRejected(errors);
                    }
                    Commerce.RetailLogger.posValidatePaymentInfoSucceeded(_this.correlationId, _this.tenderType.OperationId, _this.tenderType.OperationName);
                    return Commerce.VoidAsyncResult.createResolved();
                });
                return asyncQueue.run();
            };
            PayLoyaltyCardPaymentMethodViewModel.prototype.executePaymentProcessingAsync = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var tenderLine = _this.createCartTenderLine();
                    tenderLine.LoyaltyCardId = _this._loyaltyCardId();
                    return asyncQueue.cancelOn(_this.addCartTenderLineToCart(tenderLine));
                }).enqueue(function () {
                    return _this.getSignatureAndUpdateTenderLine();
                });
                return asyncQueue.run();
            };
            PayLoyaltyCardPaymentMethodViewModel.prototype._getMaxLoyaltyPointsToRedeemForTransactionBalanceAsync = function (loyaltyCardId, currencyCode) {
                var _this = this;
                Commerce.RetailLogger.posGetMaxLoyaltyPointsToRedeemForTransactionBalanceStarted(this.correlationId);
                return this.cartManager.getMaxLoyaltyPointsToRedeemForTransactionBalanceAsync(loyaltyCardId, currencyCode)
                    .done(function (result) {
                    Commerce.RetailLogger.posGetMaxLoyaltyPointsToRedeemForTransactionBalanceSucceeded(_this.correlationId, result.RewardPointToRedeemList.length, result.MaxCurrencyValueOfLoyaltyPoints);
                })
                    .fail(function (errors) {
                    Commerce.RetailLogger.posGetMaxLoyaltyPointsToRedeemForTransactionBalanceFailed(_this.correlationId, Commerce.ErrorHelper.serializeError(errors));
                });
            };
            PayLoyaltyCardPaymentMethodViewModel.prototype._getLoyaltyCardAsync = function (loyaltyCardId) {
                var _this = this;
                Commerce.RetailLogger.posGetLoyaltyCardStarted(this.correlationId);
                var asyncQueue = new Commerce.AsyncQueue();
                var loyaltyCard = null;
                asyncQueue.enqueue(function () {
                    return _this.customerManager.getLoyaltyCardAsync(loyaltyCardId);
                }).enqueue(function (result) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(result)) {
                        return Commerce.AsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDLOYALTYCARDNUMBER)]);
                    }
                    else {
                        loyaltyCard = result;
                        return Commerce.AsyncResult.createResolved();
                    }
                });
                return asyncQueue.run()
                    .map(function (result) {
                    if (result.canceled) {
                        Commerce.RetailLogger.posGetLoyaltyCardCancelled(_this.correlationId);
                    }
                    else {
                        Commerce.RetailLogger.posGetLoyaltyCardSucceeded(_this.correlationId, loyaltyCard.CardNumber);
                    }
                    return { canceled: result.canceled, data: loyaltyCard };
                }).fail(function (errors) {
                    Commerce.RetailLogger.posGetLoyaltyCardFailed(_this.correlationId, Commerce.ErrorHelper.serializeError(errors));
                });
            };
            PayLoyaltyCardPaymentMethodViewModel.prototype._createRewardPointsToRedeemList = function (loyaltyCard, loyaltyRewardPointLineArray) {
                var rewardPointToRedeemList = [];
                var loyaltyCardRewardPoints = loyaltyCard.RewardPoints;
                loyaltyRewardPointLineArray.forEach(function (pointLine) {
                    var loyaltyCardRewardPoint = Commerce.ArrayExtensions.firstOrUndefined(loyaltyCardRewardPoints, function (point) {
                        return point.RewardPointId === pointLine.RewardPointId;
                    });
                    if (Commerce.ObjectExtensions.isNullOrUndefined(loyaltyCardRewardPoint)) {
                        return;
                    }
                    var loyaltyRewardPointHasExpiringPoints = !Commerce.NumberExtensions.isNullOrZero(loyaltyCardRewardPoint.PointsExpiringSoon);
                    var rewardPointDescription = loyaltyCardRewardPoint.Description;
                    var pointsQty = Math.abs(pointLine.RewardPointAmountQuantity);
                    var pointEstimate = {
                        pointsToRedeemQty: pointsQty,
                        hasPointsExpiringSoon: loyaltyRewardPointHasExpiringPoints,
                        rewardPointDescription: rewardPointDescription
                    };
                    rewardPointToRedeemList.push(pointEstimate);
                });
                return rewardPointToRedeemList;
            };
            PayLoyaltyCardPaymentMethodViewModel.prototype._setLoyaltyCardId = function (newLoyaltyCardId) {
                if (this._loyaltyCardId() !== newLoyaltyCardId) {
                    this._loyaltyCardId(newLoyaltyCardId);
                }
            };
            PayLoyaltyCardPaymentMethodViewModel.prototype._updateCardInfo = function (cardInfo) {
                var cardNumber = Commerce.ObjectExtensions.isNullOrUndefined(cardInfo) || Commerce.ObjectExtensions.isNullOrUndefined(cardInfo.CardNumber)
                    ? Commerce.StringExtensions.EMPTY
                    : cardInfo.CardNumber;
                this._setLoyaltyCardId(cardNumber);
                this.updatePaymentCard(null, Commerce.Proxy.Entities.CardSource.Unknown);
            };
            return PayLoyaltyCardPaymentMethodViewModel;
        }(ViewModels.PaymentMethodViewModelBase));
        ViewModels.PayLoyaltyCardPaymentMethodViewModel = PayLoyaltyCardPaymentMethodViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var PaymentViewModel = (function (_super) {
            __extends(PaymentViewModel, _super);
            function PaymentViewModel(context, options) {
                var _this = _super.call(this, context) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw new Error("Invalid options passed to the PaymentViewModel constructor: options cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.onPaymentResultAvailableAsync)) {
                    throw new Error("Invalid options passed to the PaymentViewModel constructor: onPaymentResultAvailableAsync cannot be null or undefined.");
                }
                _this._options = options;
                _this._onPaymentResultAvailableAsync = options.onPaymentResultAvailableAsync;
                _this._isTenderingPayment = false;
                _this._resolvePendingResults = true;
                _this._isExtensionCommandViewModelBusy = ko.observable(false);
                if (Commerce.ObjectExtensions.isNullOrUndefined(PaymentViewModel._viewExtensionsManager)) {
                    _this._extensionCommandViewModels = [];
                }
                else {
                    _this._extensionCommandViewModels = PaymentViewModel._viewExtensionsManager.getAppBarCommands()
                        .map(function (command) {
                        var commandVM = new ViewModels.CommandViewModel(command);
                        commandVM.addMessageHandler("IsProcessingChanged", function (isProcessing) {
                            if (isProcessing) {
                                _this._isExtensionCommandViewModelBusy(true);
                            }
                            else {
                                var isAnyCommandProcessing = _this._extensionCommandViewModels.some(function (vm) {
                                    return vm.isProcessing;
                                });
                                _this._isExtensionCommandViewModelBusy(isAnyCommandProcessing);
                            }
                        });
                        commandVM.addMessageHandler("UpdatePaymentAmount", function (data) {
                            _this.paymentMethodViewModel.setPaymentAmount(data.paymentAmount);
                        });
                        return commandVM;
                    });
                    _this._isBusyWhen(_this._isExtensionCommandViewModelBusy);
                }
                _this.paymentMethodViewModel = _this._createPaymentMethodViewModel(options);
                _this.paymentMethodViewModel.paymentAmountText.subscribe(function (newValue) {
                    var paymentViewAmountChanged = { paymentAmount: newValue };
                    _this._sendMessageToExtensions("PaymentAmountChanged", paymentViewAmountChanged);
                });
                _this.paymentAmountTitle = ko.observable(_this.paymentMethodViewModel.getPaymentAmountTitle());
                _this.paymentAmountLabel = ko.computed(function () {
                    return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_1831"), Commerce.ViewModelAdapter.getResourceString("string_1817"), _this.paymentMethodViewModel.fullAmountDueTextFormattedByCurrency());
                });
                return _this;
            }
            Object.defineProperty(PaymentViewModel, "viewExtensionManager", {
                set: function (manager) {
                    PaymentViewModel._viewExtensionsManager = manager;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PaymentViewModel.prototype, "extensionCommandViewModels", {
                get: function () {
                    return this._extensionCommandViewModels;
                },
                enumerable: true,
                configurable: true
            });
            PaymentViewModel.prototype.loadAsync = function () {
                var _this = this;
                return this._isBusyUntil(this.paymentMethodViewModel.loadAsync())
                    .always(function () {
                    _this._extensionCommandViewModels.forEach(function (vm) {
                        var currency = Commerce.ApplicationContext.Instance.currenciesMap.getItem(_this.paymentMethodViewModel.currency());
                        vm.sendMessage("Initialize", { tenderType: _this.paymentMethodViewModel.tenderType, fullAmount: _this.paymentMethodViewModel.fullAmountDue(), currency: currency });
                        _this.paymentMethodViewModel.initializePaymentCardChanged();
                    });
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            PaymentViewModel.prototype.onShown = function () {
                var _this = this;
                Commerce.Peripherals.instance.magneticStripeReader.enableAsync(function (cardInfo) {
                    Commerce.RetailLogger.posPaymentMsrEventHandlerStarted(_this.paymentMethodViewModel.correlationId, _this.paymentMethodViewModel.tenderType.OperationId, _this.paymentMethodViewModel.tenderType.OperationName);
                    _this.paymentMethodViewModel.msrEventHandlerAsync(cardInfo)
                        .done(function () {
                        Commerce.RetailLogger.posPaymentMsrEventHandlerSucceeded(_this.paymentMethodViewModel.correlationId, _this.paymentMethodViewModel.tenderType.OperationId, _this.paymentMethodViewModel.tenderType.OperationName);
                    }).fail(function (errors) {
                        Commerce.RetailLogger.posPaymentMsrEventHandlerFailed(_this.paymentMethodViewModel.correlationId, _this.paymentMethodViewModel.tenderType.OperationId, _this.paymentMethodViewModel.tenderType.OperationName, Commerce.ErrorHelper.serializeError(errors));
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }, Commerce.Peripherals.HardwareStation.LongPollingSupportedEventsSourceTypes.PAYMENTS);
                Commerce.Peripherals.instance.barcodeScanner.enableAsync(function (barcode) {
                    Commerce.RetailLogger.posPaymentBarcodeScannerEventHandlerStarted(_this.paymentMethodViewModel.correlationId, _this.paymentMethodViewModel.tenderType.OperationId, _this.paymentMethodViewModel.tenderType.OperationName);
                    _this.paymentMethodViewModel.barcodeScannerEventHandlerAsync(barcode)
                        .done(function () {
                        Commerce.RetailLogger.posPaymentBarcodeScannerEventHandlerSucceeded(_this.paymentMethodViewModel.correlationId, _this.paymentMethodViewModel.tenderType.OperationId, _this.paymentMethodViewModel.tenderType.OperationName);
                    }).fail(function (errors) {
                        Commerce.RetailLogger.posPaymentBarcodeScannerEventHandlerFailed(_this.paymentMethodViewModel.correlationId, _this.paymentMethodViewModel.tenderType.OperationId, _this.paymentMethodViewModel.tenderType.OperationName, Commerce.ErrorHelper.serializeError(errors));
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                });
            };
            PaymentViewModel.prototype.afterBind = function () {
                this.paymentMethodViewModel.afterBind();
            };
            PaymentViewModel.prototype.onHidden = function () {
                Commerce.Peripherals.instance.magneticStripeReader.disableAsync(Commerce.Peripherals.HardwareStation.LongPollingSupportedEventsSourceTypes.PAYMENTS);
                Commerce.Peripherals.instance.barcodeScanner.disableAsync();
                if (this._resolvePendingResults) {
                    this._onPaymentResultAvailableAsync(null);
                }
            };
            PaymentViewModel.prototype.addDenominationAsync = function (denomination) {
                var denominationAmount = denomination.Amount;
                var tenderPayment = this.paymentMethodViewModel.addDenominationAmountToPaymentAmount(denominationAmount);
                if (tenderPayment) {
                    return this.tenderPaymentAsync();
                }
                else {
                    return Commerce.AsyncResult.createResolved({ canceled: false });
                }
            };
            PaymentViewModel.prototype.tenderPaymentAsync = function () {
                var _this = this;
                if (this._isTenderingPayment) {
                    Commerce.RetailLogger.posTenderPaymentInProgress(this.paymentMethodViewModel.correlationId, this.paymentMethodViewModel.tenderType.OperationId);
                    return Commerce.AsyncResult.createResolved({ canceled: true });
                }
                Commerce.RetailLogger.posTenderPaymentOperationStarted(this.paymentMethodViewModel.correlationId, this.paymentMethodViewModel.tenderType.OperationId, this.paymentMethodViewModel.tenderType.OperationName, this.paymentMethodViewModel.paymentAmountText());
                this._isTenderingPayment = true;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return asyncQueue.cancelOn(_this.paymentMethodViewModel.processPaymentAsync());
                }).enqueue(function () {
                    return _this._postPaymentAsync();
                });
                var asyncResult = asyncQueue.run()
                    .done(function (result) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(result) && result.canceled) {
                        Commerce.RetailLogger.posTenderPaymentOperationCancelled(_this.paymentMethodViewModel.correlationId, _this.paymentMethodViewModel.tenderType.OperationId, _this.paymentMethodViewModel.tenderType.OperationName, _this.paymentMethodViewModel.paymentAmountText());
                    }
                    else {
                        Commerce.RetailLogger.posTenderPaymentOperationSucceeded(_this.paymentMethodViewModel.correlationId, _this.paymentMethodViewModel.tenderType.OperationId, _this.paymentMethodViewModel.tenderType.OperationName, _this.paymentMethodViewModel.paymentAmountText());
                    }
                }).fail(function (errors) {
                    Commerce.RetailLogger.posTenderPaymentOperationFailed(_this.paymentMethodViewModel.correlationId, _this.paymentMethodViewModel.tenderType.OperationId, _this.paymentMethodViewModel.tenderType.OperationName, _this.paymentMethodViewModel.paymentAmountText(), Commerce.ErrorHelper.serializeError(errors));
                    Commerce.NotificationHandler.displayClientErrors(errors);
                }).always(function () {
                    _this._isTenderingPayment = false;
                });
                return this._isBusyUntil(asyncResult);
            };
            PaymentViewModel.prototype.createAndAddNewCustomerToCartAsync = function () {
                var _this = this;
                this._resolvePendingResults = false;
                Commerce.RetailLogger.posPaymentCreateNewCustomerStarted(this.paymentMethodViewModel.correlationId, this.paymentMethodViewModel.tenderType.OperationId, this.paymentMethodViewModel.tenderType.OperationName);
                var customerSelectionHandler = new Commerce.CancelableSelectionHandler(function () {
                    _this._resolvePendingResults = true;
                    Commerce.ViewModelAdapter.collapseAndNavigate(PaymentViewModel.paymentViewName, _this._options);
                }, function () {
                    Commerce.RetailLogger.posPaymentCreateNewCustomerCanceled(_this.paymentMethodViewModel.correlationId, _this.paymentMethodViewModel.tenderType.OperationId, _this.paymentMethodViewModel.tenderType.OperationName);
                    _this._resolvePendingResults = true;
                    _this._handleExternalCancelation();
                }, function (customer) {
                    if (Commerce.Session.instance.cart.CustomerId === customer.AccountNumber) {
                        return Commerce.AsyncResult.createResolved({ canceled: false });
                    }
                    Commerce.RetailLogger.posPaymentCreateNewCustomerSucceeded(_this.paymentMethodViewModel.correlationId, _this.paymentMethodViewModel.tenderType.OperationId, _this.paymentMethodViewModel.tenderType.OperationName, customer.AccountNumber);
                    var addCustomerOptions = {
                        cartAffiliations: [],
                        customer: customer,
                        customerId: customer.AccountNumber,
                        correlationId: Commerce.LoggerHelper.getNewCorrelationId()
                    };
                    return _this.operationsManager.runOperation(Commerce.Proxy.Entities.RetailOperation.SetCustomer, addCustomerOptions);
                });
                var options = {
                    customerSelectionHandler: customerSelectionHandler
                };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.CustomerAdd, options)
                    .fail(function (errors) {
                    Commerce.RetailLogger.posPaymentCreateNewCustomerFailed(_this.paymentMethodViewModel.correlationId, _this.paymentMethodViewModel.tenderType.OperationId, _this.paymentMethodViewModel.tenderType.OperationName, Commerce.ErrorHelper.serializeError(errors));
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            PaymentViewModel.prototype.searchCustomersAsync = function () {
                var _this = this;
                this._resolvePendingResults = false;
                Commerce.RetailLogger.posPaymentSearchCustomersStarted(this.paymentMethodViewModel.correlationId, this.paymentMethodViewModel.tenderType.OperationId, this.paymentMethodViewModel.tenderType.OperationName);
                var customerSelectionHandler = new Commerce.CancelableSelectionHandler(function () {
                    _this._resolvePendingResults = true;
                    Commerce.ViewModelAdapter.collapseAndNavigate(PaymentViewModel.paymentViewName, _this._options);
                }, function () {
                    Commerce.RetailLogger.posPaymentSearchCustomersCanceled(_this.paymentMethodViewModel.correlationId, _this.paymentMethodViewModel.tenderType.OperationId, _this.paymentMethodViewModel.tenderType.OperationName);
                    _this._resolvePendingResults = true;
                    _this._handleExternalCancelation();
                }, function (customer) {
                    Commerce.RetailLogger.posPaymentSearchCustomersSucceeded(_this.paymentMethodViewModel.correlationId, _this.paymentMethodViewModel.tenderType.OperationId, _this.paymentMethodViewModel.tenderType.OperationName, customer.AccountNumber);
                    return Commerce.CustomerHelper.crossCompanyCustomerTransferAndAddToCartAsync(_this.paymentMethodViewModel.correlationId, customer);
                });
                var options = {
                    searchText: Commerce.StringExtensions.EMPTY,
                    customerSelectionHandler: customerSelectionHandler
                };
                return this.operationsManager.runOperation(Commerce.Operations.RetailOperation.CustomerSearch, options)
                    .fail(function (errors) {
                    Commerce.RetailLogger.posPaymentSearchCustomersFailed(_this.paymentMethodViewModel.correlationId, _this.paymentMethodViewModel.tenderType.OperationId, _this.paymentMethodViewModel.tenderType.OperationName, Commerce.ErrorHelper.serializeError(errors));
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            PaymentViewModel.prototype.checkCreditMemoBalanceAsync = function () {
                Commerce.RetailLogger.posPaymentUIButtonClicked(this.paymentMethodViewModel.correlationId, "PaymentView", "Check credit memo balance");
                if (this.paymentMethodViewModel instanceof ViewModels.PayCreditMemoPaymentMethodViewModel) {
                    return this._isBusyUntil(this.paymentMethodViewModel.checkCreditMemoBalanceAsync())
                        .fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }
                throw new Error("Check credit memo balance not supported for operation " + this.paymentMethodViewModel.tenderType.OperationId);
            };
            PaymentViewModel.prototype.checkGiftCardBalanceAsync = function () {
                Commerce.RetailLogger.posPaymentUIButtonClicked(this.paymentMethodViewModel.correlationId, "PaymentView", "Check gift card balance");
                if (!(this.paymentMethodViewModel instanceof ViewModels.PayGiftCardPaymentMethodViewModel)) {
                    throw new Error("Check gift card balance not supported for operation " + this.paymentMethodViewModel.tenderType.OperationId);
                }
                return this._isBusyUntil(this.paymentMethodViewModel.checkGiftCardBalanceAsync())
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            PaymentViewModel.prototype.checkLoyaltyCardBalanceAsync = function () {
                Commerce.RetailLogger.posPaymentUIButtonClicked(this.paymentMethodViewModel.correlationId, "PaymentView", "Check loyalty card balance");
                if (this.paymentMethodViewModel instanceof ViewModels.PayLoyaltyCardPaymentMethodViewModel) {
                    return this._isBusyUntil(this.paymentMethodViewModel.checkLoyaltyCardBalanceAsync())
                        .fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }
                throw new Error("Check loyalty card balance not supported for operation " + this.paymentMethodViewModel.tenderType.OperationId);
            };
            PaymentViewModel.prototype.getLoyaltyPaymentInformationForDisplayAsync = function () {
                Commerce.RetailLogger.posPaymentUIButtonClicked(this.paymentMethodViewModel.correlationId, "PaymentView", "Get loyalty payment information");
                if (this.paymentMethodViewModel instanceof ViewModels.PayLoyaltyCardPaymentMethodViewModel) {
                    return this._isBusyUntil(this.paymentMethodViewModel.loadLoyaltyPaymentInformationAsync())
                        .fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }
                throw new Error("Get loyalty card payment information not supported for operation " + this.paymentMethodViewModel.tenderType.OperationId);
            };
            PaymentViewModel.prototype.getExpirationMonths = function () {
                var months = [];
                var dateformatter = Commerce.Host.instance.globalization.getDateTimeFormatter(Commerce.Host.Globalization.DateTimeFormat.MONTH_FULL);
                var dateToFormat = new Date();
                for (var monthIndex = 1; monthIndex <= 12; monthIndex++) {
                    dateToFormat.setMonth(monthIndex);
                    var monthName = dateformatter.format(dateToFormat);
                    var monthCaption = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_7222"), Commerce.StringExtensions.padLeft(monthIndex.toString(), "0", 2), monthName);
                    months[monthIndex - 1] = { value: monthIndex, caption: monthCaption };
                }
                return months;
            };
            PaymentViewModel.prototype.getExpirationYears = function () {
                var years = [];
                var date = new Date();
                for (var yearIndex = 0; yearIndex < 20; yearIndex++) {
                    var calculateYear = date.getFullYear() + yearIndex;
                    years[yearIndex] = { value: calculateYear, caption: calculateYear.toString() };
                }
                return years;
            };
            PaymentViewModel.prototype._handleExternalCancelation = function () {
                if (!Commerce.ViewModelAdapter.isInView(PaymentViewModel.paymentViewName)) {
                    Commerce.ViewModelAdapter.collapse("PaymentView");
                    this._onPaymentResultAvailableAsync(null);
                }
            };
            PaymentViewModel.prototype._createPaymentMethodViewModel = function (options) {
                var _this = this;
                var viewModel;
                var baseViewModelOptions = {
                    tenderType: options.tenderType,
                    fullAmountDue: options.fullAmountDue,
                    correlationId: options.correlationId,
                    isExemptFromReturnPolicy: !Commerce.ObjectExtensions.isNullOrUndefined(options.isExemptFromReturnPolicy) ? options.isExemptFromReturnPolicy : false
                };
                switch (options.tenderType.OperationId) {
                    case Commerce.Operations.RetailOperation.PayCash:
                        viewModel = new ViewModels.PayCashPaymentMethodViewModel(this.context, baseViewModelOptions);
                        break;
                    case Commerce.Operations.RetailOperation.PayCheck:
                        viewModel = new ViewModels.PayCheckPaymentMethodViewModel(this.context, baseViewModelOptions);
                        break;
                    case Commerce.Operations.RetailOperation.PayCard:
                        var payCardViewModelOptions = {
                            tenderType: baseViewModelOptions.tenderType,
                            fullAmountDue: baseViewModelOptions.fullAmountDue,
                            correlationId: baseViewModelOptions.correlationId,
                            isExemptFromReturnPolicy: baseViewModelOptions.isExemptFromReturnPolicy,
                            cardPaymentOptions: options.cardPaymentOptions,
                            onPaymentCardChanged: function (paymentCard) {
                                var paymentViewPaymentCardChanged = { paymentCard: paymentCard };
                                _this._sendMessageToExtensions("PaymentCardChanged", paymentViewPaymentCardChanged);
                            }
                        };
                        viewModel = new ViewModels.PayCardPaymentMethodViewModel(this.context, payCardViewModelOptions);
                        break;
                    case Commerce.Operations.RetailOperation.PayCurrency:
                        viewModel = new ViewModels.PayCurrencyPaymentMethodViewModel(this.context, baseViewModelOptions);
                        break;
                    case Commerce.Operations.RetailOperation.PayGiftCertificate:
                        var giftCardViewModelOptions = __assign(__assign({}, baseViewModelOptions), { onPaymentCardChanged: function (paymentCard) {
                                var paymentViewPaymentCardChanged = { paymentCard: paymentCard };
                                _this._sendMessageToExtensions("PaymentCardChanged", paymentViewPaymentCardChanged);
                            }, onGiftCardBalanceChecked: function (giftCard) {
                                _this._sendMessageToExtensions("GiftCardBalanceChecked", {
                                    balance: giftCard.Balance,
                                    balanceCurrencyCode: giftCard.BalanceCurrencyCode,
                                    balanceInCardCurrency: giftCard.BalanceInCardCurrency,
                                    cardCurrencyCode: giftCard.CardCurrencyCode
                                });
                            } });
                        viewModel = new ViewModels.PayGiftCardPaymentMethodViewModel(this.context, giftCardViewModelOptions);
                        break;
                    case Commerce.Operations.RetailOperation.PayCustomerAccount:
                        var payCustomerAccountViewModelOptions = {
                            tenderType: baseViewModelOptions.tenderType,
                            fullAmountDue: baseViewModelOptions.fullAmountDue,
                            correlationId: baseViewModelOptions.correlationId,
                            onAddressEditClicked: this._onAddressAddEditClicked.bind(this)
                        };
                        viewModel = new ViewModels.PayCustomerAccountPaymentMethodViewModel(this.context, payCustomerAccountViewModelOptions);
                        break;
                    case Commerce.Operations.RetailOperation.PayCreditMemo:
                        viewModel = new ViewModels.PayCreditMemoPaymentMethodViewModel(this.context, baseViewModelOptions);
                        break;
                    case Commerce.Operations.RetailOperation.PayLoyalty:
                        baseViewModelOptions.onPaymentCardChanged = function (paymentCard) {
                            var paymentViewPaymentCardChanged = { paymentCard: paymentCard };
                            _this._sendMessageToExtensions("PaymentCardChanged", paymentViewPaymentCardChanged);
                        };
                        viewModel = new ViewModels.PayLoyaltyCardPaymentMethodViewModel(this.context, baseViewModelOptions);
                        break;
                    default:
                        throw new Error("Operation " + options.tenderType.OperationId + " is not supported by PaymentView.");
                }
                return viewModel;
            };
            PaymentViewModel.prototype._onAddressAddEditClicked = function (address) {
                var _this = this;
                var onAddressCreatedAsyncResult = new Commerce.AsyncResult();
                this._resolvePendingResults = false;
                var saveAddressSelectionHandler = new Commerce.CancelableSelectionHandler(function (selection) {
                    var result = {
                        canceled: false,
                        data: selection.customer
                    };
                    onAddressCreatedAsyncResult.resolve(result);
                }, function () {
                    var result = {
                        canceled: true,
                        data: undefined
                    };
                    onAddressCreatedAsyncResult.resolve(result);
                });
                var addressOptions = {
                    customer: Commerce.Session.instance.customerContext.customer,
                    address: address,
                    saveAddressSelectionHandler: saveAddressSelectionHandler
                };
                Commerce.ViewModelAdapter.navigate("AddressAddEditView", addressOptions);
                return onAddressCreatedAsyncResult.done(function () {
                    _this._resolvePendingResults = true;
                    Commerce.ViewModelAdapter.collapseAndNavigate(PaymentViewModel.paymentViewName, _this._options);
                });
            };
            PaymentViewModel.prototype._postPaymentAsync = function () {
                var _this = this;
                var tokenizedPaymentCard = (this.paymentMethodViewModel instanceof ViewModels.PayCardPaymentMethodViewModel)
                    ? this.paymentMethodViewModel.tokenizedPaymentCard
                    : undefined;
                var tenderLine = Commerce.ObjectExtensions.isNullOrUndefined(tokenizedPaymentCard)
                    ? Commerce.CartHelper.getLastTenderLine(Commerce.Session.instance.cart)
                    : undefined;
                var paymentResult = {
                    paymentResult: Commerce.ObjectExtensions.isNullOrUndefined(tokenizedPaymentCard)
                        ? tenderLine
                        : tokenizedPaymentCard
                };
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var triggerOptions = {
                        cart: Commerce.Session.instance.cart,
                        tenderLine: tenderLine
                    };
                    return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostPayment, triggerOptions)
                        .recoverOnFailure(function (errors) {
                        return Commerce.NotificationHandler.displayClientErrors(errors).recoverOnFailure(function () {
                            return Commerce.AsyncResult.createResolved();
                        });
                    });
                }).enqueue(function () {
                    return _this._resolvePaymentResultAsync(paymentResult);
                });
                return asyncQueue.run();
            };
            PaymentViewModel.prototype._resolvePaymentResultAsync = function (paymentResult) {
                var _this = this;
                Commerce.RetailLogger.posPaymentResultResolutionStarted(this.paymentMethodViewModel.correlationId);
                this._resolvePendingResults = false;
                return this._onPaymentResultAvailableAsync(paymentResult)
                    .done(function () {
                    Commerce.RetailLogger.posPaymentResultResolutionSucceeded(_this.paymentMethodViewModel.correlationId);
                }).fail(function (errors) {
                    Commerce.RetailLogger.posPaymentResultResolutionFailed(_this.paymentMethodViewModel.correlationId, Commerce.ErrorHelper.serializeError(errors));
                }).always(function () {
                    _this._resolvePendingResults = true;
                });
            };
            PaymentViewModel.prototype._sendMessageToExtensions = function (messageType, messageData) {
                if (Commerce.ArrayExtensions.hasElements(this._extensionCommandViewModels)) {
                    this._extensionCommandViewModels.forEach(function (vm) {
                        vm.sendMessage(messageType, messageData);
                    });
                }
            };
            PaymentViewModel.paymentViewName = "PaymentView";
            return PaymentViewModel;
        }(ViewModels.ViewModelBase));
        ViewModels.PaymentViewModel = PaymentViewModel;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        var Entities;
        (function (Entities) {
            "use strict";
        })(Entities = Payments.Entities || (Payments.Entities = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        var Utilities;
        (function (Utilities) {
            "use strict";
            var PaymentViewModelErrorHelper = (function () {
                function PaymentViewModelErrorHelper() {
                }
                PaymentViewModelErrorHelper.ConvertToClientErrors = function (errors) {
                    var paymentErrors = [];
                    var paymentSdkErrors = [];
                    for (var i = 0; i < errors.length; i++) {
                        var paymentException = errors[i].commerceException;
                        if (paymentException != null && Commerce.ArrayExtensions.hasElements(paymentException.PaymentSdkErrors)) {
                            paymentSdkErrors = PaymentViewModelErrorHelper.ConvertPaymentSdkErrorsToClientErrors(paymentException.PaymentSdkErrors);
                        }
                        if (Commerce.ArrayExtensions.hasElements(paymentSdkErrors)) {
                            paymentErrors = paymentErrors.concat(paymentSdkErrors);
                        }
                        else {
                            paymentErrors.push(PaymentViewModelErrorHelper.MapPaymentSdkErrorToClientError(errors[i]));
                        }
                    }
                    return paymentErrors;
                };
                PaymentViewModelErrorHelper.hasError = function (errors, errorType) {
                    return Commerce.Framework.ErrorConverter.hasError(errors, errorType, PaymentViewModelErrorHelper._convertErrorCodesToMap());
                };
                PaymentViewModelErrorHelper._convertErrorCodesToMap = function () {
                    return function (err) {
                        return Payments.ErrorCodes[err];
                    };
                };
                PaymentViewModelErrorHelper.ConvertPaymentSdkErrorsToClientErrors = function (errors) {
                    var paymentErrors = [];
                    for (var i = 0; i < errors.length; i++) {
                        var code = Commerce.StringExtensions.isNullOrWhitespace(errors[i].Code) ?
                            Payments.ErrorCodes.PaymentErrorTypeEnum[Payments.ErrorCodes.GENERAL_EXCEPTION_ERROR_CODE] :
                            errors[i].Code;
                        paymentErrors.push(new Commerce.Proxy.Entities.Error(Payments.ErrorCodes.PAYMENT_EXCEPTION_NAMESPACE + code.toUpperCase(), false, errors[i].Message));
                    }
                    return paymentErrors;
                };
                PaymentViewModelErrorHelper.MapPaymentSdkErrorToClientError = function (error) {
                    var result = Payments.ErrorCodes.PaymentErrorTypeEnum[error.ErrorCode];
                    var paymentError = Commerce.ObjectExtensions.isNullOrUndefined(result) ? error
                        : new Commerce.Proxy.Entities.Error(Payments.ErrorCodes.PAYMENT_EXCEPTION_NAMESPACE + result.toUpperCase(), false, error.ExternalLocalizedErrorMessage);
                    return paymentError;
                };
                return PaymentViewModelErrorHelper;
            }());
            Utilities.PaymentViewModelErrorHelper = PaymentViewModelErrorHelper;
        })(Utilities = Payments.Utilities || (Payments.Utilities = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        var Utilities;
        (function (Utilities) {
            "use strict";
            var PaymentViewModelHelper = (function () {
                function PaymentViewModelHelper() {
                }
                PaymentViewModelHelper.isPaymentTerminalAvailable = function () {
                    var paymentTerminal = Commerce.Peripherals.instance.paymentTerminal;
                    return !Commerce.ObjectExtensions.isNullOrUndefined(paymentTerminal)
                        && !Commerce.ObjectExtensions.isNullOrUndefined(paymentTerminal.isActive)
                        && paymentTerminal.isActive
                        && Commerce.Peripherals.HardwareStation.HardwareStationContext.instance.isActive();
                };
                PaymentViewModelHelper.loyaltyPointDaysToExpiry = 30;
                return PaymentViewModelHelper;
            }());
            Utilities.PaymentViewModelHelper = PaymentViewModelHelper;
        })(Utilities = Payments.Utilities || (Payments.Utilities = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var FulfillmentLineForDisplay = (function (_super) {
            __extends(FulfillmentLineForDisplay, _super);
            function FulfillmentLineForDisplay(fulfillmentLine) {
                var _this = _super.call(this, fulfillmentLine) || this;
                _this._fulfillmentLine = fulfillmentLine;
                _this.productPrimaryImageUrl = Commerce.StringExtensions.EMPTY;
                return _this;
            }
            Object.defineProperty(FulfillmentLineForDisplay.prototype, "FulfillmentStatusTranslation", {
                get: function () {
                    return Commerce.FulfillmentLineHelper.getFulfillmentStatusTranslation(this._fulfillmentLine.FulfillmentStatus);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(FulfillmentLineForDisplay.prototype, "FulfillmentDeliveryTypeTranslation", {
                get: function () {
                    return Commerce.FulfillmentLineHelper.getFulfillmentDeliveryTypeTranslation(this._fulfillmentLine.FulfillmentDeliveryType.Value);
                },
                enumerable: true,
                configurable: true
            });
            return FulfillmentLineForDisplay;
        }(Commerce.Proxy.Entities.FulfillmentLineClass));
        ViewModels.FulfillmentLineForDisplay = FulfillmentLineForDisplay;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var FulfillmentLineContextualOperationsDisplay = (function (_super) {
            __extends(FulfillmentLineContextualOperationsDisplay, _super);
            function FulfillmentLineContextualOperationsDisplay(fulfillmentLineContextualOps) {
                var _this = _super.call(this, fulfillmentLineContextualOps.FulfillmentLine) || this;
                _this._applicableOperations = fulfillmentLineContextualOps.ApplicableOperationsValues;
                return _this;
            }
            Object.defineProperty(FulfillmentLineContextualOperationsDisplay.prototype, "applicableOperations", {
                get: function () {
                    return this._applicableOperations;
                },
                enumerable: true,
                configurable: true
            });
            return FulfillmentLineContextualOperationsDisplay;
        }(ViewModels.FulfillmentLineForDisplay));
        ViewModels.FulfillmentLineContextualOperationsDisplay = FulfillmentLineContextualOperationsDisplay;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        "use strict";
        var SalesLineForDisplay = (function (_super) {
            __extends(SalesLineForDisplay, _super);
            function SalesLineForDisplay(salesLine, product) {
                var _this = _super.call(this, salesLine) || this;
                if (_this.IsGiftCardLine) {
                    _this._productName = Commerce.ViewModelAdapter.getResourceString("string_5152");
                    _this._variantDescription = Commerce.StringExtensions.EMPTY;
                    _this.ItemId = salesLine.Comment;
                }
                else if (_this.IsInvoiceLine) {
                    _this._productName = Commerce.InvoiceLineHelper.getInvoiceTypeTranslation(salesLine.InvoiceTypeValue);
                    _this._variantDescription = Commerce.StringExtensions.EMPTY;
                    _this.ItemId = salesLine.InvoiceId;
                }
                else if (!Commerce.ObjectExtensions.isNullOrUndefined(product)) {
                    _this._productName = product.Name;
                    _this._variantDescription = Commerce.SimpleProductHelper.getVariantDescription(product);
                    _this._primaryImageUrl = product.PrimaryImageUrl;
                    _this._quantityWithUom = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_837"), Commerce.NumberExtensions.formatNumber(_this.Quantity, Commerce.NumberExtensions.getDecimalPrecision()), (_this.UnitOfMeasureSymbol || Commerce.StringExtensions.EMPTY));
                }
                else {
                    _this._productName = Commerce.StringExtensions.EMPTY;
                    _this._variantDescription = Commerce.StringExtensions.EMPTY;
                    _this._primaryImageUrl = Commerce.StringExtensions.EMPTY;
                    _this._quantityWithUom = Commerce.StringExtensions.EMPTY;
                }
                if (salesLine.IsPriceOverridden) {
                    var originalFormattedPriceText = Commerce.NumberExtensions.formatCurrency(salesLine.OriginalPrice);
                    _this._priceOverrideInformation = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_4368"), originalFormattedPriceText);
                }
                else {
                    _this._priceOverrideInformation = Commerce.StringExtensions.EMPTY;
                }
                _this._product = product;
                return _this;
            }
            Object.defineProperty(SalesLineForDisplay.prototype, "productName", {
                get: function () {
                    return this._productName;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SalesLineForDisplay.prototype, "product", {
                get: function () {
                    return this._product;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SalesLineForDisplay.prototype, "variantDescription", {
                get: function () {
                    return this._variantDescription;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SalesLineForDisplay.prototype, "priceOverrideInformation", {
                get: function () {
                    return this._priceOverrideInformation;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SalesLineForDisplay.prototype, "primaryImageUrl", {
                get: function () {
                    return this._primaryImageUrl;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SalesLineForDisplay.prototype, "quantityWithUom", {
                get: function () {
                    return this._quantityWithUom;
                },
                enumerable: true,
                configurable: true
            });
            return SalesLineForDisplay;
        }(Commerce.Proxy.Entities.SalesLineClass));
        ViewModels.SalesLineForDisplay = SalesLineForDisplay;
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewModels;
    (function (ViewModels) {
        var Utilities;
        (function (Utilities) {
            "use strict";
            var ObservableProxyHelper = (function () {
                function ObservableProxyHelper() {
                }
                ObservableProxyHelper.cloneToObservableProxyObject = function (obj, changeCallback) {
                    if (changeCallback === void 0) { changeCallback = null; }
                    if (Commerce.ObjectExtensions.isNullOrUndefined(obj)) {
                        return obj;
                    }
                    var clone = Commerce.ObjectExtensions.clone(obj);
                    return ObservableProxyHelper.convertToObservableProxyObject(clone, changeCallback);
                };
                ObservableProxyHelper.unwrapObservableProxyObject = function (proxy) {
                    if (!proxy.__isObservableProxy) {
                        return proxy;
                    }
                    var unwrappedObject = {};
                    var keys = Object.keys(proxy);
                    for (var i = 0; i < keys.length; i++) {
                        var key = keys[i];
                        var keyValue = proxy[key];
                        if (keyValue == null) {
                            continue;
                        }
                        else if (ko.isObservable(keyValue)) {
                            unwrappedObject[key] = keyValue();
                            if (Array.isArray(unwrappedObject[key])) {
                                var array = unwrappedObject[key];
                                for (var j = 0; j < array.length; j++) {
                                    array[j] = Utilities.ObservableProxyHelper.unwrapObservableProxyObject(array[j]);
                                }
                            }
                        }
                        else if (typeof keyValue === "object" && keyValue.__isObservableProxy) {
                            unwrappedObject[key] = ObservableProxyHelper.unwrapObservableProxyObject(keyValue);
                        }
                        else {
                            unwrappedObject[key] = keyValue;
                        }
                    }
                    delete unwrappedObject.__isObservableProxy;
                    delete unwrappedObject.update;
                    return unwrappedObject;
                };
                ObservableProxyHelper.cloneToSimpleObservableProxyObject = function (obj) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(obj)) {
                        return null;
                    }
                    var clone = Commerce.ObjectExtensions.clone(obj);
                    var proxyObject = Object.create(null);
                    Object.keys(clone).forEach(function (propertyName) {
                        proxyObject[propertyName] = ko.observable(clone[propertyName]);
                    });
                    return ko.observable(proxyObject);
                };
                ObservableProxyHelper.unwrapSimpleObservableProxyObject = function (obj) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(obj) || !ko.isObservable(obj)) {
                        return null;
                    }
                    var unwrappedObject = {};
                    Object.keys(obj()).forEach(function (propertyName) {
                        unwrappedObject[propertyName] = obj()[propertyName]();
                    });
                    return unwrappedObject;
                };
                ObservableProxyHelper.updateObservableProxyObject = function (newValue) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(newValue)) {
                        return;
                    }
                    var keys = Object.keys(this);
                    for (var i = 0; i < keys.length; i++) {
                        var key = keys[i];
                        var keyValue = this[key];
                        if (keyValue == null) {
                            continue;
                        }
                        else if ("subscribe" in keyValue) {
                            keyValue(newValue[key]);
                        }
                        else if (typeof keyValue === "object" && newValue[key] != null) {
                            keyValue.update(newValue[key]);
                        }
                    }
                };
                ObservableProxyHelper.convertToObservableProxyObject = function (obj, changeCallback) {
                    if (changeCallback === void 0) { changeCallback = null; }
                    if (Commerce.ObjectExtensions.isNullOrUndefined(obj) || obj.__isObservableProxy ||
                        typeof obj === "string" || typeof obj === "number" || typeof obj === "boolean") {
                        return obj;
                    }
                    obj.__isObservableProxy = true;
                    var keys = Object.keys(obj);
                    for (var i = 0; i < keys.length; i++) {
                        var key = keys[i];
                        var keyValue = obj[key];
                        var keyType = typeof keyValue;
                        if (keyType === "string"
                            || keyType === "number"
                            || keyType === "boolean"
                            || keyType === "undefined"
                            || keyValue === null
                            || keyValue instanceof Date
                            || key === "CreatedDateTime") {
                            obj[key] = ko.observable(keyValue);
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(changeCallback)) {
                                obj[key].subscribe(function () {
                                    changeCallback();
                                });
                            }
                        }
                        else if (Array.isArray(keyValue)) {
                            keyValue.forEach(function (val) { return ObservableProxyHelper.convertToObservableProxyObject(val, changeCallback); });
                            obj[key] = ko.observableArray(keyValue);
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(changeCallback)) {
                                obj[key].subscribe(function () {
                                    changeCallback();
                                });
                            }
                        }
                        else if (keyType === "object") {
                            obj[key] = keyValue || null;
                            ObservableProxyHelper.convertToObservableProxyObject(obj[key], changeCallback);
                        }
                    }
                    obj.update = ObservableProxyHelper.updateObservableProxyObject;
                    return obj;
                };
                return ObservableProxyHelper;
            }());
            Utilities.ObservableProxyHelper = ObservableProxyHelper;
        })(Utilities = ViewModels.Utilities || (ViewModels.Utilities = {}));
    })(ViewModels = Commerce.ViewModels || (Commerce.ViewModels = {}));
})(Commerce || (Commerce = {}));

// SIG // Begin signature block
// SIG // MIIkCgYJKoZIhvcNAQcCoIIj+zCCI/cCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // IyJC+HlrD6r59BzWJPP+e7ts7JVSmUx0HFT6cbAtI6mg
// SIG // gg2BMIIF/zCCA+egAwIBAgITMwAAAYdyF3IVWUDHCQAA
// SIG // AAABhzANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExMB4XDTIwMDMwNDE4Mzk0N1oX
// SIG // DTIxMDMwMzE4Mzk0N1owdDELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // zrfJC3Oz90+zCiIaLmB3sDBZp6vAMruxToWQkGm1cAad
// SIG // lUuFsgdkHuE0AU/Ggc5wDQxD4xyjXT0/F8+XDWpYulx3
// SIG // n0vIv1l7RdL0rD/DRL+pgR7gNqdX8NsAfxdHR7Cdxn2e
// SIG // XNLDyY5JbImKj8OfcSeeJDPdSDoIjtjlM4zQJYz4m4wl
// SIG // nx+1M0NUzx3OHcHopbPBhCK2wUW+yFsIjmy9do1k+GIe
// SIG // 9TUILyfRZ+vlIQ/cdrpN3S4/OL8LdTbhUIrSicSFdH1b
// SIG // ETUd2m0FTi6qQ7oG69EszS+qPMczhy+Tl4hhsIOnpIlw
// SIG // Nf9l12O8lRXN/bZXnQ7WY0ozW3sdc88ElwIDAQABo4IB
// SIG // fjCCAXowHwYDVR0lBBgwFgYKKwYBBAGCN0wIAQYIKwYB
// SIG // BQUHAwMwHQYDVR0OBBYEFIaL+GcjvemsZCXTI6c7ts1V
// SIG // ziXLMFAGA1UdEQRJMEekRTBDMSkwJwYDVQQLEyBNaWNy
// SIG // b3NvZnQgT3BlcmF0aW9ucyBQdWVydG8gUmljbzEWMBQG
// SIG // A1UEBRMNMjMwMDEyKzQ1ODM4NTAfBgNVHSMEGDAWgBRI
// SIG // bmTlUAXTgqoXNzcitW2oynUClTBUBgNVHR8ETTBLMEmg
// SIG // R6BFhkNodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtp
// SIG // b3BzL2NybC9NaWNDb2RTaWdQQ0EyMDExXzIwMTEtMDct
// SIG // MDguY3JsMGEGCCsGAQUFBwEBBFUwUzBRBggrBgEFBQcw
// SIG // AoZFaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9w
// SIG // cy9jZXJ0cy9NaWNDb2RTaWdQQ0EyMDExXzIwMTEtMDct
// SIG // MDguY3J0MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQEL
// SIG // BQADggIBAIsZskuhOr6a1g/ShTSAfRuc8jLiI2QDrlCd
// SIG // RCv1ZYOhW92R1441MAEyiHF2xbhQulq+Cja1OA2P7AVa
// SIG // pmm+QAv43t26VKY7caRMqlKrT3N9MBIP6zvb5ipqiqCz
// SIG // 09+7L3NjVQZhjZfvOajuH1f8OwseydAW6pNfSnETXY7e
// SIG // niqE50zxwR5VR0CB2aTMWnGxTgJCa6gFZGGXc+4pDV08
// SIG // VfhkW9+rQuAcjDcRNgxe7xXb2omT9AlWeQcidoAIVzHS
// SIG // vfrrMc1ZPdd6inXtTgLlnb/q53apACJvH1JUZ6+LGkgo
// SIG // O3CG1MAgn9desFCexLiQ4NLx3soZwnh5wW8h90WZBxIt
// SIG // qH5n4JxSEiWQ3TAHlWRlTodtCaedFwc6qJKT83mes3Nf
// SIG // 4MiCzcolYBPkT5I51ELIXdX9TzIJ97Z7Ngs+2yYlVGqh
// SIG // Dt5/akRYMuSbi2nulMHhnwHjqN3YC2cYpCs2LN4QzGhL
// SIG // SavCD+9XF+0F3upZzJl1Px3X89qfPe2XfpFPr2byiN3M
// SIG // C37lUICtkWds/inNyt3UT89q18nCuVwrkWZrxmm/1m62
// SIG // Ygu8CUGqYAaHZbTCORjHRawYPSHhe/6z+BKlUF3irXr0
// SIG // 5WV46bjYYY7kftgzLf3Vrn416YlvdW6N2h+hGozgC15q
// SIG // MYJbQqdSu4a0uoJrL4/eHC0X+dEEOFPEMIIHejCCBWKg
// SIG // AwIBAgIKYQ6Q0gAAAAAAAzANBgkqhkiG9w0BAQsFADCB
// SIG // iDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0
// SIG // b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1p
// SIG // Y3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWlj
// SIG // cm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5
// SIG // IDIwMTEwHhcNMTEwNzA4MjA1OTA5WhcNMjYwNzA4MjEw
// SIG // OTA5WjB+MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2Fz
// SIG // aGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UE
// SIG // ChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQD
// SIG // Ex9NaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDEx
// SIG // MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA
// SIG // q/D6chAcLq3YbqqCEE00uvK2WCGfQhsqa+laUKq4Bjga
// SIG // BEm6f8MMHt03a8YS2AvwOMKZBrDIOdUBFDFC04kNeWSH
// SIG // fpRgJGyvnkmc6Whe0t+bU7IKLMOv2akrrnoJr9eWWcpg
// SIG // GgXpZnboMlImEi/nqwhQz7NEt13YxC4Ddato88tt8zpc
// SIG // oRb0RrrgOGSsbmQ1eKagYw8t00CT+OPeBw3VXHmlSSnn
// SIG // Db6gE3e+lD3v++MrWhAfTVYoonpy4BI6t0le2O3tQ5GD
// SIG // 2Xuye4Yb2T6xjF3oiU+EGvKhL1nkkDstrjNYxbc+/jLT
// SIG // swM9sbKvkjh+0p2ALPVOVpEhNSXDOW5kf1O6nA+tGSOE
// SIG // y/S6A4aN91/w0FK/jJSHvMAhdCVfGCi2zCcoOCWYOUo2
// SIG // z3yxkq4cI6epZuxhH2rhKEmdX4jiJV3TIUs+UsS1Vz8k
// SIG // A/DRelsv1SPjcF0PUUZ3s/gA4bysAoJf28AVs70b1FVL
// SIG // 5zmhD+kjSbwYuER8ReTBw3J64HLnJN+/RpnF78IcV9uD
// SIG // jexNSTCnq47f7Fufr/zdsGbiwZeBe+3W7UvnSSmnEyim
// SIG // p31ngOaKYnhfsi+E11ecXL93KCjx7W3DKI8sj0A3T8Hh
// SIG // hUSJxAlMxdSlQy90lfdu+HggWCwTXWCVmj5PM4TasIgX
// SIG // 3p5O9JawvEagbJjS4NaIjAsCAwEAAaOCAe0wggHpMBAG
// SIG // CSsGAQQBgjcVAQQDAgEAMB0GA1UdDgQWBBRIbmTlUAXT
// SIG // gqoXNzcitW2oynUClTAZBgkrBgEEAYI3FAIEDB4KAFMA
// SIG // dQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUw
// SIG // AwEB/zAfBgNVHSMEGDAWgBRyLToCMZBDuRQFTuHqp8cx
// SIG // 0SOJNDBaBgNVHR8EUzBRME+gTaBLhklodHRwOi8vY3Js
// SIG // Lm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9N
// SIG // aWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3JsMF4G
// SIG // CCsGAQUFBwEBBFIwUDBOBggrBgEFBQcwAoZCaHR0cDov
// SIG // L3d3dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNS
// SIG // b29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3J0MIGfBgNV
// SIG // HSAEgZcwgZQwgZEGCSsGAQQBgjcuAzCBgzA/BggrBgEF
// SIG // BQcCARYzaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3Br
// SIG // aW9wcy9kb2NzL3ByaW1hcnljcHMuaHRtMEAGCCsGAQUF
// SIG // BwICMDQeMiAdAEwAZQBnAGEAbABfAHAAbwBsAGkAYwB5
// SIG // AF8AcwB0AGEAdABlAG0AZQBuAHQALiAdMA0GCSqGSIb3
// SIG // DQEBCwUAA4ICAQBn8oalmOBUeRou09h0ZyKbC5YR4WOS
// SIG // mUKWfdJ5DJDBZV8uLD74w3LRbYP+vj/oCso7v0epo/Np
// SIG // 22O/IjWll11lhJB9i0ZQVdgMknzSGksc8zxCi1LQsP1r
// SIG // 4z4HLimb5j0bpdS1HXeUOeLpZMlEPXh6I/MTfaaQdION
// SIG // 9MsmAkYqwooQu6SpBQyb7Wj6aC6VoCo/KmtYSWMfCWlu
// SIG // WpiW5IP0wI/zRive/DvQvTXvbiWu5a8n7dDd8w6vmSiX
// SIG // mE0OPQvyCInWH8MyGOLwxS3OW560STkKxgrCxq2u5bLZ
// SIG // 2xWIUUVYODJxJxp/sfQn+N4sOiBpmLJZiWhub6e3dMNA
// SIG // BQamASooPoI/E01mC8CzTfXhj38cbxV9Rad25UAqZaPD
// SIG // XVJihsMdYzaXht/a8/jyFqGaJ+HNpZfQ7l1jQeNbB5yH
// SIG // PgZ3BtEGsXUfFL5hYbXw3MYbBL7fQccOKO7eZS/sl/ah
// SIG // XJbYANahRr1Z85elCUtIEJmAH9AAKcWxm6U/RXceNcbS
// SIG // oqKfenoi+kiVH6v7RyOA9Z74v2u3S5fi63V4GuzqN5l5
// SIG // GEv/1rMjaHXmr/r8i+sLgOppO6/8MO0ETI7f33VtY5E9
// SIG // 0Z1WTk+/gFcioXgRMiF670EKsT/7qMykXcGhiJtXcVZO
// SIG // SEXAQsmbdlsKgEhr/Xmfwb1tbWrJUnMTDXpQzTGCFeEw
// SIG // ghXdAgEBMIGVMH4xCzAJBgNVBAYTAlVTMRMwEQYDVQQI
// SIG // EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4w
// SIG // HAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xKDAm
// SIG // BgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25pbmcgUENB
// SIG // IDIwMTECEzMAAAGHchdyFVlAxwkAAAAAAYcwDQYJYIZI
// SIG // AWUDBAIBBQCgggEnMBkGCSqGSIb3DQEJAzEMBgorBgEE
// SIG // AYI3AgEEMBwGCisGAQQBgjcCAQsxDjAMBgorBgEEAYI3
// SIG // AgEVMC8GCSqGSIb3DQEJBDEiBCCXiySaXzVtJeLOm+eS
// SIG // 9an0ECPnjn7cwD7EZiIGeLkLYzCBugYKKwYBBAGCNwIB
// SIG // DDGBqzCBqKCBiYCBhgBTAGkAbQBwAGwAaQBmAHkAQwBv
// SIG // AG0AbQBlAHIAYwBlAC4ATQBpAGMAcgBvAHMAbwBmAHQA
// SIG // RAB5AG4AYQBtAGkAYwBzAC4AQwBvAG4AbgBlAGMAdABv
// SIG // AHIALgBQAG8AcgB0AGEAYgBsAGUALgByAGUAcwBvAHUA
// SIG // cgBjAGUAcwAuAGQAbABsoRqAGGh0dHA6Ly93d3cubWlj
// SIG // cm9zb2Z0LmNvbTANBgkqhkiG9w0BAQEFAASCAQAPrQ7C
// SIG // 1ie/uOC51BNPSttAg3d5yUIn9VHi3VPb2uYgslbczezR
// SIG // RmJC9h466+C+ToFa8XKrk0Qatmo29yRNYEnYXtfbJh4f
// SIG // Wg2nBWWTxsUxvxfTnLXcMvGwhiFH5G54bwszBKihWi3i
// SIG // EyWt/AXAW+imzbYA+lOtyo6ftrMOXftVTn0oPzFTXKto
// SIG // V2J0OaPhohWnjB3FHOjJHcmSm4v1FVzlaMs+FfwGFAJA
// SIG // jhFzRDR8nTImFpNtDtON65eLdTPZEf1i46+DwomKuGZq
// SIG // Pcw9KIeVtsXLQw3uNWcMgruJ2t8l/Eut8AYY3PSKWpCe
// SIG // 0KHKDqlCrccGIMd91B3clOL6IEbUoYIS8TCCEu0GCisG
// SIG // AQQBgjcDAwExghLdMIIS2QYJKoZIhvcNAQcCoIISyjCC
// SIG // EsYCAQMxDzANBglghkgBZQMEAgEFADCCAVUGCyqGSIb3
// SIG // DQEJEAEEoIIBRASCAUAwggE8AgEBBgorBgEEAYRZCgMB
// SIG // MDEwDQYJYIZIAWUDBAIBBQAEIDal0Cd9J7is3DadHOG8
// SIG // LXlXhIkstiUAYxQSrDn0pttVAgZfPAfnQW8YEzIwMjAw
// SIG // ODIzMDQwMzQ2LjY3NFowBIACAfSggdSkgdEwgc4xCzAJ
// SIG // BgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAw
// SIG // DgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3Nv
// SIG // ZnQgQ29ycG9yYXRpb24xKTAnBgNVBAsTIE1pY3Jvc29m
// SIG // dCBPcGVyYXRpb25zIFB1ZXJ0byBSaWNvMSYwJAYDVQQL
// SIG // Ex1UaGFsZXMgVFNTIEVTTjo0RDJGLUUzREQtQkVFRjEl
// SIG // MCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2Vy
// SIG // dmljZaCCDkQwggT1MIID3aADAgECAhMzAAABK5PQ7Y4K
// SIG // 9/BHAAAAAAErMA0GCSqGSIb3DQEBCwUAMHwxCzAJBgNV
// SIG // BAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYD
// SIG // VQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQg
// SIG // Q29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBU
// SIG // aW1lLVN0YW1wIFBDQSAyMDEwMB4XDTE5MTIxOTAxMTUw
// SIG // MloXDTIxMDMxNzAxMTUwMlowgc4xCzAJBgNVBAYTAlVT
// SIG // MRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdS
// SIG // ZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9y
// SIG // YXRpb24xKTAnBgNVBAsTIE1pY3Jvc29mdCBPcGVyYXRp
// SIG // b25zIFB1ZXJ0byBSaWNvMSYwJAYDVQQLEx1UaGFsZXMg
// SIG // VFNTIEVTTjo0RDJGLUUzREQtQkVFRjElMCMGA1UEAxMc
// SIG // TWljcm9zb2Z0IFRpbWUtU3RhbXAgU2VydmljZTCCASIw
// SIG // DQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJb6i4/A
// SIG // WVpXjQAludgANHARSFyzEjltq7Udsw5sSZo68N8oWkL+
// SIG // QKz842RqIiggTltm6dHYFcmB1YRRqMdX6Y7gJT9Sp8FV
// SIG // I10FxGF5I6d6BtQCjDBc2/s1ih0E111SANl995D8FgY8
// SIG // ea5u1nqEomlCBbjdoqYy3APET2hABpIM6hcwIaxCvd+u
// SIG // gmJnHSP+PxI/8RxJh8jT/GFRzkL1wy/kD2iMl711Czg3
// SIG // DL/yAHXusqSw95hZmW2mtL7HNvSz04rifjZw3QnYPwIi
// SIG // 46CSi34Kr9p9dB1VV7++Zo9SmgdjmvGeFjH2Jth3xExP
// SIG // koULaWrvIbqcpOs9E7sAUJTBsB0CAwEAAaOCARswggEX
// SIG // MB0GA1UdDgQWBBQi72h0uFIDuXSWYWPz0HeSiMCTBTAf
// SIG // BgNVHSMEGDAWgBTVYzpcijGQ80N7fEYbxTNoWoVtVTBW
// SIG // BgNVHR8ETzBNMEugSaBHhkVodHRwOi8vY3JsLm1pY3Jv
// SIG // c29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNUaW1T
// SIG // dGFQQ0FfMjAxMC0wNy0wMS5jcmwwWgYIKwYBBQUHAQEE
// SIG // TjBMMEoGCCsGAQUFBzAChj5odHRwOi8vd3d3Lm1pY3Jv
// SIG // c29mdC5jb20vcGtpL2NlcnRzL01pY1RpbVN0YVBDQV8y
// SIG // MDEwLTA3LTAxLmNydDAMBgNVHRMBAf8EAjAAMBMGA1Ud
// SIG // JQQMMAoGCCsGAQUFBwMIMA0GCSqGSIb3DQEBCwUAA4IB
// SIG // AQBnP/nYpaY+bpVs4jJlH7SsElV4cOvdpnCng+XoxtZn
// SIG // NhVboQQlpLr7OQ/m4Oc78707RF8onyXTSWJMvHDVhBD7
// SIG // 4qGuY3KFmqWGw4MGqGLqECUnUH//xtfhZPMdixuMDBmY
// SIG // 7StqkUUuX5TRRVh7zNdVqS7mE+GzEUedzI2ndTVGJtBU
// SIG // I73cU7wUe8lefIEnXzKfxsycTxUos0nUI2YoKGn89ZWP
// SIG // KS/Y4m35WE3YirmTMjK57B5A6KEGSBk9vqyrGNivEGoq
// SIG // JN+mMN8ZULJJKOtFLzgxVg7mz5c/JgsMRPvFwZU96hWc
// SIG // LgrNV5D3fNAnWmiCLCMjiI8N8IQszZvAEpzIMIIGcTCC
// SIG // BFmgAwIBAgIKYQmBKgAAAAAAAjANBgkqhkiG9w0BAQsF
// SIG // ADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hp
// SIG // bmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoT
// SIG // FU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMp
// SIG // TWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9y
// SIG // aXR5IDIwMTAwHhcNMTAwNzAxMjEzNjU1WhcNMjUwNzAx
// SIG // MjE0NjU1WjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMK
// SIG // V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
// SIG // A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYD
// SIG // VQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAx
// SIG // MDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB
// SIG // AKkdDbx3EYo6IOz8E5f1+n9plGt0VBDVpQoAgoX77Xxo
// SIG // SyxfxcPlYcJ2tz5mK1vwFVMnBDEfQRsalR3OCROOfGEw
// SIG // WbEwRA/xYIiEVEMM1024OAizQt2TrNZzMFcmgqNFDdDq
// SIG // 9UeBzb8kYDJYYEbyWEeGMoQedGFnkV+BVLHPk0ySwcSm
// SIG // XdFhE24oxhr5hoC732H8RsEnHSRnEnIaIYqvS2SJUGKx
// SIG // Xf13Hz3wV3WsvYpCTUBR0Q+cBj5nf/VmwAOWRH7v0Ev9
// SIG // buWayrGo8noqCjHw2k4GkbaICDXoeByw6ZnNPOcvRLqn
// SIG // 9NxkvaQBwSAJk3jN/LzAyURdXhacAQVPIk0CAwEAAaOC
// SIG // AeYwggHiMBAGCSsGAQQBgjcVAQQDAgEAMB0GA1UdDgQW
// SIG // BBTVYzpcijGQ80N7fEYbxTNoWoVtVTAZBgkrBgEEAYI3
// SIG // FAIEDB4KAFMAdQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYD
// SIG // VR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBTV9lbLj+ii
// SIG // XGJo0T2UkFvXzpoYxDBWBgNVHR8ETzBNMEugSaBHhkVo
// SIG // dHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9w
// SIG // cm9kdWN0cy9NaWNSb29DZXJBdXRfMjAxMC0wNi0yMy5j
// SIG // cmwwWgYIKwYBBQUHAQEETjBMMEoGCCsGAQUFBzAChj5o
// SIG // dHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRz
// SIG // L01pY1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNydDCBoAYD
// SIG // VR0gAQH/BIGVMIGSMIGPBgkrBgEEAYI3LgMwgYEwPQYI
// SIG // KwYBBQUHAgEWMWh0dHA6Ly93d3cubWljcm9zb2Z0LmNv
// SIG // bS9QS0kvZG9jcy9DUFMvZGVmYXVsdC5odG0wQAYIKwYB
// SIG // BQUHAgIwNB4yIB0ATABlAGcAYQBsAF8AUABvAGwAaQBj
// SIG // AHkAXwBTAHQAYQB0AGUAbQBlAG4AdAAuIB0wDQYJKoZI
// SIG // hvcNAQELBQADggIBAAfmiFEN4sbgmD+BcQM9naOhIW+z
// SIG // 66bM9TG+zwXiqf76V20ZMLPCxWbJat/15/B4vceoniXj
// SIG // +bzta1RXCCtRgkQS+7lTjMz0YBKKdsxAQEGb3FwX/1z5
// SIG // Xhc1mCRWS3TvQhDIr79/xn/yN31aPxzymXlKkVIArzgP
// SIG // F/UveYFl2am1a+THzvbKegBvSzBEJCI8z+0DpZaPWSm8
// SIG // tv0E4XCfMkon/VWvL/625Y4zu2JfmttXQOnxzplmkIz/
// SIG // amJ/3cVKC5Em4jnsGUpxY517IW3DnKOiPPp/fZZqkHim
// SIG // bdLhnPkd/DjYlPTGpQqWhqS9nhquBEKDuLWAmyI4ILUl
// SIG // 5WTs9/S/fmNZJQ96LjlXdqJxqgaKD4kWumGnEcua2A5H
// SIG // moDF0M2n0O99g/DhO3EJ3110mCIIYdqwUB5vvfHhAN/n
// SIG // MQekkzr3ZUd46PioSKv33nJ+YWtvd6mBy6cJrDm77MbL
// SIG // 2IK0cs0d9LiFAR6A+xuJKlQ5slvayA1VmXqHczsI5pgt
// SIG // 6o3gMy4SKfXAL1QnIffIrE7aKLixqduWsqdCosnPGUFN
// SIG // 4Ib5KpqjEWYw07t0MkvfY3v1mYovG8chr1m1rtxEPJdQ
// SIG // cdeh0sVV42neV8HR3jDA/czmTfsNv11P6Z0eGTgvvM9Y
// SIG // BS7vDaBQNdrvCScc1bN+NR4Iuto229Nfj950iEkSoYIC
// SIG // 0jCCAjsCAQEwgfyhgdSkgdEwgc4xCzAJBgNVBAYTAlVT
// SIG // MRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdS
// SIG // ZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9y
// SIG // YXRpb24xKTAnBgNVBAsTIE1pY3Jvc29mdCBPcGVyYXRp
// SIG // b25zIFB1ZXJ0byBSaWNvMSYwJAYDVQQLEx1UaGFsZXMg
// SIG // VFNTIEVTTjo0RDJGLUUzREQtQkVFRjElMCMGA1UEAxMc
// SIG // TWljcm9zb2Z0IFRpbWUtU3RhbXAgU2VydmljZaIjCgEB
// SIG // MAcGBSsOAwIaAxUARAw2kg/n/0n60D7eGy96WYdDT6ag
// SIG // gYMwgYCkfjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMK
// SIG // V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
// SIG // A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYD
// SIG // VQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAx
// SIG // MDANBgkqhkiG9w0BAQUFAAIFAOLrzE8wIhgPMjAyMDA4
// SIG // MjIyMDU0MzlaGA8yMDIwMDgyMzIwNTQzOVowdzA9Bgor
// SIG // BgEEAYRZCgQBMS8wLTAKAgUA4uvMTwIBADAKAgEAAgIb
// SIG // PgIB/zAHAgEAAgIRqDAKAgUA4u0dzwIBADA2BgorBgEE
// SIG // AYRZCgQCMSgwJjAMBgorBgEEAYRZCgMCoAowCAIBAAID
// SIG // B6EgoQowCAIBAAIDAYagMA0GCSqGSIb3DQEBBQUAA4GB
// SIG // ABH7zko0c2bwNNdMpqBh/klsggy4GZZ4i1xHuYRKyrne
// SIG // kiI7MuSLlFKnFJ4e9oBhPN981uQ+1j6fnVjUe49lT/Gb
// SIG // vGEKuEEL5JRXa1dL0cMia6Aao+CJ1TNc3AqzFq94p5hf
// SIG // tbqrP6PproI/WDADZwhmeGsVwCBoTkUiCjSDWJ89MYID
// SIG // DTCCAwkCAQEwgZMwfDELMAkGA1UEBhMCVVMxEzARBgNV
// SIG // BAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQx
// SIG // HjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEm
// SIG // MCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENB
// SIG // IDIwMTACEzMAAAErk9Dtjgr38EcAAAAAASswDQYJYIZI
// SIG // AWUDBAIBBQCgggFKMBoGCSqGSIb3DQEJAzENBgsqhkiG
// SIG // 9w0BCRABBDAvBgkqhkiG9w0BCQQxIgQgXtqlDRqsoMi8
// SIG // a7eQWaZraKzz27TuKnMZAYF2TM0aWQMwgfoGCyqGSIb3
// SIG // DQEJEAIvMYHqMIHnMIHkMIG9BCBkJznmSoXCUyxc3HvY
// SIG // jOIqWMdG6L6tTAg3KsLaXRvPXzCBmDCBgKR+MHwxCzAJ
// SIG // BgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAw
// SIG // DgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3Nv
// SIG // ZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29m
// SIG // dCBUaW1lLVN0YW1wIFBDQSAyMDEwAhMzAAABK5PQ7Y4K
// SIG // 9/BHAAAAAAErMCIEIKWi2PCoLIQlXkf0KzAdIvCXqf2d
// SIG // 5Y/xHtKKwxl/Gqu2MA0GCSqGSIb3DQEBCwUABIIBABxL
// SIG // FX8qhTBWEZZWuL9AFDs8RSspBvAq+GRJiRtdot7D//u4
// SIG // Mifuy53ZeunbrXlSTsEhCRTee818KA2wWCpP2CX3aIIg
// SIG // c/l/xWEYoHUlJxEHe0Ts35ZfTS7T4/soCc52u50hYHE8
// SIG // upsIpdl8D50Rnt/qpOOyBiOe68hFFZoIAefKj3OyAZ87
// SIG // Wp5a2Z1vMbX3KwSPzhsoZAGi7eKQoF0ecv0VehHMOzBM
// SIG // r7cN8Vld+FN4AbdR2i5osOyhOucQGavBQSXCjrBo8NKf
// SIG // kFjJy8qWiuBS0u/laJxLKyIGXJ3UrF+dgXfJSPNF+fZl
// SIG // PQLCsx9QEo/nof5aFvuPSGE5xnB4DPs=
// SIG // End signature block
