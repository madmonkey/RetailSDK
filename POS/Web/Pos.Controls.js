"use strict";
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var ControlBase = (function () {
            function ControlBase() {
                this._eventManager = new Commerce.EventManager();
            }
            ControlBase.prototype.dispose = function () {
                Commerce.ObjectExtensions.disposeAllProperties(this);
            };
            ControlBase.prototype.addEventListener = function (eventName, eventListener) {
                this._eventManager.addEventListener(eventName, eventListener);
            };
            ControlBase.prototype.removeEventListener = function (eventName, eventListener) {
                this._eventManager.removeEventListener(eventName, eventListener);
            };
            ControlBase.prototype._raiseEvent = function (eventName, eventData) {
                this._eventManager.raiseEvent(eventName, eventData);
            };
            ControlBase.prototype._renderBinding = function (bindingName, bindingOptions, rootElement) {
                var isValidBindingName = Object.keys(ko.bindingHandlers).some(function (bindingHandlersKey) {
                    return bindingHandlersKey === bindingName;
                });
                if (!isValidBindingName) {
                    throw "The given binding name is invalid.";
                }
                var childElement = document.createElement("div");
                childElement.setAttribute("data-bind", "__posStopExtensionBinding");
                var grandchildElement = document.createElement("div");
                rootElement.appendChild(childElement);
                childElement.appendChild(grandchildElement);
                this._applyBindingRequirements(childElement, grandchildElement);
                var bindingData = {};
                bindingData[bindingName] = bindingOptions;
                ko.applyBindingsToNode(grandchildElement, bindingData);
            };
            ControlBase.prototype._applyBindingRequirements = function (childElement, grandchildElement) {
                return;
            };
            return ControlBase;
        }());
        Controls.ControlBase = ControlBase;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var DataList;
        (function (DataList) {
            "use strict";
            var DataListInteractionMode = Commerce.Extensibility.DataListInteractionMode;
            var DataListBase = (function (_super) {
                __extends(DataListBase, _super);
                function DataListBase(options) {
                    var _this = _super.call(this) || this;
                    _this._columns = options.columns;
                    _this._equalityComparer = options.equalityComparer;
                    _this._interactionMode = options.interactionMode;
                    _this._itemInvoked = function (itemEvoked) {
                        _this._raiseEvent("ItemInvoked", { item: itemEvoked });
                    };
                    _this._selectionChanged = function (itemsSelected) {
                        _this._raiseEvent("SelectionChanged", { items: itemsSelected });
                    };
                    return _this;
                }
                Object.defineProperty(DataListBase.prototype, "interactionMode", {
                    get: function () {
                        return this._interactionMode;
                    },
                    enumerable: true,
                    configurable: true
                });
                DataListBase.prototype.selectAll = function () {
                    if (this._hasValidViewModel() && this._interactionMode === DataListInteractionMode.MultiSelect) {
                        var dataListViewModel = this._dataListElement.dataListViewModel;
                        dataListViewModel.selectAll();
                    }
                };
                DataListBase.prototype.selectItems = function (items) {
                    if (this._hasValidViewModel()) {
                        var dataListViewModel = this._dataListElement.dataListViewModel;
                        dataListViewModel.selectItems(items, this._equalityComparer);
                    }
                };
                DataListBase.prototype.clearSelection = function () {
                    if (this._hasValidViewModel()) {
                        var dataListViewModel = this._dataListElement.dataListViewModel;
                        dataListViewModel.clearAll();
                    }
                };
                DataListBase.prototype._applyBindingRequirements = function (childElement, grandchildElement) {
                    childElement.classList.add("height100Percent");
                    grandchildElement.id = this._getDataListUniqueId();
                    this._dataListElement = grandchildElement;
                };
                Object.defineProperty(DataListBase.prototype, "_selectionMode", {
                    get: function () {
                        switch (this._interactionMode) {
                            case DataListInteractionMode.None:
                                return DataList.SelectionMode.None;
                            case DataListInteractionMode.Invoke:
                                return DataList.SelectionMode.InvokeOnly;
                            case DataListInteractionMode.SingleSelect:
                                return DataList.SelectionMode.SingleSelect;
                            case DataListInteractionMode.MultiSelect:
                                return DataList.SelectionMode.MultiSelect;
                            default:
                                return DataList.SelectionMode.None;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                DataListBase.prototype._getDataListUniqueId = function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(this._dataListUniqueId)) {
                        this._dataListUniqueId = Commerce.StringExtensions.format("dataListControlUniqueId_{0}", DataListBase._dataListCounter);
                        DataListBase._dataListCounter++;
                    }
                    return this._dataListUniqueId;
                };
                DataListBase.prototype._hasValidViewModel = function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(this._dataListElement)
                        && (this._dataListElement.dataListViewModel instanceof DataList.DataListViewModel);
                };
                DataListBase._dataListCounter = 0;
                return DataListBase;
            }(Controls.ControlBase));
            DataList.DataListBase = DataListBase;
        })(DataList = Controls.DataList || (Controls.DataList = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var DataList;
        (function (DataList_1) {
            "use strict";
            var DataList = (function (_super) {
                __extends(DataList, _super);
                function DataList(options) {
                    var _this = _super.call(this, options) || this;
                    _this._data = ko.observableArray(options.data);
                    return _this;
                }
                Object.defineProperty(DataList.prototype, "data", {
                    get: function () {
                        return this._data();
                    },
                    set: function (data) {
                        this._data(data);
                    },
                    enumerable: true,
                    configurable: true
                });
                DataList.prototype.render = function (rootElement) {
                    $(rootElement).addClass("height100Percent");
                    this._renderBinding("dataList", {
                        columns: this._columns,
                        itemDataSource: this._data,
                        itemInvoked: this._itemInvoked,
                        selectionChanged: this._selectionChanged,
                        selectionModes: this._selectionMode
                    }, rootElement);
                };
                return DataList;
            }(DataList_1.DataListBase));
            DataList_1.DataList = DataList;
        })(DataList = Controls.DataList || (Controls.DataList = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var DatePicker;
        (function (DatePicker_1) {
            "use strict";
            var DatePicker = (function (_super) {
                __extends(DatePicker, _super);
                function DatePicker(options) {
                    var _this = _super.call(this) || this;
                    _this.DATE_PATTERN = "{day.integer(2)} {dayofweek.full}";
                    _this._date = ko.observable(options.date);
                    _this._enabled = ko.observable(options.enabled);
                    _this._disabled = ko.computed(function () {
                        return !_this._enabled();
                    });
                    _this._dateSubscription = _this._date.subscribe(function (newValue) {
                        _this._raiseEvent("DateChanged", { date: newValue });
                    });
                    return _this;
                }
                Object.defineProperty(DatePicker.prototype, "date", {
                    get: function () {
                        return this._date();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DatePicker.prototype, "enabled", {
                    get: function () {
                        return this._enabled();
                    },
                    set: function (newValue) {
                        this._enabled(newValue);
                    },
                    enumerable: true,
                    configurable: true
                });
                DatePicker.prototype.dispose = function () {
                    this._dateSubscription.dispose();
                    _super.prototype.dispose.call(this);
                };
                DatePicker.prototype.render = function (rootElement) {
                    var _this = this;
                    this._renderBinding("datePicker", {
                        current: this._date(),
                        datePattern: this.DATE_PATTERN,
                        disabled: this._disabled,
                        onChange: function (newDateValue) {
                            _this._date(newDateValue);
                        }
                    }, rootElement);
                };
                return DatePicker;
            }(Controls.ControlBase));
            DatePicker_1.DatePicker = DatePicker;
        })(DatePicker = Controls.DatePicker || (Controls.DatePicker = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var ToggleSwitch;
        (function (ToggleSwitch) {
            var Toggle = (function (_super) {
                __extends(Toggle, _super);
                function Toggle(options) {
                    var _this = _super.call(this) || this;
                    _this._labelOn = options.labelOn;
                    _this._labelOff = options.labelOff;
                    _this._checked = ko.observable(options.checked);
                    _this._enabled = ko.observable(options.enabled);
                    _this._tabIndex = options.tabIndex;
                    _this._checkedSubscription = _this._checked.subscribe(function (newValue) {
                        _this._raiseEvent("CheckedChanged", { checked: newValue });
                    });
                    return _this;
                }
                Toggle.prototype.dispose = function () {
                    this._checkedSubscription.dispose();
                    _super.prototype.dispose.call(this);
                };
                Toggle.prototype.render = function (rootElement) {
                    var _this = this;
                    this._renderBinding("toggleSwitch", {
                        checked: this._checked,
                        enabled: this._enabled,
                        labelOn: this._labelOn,
                        labelOff: this._labelOff,
                        tabIndex: this._tabIndex,
                        onChange: function (newCheckedValue) {
                            _this._checked(newCheckedValue);
                        },
                        title: Commerce.StringExtensions.EMPTY
                    }, rootElement);
                };
                Object.defineProperty(Toggle.prototype, "checked", {
                    get: function () {
                        return this._checked();
                    },
                    set: function (newValue) {
                        this._checked(newValue);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Toggle.prototype, "enabled", {
                    get: function () {
                        return this._enabled();
                    },
                    set: function (newValue) {
                        this._enabled(newValue);
                    },
                    enumerable: true,
                    configurable: true
                });
                return Toggle;
            }(Controls.ControlBase));
            ToggleSwitch.Toggle = Toggle;
        })(ToggleSwitch = Controls.ToggleSwitch || (Controls.ToggleSwitch = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var ControlName;
        (function (ControlName) {
            ControlName["DataList"] = "DataList";
            ControlName["PaginatedDataList"] = "PaginatedDataList";
            ControlName["DatePicker"] = "DatePicker";
            ControlName["Menu"] = "Menu";
            ControlName["TimePicker"] = "TimePicker";
            ControlName["Toggle"] = "Toggle";
            ControlName["AlphanumericNumPad"] = "AlphanumericNumPad";
            ControlName["CurrencyNumPad"] = "CurrencyNumPad";
            ControlName["NumericNumPad"] = "NumericNumPad";
            ControlName["TransactionNumPad"] = "TransactionNumPad";
        })(ControlName = Controls.ControlName || (Controls.ControlName = {}));
        var ControlFactory = (function () {
            function ControlFactory() {
            }
            ControlFactory.prototype.create = function (correlationId, controlName, controlOptions, rootHTMLElement) {
                var controlClassType;
                switch (controlName) {
                    case ControlName.DataList:
                        controlClassType = Controls.DataList.DataList;
                        break;
                    case ControlName.PaginatedDataList:
                        controlClassType = Controls.DataList.PaginatedDataList;
                        break;
                    case ControlName.DatePicker:
                        controlClassType = Controls.DatePicker.DatePicker;
                        break;
                    case ControlName.Menu:
                        controlClassType = Controls.Menu.Menu;
                        break;
                    case ControlName.TimePicker:
                        controlClassType = Controls.TimePicker.TimePicker;
                        break;
                    case ControlName.Toggle:
                        controlClassType = Controls.ToggleSwitch.Toggle;
                        break;
                    case ControlName.AlphanumericNumPad:
                        controlClassType = Controls.NumPad.AlphanumericNumPad;
                        break;
                    case ControlName.CurrencyNumPad:
                        controlClassType = Controls.NumPad.CurrencyNumPad;
                        break;
                    case ControlName.NumericNumPad:
                        controlClassType = Controls.NumPad.NumericNumPad;
                        break;
                    case ControlName.TransactionNumPad:
                        controlClassType = Controls.NumPad.TransactionNumPad;
                        break;
                    default:
                        Commerce.RetailLogger.controlFactoryControlNameInvalid(controlName, correlationId);
                        throw new Error("ControlFactory.create - Unsupported control name provided");
                }
                try {
                    var control = new controlClassType(controlOptions);
                    control.render(rootHTMLElement);
                    return control;
                }
                catch (ex) {
                    Commerce.RetailLogger.controlFactoryCreatingControlInstanceFailed(correlationId, controlName, ex.message);
                    throw ex;
                }
            };
            return ControlFactory;
        }());
        Controls.ControlFactory = ControlFactory;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        function getFrameworkControlConfigurations() {
            return [
                {
                    name: "MessageDialog",
                    contentFolderPath: "Controls/Dialogs/Framework",
                    control: Controls.MessageDialog
                }
            ];
        }
        Controls.getFrameworkControlConfigurations = getFrameworkControlConfigurations;
        function getControlConfigurations() {
            var controls = [
                {
                    name: "ActivationErrorControl",
                    contentFolderPath: "Controls/ActivationErrorControl",
                    control: Controls.ActivationErrorControl
                },
                {
                    name: "DeveloperMode",
                    contentFolderPath: "Controls/DeveloperMode",
                    control: Controls.DeveloperMode
                },
                {
                    name: "DeviceDeactivation",
                    contentFolderPath: "Controls/DeviceDeactivation",
                    control: Controls.DeviceDeactivation
                },
                {
                    name: "AddDiscountDialog",
                    contentFolderPath: "Controls/Dialogs/Cart",
                    control: Controls.AddDiscountDialog
                },
                {
                    name: "AddIssueGiftCardDialog",
                    contentFolderPath: "Controls/Dialogs/Payments",
                    control: Controls.AddIssueGiftCardDialog
                },
                {
                    name: "AmountDueDialog",
                    contentFolderPath: "Controls/Dialogs/Cart",
                    control: Controls.AmountDueDialog
                },
                {
                    name: "ApprovePartialAmountDialog",
                    contentFolderPath: "Controls/Dialogs/Payments",
                    control: Controls.ApprovePartialAmountDialog
                },
                {
                    name: "AskQuestionDialog",
                    contentFolderPath: "Controls/Dialogs/Framework",
                    control: Controls.AskQuestionDialog
                },
                {
                    name: "AssignExtendedLogOnDialog",
                    contentFolderPath: "Controls/Dialogs/EmployeeManagement",
                    control: Controls.AssignExtendedLogOnDialog
                },
                {
                    name: "AvailableDiscountsDialog",
                    contentFolderPath: "Controls/Dialogs/Cart",
                    control: Controls.AvailableDiscountsDialog
                },
                {
                    name: "CardTypeDialog",
                    contentFolderPath: "Controls/Dialogs/Payments",
                    control: Controls.CardTypeDialog
                },
                {
                    name: "CashbackDialog",
                    contentFolderPath: "Controls/Dialogs/Payments",
                    control: Controls.CashbackDialog
                },
                {
                    name: "CashDrawerInputDialog",
                    contentFolderPath: "Controls/Dialogs/Peripherals",
                    control: Controls.CashDrawerInputDialog
                },
                {
                    name: "ChangeDialog",
                    contentFolderPath: "Controls/Dialogs/Cart",
                    control: Controls.ChangeDialog
                },
                {
                    name: "ChangeDueDialog",
                    contentFolderPath: "Controls/Dialogs/Cart",
                    control: Controls.ChangeDueDialog
                },
                {
                    name: "CheckedListInputDialog",
                    contentFolderPath: "Controls/Dialogs/Framework",
                    control: Controls.CheckedListInputDialog
                },
                {
                    name: "CheckSuspendedTransactionsDialog",
                    contentFolderPath: "Controls/Dialogs/EmployeeManagement",
                    control: Controls.CheckSuspendedTransactionsDialog
                },
                {
                    name: "CreateOrUpdateInventoryDocumentHeaderDialog",
                    contentFolderPath: "Controls/Dialogs/Inventory",
                    control: Controls.CreateOrUpdateInventoryDocumentHeaderDialog
                },
                {
                    name: "CommentDialog",
                    contentFolderPath: "Controls/Dialogs/Orders",
                    control: Controls.CommentDialog
                },
                {
                    name: "CustomerContactInfoDialog",
                    contentFolderPath: "Controls/Dialogs/Clienteling",
                    control: Controls.CustomerContactInfoDialog
                },
                {
                    name: "DatabaseConnectionStatusDialog",
                    contentFolderPath: "Controls/Dialogs/OfflineMode",
                    control: Controls.DatabaseConnectionStatusDialog
                },
                {
                    name: "DateInputDialog",
                    contentFolderPath: "Controls/Dialogs/Framework",
                    control: Controls.DateInputDialog
                },
                {
                    name: "DateRangeInputDialog",
                    contentFolderPath: "Controls/Dialogs/Framework",
                    control: Controls.DateRangeInputDialog
                },
                {
                    name: "EditChecklistTaskDialog",
                    contentFolderPath: "Controls/Dialogs/TaskManagement",
                    control: Controls.EditChecklistTaskDialog
                },
                {
                    name: "EditSalesOrderAttributesDialog",
                    contentFolderPath: "Controls/Dialogs/Orders",
                    control: Controls.EditSalesOrderAttributesDialog
                },
                {
                    name: "EmailReceiptDialog",
                    contentFolderPath: "Controls/Dialogs/Clienteling",
                    control: Controls.EmailReceiptDialog
                },
                {
                    name: "ExtensionDetailsDialog",
                    contentFolderPath: "Controls/Dialogs/Extensibility",
                    control: Controls.ExtensionDetailsDialog
                },
                {
                    name: "ExtensionTemplatedDialog",
                    contentFolderPath: "Controls/Dialogs/Extensibility",
                    control: Controls.ExtensionTemplatedDialog
                },
                {
                    name: "FiscalRegistrationErrorDialog",
                    contentFolderPath: "Controls/Dialogs/FiscalIntegration",
                    control: Controls.FiscalRegistrationErrorDialog
                },
                {
                    name: "GetCancellationChargeModalDialog",
                    contentFolderPath: "Controls/Dialogs/Cart",
                    control: Controls.GetCancellationChargeModalDialog
                },
                {
                    name: "GetCashManagementTransactionAmountDialog",
                    contentFolderPath: "Controls/Dialogs/CashManagement",
                    control: Controls.GetCashManagementTransactionAmountDialog
                },
                {
                    name: "GetCashManagementTransactionDetailsDialog",
                    contentFolderPath: "Controls/Dialogs/CashManagement",
                    control: Controls.GetCashManagementTransactionDetailsDialog
                },
                {
                    name: "GetCashManagementTransactionSourceDialog",
                    contentFolderPath: "Controls/Dialogs/CashManagement",
                    control: Controls.GetCashManagementTransactionSourceDialog
                },
                {
                    name: "GetChargeAmountDialog",
                    contentFolderPath: "Controls/Dialogs/Cart",
                    control: Controls.GetChargeAmountDialog
                },
                {
                    name: "GetChargeCodesDialog",
                    contentFolderPath: "Controls/Dialogs/Cart",
                    control: Controls.GetChargeCodesDialog
                },
                {
                    name: "GetGiftReceiptDialog",
                    contentFolderPath: "Controls/Dialogs/Clienteling",
                    control: Controls.GetGiftReceiptDialog
                },
                {
                    name: "GetOrderTypeDialog",
                    contentFolderPath: "Controls/Dialogs/Orders",
                    control: Controls.GetOrderTypeDialog
                },
                {
                    name: "GetQuotationExpirationDateDialog",
                    contentFolderPath: "Controls/Dialogs/Orders",
                    control: Controls.GetQuotationExpirationDateDialog
                },
                {
                    name: "GetReportFilterValuesDialog",
                    contentFolderPath: "Controls/Dialogs/Reports",
                    control: Controls.GetReportFilterValuesDialog
                },
                {
                    name: "GetReturnChargeDialog",
                    contentFolderPath: "Controls/Dialogs/Payments",
                    control: Controls.GetReturnChargeDialog
                },
                {
                    name: "GetSalesPersonDialog",
                    contentFolderPath: "Controls/Dialogs/EmployeeManagement",
                    control: Controls.GetSalesPersonDialog
                },
                {
                    name: "GetSalesRepresentativeDialog",
                    contentFolderPath: "Controls/Dialogs/EmployeeManagement",
                    control: Controls.GetSalesRepresentativeDialog
                },
                {
                    name: "GetShippingChargeDialog",
                    contentFolderPath: "Controls/Dialogs/Orders",
                    control: Controls.GetShippingChargeDialog
                },
                {
                    name: "GetShippingDateDialog",
                    contentFolderPath: "Controls/Dialogs/Orders",
                    control: Controls.GetShippingDateDialog
                },
                {
                    name: "GetSignatureFromDeviceDialog",
                    contentFolderPath: "Controls/Dialogs/Payments",
                    control: Controls.GetSignatureFromDeviceDialog
                },
                {
                    name: "GetStoreEmployeeDialog",
                    contentFolderPath: "Controls/Dialogs/EmployeeManagement",
                    control: Controls.GetStoreEmployeeDialog
                },
                {
                    name: "GetStoreTasklistDialog",
                    contentFolderPath: "Controls/Dialogs/TaskManagement",
                    control: Controls.GetStoreTasklistDialog
                },
                {
                    name: "GetVariantSelectionMethodDialog",
                    contentFolderPath: "Controls/Dialogs/Merchandising",
                    control: Controls.GetVariantSelectionMethodDialog
                },
                {
                    name: "HardwareStationDialog",
                    contentFolderPath: "Controls/Dialogs/Peripherals",
                    control: Controls.HardwareStationDialog
                },
                {
                    name: "HardwareStationFallbackDialog",
                    contentFolderPath: "Controls/Dialogs/Peripherals",
                    control: Controls.HardwareStationFallbackDialog
                },
                {
                    name: "HardwareStationErrorDialog",
                    contentFolderPath: "Controls/Dialogs/Peripherals",
                    control: Controls.HardwareStationErrorDialog
                },
                {
                    name: "InventoryDocumentAsyncFeedbackDialog",
                    contentFolderPath: "Controls/Dialogs/Inventory",
                    control: Controls.InventoryDocumentAsyncFeedbackDialog
                },
                {
                    name: "InventoryDocumentCommitDialog",
                    contentFolderPath: "Controls/Dialogs/Inventory",
                    control: Controls.InventoryDocumentCommitDialog
                },
                {
                    name: "InventoryDocumentHeaderDialog",
                    contentFolderPath: "Controls/Dialogs/Inventory",
                    control: Controls.InventoryDocumentHeaderDialog
                },
                {
                    name: "InventoryDocumentQuantityDialog",
                    contentFolderPath: "Controls/Dialogs/Inventory",
                    control: Controls.InventoryDocumentQuantityDialog
                },
                {
                    name: "InventoryDocumentSummaryDialog",
                    contentFolderPath: "Controls/Dialogs/Inventory",
                    control: Controls.InventoryDocumentSummaryDialog
                },
                {
                    name: "InventoryDocumentValidationResultSummaryDialog",
                    contentFolderPath: "Controls/Dialogs/Inventory",
                    control: Controls.InventoryDocumentValidationResultSummaryDialog
                },
                {
                    name: "InventoryDocumentWarningDialog",
                    contentFolderPath: "Controls/Dialogs/Inventory",
                    control: Controls.InventoryDocumentWarningDialog
                },
                {
                    name: "LinkedRefundDialog",
                    contentFolderPath: "Controls/Dialogs/Payments",
                    control: Controls.LinkedRefundDialog
                },
                {
                    name: "ListInputDialog",
                    contentFolderPath: "Controls/Dialogs/Framework",
                    control: Controls.ListInputDialog
                },
                {
                    name: "LoginDialog",
                    contentFolderPath: "Controls/Dialogs/EmployeeManagement",
                    control: Controls.LoginDialog
                },
                {
                    name: "LoyaltyCardBalanceDialog",
                    contentFolderPath: "Controls/Dialogs/Clienteling",
                    control: Controls.LoyaltyCardBalanceDialog
                },
                {
                    name: "LoyaltyCardDetailsDialog",
                    contentFolderPath: "Controls/Dialogs/Clienteling",
                    control: Controls.LoyaltyCardDetailsDialog
                },
                {
                    name: "LoyaltyExpiringPointsDialog",
                    contentFolderPath: "Controls/Dialogs/Clienteling",
                    control: Controls.LoyaltyExpiringPointsDialog
                },
                {
                    name: "LoyaltyTransactionsDialog",
                    contentFolderPath: "Controls/Dialogs/Clienteling",
                    control: Controls.LoyaltyTransactionsDialog
                },
                {
                    name: "ManageChargesLineDetailDialog",
                    contentFolderPath: "Controls/Dialogs/Cart",
                    control: Controls.ManageChargesLineDetailDialog
                },
                {
                    name: "NotificationCenterDialog",
                    contentFolderPath: "Controls/Dialogs/Notifications",
                    control: Controls.NotificationCenterDialog
                },
                {
                    name: "NumberInputDialog",
                    contentFolderPath: "Controls/Dialogs/Framework",
                    control: Controls.NumberInputDialog
                },
                {
                    name: "NumberRangeInputDialog",
                    contentFolderPath: "Controls/Dialogs/Framework",
                    control: Controls.NumberRangeInputDialog
                },
                {
                    name: "NumpadDialog",
                    contentFolderPath: "Controls/Dialogs/Framework",
                    control: Controls.NumpadDialog
                },
                {
                    name: "OverrideHeaderChargeDialog",
                    contentFolderPath: "Controls/Dialogs/Cart",
                    control: Controls.OverrideHeaderChargeDialog
                },
                {
                    name: "OverrideLineChargeDialog",
                    contentFolderPath: "Controls/Dialogs/Cart",
                    control: Controls.OverrideLineChargeDialog
                },
                {
                    name: "PaymentMessageDialog",
                    contentFolderPath: "Controls/Dialogs/Payments",
                    control: Controls.PaymentMessageDialog
                },
                {
                    name: "PaymentOptionsDialog",
                    contentFolderPath: "Controls/Dialogs/Payments",
                    control: Controls.PaymentOptionsDialog
                },
                {
                    name: "PriceInputDialog",
                    contentFolderPath: "Controls/Dialogs/Cart",
                    control: Controls.PriceInputDialog
                },
                {
                    name: "PrintReceiptDialog",
                    contentFolderPath: "Controls/Dialogs/Clienteling",
                    control: Controls.PrintReceiptDialog
                },
                {
                    name: "PromptRegisterInventoryDocumentSerialNumberDialog",
                    contentFolderPath: "Controls/Dialogs/Inventory",
                    control: Controls.PromptRegisterInventoryDocumentSerialNumberDialog
                },
                {
                    name: "ReasonCodeDialog",
                    contentFolderPath: "Controls/Dialogs/Cart",
                    control: Controls.ReasonCodeDialog
                },
                {
                    name: "ReassignCustomersFromClientBookConfirmationDialog",
                    contentFolderPath: "Controls/Dialogs/Clienteling",
                    control: Controls.ReassignCustomersFromClientBookConfirmationDialog
                },
                {
                    name: "ReassignCustomersFromClientBookDialog",
                    contentFolderPath: "Controls/Dialogs/Clienteling",
                    control: Controls.ReassignCustomersFromClientBookDialog
                },
                {
                    name: "RefinerDialog",
                    contentFolderPath: "Controls/Dialogs/Refiners",
                    control: Controls.RefinerDialog
                },
                {
                    name: "RemoveCustomersFromClientBookDialog",
                    contentFolderPath: "Controls/Dialogs/Clienteling",
                    control: Controls.RemoveCustomersFromClientBookDialog
                },
                {
                    name: "ReturnMultipleTransactionDialog",
                    contentFolderPath: "Controls/Dialogs/Orders",
                    control: Controls.ReturnMultipleTransactionDialog
                },
                {
                    name: "GetStoreCustomerDialog",
                    contentFolderPath: "Controls/Dialogs/TaskManagement",
                    control: Controls.GetStoreCustomerDialog
                },
                {
                    name: "ReviewShiftTenderLinesWarningDialog",
                    contentFolderPath: "Controls/Dialogs/EmployeeManagement",
                    control: Controls.ReviewShiftTenderLinesWarningDialog
                },
                {
                    name: "SearchRefinerDialog",
                    contentFolderPath: "Controls/Dialogs/Refiners",
                    control: Controls.SearchRefinerDialog
                },
                {
                    name: "SelectApplicableWarrantiesDialog",
                    contentFolderPath: "Controls/Dialogs/Merchandising",
                    control: Controls.SelectApplicableWarrantiesDialog
                },
                {
                    name: "SelectAllowedRefundOptionDialog",
                    contentFolderPath: "Controls/Dialogs/Payments",
                    control: Controls.SelectAllowedRefundOptionDialog
                },
                {
                    name: "SelectCashManagementTransactionEndpointDialog",
                    contentFolderPath: "Controls/Dialogs/CashManagement",
                    control: Controls.SelectCashManagementTransactionEndpointDialog
                },
                {
                    name: "SelectCustomerLoyaltyCardDialog",
                    contentFolderPath: "Controls/Dialogs/Clienteling",
                    control: Controls.SelectCustomerLoyaltyCardDialog
                },
                {
                    name: "SelectDeliveryModeDialog",
                    contentFolderPath: "Controls/Dialogs/Orders",
                    control: Controls.SelectDeliveryModeDialog
                },
                {
                    name: "SelectDropDownDialog",
                    contentFolderPath: "Controls/Dialogs/Framework",
                    control: Controls.SelectDropDownDialog
                },
                {
                    name: "SelectInventoryDocumentWarehouseDialog",
                    contentFolderPath: "Controls/Dialogs/Inventory",
                    control: Controls.SelectInventoryDocumentWarehouseDialog
                },
                {
                    name: "SelectInventoryDocumentWarehouseLocationDialog",
                    contentFolderPath: "Controls/Dialogs/Inventory",
                    control: Controls.SelectInventoryDocumentWarehouseLocationDialog
                },
                {
                    name: "SelectPackingSlipIdDialog",
                    contentFolderPath: "Controls/Dialogs/Orders",
                    control: Controls.SelectPackingSlipIdDialog
                },
                {
                    name: "SelectSalesLinesDialog",
                    contentFolderPath: "Controls/Dialogs/Cart",
                    control: Controls.SelectSalesLinesDialog
                },
                {
                    name: "SelectStoreDialog",
                    contentFolderPath: "Controls/Dialogs/Inventory",
                    control: Controls.SelectStoreDialog
                },
                {
                    name: "SelectVariantDialog",
                    contentFolderPath: "Controls/Dialogs/Merchandising",
                    control: Controls.SelectVariantDialog
                },
                {
                    name: "SelectWarehouseDialog",
                    contentFolderPath: "Controls/Dialogs/Inventory",
                    control: Controls.SelectWarehouseDialog
                },
                {
                    name: "SelectWarehouseLocationDialog",
                    contentFolderPath: "Controls/Dialogs/Inventory",
                    control: Controls.SelectWarehouseLocationDialog
                },
                {
                    name: "SerialNumberInputDialog",
                    contentFolderPath: "Controls/Dialogs/Merchandising",
                    control: Controls.SerialNumberInputDialog
                },
                {
                    name: "SerialNumberNumpadDialog",
                    contentFolderPath: "Controls/Dialogs/Merchandising",
                    control: Controls.SerialNumberNumpadDialog
                },
                {
                    name: "SetDisassembleQuantityDialog",
                    contentFolderPath: "Controls/Dialogs/Merchandising",
                    control: Controls.SetDisassembleQuantityDialog
                },
                {
                    name: "SetQuantityDialog",
                    contentFolderPath: "Controls/Dialogs/Cart",
                    control: Controls.SetQuantityDialog
                },
                {
                    name: "ShiftActionDialog",
                    contentFolderPath: "Controls/Dialogs/EmployeeManagement",
                    control: Controls.ShiftActionDialog
                },
                {
                    name: "ShowSalesOrderAttributeGroupsDialog",
                    contentFolderPath: "Controls/Dialogs/Orders",
                    control: Controls.ShowSalesOrderAttributeGroupsDialog
                },
                {
                    name: "SignatureDialog",
                    contentFolderPath: "Controls/Dialogs/Payments",
                    control: Controls.SignatureDialog
                },
                {
                    name: "TaxOverrideDialog",
                    contentFolderPath: "Controls/Dialogs/Cart",
                    control: Controls.TaxOverrideDialog
                },
                {
                    name: "TextInputDialog",
                    contentFolderPath: "Controls/Dialogs/Framework",
                    control: Controls.TextInputDialog
                },
                {
                    name: "TimelineCreateEditDialog",
                    contentFolderPath: "Controls/Dialogs/Timeline",
                    control: Controls.TimelineCreateEditDialog
                },
                {
                    name: "TimelineSelectTypeDialog",
                    contentFolderPath: "Controls/Dialogs/Timeline",
                    control: Controls.TimelineSelectTypeDialog
                },
                {
                    name: "TimeRegistrationDialog",
                    contentFolderPath: "Controls/Dialogs/EmployeeManagement",
                    control: Controls.TimeRegistrationDialog
                },
                {
                    name: "TransferOrderInputDialog",
                    contentFolderPath: "Controls/Dialogs/Orders",
                    control: Controls.TransferOrderInputDialog
                },
                {
                    name: "TutorialVideoDialog",
                    contentFolderPath: "Controls/Dialogs/Framework",
                    control: Controls.TutorialVideoDialog
                },
                {
                    name: "UnitOfMeasureDialog",
                    contentFolderPath: "Controls/Dialogs/Cart",
                    control: Controls.UnitOfMeasureDialog
                },
                {
                    name: "UserInfoDialog",
                    contentFolderPath: "Controls/Dialogs/EmployeeManagement",
                    control: Controls.UserInfoDialog
                },
                {
                    name: "WeighItemDialog",
                    contentFolderPath: "Controls/Dialogs/Cart",
                    control: Controls.WeighItemDialog
                },
                {
                    name: "TestRecorderDisplayFloat",
                    contentFolderPath: "Controls/TestRecorderDisplayFloat",
                    control: Controls.TestRecorderDisplayFloat
                },
            ];
            return controls;
        }
        Controls.getControlConfigurations = getControlConfigurations;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Extensibility = Commerce.Extensibility;
        var DefaultButtonGridHandler = (function () {
            function DefaultButtonGridHandler() {
            }
            DefaultButtonGridHandler.handleOperation = function (operationId, actionProperty, actionTitle, correlationId, isBusy) {
                var operationsManager = Operations.OperationsManager.instance;
                if (Commerce.Session.instance.connectionStatus !== Commerce.Client.Entities.ConnectionStatusType.Online &&
                    !operationsManager.canExecuteInOfflineMode(operationId)) {
                    var errors = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_IN_OFFLINE_STATE)];
                    Commerce.NotificationHandler.displayClientErrors(errors);
                    return true;
                }
                correlationId = Commerce.LoggerHelper.resolveCorrelationId(correlationId);
                switch (operationId) {
                    case Operations.RetailOperation.BlankOperation:
                        if (Commerce.StringExtensions.isNullOrWhitespace(actionProperty)) {
                            return false;
                        }
                        var blankOperationParameters = actionProperty.split(";");
                        var blankOperationOptions = {
                            operationId: blankOperationParameters.shift(), operationData: blankOperationParameters.shift()
                        };
                        operationsManager.runOperation(operationId, blankOperationOptions)
                            .fail(function (errors) { Commerce.NotificationHandler.displayClientErrors(errors); });
                        return true;
                    case Operations.RetailOperation.ItemSale:
                        var options = {
                            itemToAddOrSearch: actionProperty
                        };
                        Commerce.ViewModelAdapter.navigate("CartView", options);
                        return true;
                    case Operations.RetailOperation.PriceCheck:
                        DefaultButtonGridHandler._runOperationWithIndeterminateWait(operationId, null, false, true, isBusy);
                        return true;
                    case Operations.RetailOperation.InventoryLookup:
                        if (Commerce.Session.instance.connectionStatus !== Commerce.Client.Entities.ConnectionStatusType.Online) {
                            var errors = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_IN_OFFLINE_STATE)];
                            Commerce.NotificationHandler.displayClientErrors(errors);
                        }
                        else {
                            Commerce.ViewModelAdapter.navigate("InventoryLookupView");
                        }
                        return true;
                    case Operations.RetailOperation.ViewReport:
                        if (Commerce.ObjectExtensions.isFunction(isBusy)) {
                            isBusy(true);
                        }
                        operationsManager.runOperation(operationId, null)
                            .fail(function (errors) {
                            Commerce.NotificationHandler.displayClientErrors(errors);
                        })
                            .always(function () {
                            if (Commerce.ObjectExtensions.isFunction(isBusy)) {
                                isBusy(false);
                            }
                        });
                        return true;
                    case Operations.RetailOperation.ChangePassword:
                        Commerce.ViewModelAdapter.navigate("ChangePasswordView");
                        return true;
                    case Operations.RetailOperation.ResetPassword:
                        DefaultButtonGridHandler._runOperationWithIndeterminateWait(operationId, null, false, true, isBusy);
                        return true;
                    case Operations.RetailOperation.KitDisassembly:
                        Commerce.ViewModelAdapter.navigate("KitDisassemblyView");
                        return true;
                    case Operations.RetailOperation.ChangeHardwareStation:
                        var activity = new Commerce.Activities.SelectHardwareStationActivity({
                            activeOnly: false,
                            title: Commerce.ViewModelAdapter.getResourceString("string_6000"),
                            subTitle: Commerce.ViewModelAdapter.getResourceString("string_6001"),
                            isPairedHardwareStationView: false
                        });
                        activity.responseHandler = function (response) {
                            if (!Commerce.Peripherals.HardwareStation.HardwareStationContext.isLocalStation(response.hardwareStation)
                                && !Commerce.HardwareStationEndpointStorage.hasHardwareStationToken(response.hardwareStation.recordId, response.hardwareStation.url)) {
                                return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.HARDWARESTATION_MUST_BE_PAIRED_BEFORE_ACTIVATE)]);
                            }
                            return Commerce.VoidAsyncResult.createResolved();
                        };
                        activity.execute();
                        return true;
                    case Operations.RetailOperation.CustomerSearch:
                        var customerSearchOperationOptions = {
                            searchText: Commerce.StringExtensions.EMPTY
                        };
                        operationsManager.runOperation(Operations.RetailOperation.CustomerSearch, customerSearchOperationOptions);
                        return true;
                    case Operations.RetailOperation.ItemSearch:
                        var itemSearchOptions = {
                            searchEntity: Commerce.Client.Entities.SearchViewSearchEntity.Product,
                            selectionMode: Commerce.ViewModels.SearchViewSelectionMode.None,
                            correlationId: correlationId
                        };
                        Commerce.ViewModelAdapter.navigate("SearchView", itemSearchOptions);
                        return true;
                    case Operations.RetailOperation.Search:
                        var searchParameters = actionProperty.split(";");
                        var params = {
                            searchEntity: Commerce.Client.Entities.SearchViewSearchEntity.Product,
                            searchText: Commerce.StringExtensions.EMPTY,
                            selectionMode: Commerce.ViewModels.SearchViewSelectionMode.None,
                            correlationId: correlationId
                        };
                        if (!Commerce.StringExtensions.isNullOrWhitespace(searchParameters[0])) {
                            switch (searchParameters[0]) {
                                case "Item":
                                    params.searchEntity = Commerce.Client.Entities.SearchViewSearchEntity.Product;
                                    params.searchText = !Commerce.ObjectExtensions.isNullOrUndefined(searchParameters[1]) ? searchParameters[1] : "";
                                    Commerce.ViewModelAdapter.navigate("SearchView", params);
                                    break;
                                case "Customer":
                                    params.searchEntity = Commerce.Client.Entities.SearchViewSearchEntity.Customer;
                                    params.searchText = !Commerce.ObjectExtensions.isNullOrUndefined(searchParameters[1]) ? searchParameters[1] : "";
                                    Commerce.ViewModelAdapter.navigate("SearchView", params);
                                    break;
                                case "Category":
                                    var categoryId = parseInt(searchParameters[1], 10);
                                    if (!Commerce.NumberExtensions.isNullOrNaN(categoryId)) {
                                        Commerce.ViewModelAdapter.navigate("ProductsView", {
                                            categoryId: categoryId, activeMode: Commerce.ViewModels.ProductsViewModelActiveMode.Products
                                        });
                                    }
                                    else {
                                        Commerce.ViewModelAdapter.navigate("CategoriesView");
                                    }
                                    break;
                            }
                        }
                        else {
                            Commerce.ViewModelAdapter.navigate("SearchView", params);
                        }
                        return true;
                    case Operations.RetailOperation.BankDrop:
                    case Operations.RetailOperation.DeclareStartAmount:
                    case Operations.RetailOperation.FloatEntry:
                    case Operations.RetailOperation.SafeDrop:
                    case Operations.RetailOperation.TenderDeclaration:
                    case Operations.RetailOperation.TenderRemoval:
                        DefaultButtonGridHandler._runTenderOperation(operationId, isBusy);
                        return true;
                    case Operations.RetailOperation.PrintX:
                        DefaultButtonGridHandler._runOperation(operationId, { shift: Commerce.Session.instance.Shift, notifyOnNoPrintableReceipts: true }, isBusy);
                        return true;
                    case Operations.RetailOperation.PrintZ:
                        DefaultButtonGridHandler._runOperation(operationId, { notifyOnNoPrintableReceipts: true }, isBusy);
                        return true;
                    case Operations.RetailOperation.OpenDrawer:
                    case Operations.RetailOperation.CloseShift:
                        DefaultButtonGridHandler._runOperation(operationId, null, isBusy);
                        return true;
                    case Operations.RetailOperation.PrintFiscalX:
                    case Operations.RetailOperation.PrintFiscalZ:
                    case Operations.RetailOperation.CompleteFiscalRegistrationProcess:
                        DefaultButtonGridHandler._runOperation(operationId, { correlationId: correlationId }, isBusy);
                        return true;
                    case Operations.RetailOperation.DisplayTotal:
                    case Operations.RetailOperation.ExtendedLogOn:
                        operationsManager.runOperation(operationId, null).fail(function (errors) {
                            Commerce.NotificationHandler.displayClientErrors(errors, "string_4159");
                        });
                        return true;
                    case Operations.RetailOperation.ReturnTransaction:
                        DefaultButtonGridHandler._runOperationWithIndeterminateWait(operationId, null, true, true, isBusy);
                        return true;
                    case Operations.RetailOperation.ShowJournal:
                        var showJournalOperationOptions = {
                            correlationId: correlationId
                        };
                        DefaultButtonGridHandler._runOperationWithIndeterminateWait(operationId, showJournalOperationOptions, false, true, isBusy);
                        return true;
                    case Operations.RetailOperation.OutboundInventory:
                    case Operations.RetailOperation.InboundInventory:
                        var viewInventoryDocumentOperationListOptions = {
                            operation: operationId,
                            correlationId: correlationId
                        };
                        DefaultButtonGridHandler._runOperationWithIndeterminateWait(operationId, viewInventoryDocumentOperationListOptions, false, true, isBusy);
                        return true;
                    case Operations.RetailOperation.AddAffiliationFromList:
                    case Operations.RetailOperation.AddCustomerToClientBook:
                    case Operations.RetailOperation.BuyWarranty:
                    case Operations.RetailOperation.BlindCloseShift:
                    case Operations.RetailOperation.ChangeDeliveryMode:
                    case Operations.RetailOperation.CustomerAccountDeposit:
                    case Operations.RetailOperation.CustomerAdd:
                    case Operations.RetailOperation.DatabaseConnectionStatus:
                    case Operations.RetailOperation.ExpenseAccounts:
                    case Operations.RetailOperation.InboundInventory:
                    case Operations.RetailOperation.IncomeAccounts:
                    case Operations.RetailOperation.LogOff:
                    case Operations.RetailOperation.ManageCharges:
                    case Operations.RetailOperation.ManageChecklistsAndTasks:
                    case Operations.RetailOperation.PickingAndReceiving:
                    case Operations.RetailOperation.ReassignClientBookCustomers:
                    case Operations.RetailOperation.RecallSalesOrder:
                    case Operations.RetailOperation.RecallTransaction:
                    case Operations.RetailOperation.RemoveCustomersFromClientBook:
                    case Operations.RetailOperation.ShowBlindClosedShifts:
                    case Operations.RetailOperation.ShowJournal:
                    case Operations.RetailOperation.StockCount:
                    case Operations.RetailOperation.SuspendShift:
                    case Operations.RetailOperation.TimeRegistration:
                    case Operations.RetailOperation.ViewMyClientBook:
                    case Operations.RetailOperation.ViewStoreClientBooks:
                    case Operations.RetailOperation.ViewTimeClockEntries:
                    case Operations.RetailOperation.ViewAllDiscounts:
                        DefaultButtonGridHandler._runOperationWithIndeterminateWait(operationId, null, false, true, isBusy);
                        return true;
                    case Operations.RetailOperation.LoyaltyIssueCard:
                        var issueLoyaltyCardOperationOptions = {
                            correlationId: correlationId,
                            customer: Commerce.Session.instance.customerContext.customer,
                            allowSwitchCustomer: true,
                            allowAddToTransaction: true
                        };
                        DefaultButtonGridHandler._runOperation(operationId, issueLoyaltyCardOperationOptions, isBusy);
                        return true;
                    case Operations.RetailOperation.ViewOrderFulfillmentLines:
                        var fulfillmentLineViewOptions = {
                            fulfillmentDeliveryType: Commerce.ExtensibleEnumerations.FulfillmentLineDeliveryType.getByValue(Number(actionProperty)),
                            correlationId: correlationId
                        };
                        DefaultButtonGridHandler._runOperationWithIndeterminateWait(operationId, fulfillmentLineViewOptions, false, true, isBusy);
                        return true;
                    case Operations.RetailOperation.OpenURL:
                        if (Commerce.StringExtensions.isNullOrWhitespace(actionProperty)) {
                            return false;
                        }
                        var urlOptions = {
                            actionProperty: actionProperty,
                            actionTitle: actionTitle,
                            correlationId: correlationId
                        };
                        operationsManager.runOperation(operationId, urlOptions)
                            .fail(function (errors) { Commerce.NotificationHandler.displayClientErrors(errors); });
                        return true;
                    case Operations.RetailOperation.CashOutGiftCard:
                        var tenderType = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderByTypeId(actionProperty);
                        var cashOutGiftCardOperationRequest = new Commerce.Payments.Operations.CashOutGiftCardOperationRequest(correlationId, tenderType);
                        this.runOperationRequestWithIndeterminateWait(cashOutGiftCardOperationRequest, false, isBusy);
                        return true;
                    case Operations.RetailOperation.ManageSafe:
                        var manageSafeOptions = {
                            correlationId: correlationId
                        };
                        DefaultButtonGridHandler._runOperationWithIndeterminateWait(operationId, manageSafeOptions, false, true, isBusy);
                        return true;
                    case Operations.RetailOperation.HealthCheck:
                        var healthCheckOptions = {
                            correlationId: correlationId
                        };
                        DefaultButtonGridHandler._runOperationWithIndeterminateWait(operationId, healthCheckOptions, false, true, isBusy);
                        return true;
                    default:
                        return DefaultButtonGridHandler.handleExtensionOperation(operationId, actionProperty, correlationId, isBusy);
                }
            };
            DefaultButtonGridHandler.handleExtensionOperation = function (operationId, actionProperty, correlationId, isBusy) {
                var actionParameters = [];
                var operationRequestExists = false;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(Extensibility.ExtensionOperationProvider)) {
                    if (!Commerce.StringExtensions.isNullOrWhitespace(actionProperty)) {
                        actionParameters = actionProperty.split(";");
                    }
                    operationRequestExists = Extensibility.ExtensionOperationProvider.operationRequestExists(operationId);
                    if (!operationRequestExists) {
                        return false;
                    }
                    Extensibility.ExtensionOperationProvider.getOperationRequest(operationId, actionParameters, correlationId)
                        .then(function (result) {
                        var request = result.data;
                        if (!result.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(request)) {
                            var actualOperationId = request.operationId;
                            if (actualOperationId === operationId) {
                                DefaultButtonGridHandler.runOperationRequestWithIndeterminateWait(request, true, isBusy);
                            }
                            else {
                                Commerce.RetailLogger.coreButtonGridHandlerExtensionOperationRequestFromFactoryOperationMismatch(actualOperationId, operationId, correlationId);
                            }
                        }
                        else {
                            Commerce.RetailLogger.coreButtonGridHandlerInvalidExtensionOperationRequestFromFactory(JSON.stringify(request), operationId, result.canceled, correlationId);
                        }
                    });
                    return operationRequestExists;
                }
                return false;
            };
            DefaultButtonGridHandler.runOperationRequestWithIndeterminateWait = function (operationRequest, displayClientErrorsOnFail, isBusy) {
                if (Commerce.ObjectExtensions.isFunction(isBusy)) {
                    isBusy(true);
                }
                return Commerce.Runtime.executeAsync(operationRequest)
                    .then(function (result) {
                    if (Commerce.ObjectExtensions.isFunction(isBusy)) {
                        isBusy(false);
                    }
                })
                    .catch(function (errors) {
                    if (Commerce.ObjectExtensions.isFunction(isBusy)) {
                        isBusy(false);
                    }
                    if (displayClientErrorsOnFail) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    }
                });
            };
            DefaultButtonGridHandler._runOperation = function (operationType, parameters, isBusy) {
                DefaultButtonGridHandler._runOperationWithIndeterminateWait(operationType, parameters, false, false, isBusy)
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            DefaultButtonGridHandler._runTenderOperation = function (operationType, isBusy) {
                DefaultButtonGridHandler._runOperationWithIndeterminateWait(operationType, null, false, false, isBusy)
                    .fail(function (errors) {
                    DefaultButtonGridHandler._handleTenderOperationErrors(errors, operationType);
                });
            };
            DefaultButtonGridHandler._runOperationWithIndeterminateWait = function (operationType, parameters, navigateToCartViewOnComplete, displayClientErrorsOnFail, isBusy) {
                if (Commerce.ObjectExtensions.isFunction(isBusy)) {
                    isBusy(true);
                }
                return Commerce.Operations.OperationsManager.instance.runOperation(operationType, parameters)
                    .done(function (result) {
                    if (navigateToCartViewOnComplete) {
                        if (result && !result.canceled) {
                            Commerce.ViewModelAdapter.navigate("CartView");
                        }
                    }
                }).fail(function (errors) {
                    if (displayClientErrorsOnFail) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    }
                }).always(function () {
                    if (Commerce.ObjectExtensions.isFunction(isBusy)) {
                        isBusy(false);
                    }
                });
            };
            DefaultButtonGridHandler._handleTenderOperationErrors = function (errors, operationType) {
                if (errors.length === 1) {
                    var formattedErrorMessage = Commerce.ErrorHelper.getFormattedErrorMessage(errors[0]);
                    var errorCode = formattedErrorMessage.errorCodes[0];
                    if (errorCode === Commerce.ErrorTypeEnum.PERIPHERALS_HARDWARESTATION_NOTCONFIGURED
                        || errorCode === Commerce.ErrorTypeEnum.PERIPHERALS_HARDWARESTATION_COMMUNICATION_FAILED
                        || errorCode === Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_CASHDRAWER_ERROR) {
                        Commerce.ViewModelAdapter.displayMessage("string_421", Commerce.MessageType.Error, Commerce.MessageBoxButtons.YesNo, null, 1, Commerce.ViewModelAdapter.getResourceString(errorCode), "\r\n\r\n")
                            .done(function (continueMessageResult) {
                            if (continueMessageResult === Commerce.DialogResult.Yes) {
                                DefaultButtonGridHandler._createOptionsAndNavigateToView(operationType);
                            }
                        });
                        return;
                    }
                }
                Commerce.NotificationHandler.displayClientErrors(errors);
            };
            DefaultButtonGridHandler._createOptionsAndNavigateToView = function (operationType) {
                switch (operationType) {
                    case Operations.RetailOperation.TenderDeclaration:
                        var tenderDeclarationOptions = {};
                        tenderDeclarationOptions.skipOpenDrawer = true;
                        Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.TenderDeclaration, tenderDeclarationOptions, { skipManagerPermissionChecks: true }).fail(function (errors) {
                            Commerce.NotificationHandler.displayClientErrors(errors);
                        });
                        break;
                    case Operations.RetailOperation.BankDrop:
                        var bankDropOptions = {};
                        bankDropOptions.skipOpenDrawer = true;
                        Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.BankDrop, bankDropOptions, { skipManagerPermissionChecks: true }).fail(function (errors) {
                            Commerce.NotificationHandler.displayClientErrors(errors);
                        });
                        break;
                    case Operations.RetailOperation.SafeDrop:
                        var safeDropOptions = {};
                        safeDropOptions.skipOpenDrawer = true;
                        Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.SafeDrop, safeDropOptions, { skipManagerPermissionChecks: true }).fail(function (errors) {
                            Commerce.NotificationHandler.displayClientErrors(errors);
                        });
                        break;
                    case Operations.RetailOperation.DeclareStartAmount:
                        var declareStartAmountOptions = {};
                        declareStartAmountOptions.skipOpenDrawer = true;
                        Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.DeclareStartAmount, declareStartAmountOptions, { skipManagerPermissionChecks: true }).fail(function (errors) {
                            Commerce.NotificationHandler.displayClientErrors(errors);
                        });
                        break;
                    case Operations.RetailOperation.TenderRemoval:
                        var tenderRemovalOptions = {};
                        tenderRemovalOptions.skipOpenDrawer = true;
                        Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.TenderRemoval, tenderRemovalOptions, { skipManagerPermissionChecks: true }).fail(function (errors) {
                            Commerce.NotificationHandler.displayClientErrors(errors);
                        });
                        break;
                    case Operations.RetailOperation.FloatEntry:
                        var floatEntryOptions = {};
                        floatEntryOptions.skipOpenDrawer = true;
                        Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.FloatEntry, floatEntryOptions, { skipManagerPermissionChecks: true }).fail(function (errors) {
                            Commerce.NotificationHandler.displayClientErrors(errors);
                        });
                        break;
                }
            };
            return DefaultButtonGridHandler;
        }());
        Operations.DefaultButtonGridHandler = DefaultButtonGridHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var DefaultImages;
    (function (DefaultImages) {
        DefaultImages["ProductSmall"] = "Assets/defaultSmall.png";
        DefaultImages["ProductLarge"] = "Assets/defaultLarge.png";
        DefaultImages["CustomerLarge"] = "Assets/person_unavailable_large.png";
        DefaultImages["CustomerSmall"] = "Assets/person_unavailable_small.png";
        DefaultImages["DefaultUser"] = "Assets/DefaultUser.png";
        DefaultImages["AllProducts"] = "Assets/fabrikam_all_products.jpg";
    })(DefaultImages = Commerce.DefaultImages || (Commerce.DefaultImages = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var Dialog;
        (function (Dialog) {
            var OperationIds = (function () {
                function OperationIds() {
                }
                OperationIds.OK_BUTTON_CLICK = "okButtonClick";
                OperationIds.CANCEL_BUTTON_CLICK = "cancelButtonClick";
                OperationIds.CLOSE_BUTTON_CLICK = "closeButtonClick";
                OperationIds.NO_BUTTON_CLICK = "noButtonClick";
                return OperationIds;
            }());
            Dialog.OperationIds = OperationIds;
        })(Dialog = Controls.Dialog || (Controls.Dialog = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var FocusManager = (function () {
            function FocusManager(delayOnReturnFocus) {
                if (delayOnReturnFocus === void 0) { delayOnReturnFocus = true; }
                this._delayOnReturnFocus = delayOnReturnFocus;
            }
            FocusManager.prototype.stealFocus = function (targetElement, getTargetElementVisibility) {
                this._previouslyFocusedElement = $(":focus")[0];
                FocusManager._tryFocus(targetElement, getTargetElementVisibility);
            };
            FocusManager.prototype.returnFocus = function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._previouslyFocusedElement)) {
                    return;
                }
                if (!this._delayOnReturnFocus) {
                    FocusManager._tryFocus(this._previouslyFocusedElement);
                }
                else {
                    setTimeout(function (previouslyFocusedElement) {
                        FocusManager._tryFocus(previouslyFocusedElement);
                    }, FocusManager.DELAY_IN_MILLISECONDS_BEFORE_RETURN_FOCUS, this._previouslyFocusedElement);
                }
                this._previouslyFocusedElement = null;
            };
            FocusManager.prototype.clearFocusHistory = function () {
                this._previouslyFocusedElement = null;
            };
            FocusManager._tryFocus = function (targetElement, getTargetElementVisibility) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(getTargetElementVisibility)) {
                    getTargetElementVisibility = function () { return true; };
                }
                Commerce.Host.instance.timers.setImmediate(function (targetElement) {
                    if (getTargetElementVisibility()) {
                        FocusManager._focus(targetElement);
                    }
                }, targetElement);
                setTimeout(function (targetElement) {
                    if (getTargetElementVisibility()) {
                        FocusManager._focus(targetElement);
                    }
                }, FocusManager.DELAY_IN_MILLISECONDS_BEFORE_RETRY_FOCUS, targetElement);
            };
            FocusManager._focus = function (targetElement) {
                var jQueryTargetElement = $(targetElement);
                if (jQueryTargetElement.is(":visible") && !jQueryTargetElement.is(":focus")) {
                    jQueryTargetElement.focus();
                }
            };
            FocusManager.DELAY_IN_MILLISECONDS_BEFORE_RETRY_FOCUS = 300;
            FocusManager.DELAY_IN_MILLISECONDS_BEFORE_RETURN_FOCUS = 500;
            return FocusManager;
        }());
        Controls.FocusManager = FocusManager;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var Formatters = (function () {
        function Formatters() {
        }
        Formatters.AddressTypeTextFormatter = function (address) {
            var addressPurpose = Commerce.ArrayExtensions.firstOrUndefined(Commerce.ApplicationContext.Instance.addressPurposes, function (purpose) {
                return purpose.RecordId === address.LogisticsLocationRoleRecordId;
            });
            var addressTypeText = address.RoleCount > 1
                ? Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_4849"), addressPurpose.Description, address.RoleCount - 1)
                : addressPurpose.Description;
            return addressTypeText;
        };
        Formatters.AddressHeaderFormatter = function (header) {
            if (Commerce.StringExtensions.isNullOrWhitespace(header)) {
                return Commerce.ViewModelAdapter.getResourceString("string_1316");
            }
            return header;
        };
        Formatters.YesNoBooleanFormatter = function (value) {
            return value
                ? Commerce.ViewModelAdapter.getResourceString("string_77")
                : Commerce.ViewModelAdapter.getResourceString("string_78");
        };
        Formatters.DateWithoutTime = function (value) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(value)) {
                return Commerce.StringExtensions.EMPTY;
            }
            var formatter = Commerce.Host.instance.globalization.getDateTimeFormatter(Commerce.Host.Globalization.DateTimeFormat.SHORT_DATE);
            return formatter.format(value);
        };
        Formatters.DateWithLocalTime = function (value) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(value)) {
                return Commerce.StringExtensions.EMPTY;
            }
            var formatter = Commerce.Host.instance.globalization.getDateTimeFormatterWithoutChannelTimeZone(Commerce.Host.Globalization.DateTimeFormat.DATE_TIME);
            return formatter.format(value);
        };
        Formatters.DateWithoutLocalTime = function (value) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(value)) {
                return Commerce.StringExtensions.EMPTY;
            }
            var formatter = Commerce.Host.instance.globalization.getDateTimeFormatterWithoutChannelTimeZone(Commerce.Host.Globalization.DateTimeFormat.SHORT_DATE);
            return formatter.format(value);
        };
        Formatters.DateWithoutTimeIgnoreTimezone = function (value) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(value)) {
                return Commerce.StringExtensions.EMPTY;
            }
            var formatter = Commerce.Host.instance.globalization.getDateTimeFormatter(Commerce.Host.Globalization.DateTimeFormat.SHORT_DATE);
            return formatter.format(value, "Etc/UTC");
        };
        Formatters.ShortTime = function (value) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(value)) {
                return Commerce.StringExtensions.EMPTY;
            }
            var formatter = Commerce.Host.instance.globalization.getDateTimeFormatter(Commerce.Host.Globalization.DateTimeFormat.SHORT_TIME);
            return formatter.format(value);
        };
        Formatters.PriceFormatter = function (value) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(value)) {
                return Commerce.StringExtensions.EMPTY;
            }
            else if (Commerce.ObjectExtensions.isObject(value)) {
                var currencyAmount = value;
                return Commerce.NumberExtensions.formatCurrency(currencyAmount.RoundedConvertedAmount, currencyAmount.CurrencyCode);
            }
            else if (Commerce.ObjectExtensions.isString(value)) {
                value = Commerce.NumberExtensions.parseNumber(value);
                if (isNaN(value)) {
                    return Commerce.StringExtensions.EMPTY;
                }
            }
            return Commerce.NumberExtensions.formatCurrency(value);
        };
        Formatters.DurationTextFormatter = function (duration, durationUnitValue) {
            if (duration <= 0) {
                return Commerce.StringExtensions.EMPTY;
            }
            var durationUnitText;
            switch (durationUnitValue) {
                case Commerce.Proxy.Entities.PeriodUnit.Day:
                    durationUnitText = duration === 1 ? Commerce.ViewModelAdapter.getResourceString("string_29872") : Commerce.ViewModelAdapter.getResourceString("string_29873");
                    break;
                case Commerce.Proxy.Entities.PeriodUnit.Month:
                    durationUnitText = duration === 1 ? Commerce.ViewModelAdapter.getResourceString("string_29874") : Commerce.ViewModelAdapter.getResourceString("string_29875");
                    break;
                case Commerce.Proxy.Entities.PeriodUnit.Year:
                    durationUnitText = duration === 1 ? Commerce.ViewModelAdapter.getResourceString("string_29876") : Commerce.ViewModelAdapter.getResourceString("string_29877");
                    break;
                default:
                    return Commerce.StringExtensions.EMPTY;
            }
            return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_29878"), duration, durationUnitText);
        };
        Formatters.RatingLabelFormatter = function (value) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(value)) {
                return Commerce.StringExtensions.EMPTY;
            }
            var ratingDataDictionary = this._GetRatingPropertyValues(value);
            var averageRating = ratingDataDictionary.getItem(Commerce.ProductRatingProperty.AverageRating);
            if (Commerce.NumberExtensions.isNullOrZero(averageRating)) {
                return Commerce.StringExtensions.EMPTY;
            }
            else {
                return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_948"), ratingDataDictionary.getItem(Commerce.ProductRatingProperty.AverageRating));
            }
        };
        Formatters.RatingTextFormatter = function (value) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(value)) {
                return Commerce.StringExtensions.EMPTY;
            }
            var ratingDataDictionary = Formatters._GetRatingPropertyValues(value);
            var averageRating = ratingDataDictionary.getItem(Commerce.ProductRatingProperty.AverageRating);
            var totalRatings = ratingDataDictionary.getItem(Commerce.ProductRatingProperty.TotalRatings);
            if (Commerce.NumberExtensions.isNullOrZero(averageRating) || Commerce.NumberExtensions.isNullOrZero(totalRatings)) {
                return Commerce.StringExtensions.EMPTY;
            }
            else {
                return Commerce.StringExtensions.format("{0} ({1})", averageRating, totalRatings);
            }
        };
        Formatters.NumberFormatter = function (value) {
            var numberValue;
            if (Commerce.ObjectExtensions.isNullOrUndefined(value)) {
                return Commerce.StringExtensions.EMPTY;
            }
            else if (Commerce.ObjectExtensions.isString(value)) {
                numberValue = Commerce.NumberExtensions.parseNumber(value);
            }
            else {
                numberValue = value;
            }
            if (isNaN(numberValue)) {
                return Commerce.StringExtensions.EMPTY;
            }
            return Commerce.NumberExtensions.formatNumber(numberValue, Commerce.NumberExtensions.getNumberOfDecimals(numberValue));
        };
        Formatters.AdditionalComponentChargeFormatter = function (value, defaultValue) {
            if (defaultValue === void 0) { defaultValue = "-"; }
            if (Commerce.ObjectExtensions.isNullOrUndefined(value) || isNaN(value)) {
                return defaultValue;
            }
            else if (value === 0) {
                return Commerce.ViewModelAdapter.getResourceString("string_836");
            }
            else {
                return Formatters.PriceFormatter(value);
            }
        };
        Formatters.ProductComponentQuantityFormatter = function (component, defaultValue) {
            if (defaultValue === void 0) { defaultValue = "-"; }
            var value = component.Quantity;
            if (Commerce.ObjectExtensions.isNullOrUndefined(value) || isNaN(value)) {
                return defaultValue;
            }
            else {
                var unitOfMeasure = Commerce.ApplicationContext.Instance.unitsOfMeasureMap.getItem(component.UnitOfMeasure);
                var decimalPrecision = Commerce.ObjectExtensions.isNullOrUndefined(unitOfMeasure) ? undefined : unitOfMeasure.DecimalPrecision;
                return Commerce.NumberExtensions.formatNumber(value, decimalPrecision);
            }
        };
        Formatters.productSubtitle = function (product) {
            return product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Standalone ?
                product.ItemId :
                Commerce.StringExtensions.format("{}, {}", product.ItemId, Commerce.SimpleProductHelper.getVariantDescription(product));
        };
        Formatters.AbsoluteImageUrl = function (source) {
            if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                if (!Commerce.StringExtensions.isNullOrWhitespace(source)) {
                    return Formatters.ImageUrlFormatter(source);
                }
                else {
                    return source;
                }
            }
            else {
                return Commerce.Formatters.ImageBinaryFormatter(source);
            }
        };
        Formatters.CustomerOrderHistoryStatusFormatter = function (salesOrder) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(salesOrder)) {
                return Commerce.StringExtensions.EMPTY;
            }
            else {
                return Commerce.Proxy.Entities.SalesOrderWrapper.getOrderStatusString(salesOrder.StatusValue);
            }
        };
        Formatters.InvoiceTypeFormatter = function (invoiceType) {
            return Commerce.InvoiceLineHelper.getInvoiceTypeTranslation(invoiceType);
        };
        Formatters.InvoicedQuantityFormatter = function (salesLine) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(salesLine)) {
                return Commerce.StringExtensions.EMPTY;
            }
            else if (Commerce.ExtensibleEnumerations.ExtensibleSalesTransactionType.AsyncCustomerQuote.equals(salesLine.transactionType) ||
                (Commerce.ExtensibleEnumerations.ExtensibleSalesTransactionType.CustomerOrder.equals(salesLine.transactionType)
                    && (salesLine.customerOrderType === Commerce.Proxy.Entities.CustomerOrderType.Quote))) {
                return Commerce.NumberExtensions.formatNumber(0, 0);
            }
            else if (Commerce.ExtensibleEnumerations.ExtensibleSalesTransactionType.AsyncCustomerOrder.equals(salesLine.transactionType) ||
                Commerce.ExtensibleEnumerations.ExtensibleSalesTransactionType.PendingSalesOrder.equals(salesLine.transactionType) ||
                (Commerce.ExtensibleEnumerations.ExtensibleSalesTransactionType.CustomerOrder.equals(salesLine.transactionType)
                    && (salesLine.customerOrderType === Commerce.Proxy.Entities.CustomerOrderType.SalesOrder))) {
                var precision = Commerce.NumberExtensions.getNumberOfDecimals(salesLine.QuantityInvoiced);
                return Commerce.NumberExtensions.formatNumber(salesLine.QuantityInvoiced, precision);
            }
            else {
                var precision = Commerce.NumberExtensions.getNumberOfDecimals(salesLine.Quantity);
                return Commerce.NumberExtensions.formatNumber(salesLine.Quantity, precision);
            }
        };
        Formatters.OrderedQuantityFormatter = function (salesLine) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(salesLine)) {
                return Commerce.StringExtensions.EMPTY;
            }
            else if (Commerce.ExtensibleEnumerations.ExtensibleSalesTransactionType.AsyncCustomerQuote.equals(salesLine.transactionType) ||
                (Commerce.ExtensibleEnumerations.ExtensibleSalesTransactionType.CustomerOrder.equals(salesLine.transactionType)
                    && (salesLine.customerOrderType === Commerce.Proxy.Entities.CustomerOrderType.Quote))) {
                var precision = Commerce.NumberExtensions.getNumberOfDecimals(salesLine.Quantity);
                return Commerce.NumberExtensions.formatNumber(salesLine.Quantity, precision);
            }
            else if (Commerce.ExtensibleEnumerations.ExtensibleSalesTransactionType.AsyncCustomerOrder.equals(salesLine.transactionType) ||
                Commerce.ExtensibleEnumerations.ExtensibleSalesTransactionType.PendingSalesOrder.equals(salesLine.transactionType) ||
                (Commerce.ExtensibleEnumerations.ExtensibleSalesTransactionType.CustomerOrder.equals(salesLine.transactionType)
                    && (salesLine.customerOrderType === Commerce.Proxy.Entities.CustomerOrderType.SalesOrder))) {
                var precision = Commerce.NumberExtensions.getNumberOfDecimals(salesLine.QuantityOrdered);
                return Commerce.NumberExtensions.formatNumber(salesLine.QuantityOrdered, precision);
            }
            else {
                var precision = Commerce.NumberExtensions.getNumberOfDecimals(salesLine.Quantity);
                return Commerce.NumberExtensions.formatNumber(salesLine.Quantity, precision);
            }
        };
        Formatters.OfferIdFormatter = function (cartLine) {
            var discountId = Commerce.StringExtensions.EMPTY;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(cartLine) && Commerce.ArrayExtensions.hasElements(cartLine.DiscountLines)) {
                var discountLineWithOffer = Commerce.ArrayExtensions.firstOrUndefined(cartLine.DiscountLines, function (discountLine) { return !Commerce.StringExtensions.isNullOrWhitespace(discountLine.OfferId); });
                if (!Commerce.ObjectExtensions.isNullOrUndefined(discountLineWithOffer)) {
                    discountId = discountLineWithOffer.OfferId;
                }
            }
            return Commerce.StringExtensions.isNullOrWhitespace(discountId) ? Commerce.StringExtensions.EMPTY : discountId;
        };
        Formatters.OriginalPriceFormatter = function (cartLine) {
            var priceToUse = cartLine.OriginalPrice || cartLine.Price;
            return Commerce.Formatters.PriceFormatter(priceToUse);
        };
        Formatters.OrderIdFormatter = function (salesOrder) {
            var genericOrderId = "";
            if (!Commerce.ObjectExtensions.isNullOrUndefined(salesOrder)) {
                genericOrderId = salesOrder.ReceiptId;
                if (Commerce.StringExtensions.isNullOrWhitespace(salesOrder.ReceiptId)) {
                    genericOrderId = salesOrder.ChannelReferenceId;
                    if (Commerce.StringExtensions.isNullOrWhitespace(salesOrder.ChannelReferenceId)) {
                        genericOrderId = salesOrder.SalesId;
                    }
                }
            }
            return genericOrderId;
        };
        Formatters.CustomerImage = function (customer, isLarge) {
            if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                isLarge = isLarge ? isLarge : false;
                if (Commerce.ArrayExtensions.hasElements(customer.Images)
                    && !Commerce.StringExtensions.isNullOrWhitespace(customer.Images[0].Uri)) {
                    var url = Commerce.Formatters.ImageUrlFormatter(customer.Images[0].Uri);
                    return url;
                }
                else {
                    return isLarge ? "/Assets/defaultLarge.png" : "/Assets/defaultSmall.png";
                }
            }
            else {
                return Commerce.Formatters.ImageBinaryFormatter(customer.OfflineImage);
            }
        };
        Formatters.CustomerImageAltText = function (customer, isLarge) {
            var altText = customer.Name || Commerce.StringExtensions.EMPTY;
            if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                if (Commerce.ArrayExtensions.hasElements(customer.Images)
                    && !Commerce.StringExtensions.isNullOrWhitespace(customer.Images[0].AltText)) {
                    altText = customer.Images[0].AltText;
                }
            }
            return altText;
        };
        Formatters.ImageBinaryFormatter = function (source) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(source) && !Commerce.StringExtensions.isNullOrWhitespace(source)) {
                return "data:image/jpeg;base64," + encodeURIComponent(source);
            }
            else {
                return "/Assets/defaultLarge.png";
            }
        };
        Formatters.ImageUrlFormatter = function (url, defaultImagepath) {
            if (!Commerce.StringExtensions.isNullOrWhitespace(url)) {
                var imageUrl = Commerce.ImageDisplayHelper.getFormattedChannelRichMediaBaseUrl(Commerce.ApplicationContext.Instance.channelConfiguration);
                if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online && Commerce.Core.RegularExpressionValidations.validateUrl(url)) {
                    return encodeURIComponent(url);
                }
                else {
                    return Commerce.UrlHelper.formatBaseUrl(imageUrl) + encodeURIComponent(url);
                }
            }
            else {
                if (!Commerce.StringExtensions.isNullOrWhitespace(defaultImagepath)) {
                    return defaultImagepath;
                }
                else {
                    return Commerce.DefaultImages.ProductSmall;
                }
            }
        };
        Formatters.ImageFormatter = function (source, defaultImagepath) {
            if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                return this.ImageUrlFormatter(source, defaultImagepath);
            }
            else {
                return this.ImageBinaryFormatter(source);
            }
        };
        Formatters.channelRichMediaBaseUrlImageFormatter = function (source) {
            if (Commerce.StringExtensions.isNullOrWhitespace(source)) {
                return Commerce.StringExtensions.EMPTY;
            }
            var baseUrl = Commerce.ImageDisplayHelper.getFormattedChannelRichMediaBaseUrl(Commerce.ApplicationContext.Instance.channelConfiguration);
            var image;
            if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online && Commerce.Core.RegularExpressionValidations.validateUrl(source)) {
                image = encodeURIComponent(source);
            }
            else {
                image = Commerce.UrlHelper.formatBaseUrl(baseUrl) + encodeURIComponent(source);
            }
            return image;
        };
        Formatters.productDimensionValueFormatter = function (cartLine, dimensionType) {
            if (cartLine.IsGiftCardLine) {
                return Commerce.StringExtensions.EMPTY;
            }
            var product = Commerce.Session.instance.getFromProductsInCartCache(cartLine.ProductId);
            return Commerce.ObjectExtensions.isNullOrUndefined(product) ? Commerce.StringExtensions.EMPTY : Commerce.SimpleProductHelper.getDimensionValue(product, dimensionType);
        };
        Formatters.CartLineProperty = function (cartLine, propertyName) {
            var returnValue = Commerce.StringExtensions.EMPTY;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(cartLine) && !Commerce.StringExtensions.isNullOrWhitespace(propertyName)) {
                switch (propertyName) {
                    case "RequestedDeliveryDate":
                        var formatter = Commerce.Host.instance.globalization.getDateTimeFormatterWithoutChannelTimeZone(Commerce.Host.Globalization.DateTimeFormat.SHORT_DATE);
                        returnValue = formatter.format(cartLine.RequestedDeliveryDate);
                        break;
                    case "ShippingAddressName":
                        var addressName = Commerce.StringExtensions.EMPTY;
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(cartLine.ShippingAddress)) {
                            addressName = cartLine.ShippingAddress.Name;
                        }
                        returnValue = addressName;
                        break;
                    case "DeliveryDescription":
                        var deliveryDescription = Commerce.StringExtensions.EMPTY;
                        var deliveryOption = Commerce.ApplicationContext.Instance.deliveryOptionsMap.getItem(cartLine.DeliveryMode);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(deliveryOption)) {
                            var isPickupInStore = cartLine.DeliveryMode === Commerce.ApplicationContext.Instance.channelConfiguration.PickupDeliveryModeCode;
                            var isCarryOutInStore = cartLine.DeliveryMode === Commerce.ApplicationContext.Instance.channelConfiguration.CarryoutDeliveryModeCode;
                            var isEmailDelivery = cartLine.DeliveryMode === Commerce.ApplicationContext.Instance.channelConfiguration.EmailDeliveryModeCode;
                            var store = Commerce.ApplicationContext.Instance.availableStores.getItem(cartLine.FulfillmentStoreId);
                            var hasFulfillmentStore = !Commerce.ObjectExtensions.isNullOrUndefined(store) && !Commerce.StringExtensions.isNullOrWhitespace(store.OrgUnitName);
                            if (isPickupInStore && hasFulfillmentStore) {
                                deliveryDescription = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_29224"), store.OrgUnitName);
                            }
                            else if (isCarryOutInStore || isPickupInStore || isEmailDelivery) {
                                deliveryDescription = deliveryOption.Description;
                            }
                            else {
                                if (!hasFulfillmentStore) {
                                    store = Commerce.ApplicationContext.Instance.availableStores.getItem(Commerce.ApplicationContext.Instance.storeNumber);
                                }
                                deliveryDescription = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_29420"), deliveryOption.Description, store.OrgUnitName);
                            }
                        }
                        returnValue = deliveryDescription;
                        break;
                    default:
                        throw "CartLineProperty formatter not implemented for property '" + propertyName + "'";
                }
            }
            else {
                Commerce.RetailLogger.coreFormattersCartLineWrongInputParameters(propertyName, JSON.stringify(cartLine));
            }
            return returnValue;
        };
        Formatters.CartTypeName = function (cart) {
            var resourceId;
            if (Commerce.ObjectExtensions.isNullOrUndefined(cart)) {
                return Commerce.StringExtensions.EMPTY;
            }
            switch (cart.CartTypeValue) {
                case Commerce.Proxy.Entities.CartType.CustomerOrder:
                    switch (cart.CustomerOrderModeValue) {
                        case Commerce.Proxy.Entities.CustomerOrderMode.Cancellation:
                            resourceId = "string_4360";
                            break;
                        case Commerce.Proxy.Entities.CustomerOrderMode.Pickup:
                            resourceId = "string_4358";
                            break;
                        case Commerce.Proxy.Entities.CustomerOrderMode.QuoteCreateOrEdit:
                            resourceId = "string_4359";
                            break;
                        case Commerce.Proxy.Entities.CustomerOrderMode.Return:
                            resourceId = "string_4357";
                            break;
                        default:
                        case Commerce.Proxy.Entities.CustomerOrderMode.CustomerOrderCreateOrEdit:
                            resourceId = "string_4330";
                            break;
                    }
                    break;
                case Commerce.Proxy.Entities.CartType.AccountDeposit:
                    resourceId = "string_4384";
                    break;
                default:
                    if (Commerce.ApplicationContext.Instance.deviceConfiguration.SalesModeDefaultsAsCustomerOrder === true) {
                        resourceId = "string_4330";
                    }
                    else {
                        resourceId = "string_108";
                    }
                    break;
            }
            return Commerce.ViewModelAdapter.getResourceString(resourceId);
        };
        Formatters.CategoryNameTranslator = function (category) {
            var translatedCategoryName = "";
            if (!Commerce.ObjectExtensions.isNullOrUndefined(category) && Commerce.ArrayExtensions.hasElements(category.NameTranslations)) {
                var categoryNameTranslation = category.NameTranslations.filter(function (value) {
                    var languageNameStrCmp = Commerce.StringExtensions.compare(value.Language, Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName, true);
                    return languageNameStrCmp === 0;
                });
                if (categoryNameTranslation.length !== 0) {
                    translatedCategoryName = categoryNameTranslation[0].Text;
                }
                else {
                    translatedCategoryName = category.Name;
                }
            }
            else {
                translatedCategoryName = category.Name;
            }
            return translatedCategoryName;
        };
        Formatters.TransactionTypeFormatter = function (value, entryStatusValue) {
            var transactionType = Number(value);
            var transactionEntryStatus = 0;
            if (isNaN(transactionType)) {
                return "";
            }
            if (typeof entryStatusValue === "number") {
                transactionEntryStatus = entryStatusValue;
            }
            switch (transactionType) {
                case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.CustomerOrder.Value:
                case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.AsyncCustomerOrder.Value:
                case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.AsyncCustomerQuote.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_4515");
                case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.IncomeExpense.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_4516");
                case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.PendingSalesOrder.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_4518");
                case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.Sales.Value:
                    return (transactionEntryStatus === Commerce.Proxy.Entities.TransactionStatus.Voided) ?
                        Commerce.ViewModelAdapter.getResourceString("string_4660") :
                        Commerce.ViewModelAdapter.getResourceString("string_4519");
                case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.BankDrop.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_4572");
                case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.SafeDrop.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_4573");
                case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.Payment.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_4574");
                case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.SalesOrder.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_4575");
                case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.SalesInvoice.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_4576");
                case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.TenderDeclaration.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_4577");
                case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.OpenDrawer.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_6119");
                case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.SuspendedTransaction.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_4581");
                case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.FloatEntry.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_2149");
                case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.RemoveTender.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_2150");
                case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.StartingAmount.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_2151");
                default:
                    return "";
            }
        };
        Formatters.GroupHeaderFormatter = function (category) {
            return Commerce.Formatters.CategoryNameTranslator(category) + "   >";
        };
        Formatters.CategoryImage = function (category, defaultImage) {
            if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(category)
                    && Commerce.ArrayExtensions.hasElements(category.Images)
                    && !Commerce.StringExtensions.isNullOrWhitespace(category.Images[0].Uri)) {
                    if (category.Images[0].Uri === Commerce.DefaultImages.AllProducts) {
                        return Commerce.DefaultImages.AllProducts;
                    }
                    else {
                        return Commerce.Formatters.ImageUrlFormatter(category.Images[0].Uri);
                    }
                }
                else {
                    return Commerce.DefaultImages.ProductLarge;
                }
            }
            else {
                if (Commerce.ObjectExtensions.isNullOrUndefined(category.OfflineImage)) {
                    return Commerce.Formatters.ImageBinaryFormatter(defaultImage);
                }
                return Commerce.Formatters.ImageBinaryFormatter(category.OfflineImage);
            }
        };
        Formatters.TenderLineTypeNameFormatter = function (tenderLine) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(tenderLine) ||
                (!tenderLine.IsHistorical && Commerce.ObjectExtensions.isNullOrUndefined(tenderLine.TenderType))) {
                return Commerce.StringExtensions.EMPTY;
            }
            return tenderLine.IsHistorical ? Commerce.ViewModelAdapter.getResourceString("string_4355") : tenderLine.TenderType.Name;
        };
        Formatters.AmountInTenderedCurrencyFormatter = function (tenderedCurrency) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(tenderedCurrency) || Commerce.ObjectExtensions.isNullOrUndefined(tenderedCurrency.Currency)) {
                return Commerce.StringExtensions.EMPTY;
            }
            return Commerce.NumberExtensions.formatCurrency(tenderedCurrency.AmountInTenderedCurrency, tenderedCurrency.Currency);
        };
        Formatters.TenderLineMoreInformationFormatter = function (tenderLine) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(tenderLine)) {
                if (!Commerce.StringExtensions.isNullOrWhitespace(tenderLine.MaskedCardNumber)) {
                    return tenderLine.MaskedCardNumber;
                }
                else if (!Commerce.StringExtensions.isNullOrWhitespace(tenderLine.GiftCardId)) {
                    return Commerce.Payments.Utilities.PaymentFeatureHelper.getMaskedNumber(tenderLine.GiftCardId);
                }
            }
            return Commerce.StringExtensions.EMPTY;
        };
        Formatters.TenderLineNameFormatter = function (tenderLine) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(tenderLine) ||
                (!tenderLine.IsHistorical && Commerce.ObjectExtensions.isNullOrUndefined(tenderLine.TenderTypeId))) {
                return Commerce.StringExtensions.EMPTY;
            }
            var historicalTenderTypeName = Commerce.ViewModelAdapter.getResourceString("string_4355");
            var tenderType = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderByTypeId(tenderLine.TenderTypeId);
            return Commerce.ObjectExtensions.isNullOrUndefined(tenderType) ? historicalTenderTypeName : tenderType.Name;
        };
        Formatters.PurchaseTransferOrderEnumFormatter = function (value) {
            var stringValue;
            switch (value) {
                case Commerce.Proxy.Entities.PurchaseTransferOrderType.PurchaseOrder:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_3862");
                    break;
                case Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferIn:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_3863");
                    break;
                case Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferOut:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_3864");
                    break;
                case Commerce.Proxy.Entities.PurchaseTransferOrderType.PickingList:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_3867");
                    break;
                default:
                    stringValue = Commerce.StringExtensions.EMPTY;
            }
            return stringValue;
        };
        Formatters.CartLineQuantityFormat = function (cartLine) {
            var precision;
            var quantity = 0;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(cartLine)) {
                quantity = cartLine.Quantity;
                precision = Commerce.NumberExtensions.getNumberOfDecimals(quantity);
            }
            return Commerce.NumberExtensions.formatNumber(quantity, precision);
        };
        Formatters.CartLineUnitOfMeasureFormat = function (cartLine) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(cartLine)) {
                return Commerce.UnitOfMeasureHelper.getDescriptionForSymbol(cartLine.UnitOfMeasureSymbol);
            }
            return null;
        };
        Formatters.VariantNameFormatter = function (cartLine) {
            if (cartLine.IsGiftCardLine) {
                return cartLine.Comment;
            }
            var product = Commerce.Session.instance.getFromProductsInCartCache(cartLine.ProductId);
            return Commerce.ObjectExtensions.isNullOrUndefined(product) ? Commerce.StringExtensions.EMPTY : Commerce.SimpleProductHelper.getVariantDescription(product);
        };
        Formatters.DeliveryDescriptionAndDateFormatter = function (cartLine) {
            var requestedDeliveryDate = Commerce.Formatters.CartLineProperty(cartLine, "RequestedDeliveryDate");
            var deliveryDescription = Commerce.Formatters.CartLineProperty(cartLine, "DeliveryDescription");
            if (Commerce.ViewModelAdapter.isInView("CartView")) {
                return Commerce.StringExtensions.format("{0}<br />{1}", Commerce.EscapingHelper.escapeHtml(deliveryDescription), Commerce.EscapingHelper.escapeHtml(requestedDeliveryDate));
            }
            return deliveryDescription;
        };
        Formatters.ShippingAddressNameFormatter = function (cartLine) {
            return Commerce.Formatters.CartLineProperty(cartLine, "ShippingAddressName");
        };
        Formatters.CartLineAddressFormatterWithHtmlEscape = function (cartLine) {
            return Commerce.Formatters.AddressFormatterWithHtmlEscape(cartLine.ShippingAddress, "span", Commerce.StringExtensions.EMPTY, true);
        };
        Formatters.CommonAddressFormatterWithHtmlEscape = function (address, maxLines) {
            if (maxLines === void 0) { maxLines = 0; }
            return Commerce.Formatters.AddressFormatterWithHtmlEscape(address, "h4", "ellipsis", false, maxLines);
        };
        Formatters.AddressFormatterWithHtmlEscape = function (address, htmlTag, cssClass, newLine, maxLines) {
            if (newLine === void 0) { newLine = false; }
            if (maxLines === void 0) { maxLines = 0; }
            if (Commerce.ObjectExtensions.isNullOrUndefined(address)) {
                return Commerce.StringExtensions.EMPTY;
            }
            var addressString = Commerce.StringExtensions.EMPTY;
            var addressLines = Commerce.AddressHelper.getFormattedAddress(address);
            var newLineTag = newLine ? "<br />" : Commerce.StringExtensions.EMPTY;
            if (Commerce.StringExtensions.isNullOrWhitespace(htmlTag)) {
                htmlTag = "span";
            }
            if (Commerce.StringExtensions.isNullOrWhitespace(cssClass)) {
                cssClass = Commerce.StringExtensions.EMPTY;
            }
            if (maxLines === 0) {
                maxLines = Number.MAX_VALUE;
            }
            for (var i = 0; i < addressLines.length && i < maxLines; i++) {
                addressString += Commerce.StringExtensions.format("<{0} class='{1}'>{2}</{0}>{3}", Commerce.EscapingHelper.escapeHtmlAttribute(htmlTag), Commerce.EscapingHelper.escapeHtmlAttribute(cssClass), Commerce.EscapingHelper.escapeHtml(addressLines[i]), newLineTag);
            }
            return addressString;
        };
        Formatters.CustomerOrderStatusFormatter = function (cartLine) {
            return Commerce.Proxy.Entities.SalesOrderWrapper.getOrderStatusString(cartLine.SalesStatusValue);
        };
        Formatters.QuantityFromStoreInventoryFormatter = function (inventoryAvailabilities) {
            var inventoryAvailability = Commerce.ArrayExtensions.firstOrUndefined(inventoryAvailabilities);
            var quantity = (inventoryAvailability && inventoryAvailability.AvailableQuantity) ? inventoryAvailability.AvailableQuantity : 0;
            return quantity;
        };
        Formatters.OrderedSumFromStoreInventoryFormatter = function (inventoryAvailabilities) {
            var inventoryAvailability = Commerce.ArrayExtensions.firstOrUndefined(inventoryAvailabilities);
            var orderedSum = (inventoryAvailability && inventoryAvailability.OrderedSum) ? inventoryAvailability.OrderedSum : 0;
            return orderedSum;
        };
        Formatters.PhysicalReservedFromStoreInventoryFormatter = function (inventoryAvailabilities) {
            var inventoryAvailability = Commerce.ArrayExtensions.firstOrUndefined(inventoryAvailabilities);
            var physicalReserved = (inventoryAvailability && inventoryAvailability.PhysicalReserved) ? inventoryAvailability.PhysicalReserved : 0;
            return physicalReserved;
        };
        Formatters.UnitOfMeasureFromStoreInventoryFormatter = function (inventoryAvailabilities) {
            var inventoryAvailability = Commerce.ArrayExtensions.firstOrUndefined(inventoryAvailabilities);
            if (!Commerce.ObjectExtensions.isNullOrUndefined(inventoryAvailability)) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(inventoryAvailability.InventoryUnitOfMeasureDescription)) {
                    return inventoryAvailability.InventoryUnitOfMeasureDescription;
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(inventoryAvailability.InventoryUnitOfMeasure)) {
                    return inventoryAvailability.InventoryUnitOfMeasure;
                }
            }
            return Commerce.StringExtensions.EMPTY;
        };
        Formatters.UnitOfMeasureFromAvailableToPromiseFormatter = function (promises) {
            var promise = Commerce.ArrayExtensions.firstOrUndefined(promises);
            var unitOfMeasure = (promise && promise.UnitOfMeasure) ? promise.UnitOfMeasure : Commerce.StringExtensions.EMPTY;
            return unitOfMeasure;
        };
        Formatters.IsRetailStoreFromOrgUnitLocationFormatter = function (storeLocation) {
            var nonStoreWarehouseIdentifier = 0;
            var isRetailStore = storeLocation.ChannelId !== nonStoreWarehouseIdentifier;
            return this.YesNoBooleanFormatter(isRetailStore);
        };
        Formatters.ManageShiftsDataListIconHtmlFormatter = function (shift) {
            var iconHtmlString = Commerce.StringExtensions.EMPTY;
            var cssClasses = Commerce.StringExtensions.EMPTY;
            var ariaLabel = Commerce.StringExtensions.EMPTY;
            if (shift.NumberOfUnreconciledLines > 0) {
                cssClasses = "iconError icon-20x20 width24";
                ariaLabel = Commerce.ViewModelAdapter.getResourceString("string_2160");
            }
            else {
                ariaLabel = Commerce.ViewModelAdapter.getResourceString("string_2159");
            }
            iconHtmlString += Commerce.StringExtensions.format("<div class='grow center pad0'><div class='{0}' role='img' aria-label='{1}'></div></div>", Commerce.EscapingHelper.escapeHtmlAttribute(cssClasses), Commerce.EscapingHelper.escapeHtmlAttribute(ariaLabel));
            return iconHtmlString;
        };
        Formatters.taxOverrideToDescriptionFormatter = function (taxOverride) {
            return taxOverride.AdditionalDescription || taxOverride.Code;
        };
        Formatters.taxExemptCodeFormatter = function (taxExemptCode) {
            var formattedTaxExemptCode;
            if (!Commerce.StringExtensions.isNullOrWhitespace(taxExemptCode)) {
                formattedTaxExemptCode = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_4488"), taxExemptCode);
            }
            return formattedTaxExemptCode;
        };
        Formatters.EmptyFormatter = function (data) {
            return data;
        };
        Formatters.CardTenderTypeValueFormatter = function (value) {
            var stringValue;
            switch (value) {
                case Commerce.Proxy.Entities.LoyaltyCardTenderType.AsCardTender:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_276");
                    break;
                case Commerce.Proxy.Entities.LoyaltyCardTenderType.AsContactTender:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_277");
                    break;
                case Commerce.Proxy.Entities.LoyaltyCardTenderType.NoTender:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_278");
                    break;
                case Commerce.Proxy.Entities.LoyaltyCardTenderType.Blocked:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_279");
                    break;
                default:
                    stringValue = Commerce.StringExtensions.EMPTY;
            }
            return stringValue;
        };
        Formatters.ExtensibleLoyaltyRewardPointActivityEntryTypeValueFormatter = function (value) {
            var stringValue = Commerce.StringExtensions.EMPTY;
            var activityType = Number(value);
            if (!isNaN(activityType)) {
                switch (value) {
                    case Commerce.ExtensibleEnumerations.ExtensibleLoyaltyRewardPointActivityEntryType.Earned.Value:
                        stringValue = Commerce.ViewModelAdapter.getResourceString("string_3282");
                        break;
                    case Commerce.ExtensibleEnumerations.ExtensibleLoyaltyRewardPointActivityEntryType.Returned.Value:
                        stringValue = Commerce.ViewModelAdapter.getResourceString("string_3283");
                        break;
                    case Commerce.ExtensibleEnumerations.ExtensibleLoyaltyRewardPointActivityEntryType.Redeemed.Value:
                        stringValue = Commerce.ViewModelAdapter.getResourceString("string_3284");
                        break;
                    case Commerce.ExtensibleEnumerations.ExtensibleLoyaltyRewardPointActivityEntryType.Refunded.Value:
                        stringValue = Commerce.ViewModelAdapter.getResourceString("string_3285");
                        break;
                    case Commerce.ExtensibleEnumerations.ExtensibleLoyaltyRewardPointActivityEntryType.Adjusted.Value:
                        stringValue = Commerce.ViewModelAdapter.getResourceString("string_3286");
                        break;
                    case Commerce.ExtensibleEnumerations.ExtensibleLoyaltyRewardPointActivityEntryType.Expired.Value:
                        stringValue = Commerce.ViewModelAdapter.getResourceString("string_3287");
                        break;
                    case Commerce.ExtensibleEnumerations.ExtensibleLoyaltyRewardPointActivityEntryType.Pending.Value:
                        stringValue = Commerce.ViewModelAdapter.getResourceString("string_3288");
                        break;
                    case Commerce.ExtensibleEnumerations.ExtensibleLoyaltyRewardPointActivityEntryType.Expiring.Value:
                        stringValue = Commerce.ViewModelAdapter.getResourceString("string_3293");
                        break;
                    default:
                }
            }
            return stringValue;
        };
        Formatters.ShortDateAndTimeFormatter = function (value) {
            var formatter = Commerce.Host.instance.globalization.getDateTimeFormatter(Commerce.Host.Globalization.DateTimeFormat.DATE_TIME);
            return formatter.format(value);
        };
        Formatters.RecentPurchaseIdFormatter = function (purchaseHistory) {
            var result = Commerce.StringExtensions.EMPTY;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(purchaseHistory)) {
                if (!Commerce.StringExtensions.isNullOrWhitespace(purchaseHistory.ReceiptId)) {
                    result = purchaseHistory.ReceiptId;
                }
                else {
                    result = purchaseHistory.SalesId;
                }
            }
            return result;
        };
        Formatters.YesNoAttributeFormatter = function (attributeValue) {
            return this.YesNoBooleanFormatter(attributeValue === "1");
        };
        Formatters.LocalizedStringFormatterForRefinerValue = function (value) {
            if (value instanceof Commerce.Proxy.Entities.ProductRefinerValueClass
                && value.RefinerSourceValue === Commerce.Proxy.Entities.ProductRefinerSource.Rating) {
                switch (value.LeftValueBoundString) {
                    case "1":
                        return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_949"), value.LeftValueBoundString);
                        break;
                    default:
                        return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_950"), value.LeftValueBoundString);
                }
            }
            else {
                return value.LeftValueBoundString;
            }
        };
        Formatters.LargeRecentPurchaseImage = function (imageUrl) {
            if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(imageUrl)) {
                    return Commerce.Formatters.ImageUrlFormatter(imageUrl);
                }
                else {
                    return Commerce.DefaultImages.ProductLarge;
                }
            }
            else {
                return Commerce.Formatters.ImageBinaryFormatter(imageUrl);
            }
        };
        Formatters.SmallRecentPurchaseImage = function (imageUrl) {
            if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(imageUrl)) {
                    return Commerce.Formatters.ImageUrlFormatter(imageUrl);
                }
                else {
                    return Commerce.DefaultImages.ProductSmall;
                }
            }
            else {
                return Commerce.Formatters.ImageBinaryFormatter(imageUrl);
            }
        };
        Formatters.SmallCustomerImage = function (customer) {
            if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(customer) &&
                    Commerce.ArrayExtensions.hasElements(customer.Images) &&
                    !Commerce.StringExtensions.isNullOrWhitespace(customer.Images[0].Uri)) {
                    return Commerce.Formatters.ImageUrlFormatter(customer.Images[0].Uri);
                }
                else {
                    return Commerce.DefaultImages.CustomerSmall;
                }
            }
            else {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(customer.OfflineImage)) {
                    return Commerce.Formatters.ImageBinaryFormatter(customer.OfflineImage);
                }
            }
            return Commerce.StringExtensions.EMPTY;
        };
        Formatters.LargeCustomerImage = function (customer) {
            if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(customer) &&
                    Commerce.ArrayExtensions.hasElements(customer.Images) &&
                    !Commerce.StringExtensions.isNullOrWhitespace(customer.Images[0].Uri)) {
                    return Commerce.Formatters.ImageUrlFormatter(customer.Images[0].Uri);
                }
                else {
                    return Commerce.DefaultImages.CustomerLarge;
                }
            }
            else {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(customer.OfflineImage)) {
                    return Commerce.Formatters.ImageBinaryFormatter(customer.OfflineImage);
                }
            }
            return Commerce.StringExtensions.EMPTY;
        };
        Formatters.LargeClientBookCustomerImage = function (customer) {
            if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(customer) &&
                    Commerce.ArrayExtensions.hasElements(customer.ImageUris) &&
                    !Commerce.StringExtensions.isNullOrWhitespace(customer.ImageUris[0].Uri)) {
                    return Commerce.Formatters.ImageUrlFormatter(customer.ImageUris[0].Uri);
                }
                else {
                    return Commerce.DefaultImages.CustomerLarge;
                }
            }
            return Commerce.StringExtensions.EMPTY;
        };
        Formatters.TextContentFormatter = function (value) {
            var stringValue = "";
            if (Commerce.ObjectExtensions.isNullOrUndefined(value)) {
                return stringValue;
            }
            else {
                return value;
            }
        };
        Formatters.SalesStatusContentFormatter = function (value) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(value)) {
                return Commerce.StringExtensions.EMPTY;
            }
            else {
                var status_1 = value;
                return Commerce.Proxy.Entities.SalesOrderWrapper.getOrderStatusString(status_1);
            }
        };
        Formatters.TotalCollectionFormatter = function (value) {
            var numVal = (value && value.length) ? value.length : 0;
            return numVal.toLocaleString(Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName);
        };
        Formatters.WishListTypeFormatter = function (value) {
            var stringValue = Commerce.StringExtensions.EMPTY;
            if (value === 1) {
                stringValue = Commerce.ViewModelAdapter.getResourceString("string_257");
            }
            return stringValue;
        };
        Formatters.SearchTextSuggestionFormatterWithHtmlEscape = function (htmlString) {
            var searchSuggestionHitPreTag = "{";
            var searchSuggestionHitPostTag = "}";
            var escapedString = Commerce.EscapingHelper.escapeHtmlAttribute(htmlString);
            escapedString = escapedString.replace(new RegExp(searchSuggestionHitPreTag, "g"), "<span class=\"bold\">");
            escapedString = escapedString.replace(new RegExp(searchSuggestionHitPostTag, "g"), "</span>");
            return escapedString;
        };
        Formatters.DeliveryModeCodeValueFormatter = function (dlvModeCode) {
            return !Commerce.ObjectExtensions.isNullOrUndefined(dlvModeCode)
                ? Commerce.ApplicationContext.Instance.deliveryOptionsMap.getItem(dlvModeCode).Description
                : Commerce.StringExtensions.EMPTY;
        };
        Formatters.FulfillmentSalesPersonInfoFormatter = function (salesPersonId, salesPersonFirstName, salesPersonLastName) {
            salesPersonId = salesPersonId || Commerce.StringExtensions.EMPTY;
            salesPersonFirstName = salesPersonFirstName || Commerce.StringExtensions.EMPTY;
            salesPersonLastName = salesPersonLastName || Commerce.StringExtensions.EMPTY;
            var salesPersonInformationFormat = Commerce.ViewModelAdapter.getResourceString("string_13183");
            return Commerce.StringExtensions.format((Commerce.StringExtensions.isNullOrWhitespace(salesPersonInformationFormat) ? "{0} - {1} {2}" : salesPersonInformationFormat), salesPersonId, salesPersonFirstName, salesPersonLastName);
        };
        Formatters.CurrencyPriceFormatter = function (value) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(value) || Commerce.ObjectExtensions.isNullOrUndefined(value.ExchangeRate)) {
                return Commerce.StringExtensions.EMPTY;
            }
            var foreignCurrencyAmount = value.ExchangeRate;
            var foreignCurrencyCode = value.CurrencyCode;
            var localCurrencyAmount = 1;
            var localCurrencyCode = Commerce.ApplicationContext.Instance.deviceConfiguration.Currency;
            if (Commerce.CSSHelpers.currentTextDir === Commerce.CSSHelpers.RIGHT_TO_LEFT_TEXT_DIRECTION) {
                return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_1187"), localCurrencyCode, localCurrencyAmount, foreignCurrencyCode, foreignCurrencyAmount);
            }
            else {
                return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_1187"), foreignCurrencyAmount, foreignCurrencyCode, localCurrencyAmount, localCurrencyCode);
            }
        };
        Formatters.HealthCheckStatusFormatter = function (healthCheckEntity) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(healthCheckEntity) || Commerce.ObjectExtensions.isNullOrUndefined(healthCheckEntity.healthCheckStatus)) {
                return Commerce.ViewModelAdapter.getResourceString("string_30311");
            }
            var statusResx = Commerce.StringExtensions.EMPTY;
            switch (healthCheckEntity.healthCheckStatus.healthCheckState) {
                case Commerce.Client.Entities.HealthCheckStatusEnum.Succeeded:
                    statusResx = "string_30307";
                    break;
                case Commerce.Client.Entities.HealthCheckStatusEnum.Failed:
                    statusResx = "string_30308";
                    break;
                case Commerce.Client.Entities.HealthCheckStatusEnum.Pending:
                    statusResx = "string_30309";
                    break;
                case Commerce.Client.Entities.HealthCheckStatusEnum.Running:
                    statusResx = "string_30310";
                    break;
                case Commerce.Client.Entities.HealthCheckStatusEnum.NotRun:
                    statusResx = "string_30311";
                    break;
                case Commerce.Client.Entities.HealthCheckStatusEnum.Unsupported:
                    statusResx = "string_30312";
            }
            return Commerce.ViewModelAdapter.getResourceString(statusResx);
        };
        Formatters.HealthCheckTimestampFormatter = function (healthCheckEntity) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(healthCheckEntity)
                || Commerce.ObjectExtensions.isNullOrUndefined(healthCheckEntity.healthCheckStatus)
                || Commerce.ObjectExtensions.isNullOrUndefined(healthCheckEntity.healthCheckStatus.timestamp)) {
                return Commerce.ViewModelAdapter.getResourceString("string_30311");
            }
            else {
                return Formatters.DateWithLocalTime(healthCheckEntity.healthCheckStatus.timestamp);
            }
        };
        Formatters.HealthCheckEntityTypeFormatter = function (entityType) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(entityType)) {
                return Commerce.StringExtensions.EMPTY;
            }
            var localizedEntityType = entityType;
            switch (entityType) {
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_TYPE_PRINTER:
                    localizedEntityType = Commerce.ViewModelAdapter.getResourceString("string_30326");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_TYPE_MSR:
                    localizedEntityType = Commerce.ViewModelAdapter.getResourceString("string_30327");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_TYPE_CASH_DRAWER:
                    localizedEntityType = Commerce.ViewModelAdapter.getResourceString("string_30328");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_TYPE_BARCODE_SCANNER:
                    localizedEntityType = Commerce.ViewModelAdapter.getResourceString("string_30329");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_TYPE_LINE_DISPLAY:
                    localizedEntityType = Commerce.ViewModelAdapter.getResourceString("string_30330");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_TYPE_SCALE:
                    localizedEntityType = Commerce.ViewModelAdapter.getResourceString("string_30331");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_TYPE_PINPAD:
                    localizedEntityType = Commerce.ViewModelAdapter.getResourceString("string_30332");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_TYPE_SIGNATURE_CAPTURE:
                    localizedEntityType = Commerce.ViewModelAdapter.getResourceString("string_30333");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_TYPE_PAYMENT_TERMINAL:
                    localizedEntityType = Commerce.ViewModelAdapter.getResourceString("string_30334");
                    break;
            }
            return localizedEntityType;
        };
        Formatters.HealthCheckConfigurationKeyFormatter = function (key) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(key)) {
                return Commerce.StringExtensions.EMPTY;
            }
            var localizedKey = key;
            switch (key) {
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_PROFILE_ID:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30337");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_IS_SHARED_SHIFT_DRAWER:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30338");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_LINE_DISPLAY_DELAY_FOR_LINKED_ITEMS:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30338");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_LINE_DISPLAY_BALANCE_TEXT:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30340");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_LINE_DISPLAY_BINARY_CONVERSION:
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_BINARY_CONVERSION:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30341");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_LINE_DISPLAY_CHARACTER_SET:
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_CHARACTER_SET:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30342");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_LINE_DISPLAY_CLOSED_LINE1:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30343");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_LINE_DISPLAY_CLOSED_LINE2:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30344");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_LINE_DISPLAY_DEVICE_DESCRIPTION:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30345");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_LINE_DISPLAY_DEVICE_TYPE_VALUE:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30346");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_LINE_DISPLAY_DEVICE_NAME:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30347");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_LINE_DISPLAY_DISPLAY_LINKED_ITEM:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30348");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_LINE_DISPLAY_DISPLAY_TERMINAL_CLOSED:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30349");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_LINE_DISPLAY_TOTAL_TEXT:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30350");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_MSR_END_TRACK1:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30351");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_MSR_END_TRACK2:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30352");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_DEVICE_TYPE_VALUE:
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_MSR_DEVICE_TYPE_VALUE:
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_PINPAD_DEVICE_TYPE_VALUE:
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_SCALE_DEVICE_TYPE_VALUE:
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_SIGNATURE_CAPTURE_DEVICE_TYPE_VALUE:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30353");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_DEVICE_DESCRIPTION:
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_MSR_DEVICE_DESCRIPTION:
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_PINPAD_DEVICE_DESCRIPTION:
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_SCALE_DEVICE_DESCRIPTION:
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_SIGNATURE_CAPTURE_DEVICE_DESCRIPTION:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30354");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_DEVICE_NAME:
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_MSR_DEVICE_NAME:
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_PINPAD_DEVICE_NAME:
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_SCALE_DEVICE_NAME:
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_SIGNATURE_CAPTURE_DEVICE_NAME:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30355");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_DEVICE_MAKE:
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_MSR_MAKE:
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_PINPAD_MAKE:
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_SIGNATURE_CAPTURE_MAKE:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30356");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_DEVICE_MODEL:
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_MSR_MODEL:
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_PINPAD_MODEL:
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_SIGNATURE_CAPTURE_MODEL:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30357");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_MSR_SEPARATOR:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30358");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_MSR_START_TRACK:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30359");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_TERMINAL_SETTINGS:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30360");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_ENVIRONMENT_ID:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30361");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_EXCLUSIVE:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30362");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_HARDWARE_PROFILE_REC_ID:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30363");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_PAYMENT_CONNECTOR_ID:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30364");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_INVOICE_NUMBER:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30365");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_IS_TEST_MODE:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30366");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_RECEIPT_PROFILE_ID:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30367");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_DOC_INSERT_REMOVAL_TIMEOUT:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30368");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_LOGO:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30369");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_LOGO_ALIGNMENT:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30370");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_SCALE_MANUAL_INPUT_ALLOWED:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30371");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_SCALE_TIMEOUT_IN_SECONDS:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30372");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_DECODE_DATA:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30373");
                    break;
                case Commerce.HealthCheck.HealthCheckConstants.ENTITY_KEY_SIGNATURE_CAPTURE_FORM_NAME:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30374");
                    break;
                case Commerce.Peripherals.HardwareStation.PeripheralConfigKey.TRANSPORT_TYPE:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30375");
                    break;
                case Commerce.Peripherals.HardwareStation.PeripheralConfigKey.IP_ADDRESS:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30376");
                    break;
                case Commerce.Peripherals.HardwareStation.PeripheralConfigKey.PORT:
                    localizedKey = Commerce.ViewModelAdapter.getResourceString("string_30377");
                    break;
            }
            return localizedKey;
        };
        Formatters.InventorySourceDocumentTypeEnumFormatter = function (value) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(value)) {
                return Commerce.StringExtensions.EMPTY;
            }
            switch (value) {
                case Commerce.Proxy.Entities.InventorySourceDocumentType.PurchaseOrder:
                    return Commerce.ViewModelAdapter.getResourceString("string_12606");
                case Commerce.Proxy.Entities.InventorySourceDocumentType.TransferOrder:
                    return Commerce.ViewModelAdapter.getResourceString("string_12607");
                default:
                    return Commerce.StringExtensions.EMPTY;
            }
        };
        Formatters.InventoryDocumentStatusEnumFormatter = function (value) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(value)) {
                return Commerce.StringExtensions.EMPTY;
            }
            if (!Commerce.ObjectExtensions.isNullOrUndefined(value.SourceDocument)
                && (value.OperationTypeValue === Commerce.Proxy.Entities.InventoryInboundOutboundDocumentOperationType.ReceivePurchaseOrder
                    || value.OperationTypeValue === Commerce.Proxy.Entities.InventoryInboundOutboundDocumentOperationType.ReceiveTransferOrder
                    || value.OperationTypeValue === Commerce.Proxy.Entities.InventoryInboundOutboundDocumentOperationType.ShipTransferOrder)) {
                if (!Commerce.StringExtensions.isNullOrWhitespace(value.WorkDocumentId)
                    && (value.SourceDocument.StatusValue === Commerce.Proxy.Entities.InventoryInboundOutboundSourceDocumentStatus.PartiallyReceived
                        || value.SourceDocument.StatusValue === Commerce.Proxy.Entities.InventoryInboundOutboundSourceDocumentStatus.PartiallyReceived
                        || value.SourceDocument.StatusValue === Commerce.Proxy.Entities.InventoryInboundOutboundSourceDocumentStatus.Requested
                        || (value.SourceDocument.StatusValue === Commerce.Proxy.Entities.InventoryInboundOutboundSourceDocumentStatus.Shipped
                            && value.SourceDocument.Sender !== Commerce.ApplicationContext.Instance.channelConfiguration.InventLocation))) {
                    switch (value.StatusValue) {
                        case Commerce.Proxy.Entities.InventoryDocumentStatus.Paused:
                            return Commerce.ViewModelAdapter.getResourceString("string_12613");
                        case Commerce.Proxy.Entities.InventoryDocumentStatus.InProgress:
                            return Commerce.ViewModelAdapter.getResourceString("string_12612");
                        case Commerce.Proxy.Entities.InventoryDocumentStatus.Committed:
                            return Commerce.ViewModelAdapter.getResourceString("string_12614");
                        case Commerce.Proxy.Entities.InventoryDocumentStatus.ProcessFailed:
                            return Commerce.ViewModelAdapter.getResourceString("string_12619");
                        default:
                            return Commerce.StringExtensions.EMPTY;
                    }
                }
                else {
                    switch (value.SourceDocument.StatusValue) {
                        case Commerce.Proxy.Entities.InventoryInboundOutboundSourceDocumentStatus.Requested:
                            return Commerce.ViewModelAdapter.getResourceString("string_12609");
                        case Commerce.Proxy.Entities.InventoryInboundOutboundSourceDocumentStatus.Shipped:
                            return Commerce.ViewModelAdapter.getResourceString("string_12611");
                        case Commerce.Proxy.Entities.InventoryInboundOutboundSourceDocumentStatus.PartiallyShipped:
                            return Commerce.ViewModelAdapter.getResourceString("string_12610");
                        case Commerce.Proxy.Entities.InventoryInboundOutboundSourceDocumentStatus.Received:
                            return Commerce.ViewModelAdapter.getResourceString("string_12617");
                        case Commerce.Proxy.Entities.InventoryInboundOutboundSourceDocumentStatus.PartiallyReceived:
                            return Commerce.ViewModelAdapter.getResourceString("string_12616");
                        case Commerce.Proxy.Entities.InventoryInboundOutboundSourceDocumentStatus.Cancelled:
                            return Commerce.ViewModelAdapter.getResourceString("string_12618");
                        default:
                            return Commerce.StringExtensions.EMPTY;
                    }
                }
            }
            else if (value.OperationTypeValue === Commerce.Proxy.Entities.InventoryInboundOutboundDocumentOperationType.CreateTransferOrder) {
                switch (value.StatusValue) {
                    case Commerce.Proxy.Entities.InventoryDocumentStatus.Committed:
                        return Commerce.ViewModelAdapter.getResourceString("string_12614");
                    case Commerce.Proxy.Entities.InventoryDocumentStatus.ProcessFailed:
                        return Commerce.ViewModelAdapter.getResourceString("string_12619");
                    case Commerce.Proxy.Entities.InventoryDocumentStatus.ProcessSucceeded:
                        return Commerce.ViewModelAdapter.getResourceString("string_12620");
                    default:
                        return Commerce.ViewModelAdapter.getResourceString("string_12608");
                }
            }
            return Commerce.StringExtensions.EMPTY;
        };
        Formatters.DiscountTypeEnumFormatter = function (value) {
            var stringValue = Commerce.StringExtensions.EMPTY;
            switch (value) {
                case Commerce.Proxy.Entities.PeriodicDiscountOfferType.MultipleBuy:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_30288");
                    break;
                case Commerce.Proxy.Entities.PeriodicDiscountOfferType.MixAndMatch:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_30289");
                    break;
                case Commerce.Proxy.Entities.PeriodicDiscountOfferType.Offer:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_30290");
                    break;
                case Commerce.Proxy.Entities.PeriodicDiscountOfferType.Promotion:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_30291");
                    break;
                case Commerce.Proxy.Entities.PeriodicDiscountOfferType.Threshold:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_30292");
                    break;
                case Commerce.Proxy.Entities.PeriodicDiscountOfferType.LeastExpensiveFavorRetailer:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_30293");
                    break;
                case Commerce.Proxy.Entities.PeriodicDiscountOfferType.OfferLineQuantityLimit:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_30294");
                    break;
                case Commerce.Proxy.Entities.PeriodicDiscountOfferType.ShippingThreshold:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_30297");
                    break;
                default:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_30295");
            }
            return stringValue;
        };
        Formatters.CustomerEmailTypeFormatter = function (contactInfo) {
            if (contactInfo.IsPrimary) {
                return Commerce.ViewModelAdapter.getResourceString("string_30414");
            }
            else if (contactInfo.isReceiptEmail) {
                return Commerce.ViewModelAdapter.getResourceString("string_4599");
            }
            else {
                return Commerce.ViewModelAdapter.getResourceString("string_1392");
            }
        };
        Formatters.CustomerPhoneTypeFormatter = function (contactInfo) {
            if (contactInfo.IsPrimary) {
                return Commerce.ViewModelAdapter.getResourceString("string_1398");
            }
            else {
                return Commerce.ViewModelAdapter.getResourceString("string_1399");
            }
        };
        Formatters.MarketingOptInFormatter = function (isOptIn) {
            return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_1393"), Commerce.Formatters.YesNoBooleanFormatter(isOptIn));
        };
        Formatters.DetailedSalesLineStatusFormatter = function (detailedSalesLineStatusValue) {
            switch (detailedSalesLineStatusValue) {
                case Commerce.ExtensibleEnumerations.DetailedSalesLineStatus.OpenLine.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_13195");
                case Commerce.ExtensibleEnumerations.DetailedSalesLineStatus.Backordered.Value:
                case Commerce.ExtensibleEnumerations.DetailedSalesLineStatus.InProcessing.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_13196");
                case Commerce.ExtensibleEnumerations.DetailedSalesLineStatus.CustomerCanceled.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_13197");
                case Commerce.ExtensibleEnumerations.DetailedSalesLineStatus.SystemCanceled.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_13198");
                case Commerce.ExtensibleEnumerations.DetailedSalesLineStatus.PartiallyPicked.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_13199");
                case Commerce.ExtensibleEnumerations.DetailedSalesLineStatus.Picked.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_13350");
                case Commerce.ExtensibleEnumerations.DetailedSalesLineStatus.PartiallyDelivered.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_13351");
                case Commerce.ExtensibleEnumerations.DetailedSalesLineStatus.Delivered.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_13352");
                case Commerce.ExtensibleEnumerations.DetailedSalesLineStatus.PartiallyInvoiced.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_13353");
                case Commerce.ExtensibleEnumerations.DetailedSalesLineStatus.Invoiced.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_13354");
                case Commerce.ExtensibleEnumerations.DetailedSalesLineStatus.AuthorizedForReturn.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_13355");
                case Commerce.ExtensibleEnumerations.DetailedSalesLineStatus.PartiallyReturned.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_13356");
                case Commerce.ExtensibleEnumerations.DetailedSalesLineStatus.Returned.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_13357");
                case Commerce.ExtensibleEnumerations.DetailedSalesLineStatus.PartiallyExchanged.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_13358");
                case Commerce.ExtensibleEnumerations.DetailedSalesLineStatus.Exchanged.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_13359");
                case Commerce.ExtensibleEnumerations.DetailedSalesLineStatus.ToBeDirectDelivered.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_13360");
                case Commerce.ExtensibleEnumerations.DetailedSalesLineStatus.AtDirectShipper.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_13361");
                default:
                    return Commerce.ViewModelAdapter.getResourceString("string_13362");
            }
        };
        Formatters.DetailedSalesOrderStatusFormatter = function (detailedSalesOrderStatusValue) {
            return Commerce.Proxy.Entities.SalesOrderWrapper.getDetailedSalesOrderStatusString(detailedSalesOrderStatusValue, false, false);
        };
        Formatters._GetRatingPropertyValues = function (value) {
            var result = new Commerce.Dictionary();
            result.setItem(Commerce.ProductRatingProperty.AverageRating, Commerce.NumberExtensions.isNullNaNOrZero(value.AverageRating) ? null : Commerce.NumberExtensions.roundToNDigits(value.AverageRating, 1));
            result.setItem(Commerce.ProductRatingProperty.TotalRatings, Commerce.NumberExtensions.isNullNaNOrZero(value.TotalRatings) ? null : value.TotalRatings);
            return result;
        };
        return Formatters;
    }());
    Commerce.Formatters = Formatters;
    WinJS.Namespace.define("Commerce.Core.Converter", {
        AddressTypeFormatter: WinJS.Binding.converter(function (address) {
            return Commerce.Formatters.AddressTypeTextFormatter(address);
        }),
        AddressHeaderFormatter: WinJS.Binding.converter(function (header) {
            return Commerce.Formatters.AddressHeaderFormatter(header);
        }),
        TenderLineTypeNameFormatter: WinJS.Binding.converter(function (tenderLine) { return Commerce.Formatters.TenderLineTypeNameFormatter(tenderLine); }),
        AmountInTenderedCurrencyFormatter: WinJS.Binding.converter(function (tenderedCurrency) {
            return Commerce.Formatters.AmountInTenderedCurrencyFormatter(tenderedCurrency);
        }),
        TenderLineMoreInformationFormatter: WinJS.Binding.converter(function (tenderLine) { return Commerce.Formatters.TenderLineMoreInformationFormatter(tenderLine); }),
        TenderLineNameFormatter: WinJS.Binding.converter(function (tenderLine) { return Commerce.Formatters.TenderLineNameFormatter(tenderLine); }),
        ProductNameFormatter: WinJS.Binding.converter(function (cartLine) {
            if (cartLine.IsGiftCardLine) {
                return Commerce.ViewModelAdapter.getResourceString("string_5152");
            }
            else if (cartLine.IsInvoiceLine) {
                return Commerce.Formatters.InvoiceTypeFormatter(cartLine.InvoiceTypeValue);
            }
            var product = Commerce.Session.instance.getFromProductsInCartCache(cartLine.ProductId);
            return Commerce.ObjectExtensions.isNullOrUndefined(product) ? Commerce.StringExtensions.EMPTY : product.Name;
        }),
        CartLineQuantityFormat: WinJS.Binding.converter(function (cartLine) { return Commerce.Formatters.CartLineQuantityFormat(cartLine); }),
        SizeNameFormatter: WinJS.Binding.converter(function (cartLine) {
            return Commerce.Formatters.productDimensionValueFormatter(cartLine, Commerce.Proxy.Entities.ProductDimensionType.Size);
        }),
        ColorNameFormatter: WinJS.Binding.converter(function (cartLine) {
            return Commerce.Formatters.productDimensionValueFormatter(cartLine, Commerce.Proxy.Entities.ProductDimensionType.Color);
        }),
        StyleNameFormatter: WinJS.Binding.converter(function (cartLine) {
            return Commerce.Formatters.productDimensionValueFormatter(cartLine, Commerce.Proxy.Entities.ProductDimensionType.Style);
        }),
        ConfigurationNameFormatter: WinJS.Binding.converter(function (cartLine) {
            return Commerce.Formatters.productDimensionValueFormatter(cartLine, Commerce.Proxy.Entities.ProductDimensionType.Configuration);
        }),
        CartCommentFormatter: WinJS.Binding.converter(function (cartLine) {
            if (cartLine.IsGiftCardLine) {
                return "";
            }
            else {
                return cartLine.Comment;
            }
        }),
        RecentPurchaseIdFormatter: WinJS.Binding.converter(function (purchaseHistory) {
            return Commerce.Formatters.RecentPurchaseIdFormatter(purchaseHistory);
        }),
        SearchTextSuggestionFormatterWithHtmlEscape: WinJS.Binding.converter(function (htmlString) {
            var searchSuggestionHitPreTag = "{";
            var searchSuggestionHitPostTag = "}";
            var escapedString = Commerce.EscapingHelper.escapeHtmlAttribute(htmlString);
            escapedString = escapedString.replace(new RegExp(searchSuggestionHitPreTag, "g"), "<span class=\"bold\">");
            escapedString = escapedString.replace(new RegExp(searchSuggestionHitPostTag, "g"), "</span>");
            return escapedString;
        }),
        PaymentCurrencyLineText: WinJS.Binding.converter(function (cartTenderLineTenderType) {
            var paymentCurrencyLineText = Commerce.StringExtensions.EMPTY;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(cartTenderLineTenderType)) {
                var currency = cartTenderLineTenderType.Currency;
                var foreignCurrencyAmount = cartTenderLineTenderType.AmountInTenderedCurrency;
                var exchangeRate = cartTenderLineTenderType.ExchangeRate;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(currency) &&
                    !Commerce.ObjectExtensions.isNullOrUndefined(foreignCurrencyAmount) &&
                    !Commerce.ObjectExtensions.isNullOrUndefined(exchangeRate)) {
                    var amount = Commerce.NumberExtensions.formatCurrency(foreignCurrencyAmount, currency);
                    return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_4342"), amount, currency, exchangeRate.toString());
                }
            }
            return paymentCurrencyLineText;
        }),
        IsPaymentCurrencyLineTextVisible: WinJS.Binding.converter(function (cartTenderLineTenderType) {
            var isVisible = false;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(cartTenderLineTenderType)) {
                var currency = cartTenderLineTenderType.Currency;
                var amountInTenderedCurrency = cartTenderLineTenderType.AmountInTenderedCurrency;
                var exchangeRate = cartTenderLineTenderType.ExchangeRate;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(currency) &&
                    !Commerce.ObjectExtensions.isNullOrUndefined(amountInTenderedCurrency) &&
                    !Commerce.ObjectExtensions.isNullOrUndefined(exchangeRate) &&
                    !Commerce.ObjectExtensions.isNullOrUndefined(cartTenderLineTenderType.TenderTypeId)) {
                    var storeCurrency = Commerce.ApplicationContext.Instance.storeInformation.Currency;
                    isVisible = storeCurrency !== currency;
                }
            }
            return isVisible ? "inline-block" : "none";
        }),
        DecimalFormatter: WinJS.Binding.converter(function (value) {
            if (Commerce.ObjectExtensions.isObject(value)) {
                var currencyAmount = value;
                return Commerce.NumberExtensions.formatCurrency(currencyAmount.ConvertedAmount, currencyAmount.CurrencyCode);
            }
            else if (Commerce.ObjectExtensions.isString(value)) {
                value = Number(value);
                if (isNaN(value)) {
                    return "";
                }
            }
            return Commerce.NumberExtensions.formatNumber(value, Commerce.NumberExtensions.getDecimalPrecision());
        }),
        DenominationFormatter: WinJS.Binding.converter(function (value) {
            var currency;
            var amount;
            if (Commerce.ObjectExtensions.isObject(value)) {
                var cashDeclaration = value;
                currency = cashDeclaration.Currency;
                amount = cashDeclaration.Amount;
            }
            else if (Commerce.ObjectExtensions.isString(value)) {
                amount = Number(value);
            }
            return Commerce.NumberExtensions.formatNumber(amount, Commerce.NumberExtensions.getDecimalPrecision(currency));
        }),
        LinkedProductFormatter: WinJS.Binding.converter(function (cartLine) {
            var isLinkedProduct = false;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(cartLine)) {
                isLinkedProduct = !Commerce.StringExtensions.isNullOrWhitespace(cartLine.LinkedParentLineId);
                if (!isLinkedProduct) {
                    var product = Commerce.Session.instance.getFromProductsInCartCache(cartLine.ProductId);
                    isLinkedProduct = !Commerce.ObjectExtensions.isNullOrUndefined(product) && Commerce.ArrayExtensions.hasElements(product.LinkedProducts);
                }
            }
            return Commerce.Formatters.YesNoBooleanFormatter(isLinkedProduct);
        }),
        InvoicedQuantityFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.InvoicedQuantityFormatter(value);
        }),
        OrderedQuantityFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.OrderedQuantityFormatter(value);
        }),
        CustomerOrderHistoryStatusFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.CustomerOrderHistoryStatusFormatter(value);
        }),
        InvoiceTypeFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.InvoiceTypeFormatter(value.InvoiceTypeValue);
        }),
        PriceFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.PriceFormatter(value);
        }),
        RatingTextFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.RatingTextFormatter(value);
        }),
        OfferIdFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.OfferIdFormatter(value);
        }),
        OriginalPriceFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.OriginalPriceFormatter(value);
        }),
        ExtendedPriceWithoutDiscountFormatter: WinJS.Binding.converter(function (value) {
            var price = value.Price || 0;
            var quantity = value.Quantity || 0;
            return Commerce.NumberExtensions.formatCurrency(price * quantity);
        }),
        TransactionTypeAndEntryStatusFormatter: WinJS.Binding.converter(function (transaction) {
            return Commerce.Formatters.TransactionTypeFormatter(transaction.TransactionTypeValue, transaction.TransactionStatusValue);
        }),
        TransactionTypeFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.TransactionTypeFormatter(value);
        }),
        GroupHeaderFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.CategoryNameTranslator(value) + "   >";
        }),
        CategoryNameFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.CategoryNameTranslator(value);
        }),
        QuantityFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.NumberExtensions.formatNumber(Commerce.ObjectExtensions.isNumber(value) ? value : 0, Commerce.NumberExtensions.getDecimalPrecision());
        }),
        NegativeQuantityFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.NumberExtensions.formatNumber(Commerce.ObjectExtensions.isNumber(value) ? -1 * value : 0, Commerce.NumberExtensions.getDecimalPrecision());
        }),
        IntegerQuantityFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.NumberExtensions.formatNumber(Commerce.ObjectExtensions.isNumber(value) ? value : 0, 0);
        }),
        YesNoBooleanFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.YesNoBooleanFormatter(value);
        }),
        ShouldDisplay: WinJS.Binding.converter(function (value) {
            return value ? "inline-block" : "none";
        }),
        AbsoluteImageUrl: WinJS.Binding.converter(function (url) {
            return Commerce.Formatters.AbsoluteImageUrl(url);
        }),
        ImageUrlFormatter: WinJS.Binding.converter(function (url) {
            return Commerce.Formatters.ImageUrlFormatter(url);
        }),
        LargeRecentPurchaseImage: WinJS.Binding.converter(function (imageUrl) {
            return Commerce.Formatters.LargeRecentPurchaseImage(imageUrl);
        }),
        SmallRecentPurchaseImage: WinJS.Binding.converter(function (imageUrl) {
            return Commerce.Formatters.SmallRecentPurchaseImage(imageUrl);
        }),
        CategoryImage: WinJS.Binding.converter(function (category) {
            return Commerce.Formatters.CategoryImage(category, category.DefaultImage);
        }),
        LargeCustomerImage: WinJS.Binding.converter(function (customer) {
            return Commerce.Formatters.LargeCustomerImage(customer);
        }),
        SmallCustomerImage: WinJS.Binding.converter(function (customer) {
            return Commerce.Formatters.SmallCustomerImage(customer);
        }),
        UnitOfMeasureFromStoreInventory: WinJS.Binding.converter(function (inventoryAvailabilities) {
            return Commerce.Formatters.UnitOfMeasureFromStoreInventoryFormatter(inventoryAvailabilities);
        }),
        QuantityFromStoreInventory: WinJS.Binding.converter(function (inventoryAvailabilities) {
            return Commerce.Formatters.QuantityFromStoreInventoryFormatter(inventoryAvailabilities);
        }),
        OrderedSumFromStoreInventory: WinJS.Binding.converter(function (inventoryAvailabilities) {
            return Commerce.Formatters.OrderedSumFromStoreInventoryFormatter(inventoryAvailabilities);
        }),
        PhysicalReservedFromStoreInventory: WinJS.Binding.converter(function (inventoryAvailabilities) {
            return Commerce.Formatters.PhysicalReservedFromStoreInventoryFormatter(inventoryAvailabilities);
        }),
        UnitOfMeasureFromAvailableToPromiseFormatter: WinJS.Binding.converter(function (promises) {
            return Commerce.Formatters.UnitOfMeasureFromAvailableToPromiseFormatter(promises);
        }),
        IsRetailStoreFromOrgUnitLocation: WinJS.Binding.converter(function (storeLocation) {
            return Commerce.Formatters.IsRetailStoreFromOrgUnitLocationFormatter(storeLocation);
        }),
        FullAddressFromCustomerAddresses: WinJS.Binding.converter(function (customerAddresses) {
            var customerAddress = Commerce.ArrayExtensions.firstOrUndefined(customerAddresses);
            return (customerAddress && customerAddress.FullAddress) ? customerAddress.FullAddress : Commerce.StringExtensions.EMPTY;
        }),
        TotalCollection: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.TotalCollectionFormatter(value);
        }),
        Distance: WinJS.Binding.converter(function (value) {
            return Math.round(value * 10) / 10;
        }),
        DateWithoutTime: WinJS.Binding.converter(function (value) { return Commerce.Formatters.DateWithoutTime(value); }),
        DateWithLocalTime: WinJS.Binding.converter(function (value) { return Commerce.Formatters.DateWithLocalTime(value); }),
        DateWithoutLocalTime: WinJS.Binding.converter(function (value) { return Commerce.Formatters.DateWithoutLocalTime(value); }),
        DateWithoutTimeIgnoreTimezone: WinJS.Binding.converter(function (value) { return Commerce.Formatters.DateWithoutTimeIgnoreTimezone(value); }),
        manageShiftsDataListIconHtmlFormatter: WinJS.Binding.converter(function (shift) { return Commerce.Formatters.ManageShiftsDataListIconHtmlFormatter(shift); }),
        OrderIdFormatter: WinJS.Binding.converter(function (value) { return Commerce.Formatters.OrderIdFormatter(value); }),
        ShortDateAndTime: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.ShortDateAndTimeFormatter(value);
        }),
        ShortTime: WinJS.Binding.converter(function (value) { return Commerce.Formatters.ShortTime(value); }),
        PurchaseTransferOrderEnumFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.PurchaseTransferOrderEnumFormatter(value);
        }),
        shiftStatusEnumFormatter: WinJS.Binding.converter(function (value) {
            var stringValue;
            switch (value) {
                case Commerce.Proxy.Entities.ShiftStatus.BlindClosed:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_4136");
                    break;
                case Commerce.Proxy.Entities.ShiftStatus.Closed:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_4137");
                    break;
                case Commerce.Proxy.Entities.ShiftStatus.None:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_4138");
                    break;
                case Commerce.Proxy.Entities.ShiftStatus.Open:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_4139");
                    break;
                case Commerce.Proxy.Entities.ShiftStatus.Suspended:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_4140");
                    break;
                case Commerce.Proxy.Entities.ShiftStatus.Invalid:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_4208");
                    break;
                default:
                    stringValue = "";
            }
            return stringValue;
        }),
        statusDateTimeFormatterForBlindClosed: WinJS.Binding.converter(function (value) {
            var shiftStatus = value.StatusValue;
            var stringValue;
            switch (shiftStatus) {
                case Commerce.Proxy.Entities.ShiftStatus.BlindClosed:
                    stringValue = Commerce.Formatters.ShortDateAndTimeFormatter(value.StatusDateTime);
                    break;
                default:
                    stringValue = "";
            }
            return stringValue;
        }),
        statusDateTimeFormatterForSuspended: WinJS.Binding.converter(function (value) {
            var shiftStatus = value.StatusValue;
            var stringValue;
            switch (shiftStatus) {
                case Commerce.Proxy.Entities.ShiftStatus.Suspended:
                    stringValue = Commerce.Formatters.ShortDateAndTimeFormatter(value.StatusDateTime);
                    break;
                default:
                    stringValue = "";
            }
            return stringValue;
        }),
        cardTenderTypeValueConverter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.CardTenderTypeValueFormatter(value);
        }),
        extensibleLoyaltyRewardPointActivityEntryTypeValueFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.ExtensibleLoyaltyRewardPointActivityEntryTypeValueFormatter(value);
        }),
        StockCountVariantFormatter: WinJS.Binding.converter(function (stockCountLine) {
            var variantStringValues = Commerce.StringExtensions.EMPTY;
            var variantValues = [
                stockCountLine.itemName,
                stockCountLine.colorTranslation,
                stockCountLine.configurationTranslation,
                stockCountLine.sizeTranslation,
                stockCountLine.styleTranslation
            ];
            for (var i = 0; i < variantValues.length; i++) {
                if (!Commerce.StringExtensions.isNullOrWhitespace(variantValues[i])) {
                    if (variantStringValues === Commerce.StringExtensions.EMPTY) {
                        variantStringValues = variantValues[i];
                    }
                    else {
                        variantStringValues = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_610"), variantStringValues, variantValues[i]);
                    }
                }
            }
            return variantStringValues;
        }),
        PickingAndReceivingDescriptionFormatter: WinJS.Binding.converter(function (pickingAndReceivingLine) {
            var variantStringValues = Commerce.StringExtensions.EMPTY;
            var variantValues = [
                pickingAndReceivingLine.description,
                pickingAndReceivingLine.colorTranslation,
                pickingAndReceivingLine.configurationTranslation,
                pickingAndReceivingLine.sizeTranslation,
                pickingAndReceivingLine.styleTranslation
            ];
            for (var i = 0; i < variantValues.length; i++) {
                if (!Commerce.StringExtensions.isNullOrWhitespace(variantValues[i])) {
                    if (variantStringValues === Commerce.StringExtensions.EMPTY) {
                        variantStringValues = variantValues[i];
                    }
                    else {
                        variantStringValues = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_610"), variantStringValues, variantValues[i]);
                    }
                }
            }
            return variantStringValues;
        }),
        IncomeExpenseAccountTypeFormatter: WinJS.Binding.converter(function (value) {
            var stringValue = "";
            if (value === Commerce.Proxy.Entities.IncomeExpenseAccountType.Income) {
                stringValue = Commerce.ViewModelAdapter.getResourceString("string_4132");
            }
            else {
                stringValue = Commerce.ViewModelAdapter.getResourceString("string_4133");
            }
            return stringValue;
        }),
        WishListTypeFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.WishListTypeFormatter(value);
        }),
        TransferOrderLineVariantFormatter: WinJS.Binding.converter(function (orderLine) {
            var variantStringValues = Commerce.StringExtensions.EMPTY;
            var variantValues = [
                orderLine.ItemName,
                orderLine.InventColorId,
                orderLine.InventSizeId,
                orderLine.InventStyleId,
                orderLine.ConfigId
            ];
            for (var i = 0; i < variantValues.length; i++) {
                if (!Commerce.StringExtensions.isNullOrWhitespace(variantValues[i])) {
                    if (variantStringValues === Commerce.StringExtensions.EMPTY) {
                        variantStringValues = variantValues[i];
                    }
                    else {
                        variantStringValues = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_610"), variantStringValues, variantValues[i]);
                    }
                }
            }
            return variantStringValues;
        }),
        RewardPointsFormatter: WinJS.Binding.converter(function (value) {
            var totalActivePoints = 0;
            value.forEach(function (rewardLine) {
                totalActivePoints += rewardLine.ActivePoints;
            });
            return Commerce.NumberExtensions.formatNumber(totalActivePoints, 0);
        }),
        textContentFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.TextContentFormatter(value);
        }),
        SalesStatusContentFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.SalesStatusContentFormatter(value);
        }),
        commonAddressFormatterWithHtmlEscape: WinJS.Binding.converter(function (address) {
            return Commerce.Formatters.CommonAddressFormatterWithHtmlEscape(address);
        }),
        threeLineAddressFormatterWithHtmlEscape: WinJS.Binding.converter(function (address) {
            return Commerce.Formatters.CommonAddressFormatterWithHtmlEscape(address, 3);
        }),
        storeDistanceFormatter: WinJS.Binding.converter(function (storeLocation) {
            var distanceMeasurement = Commerce.ViewModelAdapter.getResourceString("string_2527");
            var distance = Commerce.NumberExtensions.roundToNDigits(storeLocation.Distance, 1);
            return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_2529"), distance, distanceMeasurement);
        }),
        emptyFormatter: WinJS.Binding.converter(function (data) {
            return Commerce.Formatters.EmptyFormatter(data);
        }),
        ProductComponentQuantityFormatter: WinJS.Binding.converter(function (component) {
            return Commerce.Formatters.ProductComponentQuantityFormatter(component);
        }),
        AdditionalComponentChargeFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.AdditionalComponentChargeFormatter(value);
        }),
        InventorySourceDocumentTypeEnumFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.InventorySourceDocumentTypeEnumFormatter(value);
        }),
        InventoryDocumentStatusEnumFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.InventoryDocumentStatusEnumFormatter(value);
        }),
        HealthCheckStatusFormatter: WinJS.Binding.converter(function (healthCheckEntity) {
            return Formatters.HealthCheckStatusFormatter(healthCheckEntity);
        }),
        HealthCheckTimestampFormatter: WinJS.Binding.converter(function (healthCheckEntity) {
            return Formatters.HealthCheckTimestampFormatter(healthCheckEntity);
        }),
        HealthCheckEntityTypeFormatter: WinJS.Binding.converter(function (entityType) {
            return Formatters.HealthCheckEntityTypeFormatter(entityType);
        }),
        HealthCheckConfigurationKeyFormatter: WinJS.Binding.converter(function (key) {
            return Formatters.HealthCheckConfigurationKeyFormatter(key);
        }),
        DiscountTypeEnumFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.DiscountTypeEnumFormatter(value);
        }),
        CustomerEmailTypeFormatter: WinJS.Binding.converter(function (contactInfo) {
            return Commerce.Formatters.CustomerEmailTypeFormatter(contactInfo);
        }),
        CustomerPhoneTypeFormatter: WinJS.Binding.converter(function (contactInfo) {
            return Commerce.Formatters.CustomerPhoneTypeFormatter(contactInfo);
        }),
        MarketingOptInFormatter: WinJS.Binding.converter(function (isOptIn) {
            return Commerce.Formatters.MarketingOptInFormatter(isOptIn);
        }),
    });
    var valueFormatManager = Commerce.Extensibility.ValueFormatterManager.instance;
    valueFormatManager.YesNoBooleanFormatter = Commerce.Formatters.YesNoBooleanFormatter;
    valueFormatManager.PriceFormatter = Commerce.Formatters.PriceFormatter;
    valueFormatManager.PurchaseTransferOrderTypeFormatter = Commerce.Formatters.PurchaseTransferOrderEnumFormatter;
    valueFormatManager.ShortDateAndTimeFormatter = Commerce.Formatters.ShortDateAndTimeFormatter;
    valueFormatManager.ShortDateFormatter = Commerce.Formatters.DateWithoutTime;
    valueFormatManager.TransactionTypeFormatter = Commerce.Formatters.TransactionTypeFormatter;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var PosDataSourceAdapter = (function () {
            function PosDataSourceAdapter() {
            }
            PosDataSourceAdapter.prototype.createIncrementalDataSourceAdapter = function (winControl, callerContext, callerMethod, pageSize, afterLoadComplete, onLoading, autoSelectFirstItem, autoFocusFirstItemOfEmptyTemplate, selectInvokedItem, pageLoadCallBack, reloadCallBack, updateItemCallBack, pageLoadCompleteCallBackFunction, autoFocusDelayInMilliseconds) {
                var _this = this;
                var $winControlElement = $(winControl.element);
                var pageDataBuffer = ko.observableArray([]);
                var results;
                var templateItems = new Commerce.Dictionary();
                var boundDataItems = new Commerce.Dictionary();
                var uiDataLoaded = ko.observable(false);
                var isFlushingBuffer = false;
                var fetching = false;
                var getMoreData = function (data) {
                    var asyncResult = callerMethod.call(callerContext, pageSize, data.length)
                        .done(function (pageData) {
                        var previousLength = data.length;
                        if (!Commerce.ArrayExtensions.hasElements(pageData)) {
                            pageData = [];
                        }
                        else if (data === results) {
                            pageDataBuffer.push({
                                data: pageData,
                                isUpdate: false
                            });
                        }
                        var callPageLoadCompleteCallBackFunction = function (finalData) {
                            if (Commerce.ObjectExtensions.isFunction(pageLoadCompleteCallBackFunction)) {
                                pageLoadCompleteCallBackFunction.call(callerContext, finalData);
                            }
                        };
                        if (Commerce.ObjectExtensions.isFunction(pageLoadCallBack)) {
                            pageLoadCallBack.call(callerContext, pageData).done(function (updatedData) {
                                if (!Commerce.ArrayExtensions.hasElements(updatedData)) {
                                    updatedData = [];
                                }
                                else if (data === results) {
                                    pageDataBuffer.push({
                                        data: updatedData,
                                        isUpdate: true,
                                        initialIndex: previousLength
                                    });
                                }
                                callPageLoadCompleteCallBackFunction(updatedData);
                            });
                        }
                        else {
                            callPageLoadCompleteCallBackFunction(pageData);
                        }
                    });
                    return asyncResult;
                };
                ko.computed(function () {
                    if (uiDataLoaded() && Commerce.ArrayExtensions.hasElements(pageDataBuffer()) && !isFlushingBuffer) {
                        isFlushingBuffer = true;
                        var _loop_1 = function () {
                            var newPage = pageDataBuffer()[0];
                            pageDataBuffer.remove(newPage);
                            if (newPage.isUpdate === false) {
                                newPage.data.forEach(function (pageItem) {
                                    if (!Commerce.ObjectExtensions.isNullOrUndefined(results)) {
                                        results.push(pageItem);
                                    }
                                });
                            }
                            else {
                                newPage.data.forEach(function (pageItem, index) {
                                    if (templateItems.hasItem(newPage.initialIndex + index) && boundDataItems.hasItem(newPage.initialIndex + index)) {
                                        var templateElement = templateItems.getItem(newPage.initialIndex + index);
                                        var boundData = boundDataItems.getItem(newPage.initialIndex + index);
                                        ko.applyBindings(boundData(pageItem), templateElement);
                                    }
                                });
                            }
                        };
                        while (Commerce.ArrayExtensions.hasElements(pageDataBuffer())) {
                            _loop_1();
                        }
                        fetching = false;
                        uiDataLoaded(false);
                        isFlushingBuffer = false;
                    }
                });
                var loadingStateChanged = function (event) {
                    if (winControl.loadingState === "complete"
                        && !Commerce.ObjectExtensions.isNullOrUndefined(results)
                        && winControl.itemDataSource.list.length === results.length) {
                        uiDataLoaded(true);
                    }
                };
                winControl.addEventListener("loadingstatechanged", WinJS.Utilities.markSupportedForProcessing(loadingStateChanged));
                var overrideTemplate = function (template, data, templateElement) {
                    return function (itemPromise) {
                        return itemPromise.then(function (item) {
                            if (data.length >= pageSize
                                && item.key === data.getItem(data.length - 1).key
                                && !fetching) {
                                fetching = true;
                                getMoreData(data).fail(function () {
                                    fetching = false;
                                });
                            }
                            if (templateElement) {
                                var container = document.createElement("div");
                                templateElement.winControl.render(item.data, container);
                                templateItems.setItem(item.index, container);
                                boundDataItems.setItem(item.index, item.data);
                                return container;
                            }
                            return template(itemPromise, boundDataItems).then(function (element) {
                                templateItems.setItem(item.index, element);
                                return element;
                            });
                        });
                    };
                };
                var loadData = function () {
                    results = new WinJS.Binding.List([]);
                    winControl.setTemplate = function (templateElement) {
                        winControl.itemTemplate = overrideTemplate(winControl.itemTemplate, results, templateElement);
                    };
                    winControl.itemDataSource = results.dataSource;
                    winControl.itemTemplate = overrideTemplate(winControl.itemTemplate, results);
                    var shouldAutoFocusFirstItemOfEmptyTemplate;
                    if (ko.isObservable(autoFocusFirstItemOfEmptyTemplate)) {
                        shouldAutoFocusFirstItemOfEmptyTemplate = autoFocusFirstItemOfEmptyTemplate;
                    }
                    else if (Commerce.ObjectExtensions.isBoolean(autoFocusFirstItemOfEmptyTemplate)) {
                        shouldAutoFocusFirstItemOfEmptyTemplate = ko.observable(autoFocusFirstItemOfEmptyTemplate);
                    }
                    else {
                        shouldAutoFocusFirstItemOfEmptyTemplate = ko.observable(false);
                    }
                    var autoFocusDelay;
                    if (ko.isObservable(autoFocusDelayInMilliseconds)) {
                        autoFocusDelay = autoFocusDelayInMilliseconds;
                    }
                    else if (Commerce.ObjectExtensions.isNumber(autoFocusDelayInMilliseconds)) {
                        autoFocusDelay = ko.observable(autoFocusDelayInMilliseconds);
                    }
                    else {
                        autoFocusDelay = ko.observable(0);
                    }
                    var afterLoadCompleteElement = $(afterLoadComplete);
                    if (Commerce.ObjectExtensions.isFunction(onLoading)) {
                        onLoading(true);
                    }
                    afterLoadCompleteElement.hide();
                    if (Commerce.ObjectExtensions.isFunction(updateItemCallBack)) {
                        updateItemCallBack(function (index, item) {
                            results.setAt(index, item);
                        });
                    }
                    getMoreData(results).always(function () {
                        afterLoadCompleteElement.hide();
                        if (Commerce.ObjectExtensions.isFunction(onLoading)) {
                            onLoading(false);
                        }
                        if (results.length < 1) {
                            afterLoadCompleteElement.show(0, function () {
                                if (shouldAutoFocusFirstItemOfEmptyTemplate()) {
                                    window.setTimeout(function () {
                                        afterLoadCompleteElement.find(":focusable").addBack(":focusable").first().focus();
                                    }, autoFocusDelay());
                                }
                            });
                            $winControlElement.hide();
                        }
                        else {
                            var onShowComplete = function (forceLayout) {
                                if (forceLayout) {
                                    winControl.forceLayout();
                                }
                                if (autoSelectFirstItem === true &&
                                    winControl.selection.count() === 0) {
                                    winControl.selection.set(0);
                                }
                            };
                            if ($winControlElement.is(":hidden")) {
                                $winControlElement.show(0, onShowComplete.bind(_this, true));
                            }
                            else {
                                onShowComplete(false);
                            }
                        }
                    });
                };
                loadData();
                if (Commerce.ObjectExtensions.isFunction(reloadCallBack)) {
                    reloadCallBack(function () {
                        pageDataBuffer([]);
                        uiDataLoaded(false);
                        fetching = false;
                        templateItems.clear();
                        boundDataItems.clear();
                        isFlushingBuffer = false;
                        loadData();
                    });
                    ko.utils.domNodeDisposal.addDisposeCallback(winControl.element, function (e) {
                        reloadCallBack(Function.prototype);
                    });
                }
            };
            PosDataSourceAdapter.prototype.createGroupedDataSourceAdapter = function (winControl, itemDataSource, groupKeySelector, groupDataSelector, parentId, keyName) {
                var applyList = function (value) {
                    if (!Commerce.ArrayExtensions.hasElements(value)) {
                        return;
                    }
                    var groupHeaderItems = [];
                    groupHeaderItems = value.filter(function (c, i, a) {
                        return (c[groupKeySelector] === parentId() || c[groupKeySelector] === c[groupDataSelector]);
                    });
                    groupHeaderItems = Commerce.ObjectExtensions.clone(groupHeaderItems);
                    var groupItems = [];
                    $.each(groupHeaderItems, function (index, groupHeaderItem) {
                        var secondlevelItems = [];
                        secondlevelItems = value.filter(function (c, i, a) {
                            return c[groupKeySelector] === groupHeaderItem[groupDataSelector];
                        });
                        groupItems.push.apply(groupItems, Commerce.ObjectExtensions.clone(secondlevelItems));
                        groupHeaderItem[groupKeySelector] = groupHeaderItem[groupDataSelector];
                    });
                    groupHeaderItems.push.apply(groupHeaderItems, groupItems);
                    var getGroupKey = function (item) {
                        return item[groupKeySelector];
                    };
                    var groupKeyToIndexMap = Object.create(null);
                    groupHeaderItems.forEach(function (headerItem, ind) {
                        var key = getGroupKey(headerItem);
                        groupKeyToIndexMap[key] = ind;
                    });
                    var getIndex = function (groupKey) {
                        var index = groupKeyToIndexMap[groupKey];
                        return index || -1;
                    };
                    var listDataSource = new WinJS.Binding.List(groupHeaderItems);
                    var groupedDataSource = listDataSource.createGrouped(getGroupKey, function groupDataSelector(item) {
                        return { Name: item[keyName], SelectedGroupHeader: item };
                    }, function (left, right) {
                        var leftIndex = getIndex(left);
                        var rightIndex = getIndex(right);
                        return leftIndex - rightIndex;
                    });
                    winControl.itemDataSource = groupedDataSource.dataSource;
                    winControl.groupDataSource = groupedDataSource.groups.dataSource;
                };
                if (itemDataSource.subscribe) {
                    itemDataSource.subscribe(function (newValue) {
                        applyList(newValue);
                    });
                }
                applyList(itemDataSource());
            };
            return PosDataSourceAdapter;
        }());
        Controls.DataSourceAdapter = new PosDataSourceAdapter();
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var KnockoutHandlerHelper = (function () {
        function KnockoutHandlerHelper() {
        }
        KnockoutHandlerHelper.setHandlerViewModel = function (element, handlerViewModel) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(element)) {
                throw "element must be specified.";
            }
            if (Commerce.ObjectExtensions.isNullOrUndefined(handlerViewModel)) {
                throw "handlerViewModel must be specified.";
            }
            $(element).data(KnockoutHandlerHelper._handlerViewModelAttributeName, handlerViewModel);
        };
        KnockoutHandlerHelper.getHandlerInstance = function (parentElement, selector) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(parentElement)) {
                throw "Unable to find handler. parentElement must be specified.";
            }
            var handlerElement = parentElement.querySelector(selector);
            if (Commerce.ObjectExtensions.isNullOrUndefined(handlerElement)) {
                throw "Unable to find handler with selector: " + selector;
            }
            var viewModel = $(handlerElement).data(KnockoutHandlerHelper._handlerViewModelAttributeName);
            if (Commerce.ObjectExtensions.isNullOrUndefined(viewModel)) {
                throw "Unable to find handler viewMode for: " + selector;
            }
            return viewModel;
        };
        KnockoutHandlerHelper.createMultiInstanceKnockoutHandler = function (viewModelType) {
            var handler = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var handlerViewModel = new viewModelType();
                    if (Commerce.ObjectExtensions.isFunction(handlerViewModel.dispose)) {
                        ko.utils.domNodeDisposal.addDisposeCallback(element, function (e) {
                            handlerViewModel.dispose.call(handlerViewModel);
                        });
                    }
                    KnockoutHandlerHelper.setHandlerViewModel(element, handlerViewModel);
                    return handlerViewModel.init.call(handlerViewModel, element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);
                },
                update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var handlerViewModel = $(element).data(KnockoutHandlerHelper._handlerViewModelAttributeName);
                    if (Commerce.ObjectExtensions.isFunction(handlerViewModel.update)) {
                        handlerViewModel.update.call(handlerViewModel, element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);
                    }
                }
            };
            return handler;
        };
        KnockoutHandlerHelper._handlerViewModelAttributeName = "handlerViewModel";
        return KnockoutHandlerHelper;
    }());
    Commerce.KnockoutHandlerHelper = KnockoutHandlerHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var UserControl = (function () {
            function UserControl() {
                this._element = null;
                this._children = null;
            }
            Object.defineProperty(UserControl.prototype, "element", {
                get: function () {
                    if (this._element == null) {
                        this._element = document.createElement("div");
                        this._element.innerHTML = Commerce.StringExtensions.EMPTY;
                    }
                    return this._element;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(UserControl.prototype, "children", {
                get: function () {
                    if (this._children == null) {
                        this._children = [];
                    }
                    return this._children;
                },
                enumerable: true,
                configurable: true
            });
            UserControl.prototype.addControl = function (control) {
                if (control) {
                    this.children.push(control);
                    if (this._element != null) {
                        this._element.appendChild(control.element);
                    }
                }
            };
            UserControl.prototype.render = function () {
                if (this._viewPath !== null && Commerce.StringExtensions.isNullOrWhitespace(this.element.innerHTML)) {
                    var asyncResult_1 = new Commerce.VoidAsyncResult();
                    WinJS.UI.Pages.render(this._viewPath, this.element, this)
                        .done(function () { asyncResult_1.resolve(); });
                    return asyncResult_1;
                }
                return Commerce.VoidAsyncResult.createResolved();
            };
            UserControl.prototype.focus = function () {
                this.element.focus();
            };
            UserControl.prototype.dispose = function () {
                if (this._element) {
                    WinJS.Utilities.disposeSubTree(this._element);
                    UserControl.sterilizeNode(this._element);
                }
                Commerce.ObjectExtensions.disposeAllProperties(this);
            };
            Object.defineProperty(UserControl.prototype, "controlName", {
                get: function () {
                    return this._controlName;
                },
                enumerable: true,
                configurable: true
            });
            UserControl.prototype.onLoaded = function () {
            };
            UserControl.prototype.onCreated = function () {
                var _this = this;
                this.children.forEach(function (control) {
                    _this.element.appendChild(control.element);
                });
            };
            UserControl.sterilizeNode = function (domElement) {
                var $jqueryElement = $(domElement);
                if (!Commerce.ObjectExtensions.isNullOrUndefined($jqueryElement)) {
                    $jqueryElement.children().each(function (unbindElemenetIndex, unbindElement) {
                        UserControl.sterilizeNode(unbindElement);
                    });
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(domElement.winControl)) {
                        Commerce.ObjectExtensions.tryDispose(domElement.winControl);
                    }
                    $jqueryElement.off();
                    $jqueryElement.html("");
                }
                $jqueryElement = null;
            };
            return UserControl;
        }());
        Controls.UserControl = UserControl;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var ModalDialog = (function (_super) {
            __extends(ModalDialog, _super);
            function ModalDialog(numPadInputBroker) {
                var _this = _super.call(this) || this;
                _this._visible = ko.observable(false);
                _this._title = ko.observable(Commerce.StringExtensions.EMPTY);
                _this._subTitle = ko.observable(Commerce.StringExtensions.EMPTY);
                _this._message = ko.observable(Commerce.StringExtensions.EMPTY);
                _this._indeterminateWaitVisible = ko.observable(false);
                _this._subTitleCssClass = ko.observable(null);
                _this._onHidden = new Commerce.VoidAsyncResult();
                _this._numPadInputBroker = !Commerce.ObjectExtensions.isNullOrUndefined(numPadInputBroker) ?
                    numPadInputBroker : new Commerce.Peripherals.NumPadInputBroker();
                return _this;
            }
            Object.defineProperty(ModalDialog.prototype, "visible", {
                get: function () {
                    return this._visible;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ModalDialog.prototype, "numPadInputBroker", {
                get: function () {
                    return this._numPadInputBroker;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ModalDialog.prototype, "title", {
                get: function () {
                    return this._title;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ModalDialog.prototype, "subTitle", {
                get: function () {
                    return this._subTitle;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ModalDialog.prototype, "subTitleCssClass", {
                get: function () {
                    return this._subTitleCssClass;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ModalDialog.prototype, "message", {
                get: function () {
                    return this._message;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ModalDialog.prototype, "indeterminateWaitVisible", {
                get: function () {
                    return this._indeterminateWaitVisible;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ModalDialog.prototype, "dialogResult", {
                get: function () {
                    return this._dialogResult;
                },
                enumerable: true,
                configurable: true
            });
            ModalDialog.prototype.clearResult = function () {
                this._dialogResult.clear();
            };
            ModalDialog.prototype.show = function (dialogState, hideOnResult) {
                var _this = this;
                if (hideOnResult === void 0) { hideOnResult = true; }
                this._dialogResult = new Commerce.AsyncDialogResult(null);
                if (hideOnResult) {
                    this._dialogResult.onAny(function (result) { _this.hide(); });
                }
                if (!this.element.parentNode) {
                    $(this.element).attr("IRemoveable", "true");
                    document.body.appendChild(this.element);
                }
                this.render().done(function () {
                    _this.onShowing(dialogState);
                    if (_this.visible()) {
                        _this._enableNumPad();
                    }
                    Commerce.RetailLogger.viewsControlsModalDialogRendered(_this.controlName);
                });
                return this._dialogResult;
            };
            ModalDialog.prototype.onShowing = function (dialogState) {
                this.visible(true);
            };
            ModalDialog.prototype.hide = function () {
                var _this = this;
                if (!this.visible()) {
                    this._onHidden.resolve();
                }
                else {
                    this.visible(false);
                    this.indeterminateWaitVisible(false);
                }
                return this._onHidden.always(function () {
                    _this.clearResult();
                });
            };
            ModalDialog.prototype.invokeOnHidden = function () {
                this._disableNumPad();
                this.onHidden();
            };
            ModalDialog.prototype.onHidden = function () {
                if (document.body === this.element.parentNode) {
                    ko.removeNode(this.element);
                }
                this._onHidden.resolve();
            };
            ModalDialog.prototype.createViewModelContext = function () {
                return {
                    runtime: Commerce.Runtime,
                    managerFactory: Commerce.Model.Managers.Factory,
                    peripherals: Commerce.Peripherals.instance,
                    stringResourceManager: Commerce.StringResourceManager,
                    triggerManager: Commerce.Triggers.TriggerManager.instance
                };
            };
            ModalDialog.prototype._enableNumPad = function () {
                if (!this._numPadEnabled) {
                    Commerce.Peripherals.instance.numPad.enable(this.numPadInputBroker);
                    this._numPadEnabled = true;
                }
            };
            ModalDialog.prototype._disableNumPad = function () {
                if (this._numPadEnabled) {
                    Commerce.Peripherals.instance.numPad.disable();
                    this._numPadEnabled = false;
                }
            };
            return ModalDialog;
        }(Controls.UserControl));
        Controls.ModalDialog = ModalDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var Dialog;
        (function (Dialog) {
            "use strict";
            var DialogTypes;
            (function (DialogTypes) {
                DialogTypes[DialogTypes["DEFAULT"] = 0] = "DEFAULT";
                DialogTypes[DialogTypes["SEQUENCE"] = 1] = "SEQUENCE";
            })(DialogTypes = Dialog.DialogTypes || (Dialog.DialogTypes = {}));
        })(Dialog = Controls.Dialog || (Controls.Dialog = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var Dialog;
        (function (Dialog) {
            "use strict";
        })(Dialog = Controls.Dialog || (Controls.Dialog = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var Dialog;
        (function (Dialog) {
            "use strict";
        })(Dialog = Controls.Dialog || (Controls.Dialog = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var DynamicPanelBindingHandler = (function () {
            function DynamicPanelBindingHandler() {
            }
            DynamicPanelBindingHandler.prototype.init = function (element, valueAccessor) {
                var options = ko.utils.unwrapObservable(valueAccessor());
                var dynamicPanel = ko.utils.unwrapObservable(options.panel);
                var shouldFadeIn = ko.utils.unwrapObservable(options.shouldFadeIn);
                var onShow = options.onShow;
                DynamicPanelBindingHandler._showPanel(element, dynamicPanel, shouldFadeIn, onShow);
                return { controlsDescendantBindings: true };
            };
            DynamicPanelBindingHandler.prototype.update = function (element, valueAccessor) {
                var options = ko.utils.unwrapObservable(valueAccessor());
                if (element.childElementCount > 0) {
                    var curPanelElement = element.firstElementChild;
                    element.removeChild(curPanelElement);
                }
                var panel = ko.utils.unwrapObservable(options.panel);
                var shouldFadeIn = ko.utils.unwrapObservable(options.shouldFadeIn);
                var onShow = options.onShow;
                DynamicPanelBindingHandler._showPanel(element, panel, shouldFadeIn, onShow);
            };
            DynamicPanelBindingHandler._showPanel = function (panelHostElement, panel, shouldFadeIn, onShow) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(panel)) {
                    return;
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(shouldFadeIn)) {
                    shouldFadeIn = true;
                }
                var panelDiv = Commerce.ObjectExtensions.isNullOrUndefined(panel.element) ? document.createElement("div") : panel.element;
                $(panelDiv).hide();
                var fadeInDuration = DynamicPanelBindingHandler.FADE_IN_DURATION_IN_MILLISECONDS;
                if (!shouldFadeIn) {
                    fadeInDuration = 0;
                }
                if (panelHostElement.childElementCount > 0) {
                    var firstElementChild = panelHostElement.firstElementChild;
                    panelHostElement.insertBefore(panelDiv, firstElementChild);
                }
                else {
                    panelHostElement.appendChild(panelDiv);
                }
                panel.render(panelDiv);
                $(panelDiv).fadeIn(fadeInDuration, function () {
                    if (Commerce.ObjectExtensions.isFunction(onShow)) {
                        onShow();
                    }
                });
            };
            DynamicPanelBindingHandler.FADE_IN_DURATION_IN_MILLISECONDS = 300;
            return DynamicPanelBindingHandler;
        }());
        Controls.DynamicPanelBindingHandler = DynamicPanelBindingHandler;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
ko.bindingHandlers.dynamicPanel = new Commerce.Controls.DynamicPanelBindingHandler();
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var WorkflowPanel = (function () {
            function WorkflowPanel() {
            }
            WorkflowPanel.prototype.dispose = function () {
                Commerce.ObjectExtensions.disposeAllProperties(this);
            };
            return WorkflowPanel;
        }());
        Controls.WorkflowPanel = WorkflowPanel;
        var WorkflowDataPanel = (function (_super) {
            __extends(WorkflowDataPanel, _super);
            function WorkflowDataPanel(viewModel) {
                var _this = _super.call(this) || this;
                _this.viewModel = viewModel;
                return _this;
            }
            return WorkflowDataPanel;
        }(WorkflowPanel));
        Controls.WorkflowDataPanel = WorkflowDataPanel;
        var WorkflowStepPanel = (function (_super) {
            __extends(WorkflowStepPanel, _super);
            function WorkflowStepPanel(step) {
                var _this = _super.call(this) || this;
                _this.step = step;
                return _this;
            }
            return WorkflowStepPanel;
        }(WorkflowPanel));
        Controls.WorkflowStepPanel = WorkflowStepPanel;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var WorkflowStepPanelKnockoutTemplate = (function (_super) {
            __extends(WorkflowStepPanelKnockoutTemplate, _super);
            function WorkflowStepPanelKnockoutTemplate(step, templateId) {
                var _this = _super.call(this, step) || this;
                if (Commerce.StringExtensions.isNullOrWhitespace(templateId)) {
                    throw new Error("The templateId may not be empty or null");
                }
                _this._templateId = templateId;
                return _this;
            }
            Object.defineProperty(WorkflowStepPanelKnockoutTemplate.prototype, "element", {
                get: function () {
                    return this._element;
                },
                enumerable: true,
                configurable: true
            });
            WorkflowStepPanelKnockoutTemplate.prototype.render = function (element) {
                this._element = element;
                try {
                    ko.applyBindingsToNode(this.element, {
                        template: {
                            name: this._templateId,
                            data: this.step
                        }
                    }, this);
                }
                catch (ex) {
                    Commerce.RetailLogger.workflowStepPanelKnockoutTemplateApplyBindingsToNodeFailed(this._templateId, this.step.id, ex.message);
                    throw ex;
                }
            };
            WorkflowStepPanelKnockoutTemplate.prototype.dispose = function () {
                var element = this._element;
                this._element = null;
                ko.cleanNode(element);
                _super.prototype.dispose.call(this);
            };
            return WorkflowStepPanelKnockoutTemplate;
        }(Controls.WorkflowStepPanel));
        Controls.WorkflowStepPanelKnockoutTemplate = WorkflowStepPanelKnockoutTemplate;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var DialogTypes = Controls.Dialog.DialogTypes;
        var WorkflowErrorPanel = (function (_super) {
            __extends(WorkflowErrorPanel, _super);
            function WorkflowErrorPanel(step) {
                return _super.call(this, step, "CommonPanels.ErrorMessagePanel") || this;
            }
            return WorkflowErrorPanel;
        }(Controls.WorkflowStepPanelKnockoutTemplate));
        var MultiPanelModalDialog = (function (_super) {
            __extends(MultiPanelModalDialog, _super);
            function MultiPanelModalDialog(correlationId, workflowViewModel, stepAndPanelMappings, dataPanel) {
                if (dataPanel === void 0) { dataPanel = null; }
                var _this = _super.call(this) || this;
                _this.viewModel = workflowViewModel;
                _this.dialogType = DialogTypes.SEQUENCE;
                _this.dataPanel = dataPanel;
                _this.shouldMainPanelFadeIn = ko.observable(false);
                _this._numPadInputBroker = new Commerce.Peripherals.NumPadInputBroker();
                _this._visible = ko.observable(false);
                _this._showPanels = ko.observable(false);
                _this._correlationId = correlationId;
                _this._setFocusInDialogHandler = null;
                _this._panelHistory = [];
                _this._stepAndPanelMappings = stepAndPanelMappings.concat(MultiPanelModalDialog._defaultStepAndPanelPairs);
                if (Commerce.ArrayExtensions.hasElements(_this._stepAndPanelMappings)) {
                    for (var outerLoopIndex = 0; outerLoopIndex < _this._stepAndPanelMappings.length; outerLoopIndex++) {
                        for (var innerLoopIndex = outerLoopIndex + 1; innerLoopIndex < _this._stepAndPanelMappings.length; innerLoopIndex++) {
                            if (_this._stepAndPanelMappings[outerLoopIndex].stepType === _this._stepAndPanelMappings[innerLoopIndex].stepType) {
                                Commerce.RetailLogger.multiPanelModalDialogDuplicateStepAndPanelMappingsDefined(correlationId, _this._getFunctionName(_this._stepAndPanelMappings[outerLoopIndex].stepType), _this._getFunctionName(_this._stepAndPanelMappings[outerLoopIndex].panelType), _this._getFunctionName(_this._stepAndPanelMappings[innerLoopIndex].panelType));
                            }
                        }
                    }
                }
                _this.buttons = _this.viewModel.commands.map(function (commandVM, index) {
                    return {
                        id: commandVM.id,
                        operationId: commandVM.actionId,
                        isPrimary: index === 0,
                        label: commandVM.name,
                        disable: ko.computed(function () { return !commandVM.canExecute(); }),
                        visible: commandVM.isVisible
                    };
                });
                _this.ariaLabel = _this.getAriaLabel(_this.viewModel.title());
                _this.currentPanel = ko.computed(function () {
                    var step = _this.viewModel.currentStep();
                    return _this._getPanel(step);
                }, _this);
                _this.showPanels = ko.computed(function () {
                    return _this._showPanels();
                });
                return _this;
            }
            Object.defineProperty(MultiPanelModalDialog.prototype, "isVisible", {
                get: function () {
                    return this._visible;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MultiPanelModalDialog.prototype, "numPadInputBroker", {
                get: function () {
                    return this._numPadInputBroker;
                },
                enumerable: true,
                configurable: true
            });
            MultiPanelModalDialog.prototype.show = function (correlationId, options) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw new Error("The parameter options to MultiPanelModalDialog.show was null or undefined");
                }
                if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                    correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                }
                this._correlationId = correlationId;
                if (this._visible()) {
                    return Commerce.AsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MULTIPANEL_WORKFLOW_DIALOG_IS_ALREADY_SHOWN)]);
                }
                if (!this.element.parentNode) {
                    $(this.element).attr("IRemoveable", "true");
                    document.body.appendChild(this.element);
                }
                this.bind();
                this._visible(true);
                return Commerce.AsyncResult.fromPromise(this.viewModel.runWorkflowAsync(this._correlationId, options)).always(function () {
                    _this._correlationId = Commerce.StringExtensions.EMPTY;
                    _this.close();
                });
            };
            MultiPanelModalDialog.prototype.close = function () {
                if (document.body === this.element.parentNode) {
                    ko.removeNode(this.element);
                }
                this.dispose();
            };
            MultiPanelModalDialog.prototype.onMainPanelShow = function () {
                var _this = this;
                if (Commerce.ObjectExtensions.isFunction(this._setFocusInDialogHandler)) {
                    Commerce.Host.instance.timers.setImmediate(function () {
                        _this._setFocusInDialogHandler();
                    });
                }
                if (!this.shouldMainPanelFadeIn()) {
                    this.shouldMainPanelFadeIn(true);
                }
            };
            MultiPanelModalDialog.prototype.afterShow = function () {
                this._showPanels(true);
            };
            MultiPanelModalDialog.prototype.setSetFocusInDialogHandler = function (handler) {
                this._setFocusInDialogHandler = handler;
            };
            MultiPanelModalDialog.prototype.bind = function () {
                ko.applyBindingsToNode(this.element, {
                    template: {
                        name: MultiPanelModalDialog.DIALOG_TEMPLATE_NAME,
                        data: this
                    }
                }, this);
            };
            MultiPanelModalDialog.prototype.getAriaLabel = function (dialogTitle) {
                return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_8200"), dialogTitle);
            };
            MultiPanelModalDialog.prototype._getPanel = function (step) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(step)) {
                    return null;
                }
                else {
                    if (Commerce.ArrayExtensions.hasElements(this._panelHistory)) {
                        var panel_1 = Commerce.ArrayExtensions.firstOrUndefined(this._panelHistory, function (p) {
                            return p.step === step;
                        });
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(panel_1)) {
                            return panel_1;
                        }
                    }
                    var stepAndPanelPair = Commerce.ArrayExtensions.firstOrUndefined(this._stepAndPanelMappings, function (pair) {
                        return step instanceof pair.stepType;
                    });
                    if (Commerce.ObjectExtensions.isNullOrUndefined(stepAndPanelPair)) {
                        Commerce.RetailLogger.multiPanelModalDialogFailedAsPanelForStepNotFound(this._correlationId, this.viewModel.title(), step.id);
                        throw new Error("Failed to find the panel for the current step.");
                    }
                    var panel = new stepAndPanelPair.panelType(step);
                    this._panelHistory.push(panel);
                    return panel;
                }
            };
            MultiPanelModalDialog.prototype._getFunctionName = function (functionInstance) {
                var _a;
                var functionName = Commerce.StringExtensions.EMPTY;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(functionInstance)) {
                    functionName = functionInstance.name;
                    if (Commerce.StringExtensions.isNullOrWhitespace(functionName)) {
                        functionName = (_a = functionInstance.toString().match(/^function\s*([^\s(]+)/)[1]) !== null && _a !== void 0 ? _a : Commerce.StringExtensions.EMPTY;
                    }
                }
                return functionName;
            };
            MultiPanelModalDialog.DIALOG_TEMPLATE_NAME = "multiPanelDialog.Dialog";
            MultiPanelModalDialog._defaultStepAndPanelPairs = [
                { stepType: Commerce.ViewModels.Framework.WorkflowErrorStepViewModel, panelType: WorkflowErrorPanel }
            ];
            return MultiPanelModalDialog;
        }(Controls.UserControl));
        Controls.MultiPanelModalDialog = MultiPanelModalDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var TabIndexController = (function () {
        function TabIndexController() {
            this._elementCounter = 0;
            this._sectionElementsById = {};
            this._trackedElementsByKey = {};
        }
        TabIndexController.prototype.init = function (viewElementSelector, observerAttributeFilter, sectionElementSelectors) {
            this._targetElement = document.querySelector(viewElementSelector);
            if (Commerce.ObjectExtensions.isNullOrUndefined(this._targetElement)) {
                throw new Error("TabIndexController.init unable to find target element: " + viewElementSelector);
            }
            this._initializeElements(viewElementSelector, sectionElementSelectors);
            this._observer = new MutationObserver(this._processMutations.bind(this));
            this._observer.observe(this._targetElement, {
                attributes: true,
                attributeFilter: observerAttributeFilter || ["aria-selected"],
                attributeOldValue: false,
                subtree: true,
                childList: true
            });
        };
        TabIndexController.prototype.disconnect = function () {
            var _this = this;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(this._observer)) {
                this._observer.disconnect();
                this._observer = null;
            }
            Object.keys(this._trackedElementsByKey).forEach(function (key) {
                _this._trackedElementsByKey[key].removeAttribute(TabIndexController.trackAttribute);
                _this._trackedElementsByKey[key].removeAttribute(TabIndexController.tabIndexAttribute);
            });
            this._elementCounter = 0;
            this._sectionElementsById = {};
            this._targetElement = null;
            this._trackedElementsByKey = {};
        };
        TabIndexController.prototype._initializeElements = function (viewElementSelector, sectionElementSelectors) {
            var _this = this;
            var $targetElement = $(this._targetElement);
            if (Commerce.ArrayExtensions.hasElements(sectionElementSelectors)) {
                sectionElementSelectors.forEach(function (id) {
                    _this._sectionElementsById[id] = $targetElement.find(id)[0];
                });
            }
            else {
                this._sectionElementsById[viewElementSelector] = this._targetElement;
            }
            var allTracked = [];
            allTracked.push.apply(allTracked, $targetElement.find(TabIndexController.tabbableVisibleEnabledFilter).toArray());
            allTracked.forEach(function (element) {
                element.removeAttribute(TabIndexController.trackAttribute);
                element.removeAttribute(TabIndexController.tabIndexAttribute);
                var key = _this._trackElement(element);
                _this._trackedElementsByKey[key] = element;
            });
            this._updateIndexes();
        };
        TabIndexController.prototype._processMutations = function (mutationRecords) {
            if (this._trackElements(mutationRecords)) {
                this._updateIndexes();
            }
        };
        TabIndexController.prototype._updateIndexes = function () {
            var _this = this;
            var isRTL = document.body.getAttribute("dir") === "rtl";
            var visibleSections = Object.keys(this._sectionElementsById)
                .filter(function (key) { return $(_this._sectionElementsById[key]).is(":visible"); })
                .map(function (key) { return ({ element: _this._sectionElementsById[key], id: key }); })
                .sort(function (a, b) { return _this._compareElements(a.element, b.element, true, isRTL); });
            var elementIdPairsInSectionBySectionId = {};
            Object.keys(this._trackedElementsByKey)
                .map(function (key) { return ({ element: _this._trackedElementsByKey[key], id: key }); })
                .forEach(function (elementId) {
                var sectionId = visibleSections.filter(function (pair) { return pair.element.contains(elementId.element); })[0];
                if (sectionId) {
                    if (elementIdPairsInSectionBySectionId[sectionId.id] === undefined) {
                        elementIdPairsInSectionBySectionId[sectionId.id] = [];
                    }
                    elementIdPairsInSectionBySectionId[sectionId.id].push(elementId);
                }
            });
            var tabIndex = 0;
            visibleSections.forEach(function (pair) {
                if (elementIdPairsInSectionBySectionId[pair.id] === undefined) {
                    return;
                }
                elementIdPairsInSectionBySectionId[pair.id]
                    .sort(function (a, b) { return _this._compareElements(a.element, b.element, false, isRTL); })
                    .forEach(function (pair) { return pair.element.setAttribute(TabIndexController.tabIndexAttribute, (++tabIndex).toString()); });
            });
        };
        TabIndexController.prototype._trackElements = function (mutationRecords) {
            var _this = this;
            var elementsToTrack = [];
            var elementsToRemove = [];
            mutationRecords.filter(function (m) {
                if (m.addedNodes.length !== 0) {
                    elementsToTrack.push.apply(elementsToTrack, m.addedNodes);
                }
                else if (m.removedNodes.length !== 0) {
                    elementsToRemove.push.apply(elementsToRemove, m.removedNodes);
                }
                else if (m.type === "attributes") {
                    if (m.target.hasAttribute(TabIndexController.trackAttribute) === false) {
                        elementsToTrack.push(m.target);
                    }
                }
            });
            var allRemoved = $(elementsToRemove).filter(TabIndexController.trackAttributeFilter).toArray();
            allRemoved.push.apply(allRemoved, $(elementsToRemove).find(TabIndexController.trackAttributeFilter).toArray());
            elementsToRemove = allRemoved;
            var allTracked = $(elementsToTrack).filter(TabIndexController.tabbableVisibleEnabledFilter).toArray();
            allTracked.push.apply(allTracked, $(elementsToTrack).find(TabIndexController.tabbableVisibleEnabledFilter).toArray());
            elementsToTrack = allTracked;
            elementsToRemove.forEach(function (element) {
                delete _this._trackedElementsByKey[element.getAttribute(TabIndexController.trackAttribute)];
                element.removeAttribute(TabIndexController.trackAttribute);
                element.removeAttribute(TabIndexController.tabIndexAttribute);
            });
            elementsToTrack.forEach(function (element) {
                var key = _this._trackElement(element);
                _this._trackedElementsByKey[key] = element;
            });
            return elementsToTrack.length !== 0 || elementsToRemove.length !== 0;
        };
        TabIndexController.prototype._trackElement = function (element) {
            var trackingId = element.getAttribute(TabIndexController.trackAttribute);
            if (trackingId === null || trackingId === "") {
                trackingId = "e#" + (++this._elementCounter);
                element.setAttribute(TabIndexController.trackAttribute, trackingId);
            }
            return trackingId;
        };
        TabIndexController.prototype._compareElements = function (elementA, elementB, isSection, isRTL) {
            var aRect = elementA.getBoundingClientRect();
            var bRect = elementB.getBoundingClientRect();
            if (isSection) {
                if (isRTL) {
                    return bRect.right - aRect.right || aRect.top - bRect.top;
                }
                else {
                    return aRect.left - bRect.left || aRect.top - bRect.top;
                }
            }
            else {
                if (isRTL) {
                    return aRect.top - bRect.top || bRect.right - aRect.right;
                }
                else {
                    return aRect.top - bRect.top || aRect.left - bRect.left;
                }
            }
        };
        TabIndexController.trackAttribute = "__postrack";
        TabIndexController.trackAttributeFilter = "[" + TabIndexController.trackAttribute + "]";
        TabIndexController.tabIndexAttribute = "tabindex";
        TabIndexController.tabbableVisibleEnabledFilter = ":tabbable:visible:not([disabled])";
        return TabIndexController;
    }());
    Commerce.TabIndexController = TabIndexController;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var ActivationErrorControl = (function (_super) {
            __extends(ActivationErrorControl, _super);
            function ActivationErrorControl(options) {
                var _this = _super.call(this) || this;
                _this.errorHeaderMessage = options.errorHeaderMessage;
                _this.clientErrorMessage = options.clientErrorMessage;
                _this.errorMessage = options.errorMessage;
                _this.errorDetails = options.errorDetails;
                _this.footerMessage = options.footerMessage;
                _this.continueLabel = options.continueLabel;
                _this.retryFunction = options.retryFunction;
                _this.headerDeviceId = Commerce.ObjectExtensions.isNullOrUndefined(options.headerDeviceId)
                    ? ko.observable(Commerce.StringExtensions.EMPTY) : options.headerDeviceId;
                _this.headerRegisterNumber = Commerce.ObjectExtensions.isNullOrUndefined(options.headerRegisterNumber)
                    ? ko.observable(Commerce.StringExtensions.EMPTY) : options.headerRegisterNumber;
                _this.previousLabel = Commerce.ObjectExtensions.isNullOrUndefined(options.previousLabel)
                    ? ko.observable(Commerce.ViewModelAdapter.getResourceString("string_8073")) : options.previousLabel;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options.previousFunction)) {
                    _this.previousButtonVisible = ko.observable(true);
                    _this.previousFunction = options.previousFunction;
                }
                else {
                    _this.previousButtonVisible = ko.observable(false);
                    _this.previousFunction = null;
                }
                _this.headerMessageVisible = ko.computed(function () {
                    return !Commerce.StringExtensions.isNullOrWhitespace(_this.headerDeviceId()) &&
                        !Commerce.StringExtensions.isNullOrWhitespace(_this.headerRegisterNumber());
                }, _this);
                _this.appSessionId = TsLogging.LoggerBase.getAppSessionId();
                return _this;
            }
            return ActivationErrorControl;
        }(Controls.UserControl));
        Controls.ActivationErrorControl = ActivationErrorControl;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var AppBar;
        (function (AppBar) {
            var AppBarBindingHandler = (function () {
                function AppBarBindingHandler() {
                }
                AppBarBindingHandler.prototype.init = function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                    var options = ko.utils.unwrapObservable(valueAccessor()) || Object.create(null);
                    var $element = $(element);
                    $element.addClass("AppBar appBarBackgroundColor dynamicsSymbolFont bottom0 left0 right0");
                    $element.find("button").each(function (index, elem) {
                        if (!elem.winControl) {
                            new WinJS.UI.AppBarCommand(elem);
                        }
                    });
                    var dynamicElements = [];
                    if (Commerce.ArrayExtensions.hasElements(options.extensionCommands)) {
                        dynamicElements = options.extensionCommands.map(function (vm) {
                            var buttonElement = document.createElement("button");
                            if (element.firstElementChild) {
                                element.firstElementChild.insertAdjacentElement("beforebegin", buttonElement);
                            }
                            else {
                                element.appendChild(buttonElement);
                            }
                            new WinJS.UI.AppBarCommand(buttonElement);
                            var canExecute = ko.observable(vm.canExecute);
                            vm.addMessageHandler("CanExecuteChanged", canExecute);
                            var isVisible = ko.observable(vm.isVisible);
                            vm.addMessageHandler("VisibilityChanged", isVisible);
                            var onClick = function (args) {
                                vm.execute({ correlationId: Commerce.LoggerHelper.getNewCorrelationId() });
                            };
                            var commandOptions = {
                                extraClass: vm.extraClass,
                                id: vm.id,
                                labelResx: Commerce.StringExtensions.EMPTY,
                                visible: isVisible,
                                enabled: canExecute,
                                label: vm.label,
                                flyout: undefined,
                                onclick: onClick
                            };
                            return { element: buttonElement, appBarCommandOptions: commandOptions };
                        });
                    }
                    var appBarWinControl = new WinJS.UI.AppBar(element, options);
                    var showAppBarLabel = false;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(Commerce.ApplicationContext.Instance.deviceConfiguration)) {
                        showAppBarLabel = Commerce.ApplicationContext.Instance.deviceConfiguration.ShowAppBarLabel;
                    }
                    if (showAppBarLabel) {
                        appBarWinControl.closedDisplayMode = "full";
                    }
                    var $overflowButton = $element.find(".win-appbar-overflowbutton");
                    $element.find(".win-appbar-overflowbutton").click(function (e) {
                        e.preventDefault();
                        $overflowButton.attr("aria-expanded", $overflowButton.attr("aria-expanded") === "true" ? "false" : "true");
                    });
                    $element.find(".win-appbar-overflowbutton").focusin(function (e) {
                        $overflowButton.attr("aria-expanded", $element.hasClass("win-appbar-opened") ? "true" : "false");
                    });
                    $element.find(".win-appbar-overflowbutton").focusout(function (e) {
                        $overflowButton.attr("aria-expanded", $element.hasClass("win-appbar-opened") ? "true" : "false");
                    });
                    ko.utils.domNodeDisposal.addDisposeCallback(element, function (e) {
                        if (element.winControl) {
                            element.winControl.dispose();
                        }
                    });
                    $overflowButton.attr("aria-label", Commerce.ViewModelAdapter.getResourceString("string_1700"));
                    $overflowButton.attr("aria-expanded", "false");
                    $overflowButton.attr("title", Commerce.ViewModelAdapter.getResourceString("string_1700"));
                    ko.applyBindingsToDescendants(bindingContext, element);
                    if (Commerce.ArrayExtensions.hasElements(dynamicElements)) {
                        dynamicElements.forEach(function (dynamicElement) {
                            ko.cleanNode(dynamicElement.element);
                            ko.applyBindingsToNode(dynamicElement.element, { appBarCommand: dynamicElement.appBarCommandOptions });
                        });
                    }
                    return { controlsDescendantBindings: true };
                };
                return AppBarBindingHandler;
            }());
            AppBar.AppBarBindingHandler = AppBarBindingHandler;
            ko.bindingHandlers.appBar = new AppBarBindingHandler();
        })(AppBar = Controls.AppBar || (Controls.AppBar = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var AppBar;
        (function (AppBar) {
            var AppBarCommandBindingHandler = (function () {
                function AppBarCommandBindingHandler() {
                }
                AppBarCommandBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var options = ko.utils.unwrapObservable(valueAccessor()) || Object.create(null);
                    var $element = $(element).addClass("AppBarCommand");
                    var flyoutControl = null;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(options.flyout)) {
                        flyoutControl = $(options.flyout)[0].winControl;
                    }
                    var onclickHandler = options.onclick;
                    var appBarCommand = null;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(element.winControl)) {
                        appBarCommand = element.winControl;
                        options.onclick = function (eventArgs) {
                            if (Commerce.ObjectExtensions.isNullOrUndefined($element.attr("disabled"))) {
                                if (Commerce.ObjectExtensions.isFunction(onclickHandler)) {
                                    onclickHandler.call(viewModel, eventArgs);
                                }
                                if (!Commerce.ObjectExtensions.isNullOrUndefined(flyoutControl)) {
                                    if (flyoutControl.element.getAttribute("aria-label") === "Menu" &&
                                        flyoutControl.element.getAttribute("role") === "menu") {
                                        flyoutControl.element.setAttribute("role", "presentation");
                                    }
                                    if (flyoutControl.hidden) {
                                        flyoutControl.show(eventArgs.currentTarget);
                                    }
                                    else {
                                        flyoutControl.hide();
                                    }
                                }
                            }
                        };
                        if (!Commerce.StringExtensions.isNullOrWhitespace(options.extraClass)) {
                            appBarCommand.extraClass = options.extraClass;
                        }
                        appBarCommand.id = options.id;
                        appBarCommand.onclick = options.onclick;
                        if (!Commerce.StringExtensions.isNullOrWhitespace(options.labelResx)) {
                            appBarCommand.label = Commerce.ViewModelAdapter.getResourceString(options.labelResx);
                        }
                    }
                    AppBarCommandBindingHandler._updateCommandState(element, options);
                    ko.utils.domNodeDisposal.addDisposeCallback(element, function (e) {
                        onclickHandler = Function.prototype;
                        flyoutControl = null;
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(element.winControl)) {
                            element.winControl.onclick = Function.prototype;
                            element.winControl.dispose();
                        }
                    });
                };
                AppBarCommandBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var options = ko.utils.unwrapObservable(valueAccessor());
                    AppBarCommandBindingHandler._updateCommandState(element, options);
                };
                AppBarCommandBindingHandler._updateCommandState = function (element, options) {
                    var $element = $(element);
                    if (element.winControl) {
                        var $appbarElement = $element.closest(".win-appbar");
                        if ($appbarElement.length > 0) {
                            var appBar = $appbarElement[0].winControl;
                            var appBarCommand = element.winControl;
                            if (options.hasOwnProperty("disabled")) {
                                appBarCommand.disabled = ko.utils.unwrapObservable(options.disabled);
                            }
                            if (options.hasOwnProperty("enabled")) {
                                appBarCommand.disabled = !ko.utils.unwrapObservable(options.enabled);
                            }
                            $element.attr("aria-disabled", appBarCommand.disabled ? "true" : "false");
                            if (Commerce.StringExtensions.isNullOrWhitespace(options.labelResx) && options.hasOwnProperty("label")) {
                                var label = ko.utils.unwrapObservable(options.label);
                                if (!Commerce.StringExtensions.isNullOrWhitespace(label)) {
                                    appBarCommand.label = label;
                                }
                            }
                            var updatedVisibilityValue = ko.utils.unwrapObservable(options.visible) !== false;
                            var previousVisibilityValueString = $element.attr("visible");
                            var hasVisibilityAttribute = !Commerce.StringExtensions.isNullOrWhitespace(previousVisibilityValueString);
                            var previousVisibilityValue = previousVisibilityValueString === "true";
                            var shouldUpdateVisibleCommands = !hasVisibilityAttribute || previousVisibilityValue !== updatedVisibilityValue;
                            if (shouldUpdateVisibleCommands) {
                                $element.attr("visible", updatedVisibilityValue ? "true" : "false");
                                var $appBarCommands = $appbarElement.find(".AppBarCommand");
                                var $visibleAppBarCommands = $appBarCommands.not("[visible=false]");
                                var visibleAppBarCommands = $visibleAppBarCommands.map(function (index, domElement) {
                                    return domElement.winControl;
                                });
                                appBar.showOnlyCommands(visibleAppBarCommands);
                            }
                            appBar.forceLayout();
                        }
                        if (Commerce.ApplicationContext.Instance.deviceConfiguration.ShowAppBarLabel) {
                            $appbarElement.trigger("commandsUpdated");
                        }
                    }
                };
                return AppBarCommandBindingHandler;
            }());
            AppBar.AppBarCommandBindingHandler = AppBarCommandBindingHandler;
            ko.bindingHandlers.appBarCommand = new AppBarCommandBindingHandler();
        })(AppBar = Controls.AppBar || (Controls.AppBar = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var AppBar;
        (function (AppBar) {
            "use strict";
        })(AppBar = Controls.AppBar || (Controls.AppBar = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var AppBar;
        (function (AppBar) {
            "use strict";
        })(AppBar = Controls.AppBar || (Controls.AppBar = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var Bing;
        (function (Bing) {
            var MapMethods = (function () {
                function MapMethods() {
                }
                MapMethods.DEFAULT_ZOOM_LEVEL = 13;
                MapMethods.SHOW_ALL_ZOOM_LEVEL = 8;
                MapMethods.PIN_LOCATION = "pinLocation";
                MapMethods.SET_MAP_VIEW = "setMapView";
                MapMethods.INIT = "init";
                MapMethods.SEARCH_BY_ADDRESS = "searchByAddress";
                MapMethods.REMOVE_PUSHPINS = "removeAllPushpins";
                MapMethods.ADD_INFOBOX = "setInfobox";
                MapMethods.REMOVE_INFOBOX = "removeInfobox";
                MapMethods.APPLY_THEME = "applyCSSTheme";
                MapMethods.APPLY_ACCENT_COLOR = "applyAccentColor";
                MapMethods.APPLY_TEXT_DIRECTION = "applyTextDirection";
                MapMethods.INITIALIZE_THEME_ELEMENT_IDS = "initializeThemeElementIds";
                return MapMethods;
            }());
            Bing.MapMethods = MapMethods;
            var MapEvents = (function () {
                function MapEvents() {
                }
                MapEvents.ERROR = "error";
                MapEvents.INFOBOX_HYPERLINK_CLICKED = "infoboxHyperlinkClicked";
                MapEvents.INITIALIZATION_ERROR = "initialization_error";
                MapEvents.LOADED = "loaded";
                MapEvents.READY = "ready";
                MapEvents.SEARCH_SUCCESS = "searchSuccess";
                MapEvents.UPDATE_LOCATIONS = "updateLocations";
                return MapEvents;
            }());
            Bing.MapEvents = MapEvents;
            var MapController = (function () {
                function MapController(content, map, eventHandlers) {
                    var _this = this;
                    this._cssSettingsInitialized = false;
                    this._currentMessageEventListener = null;
                    this._map = map;
                    this._eventHandlers = eventHandlers;
                    this._content = content;
                    this._onAccentColorChanged = function (data) {
                        _this._postMessage(MapMethods.APPLY_ACCENT_COLOR, [data.accentColor]);
                    };
                    Commerce.EventProxy.Instance.addCustomEventHandler(this._map, "AccentColorChanged", this._onAccentColorChanged);
                    this._onThemeChanged = function (data) {
                        _this._postMessage(MapMethods.APPLY_THEME, [data.theme]);
                    };
                    Commerce.EventProxy.Instance.addCustomEventHandler(this._map, "ThemeChanged", this._onThemeChanged);
                    this._onTextDirectionChanged = function (data) {
                        _this._postMessage(MapMethods.APPLY_TEXT_DIRECTION, [data.textDirection]);
                    };
                    Commerce.EventProxy.Instance.addCustomEventHandler(this._map, "TextDirectionChanged", this._onTextDirectionChanged);
                }
                MapController.createBingMapsElement = function (parentElementId, elementId, cssClass, dataBind) {
                    var iFrame = $("<iframe>").attr("id", elementId);
                    var mapControlHtmlName = "Controls/Bing.Maps/map.html";
                    if (Commerce.Host.instance.globalization.getCloudInstance() === Commerce.Host.CloudInstance.Mooncake) {
                        mapControlHtmlName = "Controls/Bing.Maps/map.cn.html";
                    }
                    iFrame.attr("src", Commerce.UrlHelper.getWebCompartmentUrl(document, mapControlHtmlName));
                    iFrame.attr("sandbox", "allow-scripts allow-same-origin allow-forms");
                    if (!Commerce.StringExtensions.isNullOrWhitespace(cssClass)) {
                        iFrame.attr("class", cssClass);
                    }
                    if (!Commerce.StringExtensions.isNullOrWhitespace(dataBind)) {
                        iFrame.attr("data-bind", dataBind);
                    }
                    iFrame.appendTo("#" + parentElementId);
                    return document.getElementById(elementId);
                };
                MapController.prototype.addMessageEventListener = function (listener) {
                    this._removeCurrentEventListener();
                    this._currentMessageEventListener = listener;
                    window.addEventListener(MapController.LISTENER_TYPE, listener, false);
                };
                MapController.prototype.processMessage = function (msg) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(msg) || Commerce.ObjectExtensions.isNullOrUndefined(msg.data)) {
                        return;
                    }
                    if (Commerce.ObjectExtensions.isNullOrUndefined(this._map)) {
                        return;
                    }
                    if (msg.source !== this._map.contentWindow) {
                        return;
                    }
                    var call = JSON.parse(msg.data);
                    if (this._eventHandlers.hasItem(call.event)) {
                        this._eventHandlers.getItem(call.event).call(this._content, call);
                    }
                    switch (call.event) {
                        case MapEvents.LOADED:
                            if (!this._cssSettingsInitialized) {
                                this._postMessage(MapMethods.INITIALIZE_THEME_ELEMENT_IDS, [Commerce.CSSHelpers.posLightThemeElementId,
                                    Commerce.CSSHelpers.posDarkThemeElementId, Commerce.CSSHelpers.winUILightThemeElementId, Commerce.CSSHelpers.winUIDarkThemeElementId]);
                                this._initializeCSSSettings();
                            }
                            break;
                        case MapEvents.READY:
                            this._loadMap();
                            break;
                    }
                };
                MapController.prototype.hasApiKey = function () {
                    return !(Commerce.StringExtensions.isEmptyOrWhitespace(Commerce.ApplicationContext.Instance.channelConfiguration.BingMapsApiKey));
                };
                MapController.prototype.addMapPin = function (latitude, longitude, pinText) {
                    this._postMessage(MapMethods.PIN_LOCATION, [latitude, longitude, pinText]);
                };
                MapController.prototype.setMapView = function (location) {
                    this._postMessage(MapMethods.SET_MAP_VIEW, [location != null ? location.Latitude : null,
                        location != null ? location.Longitude : null,
                        MapMethods.DEFAULT_ZOOM_LEVEL]);
                };
                MapController.prototype.searchByAddress = function (address) {
                    this._postMessage(MapMethods.SEARCH_BY_ADDRESS, [address]);
                };
                MapController.prototype.removePushpins = function () {
                    this._postMessage(MapMethods.REMOVE_PUSHPINS, []);
                };
                MapController.prototype.addInfoBox = function (latitude, longitude, title, text, hyperlinkId) {
                    this._postMessage(MapMethods.ADD_INFOBOX, [latitude, longitude, hyperlinkId, title, text]);
                };
                MapController.prototype.removeInfobox = function () {
                    this._postMessage(MapMethods.REMOVE_INFOBOX, []);
                };
                MapController.prototype.addStoreInfobox = function (storeWrapper, showDetailsUrl) {
                    var textContent = Commerce.StringExtensions.EMPTY;
                    var closeButtonId = "infobox-close";
                    textContent += "<div id='" + closeButtonId + "' class='h4 closeButton primaryFontColor iconCancel'></div>";
                    textContent += "<div class='row'>";
                    textContent += "<div>";
                    textContent += "<div class='h3 ellipsis primaryFontColor'>" + storeWrapper.store.OrgUnitName + "</div>";
                    textContent += "<div class='h4 primaryFontColor'>" + storeWrapper.store.OrgUnitNumber + "</div>";
                    textContent += "</div>";
                    textContent += "</div>";
                    textContent += "<div class='h4 ellipsis secondaryFontColor'>" +
                        Commerce.AddressHelper.getFormattedAddress(storeWrapper.orgUnit.OrgUnitAddress, true) + "</div>";
                    this.addInfoBox(storeWrapper.store.Latitude, storeWrapper.store.Longitude, Commerce.StringExtensions.EMPTY, textContent, closeButtonId);
                };
                MapController.prototype.dispose = function () {
                    var mapElement = this._map;
                    this._map = null;
                    this._content = null;
                    this._eventHandlers.clear();
                    this._removeCurrentEventListener();
                    Commerce.EventProxy.Instance.removeCustomEventHandler(mapElement, "AccentColorChanged", this._onAccentColorChanged);
                    this._onAccentColorChanged = null;
                    Commerce.EventProxy.Instance.removeCustomEventHandler(mapElement, "ThemeChanged", this._onThemeChanged);
                    this._onThemeChanged = null;
                    Commerce.EventProxy.Instance.removeCustomEventHandler(mapElement, "TextDirectionChanged", this._onTextDirectionChanged);
                    this._onTextDirectionChanged = null;
                };
                MapController.prototype._removeCurrentEventListener = function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this._currentMessageEventListener)) {
                        window.removeEventListener(MapController.LISTENER_TYPE, this._currentMessageEventListener, false);
                        this._currentMessageEventListener = null;
                    }
                };
                MapController.prototype._postMessage = function (functionName, args) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(this._map) || Commerce.ObjectExtensions.isNullOrUndefined(this._map.contentWindow)) {
                        return;
                    }
                    this._map.contentWindow.postMessage(JSON.stringify({
                        functionName: functionName,
                        args: args
                    }), "*");
                };
                MapController.prototype._initializeCSSSettings = function () {
                    this._postMessage(MapMethods.APPLY_ACCENT_COLOR, [Commerce.CSSHelpers.accentColor]);
                    this._postMessage(MapMethods.APPLY_TEXT_DIRECTION, [Commerce.CSSHelpers.currentTextDir]);
                    this._postMessage(MapMethods.APPLY_THEME, [Commerce.CSSHelpers.currentThemeLoaded]);
                    this._cssSettingsInitialized = true;
                };
                MapController.prototype._loadMap = function () {
                    if (!this.hasApiKey()) {
                        Commerce.NotificationHandler.displayErrorMessage("string_29013");
                        return;
                    }
                    this._postMessage(MapMethods.INIT, [Commerce.ApplicationContext.Instance.channelConfiguration.BingMapsApiKey]);
                };
                MapController.LISTENER_TYPE = "message";
                return MapController;
            }());
            Bing.MapController = MapController;
        })(Bing = Controls.Bing || (Controls.Bing = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var UI;
    (function (UI) {
        var HelpBubbles;
        (function (HelpBubbles) {
            "use strict";
            var BubbleControl = (function () {
                function BubbleControl() {
                    this.isInProgress = ko.observable(false);
                    this._activeTitle = ko.observable(null);
                }
                BubbleControl.instance = function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(this._instance)) {
                        this._instance = new BubbleControl();
                    }
                    return this._instance;
                };
                BubbleControl.prototype.reset = function (location, element, arrowColor) {
                    var _this = this;
                    this._arrowColor = arrowColor;
                    $.getJSON(BubbleControl._path)
                        .done((function (data) {
                        _this._bubbleConfig = data;
                        _this._$container = $(BubbleControl._bubbleContainerSelector);
                        _this._targetHandler = (function (event) { _this.moveNext(true); }).bind(_this);
                        _this.isInProgress(true);
                        _this.onAfterNavigate(location, element);
                    }).bind(this));
                };
                BubbleControl.prototype.stopTour = function (showHowToEnable) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this._bubbleConfig) &&
                        !Commerce.ObjectExtensions.isNullOrUndefined(this._bubbleConfig.stopTourBubble) &&
                        showHowToEnable) {
                        this._bubbleConfig.intro = [];
                        this._bubbleConfig.global = [this._bubbleConfig.stopTourBubble];
                        this._bubbleConfig.totalCount = 1;
                        this._bubbleConfig.byPage = {};
                        this.moveNext(true);
                    }
                    else {
                        this.hideActiveBubble();
                    }
                    this.isInProgress(false);
                };
                BubbleControl.prototype.getIsInProgress = function () {
                    return this.isInProgress();
                };
                BubbleControl.prototype.onBeforeNavigate = function () {
                    this._activePage = null;
                    this.hideActiveBubble();
                };
                BubbleControl.prototype.onAfterNavigate = function (location, element) {
                    this._activePage = location;
                    this._$pageContainer = $(element);
                    this._timer = window.setTimeout(this.moveNext.bind(this), BubbleControl._delay);
                };
                BubbleControl.prototype.textSwitch = function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(this._activeBubble)) {
                        return false;
                    }
                    if (this._activeBubble.title.length > this._activeTextIndex) {
                        this._activeTitle(Commerce.ViewModelAdapter.getResourceString(this._activeBubble.title[this._activeTextIndex]));
                        if (this._activeTextIndex + 1 < this._activeBubble.title.length) {
                            this._textTimer = window.setTimeout(this.moveNext.bind(this), BubbleControl.TEXT_DELAY);
                        }
                        else {
                            return false;
                        }
                        return true;
                    }
                    return false;
                };
                BubbleControl.prototype.moveNext = function (isTargetClick) {
                    if (isTargetClick === void 0) { isTargetClick = false; }
                    this.clearTimers();
                    if (!isTargetClick) {
                        if (this.textSwitch()) {
                            return;
                        }
                    }
                    this.hideActiveBubble();
                    this._timer = window.setTimeout(this.showBubble.bind(this), BubbleControl._delay);
                };
                BubbleControl.prototype.showBubble = function () {
                    var bubble = this.getNextBubble();
                    if (Commerce.ObjectExtensions.isNullOrUndefined(bubble)) {
                        return;
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this._$target)) {
                        this._$target.bind("click", this._targetHandler);
                    }
                    this._activeTextIndex = 0;
                    this._activeTitle(Commerce.ViewModelAdapter.getResourceString(bubble.title[this._activeTextIndex]));
                    this._activeBubble = bubble;
                    bubble.isArrowVisible =
                        Commerce.ObjectExtensions.isNullOrUndefined(bubble.isArrowVisible) ? true : bubble.isArrowVisible;
                    ko.cleanNode(this._$container[0]);
                    ko.applyBindingsToNode(this._$container[0], {
                        template: {
                            name: BubbleControl._templateName,
                            data: {
                                title: this._activeTitle,
                                size: bubble.size,
                                isArrowVisible: bubble.isArrowVisible,
                                arrowColor: this._arrowColor
                            }
                        },
                        click: this.moveNext.bind(this)
                    });
                    var $bubbleElement = this._$container.find(BubbleControl._bubbleElementSelector);
                    this.setPosition(this._$target, bubble, $bubbleElement);
                    if (bubble.title.length > 1) {
                        this._textTimer = window.setTimeout(this.textSwitch.bind(this), BubbleControl.TEXT_DELAY);
                    }
                    else {
                        this._timer = window.setTimeout(this.moveNext.bind(this), BubbleControl.HIDE_DELAY);
                    }
                };
                BubbleControl.prototype.setRotation = function ($bubbleElement, rotation) {
                    var $rotateContainer = $bubbleElement.find(BubbleControl._rotateContainer);
                    var rotationDegree = rotation + 45;
                    if (Commerce.CSSHelpers.isRightToLeft()) {
                        rotationDegree *= -1;
                    }
                    $rotateContainer.css("transform", Commerce.StringExtensions.format(BubbleControl._rotateFormatter, rotationDegree));
                };
                BubbleControl.prototype.getNextBubble = function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(this._bubbleConfig) || this._bubbleConfig.totalCount === 0) {
                        this.isInProgress(false);
                        return null;
                    }
                    var bubble = null;
                    var bubbleList;
                    var pageBubbles = this._bubbleConfig.byPage[this._activePage];
                    var pageSpecificElement = false;
                    if (this._bubbleConfig.intro.length > 0) {
                        bubbleList = this._bubbleConfig.intro;
                    }
                    else if (pageBubbles && pageBubbles.length > 0) {
                        bubbleList = pageBubbles;
                        pageSpecificElement = true;
                    }
                    else if (this._bubbleConfig.global.length > 0) {
                        bubbleList = this._bubbleConfig.global;
                    }
                    if (bubbleList) {
                        bubble = bubbleList[bubbleList.length - 1];
                        if (bubble.targetElement !== "viewport") {
                            var targetElement = void 0;
                            if (pageSpecificElement) {
                                targetElement = this._$pageContainer.find(Commerce.StringExtensions.format(BubbleControl._searchByAttributeSelector, bubble.targetElement));
                            }
                            else {
                                targetElement = $(":root").find(Commerce.StringExtensions.format(BubbleControl._searchByAttributeSelector, bubble.targetElement));
                            }
                            if (targetElement.length === 0 || targetElement.is(":hidden")) {
                                this._timer = window.setTimeout(this.moveNext.bind(this), BubbleControl._delay);
                                return null;
                            }
                            else {
                                this._$target = targetElement;
                            }
                        }
                        else {
                            this._$target = null;
                        }
                        bubbleList.pop();
                        this._bubbleConfig.totalCount--;
                    }
                    return bubble;
                };
                BubbleControl.prototype.setPosition = function ($target, bubble, $bubbleElem) {
                    var top = 0;
                    var left = 0;
                    var position = bubble.position;
                    this.setRotation($bubbleElem, bubble.rotation);
                    if (bubble.targetElement === "viewport") {
                        this.positionInViewPort(bubble, $bubbleElem);
                        return;
                    }
                    if (Commerce.ObjectExtensions.isNullOrUndefined(position.top)) {
                        top = $target.offset().top + $target.outerHeight() - position.bottom;
                    }
                    else {
                        top = $target.offset().top + position.top;
                    }
                    if (Commerce.ObjectExtensions.isNullOrUndefined(position.left)) {
                        left = $target.offset().left + $target.outerWidth() - position.right;
                    }
                    else {
                        left = $target.offset().left + position.left;
                    }
                    var elementPosition = this.fixPosition($bubbleElem, bubble, top, left);
                    $bubbleElem.css("top", elementPosition.top + "px");
                    $bubbleElem.css("left", elementPosition.left + "px");
                };
                BubbleControl.prototype.positionInViewPort = function (bubble, $bubbleElem) {
                    this.fixPosition($bubbleElem, bubble, 0, 0);
                    $bubbleElem.css("position", "fixed");
                    if (bubble.position.anchor === "center") {
                        var elementSize = $bubbleElem.height();
                        var position = Commerce.StringExtensions.format(BubbleControl._centerFormatting, elementSize / 2);
                        $bubbleElem.css("top", position);
                        $bubbleElem.css("left", position);
                        return;
                    }
                    if (bubble.position.anchor.indexOf("left") >= 0) {
                        $bubbleElem.css("left", BubbleControl._viewPortAnchorDistance);
                    }
                    if (bubble.position.anchor.indexOf("top") >= 0) {
                        $bubbleElem.css("top", BubbleControl._viewPortAnchorDistance);
                    }
                    if (bubble.position.anchor.indexOf("bottom") >= 0) {
                        $bubbleElem.css("bottom", BubbleControl._viewPortAnchorDistance);
                    }
                    if (bubble.position.anchor.indexOf("right") >= 0) {
                        $bubbleElem.css("right", BubbleControl._viewPortAnchorDistance);
                    }
                };
                BubbleControl.prototype.fixPosition = function ($bubbleElem, bubble, top, left) {
                    var elementHeight = $bubbleElem.height();
                    var elementWidth = $bubbleElem.width();
                    var $textElement = $bubbleElem.find(BubbleControl._bubbleTextElementSelector);
                    var paddingBottom = window.parseInt($textElement.css("padding-bottom"));
                    if (!bubble.isArrowVisible) {
                        $textElement.css("padding-top", paddingBottom + "px");
                        return null;
                    }
                    if (Commerce.CSSHelpers.isRightToLeft()) {
                        bubble.rotation *= -1;
                    }
                    if (bubble.rotation > 0) {
                        left -= elementWidth;
                    }
                    if (bubble.rotation === -90 || bubble.rotation === 90) {
                        top -= elementHeight / 2;
                        var paddingClass = bubble.rotation > 0 ? BubbleControl._arrowRightClass : BubbleControl._arrowLeftClass;
                        $textElement.addClass(paddingClass);
                    }
                    if (bubble.rotation >= 135 || bubble.rotation <= -135) {
                        top -= elementHeight;
                        $textElement.addClass(BubbleControl._arrowBottomClass);
                    }
                    return { top: top, left: left };
                };
                BubbleControl.prototype.clearTimers = function () {
                    window.clearTimeout(this._timer);
                    window.clearTimeout(this._textTimer);
                };
                BubbleControl.prototype.hideActiveBubble = function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this._$target)) {
                        this._$target.unbind("click", this._targetHandler);
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this._bubbleConfig) && this._bubbleConfig.totalCount <= 0) {
                        this.isInProgress(false);
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this._activeBubble)) {
                        ko.cleanNode(this._$container[0]);
                        this._$container.empty();
                        this._activeBubble = null;
                        this._activeTextIndex = -1;
                        this.clearTimers();
                    }
                };
                BubbleControl.HIDE_DELAY = 7000;
                BubbleControl.TEXT_DELAY = 5000;
                BubbleControl._delay = 100;
                BubbleControl._arrowLeftClass = "arrow-left";
                BubbleControl._arrowRightClass = "arrow-right";
                BubbleControl._arrowBottomClass = "arrow-bottom";
                BubbleControl._viewPortAnchorDistance = "50px";
                BubbleControl._path = "Controls/Bubbles/bubble.config.json";
                BubbleControl._bubbleElementSelector = ".bubble";
                BubbleControl._bubbleContainerSelector = ".bubble-container";
                BubbleControl._bubbleTextElementSelector = ".bubble-text-container";
                BubbleControl._rotateContainer = ".arrow-rotate-container";
                BubbleControl._templateName = "bubble-template";
                BubbleControl._searchByAttributeSelector = "[data-ax-bubble='{0}']";
                BubbleControl._rotateFormatter = "rotate({0}deg)";
                BubbleControl._centerFormatting = "calc(50% - {0}px)";
                return BubbleControl;
            }());
            HelpBubbles.BubbleControl = BubbleControl;
        })(HelpBubbles = UI.HelpBubbles || (UI.HelpBubbles = {}));
    })(UI = Commerce.UI || (Commerce.UI = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Extensibility;
    (function (Extensibility) {
        var CustomControlBindingHandler = (function () {
            function CustomControlBindingHandler() {
            }
            CustomControlBindingHandler.prototype.init = function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                var customControl = valueAccessor();
                customControl.onReady(element);
                return { controlsDescendantBindings: true };
            };
            return CustomControlBindingHandler;
        }());
        ko.bindingHandlers.customControl = new CustomControlBindingHandler();
    })(Extensibility = Commerce.Extensibility || (Commerce.Extensibility = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var DataList;
        (function (DataList) {
            "use strict";
            var DataListViewModel = (function () {
                function DataListViewModel(dataListElement, listViewControl, dataListOptions) {
                    var _this = this;
                    this.$dataListElement = $(dataListElement);
                    this.dataListId = dataListElement.id;
                    this.listViewControl = listViewControl;
                    this.dataListOptions = dataListOptions;
                    this.removedColumns = [];
                    this.previousWindowWidth = this.$dataListElement.width();
                    this.currentListType = this.dataListOptions.defaultListType;
                    this.currentTemplate = null;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this.dataListOptions.itemTemplates) && Commerce.ArrayExtensions.hasElements(this.dataListOptions.itemTemplates)) {
                        if (Commerce.ArrayExtensions.hasElements(this.dataListOptions.columns)) {
                            var listTemplate = {
                                name: "string_900",
                                deviceType: DataList.DeviceType.All,
                                cardType: DataList.CardType.Stretchable,
                                templateId: this.dataListId + "ListTemplate"
                            };
                            this.dataListOptions.itemTemplates.push(listTemplate);
                        }
                        if (this.currentListType === DataList.ListType.List) {
                            this.currentTemplate = this.dataListOptions.itemTemplates[this.dataListOptions.itemTemplates.length - 1];
                        }
                        else {
                            this.currentTemplate = this.dataListOptions.itemTemplates[0];
                        }
                    }
                    this.activeColumns = Commerce.ObjectExtensions.clone(dataListOptions.columns);
                    this.activeColumns = this.activeColumns.sort(function (firstCol, secondCol) {
                        return secondCol.collapseOrder - firstCol.collapseOrder;
                    });
                    this.activeColumns.forEach(function (column) {
                        column.originalRatio = column.ratio;
                        var classId = Commerce.StringExtensions.format(DataListViewModel.columnClassIdStringTemplate, _this.dataListId, column.collapseOrder);
                        var classContent = Commerce.StringExtensions.format(DataListViewModel.columnClassContentStringTemplate, _this.dataListId, column.collapseOrder, column.ratio);
                        Commerce.CSSHelpers.injectCss(classId, classContent);
                        classId = Commerce.StringExtensions.format(DataListViewModel.rowClassIdStringTemplate, _this.dataListId, column.collapseOrder);
                        classContent = Commerce.StringExtensions.format(DataListViewModel.rowHiddenClassContentStringTemplate, _this.dataListId, column.collapseOrder);
                        Commerce.CSSHelpers.injectCss(classId, classContent);
                    });
                    var secondaryClassId = Commerce.StringExtensions.format(DataListViewModel.secondaryLineClassIdStringTemplate, this.dataListId);
                    var secondaryClassContent = Commerce.StringExtensions.format(DataListViewModel.secondaryLineHiddenClassContentStringTemplate, this.dataListId);
                    Commerce.CSSHelpers.injectCss(secondaryClassId, secondaryClassContent);
                    var dataListWidth = this.$dataListElement.width();
                    if (this.isWindowPhoneSize) {
                        this.currentDeviceType = DataList.DeviceType.Phone;
                    }
                    else {
                        this.currentDeviceType = DataList.DeviceType.Tablet;
                    }
                    this.resizeHandler(dataListWidth, true);
                    if (dataListWidth <= DataListViewModel.checkboxSectionWidth) {
                        var resizeTryCounter_1 = 0;
                        var resizeMaxTries_1 = 5;
                        var resizeRetryInterval_1 = window.setInterval((function () {
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.$dataListElement) && resizeMaxTries_1 > resizeTryCounter_1) {
                                _this.resizeHandler(_this.$dataListElement.width(), true);
                                if (_this.$dataListElement.width() > DataListViewModel.checkboxSectionWidth) {
                                    window.clearInterval(resizeRetryInterval_1);
                                }
                                resizeTryCounter_1++;
                            }
                            else {
                                window.clearInterval(resizeRetryInterval_1);
                            }
                        }).bind(this), 200);
                    }
                    Commerce.EventProxy.Instance.addWindowResizeHandler(dataListElement, function (eventArg) {
                        _this.resizeHandler(_this.$dataListElement.width());
                    });
                }
                DataListViewModel.prototype.toggleSelectionMode = function () {
                    this.listViewControl.selection.clear();
                    if (this.listViewControl.selectionMode === WinJS.UI.SelectionMode.none) {
                        switch (this.dataListOptions.selectionModes) {
                            case DataList.SelectionMode.NoneOrSingle:
                            case DataList.SelectionMode.InvokeOrSingle:
                                this.listViewControl.selectionMode = WinJS.UI.SelectionMode.single;
                                this.listViewControl.tapBehavior = WinJS.UI.TapBehavior.toggleSelect;
                                this.$dataListElement.find(".win-surface").addClass("win-selectionmode");
                                this.$dataListElement.removeClass("no-select");
                                this.$dataListElement.find(".headerCheckbox").show();
                                break;
                            case DataList.SelectionMode.NoneOrMulti:
                            case DataList.SelectionMode.InvokeOrMulti:
                                this.listViewControl.selectionMode = WinJS.UI.SelectionMode.multi;
                                this.listViewControl.tapBehavior = WinJS.UI.TapBehavior.toggleSelect;
                                this.$dataListElement.removeClass("no-select");
                                this.$dataListElement.find(".headerCheckbox").show();
                                break;
                        }
                    }
                    else {
                        switch (this.dataListOptions.selectionModes) {
                            case DataList.SelectionMode.NoneOrSingle:
                                this.listViewControl.selectionMode = WinJS.UI.SelectionMode.none;
                                this.listViewControl.tapBehavior = WinJS.UI.TapBehavior.none;
                                this.$dataListElement.addClass("no-select");
                                this.$dataListElement.find(".headerCheckbox").hide();
                                break;
                            case DataList.SelectionMode.NoneOrMulti:
                            case DataList.SelectionMode.InvokeOrSingle:
                            case DataList.SelectionMode.InvokeOrMulti:
                                this.listViewControl.selectionMode = WinJS.UI.SelectionMode.none;
                                this.listViewControl.tapBehavior = WinJS.UI.TapBehavior.invokeOnly;
                                this.$dataListElement.addClass("no-select");
                                this.$dataListElement.find(".headerCheckbox").hide();
                                break;
                        }
                    }
                    this.resizeHandler(this.$dataListElement.width());
                };
                DataListViewModel.prototype.selectAll = function () {
                    this.listViewControl.selection.selectAll();
                };
                DataListViewModel.prototype.clearAll = function () {
                    this.listViewControl.selection.clear();
                };
                DataListViewModel.prototype.selectIndex = function (index) {
                    if (this.listViewControl.selectionMode === WinJS.UI.SelectionMode.none) {
                        return;
                    }
                    this.listViewControl.selection.set(index);
                    this.listViewControl.ensureVisible(index);
                };
                DataListViewModel.prototype.selectIndexes = function (indexes) {
                    var _this = this;
                    if (this.listViewControl.selectionMode !== WinJS.UI.SelectionMode.multi) {
                        return;
                    }
                    this.listViewControl.selection.set(indexes).done(function () {
                        if (Commerce.ArrayExtensions.hasElements(indexes)) {
                            _this.listViewControl.ensureVisible(indexes[0]);
                        }
                    });
                };
                DataListViewModel.prototype.selectItems = function (items, equalityComparer) {
                    var _this = this;
                    if (this.listViewControl.selectionMode === WinJS.UI.SelectionMode.none) {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                    return this._getItemIndexes(items, equalityComparer).map(function (indexes) {
                        if (_this.listViewControl.selectionMode === WinJS.UI.SelectionMode.multi) {
                            _this.selectIndexes(indexes);
                        }
                        else if (_this.listViewControl.selectionMode === WinJS.UI.SelectionMode.single && Commerce.ArrayExtensions.hasElements(indexes)) {
                            _this.selectIndex(indexes[0]);
                        }
                    });
                };
                DataListViewModel.prototype.getItemCountAsync = function () {
                    var asyncResult = new Commerce.AsyncResult();
                    this.listViewControl.itemDataSource.getCount().then(function (count) {
                        asyncResult.resolve(count);
                    });
                    return asyncResult;
                };
                DataListViewModel.prototype.refreshList = function () {
                    this.listViewControl.recalculateItemPosition();
                };
                DataListViewModel.prototype.getTemplates = function (deviceType) {
                    if (deviceType === void 0) { deviceType = DataList.DeviceType.All; }
                    if (deviceType === DataList.DeviceType.All) {
                        return this.dataListOptions.itemTemplates;
                    }
                    var templates = this.dataListOptions.itemTemplates.filter(function (item) {
                        return item.deviceType === deviceType || item.deviceType === DataList.DeviceType.All;
                    });
                    return templates;
                };
                DataListViewModel.prototype.getCurrentDeviceType = function () {
                    return this.currentDeviceType;
                };
                DataListViewModel.prototype.getCurrentTemplate = function () {
                    return this.currentTemplate;
                };
                DataListViewModel.prototype.getCurrentListType = function () {
                    return this.currentListType;
                };
                DataListViewModel.prototype.switchTemplate = function (template) {
                    if (template === this.getCurrentTemplate()) {
                        return;
                    }
                    if (template.templateId === (this.dataListId + "ListTemplate")) {
                        this.currentListType = DataList.ListType.List;
                        this.listViewControl.itemTemplate = DataListBindingHandler.renderItemTemplate(this.$dataListElement, DataListViewModel.linesTemplateName, this.dataListOptions, this.currentListType);
                    }
                    else {
                        this.currentListType = DataList.ListType.Card;
                        this.listViewControl.itemTemplate = DataListBindingHandler.renderItemTemplate(this.$dataListElement, template.templateId, this.dataListOptions, this.currentListType);
                    }
                    this.listViewControl.layout = DataListBindingHandler.getListLayout(this.currentListType, template.cardType);
                    DataListBindingHandler.setListClasses(this.$dataListElement, this.currentListType);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this.listViewControl.setTemplate)) {
                        this.listViewControl.setTemplate(null);
                    }
                    this.currentTemplate = template;
                };
                DataListViewModel.prototype.dispose = function () {
                    Commerce.ObjectExtensions.disposeAllProperties(this);
                };
                DataListViewModel.prototype.resizeHandler = function (elementWidth, isInitializing) {
                    if (isInitializing === void 0) { isInitializing = false; }
                    if (this.currentListType === DataList.ListType.Card) {
                        if ((isInitializing || this.currentDeviceType !== DataList.DeviceType.Phone)
                            && this.isWindowPhoneSize) {
                            var phoneTemplates = this.getTemplates(DataList.DeviceType.Phone);
                            if (Commerce.ArrayExtensions.hasElements(phoneTemplates)) {
                                this.switchTemplate(phoneTemplates[0]);
                                this.currentDeviceType = DataList.DeviceType.Phone;
                            }
                        }
                        else if ((isInitializing || this.currentDeviceType !== DataList.DeviceType.Tablet)
                            && !this.isWindowPhoneSize) {
                            var tabletTemplates = this.getTemplates(DataList.DeviceType.Tablet);
                            if (Commerce.ArrayExtensions.hasElements(tabletTemplates)) {
                                this.switchTemplate(tabletTemplates[0]);
                                this.currentDeviceType = DataList.DeviceType.Tablet;
                            }
                        }
                    }
                    else {
                        if (this.listViewControl.selectionMode !== WinJS.UI.SelectionMode.none) {
                            elementWidth -= DataListViewModel.checkboxSectionWidth;
                        }
                        if (this.currentDeviceType !== DataList.DeviceType.Phone && this.isWindowPhoneSize) {
                            this.currentDeviceType = DataList.DeviceType.Phone;
                        }
                        else if (this.currentDeviceType !== DataList.DeviceType.Tablet && !this.isWindowPhoneSize) {
                            this.currentDeviceType = DataList.DeviceType.Tablet;
                        }
                        if (isInitializing || (elementWidth < this.previousWindowWidth)) {
                            this.collapseColumns(elementWidth);
                        }
                        else if (elementWidth > this.previousWindowWidth) {
                            this.uncollapseColumns(elementWidth);
                        }
                        this.listViewControl.recalculateItemPosition();
                    }
                    this.previousWindowWidth = elementWidth;
                };
                DataListViewModel.prototype.collapseColumns = function (elementWidth) {
                    var _this = this;
                    var isProcessing = elementWidth > DataListViewModel.checkboxSectionWidth;
                    while (isProcessing && this.activeColumns.length > 1) {
                        var _loop_2 = function (i) {
                            if (this_1.activeColumns[i].minWidth > (elementWidth * (this_1.activeColumns[i].ratio / 100))) {
                                var removedColumn_1 = this_1.activeColumns.pop();
                                this_1.removedColumns.push(removedColumn_1);
                                var classId_1 = Commerce.StringExtensions.format(DataListViewModel.columnClassIdStringTemplate, this_1.dataListId, removedColumn_1.collapseOrder);
                                var classContent_1 = Commerce.StringExtensions.format(DataListViewModel.columnHiddenClassContentStringTemplate, this_1.dataListId, removedColumn_1.collapseOrder);
                                Commerce.CSSHelpers.injectCss(classId_1, classContent_1);
                                classId_1 = Commerce.StringExtensions.format(DataListViewModel.rowClassIdStringTemplate, this_1.dataListId, removedColumn_1.collapseOrder);
                                classContent_1 = Commerce.StringExtensions.format(DataListViewModel.rowClassContentStringTemplate, this_1.dataListId, removedColumn_1.collapseOrder);
                                Commerce.CSSHelpers.injectCss(classId_1, classContent_1);
                                this_1.activeColumns.forEach(function (column) {
                                    column.ratio = (column.ratio / (100 - removedColumn_1.ratio)) * 100;
                                    classId_1 = Commerce.StringExtensions.format(DataListViewModel.columnClassIdStringTemplate, _this.dataListId, column.collapseOrder);
                                    classContent_1 = Commerce.StringExtensions.format(DataListViewModel.columnClassContentStringTemplate, _this.dataListId, column.collapseOrder, column.ratio);
                                    Commerce.CSSHelpers.injectCss(classId_1, classContent_1);
                                });
                                if (this_1.removedColumns.length === 1) {
                                    var secondaryClassId = Commerce.StringExtensions.format(DataListViewModel.secondaryLineClassIdStringTemplate, this_1.dataListId);
                                    var secondaryClassContent = Commerce.StringExtensions.format(DataListViewModel.secondaryLineClassContentStringTemplate, this_1.dataListId);
                                    Commerce.CSSHelpers.injectCss(secondaryClassId, secondaryClassContent);
                                }
                                return "break";
                            }
                            if (i >= (this_1.activeColumns.length - 1)) {
                                isProcessing = false;
                            }
                        };
                        var this_1 = this;
                        for (var i = 0; i < this.activeColumns.length; i++) {
                            var state_1 = _loop_2(i);
                            if (state_1 === "break")
                                break;
                        }
                    }
                };
                DataListViewModel.prototype.uncollapseColumns = function (elementWidth) {
                    var _this = this;
                    var isProcessing = true;
                    var _loop_3 = function () {
                        var addedColumn = this_2.removedColumns[this_2.removedColumns.length - 1];
                        var ratioSum = addedColumn.originalRatio;
                        if (this_2.removedColumns.length === 1) {
                            ratioSum = 100;
                        }
                        else {
                            this_2.activeColumns.forEach(function (column) {
                                ratioSum += column.originalRatio;
                            });
                        }
                        var tempColumns = Commerce.ObjectExtensions.clone(this_2.activeColumns);
                        tempColumns.push(addedColumn);
                        for (var i = 0; i < tempColumns.length; i++) {
                            tempColumns[i].ratio = (tempColumns[i].originalRatio / ratioSum) * 100;
                            if (tempColumns[i].minWidth > (elementWidth * (tempColumns[i].ratio / 100))) {
                                isProcessing = false;
                                break;
                            }
                        }
                        if (isProcessing) {
                            this_2.activeColumns = tempColumns;
                            this_2.removedColumns.pop();
                            var classId_2 = Commerce.StringExtensions.format(DataListViewModel.rowClassIdStringTemplate, this_2.dataListId, addedColumn.collapseOrder);
                            var classContent_2 = Commerce.StringExtensions.format(DataListViewModel.rowHiddenClassContentStringTemplate, this_2.dataListId, addedColumn.collapseOrder);
                            Commerce.CSSHelpers.injectCss(classId_2, classContent_2);
                            this_2.activeColumns.forEach(function (column) {
                                classId_2 = Commerce.StringExtensions.format(DataListViewModel.columnClassIdStringTemplate, _this.dataListId, column.collapseOrder);
                                classContent_2 = Commerce.StringExtensions.format(DataListViewModel.columnClassContentStringTemplate, _this.dataListId, column.collapseOrder, column.ratio);
                                Commerce.CSSHelpers.injectCss(classId_2, classContent_2);
                            });
                            if (!Commerce.ArrayExtensions.hasElements(this_2.removedColumns)) {
                                var secondaryClassId = Commerce.StringExtensions.format(DataListViewModel.secondaryLineClassIdStringTemplate, this_2.dataListId);
                                var secondaryClassContent = Commerce.StringExtensions.format(DataListViewModel.secondaryLineHiddenClassContentStringTemplate, this_2.dataListId);
                                Commerce.CSSHelpers.injectCss(secondaryClassId, secondaryClassContent);
                            }
                        }
                    };
                    var this_2 = this;
                    while ((this.removedColumns.length > 0) && isProcessing) {
                        _loop_3();
                    }
                };
                DataListViewModel.prototype._getItemIndexes = function (items, equalityComparer) {
                    var _this = this;
                    var winJSPromises = [];
                    var asyncResult = new Commerce.AsyncResult();
                    var indexes = [];
                    this.listViewControl.itemDataSource.getCount()
                        .done(function (count) {
                        var _loop_4 = function (index) {
                            var itemFromIndexPromise = _this.listViewControl.itemDataSource.itemFromIndex(index);
                            itemFromIndexPromise.done(function (item) {
                                if (Commerce.ArrayExtensions.hasElement(items, item.data, equalityComparer)) {
                                    indexes.push(index);
                                }
                            });
                            winJSPromises.push(itemFromIndexPromise);
                            WinJS.Promise.join(winJSPromises).done(function () { asyncResult.resolve(indexes); }, function (error) { asyncResult.reject([new Commerce.Proxy.Entities.Error(error)]); });
                        };
                        for (var index = 0; index < count; index++) {
                            _loop_4(index);
                        }
                    }, function (error) { asyncResult.reject([new Commerce.Proxy.Entities.Error(error)]); });
                    return asyncResult;
                };
                Object.defineProperty(DataListViewModel.prototype, "isWindowPhoneSize", {
                    get: function () {
                        return $(window).width() < DataListViewModel.minimumTabletWidth;
                    },
                    enumerable: true,
                    configurable: true
                });
                DataListViewModel.columnClassIdStringTemplate = "dataList{0}Col{1}";
                DataListViewModel.columnClassContentStringTemplate = "#{0}.dataList .column{1} { max-width: {2}%; min-width: {2}%; }";
                DataListViewModel.columnHiddenClassContentStringTemplate = "#{0}.dataList .column{1} { display: none }";
                DataListViewModel.rowClassIdStringTemplate = "dataList{0}Row{1}";
                DataListViewModel.rowClassContentStringTemplate = "#{0}.dataList .row{1} { }";
                DataListViewModel.rowHiddenClassContentStringTemplate = "#{0}.dataList .row{1} { display: none; }";
                DataListViewModel.secondaryLineClassIdStringTemplate = "dataList{0}SecondaryLineBottomPadding";
                DataListViewModel.secondaryLineClassContentStringTemplate = "#{0}.dataList .dataListSecondaryLineBottomPadding { padding-bottom: 8px; }";
                DataListViewModel.secondaryLineHiddenClassContentStringTemplate = "#{0}.dataList .dataListSecondaryLineBottomPadding { padding-bottom: 0px; }";
                DataListViewModel.checkboxSectionWidth = 40;
                DataListViewModel.minimumTabletWidth = 480;
                DataListViewModel.linesTemplateName = "dataListLinesTemplate";
                return DataListViewModel;
            }());
            DataList.DataListViewModel = DataListViewModel;
            var ExtensibleDataListOptions = (function () {
                function ExtensibleDataListOptions(dataListOptions) {
                    this.itemDataSource = dataListOptions.itemDataSource;
                    this.onItemDataSourceUpdated = dataListOptions.onItemDataSourceUpdated;
                    this.incrementalDataSource = dataListOptions.incrementalDataSource;
                    this.selectionModes = dataListOptions.selectionModes;
                    this.itemInvoked = dataListOptions.itemInvoked;
                    this.selectionChanged = dataListOptions.selectionChanged;
                    this.onLoadingComplete = dataListOptions.onLoadingComplete;
                    this.ariaLabelResx = dataListOptions.ariaLabelResx;
                    this.emptyDataListTemplate = dataListOptions.emptyDataListTemplate;
                    this.emptyDataListMessageResx = dataListOptions.emptyDataListMessageResx;
                    this.autoSelectFirstItem = dataListOptions.autoSelectFirstItem;
                    this.autoFocusFirstItem = dataListOptions.autoFocusFirstItem;
                    this.selectInvokedItem = dataListOptions.selectInvokedItem;
                    this.itemTemplates = dataListOptions.itemTemplates;
                    this.defaultListType = dataListOptions.defaultListType;
                    this.groupedDataListInformation = dataListOptions.groupedDataListInformation;
                    this.autoFocusDelayInMilliseconds = dataListOptions.autoFocusDelayInMilliseconds;
                    var configuredColumns = dataListOptions.columns || [];
                    this.columns = configuredColumns.map(function (columnConfig) {
                        return new ExtensibleDataListColumn(columnConfig);
                    });
                }
                return ExtensibleDataListOptions;
            }());
            DataList.ExtensibleDataListOptions = ExtensibleDataListOptions;
            var ExtensibleDataListColumn = (function () {
                function ExtensibleDataListColumn(columnConfig) {
                    this.title = columnConfig.title;
                    this.titleResx = columnConfig.titleResx;
                    this.converter = columnConfig.converter;
                    this.ratio = columnConfig.ratio;
                    this.originalRatio = columnConfig.originalRatio;
                    this.collapseOrder = columnConfig.collapseOrder;
                    this.minWidth = columnConfig.minWidth;
                    this.isSecondaryTitleHidden = columnConfig.isSecondaryTitleHidden;
                    this.isRightAligned = columnConfig.isRightAligned;
                    this.type = columnConfig.type;
                    if (Commerce.StringExtensions.isNullOrWhitespace(columnConfig.field) &&
                        !Commerce.ObjectExtensions.isFunction(columnConfig.computeValue)) {
                        throw "Either field or computeValue must be provided for DataList columns." +
                            "Please ensure one of the two is provided for the column: " + this.title;
                    }
                    this._fieldPath = Commerce.StringExtensions.isNullOrWhitespace(columnConfig.field) ? [] : columnConfig.field.split(".");
                    this._computeValue = columnConfig.computeValue;
                }
                ExtensibleDataListColumn.prototype.getValue = function (row) {
                    if (Commerce.ArrayExtensions.hasElements(this._fieldPath)) {
                        if (this._fieldPath.length === 1 && this._fieldPath[0] === "$data") {
                            return row;
                        }
                        return this._fieldPath.reduce(function (curValue, field) {
                            return !Commerce.ObjectExtensions.isNullOrUndefined(curValue) ? curValue[field] : null;
                        }, row);
                    }
                    else if (Commerce.ObjectExtensions.isFunction(this._computeValue)) {
                        return this._computeValue(row);
                    }
                    else {
                        throw "Neither field nor computeValue was properly configured for the column " + this.title;
                    }
                };
                return ExtensibleDataListColumn;
            }());
            DataList.ExtensibleDataListColumn = ExtensibleDataListColumn;
            var DataListBindingHandler = (function () {
                function DataListBindingHandler() {
                }
                DataListBindingHandler.setTriggerEventMethod = function (triggerEventMethod) {
                    DataListBindingHandler._triggerEvent = triggerEventMethod;
                };
                DataListBindingHandler.renderItemTemplate = function ($dataListElement, templateName, viewModel, listType) {
                    if (listType === DataList.ListType.List) {
                        var templateElement_1 = document.createElement("div");
                        var $templateElement_1 = $(templateElement_1);
                        ko.renderTemplate(templateName, viewModel, {
                            afterRender: function () {
                                $templateElement_1.find("[data-bind]").each(function (index, currentElement) {
                                    var $currentElement = $(currentElement);
                                    var attrValue = $currentElement.attr("data-bind");
                                    if (((attrValue.search("text:") < 0) && (attrValue.search("textConverter:") < 0)) || (currentElement.innerText !== "")) {
                                        $currentElement.removeAttr("data-bind");
                                    }
                                });
                            }
                        }, templateElement_1);
                        viewModel.columns.forEach(function (column) {
                            if (column.isRightAligned) {
                                $dataListElement.find(".column" + column.collapseOrder).addClass("textRight");
                                $templateElement_1.find(".column" + column.collapseOrder).addClass("textRight");
                            }
                        });
                        return WinJS.UI.simpleItemRenderer(function (item, boundDataDictionary) {
                            var lineTemplate = templateElement_1.cloneNode(true);
                            var rowConfigConstructor = function (data) {
                                return {
                                    columnConfigs: viewModel.columns.map(function (col) {
                                        return {
                                            data: col.getValue(data),
                                            field: "$data",
                                            converter: col.converter,
                                            type: col.type,
                                            ariaLabel: "true",
                                            columnToBind: col.title
                                        };
                                    })
                                };
                            };
                            ko.applyBindings(rowConfigConstructor(item.data), lineTemplate);
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(boundDataDictionary)) {
                                boundDataDictionary.setItem(item.index, rowConfigConstructor);
                            }
                            return lineTemplate;
                        });
                    }
                    else {
                        return WinJS.UI.simpleItemRenderer(function (item, boundDataDictionary) {
                            var templateElement = document.createElement("div");
                            var boundDataConstructor = function (data) {
                                return data;
                            };
                            ko.renderTemplate(templateName, boundDataConstructor(item.data), {}, templateElement);
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(boundDataDictionary)) {
                                boundDataDictionary.setItem(item.index, boundDataConstructor);
                            }
                            return templateElement;
                        });
                    }
                };
                DataListBindingHandler.getListLayout = function (listType, cardType) {
                    if (listType === DataList.ListType.Card) {
                        cardType = cardType || DataList.CardType.Static;
                        if (cardType === DataList.CardType.Stretchable) {
                            return new WinJS.UI.ListLayout();
                        }
                        else {
                            return new WinJS.UI.GridLayout({ orientation: WinJS.UI.Orientation.vertical });
                        }
                    }
                    else {
                        return new WinJS.UI.ListLayout();
                    }
                };
                DataListBindingHandler.setListClasses = function ($dataListElement, listType) {
                    if (listType === DataList.ListType.Card) {
                        $dataListElement.removeClass("dataList");
                        $dataListElement.addClass("dataCardList");
                        var $dataListHeaderElement = $dataListElement.find(DataListBindingHandler._dataListHeaderClassName);
                        $dataListHeaderElement.hide();
                    }
                    else {
                        $dataListElement.removeClass("dataCardList");
                        $dataListElement.addClass("dataList");
                        var $dataListHeaderElement = $dataListElement.find(DataListBindingHandler._dataListHeaderClassName);
                        $dataListHeaderElement.css("display", "flex");
                    }
                };
                DataListBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var listViewControl;
                    var options = new ExtensibleDataListOptions(ko.utils.unwrapObservable(valueAccessor()) || {});
                    var isItemsListEmpty = true;
                    var $element = $(element);
                    if (Commerce.StringExtensions.isNullOrWhitespace(element.id)) {
                        throw "Element ID is required for a Data List.";
                    }
                    if (Commerce.ObjectExtensions.isNullOrUndefined(options.itemDataSource) && Commerce.ObjectExtensions.isNullOrUndefined(options.incrementalDataSource)) {
                        throw "Data source is required for a Data List.";
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(options.incrementalDataSource)) {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(options.incrementalDataSource.callerMethod)) {
                            throw "callerMethod must be specified for a DataList incremental data source.";
                        }
                        options.incrementalDataSource.pageSize = options.incrementalDataSource.pageSize || Commerce.Config.defaultPageSize;
                        options.incrementalDataSource.pageLoadCallBack = options.incrementalDataSource.pageLoadCallBack || null;
                        options.incrementalDataSource.reloadCallBack = options.incrementalDataSource.reloadCallBack || null;
                        options.incrementalDataSource.updateItemCallBack = options.incrementalDataSource.updateItemCallBack || null;
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(options.groupedDataListInformation)) {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(options.groupedDataListInformation.groupDataSelector)) {
                            throw "groupedDataSelector must be specified for a DataList grouped data source.";
                        }
                        if (Commerce.ObjectExtensions.isNullOrUndefined(options.groupedDataListInformation.groupKeySelector)) {
                            throw "groupedKeySelector must be specified for a DataList grouped data source.";
                        }
                        if (Commerce.ObjectExtensions.isNullOrUndefined(options.groupedDataListInformation.headerInvoked)) {
                            throw "headerInvoked must be specified for a DataList grouped data source.";
                        }
                        if (Commerce.ObjectExtensions.isNullOrUndefined(options.groupedDataListInformation.headerTemplate)) {
                            throw "headerTemplate must be specified for a DataList grouped data source.";
                        }
                        if (Commerce.ObjectExtensions.isNullOrUndefined(options.groupedDataListInformation.keyName)) {
                            throw "keyName must be specified for a DataList grouped data source.";
                        }
                        if (Commerce.ObjectExtensions.isNullOrUndefined(options.groupedDataListInformation.parentId)) {
                            throw "parentId must be specified for a DataList grouped data source.";
                        }
                    }
                    options.emptyDataListTemplate = options.emptyDataListTemplate || DataListBindingHandler._emptyDataListTemplate;
                    options.emptyDataListMessageResx = options.emptyDataListMessageResx || "string_1032";
                    options.selectionModes = options.selectionModes || DataList.SelectionMode.None;
                    options.itemDataSource = options.itemDataSource || ko.observableArray([]);
                    options.onItemDataSourceUpdated = options.onItemDataSourceUpdated || (function () {
                        return;
                    });
                    options.autoSelectFirstItem = options.autoSelectFirstItem || false;
                    options.autoFocusFirstItem = options.autoFocusFirstItem || false;
                    options.selectInvokedItem = options.selectInvokedItem || false;
                    options.autoFocusDelayInMilliseconds = options.autoFocusDelayInMilliseconds || 0;
                    if (Commerce.ObjectExtensions.isNullOrUndefined(options.defaultListType)) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(options.columns)) {
                            options.defaultListType = DataList.ListType.List;
                        }
                        else if (!Commerce.ObjectExtensions.isNullOrUndefined(options.itemTemplates)
                            || Commerce.ArrayExtensions.hasElements(options.itemTemplates)) {
                            options.defaultListType = DataList.ListType.Card;
                        }
                        else {
                            throw "Columns are a required parameter for a DataList of List type, and itemTemplates are a required parameter for DataList of Card type.";
                        }
                    }
                    else if (options.defaultListType === DataList.ListType.List
                        && (Commerce.ObjectExtensions.isNullOrUndefined(options.columns)
                            || !Commerce.ArrayExtensions.hasElements(options.columns))) {
                        throw "Columns are a required parameter for a DataList of List type.";
                    }
                    else if (options.defaultListType === DataList.ListType.Card
                        && (Commerce.ObjectExtensions.isNullOrUndefined(options.itemTemplates)
                            || !Commerce.ArrayExtensions.hasElements(options.itemTemplates))) {
                        throw "itemTemplates is a required parameter for a DataList of Card type.";
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(options.itemTemplates)) {
                        options.itemTemplates.forEach(function (item) {
                            if (Commerce.StringExtensions.isNullOrWhitespace(item.templateId)) {
                                throw "templateId must be specified for a DataList item template.";
                            }
                            item.cardType = item.cardType || DataList.CardType.Static;
                            item.name = item.name || Commerce.StringExtensions.EMPTY;
                            item.deviceType = item.deviceType || DataList.DeviceType.All;
                        });
                    }
                    options.columns = options.columns || [];
                    var ratioSum = 0;
                    var collapseOrderSum = 0;
                    var indexSum = 0;
                    options.columns.forEach(function (column, index) {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(column.collapseOrder)) {
                            throw new Error("Collapse order is a required parameter for DataList columns.");
                        }
                        if (!options.columns.every(function (compareColumn, compareIndex) {
                            if (index !== compareIndex) {
                                return column.collapseOrder !== compareColumn.collapseOrder;
                            }
                            return true;
                        })) {
                            throw new Error("Collapse order must be unique for each column in a DataList.");
                        }
                        if (Commerce.ObjectExtensions.isNullOrUndefined(column.ratio)) {
                            throw new Error("Ratio is a required parameter for DataList columns.");
                        }
                        if (Commerce.ObjectExtensions.isNullOrUndefined(column.minWidth)) {
                            throw new Error("minWidth is a required parameter for DataList columns.");
                        }
                        if (Commerce.StringExtensions.isNullOrWhitespace(column.title)
                            && (Commerce.ObjectExtensions.isNullOrUndefined(Commerce.ViewModelAdapter.getResourceString(column.titleResx))
                                || Commerce.StringExtensions.isEmpty(Commerce.ViewModelAdapter.getResourceString(column.titleResx)))) {
                            throw new Error("Either column title or titleResx must be provided and non-empty for DataList columns.");
                        }
                        ratioSum += column.ratio;
                        collapseOrderSum += column.collapseOrder;
                        indexSum += index + 1;
                        column.title = column.title || Commerce.ViewModelAdapter.getResourceString(column.titleResx);
                        column.converter = column.converter || "Commerce.Core.Converter.emptyFormatter";
                        column.type = column.type || "text";
                        column.isRightAligned = column.isRightAligned || false;
                        column.isSecondaryTitleHidden = column.isSecondaryTitleHidden || false;
                    });
                    if (ratioSum !== 100 && options.defaultListType === DataList.ListType.List) {
                        throw new Error("Ratios for all columns in a DataList must total to 100.");
                    }
                    if (collapseOrderSum !== indexSum) {
                        throw new Error("Collapse order for columns in a DataList must not skip numbers in the order sequence.");
                    }
                    ko.applyBindingsToNode(element, { template: { name: DataListBindingHandler._dataListTemplateName, data: options } });
                    var toggleEmptyGridTemplate = function (count) {
                        var $tableContent = $element.find(".tableContent");
                        var $dataListEmptyContentPlaceholder = $element.find(DataListBindingHandler._emptyDataListPlaceholderClassName);
                        if (count < 1) {
                            $tableContent.hide();
                            $tableContent.removeData("forceLayoutDone");
                            $dataListEmptyContentPlaceholder.css("display", "flex");
                            var bindingData = void 0;
                            if (options.emptyDataListTemplate === DataListBindingHandler._emptyDataListTemplate) {
                                bindingData = options;
                            }
                            else {
                                bindingData = viewModel;
                            }
                            ko.applyBindingsToNode($dataListEmptyContentPlaceholder[0], {
                                template: {
                                    name: options.emptyDataListTemplate,
                                    data: bindingData
                                }
                            });
                        }
                        else {
                            if ($tableContent.is(":hidden")) {
                                $dataListEmptyContentPlaceholder.hide();
                                $tableContent.show();
                                if ($tableContent.data("forceLayoutDone") !== true) {
                                    listViewControl.forceLayout();
                                    $tableContent.data("forceLayoutDone", true);
                                }
                            }
                        }
                    };
                    var winControlBindings = {};
                    var currentCardType = DataList.CardType.Static;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(options.itemTemplates)) {
                        currentCardType = options.itemTemplates[0].cardType;
                    }
                    winControlBindings.layout = DataListBindingHandler.getListLayout(options.defaultListType, currentCardType);
                    DataListBindingHandler.setListClasses($element, options.defaultListType);
                    var isItemDataSourceBound = Commerce.ObjectExtensions.isNullOrUndefined(options.groupedDataListInformation)
                        && Commerce.ObjectExtensions.isNullOrUndefined(options.incrementalDataSource)
                        && !Commerce.ObjectExtensions.isNullOrUndefined(options.itemDataSource);
                    if (isItemDataSourceBound) {
                        var memberValue = ko.utils.unwrapObservable(options.itemDataSource);
                        var listDataSource_1 = new WinJS.Binding.List(memberValue);
                        if (options.itemDataSource.subscribe) {
                            var itemDataSourceSubscription_1 = options.itemDataSource.subscribe(function (newValue) {
                                WinJS.Promise.timeout().then(function () {
                                    listDataSource_1.splice(0, listDataSource_1.length);
                                    for (var i = 0; i < newValue.length; i++) {
                                        listDataSource_1.push(newValue[i]);
                                    }
                                    options.onItemDataSourceUpdated.call(viewModel, element.dataListViewModel);
                                });
                            });
                            ko.utils.domNodeDisposal.addDisposeCallback(element, function (e) {
                                itemDataSourceSubscription_1.dispose();
                            });
                        }
                        winControlBindings.itemDataSource = listDataSource_1.dataSource;
                    }
                    switch (options.selectionModes) {
                        case null:
                        case DataList.SelectionMode.None:
                        case DataList.SelectionMode.NoneOrSingle:
                        case DataList.SelectionMode.NoneOrMulti:
                            winControlBindings.selectionMode = WinJS.UI.SelectionMode.none;
                            winControlBindings.tapBehavior = WinJS.UI.TapBehavior.none;
                            break;
                        case DataList.SelectionMode.InvokeOnly:
                        case DataList.SelectionMode.InvokeOrSingle:
                        case DataList.SelectionMode.InvokeOrMulti:
                            winControlBindings.selectionMode = WinJS.UI.SelectionMode.none;
                            winControlBindings.tapBehavior = WinJS.UI.TapBehavior.invokeOnly;
                            break;
                        case DataList.SelectionMode.SingleSelect:
                            winControlBindings.selectionMode = WinJS.UI.SelectionMode.single;
                            winControlBindings.tapBehavior = WinJS.UI.TapBehavior.toggleSelect;
                            break;
                        case DataList.SelectionMode.MultiSelect:
                            winControlBindings.selectionMode = WinJS.UI.SelectionMode.multi;
                            winControlBindings.tapBehavior = WinJS.UI.TapBehavior.toggleSelect;
                            break;
                        default:
                            throw "Invalid selection mode provided for DataList. Please use SelectionMode enum.";
                    }
                    var $dataListPlaceholder = $element.find(DataListBindingHandler._dataListPlaceholderClassName);
                    listViewControl = new WinJS.UI.ListView($dataListPlaceholder[0], winControlBindings);
                    if (options.defaultListType === DataList.ListType.List) {
                        listViewControl.itemTemplate = DataListBindingHandler.renderItemTemplate($element, DataListBindingHandler._linesTemplateName, options, options.defaultListType);
                    }
                    else {
                        listViewControl.itemTemplate = DataListBindingHandler.renderItemTemplate($element, options.itemTemplates[0].templateId, options, options.defaultListType);
                    }
                    var dataListViewModel = new DataListViewModel(element, listViewControl, options);
                    element.dataListViewModel = dataListViewModel;
                    if (isItemDataSourceBound) {
                        options.onItemDataSourceUpdated.call(viewModel, dataListViewModel);
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(options.itemInvoked) && Commerce.ObjectExtensions.isFunction(options.itemInvoked)) {
                        var itemInvokedCallback_1 = options.itemInvoked;
                        var itemInvoked = function (event) {
                            DataListBindingHandler._triggerEvent(element, DataList.InteractionEvents.RowClicked);
                            if (listViewControl.tapBehavior === WinJS.UI.TapBehavior.invokeOnly) {
                                Commerce.RetailLogger.librariesWinJsListViewItemClick(element.id);
                                event.detail.itemPromise.then(function (item) {
                                    if (options.selectInvokedItem) {
                                        listViewControl.selection.set(item);
                                    }
                                    itemInvokedCallback_1.call(viewModel, item.data);
                                });
                            }
                        };
                        listViewControl.addEventListener("iteminvoked", WinJS.Utilities.markSupportedForProcessing(itemInvoked));
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(options.selectionChanged) && Commerce.ObjectExtensions.isFunction(options.selectionChanged)) {
                        var selectionChangedCallBack_1 = { eventHandlerCallBack: options.selectionChanged };
                        var selectionChanged = function (event) {
                            if (listViewControl.selection.count() > 0) {
                                DataListBindingHandler._triggerEvent(element, DataList.InteractionEvents.RowSelected);
                            }
                            event.target.winControl.selection.getItems().then(function (item) {
                                Commerce.Host.instance.timers.setImmediate(function () {
                                    selectionChangedCallBack_1.eventHandlerCallBack.call(viewModel, item.map(function (item) { return item.data; }));
                                    $element.find(".win-container.win-selected .win-selectioncheckmark:not([role])").each(function (index, currentElement) {
                                        var $currentElement = $(currentElement);
                                        $currentElement.attr("role", "checkbox");
                                    });
                                });
                                event.preventDefault();
                                event.stopImmediatePropagation();
                            });
                        };
                        listViewControl.addEventListener("selectionchanged", WinJS.Utilities.markSupportedForProcessing(selectionChanged));
                    }
                    var keyboardNavigating = function (event) {
                        DataListBindingHandler._triggerEvent(element, DataList.InteractionEvents.RowSelected);
                        listViewControl.selection.set(event.detail.newFocus);
                        listViewControl.currentItem = { index: event.detail.newFocus, hasFocus: true, showFocus: true };
                    };
                    listViewControl.addEventListener("keyboardnavigating", WinJS.Utilities.markSupportedForProcessing(keyboardNavigating));
                    var loadingStateChanged = function (event) {
                        if (Commerce.ApplicationHelper.isWebApplicationType(Commerce.Host.instance.application.getApplicationType())
                            && Commerce.Host.instance.application.getBrowserType() === Commerce.Client.Entities.BrowserType.Chrome
                            && dataListViewModel.getCurrentListType() === DataList.ListType.Card
                            && listViewControl.loadingState === "itemsLoading") {
                            $element.removeData("recalculateDone");
                        }
                        if (listViewControl.loadingState === "complete") {
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(options.emptyDataListTemplate)) {
                                toggleEmptyGridTemplate(listViewControl.itemDataSource.list.length);
                            }
                            if (Commerce.ObjectExtensions.isNullOrUndefined(options.incrementalDataSource)
                                && options.autoSelectFirstItem === true
                                && listViewControl.selection.count() === 0) {
                                listViewControl.selection.set(0);
                            }
                            if (options.autoFocusFirstItem) {
                                var inFirstPage = true;
                                var itemDataSourceLength = listViewControl.itemDataSource.list.length;
                                if (!Commerce.ObjectExtensions.isNullOrUndefined(options.incrementalDataSource)) {
                                    inFirstPage = itemDataSourceLength <= options.incrementalDataSource.pageSize;
                                }
                                if ((itemDataSourceLength > 0) && inFirstPage && (!listViewControl.currentItem.hasFocus) && isItemsListEmpty) {
                                    listViewControl.currentItem = { index: 0, hasFocus: true, showFocus: true };
                                    isItemsListEmpty = false;
                                }
                                else if (itemDataSourceLength === 0) {
                                    isItemsListEmpty = true;
                                }
                            }
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(options.onLoadingComplete) && Commerce.ObjectExtensions.isFunction(options.onLoadingComplete)) {
                                options.onLoadingComplete.call(viewModel, dataListViewModel);
                            }
                            if (Commerce.ApplicationHelper.isWebApplicationType(Commerce.Host.instance.application.getApplicationType())
                                && Commerce.Host.instance.application.getBrowserType() === Commerce.Client.Entities.BrowserType.Chrome
                                && dataListViewModel.getCurrentListType() === DataList.ListType.Card
                                && $element.data("recalculateDone") !== true) {
                                listViewControl.recalculateItemPosition();
                                $element.data("recalculateDone", true);
                            }
                        }
                        if (listViewControl.selectionMode !== WinJS.UI.SelectionMode.none) {
                            $element.find(".win-surface").addClass("win-selectionmode");
                            $element.find(DataListBindingHandler._headerCheckboxClassName).show();
                        }
                    };
                    listViewControl.addEventListener("loadingstatechanged", WinJS.Utilities.markSupportedForProcessing(loadingStateChanged));
                    if (!Commerce.StringExtensions.isNullOrWhitespace(options.ariaLabelResx)) {
                        $dataListPlaceholder.attr("aria-label", Commerce.ViewModelAdapter.getResourceString(options.ariaLabelResx));
                    }
                    if (winControlBindings.selectionMode === WinJS.UI.SelectionMode.none) {
                        $element.addClass("no-select");
                        $dataListPlaceholder.removeAttr("aria-multiselectable");
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(options.incrementalDataSource)) {
                        Commerce.Controls.DataSourceAdapter.createIncrementalDataSourceAdapter(listViewControl, options.incrementalDataSource.dataManager, options.incrementalDataSource.callerMethod, options.incrementalDataSource.pageSize, "#" + element.id + " " + DataListBindingHandler._emptyDataListPlaceholderClassName, options.incrementalDataSource.onLoading, options.autoSelectFirstItem, options.autoFocusFirstItem, options.selectInvokedItem, options.incrementalDataSource.pageLoadCallBack, options.incrementalDataSource.reloadCallBack, options.incrementalDataSource.updateItemCallBack, options.incrementalDataSource.pageLoadCompleteCallBackFunction, options.autoFocusDelayInMilliseconds);
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(options.groupedDataListInformation)) {
                        Commerce.Controls.DataSourceAdapter.createGroupedDataSourceAdapter(listViewControl, options.itemDataSource, options.groupedDataListInformation.groupKeySelector, options.groupedDataListInformation.groupDataSelector, options.groupedDataListInformation.parentId, options.groupedDataListInformation.keyName);
                        listViewControl.groupHeaderTemplate = DataListBindingHandler.renderItemTemplate($element, options.groupedDataListInformation.headerTemplate, options, options.defaultListType);
                        listViewControl.addEventListener("groupheaderinvoked", function (eventInfo) {
                            eventInfo.detail.groupHeaderPromise.then(function (headerItem) {
                                options.groupedDataListInformation.headerInvoked.call(viewModel, headerItem.data);
                            });
                        });
                    }
                    ko.utils.domNodeDisposal.addDisposeCallback(element, function (e) {
                        options.onItemDataSourceUpdated = Function.prototype;
                        dataListViewModel.dispose();
                    });
                    DataListBindingHandler.configureResizeInstrumentObject($element);
                    return { controlsDescendantBindings: true };
                };
                DataListBindingHandler.configureResizeInstrumentObject = function ($element) {
                    $element.children().children(".tableContent").children("object.win-resizeinstrument").attr("tabindex", "-1");
                    $element.children().children(".tableContent").children("object.win-resizeinstrument").attr("role", "none");
                };
                DataListBindingHandler._dataListTemplateName = "dataListTemplate";
                DataListBindingHandler._linesTemplateName = "dataListLinesTemplate";
                DataListBindingHandler._emptyDataListTemplate = "emptyDataListTemplate";
                DataListBindingHandler._dataListPlaceholderClassName = ".dataListPlaceholder";
                DataListBindingHandler._headerCheckboxClassName = ".headerCheckbox";
                DataListBindingHandler._emptyDataListPlaceholderClassName = ".dataListEmptyContentPlaceholder";
                DataListBindingHandler._dataListHeaderClassName = ".dataListHeader";
                return DataListBindingHandler;
            }());
            DataList.DataListBindingHandler = DataListBindingHandler;
        })(DataList = Controls.DataList || (Controls.DataList = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var DataList;
        (function (DataList) {
            "use strict";
            var SelectionMode;
            (function (SelectionMode) {
                SelectionMode[SelectionMode["None"] = 0] = "None";
                SelectionMode[SelectionMode["NoneOrSingle"] = 1] = "NoneOrSingle";
                SelectionMode[SelectionMode["NoneOrMulti"] = 2] = "NoneOrMulti";
                SelectionMode[SelectionMode["InvokeOnly"] = 3] = "InvokeOnly";
                SelectionMode[SelectionMode["InvokeOrSingle"] = 4] = "InvokeOrSingle";
                SelectionMode[SelectionMode["InvokeOrMulti"] = 5] = "InvokeOrMulti";
                SelectionMode[SelectionMode["SingleSelect"] = 6] = "SingleSelect";
                SelectionMode[SelectionMode["MultiSelect"] = 7] = "MultiSelect";
            })(SelectionMode = DataList.SelectionMode || (DataList.SelectionMode = {}));
            var ListType;
            (function (ListType) {
                ListType[ListType["List"] = 0] = "List";
                ListType[ListType["Card"] = 1] = "Card";
            })(ListType = DataList.ListType || (DataList.ListType = {}));
            var CardType;
            (function (CardType) {
                CardType[CardType["Static"] = 0] = "Static";
                CardType[CardType["Stretchable"] = 1] = "Stretchable";
            })(CardType = DataList.CardType || (DataList.CardType = {}));
            var DeviceType;
            (function (DeviceType) {
                DeviceType[DeviceType["All"] = 0] = "All";
                DeviceType[DeviceType["Tablet"] = 1] = "Tablet";
                DeviceType[DeviceType["Phone"] = 2] = "Phone";
            })(DeviceType = DataList.DeviceType || (DataList.DeviceType = {}));
            var InteractionEvents;
            (function (InteractionEvents) {
                InteractionEvents[InteractionEvents["RowSelected"] = 0] = "RowSelected";
                InteractionEvents[InteractionEvents["RowClicked"] = 1] = "RowClicked";
            })(InteractionEvents = DataList.InteractionEvents || (DataList.InteractionEvents = {}));
        })(DataList = Controls.DataList || (Controls.DataList = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var DataList;
        (function (DataList) {
            "use strict";
            var PaginatedDataList = (function (_super) {
                __extends(PaginatedDataList, _super);
                function PaginatedDataList(options) {
                    var _this = _super.call(this, options) || this;
                    _this._data = options.data;
                    _this._resetDataSource = ko.observable(function () { return; });
                    return _this;
                }
                PaginatedDataList.prototype.reloadData = function () {
                    if (Commerce.ObjectExtensions.isFunction(this._resetDataSource) && Commerce.ObjectExtensions.isFunction(this._resetDataSource())) {
                        this._resetDataSource()();
                    }
                };
                PaginatedDataList.prototype.render = function (rootElement) {
                    $(rootElement).addClass("height100Percent");
                    this._renderBinding("dataList", {
                        columns: this._columns,
                        incrementalDataSource: this._internalIncrementalDataSource,
                        itemInvoked: this._itemInvoked,
                        selectionChanged: this._selectionChanged,
                        selectionModes: this._selectionMode
                    }, rootElement);
                };
                Object.defineProperty(PaginatedDataList.prototype, "_internalIncrementalDataSource", {
                    get: function () {
                        var _this = this;
                        var internalIncrementalDataSource = {
                            callerMethod: function (pageSize, skip) {
                                return Commerce.AsyncResult.fromPromise((_this._data.loadDataPage(pageSize, skip)));
                            },
                            pageSize: this._data.pageSize,
                            reloadCallBack: this._resetDataSource
                        };
                        return internalIncrementalDataSource;
                    },
                    enumerable: true,
                    configurable: true
                });
                return PaginatedDataList;
            }(DataList.DataListBase));
            DataList.PaginatedDataList = PaginatedDataList;
        })(DataList = Controls.DataList || (Controls.DataList = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var DatePicker;
        (function (DatePicker) {
            var DatePickerBindingHandler = (function () {
                function DatePickerBindingHandler() {
                }
                DatePickerBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var options = ko.utils.unwrapObservable(valueAccessor()) || Object.create(null);
                    var picker = new WinJS.UI.DatePicker(element);
                    ko.applyBindingsToNode(picker.element, {
                        winControl: {
                            current: options.current || Commerce.DateExtensions.now,
                            datePattern: options.datePattern || Commerce.StringExtensions.EMPTY,
                            disabled: options.disabled || false
                        }
                    }, viewModel);
                    if (Commerce.ObjectExtensions.isFunction(options.onChange)) {
                        picker.onchange = function (event) {
                            var datePickerDiv = event.currentTarget;
                            var datePickerControl = datePickerDiv.winControl;
                            options.onChange(Commerce.DateExtensions.getDate(datePickerControl.current));
                        };
                    }
                    return { controlsDescendantBindings: true };
                };
                return DatePickerBindingHandler;
            }());
            DatePicker.DatePickerBindingHandler = DatePickerBindingHandler;
            ko.bindingHandlers.datePicker = new DatePickerBindingHandler();
        })(DatePicker = Controls.DatePicker || (Controls.DatePicker = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var DatePicker;
        (function (DatePicker) {
            "use strict";
        })(DatePicker = Controls.DatePicker || (Controls.DatePicker = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var DeveloperMode = (function (_super) {
            __extends(DeveloperMode, _super);
            function DeveloperMode(options) {
                var _this = _super.call(this) || this;
                _this._isEventAttached = false;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                _this._onDeveloperModeDisabled = options.onDeveloperModeDisabled;
                _this.connectionTimeout = ko.observable(Commerce.Config.connectionTimeout.toString());
                _this.connectionTimeout.subscribe(function (newValue) {
                    var timeoutInSeconds = parseInt(newValue, 10);
                    if (Commerce.ObjectExtensions.isNumber(timeoutInSeconds) && !isNaN(timeoutInSeconds) && timeoutInSeconds >= 0 && timeoutInSeconds <= 9999) {
                        Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.CONNECTION_TIMEOUT_IN_SECONDS, newValue);
                    }
                }, _this);
                _this.isGridHelperVisible = ko.observable(Commerce.Helpers.DeveloperModeHelper.isGridHelperVisible());
                _this.isGridHelperVisible.subscribe(function (newValue) {
                    Commerce.Helpers.DeveloperModeHelper.setGridHelperVisibility(newValue);
                }, _this);
                _this.isColoringVisible = ko.observable(Commerce.Helpers.DeveloperModeHelper.isColoringVisible());
                _this.isColoringVisible.subscribe(function (newValue) {
                    Commerce.Helpers.DeveloperModeHelper.setColoring(correlationId, newValue);
                }, _this);
                _this.areStringIdsVisible = ko.observable(Commerce.Helpers.DeveloperModeHelper.areStringIdsVisible());
                _this.areStringIdsVisible.subscribe(function (newValue) {
                    Commerce.Helpers.DeveloperModeHelper.setStringIdsVisibility(newValue);
                }, _this);
                _this.isPseudoLocalizationEnabled = ko.observable(Commerce.Helpers.DeveloperModeHelper.isPseudoLocalizationEnabled());
                _this.isPseudoLocalizationEnabled.subscribe(function (newValue) {
                    Commerce.Helpers.DeveloperModeHelper.setPseudoLocalization(newValue);
                }, _this);
                _this.theme = ko.observable(Commerce.Helpers.DeveloperModeHelper.getTheme());
                _this.theme.subscribe(function (newValue) {
                    Commerce.Helpers.DeveloperModeHelper.setTheme(correlationId, newValue);
                }, _this);
                _this.dir = ko.observable(Commerce.Helpers.DeveloperModeHelper.getTextDirection());
                _this.dir.subscribe(function (newValue) {
                    Commerce.Helpers.DeveloperModeHelper.setTextDirection(newValue);
                }, _this);
                _this._onKeyDown = function (event) {
                    if (event.ctrlKey && event.altKey && Commerce.Helpers.DeveloperModeHelper.isDeveloperMode()) {
                        switch (String.fromCharCode(event.which)) {
                            case "G":
                                this.toggleGridVisibility(!this.isGridHelperVisible());
                                break;
                            case "T":
                                this.theme(this.theme() === Commerce.Helpers.DeveloperModeHelper.DARK_THEME
                                    ? Commerce.Helpers.DeveloperModeHelper.LIGHT_THEME : Commerce.Helpers.DeveloperModeHelper.DARK_THEME);
                                break;
                            case "D":
                                this.dir(this.dir() === Commerce.CSSHelpers.LEFT_TO_RIGHT_TEXT_DIRECTION
                                    ? Commerce.CSSHelpers.RIGHT_TO_LEFT_TEXT_DIRECTION : Commerce.CSSHelpers.LEFT_TO_RIGHT_TEXT_DIRECTION);
                                break;
                            case "C":
                                this.toggleColorVisibility(!this.isColoringVisible());
                                break;
                        }
                    }
                }.bind(_this);
                _this.isDeveloperMode = ko.observable(Commerce.Helpers.DeveloperModeHelper.isDeveloperMode());
                $(document).on("keydown", _this._onKeyDown);
                _this._isEventAttached = true;
                _this.isDeveloperMode.subscribe(function (newValue) {
                    Commerce.Helpers.DeveloperModeHelper.setDeveloperMode(newValue);
                    if (Commerce.Helpers.DeveloperModeHelper.isDeveloperMode()) {
                        if (_this._isEventAttached === false) {
                            $(document).on("keydown", _this._onKeyDown);
                            _this._isEventAttached = true;
                        }
                    }
                    else {
                        Commerce.Helpers.DeveloperModeHelper.resetAllParametersToDefault(correlationId);
                        _this._reloadTogglerValuesFromStorage();
                        if (_this._isEventAttached) {
                            $(document).off("keydown", _this._onKeyDown);
                            _this._isEventAttached = false;
                        }
                        _this._onDeveloperModeDisabled();
                    }
                }, _this);
                _this.isPerformanceLogEnabled = ko.observable(Commerce.Helpers.DeveloperModeHelper.isPerformanceLoggerEnabled());
                _this.isPerformanceLogEnabled.subscribe(function (newValue) {
                }, _this);
                return _this;
            }
            DeveloperMode.prototype.refresh = function () {
                this.isDeveloperMode(Commerce.Helpers.DeveloperModeHelper.isDeveloperMode());
            };
            DeveloperMode.prototype.toggleStringIdsVisibility = function (checked) {
                this.areStringIdsVisible(checked);
            };
            DeveloperMode.prototype.togglePseudoLocalization = function (checked) {
                this.isPseudoLocalizationEnabled(checked);
            };
            DeveloperMode.prototype.togglePerformanceLog = function (checked) {
                this.isPerformanceLogEnabled(checked);
            };
            DeveloperMode.prototype.toggleGridVisibility = function (checked) {
                this.isGridHelperVisible(checked);
            };
            DeveloperMode.prototype.toggleColorVisibility = function (checked) {
                this.isColoringVisible(checked);
            };
            DeveloperMode.prototype.toggleDeveloperMode = function (checked) {
                this.isDeveloperMode(checked);
            };
            DeveloperMode.prototype._reloadTogglerValuesFromStorage = function () {
                this.isGridHelperVisible(Commerce.Helpers.DeveloperModeHelper.isGridHelperVisible());
                this.isColoringVisible(Commerce.Helpers.DeveloperModeHelper.isColoringVisible());
                this.areStringIdsVisible(Commerce.Helpers.DeveloperModeHelper.areStringIdsVisible());
                this.isPseudoLocalizationEnabled(Commerce.Helpers.DeveloperModeHelper.isPseudoLocalizationEnabled());
                this.theme(Commerce.Helpers.DeveloperModeHelper.getTheme());
                this.dir(Commerce.Helpers.DeveloperModeHelper.getTextDirection());
                this.connectionTimeout(Commerce.Config.connectionTimeout.toString());
            };
            return DeveloperMode;
        }(Controls.UserControl));
        Controls.DeveloperMode = DeveloperMode;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var DeviceDeactivation = (function (_super) {
            __extends(DeviceDeactivation, _super);
            function DeviceDeactivation() {
                var _this = _super.call(this) || this;
                _this.indeterminateWaitVisible = ko.observable(false);
                _this.storeId = ko.observable(Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.STORE_ID_KEY));
                _this.registerId = ko.observable(Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.REGISTER_ID_KEY) || Commerce.StringExtensions.EMPTY);
                _this.deviceId = ko.observable(Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.DEVICE_ID_KEY) || Commerce.StringExtensions.EMPTY);
                return _this;
            }
            DeviceDeactivation.prototype.deactivateDeviceHandler = function () {
                var _this = this;
                Commerce.ViewModelAdapter.displayMessage("string_1415", Commerce.MessageType.Info, Commerce.MessageBoxButtons.YesNo, null, 1, "\n\n", "\n")
                    .done(function (result) {
                    if (result === Commerce.DialogResult.Yes) {
                        _this.indeterminateWaitVisible(true);
                        Commerce.Operations.OperationsManager.instance
                            .runOperation(Commerce.Operations.RetailOperation.DeactivateDevice, {})
                            .done(function () {
                            Commerce.EventProxy.Instance.raiseCustomEvent("DeviceDeactivatedEvent");
                        }).fail(function (errors) {
                            Commerce.NotificationHandler.displayClientErrors(errors, "string_1417");
                        }).always(function () {
                            _this.indeterminateWaitVisible(false);
                        });
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors, "string_1417");
                });
            };
            return DeviceDeactivation;
        }(Controls.UserControl));
        Controls.DeviceDeactivation = DeviceDeactivation;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var AddDiscountDialog = (function (_super) {
            __extends(AddDiscountDialog, _super);
            function AddDiscountDialog() {
                var _this = _super.call(this) || this;
                _this._discountType = ko.observable(Commerce.Proxy.Entities.ManualDiscountType.None);
                _this._isLineDiscount = false;
                _this._discountValue = ko.observable("0");
                _this._discountInputLabel = ko.observable("");
                _this.isPercentType = ko.computed(function () {
                    var discountType = _this._discountType();
                    return (discountType === Commerce.Proxy.Entities.ManualDiscountType.LineDiscountPercent)
                        || (discountType === Commerce.Proxy.Entities.ManualDiscountType.TotalDiscountPercent);
                });
                return _this;
            }
            AddDiscountDialog.prototype.onShowing = function (dialogState) {
                this._discountType(dialogState.discountType);
                this._cartLine = dialogState.cartLine;
                this._discountValue("0");
                var errorCode = this.checkSupportedDiscountType();
                if (!Commerce.StringExtensions.isNullOrWhitespace(errorCode)) {
                    this.dialogResult.reject([new Commerce.Proxy.Entities.Error(errorCode)]);
                    return;
                }
                this.subTitle(this._isLineDiscount
                    ? Commerce.CartLineHelper.getProductName(this._cartLine)
                    : Commerce.StringExtensions.EMPTY);
                this.title(this.getTitleString());
                this._discountInputLabel(this.getDiscountInputLabel());
                this.visible(true);
            };
            AddDiscountDialog.prototype.addDiscountButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                    case Controls.Dialog.OperationIds.CLOSE_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        var discountValue = this._discountValue();
                        var testNum = Commerce.NumberExtensions.parseNumber(discountValue);
                        if (isNaN(testNum) || testNum < 0) {
                            Commerce.NotificationHandler.displayErrorMessage("string_29823");
                        }
                        else {
                            Commerce.RetailLogger.viewsControlsDiscountDialogProcessingDiscount(discountValue);
                            this.addDiscountSuccess();
                        }
                        break;
                    default:
                        throw "Unknown operation Id: " + operationId;
                }
            };
            AddDiscountDialog.prototype.onTextBoxEnterEventHandler = function () {
                this.addDiscountButtonClick(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
            };
            AddDiscountDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            AddDiscountDialog.prototype.getTitleString = function () {
                var title = null;
                switch (this._discountType()) {
                    case Commerce.Proxy.Entities.ManualDiscountType.LineDiscountAmount:
                    case Commerce.Proxy.Entities.ManualDiscountType.LineDiscountPercent:
                        title = Commerce.ViewModelAdapter.getResourceString("string_5606");
                        break;
                    case Commerce.Proxy.Entities.ManualDiscountType.TotalDiscountAmount:
                    case Commerce.Proxy.Entities.ManualDiscountType.TotalDiscountPercent:
                        title = Commerce.ViewModelAdapter.getResourceString("string_5607");
                        break;
                    default:
                        break;
                }
                return title;
            };
            AddDiscountDialog.prototype.getDiscountInputLabel = function () {
                var inputLabel = null;
                switch (this._discountType()) {
                    case Commerce.Proxy.Entities.ManualDiscountType.LineDiscountAmount:
                    case Commerce.Proxy.Entities.ManualDiscountType.TotalDiscountAmount:
                        inputLabel = Commerce.ViewModelAdapter.getResourceString("string_5608");
                        break;
                    case Commerce.Proxy.Entities.ManualDiscountType.TotalDiscountPercent:
                    case Commerce.Proxy.Entities.ManualDiscountType.LineDiscountPercent:
                        inputLabel = Commerce.ViewModelAdapter.getResourceString("string_5609");
                        break;
                    default:
                        break;
                }
                return inputLabel;
            };
            AddDiscountDialog.prototype.checkSupportedDiscountType = function () {
                var errorCode = null;
                var isMissingCartLine = Commerce.ObjectExtensions.isNullOrUndefined(this._cartLine);
                switch (this._discountType()) {
                    case Commerce.Proxy.Entities.ManualDiscountType.LineDiscountAmount:
                    case Commerce.Proxy.Entities.ManualDiscountType.LineDiscountPercent:
                        if (isMissingCartLine) {
                            errorCode = Commerce.ErrorTypeEnum.MISSING_CARTLINE_ON_APPLY_DISCOUNT;
                        }
                        else {
                            this._isLineDiscount = true;
                        }
                        break;
                    case Commerce.Proxy.Entities.ManualDiscountType.TotalDiscountAmount:
                    case Commerce.Proxy.Entities.ManualDiscountType.TotalDiscountPercent:
                        this._isLineDiscount = false;
                        break;
                    default:
                        errorCode = Commerce.ErrorTypeEnum.UNSUPPORTED_APPLY_DISCOUNT_OPERATION;
                        break;
                }
                return errorCode;
            };
            AddDiscountDialog.prototype.addDiscountSuccess = function () {
                this.dialogResult.resolve(Commerce.DialogResult.OK, {
                    discountValue: Commerce.NumberExtensions.parseNumber(this._discountValue())
                });
            };
            return AddDiscountDialog;
        }(Controls.ModalDialog));
        Controls.AddDiscountDialog = AddDiscountDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var AmountDueDialog = (function (_super) {
            __extends(AmountDueDialog, _super);
            function AmountDueDialog() {
                var _this = _super.call(this) || this;
                _this.amountDueDialogState = ko.observable(null);
                _this.remainingAmount = ko.observable(0);
                _this.tenderTypesWithIcon = ko.observableArray([]);
                return _this;
            }
            AmountDueDialog.prototype.onShowing = function (dialogState) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(dialogState)) {
                    throw new Error("AmountDueDialog.onShowing: 'dialogState' can't be null.");
                }
                this.amountDueDialogState(dialogState);
                this.remainingAmount(dialogState.remainingAmountDue);
                var tenderTypesWithIconClass = [];
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.tenderTypes)) {
                    dialogState.tenderTypes.forEach(function (tenderType) {
                        tenderTypesWithIconClass.push({
                            tenderType: tenderType,
                            tenderTypeIconClass: _this._getTenderTypeIconClassName(tenderType) + " width48 icon-24x24 accentColor"
                        });
                    });
                }
                this.tenderTypesWithIcon(tenderTypesWithIconClass);
                this.visible(true);
                Commerce.RetailLogger.viewsControlsChangeDialogVisible(Commerce.LoggerHelper.getFormattedCorrelationId(dialogState));
            };
            AmountDueDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                    case Controls.Dialog.OperationIds.CLOSE_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Close);
                        break;
                }
            };
            AmountDueDialog.prototype.tenderTypeOptionClickHandler = function (selectedTenderType) {
                this.dialogResult.resolve(Commerce.DialogResult.OK, selectedTenderType.tenderType);
            };
            AmountDueDialog.prototype.dialogCloseButtonClickHandler = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            AmountDueDialog.prototype._getTenderTypeIconClassName = function (tenderType) {
                var iconClassName = Commerce.StringExtensions.EMPTY;
                switch (tenderType.OperationId) {
                    case Commerce.Operations.RetailOperation.PayCash:
                        iconClassName = "iconMoney";
                        break;
                    case Commerce.Operations.RetailOperation.PayCashQuick:
                        iconClassName = "iconMoney";
                        break;
                    case Commerce.Operations.RetailOperation.PayCheck:
                        iconClassName = "iconCheckPayment";
                        break;
                    case Commerce.Operations.RetailOperation.PayCurrency:
                        iconClassName = "iconCurrency";
                        break;
                    case Commerce.Operations.RetailOperation.PayCard:
                        iconClassName = "iconPaymentCard";
                        break;
                    case Commerce.Operations.RetailOperation.PayGiftCertificate:
                        iconClassName = "iconGiftCard";
                        break;
                    case Commerce.Operations.RetailOperation.PayCustomerAccount:
                        iconClassName = "iconCustomerAccountCard";
                        break;
                    case Commerce.Operations.RetailOperation.PayCreditMemo:
                        iconClassName = "iconAutoPay";
                        break;
                    case Commerce.Operations.RetailOperation.PayLoyalty:
                        iconClassName = "iconLoyaltyCard";
                        break;
                    default:
                        throw new Error("Operation " + tenderType.OperationId + " is not supported by payment flow.");
                }
                return iconClassName;
            };
            return AmountDueDialog;
        }(Controls.ModalDialog));
        Controls.AmountDueDialog = AmountDueDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var AvailableDiscountsDisplayMode;
        (function (AvailableDiscountsDisplayMode) {
            AvailableDiscountsDisplayMode[AvailableDiscountsDisplayMode["Transaction"] = 0] = "Transaction";
            AvailableDiscountsDisplayMode[AvailableDiscountsDisplayMode["Line"] = 1] = "Line";
        })(AvailableDiscountsDisplayMode = Controls.AvailableDiscountsDisplayMode || (Controls.AvailableDiscountsDisplayMode = {}));
        var AvailableDiscountsDialog = (function (_super) {
            __extends(AvailableDiscountsDialog, _super);
            function AvailableDiscountsDialog(selectedCartLine) {
                var _this = _super.call(this) || this;
                _this.transactionPromotions = ko.observable(null);
                _this.cartLinePromotions = ko.observable(null);
                _this.cartSubTotal = ko.observable(0);
                _this.product = ko.observable(null);
                _this.viewMode = ko.observable(AvailableDiscountsDisplayMode.Line);
                _this.viewModel = new Commerce.ViewModels.AvailableDiscountsViewModel(_this.createViewModelContext(), selectedCartLine);
                return _this;
            }
            AvailableDiscountsDialog.prototype.onShowing = function (dialogState) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(dialogState)) {
                    this._cancelDialog();
                    return;
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.product)) {
                    this.product(dialogState.product);
                }
                this.cartSubTotal(Commerce.Session.instance.cart.SubtotalAmount);
                this.title(Commerce.ViewModelAdapter.getResourceString("string_4497"));
                this._loadPromotions();
                this.visible(true);
            };
            AvailableDiscountsDialog.prototype.switchToTransactionDisplayMode = function () {
                this.viewMode(AvailableDiscountsDisplayMode.Transaction);
            };
            AvailableDiscountsDialog.prototype.switchToLineDisplayMode = function () {
                this.viewMode(AvailableDiscountsDisplayMode.Line);
            };
            AvailableDiscountsDialog.prototype.onCloseDialogButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.OK);
            };
            AvailableDiscountsDialog.prototype.onButtonClick = function (operationId) {
                if (operationId === Controls.Dialog.OperationIds.OK_BUTTON_CLICK) {
                    this.dialogResult.resolve(Commerce.DialogResult.OK);
                }
                else if (operationId === Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK) {
                    this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                }
            };
            AvailableDiscountsDialog.prototype.isPromotionAppliedInCart = function (promotion) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(promotion.CouponCodes)) {
                    return Commerce.Session.instance.cart.Coupons.filter(function (coupons) { return promotion.CouponCodes.some(function (promotionCode) { return coupons.Code === promotionCode; }); }).length > 0;
                }
                return false;
            };
            AvailableDiscountsDialog.prototype.addCoupon = function (promotionLine) {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(promotionLine.Promotion.CouponCodes)) {
                    this.indeterminateWaitVisible(true);
                    this.viewModel.addCouponCodeAsync(promotionLine.Promotion.CouponCodes).always(function () {
                        _this.dialogResult.resolve(Commerce.DialogResult.OK);
                        _this.indeterminateWaitVisible(false);
                    });
                }
            };
            AvailableDiscountsDialog.prototype.removeCoupon = function (promotionLine) {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(promotionLine.Promotion.CouponCodes)) {
                    this.indeterminateWaitVisible(true);
                    this.viewModel.removeCouponsAsync(promotionLine.Promotion.CouponCodes).always(function () {
                        _this.dialogResult.resolve(Commerce.DialogResult.OK);
                        _this.indeterminateWaitVisible(false);
                    });
                }
            };
            AvailableDiscountsDialog.prototype._cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            AvailableDiscountsDialog.prototype._loadPromotions = function () {
                var _this = this;
                this.indeterminateWaitVisible(true);
                var asyncResults = [];
                var asyncCartLineResults = this.viewModel.getSelectedCartLinePromotionsAsync().done(function (promotions) {
                    _this.cartLinePromotions(promotions);
                });
                asyncResults.push(asyncCartLineResults);
                var asyncTransactionResult = this.viewModel.getCartPromotionsAsync().done(function (promotions) {
                    _this.transactionPromotions(promotions);
                });
                asyncResults.push(asyncTransactionResult);
                Commerce.VoidAsyncResult.join(asyncResults).always(function () {
                    _this.indeterminateWaitVisible(false);
                });
            };
            return AvailableDiscountsDialog;
        }(Controls.ModalDialog));
        Controls.AvailableDiscountsDialog = AvailableDiscountsDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var ChangeDialog = (function (_super) {
            __extends(ChangeDialog, _super);
            function ChangeDialog() {
                var _this = _super.call(this) || this;
                _this.amountDue = ko.observable(0);
                _this.changeAmount = ko.observable(0);
                _this.changeAmountLabel = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.printGiftReceiptVisible = ko.observable(false);
                _this.printGiftReceipt = ko.observable(false);
                _this.salesPaymentDifference = ko.observable(0);
                _this.salesPaymentDifferenceVisible = ko.observable(false);
                _this.totalAmountPaid = ko.observable(0);
                return _this;
            }
            ChangeDialog.prototype.onShowing = function (dialogState) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState)) {
                    this.amountDue(dialogState.amountDue);
                    this.changeAmount(dialogState.changeAmount);
                    var changeAmountLabel = null;
                    if (Commerce.StringExtensions.isNullOrWhitespace(dialogState.tenderTypeName)) {
                        changeAmountLabel = Commerce.ViewModelAdapter.getResourceString("string_1816");
                    }
                    else {
                        changeAmountLabel = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_1824"), dialogState.tenderTypeName);
                    }
                    this.changeAmountLabel(changeAmountLabel);
                    if (dialogState.salesPaymentDifference !== 0) {
                        this.salesPaymentDifference(dialogState.salesPaymentDifference);
                        this.salesPaymentDifferenceVisible(true);
                    }
                    this.totalAmountPaid(dialogState.totalAmountPaid);
                }
                this.visible(true);
                Commerce.RetailLogger.viewsControlsChangeDialogVisible(Commerce.LoggerHelper.getFormattedCorrelationId(dialogState));
            };
            ChangeDialog.prototype.onPrintGiftReceiptToggle = function (checked) {
                this.printGiftReceipt(checked);
            };
            ChangeDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                    case Controls.Dialog.OperationIds.CLOSE_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Close);
                        break;
                }
            };
            return ChangeDialog;
        }(Controls.ModalDialog));
        Controls.ChangeDialog = ChangeDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var ChangeDueDialog = (function (_super) {
            __extends(ChangeDueDialog, _super);
            function ChangeDueDialog() {
                var _this = _super.call(this) || this;
                _this.changeDueDialogState = ko.observable(null);
                _this.changeDueText = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.changeAmount = ko.observable(0);
                _this.printGiftReceipt = ko.observable(false);
                _this.printGiftReceiptVisible = ko.observable(false);
                return _this;
            }
            ChangeDueDialog.prototype.onShowing = function (dialogState) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(dialogState)) {
                    throw new Error("ChangeDueDialog.onShowing: 'dialogState' can't be null.");
                }
                this.changeDueDialogState(dialogState);
                this.changeAmount(dialogState.changeAmount);
                this.printGiftReceiptVisible(dialogState.offerToPrintGiftReceipts);
                var changeDueLabel = Commerce.StringExtensions.isNullOrWhitespace(dialogState.tenderTypeName) ?
                    Commerce.ViewModelAdapter.getResourceString("string_1816") :
                    Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_1824"), dialogState.tenderTypeName);
                this.changeDueText(changeDueLabel);
                this.visible(true);
                Commerce.RetailLogger.viewsControlsChangeDialogVisible(Commerce.LoggerHelper.getFormattedCorrelationId(dialogState));
            };
            ChangeDueDialog.prototype.onPrintGiftReceiptToggle = function (checked) {
                this.printGiftReceipt(checked);
            };
            ChangeDueDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                    case Controls.Dialog.OperationIds.CLOSE_BUTTON_CLICK:
                        var shouldPrintGiftReceipt = this.printGiftReceiptVisible() ? this.printGiftReceipt() : false;
                        this.dialogResult.resolve(Commerce.DialogResult.Close, shouldPrintGiftReceipt);
                        break;
                }
            };
            ChangeDueDialog.prototype.dialogCloseButtonClickHandler = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return ChangeDueDialog;
        }(Controls.ModalDialog));
        Controls.ChangeDueDialog = ChangeDueDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var GetCancellationChargeModalDialog = (function (_super) {
            __extends(GetCancellationChargeModalDialog, _super);
            function GetCancellationChargeModalDialog() {
                var _this = _super.call(this) || this;
                _this.cancellationCharge = ko.observable("0");
                _this.depositPaid = ko.observable("0");
                _this._isOKButtonDisabled = ko.computed(function () {
                    var cancellationCharge = Commerce.NumberExtensions.parseNumber(_this.cancellationCharge());
                    return isNaN(cancellationCharge) || cancellationCharge < 0;
                });
                return _this;
            }
            GetCancellationChargeModalDialog.prototype.onShowing = function (dialogOptions) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(dialogOptions)
                    || Commerce.ObjectExtensions.isNullOrUndefined(dialogOptions.originalCancellationCharge)) {
                    dialogOptions = { originalCancellationCharge: 0, depositPaid: 0 };
                }
                this.cancellationCharge(Commerce.NumberExtensions.formatNumber(dialogOptions.originalCancellationCharge, Commerce.NumberExtensions.getDecimalPrecision()));
                this.depositPaid(Commerce.NumberExtensions.formatCurrency(dialogOptions.depositPaid ? dialogOptions.depositPaid : 0));
                this.indeterminateWaitVisible(false);
                this.visible(true);
            };
            GetCancellationChargeModalDialog.prototype.getCancellationChargeButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this._getCancellationChargeInvokedHandler();
                        break;
                }
            };
            GetCancellationChargeModalDialog.prototype.onTextBoxEnterEventHandler = function () {
                if (!this._isOKButtonDisabled()) {
                    this.getCancellationChargeButtonClick(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
                }
            };
            GetCancellationChargeModalDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            GetCancellationChargeModalDialog.prototype._getCancellationChargeInvokedHandler = function () {
                var cancellationCharge = Commerce.NumberExtensions.parseNumber(this.cancellationCharge());
                this.dialogResult.resolve(Commerce.DialogResult.OK, cancellationCharge);
            };
            return GetCancellationChargeModalDialog;
        }(Controls.ModalDialog));
        Controls.GetCancellationChargeModalDialog = GetCancellationChargeModalDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var GetChargeAmountDialog = (function (_super) {
            __extends(GetChargeAmountDialog, _super);
            function GetChargeAmountDialog() {
                var _this = _super.call(this) || this;
                _this.chargeAmount = ko.observable("0");
                _this.chargeCode = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.chargeInputLabel = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.product = ko.observable(null);
                return _this;
            }
            GetChargeAmountDialog.prototype.onShowing = function (dialogOptions) {
                dialogOptions.product = dialogOptions.product || null;
                dialogOptions.chargeCode = dialogOptions.chargeCode || Commerce.StringExtensions.EMPTY;
                this.chargeCode(dialogOptions.chargeCode);
                this.chargeAmount("0");
                if (dialogOptions.chargeType === Commerce.Proxy.Entities.ChargeTypeEnum.HeaderCharge) {
                    this.title(Commerce.ViewModelAdapter.getResourceString("string_5946"));
                }
                else if (dialogOptions.chargeType === Commerce.Proxy.Entities.ChargeTypeEnum.LineCharge) {
                    this.title(Commerce.ViewModelAdapter.getResourceString("string_5948"));
                }
                this.chargeInputLabel(Commerce.ViewModelAdapter.getResourceString("string_5959"));
                this.indeterminateWaitVisible(false);
                this.product(dialogOptions.product);
                this.visible(true);
            };
            GetChargeAmountDialog.prototype.getChargeAmountButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.getChargeAmountInvokedHandler();
                        break;
                }
            };
            GetChargeAmountDialog.prototype.onTextBoxEnterEventHandler = function () {
                this.getChargeAmountButtonClick(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
            };
            GetChargeAmountDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            GetChargeAmountDialog.prototype.getChargeAmountInvokedHandler = function () {
                var response = {
                    chargeAmount: Commerce.NumberExtensions.parseNumber(this.chargeAmount())
                };
                this.dialogResult.resolve(Commerce.DialogResult.OK, response);
            };
            return GetChargeAmountDialog;
        }(Controls.ModalDialog));
        Controls.GetChargeAmountDialog = GetChargeAmountDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var GetChargeCodesDialog = (function (_super) {
            __extends(GetChargeCodesDialog, _super);
            function GetChargeCodesDialog() {
                var _this = _super.call(this) || this;
                _this.product = ko.observable(null);
                _this.viewModel = new Commerce.ViewModels.GetChargeViewModel(_this.createViewModelContext());
                return _this;
            }
            GetChargeCodesDialog.prototype.onShowing = function (dialogOptions) {
                dialogOptions.product = dialogOptions.product || null;
                if (dialogOptions.chargeType === Commerce.Proxy.Entities.ChargeTypeEnum.HeaderCharge) {
                    this.title(Commerce.ViewModelAdapter.getResourceString("string_5946"));
                }
                else if (dialogOptions.chargeType === Commerce.Proxy.Entities.ChargeTypeEnum.LineCharge) {
                    this.title(Commerce.ViewModelAdapter.getResourceString("string_5948"));
                }
                this.product(dialogOptions.product);
                this.visible(true);
            };
            GetChargeCodesDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            GetChargeCodesDialog.prototype.itemInvokedHandler = function (item) {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { chargeCode: item });
            };
            GetChargeCodesDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return GetChargeCodesDialog;
        }(Controls.ModalDialog));
        Controls.GetChargeCodesDialog = GetChargeCodesDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var ManageChargesLineDetailDialog = (function (_super) {
            __extends(ManageChargesLineDetailDialog, _super);
            function ManageChargesLineDetailDialog() {
                var _this = _super.call(this) || this;
                _this.deliveryMode = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.overrideReason = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.currencyCode = ko.observable(Commerce.StringExtensions.EMPTY);
                return _this;
            }
            ManageChargesLineDetailDialog.prototype.onShowing = function (dialogState) {
                this.deliveryMode(dialogState.deliveryMode);
                this.currencyCode(dialogState.currencyCode);
                this.overrideReason(dialogState.overrideReason);
                this.visible(true);
            };
            ManageChargesLineDetailDialog.prototype.closeDetails = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return ManageChargesLineDetailDialog;
        }(Controls.ModalDialog));
        Controls.ManageChargesLineDetailDialog = ManageChargesLineDetailDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var OverrideHeaderChargeDialog = (function (_super) {
            __extends(OverrideHeaderChargeDialog, _super);
            function OverrideHeaderChargeDialog() {
                var _this = _super.call(this) || this;
                _this.selectedChargeCode = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.chargeAmount = ko.observable("0");
                _this.isOKButtonDisabled = ko.computed(function () {
                    var overriddenChargeAmount = Commerce.NumberExtensions.parseNumber(_this.chargeAmount());
                    return isNaN(overriddenChargeAmount);
                });
                return _this;
            }
            OverrideHeaderChargeDialog.prototype.onShowing = function (dialogState) {
                dialogState = dialogState || { chargeLine: undefined };
                if (Commerce.ObjectExtensions.isNullOrUndefined(dialogState.chargeLine)) {
                    this.cancelDialog();
                    return;
                }
                this._chargeLine = dialogState.chargeLine;
                this.selectedChargeCode(this._chargeLine.ChargeCode);
                this.chargeAmount(Commerce.NumberExtensions.formatNumber(this._chargeLine.CalculatedAmount, Commerce.NumberExtensions.getDecimalPrecision()));
                this.visible(true);
            };
            OverrideHeaderChargeDialog.prototype.onButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, { overriddenChargeAmount: Commerce.NumberExtensions.parseNumber(this.chargeAmount()) });
                        break;
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.cancelDialog();
                        break;
                }
            };
            OverrideHeaderChargeDialog.prototype.onTextBoxEnterEventHandler = function () {
                if (!this.isOKButtonDisabled()) {
                    this.onButtonClick(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
                }
            };
            OverrideHeaderChargeDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            OverrideHeaderChargeDialog.prototype.cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return OverrideHeaderChargeDialog;
        }(Controls.ModalDialog));
        Controls.OverrideHeaderChargeDialog = OverrideHeaderChargeDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var OverrideLineChargeDialog = (function (_super) {
            __extends(OverrideLineChargeDialog, _super);
            function OverrideLineChargeDialog() {
                var _this = _super.call(this) || this;
                _this.selectedChargeCode = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.chargeAmount = ko.observable("0");
                _this.selectedProduct = ko.observable(null);
                _this.isOKButtonDisabled = ko.computed(function () {
                    var overriddenChargeAmount = Commerce.NumberExtensions.parseNumber(_this.chargeAmount());
                    return isNaN(overriddenChargeAmount);
                });
                return _this;
            }
            OverrideLineChargeDialog.prototype.onShowing = function (dialogState) {
                dialogState = dialogState || { chargeLine: undefined, cartLine: undefined };
                if (Commerce.ObjectExtensions.isNullOrUndefined(dialogState.cartLine) || Commerce.ObjectExtensions.isNullOrUndefined(dialogState.chargeLine)) {
                    this.cancelDialog();
                    return;
                }
                this._chargeLine = dialogState.chargeLine;
                this.selectedChargeCode(this._chargeLine.ChargeCode);
                this.chargeAmount(Commerce.NumberExtensions.formatNumber(this._chargeLine.CalculatedAmount, Commerce.NumberExtensions.getDecimalPrecision()));
                this.selectedProduct(Commerce.Session.instance.getFromProductsInCartCache(dialogState.cartLine.ProductId));
                this.visible(true);
            };
            OverrideLineChargeDialog.prototype.onButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, { overriddenChargeAmount: Commerce.NumberExtensions.parseNumber(this.chargeAmount()) });
                        break;
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.cancelDialog();
                        break;
                }
            };
            OverrideLineChargeDialog.prototype.onTextBoxEnterEventHandler = function () {
                if (!this.isOKButtonDisabled()) {
                    this.onButtonClick(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
                }
            };
            OverrideLineChargeDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            OverrideLineChargeDialog.prototype.cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return OverrideLineChargeDialog;
        }(Controls.ModalDialog));
        Controls.OverrideLineChargeDialog = OverrideLineChargeDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var PriceInputDialog = (function (_super) {
            __extends(PriceInputDialog, _super);
            function PriceInputDialog() {
                var _this = _super.call(this) || this;
                _this._priceContent = ko.observable("");
                _this.subTitleCssClass("primaryFontColor");
                _this._minValue = Number.NaN;
                _this._maxValue = Number.NaN;
                _this._label = ko.observable(Commerce.ViewModelAdapter.getResourceString("string_5724"));
                return _this;
            }
            Object.defineProperty(PriceInputDialog.prototype, "label", {
                get: function () {
                    return this._label;
                },
                enumerable: true,
                configurable: true
            });
            PriceInputDialog.prototype.onShowing = function (dialogState) {
                if (dialogState) {
                    this._priceContent(Commerce.NumberExtensions.formatNumber(dialogState.defaultPrice, Commerce.NumberExtensions.getDecimalPrecision()));
                    this._minValue = dialogState.minPrice;
                    this._maxValue = dialogState.maxPrice;
                    this._minPriceInclusive = Commerce.ObjectExtensions.isNullOrUndefined(dialogState.minPriceInclusive) ? true : dialogState.minPriceInclusive;
                    this._maxPriceInclusive = Commerce.ObjectExtensions.isNullOrUndefined(dialogState.maxPriceInclusive) ? true : dialogState.maxPriceInclusive;
                }
                else {
                    this._minValue = Number.NaN;
                    this._maxValue = Number.NaN;
                    this._minPriceInclusive = true;
                    this._maxPriceInclusive = true;
                }
                this._shouldMinAmountBeChecked = !isNaN(this._minValue) && ((this._minValue > Number.MIN_VALUE) || !this._minPriceInclusive);
                this._shouldMaxAmountBeChecked = !isNaN(this._maxValue) && ((this._maxValue < Number.MAX_VALUE) || !this._maxPriceInclusive);
                this._minValueDisplayString = Commerce.NumberExtensions.formatNumber(this._minValue, Commerce.NumberExtensions.getDecimalPrecision());
                this._maxValueDisplayString = Commerce.NumberExtensions.formatNumber(this._maxValue, Commerce.NumberExtensions.getDecimalPrecision());
                this.visible(true);
            };
            PriceInputDialog.prototype.onTextBoxEnterEventHandler = function () {
                this.buttonClickHandler(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
            };
            PriceInputDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            PriceInputDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Commerce.Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        var price = Commerce.NumberExtensions.parseNumber(this._priceContent());
                        if (!Commerce.Helpers.CurrencyHelper.isValidAmount(price)) {
                            Commerce.NotificationHandler.displayErrorMessage("string_5725");
                            return;
                        }
                        var errorResourceId = void 0;
                        var firstParam = Commerce.StringExtensions.EMPTY;
                        var secondParam = Commerce.StringExtensions.EMPTY;
                        if (this._shouldMinAmountBeChecked && this._shouldMaxAmountBeChecked) {
                            firstParam = this._minValueDisplayString;
                            secondParam = this._maxValueDisplayString;
                            if (this._minPriceInclusive && this._maxPriceInclusive) {
                                errorResourceId = ((this._minValue <= price) && (this._maxValue >= price)) ? Commerce.StringExtensions.EMPTY : "string_5707";
                            }
                            else if (this._minPriceInclusive && !this._maxPriceInclusive) {
                                errorResourceId = ((this._minValue <= price) && (this._maxValue > price)) ? Commerce.StringExtensions.EMPTY : "string_5708";
                            }
                            else if (!this._minPriceInclusive && this._maxPriceInclusive) {
                                errorResourceId = ((this._minValue < price) && (this._maxValue >= price)) ? Commerce.StringExtensions.EMPTY : "string_5709";
                            }
                            else {
                                errorResourceId = ((this._minValue < price) && (this._maxValue > price)) ? Commerce.StringExtensions.EMPTY : "string_5706";
                            }
                        }
                        else if (this._shouldMinAmountBeChecked) {
                            firstParam = this._minValueDisplayString;
                            if (this._minPriceInclusive) {
                                errorResourceId = (this._minValue <= price) ? Commerce.StringExtensions.EMPTY : "string_5710";
                            }
                            else {
                                errorResourceId = (this._minValue < price) ? Commerce.StringExtensions.EMPTY : "string_5711";
                            }
                        }
                        else if (this._shouldMaxAmountBeChecked) {
                            firstParam = this._maxValueDisplayString;
                            if (this._maxPriceInclusive) {
                                errorResourceId = (this._maxValue >= price) ? Commerce.StringExtensions.EMPTY : "string_5712";
                            }
                            else {
                                errorResourceId = (this._maxValue > price) ? Commerce.StringExtensions.EMPTY : "string_5713";
                            }
                        }
                        if (!Commerce.StringExtensions.isNullOrWhitespace(errorResourceId)) {
                            Commerce.NotificationHandler.displayErrorMessage(errorResourceId, firstParam, secondParam);
                            return;
                        }
                        this.dialogResult.resolve(Commerce.DialogResult.OK, price);
                        break;
                    case Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            return PriceInputDialog;
        }(Controls.ModalDialog));
        Controls.PriceInputDialog = PriceInputDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var AskQuestionDialog = (function (_super) {
            __extends(AskQuestionDialog, _super);
            function AskQuestionDialog() {
                var _this = _super.call(this) || this;
                _this.question = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.additionalInformation = ko.observableArray([]);
                _this.closeClickHandler = null;
                return _this;
            }
            AskQuestionDialog.prototype.show = function (dialogState, hideOnResult) {
                if (hideOnResult === void 0) { hideOnResult = true; }
                this._setDialogState(dialogState);
                return _super.prototype.show.call(this, dialogState, hideOnResult);
            };
            AskQuestionDialog.prototype.onShowing = function (dialogState) {
                this._setDialogState(dialogState);
                this.visible(true);
            };
            AskQuestionDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Yes, this.question());
                        break;
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel, Commerce.DialogResult.No);
                        break;
                    default:
                        this.dialogResult.resolve(Commerce.DialogResult.Yes, buttonId);
                }
            };
            AskQuestionDialog.prototype.onCloseHandlerCallback = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel, Commerce.DialogResult.No);
            };
            AskQuestionDialog.prototype._setDialogState = function (dialogState) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(dialogState)) {
                    return;
                }
                this.question(dialogState.question);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.title)) {
                    this.title(dialogState.title);
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.subTitle)) {
                    this.subTitle(dialogState.subTitle);
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.additionalInformation)) {
                    this.additionalInformation(dialogState.additionalInformation);
                }
                var buttons = [];
                if (Commerce.ObjectExtensions.isNullOrUndefined(dialogState.button1) && Commerce.ObjectExtensions.isNullOrUndefined(dialogState.button2)) {
                    buttons.push({
                        label: Commerce.ViewModelAdapter.getResourceString("string_77"),
                        operationId: Commerce.Controls.Dialog.OperationIds.OK_BUTTON_CLICK,
                        isPrimary: true,
                    });
                    buttons.push({
                        label: Commerce.ViewModelAdapter.getResourceString("string_78"),
                        operationId: Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK,
                        isPrimary: false,
                    });
                }
                else {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.button1)) {
                        buttons.push({
                            id: dialogState.button1.id,
                            label: dialogState.button1.label,
                            operationId: dialogState.button1.result,
                            ariaLabel: dialogState.button1.ariaLabel,
                            isPrimary: dialogState.button1.isPrimary,
                        });
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.button2)) {
                        buttons.push({
                            id: dialogState.button2.id,
                            label: dialogState.button2.label,
                            operationId: dialogState.button2.result,
                            ariaLabel: dialogState.button2.ariaLabel,
                            isPrimary: dialogState.button2.isPrimary,
                        });
                    }
                }
                this.buttons = buttons;
                if (dialogState.showCloseX === true) {
                    this.closeClickHandler = this.onCloseHandlerCallback.bind(this);
                }
            };
            return AskQuestionDialog;
        }(Controls.ModalDialog));
        Controls.AskQuestionDialog = AskQuestionDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var DateInputDialog = (function (_super) {
            __extends(DateInputDialog, _super);
            function DateInputDialog() {
                var _this = _super.call(this) || this;
                var dateNow = new Date();
                _this.currentDate = ko.observable(dateNow);
                _this.minimumYear = ko.observable(dateNow.getFullYear() - DateInputDialog.INTERVAL_YEAR);
                _this.maximumYear = ko.observable(dateNow.getFullYear() + DateInputDialog.INTERVAL_YEAR);
                return _this;
            }
            DateInputDialog.prototype.onShowing = function (dialogState) {
                this.minimumYear(dialogState.minYear);
                this.maximumYear(dialogState.maxYear);
                this.visible(true);
            };
            DateInputDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Commerce.Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, this.currentDate());
                        break;
                    case Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            DateInputDialog.prototype.dateChangeHandler = function (event) {
                var datePickerDiv = event.currentTarget;
                var datePickerControl = datePickerDiv.winControl;
                this.currentDate(Commerce.DateExtensions.getDate(datePickerControl.current));
            };
            DateInputDialog.INTERVAL_YEAR = 50;
            return DateInputDialog;
        }(Controls.ModalDialog));
        Controls.DateInputDialog = DateInputDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var ListInputDialog = (function (_super) {
            __extends(ListInputDialog, _super);
            function ListInputDialog() {
                var _this = _super.call(this) || this;
                _this.items = ko.observableArray([]);
                _this.isCustomContentVisible = ko.observable(false);
                return _this;
            }
            ListInputDialog.prototype.onShowing = function (state) {
                if (!Commerce.StringExtensions.isNullOrWhitespace(state.title)) {
                    this.title(state.title);
                }
                if (!Commerce.StringExtensions.isNullOrWhitespace(state.subTitle)) {
                    this.subTitle(state.subTitle);
                }
                this.setItems(state.items, state.getDisplayNameCallback);
                if (Commerce.Client.Entities.isIFufillmentLineDetails(state.reasonCodesContainer)) {
                    var fulfillmentLineDetails = state.reasonCodesContainer;
                    this.isCustomContentVisible(true);
                    var placeholder = $(this.element).find(".customContent");
                    ko.applyBindingsToNode(placeholder[0], {
                        template: {
                            name: "FulfillmentRejectReasonDialogTemplate",
                            data: fulfillmentLineDetails
                        }
                    });
                }
                this.visible(true);
            };
            ListInputDialog.prototype.setItems = function (updatedItems, getDisplayNameCallback) {
                this.items(updatedItems.map(function (updatedItem) {
                    var displayName = Commerce.ObjectExtensions.isFunction(getDisplayNameCallback) ? getDisplayNameCallback(updatedItem) : updatedItem.toString();
                    return { key: displayName, value: updatedItem };
                }));
            };
            ListInputDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            ListInputDialog.prototype.itemClickHandler = function (event) {
                this.dialogResult.resolve(Commerce.DialogResult.OK, event.data.value);
                return true;
            };
            return ListInputDialog;
        }(Controls.ModalDialog));
        Controls.ListInputDialog = ListInputDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var TextInputType;
        (function (TextInputType) {
            TextInputType[TextInputType["multiLineText"] = 0] = "multiLineText";
            TextInputType[TextInputType["singleLineText"] = 1] = "singleLineText";
            TextInputType[TextInputType["password"] = 2] = "password";
        })(TextInputType = Controls.TextInputType || (Controls.TextInputType = {}));
        var TextInputDialog = (function (_super) {
            __extends(TextInputDialog, _super);
            function TextInputDialog() {
                var _this = _super.call(this) || this;
                _this.textInputType = ko.observable(TextInputType.multiLineText);
                _this._textContent = ko.observable("");
                _this._textMaxLength = ko.observable(null);
                _this._rowsNumber = ko.observable(TextInputDialog.DEFAULT_ROWS_NUMBER);
                _this._labelText = ko.observable(null);
                _this._hideScrollbar = ko.observable(false);
                _this._enterKeyDisabled = false;
                _this._ariaLabelText = ko.observable(Commerce.StringExtensions.EMPTY);
                return _this;
            }
            TextInputDialog.prototype.onkeydown = function (data, event) {
                if (event.keyCode === 13 && this._enterKeyDisabled) {
                    event.preventDefault();
                    return false;
                }
                return true;
            };
            TextInputDialog.prototype.onShowing = function (dialogState) {
                var _this = this;
                if (dialogState) {
                    this._textContent(dialogState.content);
                    this._textMaxLength(dialogState.maxLength);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.textInputType)) {
                        this.textInputType(dialogState.textInputType);
                    }
                    this._labelText(dialogState.labelResx ? Commerce.ViewModelAdapter.getResourceString(dialogState.labelResx) : null);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.rowsNumber)) {
                        this._rowsNumber(dialogState.rowsNumber);
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.hideScrollbar)) {
                        this._hideScrollbar(dialogState.hideScrollbar);
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.enterKeyDisabled)) {
                        this._enterKeyDisabled = dialogState.enterKeyDisabled;
                    }
                    if (dialogState.enableBarcodeScan) {
                        Commerce.Peripherals.instance.barcodeScanner.enableAsync(function (barcode) {
                            _this._textContent(barcode);
                        }).done(function () { _this._scannerEnabled = true; });
                    }
                }
                this.visible(true);
                this._ariaLabelText(this.title() + " " +
                    (this.subTitle() || Commerce.StringExtensions.EMPTY) + " " +
                    (this._labelText() || Commerce.StringExtensions.EMPTY));
            };
            TextInputDialog.prototype.setTextContent = function (updatedContent) {
                this._textContent(updatedContent);
            };
            TextInputDialog.prototype.onHidden = function () {
                if (this._scannerEnabled) {
                    Commerce.Peripherals.instance.barcodeScanner.disableAsync();
                }
                _super.prototype.onHidden.call(this);
            };
            TextInputDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Commerce.Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, this._textContent());
                        break;
                    case Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            TextInputDialog.DEFAULT_ROWS_NUMBER = 5;
            return TextInputDialog;
        }(Controls.ModalDialog));
        Controls.TextInputDialog = TextInputDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var NumberInputDialog = (function (_super) {
            __extends(NumberInputDialog, _super);
            function NumberInputDialog() {
                var _this = _super.call(this) || this;
                _this._numberContent = ko.observable("0");
                _this._minValue = Number.MIN_VALUE;
                _this._maxValue = Number.MAX_VALUE;
                _this._label = ko.observable(Commerce.StringExtensions.EMPTY);
                _this._decimalPrecision = ko.observable(0);
                return _this;
            }
            Object.defineProperty(NumberInputDialog.prototype, "label", {
                get: function () {
                    return this._label;
                },
                enumerable: true,
                configurable: true
            });
            NumberInputDialog.prototype.onShowing = function (dialogState) {
                if (dialogState) {
                    this._numberContent(dialogState.content.toString());
                    if (Commerce.ObjectExtensions.isNumber(dialogState.min) && !isNaN(dialogState.min)) {
                        this._minValue = dialogState.min;
                    }
                    if (Commerce.ObjectExtensions.isNumber(dialogState.max) && !isNaN(dialogState.max)) {
                        this._maxValue = dialogState.max;
                    }
                    if (Commerce.ObjectExtensions.isNumber(dialogState.decimalPrecision) && !isNaN(dialogState.decimalPrecision)) {
                        this._decimalPrecision(dialogState.decimalPrecision);
                    }
                }
                this.visible(true);
            };
            NumberInputDialog.prototype.onTextBoxEnterEventHandler = function () {
                this.buttonClickHandler(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
            };
            NumberInputDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            NumberInputDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Commerce.Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        var numberAsText = this._numberContent();
                        var numberAsDecimal = Commerce.NumberExtensions.parseNumber(numberAsText);
                        var errors = [];
                        if (Commerce.StringExtensions.isNullOrWhitespace(numberAsText) || isNaN(numberAsDecimal)) {
                            errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.SET_QUANTITY_NOT_A_NUMBER));
                        }
                        else if (numberAsDecimal > this._maxValue) {
                            errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.NUMBER_INPUT_VALUE_GREATER_THAN_MAXIMUM_ALLOWED));
                        }
                        else if (numberAsDecimal < this._minValue) {
                            errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.NUMBER_INPUT_VALUE_LESS_THAN_MINIMUM_ALLOWED));
                        }
                        if (Commerce.ArrayExtensions.hasElements(errors)) {
                            Commerce.NotificationHandler.displayClientErrors(errors);
                        }
                        else {
                            this.dialogResult.resolve(Commerce.DialogResult.OK, numberAsDecimal);
                        }
                        break;
                    case Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            return NumberInputDialog;
        }(Controls.ModalDialog));
        Controls.NumberInputDialog = NumberInputDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SelectDropDownDialog = (function (_super) {
            __extends(SelectDropDownDialog, _super);
            function SelectDropDownDialog() {
                var _this = _super.call(this) || this;
                _this.optionsList = ko.observableArray([]);
                _this.selectedOption = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.cancelAllowed = ko.observable(false);
                _this.okAllowed = ko.observable(false);
                _this.isCustomContentVisible = ko.observable(false);
                return _this;
            }
            SelectDropDownDialog.prototype.onShowing = function (options) {
                var optionItemsExist = false;
                var cancelAllowed = true;
                var okAllowed = true;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    if (Commerce.ArrayExtensions.hasElements(options.optionItems)) {
                        optionItemsExist = true;
                        this.optionsList(options.optionItems);
                        if (!Commerce.StringExtensions.isNullOrWhitespace(options.defaultSelectedItem) &&
                            (options.optionItems.indexOf(options.defaultSelectedItem) >= 0)) {
                            this.selectedOption(options.defaultSelectedItem);
                        }
                    }
                    cancelAllowed = Commerce.ObjectExtensions.isNullOrUndefined(options.cancelNotAllowed) ? true : !options.cancelNotAllowed;
                    var fulfillmentLineDetails = options.reasonCodesContainer;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(fulfillmentLineDetails)) {
                        this.isCustomContentVisible(true);
                        var placeholder = $(this.element).find(".customContent");
                        ko.applyBindingsToNode(placeholder[0], {
                            template: {
                                name: "FulfillmentRejectReasonDialogTemplate",
                                data: fulfillmentLineDetails
                            }
                        });
                    }
                }
                if (!optionItemsExist) {
                    okAllowed = false;
                    cancelAllowed = true;
                }
                this.okAllowed(okAllowed);
                this.cancelAllowed(cancelAllowed);
                this.visible(true);
            };
            SelectDropDownDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Commerce.Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, this.selectedOption());
                        break;
                    case Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            return SelectDropDownDialog;
        }(Controls.ModalDialog));
        Controls.SelectDropDownDialog = SelectDropDownDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var ReasonCodeDialog = (function (_super) {
            __extends(ReasonCodeDialog, _super);
            function ReasonCodeDialog() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ReasonCodeDialog.prototype.onShowing = function (context) {
                var _this = this;
                var reasonCodes = context.reasonCodes;
                if (!Commerce.ArrayExtensions.hasElements(reasonCodes)) {
                    this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                    return;
                }
                var reasonCodeLines = [];
                var asyncQueue = new Commerce.AsyncQueue();
                reasonCodes.forEach(function (reasonCode) {
                    asyncQueue.enqueue(function () {
                        return asyncQueue.cancelOn(_this.showControlForReasonCode(reasonCode, context))
                            .done(function (result) {
                            if (result.canceled) {
                                return;
                            }
                            reasonCodeLines.push(result.reasonCodeLine);
                        });
                    });
                });
                asyncQueue.run().done(function (result) {
                    if (result.canceled) {
                        _this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        return;
                    }
                    _this.dialogResult.resolve(Commerce.DialogResult.OK, reasonCodeLines);
                }).fail(function (errors) { _this.dialogResult.reject(errors); });
            };
            ReasonCodeDialog.prototype.showControlForReasonCode = function (reasonCode, context) {
                var prompt = Commerce.StringExtensions.isNullOrWhitespace(reasonCode.Prompt) ? reasonCode.ReasonCodeId : reasonCode.Prompt;
                switch (reasonCode.InputTypeValue) {
                    case Commerce.Proxy.Entities.ReasonCodeInputTypeEnum.Text:
                    case Commerce.Proxy.Entities.ReasonCodeInputTypeEnum.None:
                        return this._getTextInput(prompt, context, reasonCode);
                    case Commerce.Proxy.Entities.ReasonCodeInputTypeEnum.SubCode:
                    case Commerce.Proxy.Entities.ReasonCodeInputTypeEnum.SubCodeButtons:
                        return this._getSubcodeInput(prompt, context, reasonCode);
                    case Commerce.Proxy.Entities.ReasonCodeInputTypeEnum.Date:
                        return this._getDateInput(prompt, context, reasonCode);
                    case Commerce.Proxy.Entities.ReasonCodeInputTypeEnum.AgeLimit:
                        return this._getAgeInput(prompt, context, reasonCode);
                    case Commerce.Proxy.Entities.ReasonCodeInputTypeEnum.Numeric:
                        return this._getNumericInput(prompt, context, reasonCode);
                    case Commerce.Proxy.Entities.ReasonCodeInputTypeEnum.Item:
                    case Commerce.Proxy.Entities.ReasonCodeInputTypeEnum.Customer:
                        return this._getItemOrCustomerInput(prompt, context, reasonCode);
                    case Commerce.Proxy.Entities.ReasonCodeInputTypeEnum.Staff:
                        return this._getStaffInput(prompt, context, reasonCode);
                    case Commerce.Proxy.Entities.ReasonCodeInputTypeEnum.CompositeSubCodes:
                        return this._getCompositeSubcodesInput(prompt, context, reasonCode);
                    default:
                        var reasonCodeLine = this._createReasonCodeLine(reasonCode);
                        return Commerce.AsyncResult.createResolved({ canceled: false, reasonCodeLine: reasonCodeLine });
                }
            };
            ReasonCodeDialog.prototype._getTextInput = function (prompt, context, reasonCode) {
                var _this = this;
                var dialog = new Controls.TextInputDialog();
                var maxLength = reasonCode.MaximumLength > 0 ? reasonCode.MaximumLength : ReasonCodeDialog.DEFAULT_MAX_REASON_CODE_TEXT_INPUT_LENGTH;
                dialog.title(prompt);
                dialog.subTitle(this.subTitle());
                var textInputType = reasonCode.IsMultiLineText ? Controls.TextInputType.multiLineText : Controls.TextInputType.singleLineText;
                dialog.textInputType(textInputType);
                var reasonCodeLine = this._createReasonCodeLine(reasonCode);
                var handleResult = function (inputValue) {
                    var error;
                    if (inputValue.length < reasonCode.MinimumLength) {
                        error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.REASONCODE_LENGTH_SHORT);
                    }
                    else if (reasonCode.MaximumLength > 0 && inputValue.length > reasonCode.MaximumLength) {
                        error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.REASONCODE_LENGTH_EXCEEDED);
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(error)) {
                        return Commerce.VoidAsyncResult.createRejected([error]);
                    }
                    reasonCodeLine.Information = inputValue;
                    return _this._executePostGetReasonCodeLineTrigger(reasonCode, reasonCodeLine);
                };
                dialog.show({ content: "", maxLength: maxLength }, false);
                return context.handleDialogResult(dialog, Commerce.DialogResult.OK, handleResult)
                    .map(function (dialogResult) {
                    if (dialogResult.canceled) {
                        return { canceled: true };
                    }
                    else {
                        return { canceled: false, reasonCodeLine: reasonCodeLine };
                    }
                });
            };
            ReasonCodeDialog.prototype._getSubcodeInput = function (prompt, context, reasonCode) {
                var _this = this;
                var listItems = reasonCode.ReasonSubCodes.map(function (reasonSubCode) {
                    return reasonSubCode.Description;
                });
                var selectDialogOptions;
                var dialog = null;
                if (reasonCode.InputTypeValue === Commerce.Proxy.Entities.ReasonCodeInputTypeEnum.SubCodeButtons) {
                    dialog = new Controls.ListInputDialog();
                    selectDialogOptions = {
                        items: listItems
                    };
                }
                else {
                    dialog = new Controls.SelectDropDownDialog();
                    selectDialogOptions = {
                        optionItems: listItems
                    };
                }
                if (Commerce.Client.Entities.isIFufillmentLineDetails(context.reasonCodesContainer)) {
                    selectDialogOptions.reasonCodesContainer = context.reasonCodesContainer;
                }
                dialog.title(prompt);
                dialog.subTitle(this.subTitle());
                dialog.show(selectDialogOptions, false);
                var selectedReasonSubCode;
                var reasonCodeLine = this._createReasonCodeLine(reasonCode);
                var resultHandler = function (selectedItem) {
                    for (var itemIndex = 0; itemIndex < reasonCode.ReasonSubCodes.length; itemIndex++) {
                        if (reasonCode.ReasonSubCodes[itemIndex].Description === selectedItem) {
                            selectedReasonSubCode = reasonCode.ReasonSubCodes[itemIndex];
                            break;
                        }
                    }
                    reasonCodeLine.SubReasonCodeId = selectedReasonSubCode.SubCodeId;
                    reasonCodeLine.Information = selectedReasonSubCode.Description;
                    return _this._executePostGetReasonCodeLineTrigger(reasonCode, reasonCodeLine);
                };
                return context.handleDialogResult(dialog, Commerce.DialogResult.OK, resultHandler)
                    .map(function (dialogResult) {
                    if (dialogResult.canceled) {
                        return { canceled: true };
                    }
                    else {
                        return { canceled: false, reasonCodeLine: reasonCodeLine };
                    }
                });
            };
            ReasonCodeDialog.prototype._getDateInput = function (prompt, context, reasonCode) {
                var _this = this;
                var dateNow = new Date();
                var dialog = new Controls.DateInputDialog();
                dialog.title(prompt);
                dialog.subTitle(this.subTitle());
                var reasonCodeLine = this._createReasonCodeLine(reasonCode);
                var handleResult = function (date) {
                    reasonCodeLine.Information = date.toLocaleDateString(Commerce.Host.instance.globalization.getApplicationLanguage(), { weekday: "short", year: "numeric", month: "short", day: "numeric" });
                    return _this._executePostGetReasonCodeLineTrigger(reasonCode, reasonCodeLine);
                };
                dialog.show({ minYear: (dateNow.getFullYear() - 200), maxYear: (dateNow.getFullYear() + 200) }, false);
                return context.handleDialogResult(dialog, Commerce.DialogResult.OK, handleResult)
                    .map(function (dialogResult) {
                    if (dialogResult.canceled) {
                        return { canceled: true };
                    }
                    else {
                        return { canceled: false, reasonCodeLine: reasonCodeLine };
                    }
                });
            };
            ReasonCodeDialog.prototype._getAgeInput = function (prompt, context, reasonCode) {
                var _this = this;
                var dateNow = new Date();
                var dialog = new Controls.AskQuestionDialog();
                var year = dateNow.getFullYear();
                year = year - reasonCode.MinimumValue;
                dateNow.setFullYear(year);
                dialog.title(prompt);
                dialog.subTitle(this.subTitle());
                var reasonCodeLine = this._createReasonCodeLine(reasonCode);
                var handleResult = function (inputValue) {
                    reasonCodeLine.Information = inputValue;
                    return _this._executePostGetReasonCodeLineTrigger(reasonCode, reasonCodeLine);
                };
                dialog.show({
                    question: Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_5922"), reasonCode.MinimumValue, dateNow.toLocaleDateString())
                }, false);
                return context.handleDialogResult(dialog, Commerce.DialogResult.Yes, handleResult)
                    .map(function (dialogResult) {
                    if (dialogResult.canceled) {
                        return { canceled: true };
                    }
                    else {
                        return { canceled: false, reasonCodeLine: reasonCodeLine };
                    }
                });
            };
            ReasonCodeDialog.prototype._getNumericInput = function (prompt, context, reasonCode) {
                var _this = this;
                var dialog = new Controls.NumberInputDialog();
                dialog.title(prompt);
                dialog.subTitle(this.subTitle());
                var minValue = reasonCode.MinimumValue;
                var maxValue = reasonCode.MaximumValue;
                if (Commerce.NumberExtensions.isNullNaNOrZero(minValue) && Commerce.NumberExtensions.isNullNaNOrZero(maxValue)) {
                    minValue = Commerce.NumberExtensions.DECIMAL_MIN_VALUE;
                    maxValue = Commerce.NumberExtensions.DECIMAL_MAX_VALUE;
                }
                var reasonCodeLine = this._createReasonCodeLine(reasonCode);
                var handleResult = function (inputValue) {
                    reasonCodeLine.Information = inputValue.toString(10);
                    return _this._executePostGetReasonCodeLineTrigger(reasonCode, reasonCodeLine);
                };
                dialog.show({ content: 0, min: minValue, max: maxValue, decimalPrecision: Commerce.NumberExtensions.DEFAULT_DECIMAL_PRECISION }, false);
                return context.handleDialogResult(dialog, Commerce.DialogResult.OK, handleResult)
                    .map(function (dialogResult) {
                    if (dialogResult.canceled) {
                        return dialogResult;
                    }
                    else {
                        return { canceled: false, reasonCodeLine: reasonCodeLine };
                    }
                });
            };
            ReasonCodeDialog.prototype._getItemOrCustomerInput = function (prompt, context, reasonCode) {
                var _this = this;
                var previousViewName = Commerce.ViewModelAdapter.getCurrentViewName();
                var asyncQueue = new Commerce.AsyncQueue();
                var maxLength = reasonCode.MaximumLength > 0 ? reasonCode.MaximumLength : ReasonCodeDialog.DEFAULT_MAX_REASON_CODE_TEXT_INPUT_LENGTH;
                var reasonCodeLine = this._createReasonCodeLine(reasonCode);
                asyncQueue.enqueue(function () {
                    var dialog = new Controls.TextInputDialog();
                    dialog.title(prompt);
                    dialog.subTitle(_this.subTitle());
                    var handleResult = function (inputValue) {
                        return Commerce.AsyncResult.createResolved({ canceled: false });
                    };
                    dialog.show({ content: "", maxLength: maxLength }, false);
                    return asyncQueue.cancelOn(context.handleDialogResult(dialog, Commerce.DialogResult.OK, handleResult));
                }).enqueue(function (dialogResult) {
                    var selectionResult = new Commerce.AsyncResult();
                    var updateReasonCodeLineAndNavigateBack = function (information) {
                        var informationProvided = !Commerce.ObjectExtensions.isNullOrUndefined(information);
                        if (!informationProvided && reasonCode.InputRequired) {
                            selectionResult.resolve({ canceled: true });
                            return;
                        }
                        if (Commerce.ViewModelAdapter.isInView("SearchView")) {
                            Commerce.ViewModelAdapter.navigateBack();
                        }
                        else {
                            Commerce.ViewModelAdapter.navigate("CartView", { navigationSource: previousViewName });
                        }
                        selectionResult.resolve({ canceled: false });
                    };
                    var options = {
                        searchText: dialogResult.data,
                        selectionMode: undefined,
                        searchEntity: undefined,
                        correlationId: Commerce.StringExtensions.EMPTY
                    };
                    if (reasonCode.InputTypeValue === Commerce.Proxy.Entities.ReasonCodeInputTypeEnum.Item) {
                        options.selectionMode = Commerce.ViewModels.SearchViewSelectionMode.Product;
                        var productSelectionHandler = new Commerce.CancelableSelectionHandler(function (result) {
                            updateReasonCodeLineAndNavigateBack(result.simpleProduct.ItemId);
                        }, function () {
                            updateReasonCodeLineAndNavigateBack(undefined);
                        }, function (selectedProduct) {
                            reasonCodeLine.Information = selectedProduct.simpleProduct.ItemId;
                            return _this._executePostGetReasonCodeLineTrigger(reasonCode, reasonCodeLine);
                        });
                        options.productSelectionOptions = {
                            productSelectionHandler: productSelectionHandler,
                            allowKitMasterSelection: true,
                            allowChangeStoreAndCatalog: false
                        };
                        options.searchEntity = Commerce.ViewModels.SearchViewSearchEntity.Product;
                    }
                    else {
                        options.selectionMode = Commerce.ViewModels.SearchViewSelectionMode.Customer;
                        var customerSelectionHandler = new Commerce.CancelableSelectionHandler(function (customer) {
                            updateReasonCodeLineAndNavigateBack(customer.AccountNumber);
                        }, function () {
                            updateReasonCodeLineAndNavigateBack(undefined);
                        }, function (selectedCustomer) {
                            reasonCodeLine.Information = selectedCustomer.AccountNumber;
                            return _this._executePostGetReasonCodeLineTrigger(reasonCode, reasonCodeLine);
                        });
                        options.customerSelectionOptions = {
                            customerSelectionHandler: customerSelectionHandler,
                            isOnlySelectionAllowed: true
                        };
                        options.searchEntity = Commerce.ViewModels.SearchViewSearchEntity.Customer;
                    }
                    Commerce.ViewModelAdapter.navigate("SearchView", options);
                    return asyncQueue.cancelOn(selectionResult);
                });
                return asyncQueue.run().map(function (queueResult) {
                    if (queueResult.canceled) {
                        return queueResult;
                    }
                    else {
                        return { canceled: false, reasonCodeLine: reasonCodeLine };
                    }
                });
            };
            ReasonCodeDialog.prototype._getStaffInput = function (prompt, context, reasonCode) {
                var _this = this;
                var reasonCodeLine = this._createReasonCodeLine(reasonCode);
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return Commerce.ApplicationContext.Instance.storeEmployeeListAsync.value;
                }).enqueue(function (operators) {
                    var listItems = operators.map(function (employee) {
                        return employee.Name;
                    });
                    var dialog = new Controls.SelectDropDownDialog();
                    dialog.title(prompt);
                    dialog.subTitle(_this.subTitle());
                    var selectDropDownDialogOptions = {
                        optionItems: listItems
                    };
                    var resultHandler = function (selectedValue) {
                        for (var itemIndex = 0; itemIndex < operators.length; itemIndex++) {
                            if (operators[itemIndex].Name === selectedValue) {
                                reasonCodeLine.Information = operators[itemIndex].StaffId;
                                break;
                            }
                        }
                        return _this._executePostGetReasonCodeLineTrigger(reasonCode, reasonCodeLine);
                    };
                    dialog.show(selectDropDownDialogOptions, false);
                    return context.handleDialogResult(dialog, Commerce.DialogResult.OK, resultHandler);
                });
                return asyncQueue.run().map(function (queueResult) {
                    if (queueResult.canceled) {
                        return queueResult;
                    }
                    else {
                        return { canceled: false, reasonCodeLine: reasonCodeLine };
                    }
                });
            };
            ReasonCodeDialog.prototype._getCompositeSubcodesInput = function (prompt, context, reasonCode) {
                var _this = this;
                var listItems = reasonCode.ReasonSubCodes.map(function (subCode) {
                    return subCode.Description;
                });
                var dialog = new Controls.SelectDropDownDialog();
                dialog.title(prompt);
                dialog.subTitle(this.subTitle());
                var selectDropDownDialogOptions = {
                    optionItems: listItems
                };
                var reasonCodeLine = this._createReasonCodeLine(reasonCode);
                var handleResult = function (selectedValue) {
                    var selectedSubCode;
                    for (var itemIndex = 0; itemIndex < reasonCode.ReasonSubCodes.length; itemIndex++) {
                        if (reasonCode.ReasonSubCodes[itemIndex].Description === selectedValue) {
                            selectedSubCode = reasonCode.ReasonSubCodes[itemIndex];
                            break;
                        }
                    }
                    reasonCodeLine.Information = selectedSubCode.Description;
                    reasonCodeLine.ReasonCodeId = selectedSubCode.SubCodeId;
                    return _this._executePostGetReasonCodeLineTrigger(reasonCode, reasonCodeLine);
                };
                dialog.show(selectDropDownDialogOptions, false);
                return context.handleDialogResult(dialog, Commerce.DialogResult.OK, handleResult)
                    .map(function (dialogResult) {
                    if (dialogResult.canceled) {
                        return dialogResult;
                    }
                    else {
                        return { canceled: false, reasonCodeLine: reasonCodeLine };
                    }
                });
            };
            ReasonCodeDialog.prototype._createReasonCodeLine = function (reasonCode) {
                return {
                    ReasonCodeId: reasonCode.ReasonCodeId,
                    InputTypeValue: reasonCode.InputTypeValue,
                    SubReasonCodeId: "",
                    Information: ""
                };
            };
            ReasonCodeDialog.prototype._executePostGetReasonCodeLineTrigger = function (reasonCode, reasonCodeLine) {
                var triggerOptions = {
                    reasonCode: Commerce.ObjectExtensions.clone(reasonCode),
                    reasonCodeLine: Commerce.ObjectExtensions.clone(reasonCodeLine)
                };
                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PostGetReasonCodeLine, triggerOptions);
            };
            ReasonCodeDialog.DEFAULT_MAX_REASON_CODE_TEXT_INPUT_LENGTH = 100;
            return ReasonCodeDialog;
        }(Controls.ModalDialog));
        Controls.ReasonCodeDialog = ReasonCodeDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SelectSalesLinesDialog = (function (_super) {
            __extends(SelectSalesLinesDialog, _super);
            function SelectSalesLinesDialog(options) {
                var _this = _super.call(this) || this;
                _this.salesLinesForDisplay = ko.observableArray([]);
                _this.selectedSalesLines = ko.observableArray([]);
                _this.noSalesLinesSelected = ko.computed(function () {
                    return !Commerce.ArrayExtensions.hasElements(_this.selectedSalesLines());
                }, _this);
                _this._selectionMode = options.selectionMode;
                return _this;
            }
            Object.defineProperty(SelectSalesLinesDialog.prototype, "selectionMode", {
                get: function () {
                    return this._selectionMode;
                },
                enumerable: true,
                configurable: true
            });
            SelectSalesLinesDialog.prototype.buttonClickHandler = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, { selectedSalesLines: this.selectedSalesLines() });
                        break;
                }
            };
            SelectSalesLinesDialog.prototype.onShowing = function (dialogState) {
                var title = dialogState.title || Commerce.StringExtensions.EMPTY;
                this.title(title);
                var subtitle = dialogState.subtitle || Commerce.StringExtensions.EMPTY;
                this.subTitle(subtitle);
                this.salesLinesForDisplay(dialogState.salesLines);
                this.visible(true);
            };
            SelectSalesLinesDialog.prototype.afterShow = function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.visible) || !this.visible()) {
                    return;
                }
                var dataListViewModel;
                var listElement = document.getElementById(SelectSalesLinesDialog.SALES_LINES_DATA_LIST_ELEMENT_ID);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(listElement) && !Commerce.ObjectExtensions.isNullOrUndefined(listElement.dataListViewModel)) {
                    dataListViewModel = listElement.dataListViewModel;
                }
                if (dataListViewModel instanceof Controls.DataList.DataListViewModel) {
                    dataListViewModel.refreshList();
                }
            };
            SelectSalesLinesDialog.SALES_LINES_DATA_LIST_ELEMENT_ID = "salesLinesDataList";
            return SelectSalesLinesDialog;
        }(Controls.ModalDialog));
        Controls.SelectSalesLinesDialog = SelectSalesLinesDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SetQuantityDialog = (function (_super) {
            __extends(SetQuantityDialog, _super);
            function SetQuantityDialog() {
                var _this = _super.call(this) || this;
                _this._backButtonVisible = ko.observable(false);
                _this._itemQuantity = ko.observable("0");
                _this._unitOfMeasureDescription = ko.observable("");
                _this._unitOfMeasureDecimalPrecision = ko.observable(0);
                _this._unitOfMeasureVisible = ko.observable(false);
                _this._isOKButtonDisabled = ko.computed(function () {
                    var quantity = Commerce.NumberExtensions.parseNumber(_this._itemQuantity());
                    return isNaN(quantity);
                });
                _this._cartLines = [];
                _this._cartLineIndex = -1;
                _this._quantities = [];
                return _this;
            }
            SetQuantityDialog.prototype.onShowing = function (dialogState) {
                dialogState = dialogState || { cartLines: undefined };
                if (!Commerce.ArrayExtensions.hasElements(dialogState.cartLines)) {
                    this.cancelDialog();
                    return;
                }
                this._cartLines = dialogState.cartLines;
                this.showItem(0);
                this.visible(true);
            };
            SetQuantityDialog.prototype.onButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.cancelDialog();
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.onOkButtonClick();
                        break;
                }
            };
            SetQuantityDialog.prototype.onTextBoxEnterEventHandler = function () {
                if (!this._isOKButtonDisabled()) {
                    this.onButtonClick(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
                }
            };
            SetQuantityDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            SetQuantityDialog.prototype.itemGoBack = function (element) {
                if (this._cartLineIndex > 0) {
                    this.showItem(this._cartLineIndex - 1);
                }
            };
            SetQuantityDialog.prototype.getTitleString = function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._cartLines) || (this._cartLines.length <= 1)) {
                    return Commerce.ViewModelAdapter.getResourceString("string_5300");
                }
                var index = this._cartLineIndex + 1;
                return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_5301"), index, this._cartLines.length);
            };
            SetQuantityDialog.prototype.showItem = function (itemIndex) {
                this._cartLineIndex = itemIndex;
                var cartLine = this._cartLines[itemIndex];
                this.title(this.getTitleString());
                this.subTitle(Commerce.CartLineHelper.getProductName(cartLine));
                this._unitOfMeasureDescription(Commerce.Formatters.CartLineUnitOfMeasureFormat(cartLine));
                this._unitOfMeasureDecimalPrecision(Commerce.UnitOfMeasureHelper.getDecimalPrecision(cartLine.UnitOfMeasureSymbol));
                this._unitOfMeasureVisible(!Commerce.StringExtensions.isNullOrWhitespace(cartLine.UnitOfMeasureSymbol));
                this._itemQuantity(Commerce.NumberExtensions.formatNumber(Math.abs(cartLine.Quantity), this._unitOfMeasureDecimalPrecision()));
                this._backButtonVisible(itemIndex > 0);
                this.indeterminateWaitVisible(false);
            };
            SetQuantityDialog.prototype.onOkButtonClick = function () {
                this._quantities[this._cartLineIndex] = Commerce.NumberExtensions.parseNumber(this._itemQuantity());
                var nextItemIndex = this._cartLineIndex + 1;
                if (nextItemIndex >= this._cartLines.length) {
                    this.allQuantitiesSet();
                    return;
                }
                this.showItem(nextItemIndex);
            };
            SetQuantityDialog.prototype.allQuantitiesSet = function () {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { quantities: this._quantities });
            };
            SetQuantityDialog.prototype.cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return SetQuantityDialog;
        }(Controls.ModalDialog));
        Controls.SetQuantityDialog = SetQuantityDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var TaxOverrideDialog = (function (_super) {
            __extends(TaxOverrideDialog, _super);
            function TaxOverrideDialog() {
                var _this = _super.call(this) || this;
                _this.title(Commerce.ViewModelAdapter.getResourceString("string_4130"));
                _this.taxOverrides = ko.observableArray([]);
                return _this;
            }
            TaxOverrideDialog.prototype.onShowing = function (dialogState) {
                this.overrideType = dialogState.overrideType;
                this.taxOverrides(dialogState.taxOverrides);
                this.visible(true);
            };
            TaxOverrideDialog.prototype.itemInvokedHandler = function (eventArgs) {
                var override = eventArgs.data;
                this.dialogResult.resolve(Commerce.DialogResult.OK, override);
            };
            TaxOverrideDialog.prototype.cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return TaxOverrideDialog;
        }(Controls.ModalDialog));
        Controls.TaxOverrideDialog = TaxOverrideDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var UnitOfMeasureDialog = (function (_super) {
            __extends(UnitOfMeasureDialog, _super);
            function UnitOfMeasureDialog() {
                var _this = _super.call(this) || this;
                _this._backButtonVisible = ko.observable(false);
                _this._unitsOfMeasureForProduct = ko.observableArray([]);
                _this._cartLinesWithUnitOfMeasureOptions = [];
                _this._cartLineIndex = -1;
                _this._unitsOfMeasure = [];
                return _this;
            }
            UnitOfMeasureDialog.prototype.onShowing = function (dialogState) {
                dialogState = dialogState || { cartLinesWithUnitOfMeasureOptions: undefined };
                if (!Commerce.ArrayExtensions.hasElements(dialogState.cartLinesWithUnitOfMeasureOptions)) {
                    this.cancelDialog();
                    return;
                }
                this._cartLinesWithUnitOfMeasureOptions = dialogState.cartLinesWithUnitOfMeasureOptions;
                this.showItem(0);
                this.visible(true);
            };
            UnitOfMeasureDialog.prototype.setUnitOfMeasureDialogButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.cancelDialog();
                        break;
                }
            };
            UnitOfMeasureDialog.prototype.unitOfMeasureInvokedHandler = function (event) {
                this._unitsOfMeasure[this._cartLineIndex] = event.data;
                var nextItemIndex = this._cartLineIndex + 1;
                if (nextItemIndex >= this._cartLinesWithUnitOfMeasureOptions.length) {
                    this.allUnitOfMeasuresSet();
                    return true;
                }
                this.showItem(nextItemIndex);
                return true;
            };
            UnitOfMeasureDialog.prototype.itemGoBack = function (element) {
                if (this._cartLineIndex > 0) {
                    this.showItem(this._cartLineIndex - 1);
                }
            };
            UnitOfMeasureDialog.prototype.getTitleString = function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._cartLinesWithUnitOfMeasureOptions) || (this._cartLinesWithUnitOfMeasureOptions.length <= 1)) {
                    return Commerce.ViewModelAdapter.getResourceString("string_3200");
                }
                var index = this._cartLineIndex + 1;
                return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_3201"), index, this._cartLinesWithUnitOfMeasureOptions.length);
            };
            UnitOfMeasureDialog.prototype.cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            UnitOfMeasureDialog.prototype.showItem = function (itemIndex) {
                this._cartLineIndex = itemIndex;
                var cartLineWithUofMOptions = this._cartLinesWithUnitOfMeasureOptions[itemIndex];
                this.title(this.getTitleString());
                this.subTitle(Commerce.CartLineHelper.getProductName(cartLineWithUofMOptions.cartLine));
                var unitsOfMeasure = cartLineWithUofMOptions.unitOfMeasureOptions;
                this._unitsOfMeasureForProduct(unitsOfMeasure);
                this._backButtonVisible(itemIndex > 0);
                this.title(this.getTitleString());
                this.indeterminateWaitVisible(false);
            };
            UnitOfMeasureDialog.prototype.allUnitOfMeasuresSet = function () {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { selectedUnitsOfMeasure: this._unitsOfMeasure });
            };
            return UnitOfMeasureDialog;
        }(Controls.ModalDialog));
        Controls.UnitOfMeasureDialog = UnitOfMeasureDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var WeighItemDialog = (function (_super) {
            __extends(WeighItemDialog, _super);
            function WeighItemDialog() {
                var _this = _super.call(this) || this;
                _this._backButtonVisible = ko.observable(false);
                _this._itemWeight = ko.observable("0");
                _this._unitOfMeasureDescription = ko.observable("");
                _this._unitOfMeasureDecimalPrecision = ko.observable(0);
                _this._unitOfMeasureVisible = ko.observable(false);
                _this._isOKButtonDisabled = ko.computed(function () {
                    var weight = Commerce.NumberExtensions.parseNumber(_this._itemWeight());
                    return Commerce.NumberExtensions.isNullNaNOrZero(weight);
                });
                _this._cartLines = [];
                _this._cartLineIndex = -1;
                _this._weights = [];
                _this._scaleSectionVisible = ko.observable(false);
                _this._weightSectionVisible = ko.observable(false);
                return _this;
            }
            WeighItemDialog.prototype.onShowing = function (dialogState) {
                dialogState = dialogState || { cartLines: undefined };
                if (!Commerce.ArrayExtensions.hasElements(dialogState.cartLines)) {
                    this.cancelDialog();
                    return;
                }
                this._cartLines = dialogState.cartLines;
                this.showItem(0);
                this.visible(true);
                this.checkScale();
            };
            WeighItemDialog.prototype.onButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.cancelDialog();
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.onOkButtonClick();
                        break;
                }
            };
            WeighItemDialog.prototype.onTextBoxEnterEventHandler = function () {
                if (!this._isOKButtonDisabled()) {
                    this.onButtonClick(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
                }
            };
            WeighItemDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            WeighItemDialog.prototype.itemGoBack = function (element) {
                if (this._cartLineIndex > 0) {
                    this.showItem(this._cartLineIndex - 1);
                }
            };
            WeighItemDialog.prototype.getTitleString = function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._cartLines) || (this._cartLines.length <= 1)) {
                    return Commerce.ViewModelAdapter.getResourceString("string_5319");
                }
                var index = this._cartLineIndex + 1;
                return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_5320"), index, this._cartLines.length);
            };
            WeighItemDialog.prototype.showControlError = function (error) {
                this.dialogResult.reject([error]);
                this.hide();
            };
            WeighItemDialog.prototype.showItem = function (itemIndex) {
                this._cartLineIndex = itemIndex;
                var cartLine = this._cartLines[itemIndex];
                this.title(this.getTitleString());
                this.subTitle(Commerce.CartLineHelper.getProductName(cartLine));
                this._unitOfMeasureDescription(cartLine.UnitOfMeasureSymbol);
                this._unitOfMeasureDecimalPrecision(Commerce.UnitOfMeasureHelper.getDecimalPrecision(cartLine.UnitOfMeasureSymbol));
                this._unitOfMeasureVisible(!Commerce.StringExtensions.isNullOrWhitespace(cartLine.UnitOfMeasureSymbol));
                this._itemWeight(Commerce.NumberExtensions.formatNumber(Math.abs(cartLine.Quantity), this._unitOfMeasureDecimalPrecision()));
                this._backButtonVisible(itemIndex > 0);
                this._weightSectionVisible(true);
                this._scaleSectionVisible(false);
                this.indeterminateWaitVisible(false);
            };
            WeighItemDialog.prototype.showScaleDialog = function () {
                this.indeterminateWaitVisible(false);
                this._scaleSectionVisible(true);
                this._weightSectionVisible(false);
                this.visible(true);
            };
            WeighItemDialog.prototype.checkScale = function () {
                var _this = this;
                var hardwareProfile = Commerce.ApplicationContext.Instance.hardwareProfile;
                if (hardwareProfile.ScaleDeviceTypeValue !== Commerce.Proxy.Entities.PeripheralDeviceType.None) {
                    this.showScaleDialog();
                    Commerce.Peripherals.instance.scale.read(this)
                        .done(function (result) {
                        if (result > 0) {
                            _this.focus();
                            _this._itemWeight(Commerce.NumberExtensions.formatNumber(result / 1000, _this._unitOfMeasureDecimalPrecision()));
                            _this.onOkButtonClick();
                        }
                        else if (hardwareProfile.ScaleManualInputAllowed) {
                            _this.showManualInput();
                        }
                        else {
                            _this.showControlError(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.SCALE_RETURNED_ZERO_WITHOUT_MANUAL_ENTRY, true));
                        }
                    }).fail(function (errors) {
                        var isCalibrationError = Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_SCALE_CALIBRATIONERROR);
                        if (!isCalibrationError && hardwareProfile.ScaleManualInputAllowed) {
                            _this.showManualInput();
                        }
                        else {
                            _this.dialogResult.reject(errors);
                            _this.hide();
                        }
                    });
                }
                else if (hardwareProfile.ScaleManualInputAllowed) {
                    this.showManualInput();
                }
                else {
                    this.showControlError(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.SCALE_UNSPECIFIED_WITHOUT_MANUAL_ENTRY, true));
                }
            };
            WeighItemDialog.prototype.showManualInput = function () {
                this.showItem(0);
                this.focus();
            };
            WeighItemDialog.prototype.onOkButtonClick = function () {
                this._weights[this._cartLineIndex] = Commerce.NumberExtensions.parseNumber(this._itemWeight());
                var nextItemIndex = this._cartLineIndex + 1;
                if (nextItemIndex >= this._cartLines.length) {
                    this.allQuantitiesSet();
                    return;
                }
                this.showItem(nextItemIndex);
            };
            WeighItemDialog.prototype.allQuantitiesSet = function () {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { weights: this._weights });
            };
            WeighItemDialog.prototype.cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return WeighItemDialog;
        }(Controls.ModalDialog));
        Controls.WeighItemDialog = WeighItemDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var GetCashManagementTransactionAmountDialog = (function (_super) {
            __extends(GetCashManagementTransactionAmountDialog, _super);
            function GetCashManagementTransactionAmountDialog(options) {
                var _this = _super.call(this) || this;
                _this.title(options.title);
                _this.primaryText = Commerce.ViewModelAdapter.getResourceString("string_4028");
                _this.secondaryText = Commerce.ViewModelAdapter.getResourceString("string_30106"),
                    _this.amountContent = ko.observable("");
                return _this;
            }
            GetCashManagementTransactionAmountDialog.prototype.onShowing = function () {
                this.visible(true);
            };
            GetCashManagementTransactionAmountDialog.prototype.onTextBoxEnterEventHandler = function () {
                this.buttonClickHandler(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
            };
            GetCashManagementTransactionAmountDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Close);
            };
            GetCashManagementTransactionAmountDialog.prototype.countTenderButtonClickHandler = function () {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { tenderCountingRequired: true });
            };
            GetCashManagementTransactionAmountDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Commerce.Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        var amount = Commerce.NumberExtensions.parseNumber(this.amountContent());
                        if (!Commerce.Helpers.CurrencyHelper.isValidAmount(amount)) {
                            Commerce.NotificationHandler.displayErrorMessage("string_5725");
                            return;
                        }
                        this.dialogResult.resolve(Commerce.DialogResult.OK, { amount: amount, tenderCountingRequired: false });
                        break;
                    case Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            return GetCashManagementTransactionAmountDialog;
        }(Controls.ModalDialog));
        Controls.GetCashManagementTransactionAmountDialog = GetCashManagementTransactionAmountDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var GetCashManagementTransactionDetailsDialog = (function (_super) {
            __extends(GetCashManagementTransactionDetailsDialog, _super);
            function GetCashManagementTransactionDetailsDialog(options) {
                var _this = _super.call(this) || this;
                _this.title(options.title);
                _this._correlationId = options.correlationId;
                _this.okButtonLabel = Commerce.ViewModelAdapter.getResourceString("string_75");
                _this.cancelButtonLabel = Commerce.ViewModelAdapter.getResourceString("string_76");
                var viewModelOptions = {
                    transactionContext: options.transactionContext,
                    transactionType: options.transactionType,
                    amount: options.amount,
                    contextShift: options.contextShift,
                    contextStoreSafe: options.contextStoreSafe,
                    createFromAvailableEntry: options.createFromAvailableEntry,
                    selectedAvailableEntry: options.selectedAvailableEntry,
                    availableStoreSafes: options.availableStoreSafes,
                    availableShifts: options.availableShifts
                };
                _this.viewModel = new Commerce.ViewModels.GetCashManagementTransactionDetailsViewModel(_this.createViewModelContext(), viewModelOptions);
                _this.sourceIconCssClass = ko.computed(function () {
                    var cssClass = Commerce.StringExtensions.EMPTY;
                    if (_this.viewModel.sourceType() === Commerce.Proxy.Entities.CashManagementTransactionContext.Safe) {
                        cssClass = "iconSafe icon-20x20";
                    }
                    else if (_this.viewModel.sourceType() === Commerce.Proxy.Entities.CashManagementTransactionContext.Shift) {
                        cssClass = "iconCashDrawer icon-20x20";
                    }
                    cssClass += _this.viewModel.isSourceLocked() ? Commerce.StringExtensions.EMPTY : " accentColor";
                    return cssClass;
                }, _this);
                _this.destinationIconCssClass = ko.computed(function () {
                    var cssClass = Commerce.StringExtensions.EMPTY;
                    if (_this.viewModel.destinationType() === Commerce.Proxy.Entities.CashManagementTransactionContext.Safe) {
                        cssClass = "iconSafe icon-20x20";
                    }
                    else if (_this.viewModel.destinationType() === Commerce.Proxy.Entities.CashManagementTransactionContext.Shift) {
                        cssClass = "iconCashDrawer icon-20x20";
                    }
                    cssClass += _this.viewModel.isDestinationLocked() ? " secondaryFontColor" : " accentColor";
                    return cssClass;
                }, _this);
                return _this;
            }
            GetCashManagementTransactionDetailsDialog.prototype.onShowing = function () {
                this.visible(true);
            };
            GetCashManagementTransactionDetailsDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, {
                            sourceShift: this.viewModel.selectedSourceShift(),
                            destinationShift: this.viewModel.selectedDestinationShift(),
                            sourceStoreSafe: this.viewModel.selectedSourceStoreSafe(),
                            destinationStoresafe: this.viewModel.selectedDestinationStoreSafe(),
                            notes: this.viewModel.notes(),
                            amount: this.viewModel.amount
                        });
                        break;
                }
            };
            GetCashManagementTransactionDetailsDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Close);
            };
            GetCashManagementTransactionDetailsDialog.prototype.sourceClickHandler = function () {
                if (!this.viewModel.isSourceLocked()) {
                    this.viewModel.selectSourceAsync(this._correlationId);
                }
            };
            GetCashManagementTransactionDetailsDialog.prototype.destinationClickHandler = function () {
                if (!this.viewModel.isDestinationLocked()) {
                    this.viewModel.selectDestinationAsync(this._correlationId);
                }
            };
            return GetCashManagementTransactionDetailsDialog;
        }(Controls.ModalDialog));
        Controls.GetCashManagementTransactionDetailsDialog = GetCashManagementTransactionDetailsDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var GetCashManagementTransactionSourceDialog = (function (_super) {
            __extends(GetCashManagementTransactionSourceDialog, _super);
            function GetCashManagementTransactionSourceDialog(options) {
                var _this = _super.call(this) || this;
                _this.title(options.title);
                _this.cancelButtonLabel = Commerce.ViewModelAdapter.getResourceString("string_76");
                if (Commerce.ExtensibleEnumerations.ExtensibleTransactionType.FloatEntry.equals(options.transactionType)
                    || Commerce.ExtensibleEnumerations.ExtensibleTransactionType.StartingAmount.equals(options.transactionType)) {
                    _this.newTranscationIconCssClass = "iconAddTo icon-20x20 accentColor";
                }
                else if (Commerce.ExtensibleEnumerations.ExtensibleTransactionType.RemoveTender.equals(options.transactionType)
                    || Commerce.ExtensibleEnumerations.ExtensibleTransactionType.SafeDrop.equals(options.transactionType)
                    || Commerce.ExtensibleEnumerations.ExtensibleTransactionType.BankDrop.equals(options.transactionType)) {
                    _this.newTranscationIconCssClass = "iconRemoveFrom icon-20x20 accentColor";
                }
                var viewModelOptions = {
                    transactionType: options.transactionType,
                    availableEntries: options.availableEntries,
                    allEmployees: options.allEmployees,
                    storeSafes: options.storeSafes
                };
                _this.viewModel = new Commerce.ViewModels.GetCashManagementTransactionSourceViewModel(_this.createViewModelContext(), viewModelOptions);
                return _this;
            }
            GetCashManagementTransactionSourceDialog.prototype.onShowing = function () {
                this.viewModel.getAvailableEntriesForDisplay();
                this.visible(true);
            };
            GetCashManagementTransactionSourceDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            GetCashManagementTransactionSourceDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Close);
            };
            GetCashManagementTransactionSourceDialog.prototype.newCashManagementOperationButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.OK, {
                    createFromAvailableEntry: false
                });
            };
            GetCashManagementTransactionSourceDialog.prototype.availableEntryClickHandler = function (transaction) {
                this.dialogResult.resolve(Commerce.DialogResult.OK, {
                    createFromAvailableEntry: true,
                    selectedAvailableEntry: transaction
                });
            };
            return GetCashManagementTransactionSourceDialog;
        }(Controls.ModalDialog));
        Controls.GetCashManagementTransactionSourceDialog = GetCashManagementTransactionSourceDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SelectCashManagementTransactionEndpointDialog = (function (_super) {
            __extends(SelectCashManagementTransactionEndpointDialog, _super);
            function SelectCashManagementTransactionEndpointDialog(options) {
                var _this = _super.call(this) || this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options.preSelectedShift) &&
                    !Commerce.ObjectExtensions.isNullOrUndefined(options.preSelectedStoreSafe)) {
                    throw new Error("Invalid options passed to constructor of ISelectCashManagementTransactionEndpointDialogState: "
                        + "Both 'preSelectedShift' and 'preSelectedStoreSafe' can't be supplied");
                }
                _this.title(options.title);
                _this.subTitle(options.subTitle);
                _this.cancelButtonLabel = Commerce.ViewModelAdapter.getResourceString("string_76");
                _this.storeSafesForDisplay = [];
                if (Commerce.ArrayExtensions.hasElements(options.storeSafes)) {
                    _this.storeSafesForDisplay = options.storeSafes.map(function (storeSafe) {
                        return {
                            storeSafe: storeSafe,
                            safeNumberForDisplay: Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_30111"), storeSafe.SafeNumber),
                            isPreSelected: !Commerce.ObjectExtensions.isNullOrUndefined(options.preSelectedStoreSafe)
                                && options.preSelectedStoreSafe.SafeNumber === storeSafe.SafeNumber
                        };
                    });
                }
                _this.shiftsForDisplay = [];
                if (Commerce.ArrayExtensions.hasElements(options.shifts)) {
                    _this.shiftsForDisplay = options.shifts.map(function (shift) {
                        return {
                            shift: shift,
                            shiftIdForDisplay: Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_30110"), shift.ShiftId),
                            isPreSelected: !Commerce.ObjectExtensions.isNullOrUndefined(options.preSelectedShift)
                                && options.preSelectedShift.ShiftId === shift.ShiftId
                                && options.preSelectedShift.ShiftTerminalId === shift.TerminalId
                        };
                    });
                }
                return _this;
            }
            SelectCashManagementTransactionEndpointDialog.prototype.onShowing = function () {
                this.visible(true);
            };
            SelectCashManagementTransactionEndpointDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            SelectCashManagementTransactionEndpointDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Close);
            };
            SelectCashManagementTransactionEndpointDialog.prototype.selectStoreSafeHandler = function (storeSafe) {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { selectedStoreSafe: storeSafe });
            };
            SelectCashManagementTransactionEndpointDialog.prototype.selectShiftHandler = function (shift) {
                this.dialogResult.resolve(Commerce.DialogResult.OK, {
                    selectedShift: {
                        ShiftTerminalId: shift.TerminalId,
                        ShiftId: shift.ShiftId,
                        Store: shift.StoreId
                    }
                });
            };
            return SelectCashManagementTransactionEndpointDialog;
        }(Controls.ModalDialog));
        Controls.SelectCashManagementTransactionEndpointDialog = SelectCashManagementTransactionEndpointDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var CustomerContactInfoDialog = (function (_super) {
            __extends(CustomerContactInfoDialog, _super);
            function CustomerContactInfoDialog() {
                var _this = _super.call(this) || this;
                _this.dialogTitle = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.primaryCheckboxLabel = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.locator = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.isPrimary = ko.observable(false);
                _this.marketingOptIn = ko.observable(false);
                _this.locatorInputLabel = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.contactInfoType = ko.observable(null);
                _this.isReceipt = ko.observable(false);
                _this.okButtonDisabled = ko.computed(function () {
                    if (_this.contactInfoType() === Commerce.Proxy.Entities.ContactInfoType.Email) {
                        return !Commerce.Core.RegularExpressionValidations.validateEmail(_this.locator());
                    }
                    return Commerce.StringExtensions.isNullOrWhitespace(_this.locator());
                }, _this);
                return _this;
            }
            CustomerContactInfoDialog.prototype.onShowing = function (dialogState) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(dialogState)) {
                    return;
                }
                this.contactInfoType(dialogState.contactInfo.AddressTypeValue);
                this.locator(dialogState.contactInfo.Value);
                this.marketingOptIn(dialogState.contactInfo.IsOptedInMarketing);
                this.isPrimary(dialogState.contactInfo.IsPrimary);
                if (Commerce.CustomerHelper.isEmailContactInfo(dialogState.contactInfo)) {
                    this.isReceipt(dialogState.contactInfo.isReceiptEmail);
                }
                switch (this.contactInfoType()) {
                    case Commerce.Proxy.Entities.ContactInfoType.Email:
                        if (this.isReceipt()) {
                            this.dialogTitle(Commerce.ViewModelAdapter.getResourceString("string_1312"));
                        }
                        else if (Commerce.StringExtensions.isNullOrWhitespace(dialogState.contactInfo.Value)) {
                            this.dialogTitle(Commerce.ViewModelAdapter.getResourceString("string_1390"));
                        }
                        else if (dialogState.contactInfo.IsPrimary) {
                            this.dialogTitle(Commerce.ViewModelAdapter.getResourceString("string_30414"));
                        }
                        else {
                            this.dialogTitle(Commerce.ViewModelAdapter.getResourceString("string_1392"));
                        }
                        this.primaryCheckboxLabel(Commerce.ViewModelAdapter.getResourceString("string_1394"));
                        this.locatorInputLabel(Commerce.ViewModelAdapter.getResourceString("string_1311"));
                        break;
                    case Commerce.Proxy.Entities.ContactInfoType.Phone:
                        if (Commerce.StringExtensions.isNullOrWhitespace(dialogState.contactInfo.Value)) {
                            this.dialogTitle(Commerce.ViewModelAdapter.getResourceString("string_1391"));
                        }
                        else {
                            if (dialogState.contactInfo.IsPrimary) {
                                this.dialogTitle(Commerce.ViewModelAdapter.getResourceString("string_1398"));
                            }
                            else {
                                this.dialogTitle(Commerce.ViewModelAdapter.getResourceString("string_1399"));
                            }
                        }
                        this.primaryCheckboxLabel(Commerce.ViewModelAdapter.getResourceString("string_1395"));
                        this.locatorInputLabel(Commerce.ViewModelAdapter.getResourceString("string_1309"));
                        break;
                }
                this.visible(true);
            };
            CustomerContactInfoDialog.prototype.onMarketingOptInToggle = function (checked) {
                this.marketingOptIn(checked);
            };
            CustomerContactInfoDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            CustomerContactInfoDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Commerce.Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        var output = {
                            customerContactInfo: {
                                Value: this.locator(),
                                IsOptedInMarketing: this.marketingOptIn(),
                                IsPrimary: this.isPrimary(),
                            },
                        };
                        this.dialogResult.resolve(Commerce.DialogResult.OK, output);
                        break;
                    case Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            return CustomerContactInfoDialog;
        }(Controls.ModalDialog));
        Controls.CustomerContactInfoDialog = CustomerContactInfoDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var EmailReceiptDialog = (function (_super) {
            __extends(EmailReceiptDialog, _super);
            function EmailReceiptDialog() {
                var _this = _super.call(this) || this;
                _this._dialogTitle = ko.observable(Commerce.StringExtensions.EMPTY);
                _this._dialoDescription = ko.observable(Commerce.StringExtensions.EMPTY);
                _this._emailAddress = ko.observable(Commerce.StringExtensions.EMPTY);
                _this._shouldPromptToSaveEmail = ko.observable(false);
                _this._shouldSaveEmail = ko.observable(false);
                _this.okButtonDisabled = ko.computed(function () { return !Commerce.Core.RegularExpressionValidations.validateEmail(_this._emailAddress()); }, _this);
                return _this;
            }
            EmailReceiptDialog.prototype.onShowing = function (dialogParams) {
                if (dialogParams) {
                    if (Commerce.StringExtensions.isEmptyOrWhitespace(dialogParams.emailAddress)) {
                        this._dialogTitle(Commerce.ViewModelAdapter.getResourceString("string_1800"));
                        this._dialoDescription(Commerce.ViewModelAdapter.getResourceString("string_1801"));
                    }
                    else {
                        this._dialogTitle(Commerce.ViewModelAdapter.getResourceString("string_1828"));
                        this._dialoDescription(Commerce.ViewModelAdapter.getResourceString("string_1829"));
                    }
                    this._emailAddress(dialogParams.emailAddress);
                    this._shouldPromptToSaveEmail(dialogParams.shouldPromptToSaveEmail);
                    this._shouldSaveEmail(dialogParams.shouldSaveEmail);
                }
                else {
                    this._emailAddress(Commerce.StringExtensions.EMPTY);
                    this._shouldPromptToSaveEmail(false);
                    this._shouldSaveEmail(false);
                }
                this.visible(true);
            };
            EmailReceiptDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Commerce.Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        var output = {
                            emailAddress: this._emailAddress(),
                            shouldSaveEmail: this._shouldSaveEmail()
                        };
                        this.dialogResult.resolve(Commerce.DialogResult.OK, output);
                        break;
                    case Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            return EmailReceiptDialog;
        }(Controls.ModalDialog));
        Controls.EmailReceiptDialog = EmailReceiptDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var GetGiftReceiptDialog = (function (_super) {
            __extends(GetGiftReceiptDialog, _super);
            function GetGiftReceiptDialog() {
                var _this = _super.call(this) || this;
                _this.printAllLinesOptions = ko.observableArray([{
                        text: Commerce.ViewModelAdapter.getResourceString("string_1833"),
                        iconClass: "iconCheckList"
                    }]);
                _this.salesLinesForDisplay = ko.observableArray([]);
                _this.isNoItemSelected = ko.observable(true);
                _this._selectedSalesLines = [];
                _this.noSalesLineMessageText = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.noSalesLineMessageTextVisible = ko.observable(false);
                _this.printOrPreviewButtonLabel = ko.observable(Commerce.StringExtensions.EMPTY);
                return _this;
            }
            GetGiftReceiptDialog.prototype.onShowing = function (dialogInput) {
                this.indeterminateWaitVisible(true);
                this._dialogState = dialogInput;
                if (this._dialogState.isPreview) {
                    this.printOrPreviewButtonLabel(Commerce.ViewModelAdapter.getResourceString("string_1834"));
                }
                else {
                    this.printOrPreviewButtonLabel(Commerce.ViewModelAdapter.getResourceString("string_1808"));
                }
                if (Commerce.ArrayExtensions.hasElements(this._dialogState.salesLinesForDisplay)) {
                    this._loadSalesLineForDisplaySuccess(this._dialogState.salesLinesForDisplay);
                }
                else {
                    this._loadSalesLineForDisplayError();
                }
                Commerce.RetailLogger.viewsControlsPrintReceiptShown();
                this.indeterminateWaitVisible(false);
                this.visible(true);
            };
            GetGiftReceiptDialog.prototype.afterShow = function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.visible) || !this.visible()) {
                    return;
                }
                var dataListViewModel;
                var listElement = document.getElementById(GetGiftReceiptDialog.SALES_LINES_DATA_LIST_ELEMENT_ID);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(listElement) && !Commerce.ObjectExtensions.isNullOrUndefined(listElement.dataListViewModel)) {
                    dataListViewModel = listElement.dataListViewModel;
                }
                if (dataListViewModel instanceof Controls.DataList.DataListViewModel) {
                    dataListViewModel.refreshList();
                }
            };
            GetGiftReceiptDialog.prototype.printAllLinesClickHandler = function (eventArgs) {
                this._selectedSalesLines = this.salesLinesForDisplay();
                this._getGiftReceiptsAsync();
            };
            GetGiftReceiptDialog.prototype.printGiftReceiptButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this._cancelDialog();
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this._getGiftReceiptsAsync();
                        break;
                }
            };
            GetGiftReceiptDialog.prototype.salesOrderLineListSelectionChangedEventHandler = function (selectedItems) {
                this._selectedSalesLines = selectedItems;
                this.isNoItemSelected(!Commerce.ArrayExtensions.hasElements(selectedItems));
            };
            GetGiftReceiptDialog.prototype._loadSalesLineForDisplayError = function () {
                this.noSalesLineMessageText(Commerce.ViewModelAdapter.getResourceString("string_1220"));
                this.salesLinesForDisplay([]);
                this._selectedSalesLines = [];
                this.noSalesLineMessageTextVisible(true);
            };
            GetGiftReceiptDialog.prototype._loadSalesLineForDisplaySuccess = function (salesLinesForDisplay) {
                if (!Commerce.ArrayExtensions.hasElements(salesLinesForDisplay)) {
                    this.noSalesLineMessageTextVisible(true);
                    this.noSalesLineMessageText(Commerce.ViewModelAdapter.getResourceString("string_1220"));
                    return;
                }
                this.salesLinesForDisplay(salesLinesForDisplay);
                this.noSalesLineMessageTextVisible(false);
                this._selectedSalesLines = [];
                this.isNoItemSelected(true);
            };
            GetGiftReceiptDialog.prototype._cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            GetGiftReceiptDialog.prototype._resolveDialog = function (salesLineNumbers) {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { salesLineNumbers: salesLineNumbers });
            };
            GetGiftReceiptDialog.prototype._getGiftReceiptsAsync = function () {
                this.indeterminateWaitVisible(true);
                var salesLineNums = this._selectedSalesLines.map(function (line) { return line.LineNumber; });
                this._resolveDialog(salesLineNums);
                this.indeterminateWaitVisible(false);
            };
            GetGiftReceiptDialog.SALES_LINES_DATA_LIST_ELEMENT_ID = "salesLinesList";
            return GetGiftReceiptDialog;
        }(Controls.ModalDialog));
        Controls.GetGiftReceiptDialog = GetGiftReceiptDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var LoyaltyCardBalanceDialog = (function (_super) {
            __extends(LoyaltyCardBalanceDialog, _super);
            function LoyaltyCardBalanceDialog(options) {
                var _this = _super.call(this) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.loyaltyCard)) {
                    _this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                    return _this;
                }
                _this.correlationId = options.correlationId;
                var viewModelOptions = {
                    correlationId: options.correlationId,
                    loyaltyCard: options.loyaltyCard
                };
                _this.viewModel = new Commerce.ViewModels.LoyaltyCardBalanceDialogViewModel(_this.createViewModelContext(), viewModelOptions);
                _this.isAddToTransactionButtonVisible = ko.observable(options.displayAddToTransactionButton);
                _this.loyaltyCard = options.loyaltyCard;
                _this.expiringAsOfCurrentDateLabel = ko.computed(function () {
                    var currentDate = Commerce.Formatters.DateWithoutTime(new Date());
                    return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_296"), currentDate);
                });
                return _this;
            }
            LoyaltyCardBalanceDialog.prototype.onShowing = function () {
                this.visible(true);
            };
            LoyaltyCardBalanceDialog.prototype.afterShow = function () {
                var _this = this;
                this.viewModel.checkRewardPointDataIsAvailableForDisplayAsync()
                    .done(function (result) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(result)) {
                        _this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                    }
                }).fail(function () {
                    _this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                });
            };
            LoyaltyCardBalanceDialog.prototype.getLoyaltyCardPointBalanceButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        Commerce.RetailLogger.posPaymentUIButtonClicked(this.viewModel.correlationId, "LoyaltyCardBalanceDialog", "Cancel");
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Controls.Dialog.OperationIds.CLOSE_BUTTON_CLICK:
                        Commerce.RetailLogger.posPaymentUIButtonClicked(this.viewModel.correlationId, "LoyaltyCardBalanceDialog", "Close");
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        Commerce.RetailLogger.posPaymentUIButtonClicked(this.viewModel.correlationId, "LoyaltyCardBalanceDialog", "Add to transaction");
                        var response = {
                            loyaltyCardId: this.viewModel.loyaltyCardNumberText
                        };
                        this.dialogResult.resolve(Commerce.DialogResult.OK, response);
                        break;
                }
            };
            LoyaltyCardBalanceDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return LoyaltyCardBalanceDialog;
        }(Controls.ModalDialog));
        Controls.LoyaltyCardBalanceDialog = LoyaltyCardBalanceDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var LoyaltyCardDetailsDialog = (function (_super) {
            __extends(LoyaltyCardDetailsDialog, _super);
            function LoyaltyCardDetailsDialog() {
                var _this = _super.call(this) || this;
                _this.cardIssued = ko.observable(Commerce.StringExtensions.EMPTY);
                return _this;
            }
            LoyaltyCardDetailsDialog.prototype.onShowing = function (dialogParams) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogParams)) {
                    this.cardIssued(dialogParams.cardIssued);
                }
                this.visible(true);
            };
            LoyaltyCardDetailsDialog.prototype.onButtonClick = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                    case Controls.Dialog.OperationIds.CLOSE_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Close);
                        break;
                }
            };
            LoyaltyCardDetailsDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return LoyaltyCardDetailsDialog;
        }(Controls.ModalDialog));
        Controls.LoyaltyCardDetailsDialog = LoyaltyCardDetailsDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var LoyaltyExpiringPointsDialog = (function (_super) {
            __extends(LoyaltyExpiringPointsDialog, _super);
            function LoyaltyExpiringPointsDialog(options) {
                var _this = _super.call(this) || this;
                _this.title(options.rewardPointId);
                _this.subTitle(Commerce.StringExtensions.EMPTY);
                var viewModelOptions = {
                    correlationId: options.correlationId,
                    loyaltyCardId: options.loyaltyCardId,
                    rewardPointId: options.rewardPointId
                };
                _this.viewModel = new Commerce.ViewModels.LoyaltyExpiringPointsDialogViewModel(_this.createViewModelContext(), viewModelOptions);
                _this.expiringPoints = options.expiringPoints;
                _this.loyaltyBalanceLabel = Commerce.ViewModelAdapter.getResourceString("string_294");
                _this.currentDate = new Date();
                return _this;
            }
            LoyaltyExpiringPointsDialog.prototype.show = function (dialogState, hideOnResult) {
                if (hideOnResult === void 0) { hideOnResult = true; }
                this.visible(true);
                return _super.prototype.show.call(this, dialogState, hideOnResult);
            };
            LoyaltyExpiringPointsDialog.prototype.buttonClickHandler = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        Commerce.RetailLogger.posPaymentUIButtonClicked(this.viewModel.correlationId, "LoyaltyExpiringPointsDialog", "Cancel");
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Controls.Dialog.OperationIds.CLOSE_BUTTON_CLICK:
                        Commerce.RetailLogger.posPaymentUIButtonClicked(this.viewModel.correlationId, "LoyaltyExpiringPointsDialog", "Close");
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            LoyaltyExpiringPointsDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return LoyaltyExpiringPointsDialog;
        }(Controls.ModalDialog));
        Controls.LoyaltyExpiringPointsDialog = LoyaltyExpiringPointsDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var LoyaltyTransactionsDialog = (function (_super) {
            __extends(LoyaltyTransactionsDialog, _super);
            function LoyaltyTransactionsDialog(options) {
                var _this = _super.call(this) || this;
                _this.title(options.rewardPointId);
                _this.subTitle(Commerce.ViewModelAdapter.getResourceString("string_286"));
                var viewModelOptions = {
                    correlationId: options.correlationId,
                    loyaltyCardId: options.loyaltyCardId,
                    rewardPointId: options.rewardPointId
                };
                _this.viewModel = new Commerce.ViewModels.LoyaltyTransactionsDialogViewModel(_this.createViewModelContext(), viewModelOptions);
                _this.totalAvailableBalance = options.totalAvailableBalance;
                _this.loyaltyBalanceLabel = Commerce.ViewModelAdapter.getResourceString("string_294");
                return _this;
            }
            LoyaltyTransactionsDialog.prototype.show = function (dialogState, hideOnResult) {
                if (hideOnResult === void 0) { hideOnResult = true; }
                this.visible(true);
                return _super.prototype.show.call(this, dialogState, hideOnResult);
            };
            LoyaltyTransactionsDialog.prototype.buttonClickHandler = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        Commerce.RetailLogger.posPaymentUIButtonClicked(this.viewModel.correlationId, "LoyaltyExpiringPointsDialog", "Cancel");
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Controls.Dialog.OperationIds.CLOSE_BUTTON_CLICK:
                        Commerce.RetailLogger.posPaymentUIButtonClicked(this.viewModel.correlationId, "LoyaltyExpiringPointsDialog", "Close");
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            LoyaltyTransactionsDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return LoyaltyTransactionsDialog;
        }(Controls.ModalDialog));
        Controls.LoyaltyTransactionsDialog = LoyaltyTransactionsDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var PrintableReceiptToDisplay = (function (_super) {
            __extends(PrintableReceiptToDisplay, _super);
            function PrintableReceiptToDisplay() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return PrintableReceiptToDisplay;
        }(Commerce.Proxy.Entities.PrintableReceipt));
        Controls.PrintableReceiptToDisplay = PrintableReceiptToDisplay;
        var PrintReceiptDialog = (function (_super) {
            __extends(PrintReceiptDialog, _super);
            function PrintReceiptDialog() {
                var _this = _super.call(this) || this;
                _this.printGiftReceipt = false;
                _this._promptUserReceipts = [];
                _this._alwaysPrintReceipts = [];
                _this._printableReceiptsToDisplay = ko.observableArray([]);
                _this.okButtonDisabled = ko.computed(function () { return !_this.anyReceiptsToPrint(); }, _this);
                return _this;
            }
            PrintReceiptDialog.prototype.onShowing = function (dialogState) {
                var _this = this;
                this._dialogState = dialogState;
                this._printableReceiptsToDisplay([]);
                var allPrintableReceipts = Commerce.ReceiptHelper.getPrintableReceipts(dialogState.receipts);
                this._promptUserReceipts = allPrintableReceipts.filter(function (receipt) {
                    return receipt.printBehaviorValue === Commerce.Proxy.Entities.PrintBehavior.Prompt;
                });
                this._alwaysPrintReceipts = allPrintableReceipts.filter(function (receipt) {
                    return receipt.printBehaviorValue === Commerce.Proxy.Entities.PrintBehavior.Always;
                });
                var isHardwareStationActive = Commerce.Peripherals.HardwareStation.HardwareStationContext.instance.isActive();
                var hasDevicePrinter = allPrintableReceipts.some(function (receipt) {
                    return receipt.printerType === Commerce.Proxy.Entities.PeripheralType.Device;
                });
                if (dialogState.ignoreShouldPrompt
                    || (!Commerce.ArrayExtensions.hasElements(this._promptUserReceipts) && !Commerce.ArrayExtensions.hasElements(this._alwaysPrintReceipts))) {
                    Commerce.RetailLogger.viewsControlsNoPromptOrAlwaysPrintReceipts();
                    this.cancelDialog();
                    this.onHidden();
                }
                else if (isHardwareStationActive || hasDevicePrinter) {
                    var promptAnyReceipt = !dialogState.ignoreShouldPrompt && Commerce.ArrayExtensions.hasElements(this._promptUserReceipts);
                    if (promptAnyReceipt) {
                        this._promptUserReceipts.forEach(function (printableReceipt) {
                            var printReceiptToDisplay = $.extend({
                                shouldPrintObservable: ko.observable(true)
                            }, printableReceipt);
                            _this._printableReceiptsToDisplay.push(printReceiptToDisplay);
                        });
                        Commerce.RetailLogger.viewsControlsPrintReceiptShown();
                        this.visible(true);
                    }
                    else {
                        Commerce.RetailLogger.viewsControlsPrintReceiptSkippedToPrintDirectly();
                        this.printReceiptsIfPromptOrAlways(this._alwaysPrintReceipts.concat(this._promptUserReceipts));
                        this.onHidden();
                    }
                }
                else if (dialogState.rejectOnHardwareStationErrors && Commerce.ArrayExtensions.hasElements(allPrintableReceipts)) {
                    var notifyResult = this.showHardwareStationNotConfiguredError();
                    notifyResult.always(function () {
                        _this.cancelDialog();
                        _this.onHidden();
                    });
                }
                else {
                    var numberOfPrintableReceipts = Commerce.ArrayExtensions.hasElements(allPrintableReceipts) ? allPrintableReceipts.length : 0;
                    Commerce.RetailLogger.viewsControlsPrintReceiptSkipped(numberOfPrintableReceipts);
                    this.cancelDialog();
                    this.onHidden();
                }
            };
            PrintReceiptDialog.prototype.printButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dontPrintReceiptsClicked();
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.printReceiptsClicked();
                        break;
                }
            };
            PrintReceiptDialog.prototype.onShouldPrintToggle = function (checked, toggleSwitch, item) {
                item.shouldPrintObservable(checked);
            };
            PrintReceiptDialog.prototype.getReceiptTitle = function (receipt) {
                var receiptTitle = receipt.receiptName;
                var transactionStringRegEx = new RegExp("<T:(.+?)>");
                var translationMatch = transactionStringRegEx.exec(receiptTitle);
                while (translationMatch) {
                    receiptTitle = receiptTitle.replace(translationMatch[0], Commerce.ViewModelAdapter.getResourceString(translationMatch[1]));
                    translationMatch = transactionStringRegEx.exec(receiptTitle);
                }
                return receiptTitle;
            };
            PrintReceiptDialog.prototype.cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            PrintReceiptDialog.prototype.anyReceiptsToPrint = function () {
                var printAnyReceipt = false;
                if (this._printableReceiptsToDisplay) {
                    printAnyReceipt = this._printableReceiptsToDisplay()
                        .some(function (receipt) { return receipt.shouldPrompt && receipt.shouldPrintObservable(); });
                }
                return printAnyReceipt;
            };
            PrintReceiptDialog.prototype.printReceiptsClicked = function () {
                var _this = this;
                var receiptsToPrint = this._printableReceiptsToDisplay()
                    .filter(function (receiptToDisplay) { return receiptToDisplay.shouldPrintObservable() === true; });
                var triggerOptions = {
                    shouldPrintReceipt: true,
                    selectedReceipts: receiptsToPrint.map(function (printableReceipt) { return printableReceipt.receipt; })
                };
                Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostReceiptPrompt, triggerOptions)
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                })
                    .always(function () {
                    receiptsToPrint = receiptsToPrint.concat(_this._alwaysPrintReceipts);
                    _this.printReceiptsIfPromptOrAlways(receiptsToPrint);
                });
            };
            PrintReceiptDialog.prototype.dontPrintReceiptsClicked = function () {
                var _this = this;
                var triggerOptions = {
                    shouldPrintReceipt: false,
                    selectedReceipts: []
                };
                Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostReceiptPrompt, triggerOptions)
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                })
                    .always(function () {
                    if (Commerce.ArrayExtensions.hasElements(_this._alwaysPrintReceipts)) {
                        _this.printReceiptsIfPromptOrAlways(_this._alwaysPrintReceipts);
                    }
                    else {
                        _this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                    }
                });
            };
            PrintReceiptDialog.prototype.printReceiptsIfPromptOrAlways = function (printableReceipts) {
                var _this = this;
                var printAnyReceipt = printableReceipts.some(function (receipt) { return receipt.shouldPrint; });
                if (!printAnyReceipt) {
                    var notifyResult = this.showNoPrintableReceiptsError();
                    notifyResult.always(function () {
                        _this.printReceiptsSuccess();
                    });
                }
                else {
                    this.indeterminateWaitVisible(true);
                    var hasPrintableGiftReceipts = printableReceipts.some(function (r) {
                        return r.receiptTypeValue === Commerce.Proxy.Entities.ReceiptType.GiftReceipt
                            && (r.printBehaviorValue === Commerce.Proxy.Entities.PrintBehavior.Always
                                || r.printBehaviorValue === Commerce.Proxy.Entities.PrintBehavior.Prompt);
                    });
                    if (hasPrintableGiftReceipts) {
                        printableReceipts = printableReceipts.filter(function (r) {
                            return r.receiptTypeValue !== Commerce.Proxy.Entities.ReceiptType.GiftReceipt;
                        });
                        this.printGiftReceipt = true;
                        this.printReceipts(printableReceipts);
                    }
                    else {
                        this.printGiftReceipt = false;
                        this.printReceipts(printableReceipts);
                    }
                }
            };
            PrintReceiptDialog.prototype.printReceipts = function (printableReceipts) {
                var _this = this;
                var printReceiptsRequest = new Commerce.PrintReceiptsClientRequest(printableReceipts, this._dialogState.associatedOrder, this._dialogState.isCopyOfReceipt, this._dialogState.correlationId);
                Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(printReceiptsRequest))
                    .done(function (printingResult) {
                    if (printingResult && !printingResult.canceled) {
                        _this.printReceiptsSuccess();
                        Commerce.RetailLogger.viewsControlsPrintReceiptPrinted();
                    }
                    else {
                        _this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                    _this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                }).always(function () {
                    _this.indeterminateWaitVisible(false);
                });
            };
            PrintReceiptDialog.prototype.showNoPrintableReceiptsError = function () {
                var notifyResult;
                if (this._dialogState.notifyOnNoPrintableReceipts) {
                    notifyResult = Commerce.NotificationHandler.displayClientErrors([
                        new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_POS_NO_PRINTABLE_RECEIPTS)
                    ]);
                }
                else {
                    notifyResult = Commerce.VoidAsyncResult.createResolved();
                }
                return notifyResult;
            };
            PrintReceiptDialog.prototype.showHardwareStationNotConfiguredError = function () {
                var notifyResult = Commerce.NotificationHandler.displayClientErrors([
                    new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PERIPHERALS_HARDWARESTATION_NOTCONFIGURED)
                ]);
                return notifyResult;
            };
            PrintReceiptDialog.prototype.printReceiptsSuccess = function () {
                this.dialogResult.resolve(Commerce.DialogResult.OK);
            };
            return PrintReceiptDialog;
        }(Controls.ModalDialog));
        Controls.PrintReceiptDialog = PrintReceiptDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var ReassignCustomersFromClientBookConfirmationDialog = (function (_super) {
            __extends(ReassignCustomersFromClientBookConfirmationDialog, _super);
            function ReassignCustomersFromClientBookConfirmationDialog() {
                var _this = _super.call(this) || this;
                _this.name = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.staffId = ko.observable(Commerce.StringExtensions.EMPTY);
                return _this;
            }
            ReassignCustomersFromClientBookConfirmationDialog.prototype.onShowing = function (dialogOptions) {
                dialogOptions.employeeName = dialogOptions.employeeName || Commerce.StringExtensions.EMPTY;
                dialogOptions.staffId = dialogOptions.staffId || Commerce.StringExtensions.EMPTY;
                this.name(dialogOptions.employeeName);
                this.staffId(dialogOptions.staffId);
                this.title(Commerce.ViewModelAdapter.getResourceString("string_6555"));
                this.visible(true);
            };
            ReassignCustomersFromClientBookConfirmationDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, { staffId: this.staffId() });
                        break;
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            ReassignCustomersFromClientBookConfirmationDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return ReassignCustomersFromClientBookConfirmationDialog;
        }(Controls.ModalDialog));
        Controls.ReassignCustomersFromClientBookConfirmationDialog = ReassignCustomersFromClientBookConfirmationDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var ReassignCustomersFromClientBookDialog = (function (_super) {
            __extends(ReassignCustomersFromClientBookDialog, _super);
            function ReassignCustomersFromClientBookDialog() {
                var _this = _super.call(this) || this;
                _this.employees = ko.observableArray([]);
                return _this;
            }
            ReassignCustomersFromClientBookDialog.prototype.onShowing = function (dialogOptions) {
                var _this = this;
                this.title(Commerce.ViewModelAdapter.getResourceString("string_5946"));
                this.visible(true);
                Commerce.ApplicationContext.Instance.storeEmployeeListAsync.value.done(function (operators) {
                    operators.sort(function (a, b) {
                        return a.Name.localeCompare(b.Name);
                    });
                    _this.employees(operators);
                });
            };
            ReassignCustomersFromClientBookDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            ReassignCustomersFromClientBookDialog.prototype.itemInvokedHandler = function (item) {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { employee: item.data });
            };
            ReassignCustomersFromClientBookDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return ReassignCustomersFromClientBookDialog;
        }(Controls.ModalDialog));
        Controls.ReassignCustomersFromClientBookDialog = ReassignCustomersFromClientBookDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var RemoveCustomersFromClientBookDialog = (function (_super) {
            __extends(RemoveCustomersFromClientBookDialog, _super);
            function RemoveCustomersFromClientBookDialog() {
                var _this = _super.call(this) || this;
                _this.clientBookCustomers = ko.observableArray([]);
                _this.selectedCustomers = ko.observableArray([]);
                _this.numberOfSelectedCustomers = ko.computed(function () {
                    return _this.clientBookCustomers().length;
                });
                return _this;
            }
            RemoveCustomersFromClientBookDialog.prototype.onShowing = function (dialogOptions) {
                dialogOptions.clientBookCustomers = dialogOptions.clientBookCustomers || [];
                this.title(Commerce.ViewModelAdapter.getResourceString("string_6553"));
                this.clientBookCustomers(dialogOptions.clientBookCustomers);
                this.visible(true);
            };
            RemoveCustomersFromClientBookDialog.prototype.setSelectedCustomers = function (customers) {
                this.selectedCustomers(customers);
            };
            RemoveCustomersFromClientBookDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        if (!Commerce.ArrayExtensions.hasElements(this.selectedCustomers())) {
                            Commerce.NotificationHandler.displayErrorMessage("string_6562");
                            return;
                        }
                        this.dialogResult.resolve(Commerce.DialogResult.OK, { removedCustomers: this.selectedCustomers() });
                        break;
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            RemoveCustomersFromClientBookDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            RemoveCustomersFromClientBookDialog.prototype.selectAll = function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._dataListViewModel)) {
                    this._dataListViewModel = document.getElementById("selectedCustomerListsList").dataListViewModel;
                }
                this._dataListViewModel.selectAll();
            };
            RemoveCustomersFromClientBookDialog.prototype.clearAll = function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._dataListViewModel)) {
                    this._dataListViewModel = document.getElementById("selectedCustomerListsList").dataListViewModel;
                }
                this._dataListViewModel.clearAll();
            };
            return RemoveCustomersFromClientBookDialog;
        }(Controls.ModalDialog));
        Controls.RemoveCustomersFromClientBookDialog = RemoveCustomersFromClientBookDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SelectCustomerLoyaltyCardDialog = (function (_super) {
            __extends(SelectCustomerLoyaltyCardDialog, _super);
            function SelectCustomerLoyaltyCardDialog(options) {
                var _this = _super.call(this) || this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    _this.loyaltyCards = options.loyaltyCards;
                    _this.enableSelect = (Commerce.ObjectExtensions.isNullOrUndefined(options.enableSelect))
                        ? ko.observable(false) : ko.observable(options.enableSelect);
                }
                _this.title(Commerce.ViewModelAdapter.getResourceString("string_3265"));
                return _this;
            }
            SelectCustomerLoyaltyCardDialog.prototype.selectCustomerLoyaltyCardButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this._cancelDialog();
                        break;
                }
            };
            SelectCustomerLoyaltyCardDialog.prototype.onShowing = function (selectCustomerLoyaltyCardDialogState) {
                this.subTitle(this.enableSelect() ? Commerce.ViewModelAdapter.getResourceString("string_3266") : "");
                this.visible(true);
            };
            SelectCustomerLoyaltyCardDialog.prototype.loyaltyCardInvokedHandler = function (selectedLoyaltyCard) {
                if (this.enableSelect() && !Commerce.ObjectExtensions.isNullOrUndefined(selectedLoyaltyCard)) {
                    this.dialogResult.resolve(Commerce.DialogResult.OK, { selectedLoyaltyCardId: selectedLoyaltyCard.CardNumber });
                }
            };
            SelectCustomerLoyaltyCardDialog.prototype._cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return SelectCustomerLoyaltyCardDialog;
        }(Controls.ModalDialog));
        Controls.SelectCustomerLoyaltyCardDialog = SelectCustomerLoyaltyCardDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var AssignExtendedLogOnDialog = (function (_super) {
            __extends(AssignExtendedLogOnDialog, _super);
            function AssignExtendedLogOnDialog() {
                var _this = _super.call(this) || this;
                _this._extendedLogonToken = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.extendedLogonTokenUnavailable = ko.computed(function () {
                    return Commerce.StringExtensions.isNullOrWhitespace(_this._extendedLogonToken());
                });
                _this._employee = ko.observable(null);
                _this.employeeText = ko.computed(function () {
                    var employee = _this._employee();
                    if (Commerce.ObjectExtensions.isNullOrUndefined(employee)) {
                        return Commerce.StringExtensions.EMPTY;
                    }
                    else {
                        return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_11014"), employee.StaffId, employee.Name);
                    }
                });
                _this.title(Commerce.ViewModelAdapter.getResourceString("string_11006"));
                _this.subTitle(Commerce.ViewModelAdapter.getResourceString("string_11007"));
                return _this;
            }
            AssignExtendedLogOnDialog.prototype.onShowing = function (dialogState) {
                var _this = this;
                _super.prototype.onShowing.call(this, dialogState);
                this._employee(dialogState.employee);
                Commerce.Peripherals.instance.barcodeScanner.enableAsync(function (barcode) {
                    _this._extendedLogonToken(barcode);
                    _this._extendedLogonGrantType = Commerce.Authentication.Providers.CommerceUserAuthenticationProvider.EXTENDEDLOGON_BARCODE_GRANT_TYPE;
                });
                Commerce.Peripherals.instance.magneticStripeReader.enableAsync(function (cardInfo) {
                    _this._extendedLogonToken(cardInfo.CardNumber);
                    _this._extendedLogonGrantType = Commerce.Authentication.Providers.CommerceUserAuthenticationProvider.EXTENDEDLOGON_MSR_GRANT_TYPE;
                }, Commerce.Peripherals.HardwareStation.LongPollingSupportedEventsSourceTypes.EXTENDEDLOGON);
                this.visible(true);
            };
            AssignExtendedLogOnDialog.prototype.onHidden = function () {
                Commerce.Peripherals.instance.barcodeScanner.disableAsync();
                Commerce.Peripherals.instance.magneticStripeReader.disableAsync(Commerce.Peripherals.HardwareStation.LongPollingSupportedEventsSourceTypes.EXTENDEDLOGON);
                _super.prototype.onHidden.call(this);
            };
            AssignExtendedLogOnDialog.prototype.onButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, {
                            extendedLogonToken: this._extendedLogonToken(),
                            extendedLogonGrantType: this._extendedLogonGrantType
                        });
                        break;
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    default:
                        throw "Unknown operation Id: " + operationId;
                }
            };
            return AssignExtendedLogOnDialog;
        }(Controls.ModalDialog));
        Controls.AssignExtendedLogOnDialog = AssignExtendedLogOnDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var CheckSuspendedTransactionsDialog = (function (_super) {
            __extends(CheckSuspendedTransactionsDialog, _super);
            function CheckSuspendedTransactionsDialog() {
                var _this = _super.call(this) || this;
                _this.title(Commerce.ViewModelAdapter.getResourceString("string_946"));
                return _this;
            }
            CheckSuspendedTransactionsDialog.prototype.onShowing = function () {
                this.visible(true);
            };
            CheckSuspendedTransactionsDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            CheckSuspendedTransactionsDialog.prototype.selectViewAllOption = function () {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { viewVoidSelectionMethod: Commerce.Activities.ViewVoidSelectionMethod.ViewAll });
            };
            CheckSuspendedTransactionsDialog.prototype.selectVoidAllOption = function () {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { viewVoidSelectionMethod: Commerce.Activities.ViewVoidSelectionMethod.VoidAll });
            };
            return CheckSuspendedTransactionsDialog;
        }(Controls.ModalDialog));
        Controls.CheckSuspendedTransactionsDialog = CheckSuspendedTransactionsDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SalesPersonForDisplay = (function (_super) {
            __extends(SalesPersonForDisplay, _super);
            function SalesPersonForDisplay() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SalesPersonForDisplay;
        }(Commerce.Proxy.Entities.EmployeeClass));
        Controls.SalesPersonForDisplay = SalesPersonForDisplay;
        var GetSalesPersonDialog = (function (_super) {
            __extends(GetSalesPersonDialog, _super);
            function GetSalesPersonDialog() {
                var _this = _super.call(this) || this;
                _this._staffId = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.employeesForDisplay = ko.observable([]);
                _this.isOKButtonDisabled = ko.computed(function () {
                    return _this.employeesForDisplay().length <= 0;
                });
                return _this;
            }
            GetSalesPersonDialog.prototype.onShowing = function (options) {
                options = options || {};
                options.salesPersons = options.salesPersons || [];
                options.originalSalesPersonId = options.originalSalesPersonId || Commerce.StringExtensions.EMPTY;
                var currentEmployees = options.salesPersons;
                var isOrigSalesPersonInList = false;
                var employeesDisplayList = currentEmployees.map(function (employee) {
                    var salesPersonForDisplay = new SalesPersonForDisplay();
                    if (Commerce.ObjectExtensions.isNullOrUndefined(employee)) {
                        return null;
                    }
                    else {
                        salesPersonForDisplay.salesPersonDisplayName = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_5734"), employee.StaffId, employee.Name);
                        salesPersonForDisplay.Name = employee.Name;
                        salesPersonForDisplay.StaffId = employee.StaffId;
                        if (employee.StaffId === options.originalSalesPersonId) {
                            isOrigSalesPersonInList = true;
                        }
                    }
                    return salesPersonForDisplay;
                });
                this.employeesForDisplay(employeesDisplayList);
                if (isOrigSalesPersonInList) {
                    this._staffId(options.originalSalesPersonId);
                }
                this.indeterminateWaitVisible(false);
                this.visible(true);
            };
            GetSalesPersonDialog.prototype.dialogButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, this._staffId());
                        break;
                    default:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            return GetSalesPersonDialog;
        }(Controls.ModalDialog));
        Controls.GetSalesPersonDialog = GetSalesPersonDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var GetSalesRepresentativeDialog = (function (_super) {
            __extends(GetSalesRepresentativeDialog, _super);
            function GetSalesRepresentativeDialog(subTitle) {
                var _this = _super.call(this) || this;
                _this.title(Commerce.ViewModelAdapter.getResourceString("string_13007"));
                _this.subTitle(subTitle);
                _this.viewModel = new Commerce.ViewModels.GetSalesRepresentativeViewModel(_this.createViewModelContext());
                return _this;
            }
            GetSalesRepresentativeDialog.prototype.onShowing = function () {
                this.visible(true);
                this._enableBarcodeScanner();
                this._subscribeToCommissionSalesGroupAndResolveDialogIfNotNull();
            };
            GetSalesRepresentativeDialog.prototype.onHidden = function () {
                this._disableBarcodeScanner();
                _super.prototype.onHidden.call(this);
            };
            GetSalesRepresentativeDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            GetSalesRepresentativeDialog.prototype.itemInvokedHandler = function (item) {
                this._closeDialogAndResolveOkResult(item);
            };
            GetSalesRepresentativeDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            GetSalesRepresentativeDialog.prototype._onBarcodeScanned = function (value) {
                this._updateSearchText(value);
                this.viewModel.performSalesRepresentativeSearch();
            };
            GetSalesRepresentativeDialog.prototype._enableBarcodeScanner = function () {
                var _this = this;
                Commerce.Peripherals.instance.barcodeScanner.enableAsync(function (barcode) {
                    return _this._onBarcodeScanned(barcode);
                });
            };
            GetSalesRepresentativeDialog.prototype._disableBarcodeScanner = function () {
                Commerce.Peripherals.instance.barcodeScanner.disableAsync();
            };
            GetSalesRepresentativeDialog.prototype._updateSearchText = function (searchText) {
                this.viewModel.searchText(searchText);
            };
            GetSalesRepresentativeDialog.prototype._closeDialogAndResolveOkResult = function (item) {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { selectedSalesRepresentative: item });
            };
            GetSalesRepresentativeDialog.prototype._subscribeToCommissionSalesGroupAndResolveDialogIfNotNull = function () {
                var _this = this;
                this.viewModel.commissionSalesGroup.subscribe(function (newCommissionSalesGroup) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(newCommissionSalesGroup)) {
                        _this._closeDialogAndResolveOkResult(newCommissionSalesGroup);
                    }
                });
            };
            return GetSalesRepresentativeDialog;
        }(Controls.ModalDialog));
        Controls.GetSalesRepresentativeDialog = GetSalesRepresentativeDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var GetStoreEmployeeDialog = (function (_super) {
            __extends(GetStoreEmployeeDialog, _super);
            function GetStoreEmployeeDialog() {
                var _this = _super.call(this) || this;
                _this.items = ko.observableArray([]);
                _this.searchText = ko.observable(Commerce.StringExtensions.EMPTY);
                return _this;
            }
            GetStoreEmployeeDialog.prototype.onShowing = function (dialogState) {
                dialogState = dialogState || {
                    employees: [],
                    title: Commerce.StringExtensions.EMPTY,
                    subTitle: Commerce.StringExtensions.EMPTY
                };
                if (Commerce.ObjectExtensions.isNullOrUndefined(dialogState.employees)) {
                    this.cancelDialog();
                    return;
                }
                this._employees = dialogState.employees;
                this.items(Commerce.ObjectExtensions.clone(this._employees));
                if (!Commerce.StringExtensions.isNullOrWhitespace(dialogState.title)) {
                    this.title(dialogState.title);
                }
                else {
                    this.title(Commerce.ViewModelAdapter.getResourceString("string_7738"));
                }
                if (!Commerce.StringExtensions.isNullOrWhitespace(dialogState.subTitle)) {
                    this.subTitle(dialogState.subTitle);
                }
                else {
                    this.subTitle(Commerce.StringExtensions.EMPTY);
                }
                this.visible(true);
            };
            GetStoreEmployeeDialog.prototype.onButtonClick = function (operationId) {
                var _this = this;
                var selectedEmployee = null;
                var matchStaffIdEmployees = this._employees.filter(function (em) {
                    return em.StaffId === _this._selectedEmployeeStaffId;
                });
                if (Commerce.ArrayExtensions.hasElements(matchStaffIdEmployees)) {
                    selectedEmployee = matchStaffIdEmployees[0];
                }
                switch (operationId) {
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, { employee: selectedEmployee });
                        break;
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.cancelDialog();
                        break;
                }
            };
            GetStoreEmployeeDialog.prototype.itemClickHandler = function (data) {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(data)) {
                    this._selectedEmployeeStaffId = data.StaffId;
                }
                else {
                    this._selectedEmployeeStaffId = Commerce.StringExtensions.EMPTY;
                }
                setTimeout(function () {
                    _this.onButtonClick(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
                }, 100);
            };
            GetStoreEmployeeDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            GetStoreEmployeeDialog.prototype.performStoreEmployeeFilter = function () {
                var _this = this;
                var employeesWithSearchKeyword = this._employees.filter(function (item) {
                    var nameFilterIdx = item.Name.toLowerCase().indexOf(_this.searchText().toLowerCase());
                    var numberFilterIdx = item.StaffId.toLowerCase().indexOf(_this.searchText().toLowerCase());
                    return nameFilterIdx !== -1 || numberFilterIdx !== -1;
                });
                this.items(employeesWithSearchKeyword);
            };
            GetStoreEmployeeDialog.prototype.cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return GetStoreEmployeeDialog;
        }(Controls.ModalDialog));
        Controls.GetStoreEmployeeDialog = GetStoreEmployeeDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var LoginDialog = (function (_super) {
            __extends(LoginDialog, _super);
            function LoginDialog() {
                var _this = _super.call(this) || this;
                _this._storeId = ko.observable("");
                _this._userName = ko.observable("");
                _this._password = ko.observable("");
                _this._isPasswordFocused = ko.observable(false);
                _this._isOKButtonDisabled = ko.computed(function () {
                    return Commerce.StringExtensions.isEmptyOrWhitespace(_this._userName()) ||
                        Commerce.StringExtensions.isEmptyOrWhitespace(_this._password());
                });
                return _this;
            }
            LoginDialog.prototype.onShowing = function (dialogState) {
                dialogState = dialogState || { storeId: undefined };
                this._storeId(dialogState.storeId);
                this.visible(true);
            };
            LoginDialog.prototype.enterKeyPressed = function () {
                if (!this._isOKButtonDisabled()) {
                    this.onButtonClick(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
                }
            };
            LoginDialog.prototype.onButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.cancelDialog();
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, { userName: this._userName(), password: this._password() });
                        this._isPasswordFocused(true);
                        break;
                }
            };
            LoginDialog.prototype.cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return LoginDialog;
        }(Controls.ModalDialog));
        Controls.LoginDialog = LoginDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var ReviewShiftTenderLinesWarningDialog = (function (_super) {
            __extends(ReviewShiftTenderLinesWarningDialog, _super);
            function ReviewShiftTenderLinesWarningDialog() {
                var _this = _super.call(this) || this;
                _this.reviewButtonOperationId = "reviewButtonOperationId";
                _this.showAmountDifferenceMessage = ko.observable(false);
                _this.showOfflineTransactionsMessage = ko.observable(false);
                return _this;
            }
            ReviewShiftTenderLinesWarningDialog.prototype.onShowing = function (dialogState) {
                this._setDialogState(dialogState);
                this.visible(true);
            };
            ReviewShiftTenderLinesWarningDialog.prototype.buttonClickHandler = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this._closeShift();
                        break;
                    case this.reviewButtonOperationId:
                        this._reviewTenderLines();
                        break;
                }
            };
            ReviewShiftTenderLinesWarningDialog.prototype.cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel, null);
            };
            ReviewShiftTenderLinesWarningDialog.prototype._closeShift = function () {
                this.dialogResult.resolve(Commerce.DialogResult.OK, false);
            };
            ReviewShiftTenderLinesWarningDialog.prototype._reviewTenderLines = function () {
                this.dialogResult.resolve(Commerce.DialogResult.OK, true);
            };
            ReviewShiftTenderLinesWarningDialog.prototype._setDialogState = function (dialogState) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(dialogState)) {
                    return;
                }
                this.showAmountDifferenceMessage(dialogState.showAmountDifferenceMessage);
                this.showOfflineTransactionsMessage(dialogState.showOfflineTransactionsMessage);
            };
            return ReviewShiftTenderLinesWarningDialog;
        }(Controls.ModalDialog));
        Controls.ReviewShiftTenderLinesWarningDialog = ReviewShiftTenderLinesWarningDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var ShiftActionDialog = (function (_super) {
            __extends(ShiftActionDialog, _super);
            function ShiftActionDialog() {
                var _this = _super.call(this) || this;
                _this.shiftDialogMethods = ko.observableArray([]);
                _this.shiftDialogTitle = ko.observable(Commerce.StringExtensions.EMPTY);
                return _this;
            }
            ShiftActionDialog.prototype.onShowing = function (shiftActions) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(shiftActions)) {
                    this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                    return;
                }
                this.shiftDialogTitle(shiftActions.dialogTitle);
                this.shiftDialogMethods(this.getShiftDialogMethodsForDisplay(shiftActions));
                this.visible(true);
            };
            ShiftActionDialog.prototype.buttonClickHandler = function (buttonId) {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            ShiftActionDialog.prototype.shiftDialogClickHandler = function (eventArgs) {
                var action = eventArgs.data.Action;
                this.dialogResult.resolve(Commerce.DialogResult.OK, action);
            };
            ShiftActionDialog.prototype.getShiftDialogMethodsForDisplay = function (shiftActions) {
                var tileFields = [];
                var tileField;
                if (this.getCanOpenShift(shiftActions)) {
                    tileField = {
                        Action: Commerce.Activities.ShiftActionType.NewShift,
                        value: Commerce.ViewModelAdapter.getResourceString("string_4002")
                    };
                    tileFields.push(tileField);
                }
                if (Commerce.ArrayExtensions.hasElements(shiftActions.reusableShifts)
                    || Commerce.ArrayExtensions.hasElements(shiftActions.suspendedShifts)) {
                    tileField = {
                        Action: Commerce.Activities.ShiftActionType.ExistingShift,
                        value: Commerce.ViewModelAdapter.getResourceString("string_4035")
                    };
                    tileFields.push(tileField);
                }
                tileField = {
                    Action: Commerce.Activities.ShiftActionType.NonDrawer,
                    value: Commerce.ViewModelAdapter.getResourceString("string_4004")
                };
                tileFields.push(tileField);
                return tileFields;
            };
            ShiftActionDialog.prototype.getCanOpenShift = function (shiftActions) {
                var result = false;
                var drawer = Commerce.ArrayExtensions.firstOrUndefined(shiftActions.availableCashDrawers);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(drawer)
                    && (!drawer.IsSharedShiftDrawer || !shiftActions.reusableShifts.some(function (shift) { return shift.IsShared; }))) {
                    result = true;
                }
                return result;
            };
            return ShiftActionDialog;
        }(Controls.ModalDialog));
        Controls.ShiftActionDialog = ShiftActionDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var TimeClockDialogViewMode;
        (function (TimeClockDialogViewMode) {
            TimeClockDialogViewMode[TimeClockDialogViewMode["Options"] = 0] = "Options";
            TimeClockDialogViewMode[TimeClockDialogViewMode["RegistrationDetails"] = 1] = "RegistrationDetails";
        })(TimeClockDialogViewMode = Controls.TimeClockDialogViewMode || (Controls.TimeClockDialogViewMode = {}));
        var TimeRegistrationDialog = (function (_super) {
            __extends(TimeRegistrationDialog, _super);
            function TimeRegistrationDialog() {
                var _this = _super.call(this) || this;
                _this.title(Commerce.ViewModelAdapter.getResourceString("string_4082"));
                _this.viewMode = ko.observable(TimeClockDialogViewMode.Options);
                _this.lastActivityStatus = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.lastActivityDate = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.lastActivityDateLabel = ko.observable(Commerce.ViewModelAdapter.getResourceString("string_4090"));
                _this.statusLabelsVisible = ko.observable(false);
                _this.clockedIn = ko.observable(false);
                _this.optionButtons = ko.observableArray([]);
                return _this;
            }
            TimeRegistrationDialog.prototype.onShowing = function (dialogState) {
                this.indeterminateWaitVisible(true);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.employeeActivity)) {
                    var formatter = Commerce.Host.instance.globalization.getDateTimeFormatter(Commerce.Host.Globalization.DateTimeFormat.DATE_TIME);
                    this.lastActivityDate(formatter.format(dialogState.employeeActivity.ActivityDateTimeOffset));
                    this.setActivityStatus(dialogState.employeeActivity.EmployeeActivityTypeValue, dialogState.employeeActivity.BreakCategory);
                    this.statusLabelsVisible(true);
                }
                else {
                    this.setActivityStatus(Commerce.Proxy.Entities.EmployeeActivityType.None, Commerce.StringExtensions.EMPTY);
                }
                this.visible(true);
            };
            TimeRegistrationDialog.prototype.hide = function () {
                return _super.prototype.hide.call(this);
            };
            TimeRegistrationDialog.prototype.updateTimeClockStatus = function (activityType, registrationDateTime) {
                var actionName;
                switch (activityType) {
                    case Commerce.Proxy.Entities.EmployeeActivityType.ClockIn:
                        actionName = Commerce.ViewModelAdapter.getResourceString("string_4148");
                        break;
                    case Commerce.Proxy.Entities.EmployeeActivityType.ClockOut:
                        actionName = Commerce.ViewModelAdapter.getResourceString("string_4149");
                        break;
                    case Commerce.Proxy.Entities.EmployeeActivityType.BreakFromWork:
                        actionName = Commerce.ViewModelAdapter.getResourceString("string_4152");
                        break;
                    case Commerce.Proxy.Entities.EmployeeActivityType.BreakForLunch:
                        actionName = Commerce.ViewModelAdapter.getResourceString("string_4153");
                        break;
                    default:
                        actionName = Commerce.ViewModelAdapter.getResourceString("string_4184");
                        break;
                }
                this.lastActivityStatus(actionName);
                var formatter = Commerce.Host.instance.globalization.getDateTimeFormatter(Commerce.Host.Globalization.DateTimeFormat.DATE_TIME);
                this.lastActivityDate(formatter.format(registrationDateTime));
                this.viewMode(TimeClockDialogViewMode.RegistrationDetails);
                this.statusLabelsVisible(true);
                this.lastActivityDateLabel(Commerce.ViewModelAdapter.getResourceString("string_4123"));
                this.indeterminateWaitVisible(false);
            };
            TimeRegistrationDialog.prototype.handleTimeClockAction = function (eventArgs) {
                this.indeterminateWaitVisible(true);
                var action = eventArgs.data.action;
                var actionName = eventArgs.data.actionName;
                this.dialogResult.resolve(Commerce.DialogResult.OK, { employeeActivityType: action, actionName: actionName });
            };
            TimeRegistrationDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            TimeRegistrationDialog.prototype.setActivityStatus = function (activityType, breakCategory) {
                if (activityType === Commerce.Proxy.Entities.EmployeeActivityType.ClockIn) {
                    this.clockedIn(true);
                    this.lastActivityStatus(Commerce.ViewModelAdapter.getResourceString("string_4148"));
                }
                else if (activityType === Commerce.Proxy.Entities.EmployeeActivityType.ClockOut) {
                    this.lastActivityStatus(Commerce.ViewModelAdapter.getResourceString("string_4149"));
                }
                else if (activityType === Commerce.Proxy.Entities.EmployeeActivityType.BreakFlowStart
                    && Commerce.StringExtensions.compare(TimeRegistrationDialog.WORK_BREAK_CATEGORY_NAME, breakCategory, true) === 0) {
                    this.lastActivityStatus(Commerce.ViewModelAdapter.getResourceString("string_4152"));
                }
                else if (activityType === Commerce.Proxy.Entities.EmployeeActivityType.BreakFlowStart
                    && Commerce.StringExtensions.compare(TimeRegistrationDialog.LUNCH_BREAK_CATEGORY_NAME, breakCategory, true) === 0) {
                    this.lastActivityStatus(Commerce.ViewModelAdapter.getResourceString("string_4153"));
                }
                var optionButtons = [
                    {
                        action: Commerce.Proxy.Entities.EmployeeActivityType.ClockIn,
                        actionName: Commerce.ViewModelAdapter.getResourceString("string_4084"),
                        disabled: this.clockedIn(),
                        cssClass: "iconRevert icon-20x20"
                    },
                    {
                        action: Commerce.Proxy.Entities.EmployeeActivityType.ClockOut,
                        actionName: Commerce.ViewModelAdapter.getResourceString("string_4085"),
                        disabled: !this.clockedIn(),
                        cssClass: "iconRelease icon-20x20"
                    },
                    {
                        action: Commerce.Proxy.Entities.EmployeeActivityType.BreakFromWork,
                        actionName: Commerce.ViewModelAdapter.getResourceString("string_4086"),
                        disabled: !this.clockedIn(),
                        cssClass: "iconCafe icon-20x20"
                    },
                    {
                        action: Commerce.Proxy.Entities.EmployeeActivityType.BreakForLunch,
                        actionName: Commerce.ViewModelAdapter.getResourceString("string_4087"),
                        disabled: !this.clockedIn(),
                        cssClass: "iconFood icon-20x20"
                    },
                    {
                        action: Commerce.Proxy.Entities.EmployeeActivityType.Logbook,
                        actionName: Commerce.ViewModelAdapter.getResourceString("string_4088"),
                        disabled: false,
                        cssClass: "iconBulletedList icon-20x20"
                    }
                ];
                this.optionButtons(optionButtons);
                this.indeterminateWaitVisible(false);
            };
            TimeRegistrationDialog.WORK_BREAK_CATEGORY_NAME = "DailyBrks";
            TimeRegistrationDialog.LUNCH_BREAK_CATEGORY_NAME = "LunchBrk";
            return TimeRegistrationDialog;
        }(Controls.ModalDialog));
        Controls.TimeRegistrationDialog = TimeRegistrationDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var UserInfoDialog = (function (_super) {
            __extends(UserInfoDialog, _super);
            function UserInfoDialog() {
                var _this = _super.call(this) || this;
                _this.useAAD = ko.observable(false);
                _this.isBusy = ko.observable(false);
                var useAADRaw = Commerce.Utilities.LogonHelper.isAadEmployeeLoginMode();
                _this.useAAD(useAADRaw);
                _this.userImageOrInitialsOptions = ko.observable({ name: Commerce.StringExtensions.EMPTY, picture: Commerce.StringExtensions.EMPTY });
                _this.shiftInfo = ko.observable(Commerce.StringExtensions.EMPTY);
                return _this;
            }
            UserInfoDialog.prototype.onShowing = function (options) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                    return;
                }
                this.userImageOrInitialsOptions({ name: options.name, picture: options.picture });
                this.shiftInfo(options.shiftInfo);
                this.visible(true);
            };
            UserInfoDialog.prototype.cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            UserInfoDialog.prototype.logOff = function () {
                var _this = this;
                this.isBusy(true);
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(new Commerce.LogOffOperationRequest(correlationId))).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors, Commerce.ViewModelAdapter.getResourceString("string_509"));
                }).always(function () {
                    _this.isBusy(false);
                });
            };
            UserInfoDialog.prototype.lockRegister = function () {
                var _this = this;
                this.isBusy(true);
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.LockTerminal, { correlationId: correlationId }).always(function () {
                    _this.isBusy(false);
                });
            };
            return UserInfoDialog;
        }(Controls.ModalDialog));
        Controls.UserInfoDialog = UserInfoDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var ExtensionDetailsDialog = (function (_super) {
            __extends(ExtensionDetailsDialog, _super);
            function ExtensionDetailsDialog(extensionLoadInfo) {
                var _this = _super.call(this) || this;
                _this.viewModel = new Commerce.ViewModels.ExtensionDetailsViewModel(_this.createViewModelContext(), extensionLoadInfo);
                _this.title(Commerce.ViewModelAdapter.getResourceString("string_7449"));
                return _this;
            }
            Object.defineProperty(ExtensionDetailsDialog.prototype, "closeButtonLabel", {
                get: function () {
                    return Commerce.ViewModelAdapter.getResourceString("string_80");
                },
                enumerable: true,
                configurable: true
            });
            ExtensionDetailsDialog.prototype.onShowing = function (options) {
                this.visible(true);
            };
            ExtensionDetailsDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Close);
            };
            return ExtensionDetailsDialog;
        }(Controls.ModalDialog));
        Controls.ExtensionDetailsDialog = ExtensionDetailsDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var ExtensionTemplatedDialog = (function (_super) {
            __extends(ExtensionTemplatedDialog, _super);
            function ExtensionTemplatedDialog(htmlFragmentPath, templateControl, options, numPadInputBroker) {
                var _this = _super.call(this, numPadInputBroker) || this;
                _this.closeClickHandler = null;
                if (Commerce.StringExtensions.isNullOrWhitespace(htmlFragmentPath)) {
                    throw "ExtensionTemplatedDialog: required parameter 'htmlFragmentPath' is empty or undefined.";
                }
                _this._htmlFragmentPath = htmlFragmentPath;
                if (Commerce.ObjectExtensions.isNullOrUndefined(templateControl)) {
                    throw "ExtensionTemplatedDialog: required parameter 'templateControl' is null or undefined.";
                }
                _this._templateControl = templateControl;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw "ExtensionTemplatedDialog: required parameter 'options' is null or undefined.";
                }
                _this._options = options;
                if (!Commerce.StringExtensions.isNullOrWhitespace(options.title)) {
                    _this.title(options.title);
                }
                if (!Commerce.StringExtensions.isNullOrWhitespace(options.subTitle)) {
                    _this.subTitle(options.subTitle);
                }
                _this.dialogButtons = [];
                _this.addDialogButton(options.button1, ExtensionTemplatedDialog.EXTENSION_TEMPLATED_DIALOG_BUTTON1);
                _this.addDialogButton(options.button2, ExtensionTemplatedDialog.EXTENSION_TEMPLATED_DIALOG_BUTTON2);
                if (Commerce.ObjectExtensions.isFunction(options.onCloseX)) {
                    _this.closeClickHandler = function () {
                        var canCloseDialog = options.onCloseX();
                        if (canCloseDialog === true) {
                            _this.closeDialog();
                        }
                    };
                }
                _this._barcodeScannerIsEnabled = false;
                _this._msrIsEnabled = false;
                return _this;
            }
            ExtensionTemplatedDialog.prototype.openDialog = function () {
                _super.prototype.show.call(this, this._options, false);
            };
            ExtensionTemplatedDialog.prototype.closeDialog = function () {
                _super.prototype.hide.call(this);
            };
            ExtensionTemplatedDialog.prototype.setButtonDisabledState = function (buttonId, disabled) {
                for (var i = 0; i < this.dialogButtons.length; i++) {
                    var modalDialogButton = this.dialogButtons[i];
                    if (modalDialogButton.id === buttonId) {
                        modalDialogButton.disable(disabled);
                        break;
                    }
                }
            };
            ExtensionTemplatedDialog.prototype.onShowing = function (dialogState) {
                var _this = this;
                _super.prototype.onShowing.call(this, dialogState);
                var nodes = this.element.getElementsByClassName("ExtensionTemplateDialogContentPlaceholder");
                if (nodes.length !== 1) {
                    throw Commerce.StringExtensions.format("ExtensionTemplatedDialog: Found unexpected number of placeholder elements: {0}, expected 1.", nodes.length);
                }
                var contentPlaceholder = nodes[0];
                ko.cleanNode(contentPlaceholder);
                WinJS.Utilities.empty(contentPlaceholder);
                var newElement = document.createElement("div");
                newElement.className = "col grow";
                contentPlaceholder.appendChild(newElement);
                WinJS.UI.Fragments.render(this._htmlFragmentPath, newElement).done(function (newElement) {
                    if (Commerce.ObjectExtensions.isFunction(_this._templateControl.onReady)) {
                        _this._templateControl.onReady(newElement);
                    }
                    if (Commerce.ObjectExtensions.isFunction(_this._templateControl.onBarcodeScanned)) {
                        Commerce.Peripherals.instance.barcodeScanner.enableAsync(_this._templateControl.onBarcodeScanned.bind(_this._templateControl));
                        _this._barcodeScannerIsEnabled = true;
                    }
                    if (Commerce.ObjectExtensions.isFunction(_this._templateControl.onMsrSwiped)) {
                        Commerce.Peripherals.instance.magneticStripeReader.enableAsync(_this._templateControl.onMsrSwiped.bind(_this._templateControl));
                        _this._msrIsEnabled = true;
                    }
                }, function (error) {
                    throw Commerce.StringExtensions.format("ExtensionTemplatedDialog: Error thrown while rendering fragment {0}.", Commerce.ErrorHelper.serializeError(error));
                });
            };
            ExtensionTemplatedDialog.prototype.onHidden = function () {
                if (this._barcodeScannerIsEnabled) {
                    Commerce.Peripherals.instance.barcodeScanner.disableAsync();
                    this._barcodeScannerIsEnabled = false;
                }
                if (this._msrIsEnabled) {
                    Commerce.Peripherals.instance.magneticStripeReader.disableAsync();
                    this._msrIsEnabled = false;
                }
                _super.prototype.onHidden.call(this);
            };
            ExtensionTemplatedDialog.prototype.buttonClickHandler = function (operationId) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._options)) {
                    var button = void 0;
                    switch (operationId) {
                        case ExtensionTemplatedDialog.EXTENSION_TEMPLATED_DIALOG_BUTTON1:
                            button = this._options.button1;
                            break;
                        case ExtensionTemplatedDialog.EXTENSION_TEMPLATED_DIALOG_BUTTON2:
                            button = this._options.button2;
                            break;
                    }
                    var canCloseDialog = false;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(button) &&
                        Commerce.ObjectExtensions.isFunction(button.onClick)) {
                        canCloseDialog = button.onClick.call(undefined, button);
                    }
                    if (canCloseDialog) {
                        this.closeDialog();
                    }
                }
            };
            ExtensionTemplatedDialog.prototype.addDialogButton = function (button, operationId) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(button)) {
                    var dialogButton = {
                        id: button.id,
                        label: Commerce.StringExtensions.isNullOrWhitespace(button.label) ? null : button.label,
                        isPrimary: Commerce.ObjectExtensions.isBoolean(button.isPrimary) ? button.isPrimary : false,
                        operationId: operationId,
                        disable: ko.observable(false)
                    };
                    this.dialogButtons.push(dialogButton);
                }
            };
            ExtensionTemplatedDialog.EXTENSION_TEMPLATED_DIALOG_BUTTON1 = "ExtensionTemplatedDialogButton1";
            ExtensionTemplatedDialog.EXTENSION_TEMPLATED_DIALOG_BUTTON2 = "ExtensionTemplatedDialogButton2";
            return ExtensionTemplatedDialog;
        }(Controls.ModalDialog));
        Controls.ExtensionTemplatedDialog = ExtensionTemplatedDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var ExtensionTemplatedDialogProxy = (function () {
            function ExtensionTemplatedDialogProxy(htmlFragmentPath, templateData) {
                this._htmlFragmentPath = htmlFragmentPath;
                this._templateData = templateData;
                this._numPadInputBroker = new Commerce.Peripherals.NumPadInputBroker();
            }
            ExtensionTemplatedDialogProxy.prototype.openDialog = function (options) {
                this._templatedDialog = new Commerce.Controls.ExtensionTemplatedDialog(this._htmlFragmentPath, this._templateData, options, this._numPadInputBroker);
                this._templatedDialog.openDialog();
            };
            ExtensionTemplatedDialogProxy.prototype.closeDialog = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._templatedDialog)) {
                    this._templatedDialog.closeDialog();
                    this._templatedDialog = null;
                }
            };
            ExtensionTemplatedDialogProxy.prototype.setButtonDisabledState = function (buttonId, disabled) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._templatedDialog)) {
                    this._templatedDialog.setButtonDisabledState(buttonId, disabled);
                }
            };
            ExtensionTemplatedDialogProxy.prototype.numPadInputBroker = function () {
                return this._numPadInputBroker;
            };
            ExtensionTemplatedDialogProxy.prototype.setIsProcessing = function (visible) {
                this._templatedDialog.indeterminateWaitVisible(visible);
            };
            return ExtensionTemplatedDialogProxy;
        }());
        Controls.ExtensionTemplatedDialogProxy = ExtensionTemplatedDialogProxy;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var FiscalRegistrationErrorDialog = (function (_super) {
            __extends(FiscalRegistrationErrorDialog, _super);
            function FiscalRegistrationErrorDialog() {
                var _this = _super.call(this) || this;
                _this.titleValue = ko.observable(null);
                _this.messageValue = ko.observable(null);
                _this.actionLines = ko.observableArray([]);
                _this.allowCancel = false;
                return _this;
            }
            FiscalRegistrationErrorDialog.prototype.show = function (dialogState, hideOnResult) {
                if (hideOnResult === void 0) { hideOnResult = true; }
                this._setDialogState(dialogState);
                return _super.prototype.show.call(this, dialogState, hideOnResult);
            };
            FiscalRegistrationErrorDialog.prototype.onShowing = function (dialogState) {
                this.visible(true);
            };
            FiscalRegistrationErrorDialog.prototype.itemClickHandler = function (eventArgs) {
                var response = {
                    action: eventArgs.data.Action
                };
                this.dialogResult.resolve(Commerce.DialogResult.OK, response);
            };
            FiscalRegistrationErrorDialog.prototype.cancelButtonClickHandler = function (result) {
                var response = {
                    action: Commerce.FiscalIntegration.Entities.FiscalRegistrationErrorActionType.Cancel
                };
                this.dialogResult.resolve(Commerce.DialogResult.Cancel, response);
            };
            FiscalRegistrationErrorDialog.prototype._setDialogState = function (dialogState) {
                this.titleValue(dialogState.title);
                this.messageValue(dialogState.message);
                this.actionLines(this.getActionLines(dialogState.options));
                this.allowCancel = dialogState.options.allowCancel;
            };
            FiscalRegistrationErrorDialog.prototype.getActionLines = function (errorHandlingOptions) {
                var tileFields = [];
                if (errorHandlingOptions.allowRetry) {
                    tileFields.push({
                        Action: Commerce.FiscalIntegration.Entities.FiscalRegistrationErrorActionType.Retry,
                        Label: Commerce.ViewModelAdapter.getResourceString("string_81")
                    });
                }
                if (errorHandlingOptions.allowSkip) {
                    tileFields.push({
                        Action: Commerce.FiscalIntegration.Entities.FiscalRegistrationErrorActionType.Skip,
                        Label: Commerce.ViewModelAdapter.getResourceString("string_4952")
                    });
                }
                if (errorHandlingOptions.allowMarkRegistered) {
                    tileFields.push({
                        Action: Commerce.FiscalIntegration.Entities.FiscalRegistrationErrorActionType.MarkAsRegistered,
                        Label: Commerce.ViewModelAdapter.getResourceString("string_4953")
                    });
                }
                return tileFields;
            };
            return FiscalRegistrationErrorDialog;
        }(Controls.ModalDialog));
        Controls.FiscalRegistrationErrorDialog = FiscalRegistrationErrorDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var CheckedListInputDialog = (function (_super) {
            __extends(CheckedListInputDialog, _super);
            function CheckedListInputDialog() {
                var _this = _super.call(this) || this;
                _this.items = ko.observableArray([]);
                _this._result = [];
                return _this;
            }
            CheckedListInputDialog.prototype.onShowing = function (state) {
                var _this = this;
                var defaultGetDisplayNameCallback = function (item) {
                    return item.toString();
                };
                this._getNameDisplayCallback = Commerce.ObjectExtensions.isNullOrUndefined(state.getDisplayNameCallback) ?
                    defaultGetDisplayNameCallback : state.getDisplayNameCallback;
                this.items(state.items.map(function (item) {
                    return { key: _this._getNameDisplayCallback(item), value: item };
                }));
                this.visible(true);
            };
            CheckedListInputDialog.prototype.checkboxClickHandler = function (keyValuePair) {
                var _this = this;
                var index = Commerce.ArrayExtensions.findIndex(this._result, function (item) {
                    return _this._getNameDisplayCallback(item) === keyValuePair.key;
                });
                if (index > -1) {
                    this._result.splice(index, 1);
                }
                else {
                    this._result.push(keyValuePair.value);
                }
                return true;
            };
            CheckedListInputDialog.prototype.buttonClickHandler = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                    case Controls.Dialog.OperationIds.CLOSE_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, this._result);
                        break;
                    default:
                        throw "Unknown operation Id: " + operationId;
                }
            };
            return CheckedListInputDialog;
        }(Controls.ModalDialog));
        Controls.CheckedListInputDialog = CheckedListInputDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var DateRangeInputDialog = (function (_super) {
            __extends(DateRangeInputDialog, _super);
            function DateRangeInputDialog() {
                var _this = _super.call(this) || this;
                var dateNow = new Date();
                _this.startDate = ko.observable(dateNow);
                _this.endDate = ko.observable(dateNow);
                _this.isStartDateDisabled = ko.observable(true);
                _this.isEndDateDisabled = ko.observable(true);
                _this.minYear = ko.observable(dateNow.getFullYear() - DateRangeInputDialog.INTERVAL_YEAR);
                return _this;
            }
            DateRangeInputDialog.prototype.onShowing = function (dialogState) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.minYear)) {
                    this.minYear(dialogState.minYear);
                }
                this.visible(true);
            };
            DateRangeInputDialog.prototype.toggleStartDateMode = function (checked) {
                this.isStartDateDisabled(!checked);
            };
            DateRangeInputDialog.prototype.toggleEndDateMode = function (checked) {
                this.isEndDateDisabled(!checked);
            };
            DateRangeInputDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, {
                            startDate: this.isStartDateDisabled() ? null : this.getSelectedDate(DateRangeInputDialog.START_DATE_ELEMENT_ID),
                            endDate: this.isEndDateDisabled() ? null : this.getSelectedDate(DateRangeInputDialog.END_DATE_ELEMENT_ID)
                        });
                        break;
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            DateRangeInputDialog.prototype.getSelectedDate = function (elementId) {
                return Commerce.DateExtensions.getDate(document.getElementById(elementId).winControl.current);
            };
            DateRangeInputDialog.INTERVAL_YEAR = 50;
            DateRangeInputDialog.START_DATE_ELEMENT_ID = "startDate";
            DateRangeInputDialog.END_DATE_ELEMENT_ID = "endDate";
            return DateRangeInputDialog;
        }(Controls.ModalDialog));
        Controls.DateRangeInputDialog = DateRangeInputDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var MessageDialog = (function (_super) {
            __extends(MessageDialog, _super);
            function MessageDialog() {
                var _this = _super.call(this) || this;
                _this.closeClickHandler = null;
                _this.content = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.messageCheckboxVisible = ko.observable(false);
                _this.messageCheckboxChecked = ko.observable(false);
                _this.messageCheckboxLabel = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.hideOnEscape = ko.observable(true);
                _this.additionalInformationFields = ko.observableArray([]);
                _this.additionalInformationHeader = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.hasAdditionalInformation = ko.computed(function () {
                    return Commerce.ArrayExtensions.hasElements(_this.additionalInformationFields())
                        && !Commerce.StringExtensions.isNullOrWhitespace(_this.additionalInformationHeader());
                }, _this);
                return _this;
            }
            Object.defineProperty(MessageDialog.prototype, "MessageCheckboxChecked", {
                get: function () {
                    return this.messageCheckboxChecked();
                },
                enumerable: true,
                configurable: true
            });
            MessageDialog.prototype.show = function (dialogState, hideOnResult) {
                if (hideOnResult === void 0) { hideOnResult = true; }
                this._setDialogState(dialogState);
                return _super.prototype.show.call(this, dialogState, hideOnResult);
            };
            MessageDialog.prototype.onShowing = function (dialogState) {
                this._setDialogState(dialogState);
                this.visible(true);
            };
            MessageDialog.prototype.buttonClickHandler = function (result) {
                switch (result) {
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Yes, Commerce.DialogResult.Yes);
                        break;
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.No, Commerce.DialogResult.No);
                        break;
                    case Controls.Dialog.OperationIds.CLOSE_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.No, Commerce.DialogResult.No);
                        break;
                    default:
                        this.dialogResult.resolve(Commerce.DialogResult.Yes, result);
                }
            };
            MessageDialog.prototype.onCloseHandlerCallback = function () {
                this.dialogResult.resolve(Commerce.DialogResult.No, Commerce.DialogResult.No);
            };
            MessageDialog.prototype._setDialogState = function (dialogState) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(dialogState)) {
                    return;
                }
                this.buttons = dialogState.buttons;
                this.content(dialogState.content);
                if (!Commerce.StringExtensions.isNullOrWhitespace(dialogState.title)) {
                    this.title(dialogState.title);
                }
                else {
                    this.title(Commerce.StringExtensions.EMPTY);
                }
                if (!Commerce.StringExtensions.isNullOrWhitespace(dialogState.subTitle)) {
                    this.subTitle(dialogState.subTitle);
                }
                else {
                    this.subTitle(Commerce.StringExtensions.EMPTY);
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.additionalInformation)) {
                    this.additionalInformationHeader(dialogState.additionalInformation.header);
                    this.additionalInformationFields(dialogState.additionalInformation.fields);
                }
                this.hideOnEscape(dialogState.hideOnEscape);
                var checkedDialogState = dialogState;
                if (checkedDialogState.messageCheckboxVisible) {
                    this.messageCheckboxVisible(true);
                }
                if (checkedDialogState.messageCheckboxChecked) {
                    this.messageCheckboxChecked(true);
                }
                var labelToDisplay = Commerce.ViewModelAdapter.getResourceString("string_7550");
                if (!Commerce.ObjectExtensions.isNullOrUndefined(checkedDialogState.messageCheckboxLabelResourceID)) {
                    var label = Commerce.ViewModelAdapter.getResourceString(checkedDialogState.messageCheckboxLabelResourceID);
                    if (label !== checkedDialogState.messageCheckboxLabelResourceID) {
                        labelToDisplay = label;
                    }
                }
                this.messageCheckboxLabel(labelToDisplay);
                if (dialogState.showCloseX === true) {
                    this.closeClickHandler = this.onCloseHandlerCallback.bind(this);
                }
            };
            return MessageDialog;
        }(Controls.ModalDialog));
        Controls.MessageDialog = MessageDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var NumberRangeInputDialog = (function (_super) {
            __extends(NumberRangeInputDialog, _super);
            function NumberRangeInputDialog() {
                var _this = _super.call(this) || this;
                _this.minimum = ko.observable(null);
                _this.maximum = ko.observable(null);
                return _this;
            }
            NumberRangeInputDialog.prototype.onShowing = function (dialogState) {
                this.visible(true);
            };
            NumberRangeInputDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, {
                            minimum: NumberRangeInputDialog.getNumber(this.minimum()),
                            maximum: NumberRangeInputDialog.getNumber(this.maximum())
                        });
                        break;
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            NumberRangeInputDialog.getNumber = function (numberAsText) {
                var numberAsDecimal = Commerce.NumberExtensions.parseNumber(numberAsText);
                if (Commerce.StringExtensions.isNullOrWhitespace(numberAsText) || !Commerce.ObjectExtensions.isNumber(numberAsDecimal)) {
                    return null;
                }
                else {
                    return numberAsDecimal;
                }
            };
            return NumberRangeInputDialog;
        }(Controls.ModalDialog));
        Controls.NumberRangeInputDialog = NumberRangeInputDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var NumpadDialogTypes;
        (function (NumpadDialogTypes) {
            NumpadDialogTypes[NumpadDialogTypes["Numeric"] = 0] = "Numeric";
            NumpadDialogTypes[NumpadDialogTypes["Alphanumeric"] = 1] = "Alphanumeric";
            NumpadDialogTypes[NumpadDialogTypes["Currency"] = 2] = "Currency";
        })(NumpadDialogTypes = Controls.NumpadDialogTypes || (Controls.NumpadDialogTypes = {}));
        var NumpadDialogEntryTypes;
        (function (NumpadDialogEntryTypes) {
            NumpadDialogEntryTypes[NumpadDialogEntryTypes["Keyboard"] = 0] = "Keyboard";
            NumpadDialogEntryTypes[NumpadDialogEntryTypes["Barcode"] = 1] = "Barcode";
            NumpadDialogEntryTypes[NumpadDialogEntryTypes["MagneticStripReader"] = 2] = "MagneticStripReader";
        })(NumpadDialogEntryTypes = Controls.NumpadDialogEntryTypes || (Controls.NumpadDialogEntryTypes = {}));
        var NumpadDialog = (function (_super) {
            __extends(NumpadDialog, _super);
            function NumpadDialog() {
                var _this = _super.call(this) || this;
                _this._numpadDialogType = ko.observable(NumpadDialogTypes.Alphanumeric);
                _this._numpadTextValue = ko.observable("");
                _this._numpadLabel = ko.observable("");
                _this._numpadParser = ko.observable(undefined);
                _this._numpadDecimalPrecision = ko.observable(undefined);
                _this._numpadLabel = ko.observable("");
                _this._magneticStripReaderEnabled = false;
                _this._barcodeScannerEnabled = false;
                _this._entryType = NumpadDialogEntryTypes.Keyboard;
                _this._enableAllowDialogSuccessOnEmptyText = false;
                _this._isEnteredValueValid = null;
                return _this;
            }
            NumpadDialog.prototype.onShowing = function (dialogState) {
                var _this = this;
                this._magneticStripReaderEnabled = dialogState.enableMagneticStripReader;
                if (this._magneticStripReaderEnabled) {
                    Commerce.Peripherals.instance.magneticStripeReader.enableAsync(function (cardInfo) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(_this)) {
                            _this.onValueScanned(cardInfo.CardNumber, NumpadDialogEntryTypes.MagneticStripReader);
                        }
                    }, Commerce.Peripherals.HardwareStation.LongPollingSupportedEventsSourceTypes.NUMPADDIALOG);
                }
                this._barcodeScannerEnabled = dialogState.enableBarcodeScanner;
                if (this._barcodeScannerEnabled) {
                    Commerce.Peripherals.instance.barcodeScanner.enableAsync(function (barcode) {
                        return _this.onValueScanned(barcode, NumpadDialogEntryTypes.Barcode);
                    });
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.customControlData)) {
                    var placeholder = $(this.element).find(".customContent");
                    ko.cleanNode(placeholder[0]);
                    ko.applyBindingsToNode(placeholder[0], {
                        template: {
                            name: dialogState.customControlData.templateID,
                            data: dialogState.customControlData.data
                        }
                    });
                    this._customControlViewModel = dialogState.customControlData.data;
                }
                var value = "";
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.value)) {
                    if (typeof dialogState.value === "string") {
                        value = dialogState.value;
                    }
                    else {
                        value = dialogState.value();
                    }
                }
                this._numpadTextValue(value);
                this._numpadLabel(dialogState.numpadLabel);
                this._numpadParser(dialogState.parser);
                this._numpadDecimalPrecision(dialogState.decimalPrecision);
                this._numpadDialogType(dialogState.numpadDialogType);
                this._isEnteredValueValid = dialogState.isEnteredValueValid;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.enableAllowDialogSuccessOnEmptyText)) {
                    this._enableAllowDialogSuccessOnEmptyText = dialogState.enableAllowDialogSuccessOnEmptyText;
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._customControlViewModel) &&
                    Commerce.ObjectExtensions.isFunction(this._customControlViewModel.onValueChanged)) {
                    this._onValueChangedSubscription = this._numpadTextValue.subscribe(function (newValue) {
                        _this._customControlViewModel.onValueChanged(newValue);
                    });
                }
                this.visible(true);
            };
            NumpadDialog.prototype.hide = function () {
                if (this._magneticStripReaderEnabled) {
                    Commerce.Peripherals.instance.magneticStripeReader.disableAsync(Commerce.Peripherals.HardwareStation.LongPollingSupportedEventsSourceTypes.NUMPADDIALOG);
                }
                if (this._barcodeScannerEnabled) {
                    Commerce.Peripherals.instance.barcodeScanner.disableAsync();
                }
                return _super.prototype.hide.call(this);
            };
            NumpadDialog.prototype.dispose = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._onValueChangedSubscription)) {
                    this._onValueChangedSubscription.dispose();
                }
                this._onValueChangedSubscription = null;
                _super.prototype.dispose.call(this);
            };
            NumpadDialog.prototype.setTextValue = function (textValue) {
                this._numpadTextValue(textValue);
            };
            NumpadDialog.prototype.onTextBoxEnterEventHandler = function () {
                if (!Commerce.StringExtensions.isEmptyOrWhitespace(this._numpadTextValue()) || this._enableAllowDialogSuccessOnEmptyText) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this._isEnteredValueValid)) {
                        if (this._isEnteredValueValid(this._numpadTextValue())) {
                            this._resolveDialog();
                        }
                        else {
                            Commerce.NotificationHandler.displayErrorMessage("string_13180");
                        }
                    }
                    else {
                        this._resolveDialog();
                    }
                }
            };
            NumpadDialog.prototype.numpadDialogCloseButtonClick = function () {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._customControlViewModel) &&
                    Commerce.ObjectExtensions.isFunction(this._customControlViewModel.onBeforeClose)) {
                    this._customControlViewModel.onBeforeClose(Commerce.DialogResult.Cancel).done(function () {
                        _this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                    });
                }
                else {
                    this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                }
            };
            NumpadDialog.prototype.onValueScanned = function (value, entryType) {
                this._numpadTextValue(value);
                this._entryType = entryType;
                this.onTextBoxEnterEventHandler();
            };
            NumpadDialog.prototype._resolveDialog = function () {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._customControlViewModel) &&
                    Commerce.ObjectExtensions.isFunction(this._customControlViewModel.onBeforeClose)) {
                    this._customControlViewModel.onBeforeClose(Commerce.DialogResult.OK).done(function () {
                        _this.dialogResult.resolve(Commerce.DialogResult.OK, {
                            value: _this._numpadTextValue(),
                            entryType: _this._entryType
                        });
                    }).fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }
                else {
                    this.dialogResult.resolve(Commerce.DialogResult.OK, {
                        value: this._numpadTextValue(),
                        entryType: this._entryType
                    });
                }
            };
            return NumpadDialog;
        }(Controls.ModalDialog));
        Controls.NumpadDialog = NumpadDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var TutorialVideo = (function () {
            function TutorialVideo(url, duration, description, name, caption) {
                this.url = url;
                this.description = description;
                this.duration = duration;
                this.durationString = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_7621"), this.duration);
                this.name = name;
                this.caption = caption;
                this.active = ko.observable(false);
            }
            return TutorialVideo;
        }());
        var TutorialVideoDialog = (function (_super) {
            __extends(TutorialVideoDialog, _super);
            function TutorialVideoDialog(tutorial) {
                var _this = _super.call(this) || this;
                _this.init();
                _this._tutorial = tutorial;
                _this.tutorialVideoDisabled = ko.observable(_this._tutorial.isTutorialVideoDisabled());
                _this.bubbleTourDisabled = ko.observable(_this._tutorial.isBubbleTourDisabled());
                _this.tutorialVideoDisabled.subscribe(function (value) {
                    _this._tutorial.setTutorialVideoDisabled(value);
                });
                _this.bubbleTourDisabled.subscribe(function (value) {
                    _this._tutorial.setBubbleTourDisabled(value);
                });
                return _this;
            }
            TutorialVideoDialog.prototype.afterShow = function (dialogState) {
                this.visible(true);
                this._video = document.getElementById("videoPlayer");
                this._videoCaption = this._video.getElementsByTagName("track")[0];
                this.playVideo(this._videoList()[0]);
                this.tutorialVideoDisabled(this._tutorial.isTutorialVideoDisabled());
                this.bubbleTourDisabled(this._tutorial.isBubbleTourDisabled());
            };
            TutorialVideoDialog.prototype.onHidden = function () {
                if (document.body === this.element.parentNode) {
                    document.body.removeChild(this.element);
                }
            };
            TutorialVideoDialog.prototype.hideDialog = function () {
                try {
                    this._video.pause();
                }
                catch (e) {
                    Commerce.RetailLogger.viewsTutorialVideoDialogVideoElementThrowsError(String(e));
                }
                var tutorialDialogResult = {
                    isBubbleTourDisabled: this.bubbleTourDisabled(),
                    isTutorialVideoOnStartupDisabled: this.tutorialVideoDisabled()
                };
                this.dialogResult.resolve(Commerce.DialogResult.OK, tutorialDialogResult);
            };
            TutorialVideoDialog.prototype.playVideo = function (data) {
                if (this._activeVideo) {
                    this._activeVideo.active(false);
                }
                var videoUrl = Commerce.ViewModelAdapter.getResourceString(data.url);
                var captionUrl = Commerce.ViewModelAdapter.getResourceString(data.caption);
                var videoAriaLabel = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_7645"), Commerce.ViewModelAdapter.getResourceString(data.name));
                this._video.setAttribute("aria-label", videoAriaLabel);
                this._video.setAttribute("alt", videoAriaLabel);
                try {
                    this._video.src = videoUrl;
                    this._videoCaption.src = captionUrl;
                    data.active(true);
                    this._activeVideo = data;
                    this._video.load();
                    this._video.play();
                }
                catch (e) {
                    Commerce.RetailLogger.viewsTutorialVideoDialogVideoElementThrowsError(String(e));
                    Commerce.NotificationHandler.displayClientErrors([new Commerce.Proxy.Entities.Error("string_7644")], "string_7643");
                }
            };
            TutorialVideoDialog.prototype.init = function () {
                var _this = this;
                this._videoList = ko.observableArray([]);
                $.getJSON(TutorialVideoDialog._configPath)
                    .done(function (data) {
                    data.video.forEach(function (video) { return _this._videoList.push(new TutorialVideo(video.url, video.duration, video.description, video.name, video.caption)); });
                });
            };
            TutorialVideoDialog._configPath = "Controls/Dialogs/Framework/tutorialVideo.config.json";
            return TutorialVideoDialog;
        }(Controls.ModalDialog));
        Controls.TutorialVideoDialog = TutorialVideoDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var CreateOrUpdateInventoryDocumentHeaderDialog = (function (_super) {
            __extends(CreateOrUpdateInventoryDocumentHeaderDialog, _super);
            function CreateOrUpdateInventoryDocumentHeaderDialog() {
                var _this = _super.call(this) || this;
                _this._viewModel = new Commerce.ViewModels.CreateOrUpdateInventoryDocumentHeaderDialogViewModel(_this.createViewModelContext());
                return _this;
            }
            Object.defineProperty(CreateOrUpdateInventoryDocumentHeaderDialog.prototype, "viewModel", {
                get: function () {
                    return this._viewModel;
                },
                enumerable: true,
                configurable: true
            });
            CreateOrUpdateInventoryDocumentHeaderDialog.prototype.onShowing = function (dialogState) {
                this._viewModel.load(dialogState);
                this.visible(true);
            };
            CreateOrUpdateInventoryDocumentHeaderDialog.prototype.closeClickHandler = function () {
                this.dialogResult.resolve(Commerce.DialogResult.No, null);
            };
            CreateOrUpdateInventoryDocumentHeaderDialog.prototype.buttonClickHandler = function (operationId) {
                var _this = this;
                switch (operationId) {
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        var shipDate = this._getSelectedDate(CreateOrUpdateInventoryDocumentHeaderDialog.SHIP_DATE_ELEMENT_ID);
                        var receiveDate = this._getSelectedDate(CreateOrUpdateInventoryDocumentHeaderDialog.RECEIVE_DATE_ELEMENT_ID);
                        this.viewModel.saveDocumentAsync(shipDate, receiveDate).then(function (response) {
                            if (!response.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(response.data)) {
                                _this.dialogResult.resolve(Commerce.DialogResult.Yes, response.data);
                            }
                            _this.dialogResult.resolve(Commerce.DialogResult.No, null);
                        });
                        break;
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.No, null);
                        break;
                    default:
                        throw "Unsupported operation id.";
                }
            };
            CreateOrUpdateInventoryDocumentHeaderDialog.prototype.onSelectFromWarehouse = function () {
                this.viewModel.selectFromWarehouseAsync();
            };
            CreateOrUpdateInventoryDocumentHeaderDialog.prototype.onSelectToWarehouse = function () {
                this.viewModel.selectToWarehouseAsync();
            };
            CreateOrUpdateInventoryDocumentHeaderDialog.prototype.onUpdateNoteAsync = function () {
                this.viewModel.updateNoteAsync();
            };
            CreateOrUpdateInventoryDocumentHeaderDialog.prototype._getSelectedDate = function (elementId) {
                return Commerce.DateExtensions.getDate(document.getElementById(elementId).winControl.current);
            };
            CreateOrUpdateInventoryDocumentHeaderDialog.SHIP_DATE_ELEMENT_ID = "shipDate";
            CreateOrUpdateInventoryDocumentHeaderDialog.RECEIVE_DATE_ELEMENT_ID = "receiveDate";
            return CreateOrUpdateInventoryDocumentHeaderDialog;
        }(Controls.ModalDialog));
        Controls.CreateOrUpdateInventoryDocumentHeaderDialog = CreateOrUpdateInventoryDocumentHeaderDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var InventoryDocumentAsyncFeedbackDialog = (function (_super) {
            __extends(InventoryDocumentAsyncFeedbackDialog, _super);
            function InventoryDocumentAsyncFeedbackDialog() {
                var _this = _super.call(this) || this;
                _this.actionType = ko.observable(null);
                _this.doneExecutionLabel = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.document = ko.observable(null);
                _this.isCreateTransferOrder = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.document())
                        && _this.document().OperationTypeValue === Commerce.Proxy.Entities.InventoryInboundOutboundDocumentOperationType.CreateTransferOrder;
                });
                _this.isReceivingOperation = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.document())
                        && (_this.document().OperationTypeValue === Commerce.Proxy.Entities.InventoryInboundOutboundDocumentOperationType.ReceivePurchaseOrder
                            || _this.document().OperationTypeValue === Commerce.Proxy.Entities.InventoryInboundOutboundDocumentOperationType.ReceiveTransferOrder);
                });
                _this.computedTitle = ko.computed(function () {
                    switch (_this.actionType()) {
                        case Commerce.Client.Entities.InventoryDocumentAsyncFeedbackActionType.Cancel:
                            if (_this.isCreateTransferOrder()) {
                                return Commerce.ViewModelAdapter.getResourceString("string_12721");
                            }
                            return Commerce.ViewModelAdapter.getResourceString(_this.isReceivingOperation() ? "string_12454" : "string_12515");
                        case Commerce.Client.Entities.InventoryDocumentAsyncFeedbackActionType.Commit:
                            if (_this.isCreateTransferOrder()) {
                                return Commerce.ViewModelAdapter.getResourceString("string_12719");
                            }
                            return Commerce.ViewModelAdapter.getResourceString(_this.isReceivingOperation() ? "string_12408" : "string_12504");
                        case Commerce.Client.Entities.InventoryDocumentAsyncFeedbackActionType.Pause:
                            return Commerce.ViewModelAdapter.getResourceString(_this.isReceivingOperation() ? "string_12407" : "string_12503");
                        default:
                            return Commerce.StringExtensions.EMPTY;
                    }
                });
                _this.doneExecutionLabel = ko.computed(function () {
                    switch (_this.actionType()) {
                        case Commerce.Client.Entities.InventoryDocumentAsyncFeedbackActionType.Cancel:
                            if (_this.isCreateTransferOrder()) {
                                return Commerce.ViewModelAdapter.getResourceString("string_12723");
                            }
                            return Commerce.ViewModelAdapter.getResourceString(_this.isReceivingOperation() ? "string_12467" : "string_12521");
                        case Commerce.Client.Entities.InventoryDocumentAsyncFeedbackActionType.Commit:
                            return Commerce.ViewModelAdapter.getResourceString("string_12412");
                        case Commerce.Client.Entities.InventoryDocumentAsyncFeedbackActionType.Pause:
                            return Commerce.ViewModelAdapter.getResourceString(_this.isReceivingOperation() ? "string_12411" : "string_12522");
                        default:
                            return Commerce.StringExtensions.EMPTY;
                    }
                });
                return _this;
            }
            InventoryDocumentAsyncFeedbackDialog.prototype.onShowing = function (dialogState) {
                this._setDialogState(dialogState);
                this.visible(true);
            };
            InventoryDocumentAsyncFeedbackDialog.prototype.buttonClickHandler = function (result) {
                this.dialogResult.resolve(Commerce.DialogResult.Yes, Commerce.DialogResult.Yes);
            };
            InventoryDocumentAsyncFeedbackDialog.prototype.closeClickHandler = function () {
                this.dialogResult.resolve(Commerce.DialogResult.No, Commerce.DialogResult.No);
            };
            InventoryDocumentAsyncFeedbackDialog.prototype._setDialogState = function (dialogState) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(dialogState)) {
                    return;
                }
                this.document(dialogState.document);
                this.actionType(dialogState.actionType);
            };
            return InventoryDocumentAsyncFeedbackDialog;
        }(Controls.ModalDialog));
        Controls.InventoryDocumentAsyncFeedbackDialog = InventoryDocumentAsyncFeedbackDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var InventoryDocumentCommitDialog = (function (_super) {
            __extends(InventoryDocumentCommitDialog, _super);
            function InventoryDocumentCommitDialog() {
                var _this = _super.call(this) || this;
                _this.document = ko.observable(null);
                _this.showReceiptId = ko.observable(false);
                _this.receiptId = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.isReceivingOperation = ko.computed(function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.document())) {
                        if (_this.document().OperationTypeValue === Commerce.Proxy.Entities.InventoryInboundOutboundDocumentOperationType.CreateTransferOrder) {
                            return _this.document().Receiver === Commerce.ApplicationContext.Instance.channelConfiguration.InventLocation;
                        }
                        return _this.document().OperationTypeValue === Commerce.Proxy.Entities.InventoryInboundOutboundDocumentOperationType.ReceivePurchaseOrder
                            || _this.document().OperationTypeValue === Commerce.Proxy.Entities.InventoryInboundOutboundDocumentOperationType.ReceiveTransferOrder;
                    }
                    return false;
                });
                _this.computedTitle = ko.computed(function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.document())
                        && _this.document().OperationTypeValue === Commerce.Proxy.Entities.InventoryInboundOutboundDocumentOperationType.CreateTransferOrder) {
                        return Commerce.ViewModelAdapter.getResourceString("string_12719");
                    }
                    return Commerce.ViewModelAdapter.getResourceString(_this.isReceivingOperation() ? "string_12408" : "string_12504");
                });
                _this.contentTitle = ko.computed(function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.document())
                        && _this.document().OperationTypeValue === Commerce.Proxy.Entities.InventoryInboundOutboundDocumentOperationType.CreateTransferOrder) {
                        return Commerce.ViewModelAdapter.getResourceString(_this.isReceivingOperation() ? "string_12720" : "string_12717");
                    }
                    return Commerce.ViewModelAdapter.getResourceString(_this.isReceivingOperation() ? "string_12463" : "string_12518");
                });
                _this.showReceiptId = ko.computed(function () { return !Commerce.ObjectExtensions.isNullOrUndefined(_this.document())
                    && !Commerce.ObjectExtensions.isNullOrUndefined(_this.document().SourceDocument)
                    && _this.document().SourceDocument.DocumentTypeValue === Commerce.Proxy.Entities.InventorySourceDocumentType.PurchaseOrder; });
                _this.disableOkButton = ko.computed(function () { return _this.showReceiptId() &&
                    (Commerce.ObjectExtensions.isNullOrUndefined(_this.receiptId()) || Commerce.StringExtensions.isEmpty(_this.receiptId())); });
                return _this;
            }
            InventoryDocumentCommitDialog.prototype.onShowing = function (dialogState) {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.document.SourceDocument)
                    && dialogState.document.SourceDocument.DocumentTypeValue === Commerce.Proxy.Entities.InventorySourceDocumentType.PurchaseOrder) {
                    Commerce.Peripherals.instance.barcodeScanner.enableAsync(function (barcode) { return _this.onValueScanned(barcode); });
                }
                this._setDialogState(dialogState);
                this.visible(true);
            };
            InventoryDocumentCommitDialog.prototype.hide = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.document().SourceDocument)
                    && this.document().SourceDocument.DocumentTypeValue === Commerce.Proxy.Entities.InventorySourceDocumentType.PurchaseOrder) {
                    Commerce.Peripherals.instance.barcodeScanner.disableAsync();
                }
                return _super.prototype.hide.call(this);
            };
            InventoryDocumentCommitDialog.prototype.buttonClickHandler = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        if (this.showReceiptId() && Commerce.StringExtensions.isEmpty(this.receiptId())) {
                            break;
                        }
                        this.dialogResult.resolve(Commerce.DialogResult.Yes, this.receiptId());
                        break;
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.No, Commerce.StringExtensions.EMPTY);
                        break;
                    default:
                        throw "Unsupported operation id.";
                }
            };
            InventoryDocumentCommitDialog.prototype.closeClickHandler = function () {
                this.dialogResult.resolve(Commerce.DialogResult.No, Commerce.StringExtensions.EMPTY);
            };
            InventoryDocumentCommitDialog.prototype._setDialogState = function (dialogState) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(dialogState)) {
                    return;
                }
                this.document(dialogState.document);
                this.receiptId(dialogState.document.ReceiptId || Commerce.StringExtensions.EMPTY);
            };
            InventoryDocumentCommitDialog.prototype.onValueScanned = function (value) {
                this.receiptId(value);
            };
            return InventoryDocumentCommitDialog;
        }(Controls.ModalDialog));
        Controls.InventoryDocumentCommitDialog = InventoryDocumentCommitDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var InventoryDocumentHeaderDialog = (function (_super) {
            __extends(InventoryDocumentHeaderDialog, _super);
            function InventoryDocumentHeaderDialog() {
                var _this = _super.call(this) || this;
                _this._viewModel = new Commerce.ViewModels.InventoryDocumentHeaderViewModel(_this.createViewModelContext());
                _this.closeClickHandler = _this._onCloseHandlerCallback.bind(_this);
                _this.closeButtonLabel = ko.observable(Commerce.ViewModelAdapter.getResourceString("string_80"));
                _this.closeButtonOperationId = ko.observable(Commerce.Controls.Dialog.OperationIds.CLOSE_BUTTON_CLICK);
                _this.transferTileType = ko.observable(Commerce.Controls.SelectTile.SelectTileType.DoubleLine);
                return _this;
            }
            Object.defineProperty(InventoryDocumentHeaderDialog.prototype, "viewModel", {
                get: function () {
                    return this._viewModel;
                },
                enumerable: true,
                configurable: true
            });
            InventoryDocumentHeaderDialog.prototype.show = function (dialogState, hideOnResult) {
                if (hideOnResult === void 0) { hideOnResult = true; }
                this._viewModel.load(dialogState.document, dialogState.totalUpdateNowQuantity);
                return _super.prototype.show.call(this, dialogState, hideOnResult);
            };
            InventoryDocumentHeaderDialog.prototype.onClickEditNote = function () {
                this._viewModel.onUpdateNoteAsync();
            };
            InventoryDocumentHeaderDialog.prototype._onCloseHandlerCallback = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Close, this._viewModel.document());
            };
            return InventoryDocumentHeaderDialog;
        }(Controls.ModalDialog));
        Controls.InventoryDocumentHeaderDialog = InventoryDocumentHeaderDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var InventoryDocumentQuantityDialog = (function (_super) {
            __extends(InventoryDocumentQuantityDialog, _super);
            function InventoryDocumentQuantityDialog() {
                var _this = _super.call(this) || this;
                _this._viewModel = new Commerce.ViewModels.InventoryDocumentQuantityDialogViewModel(_this.createViewModelContext());
                return _this;
            }
            Object.defineProperty(InventoryDocumentQuantityDialog.prototype, "viewModel", {
                get: function () {
                    return this._viewModel;
                },
                enumerable: true,
                configurable: true
            });
            InventoryDocumentQuantityDialog.prototype.onShowing = function (dialogState) {
                var _this = this;
                Commerce.Peripherals.instance.barcodeScanner.enableAsync(function (barcode) {
                    return _this.onValueScanned(barcode);
                });
                this._viewModel.load(dialogState);
                this.visible(true);
            };
            InventoryDocumentQuantityDialog.prototype.hide = function () {
                Commerce.Peripherals.instance.barcodeScanner.disableAsync();
                return _super.prototype.hide.call(this);
            };
            InventoryDocumentQuantityDialog.prototype.onTextBoxEnterEventHandler = function () {
                if (!Commerce.StringExtensions.isEmptyOrWhitespace(this._viewModel.numpadTextValue())) {
                    var quantity = Commerce.NumberExtensions.parseNumber(this._viewModel.numpadTextValue());
                    if (quantity >= 0) {
                        this.dialogResult.resolve(Commerce.DialogResult.Yes, {
                            reenterProductId: false,
                            quantity: quantity,
                            wmsLocationId: this._viewModel.wmsLocationId(),
                        });
                    }
                    else {
                        var error = new Commerce.Proxy.Entities.Error("string_3400");
                        error.errorTitleResourceId = "string_3383";
                        Commerce.NotificationHandler.displayClientErrors([error]);
                        this.dialogResult.resolve(Commerce.DialogResult.No);
                    }
                }
            };
            InventoryDocumentQuantityDialog.prototype.closeButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.No);
            };
            InventoryDocumentQuantityDialog.prototype.onClickBack = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._viewModel.quantityThreshold())) {
                    this._viewModel.quantityThreshold(null);
                }
                else {
                    this.dialogResult.resolve(Commerce.DialogResult.Yes, {
                        reenterProductId: true,
                    });
                }
            };
            InventoryDocumentQuantityDialog.prototype.onClickLocation = function () {
                this._viewModel.selectLocationAsync();
            };
            InventoryDocumentQuantityDialog.prototype.onValueScanned = function (value) {
                this._viewModel.numpadTextValue(value);
                this.onTextBoxEnterEventHandler();
            };
            return InventoryDocumentQuantityDialog;
        }(Controls.ModalDialog));
        Controls.InventoryDocumentQuantityDialog = InventoryDocumentQuantityDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var InventoryDocumentSummaryDialog = (function (_super) {
            __extends(InventoryDocumentSummaryDialog, _super);
            function InventoryDocumentSummaryDialog() {
                var _this = _super.call(this) || this;
                _this.document = ko.observable(null);
                _this.contentTitle = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.contentSubTitle = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.totalUpdateNowQuantity = ko.observable(0);
                _this.isReceivingOperation = ko.computed(function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.document())) {
                        if (_this.document().OperationTypeValue === Commerce.Proxy.Entities.InventoryInboundOutboundDocumentOperationType.CreateTransferOrder) {
                            return _this.document().Receiver === Commerce.ApplicationContext.Instance.channelConfiguration.InventLocation;
                        }
                        return _this.document().OperationTypeValue === Commerce.Proxy.Entities.InventoryInboundOutboundDocumentOperationType.ReceivePurchaseOrder
                            || _this.document().OperationTypeValue === Commerce.Proxy.Entities.InventoryInboundOutboundDocumentOperationType.ReceiveTransferOrder;
                    }
                    return false;
                });
                _this.quantityDoneLabel = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this.document())) {
                        return Commerce.StringExtensions.EMPTY;
                    }
                    return Commerce.ViewModelAdapter.getResourceString(_this.isReceivingOperation() ? "string_12446" : "string_12445");
                });
                _this.quantityTotalLabel = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this.document())) {
                        return Commerce.StringExtensions.EMPTY;
                    }
                    return Commerce.ViewModelAdapter.getResourceString(_this.isReceivingOperation() ? "string_12470" : "string_12527");
                });
                _this.quantityInProgressLabel = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this.document())) {
                        return Commerce.StringExtensions.EMPTY;
                    }
                    return Commerce.ViewModelAdapter.getResourceString(_this.isReceivingOperation() ? "string_12401" : "string_12501");
                });
                _this.quantityNotStarted = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this.document())) {
                        return 0;
                    }
                    var quantity;
                    if (_this.isReceivingOperation()) {
                        quantity = _this.document().SourceDocument.TotalQuantityOrdered
                            - (_this.document().SourceDocument.TotalQuantityReceived
                                + _this.totalUpdateNowQuantity()
                                + _this.document().SourceDocument.TotalQuantityCancelled);
                    }
                    else {
                        quantity = _this.document().SourceDocument.TotalQuantityOrdered
                            - (_this.document().SourceDocument.TotalQuantityShipped
                                + _this.totalUpdateNowQuantity()
                                + _this.document().SourceDocument.TotalQuantityCancelled);
                    }
                    return Math.max(0, quantity);
                });
                _this.quantityFinished = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this.document())) {
                        return 0;
                    }
                    if (_this.isReceivingOperation()) {
                        return _this.document().SourceDocument.TotalQuantityReceived;
                    }
                    else {
                        return _this.document().SourceDocument.TotalQuantityShipped;
                    }
                });
                _this.quantityDecimalPrecision = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this.document())) {
                        return 0;
                    }
                    return Math.max(Commerce.NumberExtensions.getNumberOfDecimals(_this.document().SourceDocument.TotalQuantityOrdered), Commerce.NumberExtensions.getNumberOfDecimals(_this.document().SourceDocument.TotalQuantityShipped), Commerce.NumberExtensions.getNumberOfDecimals(_this.document().SourceDocument.TotalQuantityReceived), Commerce.NumberExtensions.getNumberOfDecimals(_this.totalUpdateNowQuantity()));
                });
                return _this;
            }
            InventoryDocumentSummaryDialog.prototype.show = function (dialogState, hideOnResult) {
                if (hideOnResult === void 0) { hideOnResult = true; }
                this._setDialogState(dialogState);
                return _super.prototype.show.call(this, dialogState, hideOnResult);
            };
            InventoryDocumentSummaryDialog.prototype.onShowing = function (dialogState) {
                this._setDialogState(dialogState);
                this.visible(true);
            };
            InventoryDocumentSummaryDialog.prototype.buttonClickHandler = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Yes, Commerce.DialogResult.Yes);
                        break;
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.No, Commerce.DialogResult.No);
                        break;
                    default:
                        throw "Unsupported operation id.";
                }
            };
            InventoryDocumentSummaryDialog.prototype.closeClickHandler = function () {
                this.dialogResult.resolve(Commerce.DialogResult.No, Commerce.DialogResult.No);
            };
            InventoryDocumentSummaryDialog.prototype._setDialogState = function (dialogState) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(dialogState)) {
                    return;
                }
                this.document(dialogState.document);
                this.title(dialogState.title || Commerce.StringExtensions.EMPTY);
                this.contentTitle(dialogState.contentTitle || Commerce.StringExtensions.EMPTY);
                this.contentSubTitle(dialogState.contentSubTitle || Commerce.StringExtensions.EMPTY);
                this.totalUpdateNowQuantity(Commerce.ObjectExtensions.isNumber(dialogState.totalUpdateNowQuantity) ? dialogState.totalUpdateNowQuantity : 0);
            };
            return InventoryDocumentSummaryDialog;
        }(Controls.ModalDialog));
        Controls.InventoryDocumentSummaryDialog = InventoryDocumentSummaryDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var InventoryDocumentValidationResultSummaryDialog = (function (_super) {
            __extends(InventoryDocumentValidationResultSummaryDialog, _super);
            function InventoryDocumentValidationResultSummaryDialog() {
                var _this = _super.call(this) || this;
                _this._viewModel = new Commerce.ViewModels.InventoryDocumentValidationResultSummaryViewModel(_this.createViewModelContext());
                _this.closeClickHandler = _this._onCloseHandlerCallback.bind(_this);
                _this.reviewButtonOperationId = ko.observable("review");
                _this.okButtonOperationId = ko.observable("ok");
                _this.cancelButtonOperationId = ko.observable("cancel");
                _this.transferTileType = ko.observable(Commerce.Controls.SelectTile.SelectTileType.DoubleLine);
                return _this;
            }
            Object.defineProperty(InventoryDocumentValidationResultSummaryDialog.prototype, "viewModel", {
                get: function () {
                    return this._viewModel;
                },
                enumerable: true,
                configurable: true
            });
            InventoryDocumentValidationResultSummaryDialog.prototype.show = function (dialogState, hideOnResult) {
                if (hideOnResult === void 0) { hideOnResult = true; }
                this.visible(true);
                this._viewModel.load(dialogState.summary, dialogState.isManuallyValidated, dialogState.documentOperationType);
                return _super.prototype.show.call(this, dialogState, hideOnResult);
            };
            InventoryDocumentValidationResultSummaryDialog.prototype.buttonClickHandler = function (operationId) {
                switch (operationId) {
                    case this.reviewButtonOperationId():
                        this.dialogResult.resolve(Commerce.DialogResult.OK, Commerce.Client.Entities.InventoryDocumentValidationResultSummaryDialogActionType.Review);
                        break;
                    case this.okButtonOperationId():
                        this.dialogResult.resolve(Commerce.DialogResult.OK, Commerce.Client.Entities.InventoryDocumentValidationResultSummaryDialogActionType.Ok);
                        break;
                    case this.cancelButtonOperationId():
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel, null);
                        break;
                    default:
                        throw "InventoryDocumentValidationResultSummaryDialog: Unsupported operation id.";
                }
            };
            InventoryDocumentValidationResultSummaryDialog.prototype._onCloseHandlerCallback = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel, null);
            };
            return InventoryDocumentValidationResultSummaryDialog;
        }(Controls.ModalDialog));
        Controls.InventoryDocumentValidationResultSummaryDialog = InventoryDocumentValidationResultSummaryDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var InventoryDocumentWarningDialog = (function (_super) {
            __extends(InventoryDocumentWarningDialog, _super);
            function InventoryDocumentWarningDialog() {
                var _this = _super.call(this) || this;
                _this.contentTitle = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.contentSubTitle = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.contentMessage = ko.observable(Commerce.StringExtensions.EMPTY);
                return _this;
            }
            InventoryDocumentWarningDialog.prototype.onShowing = function (dialogState) {
                this._setDialogState(dialogState);
                this.visible(true);
            };
            InventoryDocumentWarningDialog.prototype.buttonClickHandler = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Yes, Commerce.DialogResult.Yes);
                        break;
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.No, Commerce.DialogResult.No);
                        break;
                    default:
                        throw "Unsupported operation id.";
                }
            };
            InventoryDocumentWarningDialog.prototype.closeClickHandler = function () {
                this.dialogResult.resolve(Commerce.DialogResult.No, Commerce.DialogResult.No);
            };
            InventoryDocumentWarningDialog.prototype._setDialogState = function (dialogState) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(dialogState)) {
                    return;
                }
                this.title(dialogState.title || Commerce.StringExtensions.EMPTY);
                this.contentTitle(dialogState.contentTitle || Commerce.StringExtensions.EMPTY);
                this.contentSubTitle(dialogState.contentSubTitle || Commerce.StringExtensions.EMPTY);
                this.contentMessage(dialogState.contentMessage || Commerce.StringExtensions.EMPTY);
            };
            return InventoryDocumentWarningDialog;
        }(Controls.ModalDialog));
        Controls.InventoryDocumentWarningDialog = InventoryDocumentWarningDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var PromptRegisterInventoryDocumentSerialNumberDialog = (function (_super) {
            __extends(PromptRegisterInventoryDocumentSerialNumberDialog, _super);
            function PromptRegisterInventoryDocumentSerialNumberDialog() {
                var _this = _super.call(this) || this;
                _this.documentLine = ko.observable(null);
                _this.itemPrimaryImageUrl = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this.documentLine())) {
                        return Commerce.StringExtensions.EMPTY;
                    }
                    return _this.documentLine().product.PrimaryImageUrl;
                });
                _this.itemName = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this.documentLine())) {
                        return Commerce.StringExtensions.EMPTY;
                    }
                    return _this.documentLine().product.Name;
                });
                _this.itemId = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this.documentLine())) {
                        return Commerce.StringExtensions.EMPTY;
                    }
                    return _this.documentLine().product.ItemId;
                });
                _this.productDimensionsDescription = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this.documentLine())) {
                        return Commerce.StringExtensions.EMPTY;
                    }
                    return Commerce.SimpleProductHelper.getProductDimensionsDescription(_this.documentLine().product.Dimensions);
                });
                return _this;
            }
            PromptRegisterInventoryDocumentSerialNumberDialog.prototype.onShowing = function (dialogState) {
                this._setDialogState(dialogState);
                this.visible(true);
            };
            PromptRegisterInventoryDocumentSerialNumberDialog.prototype.buttonClickHandler = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Yes, Commerce.DialogResult.Yes);
                        break;
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.No, Commerce.DialogResult.No);
                        break;
                    default:
                        throw "Unsupported operation id.";
                }
            };
            PromptRegisterInventoryDocumentSerialNumberDialog.prototype.closeClickHandler = function () {
                this.dialogResult.resolve(Commerce.DialogResult.No, Commerce.DialogResult.No);
            };
            PromptRegisterInventoryDocumentSerialNumberDialog.prototype.onRegisterSerialNumber = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Yes, Commerce.DialogResult.Yes);
            };
            PromptRegisterInventoryDocumentSerialNumberDialog.prototype._setDialogState = function (dialogState) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(dialogState)) {
                    return;
                }
                this.documentLine(dialogState.documentLine);
                this.title(Commerce.ViewModelAdapter.getResourceString("string_12800"));
            };
            return PromptRegisterInventoryDocumentSerialNumberDialog;
        }(Controls.ModalDialog));
        Controls.PromptRegisterInventoryDocumentSerialNumberDialog = PromptRegisterInventoryDocumentSerialNumberDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SelectInventoryDocumentWarehouseDialog = (function (_super) {
            __extends(SelectInventoryDocumentWarehouseDialog, _super);
            function SelectInventoryDocumentWarehouseDialog() {
                var _this = _super.call(this) || this;
                _this.title(Commerce.ViewModelAdapter.getResourceString("string_3887"));
                _this._viewModel = new Commerce.ViewModels.SelectInventoryDocumentWarehouseDialogViewModel(_this.createViewModelContext());
                return _this;
            }
            Object.defineProperty(SelectInventoryDocumentWarehouseDialog.prototype, "viewModel", {
                get: function () {
                    return this._viewModel;
                },
                enumerable: true,
                configurable: true
            });
            SelectInventoryDocumentWarehouseDialog.prototype.onShowing = function (dialogState) {
                this._viewModel.load(dialogState);
                this.visible(true);
            };
            SelectInventoryDocumentWarehouseDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            SelectInventoryDocumentWarehouseDialog.prototype.itemInvokedHandler = function (item) {
                this._viewModel.selectedWarehouse(item.InventLocation);
                this.dialogResult.resolve(Commerce.DialogResult.OK, item);
            };
            SelectInventoryDocumentWarehouseDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            SelectInventoryDocumentWarehouseDialog.prototype.onClickBack = function () {
                this.dialogResult.resolve(Commerce.DialogResult.OK, null);
            };
            return SelectInventoryDocumentWarehouseDialog;
        }(Controls.ModalDialog));
        Controls.SelectInventoryDocumentWarehouseDialog = SelectInventoryDocumentWarehouseDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SelectInventoryDocumentWarehouseLocationDialog = (function (_super) {
            __extends(SelectInventoryDocumentWarehouseLocationDialog, _super);
            function SelectInventoryDocumentWarehouseLocationDialog() {
                var _this = _super.call(this) || this;
                _this.title(Commerce.ViewModelAdapter.getResourceString("string_12426"));
                _this._viewModel = new Commerce.ViewModels.SelectInventoryDocumentWarehouseLocationDialogViewModel(_this.createViewModelContext());
                return _this;
            }
            Object.defineProperty(SelectInventoryDocumentWarehouseLocationDialog.prototype, "viewModel", {
                get: function () {
                    return this._viewModel;
                },
                enumerable: true,
                configurable: true
            });
            SelectInventoryDocumentWarehouseLocationDialog.prototype.onShowing = function (dialogState) {
                this._viewModel.load(dialogState);
                this.visible(true);
            };
            SelectInventoryDocumentWarehouseLocationDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            SelectInventoryDocumentWarehouseLocationDialog.prototype.itemInvokedHandler = function (item) {
                this._viewModel.selectedWarehouseLocation(item.LocationId);
                this.dialogResult.resolve(Commerce.DialogResult.OK, {
                    reenterProductId: false,
                    selectedWarehouseLocation: item,
                });
            };
            SelectInventoryDocumentWarehouseLocationDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            SelectInventoryDocumentWarehouseLocationDialog.prototype.onClickBack = function () {
                this.dialogResult.resolve(Commerce.DialogResult.OK, {
                    reenterProductId: true,
                });
            };
            return SelectInventoryDocumentWarehouseLocationDialog;
        }(Controls.ModalDialog));
        Controls.SelectInventoryDocumentWarehouseLocationDialog = SelectInventoryDocumentWarehouseLocationDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SelectStoreDialog = (function (_super) {
            __extends(SelectStoreDialog, _super);
            function SelectStoreDialog() {
                var _this = _super.call(this) || this;
                _this.stores = ko.observableArray([]);
                _this.title(Commerce.ViewModelAdapter.getResourceString("string_3887"));
                _this.subTitle(Commerce.ViewModelAdapter.getResourceString("string_3420"));
                return _this;
            }
            SelectStoreDialog.prototype.onShowing = function (state) {
                this.stores(state.stores);
                this.visible(true);
            };
            SelectStoreDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            SelectStoreDialog.prototype.itemClickHandler = function (event) {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { selectedOrgUnit: event.data });
                return true;
            };
            return SelectStoreDialog;
        }(Controls.ModalDialog));
        Controls.SelectStoreDialog = SelectStoreDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SelectWarehouseDialog = (function (_super) {
            __extends(SelectWarehouseDialog, _super);
            function SelectWarehouseDialog() {
                var _this = _super.call(this) || this;
                _this.title(Commerce.ViewModelAdapter.getResourceString("string_3891"));
                _this.viewModel = new Commerce.ViewModels.SelectWarehouseViewModel(_this.createViewModelContext());
                return _this;
            }
            SelectWarehouseDialog.prototype.onShowing = function () {
                this.visible(true);
            };
            SelectWarehouseDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            SelectWarehouseDialog.prototype.itemInvokedHandler = function (item) {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { selectedWarehouse: item });
            };
            SelectWarehouseDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return SelectWarehouseDialog;
        }(Controls.ModalDialog));
        Controls.SelectWarehouseDialog = SelectWarehouseDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SelectWarehouseLocationDialog = (function (_super) {
            __extends(SelectWarehouseLocationDialog, _super);
            function SelectWarehouseLocationDialog() {
                var _this = _super.call(this) || this;
                _this.title(Commerce.ViewModelAdapter.getResourceString("string_3892"));
                _this.viewModel = new Commerce.ViewModels.SelectWarehouseLocationViewModel(_this.createViewModelContext());
                return _this;
            }
            SelectWarehouseLocationDialog.prototype.onShowing = function () {
                this.visible(true);
            };
            SelectWarehouseLocationDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            SelectWarehouseLocationDialog.prototype.itemInvokedHandler = function (item) {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { selectedWarehouseLocation: item });
            };
            SelectWarehouseLocationDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return SelectWarehouseLocationDialog;
        }(Controls.ModalDialog));
        Controls.SelectWarehouseLocationDialog = SelectWarehouseLocationDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var GetVariantSelectionMethodDialog = (function (_super) {
            __extends(GetVariantSelectionMethodDialog, _super);
            function GetVariantSelectionMethodDialog() {
                var _this = _super.call(this) || this;
                _this.title(Commerce.ViewModelAdapter.getResourceString("string_923"));
                _this.product = ko.observable(null);
                return _this;
            }
            GetVariantSelectionMethodDialog.prototype.onShowing = function (state) {
                this.product(state.product);
                this.visible(true);
            };
            GetVariantSelectionMethodDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            GetVariantSelectionMethodDialog.prototype.viewAllVariantsOption = function () {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { variantSelectionMethod: Commerce.Activities.VariantSelectionMethod.ViewAllVariants });
            };
            GetVariantSelectionMethodDialog.prototype.selectVariantOption = function () {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { variantSelectionMethod: Commerce.Activities.VariantSelectionMethod.SelectVariant });
            };
            return GetVariantSelectionMethodDialog;
        }(Controls.ModalDialog));
        Controls.GetVariantSelectionMethodDialog = GetVariantSelectionMethodDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SelectApplicableWarrantiesDialog = (function (_super) {
            __extends(SelectApplicableWarrantiesDialog, _super);
            function SelectApplicableWarrantiesDialog() {
                var _this = _super.call(this) || this;
                _this._selectedWarranty = ko.observable(null);
                _this.applicableWarranties = ko.observableArray([]);
                _this.productName = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.productSubtitle = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.noWarrantySelected = ko.computed(function () { return Commerce.ObjectExtensions.isNullOrUndefined(_this._selectedWarranty()); });
                return _this;
            }
            SelectApplicableWarrantiesDialog.prototype.onShowing = function (dialogInput) {
                this._dialogState = dialogInput;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._dialogState.product)) {
                    this.productName(this._dialogState.product.Name);
                    this.productSubtitle(Commerce.Formatters.productSubtitle(this._dialogState.product));
                }
                if (Commerce.ArrayExtensions.hasElements(this._dialogState.applicableWarranties)) {
                    this.applicableWarranties(this._dialogState.applicableWarranties);
                }
                else {
                    this.applicableWarranties([]);
                }
                this.visible(true);
            };
            SelectApplicableWarrantiesDialog.prototype.selectWarrantyButtonClick = function (operationId) {
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.dialogsSelectApplicableWarrantiesDialogButtonClicked(correlationId, operationId);
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this._cancelDialog();
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this._resolveDialog();
                        break;
                }
            };
            SelectApplicableWarrantiesDialog.prototype.warrantySelectedEventHandler = function (selectedItems) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(selectedItems)) {
                    return;
                }
                if (selectedItems.length > 1) {
                    Commerce.ViewModelAdapter.displayMessage(Commerce.ErrorTypeEnum.WARRANTY_ONLY_SUPPORT_SINGLE_SELECT, Commerce.MessageType.Error, Commerce.MessageBoxButtons.Default);
                    return;
                }
                var selectedItem = Commerce.ArrayExtensions.firstOrUndefined(selectedItems);
                this._selectedWarranty(selectedItem);
            };
            SelectApplicableWarrantiesDialog.prototype._cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            SelectApplicableWarrantiesDialog.prototype._resolveDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { selectedWarranty: this._selectedWarranty() });
            };
            return SelectApplicableWarrantiesDialog;
        }(Controls.ModalDialog));
        Controls.SelectApplicableWarrantiesDialog = SelectApplicableWarrantiesDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SelectVariantDialog = (function (_super) {
            __extends(SelectVariantDialog, _super);
            function SelectVariantDialog() {
                var _this = _super.call(this) || this;
                _this._viewModel = new Commerce.ViewModels.SelectVariantViewModel(_this.createViewModelContext());
                _this._isLoadingData = false;
                _this.focusOnFirstElementCallback = ko.observable(function () { return; });
                return _this;
            }
            Object.defineProperty(SelectVariantDialog.prototype, "viewModel", {
                get: function () {
                    return this._viewModel;
                },
                enumerable: true,
                configurable: true
            });
            SelectVariantDialog.prototype.onShowing = function (dialogState) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState)
                    && !Commerce.ObjectExtensions.isNullOrUndefined(dialogState.product)) {
                    var product = dialogState.product;
                    this.title(Commerce.StringExtensions.isNullOrWhitespace(dialogState.title) ?
                        Commerce.ViewModelAdapter.getResourceString("string_923") :
                        dialogState.title);
                    this.subTitle(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_929"), product.ItemId, product.Name));
                    this._viewModel.load({ product: product, preLoadedDimensionDetails: dialogState.preLoadedDimensionDetails });
                    this.visible(true);
                }
            };
            SelectVariantDialog.prototype.clearResult = function () {
                _super.prototype.clearResult.call(this);
                this._isLoadingData = false;
                this.undoPreviousSelection();
            };
            SelectVariantDialog.prototype.undoPreviousSelection = function () {
                this._viewModel.undoPreviousSelection();
                this._setFocusOnFirstDimensionValue();
            };
            SelectVariantDialog.prototype.selectionInvokedHandler = function (event) {
                var _this = this;
                if (!this._isLoadingData) {
                    this.indeterminateWaitVisible(true);
                    this._isLoadingData = true;
                    this._viewModel.makeSelection(event.data).done(function (selectionCompleted) {
                        if (selectionCompleted) {
                            _this.dialogResult.resolve(Commerce.DialogResult.OK, { selectedDimensions: _this._viewModel.SelectedDimensions });
                        }
                        else {
                            _this.indeterminateWaitVisible(false);
                            _this._isLoadingData = false;
                            _this._setFocusOnFirstDimensionValue();
                        }
                    }).fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                        _this.indeterminateWaitVisible(false);
                        _this._isLoadingData = false;
                    });
                }
                return true;
            };
            SelectVariantDialog.prototype.dialogButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    default:
                        throw "Unknown operation Id: " + operationId;
                }
            };
            SelectVariantDialog.prototype.onClickClose = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            SelectVariantDialog.prototype._setFocusOnFirstDimensionValue = function () {
                var _this = this;
                Commerce.Host.instance.timers.setImmediate(function () {
                    _this.focusOnFirstElementCallback()();
                });
            };
            return SelectVariantDialog;
        }(Controls.ModalDialog));
        Controls.SelectVariantDialog = SelectVariantDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SerialNumberInputDialog = (function (_super) {
            __extends(SerialNumberInputDialog, _super);
            function SerialNumberInputDialog() {
                var _this = _super.call(this) || this;
                _this._serialNumber = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.subTitleCssClass("primaryFontColor");
                _this.okButtonDisabled = ko.computed(function () {
                    return Commerce.StringExtensions.isNullOrWhitespace(_this._serialNumber());
                });
                _this.title(Commerce.ViewModelAdapter.getResourceString("string_820"));
                return _this;
            }
            SerialNumberInputDialog.prototype.onShowing = function (dialogState) {
                var _this = this;
                if (dialogState) {
                    var product = dialogState.product;
                    this.subTitle(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_929"), product.ItemId, product.Name));
                }
                this._correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.dialogsSerialNumberInputDialogShown(this._correlationId);
                Commerce.Peripherals.instance.barcodeScanner.enableAsync(function (barcode) { return _this._onValueScanned(barcode); });
                this.visible(true);
            };
            SerialNumberInputDialog.prototype.onHidden = function () {
                Commerce.Peripherals.instance.barcodeScanner.disableAsync();
                _super.prototype.onHidden.call(this);
            };
            SerialNumberInputDialog.prototype.buttonClickHandler = function (buttonId) {
                Commerce.RetailLogger.dialogsSerialNumberInputDialogButtonClicked(buttonId, this._correlationId);
                switch (buttonId) {
                    case Commerce.Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, this._serialNumber());
                        break;
                    case Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Commerce.Controls.SerialNumberInputDialog.ADD_LATER_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, null);
                        break;
                }
            };
            SerialNumberInputDialog.prototype.dialogCloseButtonClick = function () {
                this.buttonClickHandler(Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK);
            };
            SerialNumberInputDialog.prototype._onValueScanned = function (value) {
                Commerce.RetailLogger.dialogsSerialNumberInputDialogValueScanned(this._correlationId);
                this._serialNumber(value);
                this.buttonClickHandler(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
            };
            SerialNumberInputDialog.ADD_LATER_BUTTON_CLICK = "addLaterButtonClick";
            return SerialNumberInputDialog;
        }(Controls.ModalDialog));
        Controls.SerialNumberInputDialog = SerialNumberInputDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SerialNumberNumpadDialog = (function (_super) {
            __extends(SerialNumberNumpadDialog, _super);
            function SerialNumberNumpadDialog() {
                var _this = _super.call(this) || this;
                _this.product = ko.observable(null);
                _this.numpadTextValue = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.numpadLabel = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.itemId = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this.product())) {
                        return Commerce.StringExtensions.EMPTY;
                    }
                    return _this.product().ItemId;
                });
                _this.itemName = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this.product())) {
                        return Commerce.StringExtensions.EMPTY;
                    }
                    return _this.product().Name;
                });
                _this.primaryImageUrl = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this.product())) {
                        return Commerce.StringExtensions.EMPTY;
                    }
                    return _this.product().PrimaryImageUrl;
                });
                _this.dimensionsDescription = ko.computed(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this.product())) {
                        return Commerce.StringExtensions.EMPTY;
                    }
                    return Commerce.SimpleProductHelper.getProductDimensionsDescription(_this.product().Dimensions);
                });
                return _this;
            }
            SerialNumberNumpadDialog.prototype.onShowing = function (dialogState) {
                var _this = this;
                this._correlationId = dialogState.correlationId;
                Commerce.RetailLogger.dialogsSerialNumberNumpadDialogShown(this._correlationId);
                Commerce.Peripherals.instance.barcodeScanner.enableAsync(function (barcode) { return _this._onValueScanned(barcode); });
                this._setDialogState(dialogState);
                this.visible(true);
            };
            SerialNumberNumpadDialog.prototype.hide = function () {
                Commerce.Peripherals.instance.barcodeScanner.disableAsync();
                return _super.prototype.hide.call(this);
            };
            SerialNumberNumpadDialog.prototype.onTextBoxEnterEventHandler = function () {
                var value = this.numpadTextValue();
                if (!Commerce.ObjectExtensions.isNullOrUndefined(value) && value.length > 20) {
                    Commerce.NotificationHandler.displayErrorMessage("string_12815");
                    return;
                }
                this.dialogResult.resolve(Commerce.DialogResult.OK, value);
            };
            SerialNumberNumpadDialog.prototype.closeButtonClick = function () {
                Commerce.RetailLogger.dialogsSerialNumberNumpadDialogButtonClicked(Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK, this._correlationId);
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            SerialNumberNumpadDialog.prototype._onValueScanned = function (value) {
                Commerce.RetailLogger.dialogsSerialNumberNumpadDialogValueScanned(this._correlationId);
                this.numpadTextValue(value);
                this.onTextBoxEnterEventHandler();
            };
            SerialNumberNumpadDialog.prototype._setDialogState = function (dialogState) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(dialogState)) {
                    return;
                }
                this.product(dialogState.product);
                this.numpadTextValue(Commerce.ObjectExtensions.isNullOrUndefined(dialogState.serialNumber) ? Commerce.StringExtensions.EMPTY : dialogState.serialNumber);
                this.title(Commerce.ObjectExtensions.isNullOrUndefined(dialogState.serialNumber)
                    ? Commerce.ViewModelAdapter.getResourceString("string_12800")
                    : Commerce.ViewModelAdapter.getResourceString("string_12814"));
                this.numpadLabel(Commerce.ViewModelAdapter.getResourceString("string_12813"));
            };
            return SerialNumberNumpadDialog;
        }(Controls.ModalDialog));
        Controls.SerialNumberNumpadDialog = SerialNumberNumpadDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SetDisassembleQuantityDialog = (function (_super) {
            __extends(SetDisassembleQuantityDialog, _super);
            function SetDisassembleQuantityDialog() {
                var _this = _super.call(this) || this;
                _this.productImageUrl = ko.observable("");
                _this.productDescription = ko.observable("");
                _this.productNumber = ko.observable("");
                _this.itemQuantity = ko.observable("1");
                _this.title(Commerce.ViewModelAdapter.getResourceString("string_5364"));
                _this.isOKButtonDisabled = ko.computed(function () {
                    var quantity = Commerce.NumberExtensions.parseNumber(_this.itemQuantity());
                    return isNaN(quantity) || quantity <= 0;
                });
                return _this;
            }
            SetDisassembleQuantityDialog.prototype.onShowing = function (dialogState) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(dialogState.product)) {
                    this.cancelDialog();
                    return;
                }
                this.indeterminateWaitVisible(false);
                this.productImageUrl(dialogState.productImage.source);
                this.productDescription(dialogState.product.Name);
                this.productNumber(dialogState.product.ItemId);
                this.itemQuantity(Commerce.NumberExtensions.formatNumber(dialogState.originalQuantity, 0));
                this.visible(true);
            };
            SetDisassembleQuantityDialog.prototype.onTextBoxEnterEventHandler = function () {
                if (!this.isOKButtonDisabled()) {
                    this.setItemDisassembleQuantityInvokedHandler(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
                }
            };
            SetDisassembleQuantityDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            SetDisassembleQuantityDialog.prototype.setItemDisassembleQuantityInvokedHandler = function (operationId) {
                if (operationId === Commerce.Controls.Dialog.OperationIds.OK_BUTTON_CLICK) {
                    var quantity = Commerce.NumberExtensions.parseNumber(this.itemQuantity());
                    if (quantity <= 0) {
                        Commerce.ViewModelAdapter.displayMessage("string_3384", Commerce.MessageType.Error, Commerce.MessageBoxButtons.Default, "string_3383");
                    }
                    else {
                        this.dialogResult.resolve(Commerce.DialogResult.OK, quantity);
                    }
                }
                else {
                    this.cancelDialog();
                }
            };
            SetDisassembleQuantityDialog.prototype.cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return SetDisassembleQuantityDialog;
        }(Controls.ModalDialog));
        Controls.SetDisassembleQuantityDialog = SetDisassembleQuantityDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var NotificationCenterDialog = (function (_super) {
            __extends(NotificationCenterDialog, _super);
            function NotificationCenterDialog() {
                var _this = _super.call(this) || this;
                _this._notificationCenterViewModel = new Commerce.ViewModels.NotificationCenterViewModel(_this.createViewModelContext());
                return _this;
            }
            NotificationCenterDialog.prototype.onShowing = function (dialogOptions) {
                this._handleOperation = dialogOptions.handleOperation;
                Commerce.Session.instance.addRecentlyPulledNotificationsUpdateHandler(this.element, this.viewModel.updateNotifications.bind(this.viewModel));
                Commerce.Session.instance.newNotificationStatus = false;
                this.visible(true);
            };
            Object.defineProperty(NotificationCenterDialog.prototype, "viewModel", {
                get: function () {
                    return this._notificationCenterViewModel;
                },
                enumerable: true,
                configurable: true
            });
            NotificationCenterDialog.prototype.navigate = function (action, actionProperty) {
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                if (action === Commerce.Operations.RetailOperation.ViewOrderFulfillmentLines) {
                    Commerce.RetailLogger.fulfillmentViewNavigationStart(actionProperty, correlationId);
                }
                var isNavigateSuccessful = this._handleOperation(action, actionProperty, Commerce.StringExtensions.EMPTY, correlationId);
                if (isNavigateSuccessful) {
                    Commerce.NotificationHelper.acknowledgeNotifications(Commerce.Session.instance.lastPullDateTime);
                    this.dialogResult.resolve(Commerce.DialogResult.OK);
                }
            };
            NotificationCenterDialog.prototype.notificationDialogCloseButtonClick = function () {
                Commerce.NotificationHelper.acknowledgeNotifications(Commerce.Session.instance.lastPullDateTime);
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            NotificationCenterDialog.prototype.dispose = function () {
                Commerce.Session.instance.removeRecentlyPulledNotificationsUpdateHandler(this.element, this.viewModel.updateNotifications);
                _super.prototype.dispose.call(this);
            };
            NotificationCenterDialog.prototype.submitCustomerSatisfactionSurvey = function () {
                this.viewModel.sendCustomerSatisfactionSurveyAsync();
            };
            NotificationCenterDialog.prototype.omitCustomerSatisfactionSurvey = function () {
                this.viewModel.cancelCustomerSatisfactionSurveyAsync();
                this.closeCustomerSatisfactionNotification();
            };
            NotificationCenterDialog.prototype.closeCustomerSatisfactionNotification = function () {
                this.viewModel.updateNotifications();
                if (this.viewModel.hasNotifications()) {
                    this.viewModel.displayCustomerSatisfaction(false);
                }
                else {
                    this.notificationDialogCloseButtonClick();
                }
            };
            return NotificationCenterDialog;
        }(Controls.ModalDialog));
        Controls.NotificationCenterDialog = NotificationCenterDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var DatabaseConnectionStatusDialog = (function (_super) {
            __extends(DatabaseConnectionStatusDialog, _super);
            function DatabaseConnectionStatusDialog() {
                var _this = _super.call(this) || this;
                _this.status = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.isConnected = ko.observable(false);
                return _this;
            }
            DatabaseConnectionStatusDialog.prototype.onShowing = function (dialogState) {
                if (dialogState.connectionStatus) {
                    this.status(Commerce.ViewModelAdapter.getResourceString("string_6610"));
                }
                else {
                    this.status(Commerce.ViewModelAdapter.getResourceString("string_6611"));
                }
                this.isConnected(dialogState.connectionStatus);
                this.visible(true);
            };
            DatabaseConnectionStatusDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return DatabaseConnectionStatusDialog;
        }(Controls.ModalDialog));
        Controls.DatabaseConnectionStatusDialog = DatabaseConnectionStatusDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var CommentDialog = (function (_super) {
            __extends(CommentDialog, _super);
            function CommentDialog() {
                var _this = _super.call(this) || this;
                _this.inputLabel = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.textContent = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.textMaxLength = ko.observable(null);
                _this.rowsNumber = ko.observable(CommentDialog.DEFAULT_ROWS_NUMBER);
                _this.listTitle = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.comments = ko.observable([]);
                _this.hideScrollbar = ko.observable(false);
                _this._enterKeyDisabled = false;
                _this.hasComments = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.comments()) &&
                        Commerce.ArrayExtensions.hasElements(_this.comments());
                }, _this);
                _this.commentHasNoContent = ko.computed(function () {
                    return Commerce.StringExtensions.isNullOrWhitespace(_this.textContent());
                }, _this);
                return _this;
            }
            CommentDialog.prototype.onKeyDown = function (caller, event) {
                if (event.keyCode === 13 && this._enterKeyDisabled) {
                    event.preventDefault();
                    return false;
                }
                return true;
            };
            CommentDialog.prototype.onShowing = function (dialogState) {
                if (dialogState) {
                    this.title(dialogState.title);
                    this.subTitle(dialogState.subTitle);
                    this.inputLabel(dialogState.inputLabel);
                    this.textMaxLength(dialogState.maxLength);
                    this.textContent(dialogState.content);
                    this.listTitle(dialogState.listTitle);
                    this.comments(dialogState.comments);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.rowsNumber)) {
                        this.rowsNumber(dialogState.rowsNumber);
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.hideScrollbar)) {
                        this.hideScrollbar(dialogState.hideScrollbar);
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.enterKeyDisabled)) {
                        this._enterKeyDisabled = dialogState.enterKeyDisabled;
                    }
                }
                this.visible(true);
            };
            CommentDialog.prototype.setTextContent = function (updatedText) {
                this.textContent(updatedText);
            };
            CommentDialog.prototype.dialogCloseButtonClickHandler = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            CommentDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Commerce.Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, { newCommentText: this.textContent() });
                        break;
                    case Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel, { newCommentText: Commerce.StringExtensions.EMPTY });
                        break;
                }
            };
            CommentDialog.DEFAULT_ROWS_NUMBER = 5;
            return CommentDialog;
        }(Controls.ModalDialog));
        Controls.CommentDialog = CommentDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var EditSalesOrderAttributesDialog = (function (_super) {
            __extends(EditSalesOrderAttributesDialog, _super);
            function EditSalesOrderAttributesDialog() {
                var _this = _super.call(this) || this;
                _this.attributeViewModels = ko.observableArray([]);
                _this.attributeGroupName = ko.observable(null);
                return _this;
            }
            EditSalesOrderAttributesDialog.prototype.onShowing = function (dialogInput) {
                var _this = this;
                this.title(Commerce.ViewModelAdapter.getResourceString("string_4477"));
                this.attributeGroupName(dialogInput.attributeGroupName);
                this.attributeViewModels([]);
                dialogInput.attributesData.forEach(function (attributeData) {
                    var salesOrderAttributeViewModelOptions = {
                        attributeDefinition: attributeData.attributeDefinition
                    };
                    var viewModel = new Commerce.ViewModels.SalesOrderAttributeViewModel(_this.createViewModelContext(), salesOrderAttributeViewModelOptions);
                    viewModel.attributeValue(attributeData.attributeValue);
                    _this.attributeViewModels.push(viewModel);
                });
                this.visible(true);
            };
            EditSalesOrderAttributesDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Commerce.Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, this._getModifiedAttributeValues());
                        break;
                    case Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        this.attributeViewModels().forEach(function (vm) {
                            vm.cancelChanges();
                        });
                        break;
                }
            };
            EditSalesOrderAttributesDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            EditSalesOrderAttributesDialog.prototype._getModifiedAttributeValues = function () {
                var modifiedAttributeValues = [];
                this.attributeViewModels().forEach(function (vm) {
                    if (vm.isModified()) {
                        vm.commitChanges();
                        modifiedAttributeValues.push(vm.attributeValue());
                    }
                });
                return modifiedAttributeValues;
            };
            return EditSalesOrderAttributesDialog;
        }(Controls.ModalDialog));
        Controls.EditSalesOrderAttributesDialog = EditSalesOrderAttributesDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var GetOrderTypeDialog = (function (_super) {
            __extends(GetOrderTypeDialog, _super);
            function GetOrderTypeDialog() {
                var _this = _super.call(this) || this;
                _this._customerOrderTypeButton = {
                    orderMode: Commerce.Proxy.Entities.CustomerOrderMode.CustomerOrderCreateOrEdit,
                    operationName: Commerce.ViewModelAdapter.getResourceString("string_7131")
                };
                _this._quotationOrderTypeButton = {
                    orderMode: Commerce.Proxy.Entities.CustomerOrderMode.QuoteCreateOrEdit,
                    operationName: Commerce.ViewModelAdapter.getResourceString("string_7132")
                };
                _this._orderTypeList = ko.observableArray([]);
                return _this;
            }
            GetOrderTypeDialog.prototype.onShowing = function () {
                this._orderTypeList([this._customerOrderTypeButton, this._quotationOrderTypeButton]);
                this.indeterminateWaitVisible(false);
                this.visible(true);
            };
            GetOrderTypeDialog.prototype.dialogButtonClick = function (operationId) {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            GetOrderTypeDialog.prototype.orderTypeListInvokedHandler = function (eventArgs) {
                var buttonControl = eventArgs.data;
                var customerOrderMode = buttonControl.orderMode;
                this.dialogResult.resolve(Commerce.DialogResult.OK, customerOrderMode);
            };
            return GetOrderTypeDialog;
        }(Controls.ModalDialog));
        Controls.GetOrderTypeDialog = GetOrderTypeDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var GetQuotationExpirationDateDialog = (function (_super) {
            __extends(GetQuotationExpirationDateDialog, _super);
            function GetQuotationExpirationDateDialog() {
                var _this = _super.call(this) || this;
                _this.minYear = ko.observable(Commerce.DateExtensions.now.getFullYear());
                _this._requestedExpirationDate = ko.observable(Commerce.DateExtensions.getDate());
                _this._selectQuotationExpirationDateInput = ko.observable(function () { return; });
                _this.isOKButtonDisabled = ko.computed(function () {
                    var shippingDate = _this._requestedExpirationDate();
                    return !Commerce.Utilities.DateTimeHelper.isTodayOrFutureDateInChannelTimeZone(shippingDate);
                });
                return _this;
            }
            GetQuotationExpirationDateDialog.prototype.onShowing = function (dialogOptions) {
                dialogOptions = dialogOptions || {};
                dialogOptions.originalExpirationDate = dialogOptions.originalExpirationDate || Commerce.DateExtensions.getDate();
                this._requestedExpirationDate(dialogOptions.originalExpirationDate);
                this.indeterminateWaitVisible(false);
                this.visible(true);
            };
            GetQuotationExpirationDateDialog.prototype.afterShow = function () {
                this._selectQuotationExpirationDateInput()();
            };
            GetQuotationExpirationDateDialog.prototype.getQuotationExpirationDateButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.getQuotationExpirationDateInvokedHandler();
                        break;
                }
            };
            GetQuotationExpirationDateDialog.prototype.dateChangeHandler = function (event) {
                var datePickerDiv = event.currentTarget;
                var datePickerControl = datePickerDiv.winControl;
                this._requestedExpirationDate(Commerce.DateExtensions.getDate(datePickerControl.current));
            };
            GetQuotationExpirationDateDialog.prototype.getQuotationExpirationDateInvokedHandler = function () {
                var response = {
                    expirationDate: this._requestedExpirationDate()
                };
                this.dialogResult.resolve(Commerce.DialogResult.OK, response);
            };
            return GetQuotationExpirationDateDialog;
        }(Controls.ModalDialog));
        Controls.GetQuotationExpirationDateDialog = GetQuotationExpirationDateDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var GetShippingChargeDialog = (function (_super) {
            __extends(GetShippingChargeDialog, _super);
            function GetShippingChargeDialog() {
                var _this = _super.call(this) || this;
                _this._shippingCharge = ko.observable("0");
                _this._deliveryMethodDescription = ko.observable(Commerce.StringExtensions.EMPTY);
                _this._isOKButtonDisabled = ko.computed(function () {
                    var shippingCharge = Commerce.NumberExtensions.parseNumber(_this._shippingCharge());
                    return isNaN(shippingCharge) || shippingCharge < 0;
                });
                return _this;
            }
            GetShippingChargeDialog.prototype.onShowing = function (dialogOptions) {
                dialogOptions = dialogOptions || {};
                dialogOptions.originalShippingCharge = dialogOptions.originalShippingCharge || 0;
                dialogOptions.deliveryMethodDescription = dialogOptions.deliveryMethodDescription || Commerce.StringExtensions.EMPTY;
                this._shippingCharge(Commerce.NumberExtensions.formatNumber(dialogOptions.originalShippingCharge, Commerce.NumberExtensions.getDecimalPrecision()));
                this._deliveryMethodDescription(dialogOptions.deliveryMethodDescription);
                this.indeterminateWaitVisible(false);
                this.visible(true);
            };
            GetShippingChargeDialog.prototype.getShippingChargeButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.getShippingChargeInvokedHandler();
                        break;
                }
            };
            GetShippingChargeDialog.prototype.onTextBoxEnterEventHandler = function () {
                if (!this._isOKButtonDisabled()) {
                    this.getShippingChargeButtonClick(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
                }
            };
            GetShippingChargeDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            GetShippingChargeDialog.prototype.getShippingChargeInvokedHandler = function () {
                var response = {
                    shippingChargeAmount: Commerce.NumberExtensions.parseNumber(this._shippingCharge())
                };
                this.dialogResult.resolve(Commerce.DialogResult.OK, response);
            };
            return GetShippingChargeDialog;
        }(Controls.ModalDialog));
        Controls.GetShippingChargeDialog = GetShippingChargeDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var GetShippingDateDialog = (function (_super) {
            __extends(GetShippingDateDialog, _super);
            function GetShippingDateDialog() {
                var _this = _super.call(this) || this;
                _this.dialogTitle = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.dialogSubTitle = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.dateInputLabel = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.minYear = ko.observable(Commerce.DateExtensions.now.getFullYear());
                _this._requestedShipDate = ko.observable(Commerce.DateExtensions.getDate());
                _this._deliveryMethodDescription = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.isOKButtonDisabled = ko.computed(function () {
                    var shippingDate = _this._requestedShipDate();
                    return !Commerce.Utilities.DateTimeHelper.isTodayOrFutureDateInChannelTimeZone(shippingDate);
                });
                return _this;
            }
            GetShippingDateDialog.prototype.onShowing = function (dialogOptions) {
                dialogOptions = dialogOptions || {};
                dialogOptions.title = dialogOptions.title || Commerce.ViewModelAdapter.getResourceString("string_2519");
                dialogOptions.originalShippingDate = dialogOptions.originalShippingDate || Commerce.DateExtensions.getDate();
                if (!Commerce.StringExtensions.isNullOrWhitespace(dialogOptions.deliveryMethodDescription)) {
                    dialogOptions.subTitle = Commerce.ViewModelAdapter.getResourceString("string_2516");
                    dialogOptions.deliveryMethodDescription = dialogOptions.deliveryMethodDescription || Commerce.StringExtensions.EMPTY;
                }
                else {
                    dialogOptions.subTitle = dialogOptions.subTitle;
                }
                dialogOptions.dateInputLabel = dialogOptions.dateInputLabel || Commerce.ViewModelAdapter.getResourceString("string_1873");
                this.dialogTitle(dialogOptions.title);
                this.dialogSubTitle(dialogOptions.subTitle);
                this.dateInputLabel(dialogOptions.dateInputLabel);
                this._requestedShipDate(dialogOptions.originalShippingDate);
                this._deliveryMethodDescription(dialogOptions.deliveryMethodDescription);
                this.indeterminateWaitVisible(false);
                this.visible(true);
            };
            GetShippingDateDialog.prototype.getShippingDateButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.getShippingDateInvokedHandler();
                        break;
                }
            };
            GetShippingDateDialog.prototype.dateChangeHandler = function (event) {
                var datePickerDiv = event.currentTarget;
                var datePickerControl = datePickerDiv.winControl;
                this._requestedShipDate(Commerce.DateExtensions.getDate(datePickerControl.current));
            };
            GetShippingDateDialog.prototype.getShippingDateInvokedHandler = function () {
                var response = {
                    requestedShippingDate: this._requestedShipDate()
                };
                this.dialogResult.resolve(Commerce.DialogResult.OK, response);
            };
            return GetShippingDateDialog;
        }(Controls.ModalDialog));
        Controls.GetShippingDateDialog = GetShippingDateDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var ReturnMultipleTransactionDialog = (function (_super) {
            __extends(ReturnMultipleTransactionDialog, _super);
            function ReturnMultipleTransactionDialog() {
                var _this = _super.call(this) || this;
                _this._multipleTransactionStoreNames = ko.observableArray([]);
                _this._multipleTransactionRegisterNumbers = ko.observableArray([]);
                _this._multipleTransactionStore = ko.observable(null);
                _this._multipleTransactionRegister = ko.observable(null);
                _this._isOKButtonDisabled = ko.observable(true);
                _this._multipleTransactionRegisterNumberDisabled = ko.observable(true);
                _this._multipleTransactionStoreNameFocus = ko.observable(false);
                _this._multipleTransactionRegisterNumberFocus = ko.observable(false);
                _this._multipleTransactionStore.subscribe(function (newValue) {
                    if (newValue === undefined) {
                        _this._multipleTransactionRegisterNumberDisabled(true);
                        _this._isOKButtonDisabled(true);
                        _this._multipleTransactionRegisterNumbers([]);
                    }
                    else {
                        _this._multipleTransactionRegisterNumbers(newValue);
                        _this._multipleTransactionRegisterNumberDisabled(false);
                        _this._multipleTransactionRegisterNumberFocus(true);
                    }
                }, _this);
                _this._multipleTransactionRegister.subscribe(function (newValue) {
                    _this._isOKButtonDisabled(newValue === undefined);
                    if (newValue === undefined) {
                        _this._selectedSalesOrder = null;
                    }
                    else {
                        _this._selectedSalesOrder = newValue;
                    }
                }, _this);
                return _this;
            }
            ReturnMultipleTransactionDialog.prototype.returnMultipleTransactionDialogButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.cancelDialog();
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.transactionSelected();
                        break;
                }
            };
            ReturnMultipleTransactionDialog.prototype.onShowing = function (dialogState) {
                var storeList = dialogState.storeList;
                if (Commerce.ObjectExtensions.isNullOrUndefined(storeList) || (storeList.length === 0)) {
                    this.cancelDialog();
                    return;
                }
                this._multipleTransactionStoreNames(storeList);
                this._multipleTransactionRegisterNumberDisabled(true);
                this._isOKButtonDisabled(true);
                this._multipleTransactionStoreNameFocus(true);
                this.visible(true);
            };
            ReturnMultipleTransactionDialog.prototype.cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            ReturnMultipleTransactionDialog.prototype.transactionSelected = function () {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { salesOrder: this._selectedSalesOrder });
            };
            return ReturnMultipleTransactionDialog;
        }(Controls.ModalDialog));
        Controls.ReturnMultipleTransactionDialog = ReturnMultipleTransactionDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var SelectDeliveryModeDialog = (function (_super) {
            __extends(SelectDeliveryModeDialog, _super);
            function SelectDeliveryModeDialog() {
                var _this = _super.call(this) || this;
                _this.dialogContent = ko.observable(Commerce.ViewModelAdapter.getResourceString("string_5747"));
                _this.deliveryModesForCartLines = ko.observableArray([]);
                _this.buttonLabel = ko.observable(Commerce.ViewModelAdapter.getResourceString("string_80"));
                return _this;
            }
            SelectDeliveryModeDialog.prototype.onShowing = function (dialogState) {
                this.deliveryModesForCartLines(dialogState.deliveryModes);
                if (Commerce.ArrayExtensions.hasElements(this.deliveryModesForCartLines())) {
                    this.dialogContent("");
                    this.buttonLabel(Commerce.ViewModelAdapter.getResourceString("string_76"));
                }
                this.visible(true);
            };
            SelectDeliveryModeDialog.prototype.selectDeliveryModeDialogButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this._cancelDialog();
                        break;
                }
            };
            SelectDeliveryModeDialog.prototype.selectDeliveryModeInvokedHandler = function (event) {
                var selectedDeliveryMode = event.data.deliveryMode;
                this.dialogResult.resolve(Commerce.DialogResult.OK, {
                    selectedDeliveryMode: selectedDeliveryMode
                });
            };
            SelectDeliveryModeDialog.prototype.dialogCloseButtonClick = function () {
                this._cancelDialog();
            };
            SelectDeliveryModeDialog.prototype._cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return SelectDeliveryModeDialog;
        }(Controls.ModalDialog));
        Controls.SelectDeliveryModeDialog = SelectDeliveryModeDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SelectPackingSlipIdDialog = (function (_super) {
            __extends(SelectPackingSlipIdDialog, _super);
            function SelectPackingSlipIdDialog() {
                var _this = _super.call(this) || this;
                _this.salesId = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.packingSlipsData = ko.observableArray([]);
                _this.title(Commerce.ViewModelAdapter.getResourceString("string_13176"));
                return _this;
            }
            SelectPackingSlipIdDialog.prototype.onShowing = function (state) {
                this.salesId(state.salesId);
                this.packingSlipsData(state.packingSlipsData);
                this.visible(true);
            };
            SelectPackingSlipIdDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            SelectPackingSlipIdDialog.prototype.itemClickHandler = function (event) {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { selectedPackingSlipData: event.data });
                return true;
            };
            return SelectPackingSlipIdDialog;
        }(Controls.ModalDialog));
        Controls.SelectPackingSlipIdDialog = SelectPackingSlipIdDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var ShowSalesOrderAttributeGroupsDialog = (function (_super) {
            __extends(ShowSalesOrderAttributeGroupsDialog, _super);
            function ShowSalesOrderAttributeGroupsDialog() {
                var _this = _super.call(this) || this;
                _this.attributeGroupViewModels = ko.observableArray([]);
                return _this;
            }
            ShowSalesOrderAttributeGroupsDialog.prototype.onShowing = function (dialogInput) {
                var _this = this;
                this.title(dialogInput.title);
                var onEditAsync = function (attributeValues) {
                    _this.indeterminateWaitVisible(true);
                    return dialogInput.onEditAsync(attributeValues).always(function () {
                        _this.indeterminateWaitVisible(false);
                    });
                };
                var viewModels;
                if (Commerce.ArrayExtensions.hasElements(dialogInput.attributeGroups)) {
                    viewModels = dialogInput.attributeGroups.map(function (attributeGroup) {
                        return new Commerce.ViewModels.SalesOrderAttributeGroupViewModel(_this.createViewModelContext(), { attributeGroup: attributeGroup, onEditAsync: onEditAsync });
                    });
                }
                else {
                    viewModels = [];
                }
                this.attributeGroupViewModels(viewModels);
                this.attributeGroupViewModels().forEach(function (attributeGroup) {
                    attributeGroup.updateAttributeViewModels(dialogInput.attributeValues);
                });
                this.visible(true);
            };
            ShowSalesOrderAttributeGroupsDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return ShowSalesOrderAttributeGroupsDialog;
        }(Controls.ModalDialog));
        Controls.ShowSalesOrderAttributeGroupsDialog = ShowSalesOrderAttributeGroupsDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var TransferOrderInputDialogOperationMode;
        (function (TransferOrderInputDialogOperationMode) {
            TransferOrderInputDialogOperationMode[TransferOrderInputDialogOperationMode["Create"] = 1] = "Create";
            TransferOrderInputDialogOperationMode[TransferOrderInputDialogOperationMode["Update"] = 2] = "Update";
            TransferOrderInputDialogOperationMode[TransferOrderInputDialogOperationMode["View"] = 3] = "View";
        })(TransferOrderInputDialogOperationMode = Controls.TransferOrderInputDialogOperationMode || (Controls.TransferOrderInputDialogOperationMode = {}));
        var TransferOrderInputDialog = (function (_super) {
            __extends(TransferOrderInputDialog, _super);
            function TransferOrderInputDialog() {
                var _this = _super.call(this) || this;
                var dateNow = new Date();
                _this.shipDate = ko.observable(dateNow);
                _this.receiveDate = ko.observable(dateNow);
                _this.fromLocation = ko.observable({ inventLocationId: Commerce.StringExtensions.EMPTY, warehouseName: Commerce.StringExtensions.EMPTY });
                _this.toLocation = ko.observable({ inventLocationId: Commerce.StringExtensions.EMPTY, warehouseName: Commerce.StringExtensions.EMPTY });
                _this.deliveryModes = ko.observableArray([
                    { Code: Commerce.StringExtensions.EMPTY, Description: Commerce.StringExtensions.EMPTY, RecordId: 0 }
                ]);
                _this.selectedDeliveryModeId = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.enableDateControls = ko.observable(true);
                _this.okButtonAllowed = ko.observable(false);
                _this.enableDateControls = ko.observable(false);
                _this.canEditDeliveryMode = ko.observable(false);
                _this.okButtonLabel = ko.observable(Commerce.ViewModelAdapter.getResourceString("string_3398"));
                _this.cancelButtonLabel = ko.observable(Commerce.ViewModelAdapter.getResourceString("string_76"));
                _this._dialogOperationMode = ko.observable(null);
                _this._orderType = ko.observable(null);
                _this._transferOrderInputDialogOption = null;
                _this.disableOKButton = ko.computed(function () {
                    return Commerce.ObjectExtensions.isNullOrUndefined(_this.fromLocation()) ||
                        Commerce.StringExtensions.isNullOrWhitespace(_this.fromLocation().inventLocationId) ||
                        Commerce.ObjectExtensions.isNullOrUndefined(_this.toLocation()) ||
                        Commerce.StringExtensions.isNullOrWhitespace(_this.toLocation().inventLocationId);
                }, _this);
                _this.canEditToLocation = ko.computed(function () {
                    return (!Commerce.ObjectExtensions.isNullOrUndefined(_this._dialogOperationMode()) &&
                        !Commerce.ObjectExtensions.isNullOrUndefined(_this._orderType()) &&
                        _this._dialogOperationMode() === TransferOrderInputDialogOperationMode.Create &&
                        _this._orderType() !== Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferIn);
                }, _this);
                _this.canEditFromLocation = ko.computed(function () {
                    return (!Commerce.ObjectExtensions.isNullOrUndefined(_this._dialogOperationMode()) &&
                        !Commerce.ObjectExtensions.isNullOrUndefined(_this._orderType()) &&
                        _this._dialogOperationMode() === TransferOrderInputDialogOperationMode.Create &&
                        _this._orderType() !== Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferOut);
                }, _this);
                _this.isFromLocationSelected = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.fromLocation()) &&
                        !Commerce.StringExtensions.isNullOrWhitespace(_this.fromLocation().inventLocationId);
                }, _this);
                _this.isToLocationSelected = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.toLocation()) &&
                        !Commerce.StringExtensions.isNullOrWhitespace(_this.toLocation().inventLocationId);
                }, _this);
                return _this;
            }
            TransferOrderInputDialog.prototype.onShowing = function (dialogState) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState)) {
                    this.fromLocation(dialogState.fromLocation);
                    this.toLocation(dialogState.toLocation);
                    this.shipDate(dialogState.shipDate);
                    this.receiveDate(dialogState.receiveDate);
                    this._dialogOperationMode(dialogState.mode);
                    this._orderType(dialogState.orderType);
                    if (dialogState.mode === TransferOrderInputDialogOperationMode.Create) {
                        this.okButtonLabel(Commerce.ViewModelAdapter.getResourceString("string_3398"));
                        this.cancelButtonLabel(Commerce.ViewModelAdapter.getResourceString("string_76"));
                        this._populateDeliveryOptions(dialogState);
                        this.enableDateControls(true);
                        this.okButtonAllowed(true);
                        this.canEditDeliveryMode(true);
                    }
                    else if (dialogState.mode === TransferOrderInputDialogOperationMode.Update) {
                        this.okButtonLabel(Commerce.ViewModelAdapter.getResourceString("string_3424"));
                        this.cancelButtonLabel(Commerce.ViewModelAdapter.getResourceString("string_76"));
                        this._populateDeliveryOptions(dialogState);
                        this.selectedDeliveryModeId(dialogState.deliveryModeId);
                        this.enableDateControls(true);
                        this.okButtonAllowed(true);
                        this.canEditDeliveryMode(true);
                    }
                    else if (dialogState.mode === TransferOrderInputDialogOperationMode.View) {
                        this.okButtonLabel(Commerce.ViewModelAdapter.getResourceString("string_75"));
                        this.cancelButtonLabel(Commerce.ViewModelAdapter.getResourceString("string_3425"));
                        this.deliveryModes(dialogState.deliveryModes.filter(function (deliveryMode) {
                            return deliveryMode.Code === dialogState.deliveryModeId;
                        }));
                        this.enableDateControls(false);
                        this.okButtonAllowed(false);
                        this.canEditDeliveryMode(false);
                    }
                    this._transferOrderInputDialogOption = dialogState;
                    this.title(this._getTitleString());
                }
                this.visible(true);
            };
            TransferOrderInputDialog.prototype.fromLocationClickHandler = function () {
                var _this = this;
                if ((this._transferOrderInputDialogOption.orderType !== Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferOut) &&
                    this._transferOrderInputDialogOption.mode === TransferOrderInputDialogOperationMode.Create) {
                    var activity_1 = new Commerce.Activities.SelectWarehouseActivity();
                    activity_1.execute().done(function () {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(activity_1.response)) {
                            var selectedWarehouse = activity_1.response.selectedWarehouse;
                            _this.fromLocation({
                                inventLocationId: selectedWarehouse.InventLocation,
                                inventLocationName: selectedWarehouse.Name
                            });
                        }
                    });
                }
            };
            TransferOrderInputDialog.prototype.toLocationClickHandler = function () {
                var _this = this;
                if ((this._transferOrderInputDialogOption.orderType !== Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferIn) &&
                    this._transferOrderInputDialogOption.mode === TransferOrderInputDialogOperationMode.Create) {
                    var activity_2 = new Commerce.Activities.SelectWarehouseActivity();
                    activity_2.execute().done(function () {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(activity_2.response)) {
                            var selectedWarehouse = activity_2.response.selectedWarehouse;
                            _this.toLocation({
                                inventLocationId: selectedWarehouse.InventLocation,
                                inventLocationName: selectedWarehouse.Name
                            });
                        }
                    });
                }
            };
            TransferOrderInputDialog.prototype.buttonClickHandler = function (buttonId) {
                var _this = this;
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        if (this._transferOrderInputDialogOption.mode !== TransferOrderInputDialogOperationMode.View) {
                            this.indeterminateWaitVisible(true);
                            this._validateInputs()
                                .done(function () {
                                _this.dialogResult.resolve(Commerce.DialogResult.OK, {
                                    fromLocation: _this.fromLocation(),
                                    toLocation: _this.toLocation(),
                                    shipDate: _this._getSelectedDate(TransferOrderInputDialog.SHIP_DATE_ELEMENT_ID),
                                    receiveDate: _this._getSelectedDate(TransferOrderInputDialog.RECEIVE_DATE_ELEMENT_ID),
                                    deliveryModeId: _this.selectedDeliveryModeId()
                                });
                            })
                                .fail(function (errors) {
                                Commerce.NotificationHandler.displayClientErrors(errors, "string_3416");
                            }).always(function () {
                                _this.indeterminateWaitVisible(false);
                            });
                        }
                        else {
                            this.dialogResult.resolve(Commerce.DialogResult.OK);
                        }
                        break;
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            TransferOrderInputDialog.prototype._validateInputs = function () {
                var shipDate = this._getSelectedDate(TransferOrderInputDialog.SHIP_DATE_ELEMENT_ID);
                var receiveDate = this._getSelectedDate(TransferOrderInputDialog.RECEIVE_DATE_ELEMENT_ID);
                var errors = [];
                if (Commerce.StringExtensions.isNullOrWhitespace(this.fromLocation().inventLocationId)) {
                    errors.push(new Commerce.Proxy.Entities.Error("string_3415"));
                }
                if (Commerce.StringExtensions.isNullOrWhitespace(this.toLocation().inventLocationId)) {
                    errors.push(new Commerce.Proxy.Entities.Error("string_3411"));
                }
                if (this._transferOrderInputDialogOption.mode === TransferOrderInputDialogOperationMode.Create) {
                    if (!Commerce.Utilities.DateTimeHelper.isTodayOrFutureDateInChannelTimeZone(shipDate)) {
                        errors.push(new Commerce.Proxy.Entities.Error("string_3412"));
                    }
                    if (!Commerce.Utilities.DateTimeHelper.isTodayOrFutureDateInChannelTimeZone(receiveDate)) {
                        errors.push(new Commerce.Proxy.Entities.Error("string_3413"));
                    }
                }
                if ((receiveDate.getTime() - shipDate.getTime()) < 0) {
                    errors.push(new Commerce.Proxy.Entities.Error("string_3414"));
                }
                if (Commerce.ArrayExtensions.hasElements(errors)) {
                    return Commerce.VoidAsyncResult.createRejected(errors);
                }
                else {
                    return Commerce.VoidAsyncResult.createResolved();
                }
            };
            TransferOrderInputDialog.prototype._getSelectedDate = function (elementId) {
                return Commerce.DateExtensions.getDate(document.getElementById(elementId).winControl.current);
            };
            TransferOrderInputDialog.prototype._getTitleString = function () {
                var titleString;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._transferOrderInputDialogOption) &&
                    !Commerce.StringExtensions.isNullOrWhitespace(this._transferOrderInputDialogOption.dialogTitle)) {
                    titleString = this._transferOrderInputDialogOption.dialogTitle;
                }
                else {
                    titleString = "string_3888";
                }
                return Commerce.ViewModelAdapter.getResourceString(titleString);
            };
            TransferOrderInputDialog.prototype._populateDeliveryOptions = function (dialogState) {
                var _this = this;
                dialogState.deliveryModes.forEach(function (deliveryMode) {
                    _this.deliveryModes.push(deliveryMode);
                });
            };
            TransferOrderInputDialog.SHIP_DATE_ELEMENT_ID = "shipDate";
            TransferOrderInputDialog.RECEIVE_DATE_ELEMENT_ID = "receiveDate";
            return TransferOrderInputDialog;
        }(Controls.ModalDialog));
        Controls.TransferOrderInputDialog = TransferOrderInputDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var AddIssueGiftCardDialog = (function (_super) {
            __extends(AddIssueGiftCardDialog, _super);
            function AddIssueGiftCardDialog(options) {
                var _this = _super.call(this) || this;
                _this._operationResult = null;
                var viewModelOptions = {
                    correlationId: options.correlationId,
                    tenderTypeId: options.tenderTypeId
                };
                _this.viewModel = new Commerce.ViewModels.GiftCardDialogViewModel(_this.createViewModelContext(), viewModelOptions);
                _this._hasPaymentTerminal = ko.observable(false);
                _this._paymentTerminalWaitCount = 0;
                _this._processingCancellation = false;
                _this.giftCardNumber = ko.observable("");
                _this.giftCardAmount = ko.observable("");
                _this.giftCardAmountBalance = ko.computed(function () { return Commerce.Formatters.PriceFormatter(_this.giftCardAmount()); });
                _this.giftCardAmountFromCart = ko.observable("");
                _this.buttonLabel = ko.observable("");
                _this.isScanning = ko.observable(false);
                _this.isGiftCardBalanceOperation = ko.observable(false);
                _this.isDisplayBalance = ko.computed(function () { return !Commerce.StringExtensions.isNullOrWhitespace(_this.giftCardAmountBalance()) &&
                    (!Commerce.ObjectExtensions.isNullOrUndefined(_this._state) &&
                        (_this._state.retailOperationId === Commerce.Operations.RetailOperation.GiftCardBalance
                            || _this._state.retailOperationId === Commerce.Operations.RetailOperation.CashOutGiftCard)); });
                _this.isManualCardNumberInputAllowed = ko.observable(true);
                _this.isButtonVisible = ko.computed(function () { return _this.isScanning() || _this.isDisplayBalance()
                    || (!_this._hasPaymentTerminal() && !_this.isManualCardNumberInputAllowed()); });
                _this._giftCardEntryType = Commerce.Client.Entities.GiftCardEntryType.Keyboard;
                _this._giftCardOperation = Commerce.Client.Entities.GiftCardOperation.IssueNew;
                return _this;
            }
            AddIssueGiftCardDialog.prototype.onShowing = function (state) {
                var _this = this;
                this._state = state;
                var cartAmountDue = Commerce.Session.instance.cart.AmountDue;
                if (!Commerce.NumberExtensions.isNullNaNOrZero(cartAmountDue) && cartAmountDue < 0) {
                    var currency = Commerce.ApplicationContext.Instance.deviceConfiguration.Currency;
                    var decimalPrecision = Commerce.NumberExtensions.getDecimalPrecision(currency);
                    var formattedAmountDue = Commerce.NumberExtensions.formatNumber(Math.abs(cartAmountDue), decimalPrecision);
                    this.giftCardAmountFromCart(formattedAmountDue);
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._state) &&
                    (this._state.retailOperationId === Commerce.Operations.RetailOperation.GiftCardBalance
                        || this._state.retailOperationId === Commerce.Operations.RetailOperation.CashOutGiftCard)) {
                    this.isGiftCardBalanceOperation(true);
                }
                Commerce.Peripherals.instance.magneticStripeReader.enableAsync(function (cardInfo) {
                    return _this.onCardNumberScanned(cardInfo.CardNumber, Commerce.Client.Entities.GiftCardEntryType.MagneticStripReader);
                }, Commerce.Peripherals.HardwareStation.LongPollingSupportedEventsSourceTypes.GIFT);
                Commerce.Peripherals.instance.barcodeScanner.enableAsync(function (barcode) {
                    return _this.onCardNumberScanned(barcode, Commerce.Client.Entities.GiftCardEntryType.Barcode);
                });
                var paymentAsyncResult;
                if (this.canUsePaymentTerminal()) {
                    paymentAsyncResult = Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(new Commerce.Payments.BeginTransactionClientRequest(Commerce.Utilities.GuidHelper.newGuid()))).done(function () {
                        _this._hasPaymentTerminal(true);
                    });
                }
                else {
                    paymentAsyncResult = Commerce.VoidAsyncResult.createResolved();
                }
                var cardTypesAsyncResult = Commerce.ApplicationContext.Instance.cardTypesAsync.value.done(function (cardTypes) {
                    var cardType = cardTypes.filter(function (cardType) {
                        var isGiftCardType = cardType.CardTypeValue === Commerce.Proxy.Entities.CardType.GiftCard;
                        var isSameTenderType = Commerce.StringExtensions.compare(cardType.PaymentMethodId, _this._state.tenderTypeId, true) === 0;
                        return isGiftCardType && isSameTenderType;
                    })[0];
                    _this.isManualCardNumberInputAllowed(Commerce.ObjectExtensions.isNullOrUndefined(cardType) || cardType.AllowManualInput === true);
                });
                Commerce.VoidAsyncResult.join([paymentAsyncResult, cardTypesAsyncResult])
                    .done(function () {
                    if (!_this.isManualCardNumberInputAllowed()) {
                        _this.listenToPaymentTerminal();
                    }
                }).always(function () {
                    _this.updateLabels();
                    _this.visible(true);
                }).fail(function (errors) {
                    _this.handleErrors(errors);
                });
            };
            AddIssueGiftCardDialog.prototype.onButtonClick = function (operationId) {
                if (operationId === Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK) {
                    this.dialogResult.resolve(Commerce.DialogResult.Cancel, this._getAddIssueGiftCardDialogResult());
                }
                else if (operationId === Controls.Dialog.OperationIds.OK_BUTTON_CLICK) {
                    this.dialogResult.resolve(Commerce.DialogResult.OK, this._getAddIssueGiftCardDialogResult());
                }
            };
            AddIssueGiftCardDialog.prototype.onHidden = function () {
                Commerce.Peripherals.instance.barcodeScanner.disableAsync();
                Commerce.Peripherals.instance.magneticStripeReader.disableAsync(Commerce.Peripherals.HardwareStation.LongPollingSupportedEventsSourceTypes.GIFT);
                this.cancelPaymentTerminalDialog();
                _super.prototype.onHidden.call(this);
            };
            AddIssueGiftCardDialog.prototype.onNumPadCardNumberEnterEventHandler = function (result) {
                this._giftCardEntryType = Commerce.Client.Entities.GiftCardEntryType.Keyboard;
                this.updateCardNumber(result.value);
            };
            AddIssueGiftCardDialog.prototype.onNumPadAmountEnterEventHandler = function (result) {
                this.updateCardAmount(result.value);
            };
            AddIssueGiftCardDialog.prototype.onCloseDialogButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.OK, this._getAddIssueGiftCardDialogResult());
            };
            AddIssueGiftCardDialog.prototype.hide = function () {
                this.giftCardNumber(Commerce.StringExtensions.EMPTY);
                this.giftCardAmount(Commerce.StringExtensions.EMPTY);
                return _super.prototype.hide.call(this);
            };
            AddIssueGiftCardDialog.prototype._getAddIssueGiftCardDialogResult = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._operationResult)) {
                    return {
                        giftCard: this._operationResult.data,
                        operationWasCanceled: this._operationResult.canceled
                    };
                }
                else {
                    return null;
                }
            };
            AddIssueGiftCardDialog.prototype.onCardNumberScanned = function (value, giftCardEntryType) {
                this._giftCardEntryType = giftCardEntryType;
                this.updateCardNumber(value);
            };
            AddIssueGiftCardDialog.prototype.updateCardNumber = function (cardNumber) {
                var _this = this;
                var hasCardNumber = !Commerce.StringExtensions.isNullOrWhitespace(cardNumber);
                if (!hasCardNumber) {
                    if (this._hasPaymentTerminal() && this.isManualCardNumberInputAllowed()) {
                        this.listenToPaymentTerminal();
                    }
                    else {
                        this.handleErrors([
                            new Commerce.Proxy.Entities.Error("string_1171", undefined, Commerce.ViewModelAdapter.getResourceString("string_1171"))
                        ]);
                    }
                    return;
                }
                else {
                    var triggerOptions = {
                        giftCardOperation: this._giftCardOperation,
                        giftCardNumber: cardNumber,
                        giftCardEntryType: this._giftCardEntryType,
                        cart: Commerce.Session.instance.cart
                    };
                    Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PostGetGiftCardNumber, triggerOptions)
                        .done(function (result) {
                        if (result && !result.canceled) {
                            _this.giftCardNumber(cardNumber);
                            if (_this._state.retailOperationId === Commerce.Operations.RetailOperation.GiftCardBalance ||
                                _this._state.retailOperationId === Commerce.Operations.RetailOperation.CashOutGiftCard) {
                                _this.handleGiftCardOperation();
                                return;
                            }
                            _this.updateLabels();
                        }
                        else {
                            _this.onCloseDialogButtonClick();
                        }
                    }).fail(function () {
                        _this.onCloseDialogButtonClick();
                    });
                }
            };
            AddIssueGiftCardDialog.prototype.updateCardAmount = function (cardAmount) {
                if (!this.isValidAmount(Commerce.NumberExtensions.parseNumber(cardAmount))) {
                    this.handleErrors([
                        new Commerce.Proxy.Entities.Error("string_5115", undefined, Commerce.ViewModelAdapter.getResourceString("string_5115"))
                    ]);
                    return;
                }
                this.giftCardAmount(cardAmount);
                this.handleGiftCardOperation();
            };
            AddIssueGiftCardDialog.prototype.isValidAmount = function (amount) {
                var maxDigits = 11;
                return (amount.toString().length <= maxDigits) && !Commerce.NumberExtensions.isNullNaNOrZero(amount);
            };
            AddIssueGiftCardDialog.prototype.handleGiftCardOperation = function () {
                this.updateLabels();
                switch (this._state.retailOperationId) {
                    case Commerce.Operations.RetailOperation.AddToGiftCard:
                        this.addToGiftCard();
                        break;
                    case Commerce.Operations.RetailOperation.IssueGiftCertificate:
                        this.issueGiftCard();
                        break;
                    case Commerce.Operations.RetailOperation.GiftCardBalance:
                        this.checkGiftCardBalance();
                        break;
                    case Commerce.Operations.RetailOperation.CashOutGiftCard:
                        this.cashOutGiftCard();
                        break;
                }
            };
            AddIssueGiftCardDialog.prototype.addToGiftCard = function () {
                var _this = this;
                var currency = Commerce.ApplicationContext.Instance.deviceConfiguration.Currency;
                var asyncResult = this.viewModel.addToGiftCard(this.giftCardNumber(), Commerce.NumberExtensions.parseNumber(this.giftCardAmount()), currency, this.title());
                this.handleGiftCardOperationAsyncResult(asyncResult).done(function (result) {
                    _this.dialogResult.resolve(Commerce.DialogResult.OK, { operationWasCanceled: result.canceled, giftCard: result.data });
                });
            };
            AddIssueGiftCardDialog.prototype.issueGiftCard = function () {
                var _this = this;
                var currency = Commerce.ApplicationContext.Instance.deviceConfiguration.Currency;
                var asyncResult = this.viewModel.issueGiftCard(this.giftCardNumber(), Commerce.NumberExtensions.parseNumber(this.giftCardAmount()), currency, this.title());
                this.handleGiftCardOperationAsyncResult(asyncResult).done(function (result) {
                    _this.dialogResult.resolve(Commerce.DialogResult.OK, { operationWasCanceled: result.canceled, giftCard: result.data });
                });
            };
            AddIssueGiftCardDialog.prototype.checkGiftCardBalance = function () {
                var _this = this;
                if (this._hasPaymentTerminal && Commerce.StringExtensions.isNullOrWhitespace(this.giftCardNumber())) {
                    this.isScanning(true);
                    this.updateLabels();
                }
                var asyncResult = this.viewModel.checkGiftCardBalance(this.giftCardNumber())
                    .done(function (result) {
                    _this.giftCardNumber(result.data.Id);
                    _this.giftCardAmount(Commerce.NumberExtensions.formatNumber(result.data.Balance, Commerce.NumberExtensions.getDecimalPrecision()));
                }).always(function () {
                    _this.isScanning(false);
                    _this.updateLabels();
                });
                this.handleGiftCardOperationAsyncResult(asyncResult).done(function (result) {
                    _this._operationResult = result;
                });
            };
            AddIssueGiftCardDialog.prototype.cashOutGiftCard = function () {
                var _this = this;
                if (this._hasPaymentTerminal && Commerce.StringExtensions.isNullOrWhitespace(this.giftCardNumber())) {
                    this.isScanning(true);
                    this.updateLabels();
                }
                var currency = Commerce.ApplicationContext.Instance.deviceConfiguration.Currency;
                var asyncResult = this.viewModel.cashOutGiftCard(this.giftCardNumber(), currency, this.title())
                    .always(function () {
                    _this.isScanning(false);
                    _this.updateLabels();
                });
                this.handleGiftCardOperationAsyncResult(asyncResult).done(function (result) {
                    _this.dialogResult.resolve(Commerce.DialogResult.OK, { operationWasCanceled: result.canceled, giftCard: result.data });
                });
            };
            AddIssueGiftCardDialog.prototype.handleGiftCardOperationAsyncResult = function (asyncResult) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(asyncResult)) {
                    asyncResult = Commerce.VoidAsyncResult.createResolved();
                }
                if (this._hasPaymentTerminal) {
                    ++this._paymentTerminalWaitCount;
                }
                var showProgressRing = (this._paymentTerminalWaitCount === 0)
                    || (!Commerce.StringExtensions.isNullOrWhitespace(this.giftCardNumber()) && !Commerce.StringExtensions.isNullOrWhitespace(this.giftCardAmount()));
                this.indeterminateWaitVisible(showProgressRing);
                return asyncResult.always(function () {
                    if (_this._hasPaymentTerminal) {
                        _this._paymentTerminalWaitCount = Math.max(0, --_this._paymentTerminalWaitCount);
                    }
                    if (_this._paymentTerminalWaitCount === 0) {
                        _this.indeterminateWaitVisible(false);
                    }
                }).fail(function (errors) {
                    _this.handleErrors(errors);
                });
            };
            AddIssueGiftCardDialog.prototype.handleErrors = function (errors) {
                var _this = this;
                this.giftCardAmount(Commerce.StringExtensions.EMPTY);
                this.giftCardNumber(Commerce.StringExtensions.EMPTY);
                if (this.visible()) {
                    this.updateLabels();
                    Commerce.NotificationHandler.displayClientErrors(errors).always(function () {
                        var cancelDialog = false;
                        if (!_this.isManualCardNumberInputAllowed()) {
                            if (_this._hasPaymentTerminal) {
                                if (_this._canUseTerminalAfterErrors(errors)) {
                                    _this.listenToPaymentTerminal();
                                }
                                else {
                                    cancelDialog = true;
                                }
                            }
                            else {
                                cancelDialog = true;
                            }
                        }
                        if (cancelDialog) {
                            _this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        }
                    });
                }
            };
            AddIssueGiftCardDialog.prototype.canUsePaymentTerminal = function () {
                var isPaymentTerminalConfigured = Commerce.ApplicationContext.Instance.hardwareProfile.PinPadDeviceTypeValue === Commerce.Proxy.Entities.PeripheralDeviceType.Windows
                    || Commerce.ApplicationContext.Instance.hardwareProfile.PinPadDeviceTypeValue === Commerce.Proxy.Entities.PeripheralDeviceType.Network;
                var isHardwareStationActive = Commerce.Peripherals.HardwareStation.HardwareStationContext.instance.isActive();
                return isHardwareStationActive && isPaymentTerminalConfigured;
            };
            AddIssueGiftCardDialog.prototype.listenToPaymentTerminal = function () {
                var _this = this;
                if (!this._hasPaymentTerminal()) {
                    return;
                }
                if (Commerce.StringExtensions.isNullOrWhitespace(this.giftCardNumber()) && this._paymentTerminalWaitCount === 0) {
                    ++this._paymentTerminalWaitCount;
                    this.isScanning(true);
                    this.updateLabels();
                    Commerce.Peripherals.instance.paymentTerminal.retrievePrivateTender(Commerce.Utilities.GuidHelper.newGuid(), 0, true)
                        .always(function () {
                        _this.isScanning(false);
                        _this._paymentTerminalWaitCount = Math.max(0, --_this._paymentTerminalWaitCount);
                        if (_this._paymentTerminalWaitCount === 0) {
                            _this.indeterminateWaitVisible(false);
                        }
                    }).done(function (cardInfo) {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(cardInfo) || Commerce.StringExtensions.isNullOrWhitespace(cardInfo.CardNumber)) {
                            _this.handleErrors([
                                new Commerce.Proxy.Entities.Error("string_1166", undefined, "Unable to read card data. Please try again or use a different card.")
                            ]);
                        }
                        else {
                            _this.updateCardNumber(cardInfo.CardNumber);
                        }
                    }).fail(function (errors) {
                        _this.handleErrors(errors);
                    });
                }
            };
            AddIssueGiftCardDialog.prototype.updateLabels = function () {
                var message;
                switch (this._state.retailOperationId) {
                    case Commerce.Operations.RetailOperation.IssueGiftCertificate:
                        this.title(Commerce.ViewModelAdapter.getResourceString("string_5100"));
                        message = Commerce.ViewModelAdapter.getResourceString("string_5110");
                        this.buttonLabel(Commerce.ViewModelAdapter.getResourceString("string_107"));
                        this._giftCardOperation = Commerce.Client.Entities.GiftCardOperation.IssueNew;
                        break;
                    case Commerce.Operations.RetailOperation.AddToGiftCard:
                        this.title(Commerce.ViewModelAdapter.getResourceString("string_5101"));
                        message = Commerce.ViewModelAdapter.getResourceString("string_5111");
                        this.buttonLabel(Commerce.ViewModelAdapter.getResourceString("string_107"));
                        this._giftCardOperation = Commerce.Client.Entities.GiftCardOperation.AddExisting;
                        break;
                    case Commerce.Operations.RetailOperation.GiftCardBalance:
                        this.title(Commerce.ViewModelAdapter.getResourceString("string_5103"));
                        message = Commerce.ViewModelAdapter.getResourceString("string_5112");
                        this._giftCardOperation = Commerce.Client.Entities.GiftCardOperation.CheckBalance;
                        this.buttonLabel(this.isScanning() ? Commerce.ViewModelAdapter.getResourceString("string_107") : Commerce.ViewModelAdapter.getResourceString("string_80"));
                        break;
                    case Commerce.Operations.RetailOperation.CashOutGiftCard:
                        this.title(Commerce.ViewModelAdapter.getResourceString("string_5105"));
                        message = Commerce.ViewModelAdapter.getResourceString("string_5122");
                        this._giftCardOperation = Commerce.Client.Entities.GiftCardOperation.CashOut;
                        this.buttonLabel(this.isScanning() ? Commerce.ViewModelAdapter.getResourceString("string_107") : Commerce.ViewModelAdapter.getResourceString("string_80"));
                        break;
                    default:
                        break;
                }
                if (this.isScanning() || this.isDisplayBalance()) {
                    message = "";
                }
                this.message(message);
            };
            AddIssueGiftCardDialog.prototype.cancelPaymentTerminalDialog = function () {
                var _this = this;
                if (this._processingCancellation) {
                    return;
                }
                if (this._paymentTerminalWaitCount !== 0) {
                    this._processingCancellation = true;
                    var request = new Commerce.PaymentTerminalCancelOperationRequest();
                    Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request)).always(function () {
                        _this._processingCancellation = false;
                    });
                }
            };
            AddIssueGiftCardDialog.prototype._canUseTerminalAfterErrors = function (errors) {
                return !Commerce.Payments.Utilities.PaymentViewModelErrorHelper.hasError(errors, Commerce.Payments.ErrorCodes.PERIPHERALS_HARDWARESTATION_NOTCONFIGURED)
                    && !Commerce.Payments.Utilities.PaymentViewModelErrorHelper.hasError(errors, Commerce.Payments.ErrorCodes.PAYMENT_TERMINAL_NOT_CONFIGURED)
                    && !Commerce.Payments.Utilities.PaymentViewModelErrorHelper.hasError(errors, Commerce.Payments.ErrorCodes.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_COMMUNICATIONERROR)
                    && !Commerce.Payments.Utilities.PaymentViewModelErrorHelper.hasError(errors, Commerce.Payments.ErrorCodes.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_PAYMENTTERMINAL_ERROR);
            };
            return AddIssueGiftCardDialog;
        }(Controls.ModalDialog));
        Controls.AddIssueGiftCardDialog = AddIssueGiftCardDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var ApprovePartialAmountDialog = (function (_super) {
            __extends(ApprovePartialAmountDialog, _super);
            function ApprovePartialAmountDialog() {
                var _this = _super.call(this) || this;
                _this._correlationId = Commerce.StringExtensions.EMPTY;
                _this.title(Commerce.ViewModelAdapter.getResourceString("string_7500"));
                _this.subTitle(Commerce.ViewModelAdapter.getResourceString("string_7501"));
                _this.amountAuthorizedText = ko.observable("");
                _this.amountRequestedText = ko.observable("");
                return _this;
            }
            ApprovePartialAmountDialog.prototype.onShowing = function (dialogOptions) {
                this.amountAuthorizedText(Commerce.NumberExtensions.formatCurrency(dialogOptions.amountAuthorized, dialogOptions.amountAuthorizedCurrencyCode));
                this.amountRequestedText(Commerce.NumberExtensions.formatCurrency(dialogOptions.amountRequested, dialogOptions.amountRequestedCurrencyCode));
                this._correlationId = dialogOptions.correlationId;
                this.visible(true);
            };
            ApprovePartialAmountDialog.prototype.approvePartialAmountClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        Commerce.RetailLogger.posPaymentUIButtonClicked(this._correlationId, "ApprovePartialAmountDialog", "Yes");
                        this.dialogResult.resolve(Commerce.DialogResult.OK);
                        break;
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        Commerce.RetailLogger.posPaymentUIButtonClicked(this._correlationId, "ApprovePartialAmountDialog", "No");
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            return ApprovePartialAmountDialog;
        }(Controls.ModalDialog));
        Controls.ApprovePartialAmountDialog = ApprovePartialAmountDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var CardTypeDialog = (function (_super) {
            __extends(CardTypeDialog, _super);
            function CardTypeDialog() {
                var _this = _super.call(this) || this;
                _this.cardTypes = ko.observableArray([]);
                _this.hideOnEscape = ko.observable(false);
                return _this;
            }
            CardTypeDialog.prototype.onShowing = function (cardTypes) {
                if (!Commerce.ArrayExtensions.hasElements(cardTypes)) {
                    this._cancelDialog();
                    return;
                }
                this.cardTypes(cardTypes);
                this.visible(true);
            };
            CardTypeDialog.prototype.cardTypeListButtonClickHandler = function (eventArgs) {
                var cardType = eventArgs.data;
                this.dialogResult.resolve(Commerce.DialogResult.OK, cardType);
            };
            CardTypeDialog.prototype.cardTypeDialogButtonClickHandler = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this._cancelDialog();
                        break;
                }
            };
            CardTypeDialog.prototype._cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return CardTypeDialog;
        }(Controls.ModalDialog));
        Controls.CardTypeDialog = CardTypeDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var CashbackDialog = (function (_super) {
            __extends(CashbackDialog, _super);
            function CashbackDialog() {
                var _this = _super.call(this) || this;
                _this._maximumCashbackAmount = 0;
                _this._cashbackAmountText = ko.observable(Commerce.NumberExtensions.formatNumber(0, Commerce.NumberExtensions.getDecimalPrecision()));
                _this.denominations = ko.observableArray([]);
                _this._isOKButtonDisabled = ko.computed(function () {
                    return !_this.isCashbackAmountTextValid(_this._cashbackAmountText());
                });
                _this.showCashbackDenominations = ko.observable(false);
                return _this;
            }
            CashbackDialog.prototype.onShowing = function (options) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    Commerce.RetailLogger.viewsControlsCashbackDialogOnShowingParametersUndefined();
                    this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                    return;
                }
                this._correlationId = options.correlationId;
                this._cashbackAmountText(Commerce.NumberExtensions.formatCurrency(options.cashbackAmount ? options.cashbackAmount : 0));
                this._maximumCashbackAmount = options.maximumCashbackAmount ? options.maximumCashbackAmount : 0;
                var formattedDenominations = [];
                if (options.denominations) {
                    options.denominations.forEach(function (denomination) {
                        if ((_this._maximumCashbackAmount <= 0) || (_this._maximumCashbackAmount >= denomination.Amount)) {
                            var formattedDenomination = {
                                amount: denomination.Amount,
                                amountText: Commerce.NumberExtensions.formatCurrency(denomination.Amount, denomination.Currency)
                            };
                            formattedDenominations.push(formattedDenomination);
                        }
                    });
                }
                this.denominations(formattedDenominations);
                this.showCashbackDenominations(formattedDenominations.length > 0);
                this.visible(true);
            };
            CashbackDialog.prototype.denominationInvokedHandler = function (itemClicked) {
                this.cashbackAmountSubmitted(itemClicked.data.amountText);
            };
            CashbackDialog.prototype.cashbackButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        Commerce.RetailLogger.posPaymentUIButtonClicked(this._correlationId, this.controlName, "Cancel");
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        Commerce.RetailLogger.posPaymentUIButtonClicked(this._correlationId, this.controlName, "Ok");
                        var cashbackAmountText = this._cashbackAmountText();
                        this.cashbackAmountSubmitted(cashbackAmountText);
                        break;
                    case Commerce.Controls.Dialog.OperationIds.NO_BUTTON_CLICK:
                        Commerce.RetailLogger.posPaymentUIButtonClicked(this._correlationId, this.controlName, "No cash back");
                        this.dialogResult.resolve(Commerce.DialogResult.No);
                        break;
                }
            };
            CashbackDialog.prototype.onTextBoxEnterEventHandler = function () {
                if (!this._isOKButtonDisabled()) {
                    this.cashbackButtonClick(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
                }
            };
            CashbackDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            CashbackDialog.prototype.isCashbackAmountTextValid = function (cashbackAmountText) {
                var cashbackAmount = Commerce.NumberExtensions.parseNumber(cashbackAmountText);
                var isCashbackAmountValid = !isNaN(cashbackAmount)
                    && Commerce.Helpers.CurrencyHelper.isValidAmount(cashbackAmount)
                    && ((this._maximumCashbackAmount <= 0) || (this._maximumCashbackAmount >= cashbackAmount));
                return isCashbackAmountValid;
            };
            CashbackDialog.prototype.cashbackAmountSubmitted = function (cashbackAmountText) {
                if (this.isCashbackAmountTextValid(cashbackAmountText)) {
                    var cashbackAmount = Commerce.NumberExtensions.parseNumber(cashbackAmountText);
                    this.dialogResult.resolve(Commerce.DialogResult.OK, cashbackAmount);
                }
                else {
                    var errors = [];
                    errors.push(new Commerce.Proxy.Entities.Error("string_7004"));
                    Commerce.NotificationHandler.displayClientErrors(errors);
                }
            };
            return CashbackDialog;
        }(Controls.ModalDialog));
        Controls.CashbackDialog = CashbackDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var GetReturnChargeDialog = (function (_super) {
            __extends(GetReturnChargeDialog, _super);
            function GetReturnChargeDialog() {
                var _this = _super.call(this) || this;
                _this._returnCharges = ko.observable("0");
                _this._dialogTitle = ko.observable(Commerce.StringExtensions.EMPTY);
                _this._dialogSubtitle = ko.observable(Commerce.StringExtensions.EMPTY);
                _this._dialogMessage = ko.observable(Commerce.StringExtensions.EMPTY);
                _this._isOKButtonDisabled = ko.computed(function () {
                    var returnCharge = Commerce.NumberExtensions.parseNumber(_this._returnCharges());
                    return isNaN(returnCharge) || returnCharge < 0;
                });
                return _this;
            }
            GetReturnChargeDialog.prototype.onShowing = function (dialogOptions) {
                dialogOptions = dialogOptions || {};
                dialogOptions.originalReturnCharge = dialogOptions.originalReturnCharge || 0;
                dialogOptions.productName = dialogOptions.productName || Commerce.StringExtensions.EMPTY;
                dialogOptions.deliveryMethodDescription = dialogOptions.deliveryMethodDescription || Commerce.StringExtensions.EMPTY;
                this._returnCharges(Commerce.NumberExtensions.formatNumber(dialogOptions.originalReturnCharge, Commerce.NumberExtensions.getDecimalPrecision()));
                if (!Commerce.StringExtensions.isNullOrWhitespace(dialogOptions.productName)) {
                    this._dialogTitle(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_2523"), dialogOptions.productName));
                }
                else {
                    this._dialogTitle(Commerce.ViewModelAdapter.getResourceString("string_2520"));
                }
                this._dialogSubtitle(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_2521"), dialogOptions.deliveryMethodDescription));
                this._dialogMessage(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_2522"), Commerce.NumberExtensions.formatCurrency(dialogOptions.originalReturnCharge)));
                this.indeterminateWaitVisible(false);
                this.visible(true);
            };
            GetReturnChargeDialog.prototype.getReturnChargeButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.getReturnChargeInvokedHandler();
                        break;
                }
            };
            GetReturnChargeDialog.prototype.onTextBoxEnterEventHandler = function () {
                if (!this._isOKButtonDisabled()) {
                    this.getReturnChargeButtonClick(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
                }
            };
            GetReturnChargeDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            GetReturnChargeDialog.prototype.getReturnChargeInvokedHandler = function () {
                var response = {
                    returnChargeAmount: Commerce.NumberExtensions.parseNumber(this._returnCharges())
                };
                this.dialogResult.resolve(Commerce.DialogResult.OK, response);
            };
            return GetReturnChargeDialog;
        }(Controls.ModalDialog));
        Controls.GetReturnChargeDialog = GetReturnChargeDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var GetSignatureFromDeviceDialog = (function (_super) {
            __extends(GetSignatureFromDeviceDialog, _super);
            function GetSignatureFromDeviceDialog(correlationId) {
                var _this = _super.call(this) || this;
                _this.title(Commerce.ViewModelAdapter.getResourceString("string_6908"));
                _this.viewModel = new Commerce.ViewModels.GetSignatureFromDeviceViewModel(_this.createViewModelContext(), correlationId);
                return _this;
            }
            GetSignatureFromDeviceDialog.prototype.afterShow = function () {
                var _this = this;
                this.viewModel.getSignatureFromDeviceAsync()
                    .done(function (result) {
                    if (!_this.viewModel.isOperationSkipSignature) {
                        if (!result.canceled) {
                            _this.dialogResult.resolve(Commerce.DialogResult.OK, {
                                signatureData: result.data,
                                status: Commerce.Payments.SignatureActivityResult.OK
                            });
                        }
                        else {
                            _this.dialogResult.resolve(Commerce.DialogResult.Cancel, {
                                signatureData: Commerce.StringExtensions.EMPTY,
                                status: Commerce.Payments.SignatureActivityResult.Cancelled
                            });
                        }
                    }
                }).fail(function (errors) {
                    if (!_this.viewModel.isOperationSkipSignature) {
                        Commerce.NotificationHandler.displayClientErrors(errors)
                            .always(function () {
                            _this.dialogResult.reject(errors);
                        });
                    }
                });
            };
            GetSignatureFromDeviceDialog.prototype.buttonClickHandler = function (operationId) {
                var _this = this;
                switch (operationId) {
                    case Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        Commerce.RetailLogger.posPaymentUIButtonClicked(this.viewModel.correlationId, "GetSignatureFromDeviceDialog", "Skip");
                        this.viewModel.endGetSignatureFromDevice(true)
                            .always(function () {
                            _this.dialogResult.resolve(Commerce.DialogResult.Cancel, {
                                signatureData: Commerce.StringExtensions.EMPTY,
                                status: Commerce.Payments.SignatureActivityResult.Cancelled
                            });
                        });
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        Commerce.RetailLogger.posPaymentUIButtonClicked(this.viewModel.correlationId, "GetSignatureFromDeviceDialog", "Get Signature");
                        this.viewModel.endGetSignatureFromDevice(false);
                        break;
                    default:
                        throw new Error("Unknown operation Id: " + operationId);
                }
            };
            return GetSignatureFromDeviceDialog;
        }(Controls.ModalDialog));
        Controls.GetSignatureFromDeviceDialog = GetSignatureFromDeviceDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var LinkedRefundDialog = (function (_super) {
            __extends(LinkedRefundDialog, _super);
            function LinkedRefundDialog() {
                var _this = _super.call(this) || this;
                _this.amountDue = ko.observable(0);
                _this.linkedTenderLines = ko.observableArray([]);
                _this.tenderType = ko.observable(null);
                _this.isTenderTypeSelected = ko.computed(function () { return !Commerce.ObjectExtensions.isNullOrUndefined(_this.tenderType()); }, _this);
                return _this;
            }
            LinkedRefundDialog.prototype.onShowing = function (dialogState) {
                this._setDialogState(dialogState);
                this.visible(true);
            };
            LinkedRefundDialog.prototype.optionClickHandler = function (selectedTenderLine) {
                this.dialogResult.resolve(Commerce.DialogResult.OK, selectedTenderLine);
            };
            LinkedRefundDialog.prototype.linkedRefundDialogButtonClickHandler = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this._cancelDialog();
                        break;
                }
            };
            LinkedRefundDialog.prototype.dialogCloseButtonClick = function () {
                this._cancelDialog();
            };
            LinkedRefundDialog.prototype._cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            LinkedRefundDialog.prototype._setDialogState = function (dialogState) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(dialogState)) {
                    return;
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.tenderType)) {
                    this.tenderType(dialogState.tenderType);
                }
                else {
                    this.tenderType(null);
                }
                this.amountDue(dialogState.amountDue);
                this.linkedTenderLines(dialogState.tenderLines);
            };
            return LinkedRefundDialog;
        }(Controls.ModalDialog));
        Controls.LinkedRefundDialog = LinkedRefundDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var PaymentMessageDialog = (function (_super) {
            __extends(PaymentMessageDialog, _super);
            function PaymentMessageDialog() {
                var _this = _super.call(this) || this;
                _this.messageText = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.buttonText = ko.observable(Commerce.StringExtensions.EMPTY);
                return _this;
            }
            PaymentMessageDialog.prototype.onShowing = function (dialogState) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState)) {
                    this.messageText(dialogState.messageText);
                    this.title(dialogState.title);
                    this.buttonText(dialogState.buttonText);
                }
                this.visible(true);
            };
            PaymentMessageDialog.prototype.buttonClickHandler = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return PaymentMessageDialog;
        }(Controls.ModalDialog));
        Controls.PaymentMessageDialog = PaymentMessageDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var PaymentOptionsDialog = (function (_super) {
            __extends(PaymentOptionsDialog, _super);
            function PaymentOptionsDialog() {
                var _this = _super.call(this) || this;
                _this.description = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.paymentOptions = ko.observableArray([]);
                _this.isCancelAllowed = ko.observable(true);
                return _this;
            }
            PaymentOptionsDialog.prototype.onShowing = function (dialogState) {
                dialogState.isCancelAllowed = Commerce.ObjectExtensions.isNullOrUndefined(dialogState.isCancelAllowed) ? true : dialogState.isCancelAllowed;
                dialogState.paymentOptions.forEach(function (paymentOption) {
                    paymentOption.secondaryText = Commerce.ObjectExtensions.isNullOrUndefined(paymentOption.secondaryText)
                        ? null : paymentOption.secondaryText;
                    paymentOption.iconClass = Commerce.ObjectExtensions.isNullOrUndefined(paymentOption.iconClass)
                        ? null : paymentOption.iconClass;
                });
                this.title(dialogState.title);
                this.description(dialogState.description);
                this.paymentOptions(dialogState.paymentOptions);
                this.isCancelAllowed(dialogState.isCancelAllowed);
                this.visible(true);
            };
            PaymentOptionsDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            PaymentOptionsDialog.prototype.optionClickHandler = function (selectedPaymentOption) {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { paymentOption: selectedPaymentOption });
            };
            return PaymentOptionsDialog;
        }(Controls.ModalDialog));
        Controls.PaymentOptionsDialog = PaymentOptionsDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SelectAllowedRefundOptionDialog = (function (_super) {
            __extends(SelectAllowedRefundOptionDialog, _super);
            function SelectAllowedRefundOptionDialog() {
                var _this = _super.call(this) || this;
                _this.amountToRefund = ko.observable(0);
                _this.availableRefundOptions = ko.observableArray([]);
                _this.shouldShowAllPaymentMethodsOption = ko.observable(false);
                return _this;
            }
            SelectAllowedRefundOptionDialog.prototype.onShowing = function (dialogState) {
                this._setDialogState(dialogState);
                this.visible(true);
            };
            SelectAllowedRefundOptionDialog.prototype.buttonClickHandler = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this._cancelDialog();
                        break;
                }
            };
            SelectAllowedRefundOptionDialog.prototype.dialogCloseButtonClick = function () {
                this._cancelDialog();
            };
            SelectAllowedRefundOptionDialog.prototype.optionClickHandler = function (selectedOption) {
                this.dialogResult.resolve(Commerce.DialogResult.OK, selectedOption);
            };
            SelectAllowedRefundOptionDialog.prototype.showAllPaymentMethodsClicked = function () {
                var bypassPolicyOption = {
                    bypassPolicy: true,
                    tenderType: null,
                    amount: null,
                    secondaryText: null
                };
                this.optionClickHandler(bypassPolicyOption);
            };
            SelectAllowedRefundOptionDialog.prototype._cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            SelectAllowedRefundOptionDialog.prototype._setDialogState = function (dialogState) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(dialogState)) {
                    return;
                }
                this.amountToRefund(dialogState.amountToRefund);
                this.availableRefundOptions(dialogState.availableRefundOptions);
                this.shouldShowAllPaymentMethodsOption(dialogState.shouldShowAllPaymentMethodsOption);
            };
            return SelectAllowedRefundOptionDialog;
        }(Controls.ModalDialog));
        Controls.SelectAllowedRefundOptionDialog = SelectAllowedRefundOptionDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SignatureDialog = (function (_super) {
            __extends(SignatureDialog, _super);
            function SignatureDialog() {
                var _this = _super.call(this) || this;
                _this._paint = false;
                _this._startX = 0;
                _this._startY = 0;
                _this._canvasX = 0;
                _this._canvasY = 0;
                _this._points = [];
                _this._endPoint = new Commerce.Proxy.Entities.Point(0xFFFFFFFF, 0xFFFFFFFF);
                _this._bmp = Commerce.StringExtensions.EMPTY;
                _this._correlationId = Commerce.StringExtensions.EMPTY;
                _this._signatureCanvasId = "signaturecanvas";
                _this._padding = 20;
                _this.title(Commerce.ViewModelAdapter.getResourceString("string_6900"));
                _this.allowClear = ko.observable(false);
                _this.hasNoSignatureData = ko.observable(true);
                _this.allowSignatureEntry = ko.observable(false);
                _this.allowRecapture = ko.observable(false);
                _this.focusOnOk = ko.observable(false);
                _this.secondaryButtonText = ko.observable(Commerce.StringExtensions.EMPTY);
                return _this;
            }
            SignatureDialog.prototype.onShowing = function (dialogState) {
                var _this = this;
                dialogState = dialogState || {
                    allowRecapture: false,
                    correlationId: Commerce.StringExtensions.EMPTY,
                    signatureData: null,
                    verifyOnly: false,
                    allowDecline: false
                };
                this._correlationId = dialogState.correlationId;
                this.allowClear(!dialogState.verifyOnly);
                this.allowSignatureEntry(!dialogState.verifyOnly);
                this.allowRecapture(dialogState.verifyOnly && dialogState.allowRecapture);
                this.initializeCanvas();
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.allowDecline) && dialogState.allowDecline) {
                    this.secondaryButtonText(Commerce.ViewModelAdapter.getResourceString("string_6911"));
                }
                else {
                    this.secondaryButtonText(Commerce.ViewModelAdapter.getResourceString("string_6903"));
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.signatureData) && (dialogState.signatureData.length > 0)) {
                    var imageDataByteArray = Commerce.SerializationHelpers.fromBase64String(dialogState.signatureData);
                    if (imageDataByteArray.byteLength > 2 && imageDataByteArray[0] === 0x42 && imageDataByteArray[1] === 0x4d) {
                        this._bmp = "data:image/bmp;base64," + dialogState.signatureData;
                    }
                    else {
                        var retVal = this._getByteArrayAsPoints(imageDataByteArray);
                        if (retVal.error) {
                            Commerce.NotificationHandler.displayClientErrors([retVal.error])
                                .done(function () {
                                _this.buttonClickHandler(Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK);
                            }).fail(function () {
                                _this.buttonClickHandler(Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK);
                            });
                            return;
                        }
                        else {
                            this._points = retVal.points;
                        }
                    }
                }
                this.visible(true);
            };
            SignatureDialog.prototype.afterShow = function () {
                var canvasWidth = this._signatureCanvas.width;
                var canvasHeight = this._signatureCanvas.height;
                this._signatureCanvas.getContext("2d").clearRect(0, 0, this._signatureCanvas.width, this._signatureCanvas.height);
                if (Commerce.ArrayExtensions.hasElements(this._points)) {
                    this.drawPoints(this._points, this._padding);
                    this.focusOnOk(true);
                }
                else if (!Commerce.StringExtensions.isNullOrWhitespace(this._bmp)) {
                    var drawingContext_1 = this._signatureCanvas.getContext("2d");
                    var myImage_1 = new Image();
                    myImage_1.onload = function () {
                        drawingContext_1.drawImage(myImage_1, 0, 0, myImage_1.width, myImage_1.height, 0, 0, canvasWidth, canvasHeight);
                    };
                    myImage_1.src = this._bmp;
                    drawingContext_1.closePath();
                    this.hasNoSignatureData(false);
                    this.focusOnOk(true);
                }
            };
            SignatureDialog.prototype.initializeCanvas = function () {
                this._signatureCanvas = document.getElementById(this._signatureCanvasId);
                if (this.allowSignatureEntry()) {
                    this._mousedown = this._mousedown.bind(this);
                    this._mousemove = this._mousemove.bind(this);
                    this._mouseup = this._mouseup.bind(this);
                    this._mouseout = this._mouseout.bind(this);
                    this.clearCanvas = this.clearCanvas.bind(this);
                    this._signatureCanvas.addEventListener("mousedown", this._mousedown, false);
                    this._signatureCanvas.addEventListener("mousemove", this._mousemove, false);
                    this._signatureCanvas.addEventListener("mouseup", this._mouseup, false);
                    this._signatureCanvas.addEventListener("mouseout", this._mouseout, false);
                    this._signatureCanvas.addEventListener("touchstart", this._mousedown, true);
                    this._signatureCanvas.addEventListener("touchmove", this._mousemove, true);
                    this._signatureCanvas.addEventListener("touchend", this._mouseup, true);
                    this._signatureCanvas.addEventListener("touchcancel", this._mouseout, true);
                }
                this._points = [];
                this._bmp = Commerce.StringExtensions.EMPTY;
            };
            SignatureDialog.prototype.clearCanvas = function () {
                Commerce.RetailLogger.posPaymentUIButtonClicked(this._correlationId, "SignatureDialog", "Clear");
                this._signatureCanvas.getContext("2d").clearRect(0, 0, this._signatureCanvas.width, this._signatureCanvas.height);
                this._points = [];
                this._bmp = Commerce.StringExtensions.EMPTY;
                this.hasNoSignatureData(true);
            };
            SignatureDialog.prototype.drawPoints = function (points, paddingAmount) {
                var _this = this;
                if (paddingAmount === void 0) { paddingAmount = 0; }
                if (!Commerce.ArrayExtensions.hasElements(points)) {
                    this.clearCanvas();
                    return;
                }
                var imageBounds = this._getImageBounds(points);
                var imageScaleAndOffset = this._getScaleAndOffset(imageBounds, paddingAmount);
                var drawingContext = this._signatureCanvas.getContext("2d");
                var startPoint = null;
                var pointNotDrawn = false;
                drawingContext.beginPath();
                drawingContext.strokeStyle = this._getLineColor();
                drawingContext.globalAlpha = 0.7;
                points.forEach(function (point) {
                    if (_this._isEndpoint(point)) {
                        if (pointNotDrawn) {
                            drawingContext.moveTo(startPoint.x, startPoint.y);
                            drawingContext.lineTo(startPoint.x, startPoint.y);
                            drawingContext.stroke();
                        }
                        startPoint = null;
                        pointNotDrawn = false;
                    }
                    else if (startPoint == null) {
                        startPoint = {
                            x: Math.floor(((point.x - imageBounds.leftX) * imageScaleAndOffset.scale) + imageScaleAndOffset.offsetX),
                            y: Math.floor(((point.y - imageBounds.topY) * imageScaleAndOffset.scale) + imageScaleAndOffset.offsetY)
                        };
                        pointNotDrawn = true;
                    }
                    else {
                        var endPoint = {
                            x: Math.floor(((point.x - imageBounds.leftX) * imageScaleAndOffset.scale) + imageScaleAndOffset.offsetX),
                            y: Math.floor(((point.y - imageBounds.topY) * imageScaleAndOffset.scale) + imageScaleAndOffset.offsetY)
                        };
                        drawingContext.moveTo(startPoint.x, startPoint.y);
                        drawingContext.lineTo(endPoint.x, endPoint.y);
                        drawingContext.stroke();
                        startPoint = endPoint;
                        pointNotDrawn = false;
                    }
                });
                if (pointNotDrawn) {
                    drawingContext.moveTo(startPoint.x, startPoint.y);
                    drawingContext.lineTo(startPoint.x, startPoint.y);
                    drawingContext.stroke();
                }
                drawingContext.closePath();
                this.hasNoSignatureData(false);
            };
            SignatureDialog.prototype.buttonClickHandler = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        Commerce.RetailLogger.posPaymentUIButtonClicked(this._correlationId, "SignatureDialog", "Accept");
                        var capturedSignatureData = Commerce.StringExtensions.EMPTY;
                        try {
                            if (Commerce.StringExtensions.isEmptyOrWhitespace(this._bmp)) {
                                var imageDataByteArray = this._getPointsAsByteArray();
                                capturedSignatureData = Commerce.SerializationHelpers.toBase64String(imageDataByteArray);
                            }
                            else {
                                capturedSignatureData = this._bmp.substr(22);
                            }
                        }
                        catch (error) {
                            if (error && error.message && error.message === Commerce.ErrorTypeEnum.OPERATION_NOT_VALID_FOR_BIG_ENDIAN_SYSTEM) {
                                this.dialogResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_VALID_FOR_BIG_ENDIAN_SYSTEM)]);
                                return;
                            }
                        }
                        this.dialogResult.resolve(Commerce.DialogResult.OK, { signatureData: capturedSignatureData });
                        break;
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        Commerce.RetailLogger.posPaymentUIButtonClicked(this._correlationId, "SignatureDialog", "Skip");
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel, { signatureData: Commerce.StringExtensions.EMPTY });
                        break;
                }
            };
            SignatureDialog.prototype.recaptureSignature = function () {
                Commerce.RetailLogger.posPaymentUIButtonClicked(this._correlationId, "SignatureDialog", "Recapture");
                this.dialogResult.resolve(Commerce.DialogResult.No, { signatureData: Commerce.StringExtensions.EMPTY });
            };
            SignatureDialog._getEvent = function (ev) {
                if (Commerce.ArrayExtensions.hasElements(ev.touches)) {
                    ev.preventDefault();
                    return ev.touches[0];
                }
                else if (Commerce.ArrayExtensions.hasElements(ev.changedTouches)) {
                    ev.preventDefault();
                    return ev.changedTouches[0];
                }
                return ev;
            };
            SignatureDialog.prototype._getPointsAsByteArray = function () {
                if (!Commerce.SerializationHelpers.isSystemLittleEndian()) {
                    throw new Error(Commerce.ErrorTypeEnum.OPERATION_NOT_VALID_FOR_BIG_ENDIAN_SYSTEM);
                }
                var points = this._points;
                var imageDataByteArray = new Uint8Array(points.length * 4 * 2);
                var imageDataByteArrayIndex = 0;
                points.forEach(function (point) {
                    imageDataByteArray[imageDataByteArrayIndex] = point.x & 0x000000FF;
                    imageDataByteArray[imageDataByteArrayIndex + 1] = (point.x >>> 8) & 0x000000FF;
                    imageDataByteArray[imageDataByteArrayIndex + 2] = (point.x >>> 16) & 0x000000FF;
                    imageDataByteArray[imageDataByteArrayIndex + 3] = (point.x >>> 24) & 0x000000FF;
                    imageDataByteArray[imageDataByteArrayIndex + 4] = point.y & 0x000000FF;
                    imageDataByteArray[imageDataByteArrayIndex + 5] = (point.y >>> 8) & 0x000000FF;
                    imageDataByteArray[imageDataByteArrayIndex + 6] = (point.y >>> 16) & 0x000000FF;
                    imageDataByteArray[imageDataByteArrayIndex + 7] = (point.y >>> 24) & 0x000000FF;
                    imageDataByteArrayIndex += 8;
                });
                return imageDataByteArray;
            };
            SignatureDialog.prototype._getOffsetPosition = function (element) {
                var currentLeft = 0;
                var currentTop = 0;
                if (element.offsetLeft) {
                    currentLeft += element.offsetLeft;
                }
                if (element.offsetTop) {
                    currentTop += element.offsetTop;
                }
                if (element.scrollTop && element.scrollTop > 0) {
                    currentTop -= element.scrollTop;
                }
                if (element.offsetParent) {
                    var position = this._getOffsetPosition(element.offsetParent);
                    currentLeft += position[0];
                    currentTop += position[1];
                }
                return [currentLeft, currentTop];
            };
            SignatureDialog.prototype._mousedown = function (ev) {
                if (this._signatureCanvas.width !== this._signatureCanvas.offsetWidth) {
                    this._signatureCanvas.width = this._signatureCanvas.offsetWidth;
                }
                if (this._signatureCanvas.height !== this._signatureCanvas.offsetHeight) {
                    this._signatureCanvas.height = this._signatureCanvas.offsetHeight;
                }
                var position = this._getOffsetPosition(this._signatureCanvas);
                this._canvasX = position[0];
                this._canvasY = position[1];
                ev = SignatureDialog._getEvent(ev);
                this._paint = true;
                this._startX = ev.pageX - this._canvasX;
                this._startY = ev.pageY - this._canvasY;
                this._points.push(new Commerce.Proxy.Entities.Point(this._startX, this._startY));
                this.hasNoSignatureData(false);
            };
            SignatureDialog.prototype._getLineColor = function () {
                var lineColor = "#000";
                if (matchMedia("screen and (-ms-high-contrast)").matches) {
                    lineColor = "WindowText";
                }
                return lineColor;
            };
            SignatureDialog.prototype._mousemove = function (ev) {
                ev = SignatureDialog._getEvent(ev);
                if (this._paint) {
                    var context = this._signatureCanvas.getContext("2d");
                    context.beginPath();
                    context.strokeStyle = this._getLineColor();
                    context.moveTo(this._startX, this._startY);
                    context.lineTo(ev.pageX - this._canvasX, ev.pageY - this._canvasY);
                    context.closePath();
                    context.stroke();
                    this._startX = ev.pageX - this._canvasX;
                    this._startY = ev.pageY - this._canvasY;
                    this._points.push(new Commerce.Proxy.Entities.Point(this._startX, this._startY));
                    this.hasNoSignatureData(false);
                }
            };
            SignatureDialog.prototype._mouseup = function (ev) {
                if (this._paint) {
                    this._paint = false;
                    this._points.push(new Commerce.Proxy.Entities.Point(this._startX, this._startY));
                    this._points.push(this._endPoint);
                    this.hasNoSignatureData(false);
                }
            };
            SignatureDialog.prototype._mouseout = function (ev) {
                if (this._paint) {
                    this._paint = false;
                    this._points.push(new Commerce.Proxy.Entities.Point(this._startX, this._startY));
                    this._points.push(this._endPoint);
                    this.hasNoSignatureData(false);
                }
            };
            SignatureDialog.prototype._isEndpoint = function (point) {
                var isEndpoint = false;
                if (point) {
                    isEndpoint = (point.x === this._endPoint.x) || (point.y === this._endPoint.y);
                }
                return isEndpoint;
            };
            SignatureDialog.prototype._getByteArrayAsPoints = function (byteArray) {
                var retVal = {
                    error: null,
                    points: []
                };
                if (!Commerce.SerializationHelpers.isSystemLittleEndian()) {
                    retVal.error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_VALID_FOR_BIG_ENDIAN_SYSTEM);
                    return retVal;
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(byteArray) || (byteArray.length === 0) || ((byteArray.length % 8) !== 0)) {
                    retVal.error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.SIGNATURE_INVALID_FORMAT);
                    return retVal;
                }
                for (var imageDataByteArrayIndex = 0; imageDataByteArrayIndex < byteArray.length; imageDataByteArrayIndex += 8) {
                    var x = 0;
                    x = byteArray[imageDataByteArrayIndex] & 0x000000FF;
                    x = x | ((byteArray[imageDataByteArrayIndex + 1] << 8) & 0x0000FF00);
                    x = x | ((byteArray[imageDataByteArrayIndex + 2] << 16) & 0x00FF0000);
                    x = x | ((byteArray[imageDataByteArrayIndex + 3] << 24) & 0xFF000000);
                    x = x >>> 0;
                    var y = 0;
                    y = byteArray[imageDataByteArrayIndex + 4];
                    y = y | (byteArray[imageDataByteArrayIndex + 5] << 8);
                    y = y | (byteArray[imageDataByteArrayIndex + 6] << 16);
                    y = y | (byteArray[imageDataByteArrayIndex + 7] << 24);
                    y = y >>> 0;
                    retVal.points.push(new Commerce.Proxy.Entities.Point(x, y));
                }
                return retVal;
            };
            SignatureDialog.prototype._getScaleAndOffset = function (imageBounds, paddingAmount) {
                var scaleX = (this._signatureCanvas.width - (paddingAmount * 2)) / imageBounds.width;
                var scaleY = (this._signatureCanvas.height - (paddingAmount * 2)) / imageBounds.height;
                if (scaleX > scaleY) {
                    return {
                        scale: scaleY,
                        offsetX: Math.floor((this._signatureCanvas.width - imageBounds.width * scaleY) / 2),
                        offsetY: paddingAmount
                    };
                }
                else {
                    return {
                        scale: scaleX,
                        offsetX: paddingAmount,
                        offsetY: Math.floor((this._signatureCanvas.height - imageBounds.height * scaleX) / 2)
                    };
                }
            };
            SignatureDialog.prototype._getImageBounds = function (points) {
                var _this = this;
                var imageBounds = {
                    leftX: Number.MAX_VALUE,
                    topY: Number.MAX_VALUE,
                    rightX: Number.MIN_VALUE,
                    bottomY: Number.MIN_VALUE,
                    height: 0,
                    width: 0
                };
                var allEndpoints = true;
                if (Commerce.ArrayExtensions.hasElements(points)) {
                    points.forEach(function (point) {
                        if (!_this._isEndpoint(point)) {
                            allEndpoints = false;
                            imageBounds.leftX = point.x < imageBounds.leftX ? point.x : imageBounds.leftX;
                            imageBounds.topY = point.y < imageBounds.topY ? point.y : imageBounds.topY;
                            imageBounds.rightX = point.x > imageBounds.rightX ? point.x : imageBounds.rightX;
                            imageBounds.bottomY = point.y > imageBounds.bottomY ? point.y : imageBounds.bottomY;
                        }
                    });
                    if (!allEndpoints) {
                        imageBounds.height = imageBounds.bottomY - imageBounds.topY;
                        imageBounds.width = imageBounds.rightX - imageBounds.leftX;
                    }
                }
                return imageBounds;
            };
            return SignatureDialog;
        }(Controls.ModalDialog));
        Controls.SignatureDialog = SignatureDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var CashDrawerInputDialog = (function (_super) {
            __extends(CashDrawerInputDialog, _super);
            function CashDrawerInputDialog() {
                var _this = _super.call(this) || this;
                _this._cashDrawers = ko.observableArray([]);
                return _this;
            }
            CashDrawerInputDialog.prototype.onShowing = function (availableCashDrawers) {
                if (!Commerce.ArrayExtensions.hasElements(availableCashDrawers)) {
                    this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                    return;
                }
                if (availableCashDrawers.length === 1) {
                    this.dialogResult.resolve(Commerce.DialogResult.OK, availableCashDrawers[0]);
                    return;
                }
                this._cashDrawers(availableCashDrawers);
                this.visible(true);
            };
            CashDrawerInputDialog.prototype.buttonClickHandler = function (buttonId) {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            CashDrawerInputDialog.prototype.selectedCashDrawerHandler = function (eventArgs) {
                var drawer = eventArgs.data;
                this.dialogResult.resolve(Commerce.DialogResult.OK, drawer);
            };
            return CashDrawerInputDialog;
        }(Controls.ModalDialog));
        Controls.CashDrawerInputDialog = CashDrawerInputDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var HardwareStationDialog = (function (_super) {
            __extends(HardwareStationDialog, _super);
            function HardwareStationDialog() {
                var _this = _super.call(this) || this;
                _this.viewModel = new Commerce.ViewModels.HardwareStationViewModel(_this.createViewModelContext());
                _this.shiftViewModel = new Commerce.ViewModels.ShiftViewModel(_this.createViewModelContext());
                _this.manageStations = ko.observable(false);
                _this.labelResxString = ko.observable(Commerce.ViewModelAdapter.getResourceString("string_6029"));
                _this.closeButtonVisibility = ko.observable(true);
                return _this;
            }
            HardwareStationDialog.prototype.onShowing = function (dialogParams) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogParams)) {
                    this.title(dialogParams.title);
                    this.subTitle(dialogParams.subTitle);
                    this.manageStations(dialogParams.isPairedHardwareStationView);
                }
                this.closeButtonVisibility(true);
                this.loadViewModel();
                this.visible(true);
            };
            HardwareStationDialog.prototype.onButtonClick = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.onOkButtonClick();
                        break;
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.cancelDialog();
                        break;
                }
            };
            HardwareStationDialog.prototype.toggleSwitchChanged = function (checked, toggleSwitch, station) {
                var _this = this;
                if (toggleSwitch.checked && station && !station.isPaired) {
                    this.indeterminateWaitVisible(true);
                    this.viewModel.pairStation(station).fail(function () {
                        toggleSwitch.checked = false;
                    }).always(function () { _this.indeterminateWaitVisible(false); });
                }
                else if (!toggleSwitch.checked && station && station.isPaired) {
                    this.indeterminateWaitVisible(true);
                    this.viewModel.unpairStation(station).fail(function () {
                        toggleSwitch.checked = true;
                    }).always(function () { _this.indeterminateWaitVisible(false); });
                }
            };
            HardwareStationDialog.prototype.pairedStationsItemClicked = function (newItem) {
                var _this = this;
                return this.handleAsyncResult(this.viewModel.setActive(newItem))
                    .done(function (result) {
                    if (!result.canceled) {
                        if (!Commerce.Session.instance.Shift.ShiftId) {
                            _this.startShift();
                        }
                    }
                    _this.cancelDialog();
                });
            };
            HardwareStationDialog.prototype.activeStationsItemClicked = function (newItem) {
                return this.handleAsyncResult(this.viewModel.setInactive(newItem));
            };
            HardwareStationDialog.prototype.loadViewModel = function () {
                var _this = this;
                this.indeterminateWaitVisible(true);
                return this.viewModel.load()
                    .always(function () {
                    _this.indeterminateWaitVisible(false);
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            HardwareStationDialog.prototype.onOkButtonClick = function () {
                if (!this.manageStations()) {
                    this.manageStations(true);
                    this.closeButtonVisibility(false);
                    this.labelResxString(Commerce.ViewModelAdapter.getResourceString("string_75"));
                    this.subTitle(Commerce.ViewModelAdapter.getResourceString("string_6030"));
                }
                else {
                    this.manageStations(false);
                    this.closeButtonVisibility(true);
                    this.labelResxString(Commerce.ViewModelAdapter.getResourceString("string_6029"));
                    this.subTitle(Commerce.ViewModelAdapter.getResourceString("string_6001"));
                }
            };
            HardwareStationDialog.prototype.cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            HardwareStationDialog.prototype.startShift = function () {
                this.handleAsyncResult(this.shiftViewModel.openOrResumeShift(Commerce.Session.instance.CurrentEmployee.StaffId))
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            HardwareStationDialog.prototype.handleAsyncResult = function (asyncResult) {
                var _this = this;
                this.indeterminateWaitVisible(true);
                return asyncResult.always(function () {
                    _this.indeterminateWaitVisible(false);
                });
            };
            return HardwareStationDialog;
        }(Controls.ModalDialog));
        Controls.HardwareStationDialog = HardwareStationDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var HardwareStationErrorDialog = (function (_super) {
            __extends(HardwareStationErrorDialog, _super);
            function HardwareStationErrorDialog() {
                var _this = _super.call(this) || this;
                _this._hardwareStationDescription = ko.observable(null);
                _this.subTitleValue = ko.computed(function () { return _this.getSubTitleValue(); });
                _this.messageValue = ko.observable(null);
                _this.hardwareStationErrorDialogActionLines = ko.observableArray([]);
                return _this;
            }
            HardwareStationErrorDialog.prototype.onShowing = function (dialogState) {
                this._hardwareStationDescription(dialogState.hardwareStation.description);
                this.messageValue(Commerce.ErrorHelper.getErrorMessages(dialogState.errors));
                this.hardwareStationErrorDialogActionLines(this.getDialogActionLines(dialogState.errors));
                this.visible(true);
            };
            HardwareStationErrorDialog.prototype.hardwareStationErrorDialogClickHandler = function (eventArgs) {
                var response = {
                    action: eventArgs.data.Action
                };
                this.dialogResult.resolve(Commerce.DialogResult.OK, response);
            };
            HardwareStationErrorDialog.prototype.getSubTitleValue = function () {
                return Commerce.StringExtensions.format("{0}", this._hardwareStationDescription() || "");
            };
            HardwareStationErrorDialog.prototype.getDialogActionLines = function (errors) {
                var tileFields = [];
                var tileField;
                if (Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_PRINTER_ERROR)) {
                    tileField = {
                        Action: 2,
                        Label: Commerce.ViewModelAdapter.getResourceString("string_81")
                    };
                    tileFields.push(tileField);
                }
                if (Commerce.Session.instance.isLoggedOn) {
                    if (Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_PAYMENTTERMINAL_ERROR) ||
                        Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_GENERALEXCEPTION) ||
                        Commerce.ErrorHelper.hasError(errors, "Microsoft_Dynamics_Server_Internal_Error")) {
                        tileField = {
                            Action: 2,
                            Label: Commerce.ViewModelAdapter.getResourceString("string_81")
                        };
                        tileFields.push(tileField);
                    }
                    tileField = {
                        Action: 1,
                        Label: Commerce.ViewModelAdapter.getResourceString("string_12002")
                    };
                    tileFields.push(tileField);
                }
                tileField = {
                    Action: 0,
                    Label: Commerce.ViewModelAdapter.getResourceString("string_12001")
                };
                tileFields.push(tileField);
                return tileFields;
            };
            return HardwareStationErrorDialog;
        }(Controls.ModalDialog));
        Controls.HardwareStationErrorDialog = HardwareStationErrorDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var HardwareStationFallbackDialog = (function (_super) {
            __extends(HardwareStationFallbackDialog, _super);
            function HardwareStationFallbackDialog() {
                var _this = _super.call(this) || this;
                _this.viewModel = new Commerce.ViewModels.HardwareStationFallbackViewModel(_this.createViewModelContext());
                return _this;
            }
            HardwareStationFallbackDialog.prototype.onShowing = function (dialogParams) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogParams)) {
                    this._nameToDisplay = dialogParams.peripheralType === Commerce.Peripherals.HardwareStationFallback.HardwareStationFallbackManager.CASH_DRAWER ?
                        Commerce.ViewModelAdapter.getResourceString("string_30328") : Commerce.ViewModelAdapter.getResourceString("string_30326");
                    this.title(dialogParams.title);
                    this.subTitle(Commerce.StringExtensions.format(dialogParams.subTitle, this._nameToDisplay));
                }
                this._loadViewModel();
                this.visible(true);
            };
            HardwareStationFallbackDialog.prototype.onButtonClick = function () {
                this.cancelDialog();
            };
            HardwareStationFallbackDialog.prototype.pairedStationsItemClicked = function (hardwareStation) {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { hardwareStation: hardwareStation });
            };
            HardwareStationFallbackDialog.prototype._loadViewModel = function () {
                var _this = this;
                this.indeterminateWaitVisible(true);
                return this.viewModel.loadAsync()
                    .always(function () {
                    _this.indeterminateWaitVisible(false);
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            HardwareStationFallbackDialog.prototype.cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return HardwareStationFallbackDialog;
        }(Controls.ModalDialog));
        Controls.HardwareStationFallbackDialog = HardwareStationFallbackDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var RefinerDialog = (function (_super) {
            __extends(RefinerDialog, _super);
            function RefinerDialog() {
                var _this = _super.call(this) || this;
                _this.viewModel = new Commerce.ViewModels.RefinersViewModel(_this.createViewModelContext());
                return _this;
            }
            RefinerDialog.prototype.onShowing = function (state) {
                var _this = this;
                this._refinerListElement = $(this.element).find(".refinerList");
                this._createRefinerControlHandler = state.createRefinerControlHandler;
                this._validationErrorsTitle = state.validationErrorsTitle;
                this.viewModel.load(state);
                state.refiners.forEach(function (refiner) {
                    if (Commerce.ArrayExtensions.hasElements(refiner.SelectedValues)) {
                        _this.addRefinerUI(refiner, false);
                    }
                });
                this.visible(true);
            };
            RefinerDialog.prototype.afterShow = function () {
                if (Commerce.ArrayExtensions.hasElements(this.viewModel.availableRefiners()) &&
                    this.viewModel.getOriginalRefiners().length === this.viewModel.availableRefiners().length) {
                    this.viewModel.toggleRefinerListFlyout()();
                }
            };
            RefinerDialog.prototype.clear = function () {
                this.viewModel.clear();
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._refinerListElement)) {
                    this._refinerListElement.html("");
                }
            };
            RefinerDialog.prototype.addRefinerUI = function (selectedRefiner, hideRefinerListFlyout) {
                var _this = this;
                if (hideRefinerListFlyout === void 0) { hideRefinerListFlyout = true; }
                if (Commerce.ObjectExtensions.isNullOrUndefined(selectedRefiner)) {
                    return;
                }
                if (hideRefinerListFlyout) {
                    this.viewModel.toggleRefinerListFlyout()();
                }
                this.indeterminateWaitVisible(true);
                this.viewModel.loadRefinerValues(selectedRefiner)
                    .always(function () { _this.indeterminateWaitVisible(false); })
                    .done(function (result) {
                    if (!result.canceled) {
                        _this.createRefinerUI(selectedRefiner);
                        _this.viewModel.availableRefiners.remove(selectedRefiner);
                    }
                });
            };
            RefinerDialog.prototype.applyRefinerButtonClick = function (operationId) {
                Commerce.RetailLogger.dialogsRefinerDialogButtonClicked(operationId);
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                    case Controls.Dialog.OperationIds.CLOSE_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        var validationErrors = this.viewModel.validateRefiners();
                        if (Commerce.ArrayExtensions.hasElements(validationErrors)) {
                            Commerce.NotificationHandler.displayClientErrors(validationErrors, this._validationErrorsTitle);
                        }
                        else {
                            this.dialogResult.resolve(Commerce.DialogResult.OK, this.viewModel.getSelectedRefinerValues());
                        }
                        break;
                    default:
                        throw "Unknown operation Id: " + operationId;
                }
            };
            RefinerDialog.prototype.createRefinerUI = function (refiner) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(refiner)) {
                    var container = document.createElement("div");
                    container.className = "borderBottom marginTop08 padBottom08 width100Percent";
                    if (this._createRefinerControlHandler(refiner, container, this.refinerRemovedHandler.bind(this))) {
                        this._refinerListElement.append(container);
                    }
                }
                else {
                    Commerce.RetailLogger.viewsControlsRefinersWrongInputParameters(JSON.stringify(refiner));
                    return false;
                }
                return true;
            };
            RefinerDialog.prototype.refinerRemovedHandler = function (refiner) {
                this.viewModel.availableRefiners.push(refiner);
            };
            return RefinerDialog;
        }(Controls.ModalDialog));
        Controls.RefinerDialog = RefinerDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SearchRefinerDialog = (function (_super) {
            __extends(SearchRefinerDialog, _super);
            function SearchRefinerDialog() {
                var _this = _super.call(this) || this;
                var searchRefinersViewModelOptions = {
                    isRemoteSearchEnabled: Commerce.ApplicationContext.Instance.deviceConfiguration.EnableAxCustomerSearch
                };
                _this.viewModel = new Commerce.ViewModels.SearchRefinersViewModel(_this.createViewModelContext(), searchRefinersViewModelOptions);
                return _this;
            }
            SearchRefinerDialog.prototype.onShowing = function (state) {
                this.viewModel.initializeRefinerValues(state.refiners);
                this.viewModel.selectedSearchLocation(state.preSelectedSearchLocation);
                this.visible(true);
            };
            SearchRefinerDialog.prototype.afterShow = function () {
                if (this.viewModel.isSelectedSearchLocationLocal() &&
                    this.viewModel.localStoreRefinerViewModel.hasRefiners() &&
                    !this.viewModel.localStoreRefinerViewModel.hasSelectedRefiners()) {
                    this.viewModel.localStoreRefinerViewModel.toggleRefinerListFlyout()();
                }
            };
            SearchRefinerDialog.prototype.applyRefinerButtonClick = function (operationId) {
                Commerce.RetailLogger.dialogsRefinerDialogButtonClicked(operationId);
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                    case Controls.Dialog.OperationIds.CLOSE_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        var validationErrors = this.viewModel.localStoreRefinerViewModel.validateRefiners();
                        if (Commerce.ArrayExtensions.hasElements(validationErrors)) {
                            Commerce.NotificationHandler.displayClientErrors(validationErrors);
                        }
                        else {
                            var result = {
                                selectedRefiners: this.viewModel.getSelectedRefinerValues(),
                                selectedSearchLocation: this.viewModel.selectedSearchLocation()
                            };
                            this.dialogResult.resolve(Commerce.DialogResult.OK, result);
                        }
                        break;
                    default:
                        throw "Unknown operation Id: " + operationId;
                }
            };
            SearchRefinerDialog.prototype.dialogCloseButtonClick = function () {
                this.applyRefinerButtonClick(Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK);
            };
            return SearchRefinerDialog;
        }(Controls.ModalDialog));
        Controls.SearchRefinerDialog = SearchRefinerDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var GetReportFilterValuesDialog = (function (_super) {
            __extends(GetReportFilterValuesDialog, _super);
            function GetReportFilterValuesDialog() {
                var _this = _super.call(this) || this;
                _this.parametersForDisplay = ko.observableArray([]);
                return _this;
            }
            GetReportFilterValuesDialog.prototype.onShowing = function (dialogState) {
                var parametersForDisplay = this._convertToReportParametersForDisplay(dialogState.parameters);
                this.parametersForDisplay(parametersForDisplay);
                this.visible(true);
            };
            GetReportFilterValuesDialog.prototype.buttonClickHandler = function (buttonId) {
                var parameters = this._convertToReportParameters(this.parametersForDisplay());
                switch (buttonId) {
                    case Commerce.Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, { parameters: parameters });
                        break;
                    case Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            GetReportFilterValuesDialog.prototype.dialogCloseButtonClick = function () {
                this.buttonClickHandler(Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK);
            };
            GetReportFilterValuesDialog.prototype._convertToReportParametersForDisplay = function (parameters) {
                var _this = this;
                return parameters.map(function (parameter) {
                    var type;
                    var value;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(parameter.value.DateTimeOffsetValue)) {
                        value = _this._getFormattedDate(parameter.value.DateTimeOffsetValue);
                        type = Commerce.Client.Entities.ReportParameterTypeEnum.DATETIME;
                    }
                    else if (!Commerce.ObjectExtensions.isNullOrUndefined(parameter.value.IntegerValue)) {
                        value = Commerce.NumberExtensions.formatNumber(Commerce.NumberExtensions.parseNumber(parameter.value.IntegerValue.toString()), Commerce.NumberExtensions.getDecimalPrecision());
                        type = Commerce.Client.Entities.ReportParameterTypeEnum.INTEGER;
                    }
                    else if (!Commerce.ObjectExtensions.isNullOrUndefined(parameter.value.DecimalValue)) {
                        value = Commerce.NumberExtensions.formatNumber(Commerce.NumberExtensions.parseNumber(parameter.value.IntegerValue.toString()), Commerce.NumberExtensions.getDecimalPrecision());
                        type = Commerce.Client.Entities.ReportParameterTypeEnum.DECIMAL;
                    }
                    else {
                        value = parameter.value.StringValue;
                        type = Commerce.Client.Entities.ReportParameterTypeEnum.STRING;
                    }
                    return {
                        Name: parameter.name,
                        Label: parameter.label,
                        Type: type,
                        Value: value
                    };
                });
            };
            GetReportFilterValuesDialog.prototype._convertToReportParameters = function (parametersForDisplay) {
                return parametersForDisplay.map(function (parameterForDisplay) {
                    var value = new Commerce.Proxy.Entities.CommercePropertyValueClass();
                    switch (parameterForDisplay.Type) {
                        case Commerce.Client.Entities.ReportParameterTypeEnum.DATETIME:
                            var date = new Date(parameterForDisplay.Value);
                            value.DateTimeOffsetValue = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0, 0));
                            break;
                        case Commerce.Client.Entities.ReportParameterTypeEnum.INTEGER:
                            value.IntegerValue = Commerce.NumberExtensions.parseNumber(parameterForDisplay.Value);
                            break;
                        case Commerce.Client.Entities.ReportParameterTypeEnum.DECIMAL:
                            value.DecimalValue = Commerce.NumberExtensions.parseNumber(parameterForDisplay.Value);
                            break;
                        case Commerce.Client.Entities.ReportParameterTypeEnum.STRING:
                        default:
                            value.StringValue = parameterForDisplay.Value;
                    }
                    return {
                        name: parameterForDisplay.Name,
                        label: parameterForDisplay.Label,
                        value: value
                    };
                });
            };
            GetReportFilterValuesDialog.prototype._getFormattedDate = function (date) {
                return date.getUTCFullYear().toString() + "/" + ("0" + (date.getUTCMonth() + 1)).slice(-2) + "/" + ("0" + date.getUTCDate()).slice(-2);
            };
            return GetReportFilterValuesDialog;
        }(Controls.ModalDialog));
        Controls.GetReportFilterValuesDialog = GetReportFilterValuesDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var EditChecklistTaskDialog = (function (_super) {
            __extends(EditChecklistTaskDialog, _super);
            function EditChecklistTaskDialog() {
                var _this = _super.call(this) || this;
                _this.originalDialogState = null;
                _this.originalChecklistTask = null;
                _this.name = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.description = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.assignedWorkerPersonnelNumber = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.assignedWorkerName = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.contactPersonPersonnelNumber = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.contactPersonName = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.tasklistId = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.tasklistName = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.tasklistTasksCount = ko.observable(null);
                _this.tasklistStartDatetime = ko.observable(null);
                _this.dueDateTime = ko.observable(null);
                _this.localizedTaskStatus = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.statusValue = ko.observable(null);
                _this.deepLinkTypeValue = ko.observable(Commerce.Proxy.Entities.ChecklistTaskDeepLinkType.None);
                _this.deepLink = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.deepLinkPosOperationName = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.deepLinkCustomerAccountName = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.instructions = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.taskLinkTypes = ko.observableArray([]);
                _this.taskLinkPOSOperations = ko.observableArray([]);
                _this.isNewTask = ko.observable(false);
                _this.isAdHocTask = ko.observable(false);
                return _this;
            }
            EditChecklistTaskDialog.prototype.onShowing = function (dialogState) {
                dialogState = dialogState ||
                    {
                        checklistTask: null,
                        checklistTaskAssignedToWorkerName: Commerce.StringExtensions.EMPTY,
                        contactPersonName: Commerce.StringExtensions.EMPTY,
                        deepLinkCustomerAccountName: Commerce.StringExtensions.EMPTY
                    };
                if (Commerce.ObjectExtensions.isNullOrUndefined(dialogState.checklistTask)) {
                    this.dialogCloseButtonClick();
                    return;
                }
                this.originalDialogState = dialogState;
                this.originalChecklistTask = dialogState.checklistTask;
                this.name(dialogState.checklistTask.Name);
                this.description(dialogState.checklistTask.Description);
                this.assignedWorkerPersonnelNumber((Commerce.ArrayExtensions.hasElements(dialogState.checklistTask.AssignedToPersonnelNumbers) &&
                    !Commerce.StringExtensions.isNullOrWhitespace(dialogState.checklistTask.AssignedToPersonnelNumbers[0])) ?
                    dialogState.checklistTask.AssignedToPersonnelNumbers[0] : Commerce.StringExtensions.EMPTY);
                this.assignedWorkerName(Commerce.StringExtensions.isNullOrWhitespace(dialogState.checklistTaskAssignedToWorkerName) ?
                    Commerce.ViewModelAdapter.getResourceString("string_7765") : dialogState.checklistTaskAssignedToWorkerName);
                this.contactPersonPersonnelNumber(dialogState.checklistTask.ContactPersonPersonnelNumber);
                this.contactPersonName(Commerce.StringExtensions.isNullOrWhitespace(dialogState.contactPersonName) ?
                    Commerce.ViewModelAdapter.getResourceString("string_7791") : dialogState.contactPersonName);
                this.isNewTask(Commerce.StringExtensions.isNullOrWhitespace(dialogState.checklistTask.ChecklistId) ? true : false);
                this.tasklistId(dialogState.checklistTask.ChecklistId);
                this.tasklistName(Commerce.ViewModelAdapter.getResourceString("string_7773"));
                this.dueDateTime(dialogState.checklistTask.DueDateTime);
                this.localizedTaskStatus(this._getLocalizedStringForTaskStatus(dialogState.checklistTask.StatusValue));
                this.statusValue(dialogState.checklistTask.StatusValue);
                this.instructions(dialogState.checklistTask.Instructions);
                var taskLinkTypeOptions = [
                    {
                        name: Commerce.ViewModelAdapter.getResourceString("string_7786"),
                        value: Commerce.Proxy.Entities.ChecklistTaskDeepLinkType.None,
                        selected: dialogState.checklistTask.DeepLinkTypeValue === Commerce.Proxy.Entities.ChecklistTaskDeepLinkType.None
                    },
                    {
                        name: Commerce.ViewModelAdapter.getResourceString("string_7759"),
                        value: Commerce.Proxy.Entities.ChecklistTaskDeepLinkType.Url,
                        selected: dialogState.checklistTask.DeepLinkTypeValue === Commerce.Proxy.Entities.ChecklistTaskDeepLinkType.Url
                    },
                    {
                        name: Commerce.ViewModelAdapter.getResourceString("string_7782"),
                        value: Commerce.Proxy.Entities.ChecklistTaskDeepLinkType.PosOperation,
                        selected: dialogState.checklistTask.DeepLinkTypeValue === Commerce.Proxy.Entities.ChecklistTaskDeepLinkType.PosOperation
                    },
                    {
                        name: Commerce.ViewModelAdapter.getResourceString("string_7788"),
                        value: Commerce.Proxy.Entities.ChecklistTaskDeepLinkType.CustomerAccount,
                        selected: dialogState.checklistTask.DeepLinkTypeValue === Commerce.Proxy.Entities.ChecklistTaskDeepLinkType.CustomerAccount
                    }
                ];
                var taskLinkPOSOperationOptions = [];
                Commerce.ApplicationContext.Instance.operationPermissions.forEach(function (operationPermission) {
                    if (operationPermission.IsEnabledForTaskManagement) {
                        taskLinkPOSOperationOptions.push({
                            name: operationPermission.OperationName,
                            value: operationPermission.OperationId.toString(),
                            selected: operationPermission.OperationId.toString() === dialogState.checklistTask.DeepLink
                        });
                    }
                });
                this.taskLinkTypes(taskLinkTypeOptions);
                this.taskLinkPOSOperations(taskLinkPOSOperationOptions);
                this.deepLinkTypeValue(dialogState.checklistTask.DeepLinkTypeValue);
                this.deepLink(dialogState.checklistTask.DeepLink);
                this.deepLinkPosOperationName(dialogState.checklistTask.DeepLinkPosOperationName);
                this.deepLinkCustomerAccountName(dialogState.deepLinkCustomerAccountName);
                this.visible(true);
            };
            EditChecklistTaskDialog.prototype.onButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, { checklistTask: this._getChecklistTaskWithUpdatedValues() });
                        break;
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            EditChecklistTaskDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            EditChecklistTaskDialog.prototype.changeAssignTo = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var asyncQueue = new Commerce.AsyncQueue();
                var getStoreEmployeeClientRequest = new Commerce.GetStoreEmployeeClientRequest(correlationId, Commerce.ViewModelAdapter.getResourceString("string_7738"), Commerce.ViewModelAdapter.getResourceString("string_7739"));
                asyncQueue
                    .enqueue(function () {
                    return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getStoreEmployeeClientRequest)));
                })
                    .enqueue(function (result) {
                    _this.assignedWorkerPersonnelNumber(result.data.result.StaffId);
                    _this.assignedWorkerName(result.data.result.Name);
                    return Commerce.VoidAsyncResult.createResolved();
                });
                asyncQueue.run().fail(function (errors) {
                    _this.dialogResult.reject(errors);
                });
            };
            EditChecklistTaskDialog.prototype.changeContactPerson = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var asyncQueue = new Commerce.AsyncQueue();
                var getStoreEmployeeClientRequest = new Commerce.GetStoreEmployeeClientRequest(correlationId, Commerce.ViewModelAdapter.getResourceString("string_7792"), Commerce.ViewModelAdapter.getResourceString("string_7739"));
                asyncQueue
                    .enqueue(function () {
                    return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getStoreEmployeeClientRequest)));
                })
                    .enqueue(function (result) {
                    _this.contactPersonPersonnelNumber(result.data.result.StaffId);
                    _this.contactPersonName(result.data.result.Name);
                    return Commerce.VoidAsyncResult.createResolved();
                });
                asyncQueue.run().fail(function (errors) {
                    _this.dialogResult.reject(errors);
                });
            };
            EditChecklistTaskDialog.prototype.changeCustomerAccount = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var getStoreCustomerClientRequest = new Commerce.GetStoreCustomerClientRequest(correlationId, Commerce.Proxy.Entities.SearchLocation.Local);
                Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getStoreCustomerClientRequest))
                    .done(function (result) {
                    if (result && !result.canceled) {
                        _this.deepLink(result.data.result.AccountNumber);
                        _this.deepLinkCustomerAccountName(result.data.result.FullName);
                    }
                })
                    .fail(function (errors) {
                    _this.dialogResult.reject(errors);
                });
            };
            EditChecklistTaskDialog.prototype.changeTasklist = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var asyncQueue = new Commerce.AsyncQueue();
                var getStoreTasklistClientRequest = new Commerce.TaskManagement.GetStoreTasklistClientRequest(correlationId);
                asyncQueue
                    .enqueue(function () {
                    return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getStoreTasklistClientRequest)));
                })
                    .enqueue(function (result) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(result.data.result)) {
                        _this.tasklistId(Commerce.StringExtensions.EMPTY);
                        _this.tasklistName(Commerce.ViewModelAdapter.getResourceString("string_7774"));
                        _this.isAdHocTask(true);
                    }
                    else {
                        _this.tasklistId(result.data.result.ProcessId);
                        _this.tasklistName(result.data.result.Name);
                        _this.tasklistTasksCount(result.data.result.Tasks.length);
                        _this.tasklistStartDatetime(result.data.result.StartDateTime);
                        _this.isAdHocTask(false);
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                });
                asyncQueue.run().fail(function (errors) {
                    _this.dialogResult.reject(errors);
                });
            };
            EditChecklistTaskDialog.prototype.changeStatus = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var asyncQueue = new Commerce.AsyncQueue();
                var getTasksStatusClientRequest = new Commerce.TaskManagement.GetTasksStatusClientRequest(correlationId, Commerce.ViewModelAdapter.getResourceString("string_7742"));
                asyncQueue
                    .enqueue(function () {
                    return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getTasksStatusClientRequest)));
                })
                    .enqueue(function (result) {
                    _this.localizedTaskStatus(_this._getLocalizedStringForTaskStatus(result.data.result));
                    _this.statusValue(result.data.result);
                    return Commerce.VoidAsyncResult.createResolved();
                });
                asyncQueue.run().fail(function (errors) {
                    _this.dialogResult.reject(errors);
                });
            };
            EditChecklistTaskDialog.prototype.changeTaskLinkType = function (changedValue) {
                this.deepLinkTypeValue(changedValue.deepLinkTypeValue());
                this.deepLink((!Commerce.ObjectExtensions.isNullOrUndefined(this.originalChecklistTask) &&
                    changedValue.deepLinkTypeValue() === this.originalChecklistTask.DeepLinkTypeValue) ?
                    this.originalChecklistTask.DeepLink : Commerce.StringExtensions.EMPTY);
                this.deepLinkCustomerAccountName((!Commerce.StringExtensions.isNullOrWhitespace(this.deepLink()) &&
                    this.deepLinkTypeValue() === Commerce.Proxy.Entities.ChecklistTaskDeepLinkType.CustomerAccount) ?
                    this.originalDialogState.deepLinkCustomerAccountName : Commerce.StringExtensions.EMPTY);
            };
            EditChecklistTaskDialog.prototype.changeTaskLinkPOSOperation = function (changedValue) {
                this.deepLink(changedValue.deepLink());
            };
            EditChecklistTaskDialog.prototype.onDueDateChange = function (selectedDate) {
                this.dueDateTime(selectedDate);
            };
            EditChecklistTaskDialog.prototype.toggleIsOptional = function (checked) {
                this.isOptional(checked);
            };
            EditChecklistTaskDialog.prototype._getLocalizedStringForTaskStatus = function (taskStatusValue) {
                var statusLocalizedTexts = [
                    Commerce.StringExtensions.EMPTY,
                    Commerce.ViewModelAdapter.getResourceString("string_7723"),
                    Commerce.ViewModelAdapter.getResourceString("string_7724"),
                    Commerce.ViewModelAdapter.getResourceString("string_7725")
                ];
                return statusLocalizedTexts[taskStatusValue];
            };
            EditChecklistTaskDialog.prototype._getChecklistTaskWithUpdatedValues = function () {
                var task = new Commerce.Proxy.Entities.ChecklistTaskClass();
                var selectedDueDate = Commerce.ObjectExtensions.isNullOrUndefined(this.dueDateTime()) ? new Date() : this.dueDateTime();
                task.Version = this.originalChecklistTask.Version;
                task.Id = this.originalChecklistTask.Id;
                task.Name = this.name();
                task.Description = this.description();
                task.AssignedToPersonnelNumbers = [this.assignedWorkerPersonnelNumber()];
                task.ChecklistId = this.tasklistId();
                task.DueDateTime = new Date(Date.UTC(selectedDueDate.getFullYear(), selectedDueDate.getMonth(), selectedDueDate.getDate(), 0, 0, 0));
                task.StatusValue = this.statusValue();
                task.Instructions = this.instructions();
                task.ContactPersonPersonnelNumber = this.contactPersonPersonnelNumber();
                task.DeepLinkTypeValue = this.deepLinkTypeValue();
                if (this.deepLinkTypeValue() === Commerce.Proxy.Entities.ChecklistTaskDeepLinkType.None) {
                    task.DeepLink = Commerce.StringExtensions.EMPTY;
                }
                else {
                    task.DeepLink = this.deepLink();
                }
                return task;
            };
            return EditChecklistTaskDialog;
        }(Controls.ModalDialog));
        Controls.EditChecklistTaskDialog = EditChecklistTaskDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var GetStoreCustomerDialog = (function (_super) {
            __extends(GetStoreCustomerDialog, _super);
            function GetStoreCustomerDialog() {
                var _this = _super.call(this) || this;
                _this.viewModel = new Commerce.ViewModels.CustomerSearchViewModel(_this.createViewModelContext());
                _this.reloadCustomersCallback = ko.observable(function () { return; });
                _this.searchText = ko.observable(null);
                _this._selectedCustomer = null;
                _this._searchLocation = Commerce.Proxy.Entities.SearchLocation.Local;
                return _this;
            }
            GetStoreCustomerDialog.prototype.onShowing = function (dialogState) {
                dialogState = dialogState || { searchLocation: Commerce.Proxy.Entities.SearchLocation.Local };
                this._searchLocation = dialogState.searchLocation;
                this.visible(true);
            };
            GetStoreCustomerDialog.prototype.onButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, { customer: this._selectedCustomer });
                        break;
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.cancelDialog();
                        break;
                }
            };
            GetStoreCustomerDialog.prototype.itemClickHandler = function (data) {
                var _this = this;
                this._selectedCustomer = data;
                setTimeout(function () {
                    _this.onButtonClick(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
                }, 100);
            };
            GetStoreCustomerDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            GetStoreCustomerDialog.prototype.performCustomerFilter = function () {
                if (!Commerce.StringExtensions.isNullOrWhitespace(this.searchText())) {
                    var customerSearchCriteria = {
                        Keyword: this.searchText(),
                        SearchLocationValue: this._searchLocation
                    };
                    this.viewModel.CustomerSearchCriteria = customerSearchCriteria;
                    this.reloadCustomersCallback()();
                }
            };
            GetStoreCustomerDialog.prototype.cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return GetStoreCustomerDialog;
        }(Controls.ModalDialog));
        Controls.GetStoreCustomerDialog = GetStoreCustomerDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var GetStoreTasklistDialog = (function (_super) {
            __extends(GetStoreTasklistDialog, _super);
            function GetStoreTasklistDialog() {
                var _this = _super.call(this) || this;
                var viewModelOptions = {
                    selectionHandler: new Commerce.CancelableSelectionHandler(function () { return void 0; }, function () { return void 0; }),
                };
                _this.viewModel = new Commerce.ViewModels.TaskManagementViewModel(_this.createViewModelContext(), viewModelOptions);
                _this._selectedTasklist = null;
                return _this;
            }
            GetStoreTasklistDialog.prototype.onShowing = function (dialogState) {
                dialogState = dialogState || {};
                this.visible(true);
            };
            GetStoreTasklistDialog.prototype.onButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, { tasklist: this._selectedTasklist });
                        break;
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this._cancelDialog();
                        break;
                }
            };
            GetStoreTasklistDialog.prototype.adHocTasklistClick = function () {
                this._selectedTasklist = null;
                this.onButtonClick(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
            };
            GetStoreTasklistDialog.prototype.itemInvokedHandler = function (data) {
                var _this = this;
                this._selectedTasklist = data;
                setTimeout(function () {
                    _this.onButtonClick(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
                }, 100);
            };
            GetStoreTasklistDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            GetStoreTasklistDialog.prototype._cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return GetStoreTasklistDialog;
        }(Controls.ModalDialog));
        Controls.GetStoreTasklistDialog = GetStoreTasklistDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var TimelineCreateEditDialogMode;
        (function (TimelineCreateEditDialogMode) {
            TimelineCreateEditDialogMode[TimelineCreateEditDialogMode["None"] = 0] = "None";
            TimelineCreateEditDialogMode[TimelineCreateEditDialogMode["Create"] = 1] = "Create";
            TimelineCreateEditDialogMode[TimelineCreateEditDialogMode["Edit"] = 2] = "Edit";
            TimelineCreateEditDialogMode[TimelineCreateEditDialogMode["View"] = 3] = "View";
        })(TimelineCreateEditDialogMode = Controls.TimelineCreateEditDialogMode || (Controls.TimelineCreateEditDialogMode = {}));
        var TimelineCreateEditDialog = (function (_super) {
            __extends(TimelineCreateEditDialog, _super);
            function TimelineCreateEditDialog() {
                var _this = _super.call(this) || this;
                _this.backButtonVisible = ko.observable(false);
                _this.timelineItemType = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.timelineItemTypeDescription = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.timelineItemTypeIcon = ko.computed(function () {
                    return _this._getTypeIcon(_this.timelineItemType());
                });
                _this.timelineItemTitle = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.timelineItemDate = ko.observable(null);
                _this.timelineItemTime = ko.observable(null);
                _this.isEditDateTimeVisible = ko.observable(false);
                _this.timelineItemDateReadOnly = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.timelineItemDescription = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.isOkButtonVisible = ko.observable(false);
                _this.isOkButtonDisabled = ko.computed(function () {
                    return Commerce.StringExtensions.isNullOrWhitespace(_this.timelineItemTitle()) ||
                        Commerce.StringExtensions.isNullOrWhitespace(_this.timelineItemDescription());
                });
                _this.isSelectTypeVisible = ko.observable(false);
                _this.isReadOnly = ko.observable(true);
                return _this;
            }
            TimelineCreateEditDialog.prototype.onShowing = function (dialogState) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(dialogState)) {
                    throw "TimelineCreateEditDialog missing state";
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(dialogState.timelineItem)) {
                    throw "TimelineCreateEditDialog state missing timelineItem";
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(dialogState.timelineItemType)) {
                    throw "TimelineCreateEditDialog state missing timelineItemType";
                }
                this._controlState = dialogState;
                this._controlOutput = { timelineItem: this._controlState.timelineItem };
                this.isEditDateTimeVisible(Commerce.StringExtensions.compare(this._controlState.timelineItem.EntityType, Commerce.TimelineHelper.ENTITY_TYPE_NOTE, true) !== 0);
                if (dialogState.mode === TimelineCreateEditDialogMode.Create) {
                    this.title(Commerce.StringExtensions.format(Commerce.StringResourceManager.getString("string_30236"), Commerce.TimelineHelper.getEntityTypeName(this._controlOutput.timelineItem.EntityType)));
                }
                else if (dialogState.mode === TimelineCreateEditDialogMode.Edit) {
                    this.title(Commerce.StringExtensions.format(Commerce.StringResourceManager.getString("string_30247"), Commerce.TimelineHelper.getEntityTypeName(this._controlOutput.timelineItem.EntityType)));
                }
                else {
                    this.title(Commerce.TimelineHelper.getEntityTypeName(this._controlOutput.timelineItem.EntityType));
                }
                this.backButtonVisible(false);
                this.isSelectTypeVisible(this._controlState.mode !== TimelineCreateEditDialogMode.View &&
                    Commerce.ObjectExtensions.isFunction(this._controlState.selectTypeHandler));
                var storeSpecificDate = !Commerce.ObjectExtensions.isNullOrUndefined(this._controlState.timelineItem.StartDateTime) ?
                    new Date(Commerce.Formatters.ShortDateAndTimeFormatter(this._controlState.timelineItem.StartDateTime)) :
                    new Date(Commerce.Formatters.ShortDateAndTimeFormatter(new Date()));
                this.timelineItemType(this._controlState.timelineItem.TypeId);
                this.timelineItemTypeDescription(this._controlState.timelineItemType.Description);
                this.timelineItemTitle(this._controlState.timelineItem.Title);
                this.timelineItemDate(storeSpecificDate);
                this.timelineItemTime(storeSpecificDate);
                this.timelineItemDateReadOnly(Commerce.Formatters.ShortDateAndTimeFormatter(storeSpecificDate));
                this.timelineItemDescription(this._controlState.timelineItem.Description);
                this.isOkButtonVisible(this._controlState.mode !== TimelineCreateEditDialogMode.View);
                this.isReadOnly(this._controlState.mode === TimelineCreateEditDialogMode.View);
                this.visible(true);
            };
            TimelineCreateEditDialog.prototype.onButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this._controlOutput.timelineItem.Title = this.timelineItemTitle();
                        this._controlOutput.timelineItem.StartDateTime = new Date(this.timelineItemDate().getFullYear(), this.timelineItemDate().getMonth(), this.timelineItemDate().getDate(), this.timelineItemTime().getHours(), this.timelineItemTime().getMinutes());
                        this._controlOutput.timelineItem.Description = this.timelineItemDescription();
                        this.dialogResult.resolve(Commerce.DialogResult.OK, this._controlOutput);
                        break;
                }
            };
            TimelineCreateEditDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            TimelineCreateEditDialog.prototype.onDateChange = function (selectedDate) {
                this.timelineItemDate(selectedDate);
            };
            TimelineCreateEditDialog.prototype.onTimeChange = function (selectedTime) {
                this.timelineItemTime(selectedTime);
            };
            TimelineCreateEditDialog.prototype.selectTypeClickHandler = function () {
                var _this = this;
                this._controlState.selectTypeHandler(this._controlOutput.timelineItem).done(function (response) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(response)) {
                        _this._controlOutput.timelineItem.EntityType = response.timelineEntityType;
                        _this._controlOutput.timelineItem.TypeId = response.timelineItemType.TypeId;
                        _this.timelineItemType(_this._controlOutput.timelineItem.TypeId);
                        _this.timelineItemTypeDescription(response.timelineItemType.Description);
                    }
                });
            };
            TimelineCreateEditDialog.prototype.dialogGoBack = function (element) {
                this.selectTypeClickHandler();
            };
            TimelineCreateEditDialog.prototype._getTypeIcon = function (typeId) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._controlOutput) &&
                    !Commerce.ObjectExtensions.isNullOrUndefined(this._controlOutput.timelineItem)) {
                    return Commerce.StringExtensions.format(Commerce.TimelineHelper.TILE_ICON_CSS_CLASS_FORMAT, Commerce.TimelineHelper.getTypeCssClass(this._controlOutput.timelineItem.EntityType, typeId));
                }
                return Commerce.StringExtensions.EMPTY;
            };
            return TimelineCreateEditDialog;
        }(Controls.ModalDialog));
        Controls.TimelineCreateEditDialog = TimelineCreateEditDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var TimelineSelectTypeDialog = (function (_super) {
            __extends(TimelineSelectTypeDialog, _super);
            function TimelineSelectTypeDialog() {
                var _this = _super.call(this) || this;
                _this.backButtonVisible = ko.observable(false);
                _this.typesListVisible = ko.observable(false);
                _this.entityTypesList = ko.observableArray([]);
                _this.entityTypesListVisible = ko.observable(false);
                _this.typesList = ko.observableArray([]);
                _this._controlOutput = { entityType: Commerce.StringExtensions.EMPTY, itemType: null };
                return _this;
            }
            TimelineSelectTypeDialog.prototype.onShowing = function (dialogState) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(dialogState)) {
                    throw "TimelineSelectTypeDialog missing state";
                }
                if (!Commerce.ArrayExtensions.hasElements(dialogState.timelineItemTypeMaps)) {
                    throw "TimelineSelectTypeDialog should not be called with empty list of dataSourceTypes.";
                }
                this._controlState = dialogState;
                if (Commerce.StringExtensions.isNullOrWhitespace(this._controlState.entityType)) {
                    this._showEntityTypesList();
                }
                else {
                    this._controlOutput.entityType = this._controlState.entityType;
                    this._showTypesList();
                }
                this.visible(true);
            };
            TimelineSelectTypeDialog.prototype.onButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            TimelineSelectTypeDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            TimelineSelectTypeDialog.prototype.selectEntityTypeClickHandler = function (selectedEntityTypeMap) {
                this._controlOutput.entityType = selectedEntityTypeMap.EntityType;
                this._showTypesList();
            };
            TimelineSelectTypeDialog.prototype.selectTypeClickHandler = function (selectedItemType) {
                this._controlOutput.itemType = selectedItemType;
                this.dialogResult.resolve(Commerce.DialogResult.OK, this._controlOutput);
            };
            TimelineSelectTypeDialog.prototype.getTypeIcon = function (typeId) {
                return Commerce.StringExtensions.format(Commerce.TimelineHelper.TILE_ICON_CSS_CLASS_FORMAT, Commerce.TimelineHelper.getTypeCssClass(this._controlOutput.entityType, typeId));
            };
            TimelineSelectTypeDialog.prototype.isPreSelected = function (timelineItemType) {
                return this._controlState.typeId === timelineItemType.TypeId;
            };
            TimelineSelectTypeDialog.prototype.dialogGoBack = function (element) {
                this._showEntityTypesList();
            };
            TimelineSelectTypeDialog.prototype._hideAllPanels = function () {
                this.entityTypesListVisible(false);
                this.typesListVisible(false);
            };
            TimelineSelectTypeDialog.prototype._showEntityTypesList = function () {
                this._hideAllPanels();
                this._controlOutput.entityType = Commerce.StringExtensions.EMPTY;
                this._controlOutput.itemType = null;
                this.title(Commerce.StringResourceManager.getString("string_30235"));
                this.backButtonVisible(false);
                this.entityTypesList(this._controlState.timelineItemTypeMaps);
                this.entityTypesListVisible(true);
            };
            TimelineSelectTypeDialog.prototype._showTypesList = function () {
                var _this = this;
                this._hideAllPanels();
                this._controlOutput.itemType = null;
                this.title(Commerce.StringExtensions.format(Commerce.StringResourceManager.getString("string_30236"), Commerce.TimelineHelper.getEntityTypeName(this._controlOutput.entityType)));
                this.subTitle(Commerce.StringResourceManager.getString("string_30237"));
                this.backButtonVisible(Commerce.StringExtensions.isNullOrWhitespace(this._controlState.entityType));
                var listOfTypes = Commerce.ArrayExtensions.firstOrUndefined(this._controlState.timelineItemTypeMaps, function (value) {
                    return value.EntityType === _this._controlOutput.entityType;
                });
                if (Commerce.ObjectExtensions.isNullOrUndefined(listOfTypes)) {
                    throw Commerce.StringExtensions.format("TimelineSelectTypeDialog list of types for datasource '{0}' cannot be null or undefined.", this._controlOutput.entityType);
                }
                if (listOfTypes.Types.length === 1) {
                    this.selectTypeClickHandler(listOfTypes.Types[0]);
                    return;
                }
                this.typesList(listOfTypes.Types);
                this.typesListVisible(true);
            };
            return TimelineSelectTypeDialog;
        }(Controls.ModalDialog));
        Controls.TimelineSelectTypeDialog = TimelineSelectTypeDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var Float;
        (function (Float) {
            "use strict";
            var GrabPanelLocations;
            (function (GrabPanelLocations) {
                GrabPanelLocations[GrabPanelLocations["None"] = 0] = "None";
                GrabPanelLocations[GrabPanelLocations["Right"] = 1] = "Right";
                GrabPanelLocations[GrabPanelLocations["Left"] = 2] = "Left";
            })(GrabPanelLocations = Float.GrabPanelLocations || (Float.GrabPanelLocations = {}));
            var FloatBindingHandler = (function () {
                function FloatBindingHandler() {
                }
                FloatBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var value = ko.utils.unwrapObservable(valueAccessor()) || {};
                    var $element = $(element);
                    $element.addClass("commerceFloat");
                    var $floatContainer = $("<div tabindex='-1' class='floatContainer col'></div>");
                    $floatContainer.draggable({ containment: "document" });
                    if (!Commerce.StringExtensions.isEmptyOrWhitespace(value.panelClass)) {
                        $element.addClass(value.panelClass);
                    }
                    var $titleWrappingDiv = null;
                    if (!Commerce.StringExtensions.isNullOrWhitespace(value.title)) {
                        $titleWrappingDiv = $("<div class='titleContainer marginTop0 padTop02 padRight08 padLeft08 padBottom04'></div>");
                        var $title = $("<div class='h4 title'></div>");
                        if (!Commerce.StringExtensions.isNullOrWhitespace(value.titleCssClass)) {
                            $title.addClass(value.titleCssClass);
                        }
                        $titleWrappingDiv.append($title);
                        $title.text(value.title);
                        $floatContainer.append($titleWrappingDiv);
                    }
                    var $mainContainer = $("<div class='row grow'></div>");
                    var $contentWrapper = $("<div class='row grow'></div>");
                    var $initialContent = $element.contents();
                    $contentWrapper.append($initialContent);
                    if ((value.grabPanelLocation === GrabPanelLocations.Left) || (value.grabPanelLocation === GrabPanelLocations.Right)) {
                        var $grabPanel_1 = $("<div class='col iconDirectional center floatPanel' tabindex='0'></div>");
                        $grabPanel_1.attr("data-bind", "resx: { ariaLabel: 'string_7575' }");
                        $grabPanel_1.attr("title", Commerce.ViewModelAdapter.getResourceString("string_7575"));
                        if (value.grabPanelLocation === GrabPanelLocations.Left) {
                            $mainContainer.append($grabPanel_1);
                            $mainContainer.append($contentWrapper);
                        }
                        else {
                            $mainContainer.append($contentWrapper);
                            $mainContainer.append($grabPanel_1);
                        }
                        $grabPanel_1.on("keydown", FloatBindingHandler.grabPanelKeyPressed.bind(null, $floatContainer[0]));
                        $grabPanel_1.on("keyup", FloatBindingHandler.grabPanelKeyPressed.bind(null, $floatContainer[0]));
                        $floatContainer.on("dragstop", function () {
                            $grabPanel_1.focus();
                        });
                        $contentWrapper.on("mousedown", FloatBindingHandler.stopPropagation);
                        $contentWrapper.on("mouseup", FloatBindingHandler.stopPropagation);
                        $contentWrapper.on("pointerdown", FloatBindingHandler.stopPropagation);
                        $contentWrapper.on("pointerup", FloatBindingHandler.stopPropagation);
                        $contentWrapper.on("click", FloatBindingHandler.stopPropagation);
                    }
                    else {
                        $mainContainer.append($initialContent);
                        $mainContainer.on("keydown", FloatBindingHandler.grabPanelKeyPressed.bind(null, $floatContainer[0]));
                        $mainContainer.on("keyup", FloatBindingHandler.grabPanelKeyPressed.bind(null, $floatContainer[0]));
                        $floatContainer.on("dragstop", function () {
                            $mainContainer.focus();
                        });
                    }
                    $floatContainer.append($mainContainer);
                    $element.append($floatContainer);
                    $element.on("keydown", function (e) { FloatBindingHandler.keyPressed(e); });
                    $element.on("keyup", FloatBindingHandler.stopPropagation);
                    $element.on("keypress", FloatBindingHandler.stopPropagation);
                    ko.applyBindingsToDescendants(bindingContext, element);
                    return { controlsDescendantBindings: true };
                };
                FloatBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var $element = $(element);
                    var value = ko.utils.unwrapObservable(valueAccessor()) || {};
                    var shouldFloatBeVisible = ko.utils.unwrapObservable(value.visible) || false;
                    if (shouldFloatBeVisible) {
                        $element.addClass("visible");
                        $element.removeClass("hidden");
                    }
                    else {
                        $element.addClass("hidden");
                        $element.removeClass("visible");
                    }
                };
                FloatBindingHandler.keyPressed = function (e) {
                    var stopPropagation = true;
                    switch (e.keyCode) {
                        case 9:
                            stopPropagation = false;
                            break;
                    }
                    if (stopPropagation) {
                        FloatBindingHandler.stopPropagation(e);
                    }
                    return !stopPropagation;
                };
                FloatBindingHandler.grabPanelKeyPressed = function (floatControlElement, e) {
                    var keyPressHandled = false;
                    if (floatControlElement instanceof HTMLElement) {
                        if (e.type === "keydown") {
                            var $floatControlElement = $(floatControlElement);
                            var clientRect = floatControlElement.getBoundingClientRect();
                            var bindingWidth = $(document).width();
                            var bindingHeight = $(document).height();
                            var moveDelta = 3;
                            keyPressHandled = true;
                            switch (e.which) {
                                case 37:
                                    if (clientRect.left > 0) {
                                        if (moveDelta > clientRect.left) {
                                            moveDelta = clientRect.left;
                                        }
                                        $floatControlElement.css("left", FloatBindingHandler.computeMoveStyle($floatControlElement.css("left"), -1 * moveDelta));
                                    }
                                    break;
                                case 38:
                                    if (clientRect.top > 0) {
                                        if (moveDelta > clientRect.top) {
                                            moveDelta = clientRect.top;
                                        }
                                        $floatControlElement.css("top", FloatBindingHandler.computeMoveStyle($floatControlElement.css("top"), -1 * moveDelta));
                                    }
                                    break;
                                case 39:
                                    {
                                        var offsetDelta = bindingWidth - clientRect.right;
                                        if (offsetDelta > 0) {
                                            if (moveDelta > offsetDelta) {
                                                moveDelta = offsetDelta;
                                            }
                                            $floatControlElement.css("left", FloatBindingHandler.computeMoveStyle($floatControlElement.css("left"), moveDelta));
                                        }
                                    }
                                    break;
                                case 40:
                                    {
                                        var offsetDelta = bindingHeight - clientRect.bottom;
                                        if (offsetDelta > 0) {
                                            if (moveDelta > offsetDelta) {
                                                moveDelta = offsetDelta;
                                            }
                                            $floatControlElement.css("top", FloatBindingHandler.computeMoveStyle($floatControlElement.css("top"), moveDelta));
                                        }
                                    }
                                    break;
                                default:
                                    keyPressHandled = false;
                                    break;
                            }
                        }
                    }
                    if (keyPressHandled) {
                        FloatBindingHandler.stopPropagation(e);
                    }
                    return !keyPressHandled;
                };
                FloatBindingHandler.computeMoveStyle = function (styleValue, offset) {
                    var newStyleValue = styleValue;
                    if ((styleValue.length > 2) && (Commerce.StringExtensions.endsWith(styleValue, "px", false))) {
                        var numericStyle = styleValue.substring(0, newStyleValue.length - 2);
                        var numericValue = parseInt(numericStyle, 10);
                        if (!isNaN(numericValue)) {
                            numericValue += offset;
                            newStyleValue = numericValue.toString() + "px";
                        }
                    }
                    return newStyleValue;
                };
                FloatBindingHandler.stopPropagation = function (e) {
                    var eventData = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        eventData[_i - 1] = arguments[_i];
                    }
                    e.stopPropagation();
                };
                return FloatBindingHandler;
            }());
            ko.bindingHandlers.float = new FloatBindingHandler();
        })(Float = Controls.Float || (Controls.Float = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var ActivationUserInfoViewModel = (function () {
        function ActivationUserInfoViewModel($element, options) {
            this.activationUserInfoMenu = ko.observable(null);
            this.activationUserInfoMenuAnchor = ko.observable(null);
            this.userImageOrInitialsOptions = ko.observable({ name: Commerce.StringExtensions.EMPTY, picture: Commerce.StringExtensions.EMPTY });
            this.isUserLoggedOn = ko.observable(Commerce.Session.instance.isLoggedOn);
            Commerce.EventProxy.Instance.addCustomEventHandler($element[0], "IsLoggedOnStateUpdateEvent", this._isLoggedOnStateChanged.bind(this));
            this.isMenuHidden = ko.observable(false);
            this.indeterminateWaitVisible = ko.observable(false);
        }
        ActivationUserInfoViewModel.prototype.showUserMenu = function () {
            this.activationUserInfoMenu().winControl.show(this.activationUserInfoMenuAnchor());
        };
        ActivationUserInfoViewModel.prototype.logOff = function () {
            var _this = this;
            this.isMenuHidden(false);
            this.indeterminateWaitVisible(true);
            var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
            Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(new Commerce.LogOffOperationRequest(correlationId))).fail(function (error) {
                Commerce.NotificationHandler.displayClientErrors(error, Commerce.ViewModelAdapter.getResourceString("string_509"));
            }).always(function () {
                _this.indeterminateWaitVisible(false);
            });
        };
        ActivationUserInfoViewModel.prototype._isLoggedOnStateChanged = function (args) {
            this.isUserLoggedOn(args.isLoggedOn);
            this.userImageOrInitialsOptions({
                name: Commerce.EmployeeHelper.getName(args.currentEmployee),
                picture: Commerce.EmployeeHelper.getPicture(args.currentEmployee, Commerce.Session.instance.connectionStatus)
            });
        };
        return ActivationUserInfoViewModel;
    }());
    Commerce.ActivationUserInfoViewModel = ActivationUserInfoViewModel;
})(Commerce || (Commerce = {}));
ko.bindingHandlers.activationUserInfo = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var options = ko.utils.unwrapObservable(valueAccessor()) || {};
        var $element = $(element);
        $element.addClass("activationUserInfo");
        var activationUserInfoViewModel = new Commerce.ActivationUserInfoViewModel($element, options);
        ko.applyBindingsToNode(element, {
            template: {
                name: "activationUserInfoTemplate",
                data: activationUserInfoViewModel
            }
        }, this);
        return { controlsDescendantBindings: true };
    }
};
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var AxBubbleAttr = (function () {
            function AxBubbleAttr() {
            }
            AxBubbleAttr.prototype.init = function (element, valueAccessor) {
                var value = ko.utils.unwrapObservable(valueAccessor()) || Commerce.StringExtensions.EMPTY;
                element.setAttribute(Commerce.BubbleHelper.DATA_AX_BUBBLE_ATTRIBUTE, Commerce.EscapingHelper.escapeHtmlAttribute(value));
                var $element = $(element);
                if ($element.hasClass("win-datepicker") && !Commerce.StringExtensions.isNullOrWhitespace(value)) {
                    AxBubbleAttr.addAttributesToDatePicker(element, value);
                    var mutationObserver = new MutationObserver(function () { AxBubbleAttr.addAttributesToDatePicker(element, value); });
                    var observerConfig = { childList: true };
                    mutationObserver.observe(element, observerConfig);
                }
            };
            AxBubbleAttr.addAttributesToDatePicker = function (element, prefix) {
                AxBubbleAttr.addAttributeToElementByAttributeFormat(element.querySelector(".win-datepicker-month"), "{0}_month", prefix);
                AxBubbleAttr.addAttributeToElementByAttributeFormat(element.querySelector(".win-datepicker-date"), "{0}_date", prefix);
                AxBubbleAttr.addAttributeToElementByAttributeFormat(element.querySelector(".win-datepicker-year"), "{0}_year", prefix);
            };
            AxBubbleAttr.addAttributeToElementByAttributeFormat = function (element, attributeFormat, prefix) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(element)) {
                    Commerce.BubbleHelper.formatAttribute(element, attributeFormat, prefix);
                }
            };
            return AxBubbleAttr;
        }());
        ko.bindingHandlers.axBubbleAttr = new AxBubbleAttr();
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var ButtonBlock;
    (function (ButtonBlock) {
        var ButtonBlockType;
        (function (ButtonBlockType) {
            ButtonBlockType[ButtonBlockType["Text"] = 1] = "Text";
            ButtonBlockType[ButtonBlockType["Button"] = 2] = "Button";
        })(ButtonBlockType = ButtonBlock.ButtonBlockType || (ButtonBlock.ButtonBlockType = {}));
    })(ButtonBlock = Commerce.ButtonBlock || (Commerce.ButtonBlock = {}));
})(Commerce || (Commerce = {}));
ko.bindingHandlers.buttonBlock = {
    createAfterRender: function ($element, options, viewModel) {
        return function (element) {
            var $buttonElement = $element.find("button").first();
            if (Commerce.ObjectExtensions.isFunction(options.click)) {
                $buttonElement.click(function (event) {
                    options.click.call(viewModel);
                    event.preventDefault();
                    event.stopImmediatePropagation();
                    return false;
                });
                $buttonElement.keydown(function (event) {
                    var anyKeyPressHandled = false;
                    if ((event.keyCode === 13 || event.keyCode === 108)) {
                        if (Commerce.ObjectExtensions.isFunction(options.click)) {
                            options.click.call(viewModel);
                        }
                        anyKeyPressHandled = true;
                    }
                    if (anyKeyPressHandled) {
                        event.preventDefault();
                        event.stopImmediatePropagation();
                        return false;
                    }
                    return true;
                });
            }
        };
    },
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var value = ko.utils.unwrapObservable(valueAccessor()) || {};
        var $element = $(element);
        $element.addClass("buttonBlock");
        value.blockType = value.blockType || Commerce.ButtonBlock.ButtonBlockType.Button;
        var label;
        var maxLabelWidthClass = "";
        if (value.labelTextResx) {
            label = Commerce.ViewModelAdapter.getResourceString(value.labelTextResx);
        }
        var ariaLabel;
        if (value.ariaLabelResx) {
            ariaLabel = Commerce.ViewModelAdapter.getResourceString(value.ariaLabelResx);
        }
        else if (label) {
            ariaLabel = label;
        }
        if (!label && !Commerce.ObjectExtensions.isNullOrUndefined(value.labelValue)) {
            label = value.labelValue;
        }
        var isEnabled;
        if (ko.isObservable(value.enabled)) {
            isEnabled = value.enabled;
        }
        else if (Commerce.ObjectExtensions.isNullOrUndefined(value.enabled)) {
            isEnabled = ko.observable(true);
        }
        else {
            isEnabled = ko.observable(value.enabled);
        }
        var buttonBlockData = {
            tabIndex: value.tabIndex || 0,
            buttonClass: value.buttonClass,
            label: label || "",
            labelVisible: !Commerce.ObjectExtensions.isNullOrUndefined(label),
            maxLabelWidthClass: maxLabelWidthClass,
            ariaLabel: ariaLabel || "",
            loading: value.loading || ko.observable(false),
            blockType: value.blockType,
            showActiveStyles: ko.computed(function () {
                return isEnabled() && value.blockType === Commerce.ButtonBlock.ButtonBlockType.Button;
            }),
            buttonBlockEnabled: isEnabled
        };
        var afterRender = value.blockType === Commerce.ButtonBlock.ButtonBlockType.Text ? null :
            ko.bindingHandlers.buttonBlock.createAfterRender($element, value, viewModel);
        ko.applyBindingsToNode(element, {
            template: {
                name: "buttonBlockTemplate",
                data: buttonBlockData,
                afterRender: afterRender
            }
        });
        if (Commerce.ObjectExtensions.isFunction(value.invokeValidate)) {
            ko.applyBindingsToNode($element.find("button")[0], {
                invokeValidate: value.invokeValidate
            }, viewModel);
        }
        return { controlsDescendantBindings: true };
    }
};
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var ButtonGrid;
        (function (ButtonGrid) {
            var ButtonGridState = (function () {
                function ButtonGridState() {
                }
                return ButtonGridState;
            }());
            ButtonGrid.ButtonGridState = ButtonGridState;
            var ImageAlignmentType;
            (function (ImageAlignmentType) {
                ImageAlignmentType[ImageAlignmentType["Default"] = 0] = "Default";
                ImageAlignmentType[ImageAlignmentType["Near"] = 1] = "Near";
                ImageAlignmentType[ImageAlignmentType["Center"] = 2] = "Center";
                ImageAlignmentType[ImageAlignmentType["Far"] = 3] = "Far";
            })(ImageAlignmentType = ButtonGrid.ImageAlignmentType || (ButtonGrid.ImageAlignmentType = {}));
        })(ButtonGrid = Controls.ButtonGrid || (Controls.ButtonGrid = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
ko.bindingHandlers.buttonGrid = (function () {
    "use strict";
    var _buttonGridStateKey = "commerceButtonGridState";
    var _buttonOptionsKey = "commerceButtonGridButtonOptions";
    var _buttonWidth = 80;
    var _buttonHeight = 80;
    var _margin = 8;
    var commonOperationsHander;
    var render;
    var buttonClick = function (e) {
        e.stopPropagation();
        var viewModel = this;
        var $button = $(e.currentTarget);
        var $element = $button.closest(".commerceButtonGrid");
        var buttonGridState = $element.data(_buttonGridStateKey);
        var buttonData = $button.data(_buttonOptionsKey);
        $button.blur();
        if (buttonGridState == null || buttonData == null) {
            return;
        }
        var handled = false;
        if (typeof (buttonGridState.buttonClick) === "function") {
            handled = buttonGridState.buttonClick.call(viewModel, buttonData.Action, buttonData.ActionProperty, buttonData.DisplayText);
        }
        if (!handled) {
            handled = commonOperationsHander(buttonData.Action, buttonData.ActionProperty, buttonData, buttonGridState, $element);
            if (!handled) {
                Commerce.NotificationHandler.displayErrorMessage("string_29802");
            }
        }
        else {
            Commerce.Interaction.instance.triggerEvent($element.get(0), Commerce.InteractionEvents.BUTTONGRIDBUTTONCLICKED);
        }
    };
    commonOperationsHander = function (action, actionProperty, buttonData, buttonGridState, $element) {
        switch (action) {
            case Commerce.Operations.RetailOperation.Submenu:
                var buttonGrid = Commerce.ApplicationContext.Instance.tillLayoutProxy.getButtonGridById(actionProperty);
                if (buttonGrid) {
                    render($element, buttonGridState, buttonGrid, buttonGridState.showName, true);
                }
                return true;
        }
        return false;
    };
    render = function (element, buttonGridState, buttonGrid, showName, visible) {
        var $element = $(element);
        if (visible) {
            buttonGridState.$headerContainer.empty();
            var $header = $("<h2>").text(buttonGrid.Name);
            buttonGridState.$headerContainer.append($header);
            if (showName && !Commerce.StringExtensions.isNullOrWhitespace(buttonGrid.Name)) {
                buttonGridState.$headerContainer.removeClass("hide");
            }
            var index_1 = 0;
            buttonGridState.$buttonsContainer.empty();
            var columns_1 = 1;
            var rows_1 = 1;
            var preventButtonInteraction_1 = buttonGridState.preventButtonInteraction;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(buttonGridState.preventButtonInteraction)) {
                if (!ko.isObservable(preventButtonInteraction_1.prevent)) {
                    preventButtonInteraction_1 = null;
                }
                else if (!Commerce.ArrayExtensions.hasElements(preventButtonInteraction_1.actionsToNotPrevent)) {
                    preventButtonInteraction_1.actionsToNotPrevent = [];
                }
            }
            buttonGrid.Buttons.sort(function (a, b) {
                if (a.Row > b.Row || (a.Row === b.Row && a.Column > b.Column)) {
                    return 1;
                }
                return -1;
            }).forEach(function (button) {
                var $button = $("<button></button>");
                $button.data(_buttonOptionsKey, button);
                var buttonClass = "button" + index_1;
                $button.addClass(Commerce.StringExtensions.format("accentBackground highContrastBorder pad0 margin0 positionAbsolute {0}", buttonClass));
                $button.attr("data-action", button.Action);
                if (button.EnableLiveContent) {
                    var $liveContentNumber_1 = $("<div class='right12 top05 textRight padLeft12'><h2 class='margin0'></h2></div>");
                    if (button.NotificationContentAlignment === 0) {
                        $liveContentNumber_1 = $("<div class='center'><h1></h1></div>");
                    }
                    if (Commerce.Session.instance.recentlyPulledNotificationsStatus) {
                        if (Commerce.NotificationHelper.hasNotification(button.Action)) {
                            Commerce.Session.instance.getFromNotifications(button.Action)
                                .NotificationDetails.forEach(function (notificationDetail) {
                                if (button.ActionProperty === notificationDetail.ActionProperty) {
                                    if (notificationDetail.ItemCount > 99 && button.ColumnSpan === 1) {
                                        $liveContentNumber_1.children().text(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_13209"), 99));
                                    }
                                    else if (notificationDetail.ItemCount > 999 && button.ColumnSpan > 1) {
                                        $liveContentNumber_1.children().text(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_13209"), 999));
                                    }
                                    else {
                                        $liveContentNumber_1.children().text(notificationDetail.ItemCount);
                                    }
                                }
                            });
                        }
                    }
                    Commerce.Session.instance.addRecentlyPulledNotificationsUpdateHandler(element, function (isNew) {
                        if (Commerce.NotificationHelper.hasNotification(button.Action)) {
                            Commerce.Session.instance.getFromNotifications(button.Action)
                                .NotificationDetails.forEach(function (notificationDetail) {
                                if (button.ActionProperty === notificationDetail.ActionProperty) {
                                    if (notificationDetail.ItemCount > 99 && button.ColumnSpan === 1) {
                                        $liveContentNumber_1.children().text(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_13209"), 99));
                                    }
                                    else if (notificationDetail.ItemCount > 999 && button.ColumnSpan > 1) {
                                        $liveContentNumber_1.children().text(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_13209"), 999));
                                    }
                                    else {
                                        $liveContentNumber_1.children().text(notificationDetail.ItemCount);
                                    }
                                }
                            });
                        }
                    });
                    ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                        Commerce.Session.instance.removeRecentlyPulledNotificationsUpdateHandler(element, function (isNew) { return; });
                        if (element.winControl) {
                            element.winControl.dispose();
                        }
                    });
                    if (button.EnableCustomFontForPOS) {
                        $liveContentNumber_1.find("h2").css({ "font-size": "inherit", "font-weight": "inherit", "line-height": "100%" });
                    }
                    $button.append($liveContentNumber_1);
                }
                var $displayText = $("<div class='left12 bottom05 textLeft padRight12'><div class='h4 margin0'></div></div>");
                if (Commerce.ObjectExtensions.isNullOrUndefined(button.HideButtonText) || !button.HideButtonText) {
                    $displayText.find(".h4").text(button.DisplayText);
                }
                if (button.EnableCustomFontForPOS) {
                    $displayText.find(".h4").css({ "font-size": "inherit", "font-weight": "inherit", "line-height": "100%" });
                }
                $button.append($displayText);
                $button.attr({
                    title: !Commerce.StringExtensions.isNullOrWhitespace(button.Tooltip) ? (button.Tooltip) :
                        (!Commerce.StringExtensions.isNullOrWhitespace(button.DisplayText) ? button.DisplayText : buttonGrid.Name),
                    alt: button.DisplayText
                });
                var cssText = "";
                if (!Commerce.StringExtensions.isNullOrWhitespace(button.PictureAsBase64)) {
                    cssText += " background-image:url('data:image;base64," + button.PictureAsBase64 + "');";
                }
                if (button.EnableCustomFontForPOS) {
                    if (!Commerce.NumberExtensions.isNullOrZero(button.FontSize)) {
                        cssText += "font-size:" + button.FontSize + "px !important; ";
                    }
                    if (!Commerce.NumberExtensions.isNullOrZero(button.FontStyle)) {
                        cssText += Commerce.CSSHelpers.getButtonFontStyle(button.FontStyle) + " !important;";
                    }
                }
                if (button.UseCustomLookAndFeel) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(button.BackColorAsARGB) &&
                        button.BackColorAsARGB.A !== 0) {
                        cssText += " background-color:" + Commerce.CSSHelpers.colorToRGBAStyle(button.BackColorAsARGB) + " !important;";
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(button.FontColorAsARGB) &&
                        button.FontColorAsARGB.A !== 0) {
                        cssText += "color:" + Commerce.CSSHelpers.colorToRGBAStyle(button.FontColorAsARGB) + " !important;";
                    }
                }
                switch (button.ImageAlignment) {
                    case Commerce.Controls.ButtonGrid.ImageAlignmentType.Near:
                        $button.addClass("backgroundPositionLeft");
                        break;
                    case Commerce.Controls.ButtonGrid.ImageAlignmentType.Far:
                        $button.addClass("backgroundPositionRight");
                        break;
                    default:
                        $button.addClass("backgroundPositionCenter");
                        break;
                }
                $button.css("cssText", cssText);
                button.Column = button.Column || 1;
                button.Row = button.Row || 1;
                button.ColumnSpan = button.ColumnSpan || 1;
                button.RowSpan = button.RowSpan || 1;
                var directionStyleName = !Commerce.CSSHelpers.isRightToLeft() ? "left" : "right";
                var styles = {
                    top: (button.Row - 1) * buttonGridState.buttonHeight,
                    width: (buttonGridState.buttonWidth * button.ColumnSpan) - buttonGridState.margin,
                    height: (buttonGridState.buttonHeight * button.RowSpan) - buttonGridState.margin
                };
                styles[directionStyleName] = (button.Column - 1) * buttonGridState.buttonWidth;
                $button.css(styles);
                var buttonColumn = button.Column + (button.ColumnSpan - 1);
                var buttonRow = button.Row + (button.RowSpan - 1);
                columns_1 = buttonColumn > columns_1 ? buttonColumn : columns_1;
                rows_1 = buttonRow > rows_1 ? buttonRow : rows_1;
                $button.click(buttonClick.bind(buttonGridState.callbackContext));
                buttonGridState.$buttonsContainer.append($button);
                Commerce.BubbleHelper.formatAttribute($button[0], "{0}_{1}", buttonGridState.id, button.ButtonId);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(preventButtonInteraction_1)) {
                    if (preventButtonInteraction_1.actionsToNotPrevent.indexOf(button.Action) < 0) {
                        ko.applyBindingsToNode($button[0], {
                            preventInteraction: preventButtonInteraction_1.prevent
                        });
                    }
                }
                index_1++;
            });
            var containerHeight = buttonGridState.buttonHeight * rows_1 - buttonGridState.margin;
            var containerWidth = buttonGridState.buttonWidth * columns_1 - buttonGridState.margin;
            var containerStyles = {
                height: containerHeight,
                width: containerWidth
            };
            buttonGridState.$buttonsContainer.css(containerStyles);
            $element.show();
        }
        else {
            $element.hide();
        }
    };
    return {
        init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var value = ko.utils.unwrapObservable(valueAccessor()) || {};
            var $element = $(element);
            $element.addClass("commerceButtonGrid");
            $element.empty();
            if (value.id) {
                $element.attr("id", value.id);
            }
            var id = $element.attr("id");
            if (!id) {
                Commerce.ViewModelAdapter.displayMessage("buttonGrid control requires a unique Id", Commerce.MessageType.Error);
                return;
            }
            var buttonGridState = {
                buttonClick: value.buttonClick,
                buttonWidth: value.buttonWidth || _buttonWidth,
                buttonHeight: value.buttonHeight || _buttonHeight,
                callbackContext: value.callbackContext || bindingContext.$root,
                id: id,
                margin: value.margin || _margin,
                $buttonsContainer: null,
                $headerContainer: null,
                showName: value.showName,
                preventButtonInteraction: value.preventButtonInteraction
            };
            var $headerContainer = $("<div></div>").addClass("titleAboveControl padBottom8 padTop8 hide");
            $element.append($headerContainer);
            buttonGridState.$headerContainer = $headerContainer;
            var $buttonsContainer = $("<div class='buttonsContainer positionRelative'></div>");
            $element.append($buttonsContainer);
            buttonGridState.$buttonsContainer = $buttonsContainer;
            $element.data(_buttonGridStateKey, buttonGridState);
            return { controlsDescendantBindings: false };
        },
        update: function (element, valueAccessor, allBindingsAccessor, viewModel) {
            var $element = $(element);
            var value = ko.utils.unwrapObservable(valueAccessor()) || {};
            var buttonGrid = ko.utils.unwrapObservable(value.data);
            if (Commerce.ObjectExtensions.isNullOrUndefined(buttonGrid)) {
                return;
            }
            var buttonGridState = $element.data(_buttonGridStateKey);
            if (Commerce.ObjectExtensions.isNullOrUndefined(buttonGridState) ||
                Commerce.ObjectExtensions.isNullOrUndefined(buttonGridState.id)) {
                return;
            }
            var visible = value.visible == null ? true : ko.utils.unwrapObservable(value.visible);
            value.showName = value.showName || buttonGrid.DisplayTitleAboveControl;
            render(element, buttonGridState, buttonGrid, value.showName, visible);
        }
    };
})();
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var ClearMarkToggleStatus;
        (function (ClearMarkToggleStatus) {
            ClearMarkToggleStatus[ClearMarkToggleStatus["Unknown"] = 0] = "Unknown";
            ClearMarkToggleStatus[ClearMarkToggleStatus["Hidden"] = 1] = "Hidden";
            ClearMarkToggleStatus[ClearMarkToggleStatus["Shown"] = 2] = "Shown";
        })(ClearMarkToggleStatus || (ClearMarkToggleStatus = {}));
        var ClearMark = (function () {
            function ClearMark() {
            }
            ClearMark.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var $element = $(element);
                var clearMarkValue = valueAccessor();
                var fontSize = clearMarkValue.fontSize || $element.css(ClearMark.fontSizeClass);
                var originalPadding = $element.css(ClearMark.paddingRightClass);
                var $wrapper = $(ClearMark.divElement, {
                    "class": ClearMark.wrapperCssClass
                });
                $element.wrap($wrapper);
                var $clearMark = $(ClearMark.divElement)
                    .addClass("iconCancel")
                    .addClass(ClearMark.clearMarkCssClass)
                    .css(ClearMark.fontSizeClass, fontSize)
                    .css(ClearMark.topClass, "calc(50% - " + (parseInt(fontSize, 10) / 2) + "px)")
                    .hide()
                    .appendTo($element.parent());
                $element.on("input change ax-retail-clearMark-toggle", function () {
                    ClearMark.toggleClearMark($element, $clearMark, fontSize, originalPadding);
                });
                $clearMark.on("click", function (clickEvent) {
                    var handler = clearMarkValue.handler;
                    if (Commerce.ObjectExtensions.isFunction(handler)) {
                        handler();
                    }
                    else {
                        $element.val(Commerce.StringExtensions.EMPTY).trigger("change");
                    }
                    $element.focus();
                    clickEvent.stopPropagation();
                });
                ClearMark.toggleClearMark($element, $clearMark, fontSize, originalPadding);
            };
            ClearMark.toggleClearMark = function ($element, $clearMark, fontSize, originalPadding) {
                var currentClearMarkVisibility = $clearMark.data(ClearMark.clearMarkToggleStatusKey);
                var hasValue = $element.val() && $element.val().length > 0;
                if (hasValue && currentClearMarkVisibility !== ClearMarkToggleStatus.Shown) {
                    ClearMark.show($element, $clearMark, fontSize);
                }
                else if (!hasValue && currentClearMarkVisibility !== ClearMarkToggleStatus.Hidden) {
                    ClearMark.hide($element, $clearMark, originalPadding);
                }
            };
            ClearMark.show = function ($element, $clearMark, fontSize) {
                var em = parseFloat($("body").css(ClearMark.fontSizeClass));
                var additionalPadding = 5;
                $element.css(ClearMark.paddingRightClass, "");
                $element.css(ClearMark.paddingLeftClass, "");
                var fontPadding = parseInt(fontSize, null);
                var elementPadding = em + ClearMark.markShift + fontPadding + additionalPadding;
                var paddingClass = !Commerce.CSSHelpers.isRightToLeft() ? ClearMark.paddingRightClass : ClearMark.paddingLeftClass;
                $element.css(paddingClass, elementPadding + "px");
                $clearMark.show();
                $clearMark.data(ClearMark.clearMarkToggleStatusKey, ClearMarkToggleStatus.Shown);
            };
            ClearMark.hide = function ($element, $clearMark, originalPadding) {
                $element.css(ClearMark.paddingRightClass, originalPadding);
                $element.css(ClearMark.paddingLeftClass, originalPadding);
                $clearMark.hide();
                $clearMark.data(ClearMark.clearMarkToggleStatusKey, ClearMarkToggleStatus.Hidden);
            };
            ClearMark.markShift = 5;
            ClearMark.paddingLeftClass = "padding-left";
            ClearMark.paddingRightClass = "padding-right";
            ClearMark.fontSizeClass = "font-size";
            ClearMark.topClass = "top";
            ClearMark.wrapperCssClass = "search-wrapper";
            ClearMark.clearMarkCssClass = "clear-mark";
            ClearMark.divElement = "<div />";
            ClearMark.clearMarkToggleStatusKey = "clearMarkToggleStatusDataKey";
            return ClearMark;
        }());
        ko.bindingHandlers.clearMark = ClearMark;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
ko.bindingHandlers.customControlInternal = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var descendantBindingContext = $(element.parentElement).attr("descendantBindingContextApplied");
        var FLAG_VALUE = "true";
        if (descendantBindingContext !== FLAG_VALUE) {
            $(element.parentElement).attr("descendantBindingContextApplied", FLAG_VALUE);
            ko.applyBindingsToDescendants(bindingContext, element);
        }
        return { controlsDescendantBindings: true };
    }
};
ko.bindingHandlers.customerCard = (function () {
    function render(customer, data, templateName, templateElement) {
        data.customerPrimaryAddress(Commerce.ArrayExtensions.firstOrUndefined(customer.Addresses, function (address) {
            return address.IsPrimary;
        }));
        data.customerInvoiceAddress(Commerce.ArrayExtensions.firstOrUndefined(customer.Addresses, function (address) {
            return Commerce.Client.Entities.ExtensibleAddressType.Invoice.equals(address.AddressTypeValue);
        }));
        if ((templateName === "customerPrimaryAddressCardTemplate"
            && Commerce.ObjectExtensions.isNullOrUndefined(data.customerPrimaryAddress()))
            || (templateName === "customerInvoiceAddressCardTemplate"
                && Commerce.ObjectExtensions.isNullOrUndefined(data.customerInvoiceAddress()))) {
            templateName = "customerAddAddressCardTemplate";
        }
        var templateData = ko.observable(data);
        ko.applyBindingsToNode(templateElement, {
            template: { name: templateName, data: templateData }
        });
    }
    return {
        init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var value = ko.utils.unwrapObservable(valueAccessor()) || {};
            var templateElement = element;
            var data = value.data;
            var templateName = value.template;
            if (Commerce.ObjectExtensions.isNullOrUndefined(data)) {
                Commerce.RetailLogger.viewsControlsKnockoutCustomerCardDataPropertyRequired();
                return { controlsDescendantBindings: true };
            }
            var $element = $(element);
            if (templateName === "customerDetailsCardTemplate"
                || templateName === "customerContactCardTemplate") {
                var layoutData = null;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(data.layoutData)) {
                    layoutData = data.layoutData;
                }
                else if (!Commerce.ObjectExtensions.isNullOrUndefined(value.layoutData)) {
                    layoutData = value.layoutData;
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(layoutData)) {
                    $element.attr("layoutData", "");
                    $element.data("layoutData", layoutData);
                }
            }
            var customer = ko.utils.unwrapObservable(data.customer);
            if (!Commerce.ObjectExtensions.isNullOrUndefined(customer)) {
                render(customer, data, templateName, templateElement);
            }
            if (ko.isObservable(data.customer)) {
                data.customer.subscribe(function (updatedCustomer) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(updatedCustomer)
                        && !Commerce.StringExtensions.isNullOrWhitespace(updatedCustomer.Name)) {
                        render(updatedCustomer, data, templateName, templateElement);
                    }
                });
            }
            return { controlsDescendantBindings: true };
        }
    };
})();
ko.bindingHandlers.customerLoyaltyCard = (function () {
    function render(viewModel, loyaltyCardDataArray, $element) {
        var validLoyaltyCards = [];
        if (Commerce.ArrayExtensions.hasElements(loyaltyCardDataArray)) {
            validLoyaltyCards = loyaltyCardDataArray.filter(function (card) { return card.CardTenderTypeValue !== Commerce.Proxy.Entities.LoyaltyCardTenderType.Blocked; });
        }
        var loyaltyCardCount = validLoyaltyCards.length;
        var loyaltyCardActionLabel;
        if (!viewModel.isLoyaltyCardDataReadOnly()) {
            var loyaltyCardIdOnCart_1 = Commerce.Session.instance ?
                (Commerce.Session.instance.cart ? Commerce.Session.instance.cart.LoyaltyCardId : null)
                : null;
            $element.unbind("click");
            if (loyaltyCardCount > 1 || (loyaltyCardCount === 1 && Commerce.StringExtensions.isNullOrWhitespace(loyaltyCardIdOnCart_1))) {
                loyaltyCardActionLabel = Commerce.ViewModelAdapter.getResourceString("string_3269");
                if (!Commerce.ObjectExtensions.isNullOrUndefined(viewModel.chooseCardClick) && typeof (viewModel.chooseCardClick) === "function") {
                    $element
                        .click(function () {
                        viewModel.chooseCardClick(loyaltyCardIdOnCart_1);
                    });
                    viewModel.isLoyaltyCardLabelActionable(true);
                }
                else {
                    viewModel.isLoyaltyCardLabelActionable(false);
                }
            }
            else if (loyaltyCardCount === 0 && Commerce.StringExtensions.isNullOrWhitespace(loyaltyCardIdOnCart_1)) {
                loyaltyCardActionLabel = Commerce.ViewModelAdapter.getResourceString("string_3264");
                $element
                    .click(function () {
                    viewModel.issueLoyaltyCardAsync();
                });
                viewModel.isLoyaltyCardLabelActionable(true);
            }
            else {
                viewModel.isLoyaltyCardLabelActionable(false);
            }
            if (!Commerce.StringExtensions.isNullOrWhitespace(loyaltyCardIdOnCart_1)) {
                viewModel.customerLoyaltyCardLabel(loyaltyCardIdOnCart_1);
            }
            else {
                viewModel.customerLoyaltyCardLabel(loyaltyCardActionLabel);
            }
        }
        else {
            var labelResourceString = loyaltyCardCount === 1 ?
                Commerce.ViewModelAdapter.getResourceString("string_3263") :
                Commerce.ViewModelAdapter.getResourceString("string_3268");
            viewModel.customerLoyaltyCardLabel(Commerce.StringExtensions.format(labelResourceString, loyaltyCardCount));
            viewModel.isLoyaltyCardLabelActionable(false);
        }
        viewModel.isLoyaltyCardLabelActionable.valueHasMutated();
    }
    return {
        init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var value = ko.utils.unwrapObservable(valueAccessor()) || {};
            var data = value.data;
            var $element = $(element);
            render(data, data.customerLoyaltyCards(), $element);
        },
        update: function (element, valueAccessor) {
            var value = ko.utils.unwrapObservable(valueAccessor()) || {};
            var data = value.data;
            var $element = $(element);
            if (!Commerce.ObjectExtensions.isNullOrUndefined(data) &&
                !Commerce.ObjectExtensions.isNullOrUndefined(data.customerLoyaltyCards)) {
                render(data, data.customerLoyaltyCards(), $element);
            }
        }
    };
})();
ko.bindingHandlers.customerTillLayoutCard = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var value = valueAccessor();
        var $container;
        var render = function () {
            if (Commerce.ObjectExtensions.isNullOrUndefined($container)) {
                $container = $("<div />");
                $(element).append($container);
            }
            value.data.layoutData = Commerce.ApplicationContext.Instance.tillLayoutProxy
                .getLayoutItem(value.screenName, value.panelName);
            ko.cleanNode($container[0]);
            ko.applyBindingsToNode($container[0], {
                customerCard: {
                    template: "customerDetailsCardTemplate",
                    data: value.data
                }
            }, viewModel);
        };
        render();
        Commerce.ApplicationContext.Instance.tillLayoutProxy.addOrientationChangedHandler(element, render);
        return { controlsDescendantBindings: true };
    }
};
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var DataList;
        (function (DataList) {
            function triggerInteractionEvent(element, event) {
                var eventName;
                switch (event) {
                    case DataList.InteractionEvents.RowClicked:
                        eventName = Commerce.InteractionEvents.ROWCLICKEDEVENT;
                        break;
                    case DataList.InteractionEvents.RowSelected:
                        eventName = Commerce.InteractionEvents.ROWSELECTEDEVENT;
                        break;
                    default:
                        throw "Commerce.Controls.DataList.triggerInteractionEvent: Unsupported event type.";
                }
                Commerce.Interaction.instance.triggerEvent(element, eventName);
            }
            DataList.triggerInteractionEvent = triggerInteractionEvent;
        })(DataList = Controls.DataList || (Controls.DataList = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
Commerce.Controls.DataList.DataListBindingHandler.setTriggerEventMethod(Commerce.Controls.DataList.triggerInteractionEvent);
ko.bindingHandlers.dataList = new Commerce.Controls.DataList.DataListBindingHandler();
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var Dialog;
        (function (Dialog) {
            "use strict";
            var DialogHandler = (function () {
                function DialogHandler() {
                }
                DialogHandler.hideAll = function () {
                    DialogBindingHandler.hideAll();
                };
                DialogHandler.isADialogVisible = function () {
                    return DialogBindingHandler.isADialogVisible();
                };
                return DialogHandler;
            }());
            Dialog.DialogHandler = DialogHandler;
            var DialogBindingHandler = (function () {
                function DialogBindingHandler() {
                    this.init = this.init.bind(this);
                    this.update = this.update.bind(this);
                }
                DialogBindingHandler.buttonClick = function (dialogState, operationId, viewModel, e) {
                    if (e) {
                        e.stopImmediatePropagation();
                    }
                    if (dialogState.buttonClick && typeof (dialogState.buttonClick) === "function") {
                        dialogState.buttonClick.call(viewModel, operationId);
                    }
                };
                DialogBindingHandler.subTitleClick = function (dialogState, viewModel, e) {
                    if (e) {
                        e.stopImmediatePropagation();
                    }
                    if (dialogState.subTitleClick && typeof (dialogState.subTitleClick) === "function") {
                        dialogState.subTitleClick.call(viewModel);
                    }
                };
                DialogBindingHandler.backClick = function (dialogState, viewModel, e) {
                    if (e) {
                        e.stopImmediatePropagation();
                    }
                    if (dialogState.backClick && typeof (dialogState.backClick) === "function") {
                        dialogState.backClick.call(viewModel);
                    }
                };
                DialogBindingHandler.escapeKeyPressedHandler = function (dialogState, viewModel, e) {
                    if (dialogState == null) {
                        return;
                    }
                    if (e) {
                        e.stopImmediatePropagation();
                    }
                    DialogBindingHandler.hide(dialogState);
                    DialogBindingHandler.buttonClick(dialogState, Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK, viewModel, e);
                };
                DialogBindingHandler.keyPressed = function (dialogState, viewModel, e) {
                    DialogBindingHandler.stopPropagation(e);
                    if (e.target.nodeName && e.target.nodeName === "BUTTON" && (e.keyCode !== 27 && e.keyCode !== 9)) {
                        return true;
                    }
                    if (dialogState == null) {
                        return true;
                    }
                    var handleEvent = false;
                    var operationId = Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK;
                    switch (e.keyCode) {
                        case 27:
                            if (dialogState.closeOnEscButton) {
                                if (dialogState.dialogCloseButtonClick && Commerce.ObjectExtensions.isFunction(dialogState.dialogCloseButtonClick)) {
                                    dialogState.dialogCloseButtonClick.call(viewModel);
                                }
                                DialogBindingHandler.escapeKeyPressedHandler(dialogState, viewModel, e);
                            }
                            break;
                        case 13:
                            if ((dialogState.primaryButtonIndex >= 0)
                                && dialogState.buttons[dialogState.primaryButtonIndex].$element.is(":enabled")) {
                                var sourceElement = $(e.target);
                                if (!sourceElement.is("textarea") && !sourceElement.is("select")) {
                                    var hasFocus = sourceElement.is("input");
                                    if (hasFocus) {
                                        sourceElement.trigger("change");
                                    }
                                    handleEvent = !(hasFocus && dialogState.enableValidation);
                                    operationId = dialogState.buttons[dialogState.primaryButtonIndex].operationId;
                                }
                            }
                            break;
                        case 9:
                            DialogBindingHandler.tabKeyPressedHandler(dialogState, e);
                            break;
                    }
                    if (handleEvent) {
                        DialogBindingHandler.buttonClick(dialogState, operationId, viewModel, e);
                    }
                    return true;
                };
                DialogBindingHandler.tabKeyPressedHandler = function (dialogState, e) {
                    var focusableElements = DialogBindingHandler.getFocusableChildren(dialogState.$element);
                    var VIDEO_TAG = "VIDEO";
                    var focusedElement;
                    if (focusableElements.length > 0) {
                        focusedElement = dialogState.$element.find(":focus")[0];
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(focusedElement) && focusedElement.tagName.toUpperCase() !== VIDEO_TAG) {
                            var focusedElementIndex = $.inArray(focusedElement, focusableElements);
                            var nextFocusedElementIndex = 0;
                            var lastFocusableElementIndex = focusableElements.length - 1;
                            if (!e.shiftKey) {
                                nextFocusedElementIndex = focusedElementIndex >= lastFocusableElementIndex ? 0 : focusedElementIndex + 1;
                            }
                            else {
                                nextFocusedElementIndex = focusedElementIndex <= 0 ? lastFocusableElementIndex : focusedElementIndex - 1;
                            }
                            if (nextFocusedElementIndex >= 0) {
                                focusableElements[nextFocusedElementIndex].focus();
                            }
                        }
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(focusedElement) && focusedElement.tagName.toUpperCase() !== VIDEO_TAG) {
                        e.preventDefault();
                    }
                };
                DialogBindingHandler.stopPropagation = function (e) {
                    var eventData = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        eventData[_i - 1] = arguments[_i];
                    }
                    e.stopPropagation();
                };
                DialogBindingHandler.addPrimarySecondaryButtonClassNames = function (button, $button, dialogState, viewModel, isPrimaryButton, isDisabled) {
                    $button.addClass(isPrimaryButton ? "primaryButton" : "secondaryButton");
                    return $button;
                };
                DialogBindingHandler.getFocusableChildren = function ($parent) {
                    if ($parent == null) {
                        return null;
                    }
                    var tabbableElements = $parent.find(":tabbable");
                    var $videoElement = $parent.find("video");
                    if ($videoElement.length > 0) {
                        tabbableElements.add($videoElement);
                    }
                    return DialogBindingHandler.sortByTabindex(tabbableElements);
                };
                DialogBindingHandler.sortByTabindex = function (jqueryElements) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(jqueryElements) || jqueryElements.length <= 1) {
                        return jqueryElements;
                    }
                    var getTabindexWeight = function (tabindex) {
                        var weight = 0;
                        if (tabindex > 0) {
                            weight = 1;
                        }
                        else if (tabindex === 0) {
                            weight = 10;
                        }
                        else if (!Commerce.ObjectExtensions.isNumber(tabindex) || isNaN(tabindex)) {
                            weight = 100;
                        }
                        else if (tabindex < 0) {
                            weight = 1000;
                        }
                        return weight;
                    };
                    var sortedArray = Commerce.Utilities.SortingHelper.mergeSort(jqueryElements.get(), function (a, b) {
                        var tabindex1 = Number(a.getAttribute("tabindex"));
                        var tabindex2 = Number(b.getAttribute("tabindex"));
                        var aWeight = getTabindexWeight(tabindex1);
                        var bWeight = getTabindexWeight(tabindex2);
                        var difference = (aWeight - bWeight) || (tabindex1 - tabindex2);
                        return difference <= 0;
                    });
                    return $(sortedArray);
                };
                DialogBindingHandler.keepFocus = function (element) {
                    if (element.is(":visible")) {
                        var $focused = $(":focus");
                        if ($focused.closest(element).length === 0) {
                            element.focus();
                        }
                    }
                };
                DialogBindingHandler.show = function (dialogState, forceShow) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(dialogState)) {
                        return;
                    }
                    forceShow = forceShow || false;
                    var $element = dialogState.$element;
                    if (!forceShow && dialogState.visible) {
                        return;
                    }
                    dialogState.visible = true;
                    DialogBindingHandler._visibleDialogs.push(dialogState);
                    var styles = { visibility: "visible", top: "", display: "" };
                    $element.css(styles);
                    $element.attr("role", "dialog");
                    $element.animate({ "width": DialogBindingHandler._commerceDialogWidth }, dialogState.isAnimate !== false ? DialogBindingHandler._slideDuration : 0, function () {
                        $element.on("keydown", dialogState.keyPressHandler);
                        $element.on("keyup", DialogBindingHandler.stopPropagation);
                        $element.on("keypress", DialogBindingHandler.stopPropagation);
                        dialogState.$dialogContainer.fadeIn(DialogBindingHandler._fadeDuration, function () {
                            dialogState.$dialogContainer.css("visibility", "visible");
                            setTimeout(function () {
                                DialogBindingHandler.setFocusInDialogOnShow(dialogState);
                            }, 100);
                        });
                    });
                };
                DialogBindingHandler.setFocusInDialogOnShow = function (dialogState) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(dialogState)) {
                        return;
                    }
                    if (dialogState.focus) {
                        DialogBindingHandler._setsFocusInDialog(dialogState);
                    }
                    if (dialogState.afterShow) {
                        dialogState.afterShow();
                    }
                };
                DialogBindingHandler.hide = function (dialogState, forceHide) {
                    if (dialogState == null) {
                        return;
                    }
                    dialogState.$element.off("keydown", dialogState.keyPressHandler);
                    dialogState.$element.off("keyup", DialogBindingHandler.stopPropagation);
                    dialogState.$element.off("keypress", DialogBindingHandler.stopPropagation);
                    forceHide = forceHide || false;
                    if (dialogState) {
                        if (!forceHide && !dialogState.visible) {
                            return;
                        }
                        dialogState.visible = false;
                        var index = DialogBindingHandler._visibleDialogs.indexOf(dialogState);
                        if (index > -1) {
                            DialogBindingHandler._visibleDialogs.splice(index, 1);
                        }
                    }
                    var dialogHiddenStyles = { visibility: "hidden", top: "-22000px" };
                    if (dialogState.initialized) {
                        dialogState.$element.fadeOut(DialogBindingHandler._fadeDuration, function () {
                            dialogState.$element.css(dialogHiddenStyles);
                        });
                        dialogState.onHidden();
                    }
                    else {
                        dialogState.$element.css(dialogHiddenStyles);
                    }
                    if (DialogBindingHandler._visibleDialogs.length > 0) {
                        DialogBindingHandler._setsFocusInDialog(DialogBindingHandler._visibleDialogs[DialogBindingHandler._visibleDialogs.length - 1]);
                    }
                };
                DialogBindingHandler.hideAll = function () {
                    while (Commerce.ArrayExtensions.hasElements(DialogBindingHandler._visibleDialogs)) {
                        var dialogState = Commerce.ArrayExtensions.lastOrUndefined(DialogBindingHandler._visibleDialogs);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState)) {
                            DialogBindingHandler.hide(dialogState);
                            DialogBindingHandler.buttonClick(dialogState, Dialog.OperationIds.CANCEL_BUTTON_CLICK, dialogState.viewModel);
                        }
                        else {
                            DialogBindingHandler._visibleDialogs.pop();
                        }
                    }
                };
                DialogBindingHandler.isADialogVisible = function () {
                    return Commerce.ArrayExtensions.hasElements(DialogBindingHandler._visibleDialogs);
                };
                DialogBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var _this = this;
                    var $element = $(element);
                    var value = ko.utils.unwrapObservable(valueAccessor()) || {};
                    $element.addClass("commerceDialog win-ui-light");
                    $element.attr("tabindex", -1);
                    var afterShow;
                    if (viewModel.afterShow) {
                        afterShow = function () {
                            viewModel.afterShow.call(viewModel);
                        };
                    }
                    var onHidden = function () {
                        if (viewModel && Commerce.ObjectExtensions.isOfType(viewModel, Controls.ModalDialog) && Commerce.ObjectExtensions.isFunction(viewModel.invokeOnHidden)) {
                            viewModel.invokeOnHidden();
                        }
                    };
                    var dialogState = {
                        buttons: value.buttons || [],
                        viewModel: viewModel,
                        subTitleClick: value.subTitleClick || null,
                        buttonClick: value.buttonClick || null,
                        backClick: value.backClick || null,
                        afterShow: afterShow || null,
                        onHidden: onHidden,
                        showProgressIndicator: value.showProgressIndicator,
                        enableValidation: Commerce.ObjectExtensions.isBoolean(value.enableValidation) ? value.enableValidation : true,
                        initialized: false,
                        visible: false,
                        focus: Commerce.ObjectExtensions.isNullOrUndefined(value.focus) ? true : value.focus,
                        supportBackButton: false,
                        tabIndex: value.tabIndexButton || 0,
                        hasContent: false,
                        isFullView: value.isFullView,
                        $element: $element,
                        $panelContentContainer: null,
                        $panelContent: null,
                        $background: null,
                        $title: null,
                        $message: null,
                        $dialogContainer: null,
                        isAnimate: Commerce.ObjectExtensions.isBoolean(value.isAnimate) ? value.isAnimate : true,
                        $subTitle: null,
                        $dialogCloseButton: null,
                        $backButton: null,
                        $topSectionSeperatorSpace: null,
                        $buttonsContainer: null,
                        $primaryButton: null,
                        dialogCloseButtonClick: value.dialogCloseButtonClick || null,
                        closeOnEscButton: false,
                        primaryButtonIndex: -1,
                        keyPressHandler: null,
                        subscriptions: []
                    };
                    dialogState.keyPressHandler = function (e) { DialogBindingHandler.keyPressed(dialogState, viewModel, e); };
                    var dialogType = value.dialogType || Dialog.DialogTypes.DEFAULT;
                    switch (dialogType) {
                        case Dialog.DialogTypes.DEFAULT:
                            dialogState.supportBackButton = false;
                            break;
                        case Dialog.DialogTypes.SEQUENCE:
                            dialogState.supportBackButton = true;
                            break;
                    }
                    $element.data(DialogBindingHandler._dialogStateKey, dialogState);
                    var $panelContent = $element.contents();
                    var $dialogContainer = $("<div tabindex='-1' class='dialogContainer'></div>");
                    dialogState.$panelContent = $panelContent;
                    if (!dialogState.isFullView) {
                        $dialogContainer.addClass("centerY");
                        dialogState.$dialogContainer = $dialogContainer;
                        $element.append($dialogContainer);
                        var $dialogContainer2 = $("<div tabindex='1' class='dialogContainer2 row'></div>");
                        $dialogContainer.append($dialogContainer2);
                        $dialogContainer2.click(function (e) {
                            e.stopImmediatePropagation();
                        });
                        var $dialogSection1 = $("<div class='col grow marginTop20'></div>");
                        var $dialogSection2 = $("<div class='col grow marginTop20 width0'></div>");
                        var $dialog = $("<div class='col grow marginTop0 width100Percent'></div>");
                        var $dialogSection4 = $("<div class='dialogSection4 col grow marginTop20 width0'></div>");
                        var $dialogSection5 = $("<div class='col grow marginTop12'></div>");
                        var $row = $("<div class='row no-shrink dialogTitlePlacehoder'></div>");
                        $dialog.append($row);
                        $dialogContainer2.append($dialogSection1);
                        if (dialogState.supportBackButton) {
                            $dialogContainer2.append($dialogSection2);
                        }
                        $dialogContainer2.append($dialog);
                        if (dialogState.supportBackButton) {
                            $dialogContainer2.append($dialogSection4);
                        }
                        $dialogContainer2.append($dialogSection5);
                        if (dialogState.supportBackButton) {
                            var $backButtonWrappingDiv = $("<div tabindex='-1'></div>");
                            var $backButton = $("<button class='iconBack primaryFontColor backButton icon-24x24 margin12' aria-label='Back'></button>");
                            this._setDataAxBubbleAttribute($backButton[0], "backButton");
                            $backButton.click(function (e) { DialogBindingHandler.backClick(dialogState, viewModel, e); });
                            dialogState.$backButton = $backButton;
                            $dialog.find(".dialogTitlePlacehoder").append($backButtonWrappingDiv);
                            $backButtonWrappingDiv.append($backButton);
                            var backButton = $backButton[0];
                            this._setEnabledStateValueMapping(dialogState, backButton, value.backButtonEnabled);
                        }
                        var $titleWrappingDiv = $("<div class='marginTop0 padTop4 padRight12 padLeft12'></div>");
                        var $title = $("<h2 class='title'></h2>");
                        if (dialogState.supportBackButton) {
                            $titleWrappingDiv = $("<div class='marginTop0 padTop8 padRight12 padLeft12'></div>");
                            $title = $("<h3 class='title'></h3>");
                        }
                        if (!Commerce.StringExtensions.isNullOrWhitespace(value.titleCssClass)) {
                            $title.addClass(value.titleCssClass);
                        }
                        $dialog.find(".dialogTitlePlacehoder").append($titleWrappingDiv);
                        $titleWrappingDiv.append($title);
                        dialogState.$title = $title;
                        if (dialogState.dialogCloseButtonClick && Commerce.ObjectExtensions.isFunction(dialogState.dialogCloseButtonClick)) {
                            var $dialogTitleCloseButtonSeparator = $("<div class='col grow'></div>");
                            $dialog.find(".dialogTitlePlacehoder").append($dialogTitleCloseButtonSeparator);
                            var $dialogCloseButtonWrappingDiv = $("<div tabindex='-1'></div>");
                            var $dialogCloseButton = $("<button class='iconCancel primaryFontColor dialogClose icon-24x24 margin12' aria-label='Close'></button>");
                            $dialogCloseButton.click(function (e) {
                                dialogState.dialogCloseButtonClick.call(viewModel);
                            });
                            dialogState.$dialogCloseButton = $dialogCloseButton;
                            $dialog.find(".dialogTitlePlacehoder").append($dialogCloseButtonWrappingDiv);
                            $dialogCloseButtonWrappingDiv.append($dialogCloseButton);
                            var closeButton = $dialogCloseButton[0];
                            this._setEnabledStateValueMapping(dialogState, closeButton, value.closeButtonEnabled);
                        }
                        var $subTitleWrappingDiv = $("<div class='marginTop8 padLeft12 padRight12'></div>");
                        var $subTitle = $("<div class='h4'></div>");
                        $subTitle.click(function (e) { DialogBindingHandler.subTitleClick(dialogState, viewModel, e); });
                        $subTitle.addClass(ko.utils.unwrapObservable(value.subTitleCssClass) || "secondaryFontColor");
                        $dialog.append($subTitleWrappingDiv);
                        $subTitleWrappingDiv.append($subTitle);
                        dialogState.$subTitle = $subTitle;
                        var $messageWrappingDiv = $("<div class='marginTop8 padLeft12 padRight12 no-shrink' style='display: none'></div>");
                        var $message = $("<div class='h4 message'></div>");
                        $dialog.append($messageWrappingDiv);
                        $messageWrappingDiv.append($message);
                        dialogState.$message = $message;
                        var $topSectionSeperatorSpace = $("<div class='marginTop0'></div>");
                        dialogState.$topSectionSeperatorSpace = $topSectionSeperatorSpace;
                        $dialog.append($topSectionSeperatorSpace);
                        var $dialogForm_1 = null;
                        if (dialogState.enableValidation) {
                            $dialogForm_1 = $("<form autocomplete='off' class=\"col grow padTop4 padBottom2\"></form>");
                            $dialogForm_1.on("submit", function (e) {
                                e.preventDefault();
                                return false;
                            });
                            $dialog.append($dialogForm_1);
                            var $contentWrapper = $("<div class='grow col scrollY'></div>");
                            dialogState.hasContent = true;
                            $dialogForm_1.append($contentWrapper);
                            $panelContent.addClass("padLeft12 padRight12");
                            $panelContent.appendTo($contentWrapper);
                            dialogState.$panelContentContainer = $contentWrapper;
                            if (Commerce.ArrayExtensions.hasElements(dialogState.buttons)) {
                                var $buttonsContainer_1 = $("<div class='buttonsContainer row no-shrink padLeft12 padRight12'></div>");
                                var visibleButtonExist = this._isAnyButtonVisible(dialogState.buttons);
                                if (visibleButtonExist) {
                                    $buttonsContainer_1.addClass("marginTop20");
                                }
                                var primaryButtonIndex_1 = -1;
                                var allButtonsAreSecondary_1 = true;
                                dialogState.buttons.forEach(function (button, index) {
                                    if ((button.isPrimary) && (primaryButtonIndex_1 === -1)) {
                                        primaryButtonIndex_1 = index;
                                        allButtonsAreSecondary_1 = false;
                                    }
                                    else if (Commerce.ObjectExtensions.isNullOrUndefined(button.isPrimary)) {
                                        allButtonsAreSecondary_1 = false;
                                    }
                                });
                                if (!allButtonsAreSecondary_1 && (primaryButtonIndex_1 === -1)) {
                                    primaryButtonIndex_1 = 0;
                                }
                                dialogState.primaryButtonIndex = primaryButtonIndex_1;
                                var setWidthAndPaddingOfButtonContainers_1 = function ($buttonsContainer) {
                                    var containersWithVisibleButton = [];
                                    var containersWithHiddenButton = [];
                                    var $buttonContainers = $buttonsContainer.children(".buttonContainer");
                                    $buttonContainers.each(function (index, elem) {
                                        var firstButton = $(elem).children(":button:first-child");
                                        if (firstButton.length === 1) {
                                            var button = firstButton[0];
                                            if (button instanceof HTMLElement) {
                                                var display = Commerce.StringExtensions.isEmptyOrWhitespace(button.style.display)
                                                    ? Commerce.StringExtensions.EMPTY
                                                    : button.style.display.toLowerCase();
                                                if (display !== "none") {
                                                    containersWithVisibleButton.push(elem);
                                                }
                                                else {
                                                    containersWithHiddenButton.push(elem);
                                                }
                                            }
                                        }
                                        else {
                                            containersWithHiddenButton.push(elem);
                                        }
                                    });
                                    var visibleWidthClass = containersWithVisibleButton.length === 1 ? "blockWidth" : "halfWidth";
                                    var marginTop20 = "marginTop20";
                                    containersWithVisibleButton.forEach(function (buttonContainer, index) {
                                        var $buttonContainer = $(buttonContainer);
                                        $buttonContainer.removeClass("blockWidth halfWidth noWidth");
                                        $buttonContainer.addClass(visibleWidthClass);
                                        $buttonContainer.removeClass("leftmostDialogButton rightmostDialogButton");
                                        if (index === 0) {
                                            $buttonContainer.addClass("leftmostDialogButton");
                                        }
                                        if (index === containersWithVisibleButton.length - 1) {
                                            $buttonContainer.addClass("rightmostDialogButton");
                                        }
                                        if (!$buttonContainer.hasClass(marginTop20)) {
                                            $buttonContainer.addClass(marginTop20);
                                        }
                                    });
                                    containersWithHiddenButton.forEach(function (buttonContainer) {
                                        var $buttonContainer = $(buttonContainer);
                                        $buttonContainer.removeClass("blockWidth halfWidth noWidth");
                                        $buttonContainer.removeClass("leftmostDialogButton rightmostDialogButton");
                                        $buttonContainer.removeClass(marginTop20);
                                        $buttonContainer.addClass("noWidth");
                                    });
                                };
                                var createButton_1 = (function (button, isButtonPrimary) {
                                    var _a, _b, _c;
                                    var $buttonContainer = $("<div class='buttonContainer col no-shrink'></div>");
                                    var $button = $("<button></button>");
                                    button.$element = $button;
                                    _this._setDataAxBubbleAttribute($button[0], _this._getButtonIdentifier(button));
                                    if (Commerce.ObjectExtensions.isNullOrUndefined(button.dialogButtonType)) {
                                        _this._setButtonType(button, null, button.operationId);
                                    }
                                    else if (Commerce.ObjectExtensions.isString(button.dialogButtonType)) {
                                        _this._setButtonType(button, button.dialogButtonType, button.operationId);
                                    }
                                    else if (((_a = button.dialogButtonType) === null || _a === void 0 ? void 0 : _a.subscribe) && (Commerce.ObjectExtensions.isFunction(button.dialogButtonType))) {
                                        dialogState.subscriptions.push(button.dialogButtonType.subscribe(function (newValue) {
                                            _this._setButtonType(button, newValue, button.operationId);
                                        }));
                                        button.dialogButtonType.valueHasMutated();
                                    }
                                    if (isButtonPrimary) {
                                        dialogState.$primaryButton = $button;
                                    }
                                    $button.attr("tabindex", dialogState.tabIndex);
                                    if (dialogState.tabIndex > 0) {
                                        dialogState.tabIndex++;
                                    }
                                    if (Commerce.ObjectExtensions.isString(button.cssClass)) {
                                        $button.addClass(button.cssClass);
                                    }
                                    else if (((_b = button.cssClass) === null || _b === void 0 ? void 0 : _b.subscribe) && (Commerce.ObjectExtensions.isFunction(button.cssClass))) {
                                        dialogState.subscriptions.push(button.cssClass.subscribe(function (newValue) {
                                            if (!Commerce.StringExtensions.isEmptyOrWhitespace(button.addedCssClass)) {
                                                $button.removeClass(button.addedCssClass);
                                            }
                                            if (!Commerce.StringExtensions.isNullOrWhitespace(newValue) && !$button.hasClass(newValue)) {
                                                $button.addClass(newValue);
                                                button.addedCssClass = newValue;
                                            }
                                            else {
                                                button.addedCssClass = null;
                                            }
                                        }));
                                        button.cssClass.valueHasMutated();
                                    }
                                    if (!Commerce.StringExtensions.isNullOrWhitespace(button.id)) {
                                        $button.attr("id", button.id);
                                    }
                                    if (!Commerce.ObjectExtensions.isNullOrUndefined(button.visible)) {
                                        var isButtonVisible = true;
                                        if (Commerce.ObjectExtensions.isBoolean(button.visible)) {
                                            isButtonVisible = button.visible;
                                        }
                                        else if (((_c = button.visible) === null || _c === void 0 ? void 0 : _c.subscribe) && Commerce.ObjectExtensions.isFunction(button.visible)) {
                                            isButtonVisible = button.visible();
                                            dialogState.subscriptions.push(button.visible.subscribe(function (newValue) {
                                                if (newValue) {
                                                    $button.show();
                                                }
                                                else {
                                                    $button.hide();
                                                }
                                                setWidthAndPaddingOfButtonContainers_1($buttonsContainer_1);
                                            }));
                                        }
                                        if (isButtonVisible) {
                                            $button.show();
                                        }
                                        else {
                                            $button.hide();
                                        }
                                    }
                                    var firstButton = $button[0];
                                    _this._setDisabledStateValueMapping(dialogState, firstButton, button.disable);
                                    var isButtonDisabled = _this._getValue(button.disable, false);
                                    $button = DialogBindingHandler.addPrimarySecondaryButtonClassNames(button, $button, dialogState, viewModel, isButtonPrimary, isButtonDisabled);
                                    if (!Commerce.ObjectExtensions.isNullOrUndefined(button.focus)) {
                                        if (!Commerce.ObjectExtensions.isBoolean(button.focus)) {
                                            if (ko.isObservable(button.focus)) {
                                                if (button.focus.extend) {
                                                    button.focus.extend({ notify: "always" });
                                                }
                                                dialogState.subscriptions.push(button.focus.subscribe(function (newValue) {
                                                    if (newValue) {
                                                        $button.focus();
                                                    }
                                                }));
                                            }
                                        }
                                    }
                                    ko.applyBindingsToNode($button[0], { text: button.label });
                                    $button.click(function (e) {
                                        if (button.operationId === Dialog.OperationIds.OK_BUTTON_CLICK && $dialogForm_1 != null) {
                                            var form = $dialogForm_1.get(0);
                                            if (!Commerce.ObjectExtensions.isNullOrUndefined(form) && !form.checkValidity()) {
                                                return;
                                            }
                                        }
                                        DialogBindingHandler.buttonClick(dialogState, button.operationId, viewModel, e);
                                    });
                                    $buttonsContainer_1.append($buttonContainer);
                                    $buttonContainer.append($button);
                                });
                                dialogState.buttons.forEach(function (button, index) {
                                    var isButtonPrimary = index === primaryButtonIndex_1;
                                    createButton_1(button, isButtonPrimary);
                                });
                                setWidthAndPaddingOfButtonContainers_1($buttonsContainer_1);
                                if ($dialogForm_1 != null) {
                                    $dialogForm_1.append($buttonsContainer_1);
                                }
                                else {
                                    $dialog.append($buttonsContainer_1);
                                }
                                dialogState.$buttonsContainer = $buttonsContainer_1;
                            }
                        }
                    }
                    else {
                        $dialogContainer.addClass("center");
                        dialogState.$dialogContainer = $dialogContainer;
                        $element.append($dialogContainer);
                        var $dialogContainer2 = $("<div tabindex='-1' class='fullView row'></div>");
                        $dialogContainer.append($dialogContainer2);
                        $dialogContainer2.click(function (e) {
                            e.stopImmediatePropagation();
                        });
                        $dialogContainer2.append($panelContent);
                        dialogState.$panelContentContainer = $dialogContainer2;
                    }
                    $element.prepend("<div class='modal-backdrop'></div>");
                    ko.applyBindingsToDescendants(bindingContext, element);
                    var showProgressIndicatorArea = true;
                    if (Commerce.ObjectExtensions.isNullOrUndefined(value.showProgressIndicator) ||
                        (Commerce.ObjectExtensions.isBoolean(value.showProgressIndicator) && !value.showProgressIndicator)) {
                        showProgressIndicatorArea = false;
                    }
                    if (showProgressIndicatorArea) {
                        var $progressIndicatorArea = $("<div tabindex='-1'></div>");
                        $element.append($progressIndicatorArea);
                        ko.applyBindingsToNode($progressIndicatorArea[0], {
                            loader: {
                                visible: value.showProgressIndicator,
                                type: Controls.Loader.LoaderType.Dialog,
                                delayOnReturnFocus: false
                            }
                        });
                        dialogState.showProgressIndicator = value.showProgressIndicator;
                    }
                    if (Commerce.ObjectExtensions.isFunction(value.setSetFocusInDialogHandler)) {
                        value.setSetFocusInDialogHandler(function () {
                            DialogBindingHandler._setsFocusInDialog(dialogState);
                        });
                    }
                    ko.utils.domNodeDisposal.addDisposeCallback(element, function (e) {
                        dialogState.subscriptions.forEach(function (value) {
                            value.dispose();
                        });
                    });
                    return { controlsDescendantBindings: true };
                };
                DialogBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var $element = $(element);
                    var dialogState = $element.data(DialogBindingHandler._dialogStateKey);
                    var value = ko.utils.unwrapObservable(valueAccessor()) || {};
                    if (dialogState.$backButton) {
                        var backButtonVisible = ko.utils.unwrapObservable(value.backButtonVisible) || false;
                        if (backButtonVisible) {
                            dialogState.$backButton.show();
                        }
                        else {
                            dialogState.$backButton.hide();
                        }
                    }
                    var title = ko.utils.unwrapObservable(value.title) || "";
                    if (dialogState.$title != null) {
                        dialogState.$title.text(title);
                    }
                    var hideOnEscape = ko.utils.unwrapObservable(value.hideOnEscape);
                    if (Commerce.ObjectExtensions.isNullOrUndefined(hideOnEscape)) {
                        hideOnEscape = true;
                    }
                    dialogState.closeOnEscButton = ko.utils.unwrapObservable(value.closeOnEscButton) || hideOnEscape;
                    var subTitle = ko.utils.unwrapObservable(value.subTitle) || "";
                    if (dialogState.$subTitle != null) {
                        dialogState.$subTitle.text(subTitle);
                        var $wrappingSubtitleDiv = dialogState.$subTitle.parent();
                        if (subTitle.length === 0) {
                            $wrappingSubtitleDiv.hide();
                        }
                        else {
                            $wrappingSubtitleDiv.show();
                        }
                    }
                    var message = ko.utils.unwrapObservable(value.message) || "";
                    if (dialogState.$message != null) {
                        dialogState.$message.text(message);
                        var $wrappingMessageDiv = dialogState.$message.parent();
                        if (message.length === 0) {
                            $wrappingMessageDiv.hide();
                        }
                        else {
                            $wrappingMessageDiv.show();
                        }
                    }
                    if (dialogState.$topSectionSeperatorSpace != null) {
                        var $topSectionSeperatorSpace = dialogState.$topSectionSeperatorSpace;
                        if (dialogState.hasContent) {
                            $topSectionSeperatorSpace.show();
                        }
                        else {
                            $topSectionSeperatorSpace.hide();
                        }
                    }
                    var shouldDialogBeVisible = ko.utils.unwrapObservable(value.visible) || false;
                    if (shouldDialogBeVisible) {
                        DialogBindingHandler.show(dialogState, !dialogState.initialized);
                        $(document.body).addClass("modal-dialog-is-active");
                    }
                    else {
                        $(document.body).removeClass("modal-dialog-is-active");
                        DialogBindingHandler.hide(dialogState, !dialogState.initialized);
                    }
                    dialogState.initialized = true;
                };
                DialogBindingHandler._setsFocusInDialog = function (dialogState) {
                    var $topElement = Commerce.ObjectExtensions.isNullOrUndefined(dialogState.$panelContent) ? dialogState.$element : dialogState.$panelContent;
                    var $focusableChildren = DialogBindingHandler.getFocusableChildren($topElement);
                    var focusableChildren = Commerce.ObjectExtensions.isNullOrUndefined($focusableChildren) ? [] : $focusableChildren.toArray();
                    var focusableChild = Commerce.ArrayExtensions.firstOrUndefined(focusableChildren, function (element) {
                        return Commerce.CSSHelpers.isVisible(element) && Commerce.CSSHelpers.isEnabled(element);
                    });
                    if (Commerce.ObjectExtensions.isNullOrUndefined(focusableChild) && !Commerce.ObjectExtensions.isNullOrUndefined(dialogState.$primaryButton)) {
                        var primaryButton = dialogState.$primaryButton[0];
                        if (Commerce.CSSHelpers.isVisible(primaryButton) && Commerce.CSSHelpers.isEnabled(primaryButton)) {
                            focusableChild = primaryButton;
                        }
                    }
                    if (Commerce.ObjectExtensions.isNullOrUndefined(focusableChild)) {
                        $focusableChildren = DialogBindingHandler.getFocusableChildren(dialogState.$buttonsContainer);
                        focusableChildren = Commerce.ObjectExtensions.isNullOrUndefined($focusableChildren) ? [] : $focusableChildren.toArray();
                        focusableChild = Commerce.ArrayExtensions.firstOrUndefined(focusableChildren, function (element) {
                            return Commerce.CSSHelpers.isVisible(element) && Commerce.CSSHelpers.isEnabled(element);
                        });
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(focusableChild)) {
                        $(focusableChild).focus();
                    }
                    var $focused = $(":focus");
                    if ($focused.closest(dialogState.$element).length === 0) {
                        dialogState.$element.attr("tabindex", dialogState.tabIndex++);
                        dialogState.$element.focus();
                    }
                };
                DialogBindingHandler.prototype._isAnyButtonVisible = function (buttons) {
                    return buttons.some(function (button) {
                        var visible = button.visible &&
                            button.visible.subscribe &&
                            (typeof button.visible === "function") ?
                            button.visible()
                            : (typeof button.visible === "boolean") ?
                                button.visible :
                                true;
                        return visible === true;
                    });
                };
                DialogBindingHandler.prototype._setButtonType = function (button, dialogButtonType, operationId) {
                    if (Commerce.StringExtensions.isNullOrWhitespace(dialogButtonType)) {
                        dialogButtonType = operationId === Dialog.OperationIds.OK_BUTTON_CLICK ? "submit" : "button";
                    }
                    button.$element.prop("type", dialogButtonType);
                };
                DialogBindingHandler.prototype._setDataAxBubbleAttribute = function (element, elementIdentifier) {
                    if (!Commerce.StringExtensions.isNullOrWhitespace(elementIdentifier)) {
                        Commerce.BubbleHelper.addAttribute(element, Commerce.StringExtensions.format("messageDialog_{0}", elementIdentifier));
                    }
                };
                DialogBindingHandler.prototype._getButtonIdentifier = function (button) {
                    if (!Commerce.StringExtensions.isNullOrWhitespace(button.operationId)) {
                        return button.operationId;
                    }
                    var label = ko.utils.unwrapObservable(button.label);
                    if (!Commerce.StringExtensions.isNullOrWhitespace(label)) {
                        return label.replace(/[^\w]/gi, Commerce.StringExtensions.EMPTY);
                    }
                    return Commerce.StringExtensions.EMPTY;
                };
                DialogBindingHandler.prototype._setDisabledStateValueMapping = function (dialogState, button, sourceValue, valueTransform) {
                    if (valueTransform === void 0) { valueTransform = null; }
                    if (Commerce.ObjectExtensions.isNullOrUndefined(button)) {
                        return;
                    }
                    if (Commerce.ObjectExtensions.isNullOrUndefined(valueTransform)) {
                        valueTransform = function (val) {
                            return val;
                        };
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(sourceValue)) {
                        if (Commerce.ObjectExtensions.isBoolean(sourceValue)) {
                            button.disabled = valueTransform(sourceValue);
                        }
                        else if (sourceValue.subscribe && (Commerce.ObjectExtensions.isFunction(sourceValue))) {
                            button.disabled = valueTransform(sourceValue());
                            dialogState.subscriptions.push(sourceValue.subscribe(function (newValue) {
                                button.disabled = valueTransform(newValue);
                            }));
                        }
                    }
                };
                DialogBindingHandler.prototype._setEnabledStateValueMapping = function (dialogState, button, sourceValue) {
                    var valueTransform = function (val) {
                        return !val;
                    };
                    this._setDisabledStateValueMapping(dialogState, button, sourceValue, valueTransform);
                };
                DialogBindingHandler.prototype._getValue = function (sourceValue, defaultValue) {
                    var value = defaultValue;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(sourceValue)) {
                        if (ko.isObservable(sourceValue)) {
                            var source = sourceValue;
                            value = source();
                        }
                        else {
                            var source = sourceValue;
                            value = source;
                        }
                    }
                    return value;
                };
                DialogBindingHandler._fadeDuration = 100;
                DialogBindingHandler._slideDuration = 250;
                DialogBindingHandler._commerceDialogWidth = "320px";
                DialogBindingHandler._dialogStateKey = "dialogStateKey";
                DialogBindingHandler._visibleDialogs = [];
                return DialogBindingHandler;
            }());
            ko.bindingHandlers.dialog = new DialogBindingHandler();
        })(Dialog = Controls.Dialog || (Controls.Dialog = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
ko.bindingHandlers.enterKeyPress = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel) {
        ko.utils.registerEventHandler(element, "keypress", function (event) {
            if (event.keyCode === 13) {
                event.preventDefault();
                event.stopImmediatePropagation();
                ko.utils.triggerEvent(element, "change");
                valueAccessor().call(viewModel);
            }
        });
    }
};
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var FadeVisibleBindingHandler = (function () {
            function FadeVisibleBindingHandler() {
            }
            FadeVisibleBindingHandler.prototype.update = function (element, valueAccessor) {
                var options = ko.utils.unwrapObservable(valueAccessor()) || {};
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw new Error("Invalid options passed to the fadeVisible control: options cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.isShowed)) {
                    throw new Error("Invalid options passed to the fadeVisible control: isShowed cannot be null or undefined.");
                }
                var isShowed;
                if (Commerce.ObjectExtensions.isBoolean(options.isShowed)) {
                    isShowed = options.isShowed;
                }
                else if (ko.isObservable(options.isShowed) && Commerce.ObjectExtensions.isBoolean(options.isShowed())) {
                    isShowed = options.isShowed();
                }
                else {
                    throw new Error("Invalid options passed to the fadeVisible control: isShowed should be a boolean value.");
                }
                var onAnimationComplete = function (isVisible) {
                };
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options.onAnimationComplete)) {
                    onAnimationComplete = options.onAnimationComplete;
                }
                var fadeInDuration = FadeVisibleBindingHandler.FADE_IN_DURATION_IN_MILLISECONDS;
                if (!Commerce.NumberExtensions.isNullOrNaN(options.fadeInDuration)) {
                    fadeInDuration = options.fadeInDuration;
                    if (fadeInDuration < 0) {
                        fadeInDuration = 0;
                    }
                }
                if (isShowed) {
                    $(element).fadeIn(fadeInDuration, function () {
                        onAnimationComplete(true);
                    });
                }
                else {
                    $(element).hide(0, function () {
                        onAnimationComplete(false);
                    });
                }
            };
            FadeVisibleBindingHandler.FADE_IN_DURATION_IN_MILLISECONDS = 300;
            return FadeVisibleBindingHandler;
        }());
        Controls.FadeVisibleBindingHandler = FadeVisibleBindingHandler;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
ko.bindingHandlers.fadeVisible = new Commerce.Controls.FadeVisibleBindingHandler();
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var Flyout;
        (function (Flyout) {
            ko.bindingHandlers.flyout = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var value = ko.utils.unwrapObservable(valueAccessor() || {});
                    if (Commerce.ObjectExtensions.isNullOrUndefined(value.anchor)) {
                        throw new Error("The parameter anchor must be defined");
                    }
                    if (Commerce.ObjectExtensions.isNullOrUndefined(value.alignment)) {
                        value.alignment = "center";
                    }
                    new WinJS.UI.Flyout(element);
                    if ((value.alignment === "right" || value.alignment === "left") && Commerce.CSSHelpers.isRightToLeft()) {
                        value.alignment = (value.alignment === "right") ? "left" : "right";
                    }
                    var toggleShowHide = function () {
                        if (element.winControl.hidden) {
                            var dynamicPlacement = $(value.anchor)[0].offsetTop > $("body").height() / 2 ? "top" : "bottom";
                            element.winControl.show($(value.anchor)[0], dynamicPlacement, value.alignment);
                        }
                        else {
                            element.winControl.hide();
                        }
                    };
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(value.toggleShowHide)) {
                        value.toggleShowHide(toggleShowHide);
                    }
                    element.winControl.addEventListener("beforeshow", function (event) {
                        var listViewElements = element.querySelectorAll(".win-listview");
                        for (var i = 0; i < listViewElements.length; i++) {
                            listViewElements.item(i).winControl.recalculateItemPosition();
                        }
                    });
                    element.winControl.addEventListener("afterhide", function (event) {
                        $(value.anchor).attr("aria-expanded", "false");
                    });
                    element.winControl.addEventListener("aftershow", function (event) {
                        $(value.anchor).attr("aria-expanded", "true");
                    });
                    ko.utils.domNodeDisposal.addDisposeCallback(element, function (e) {
                        if (element.winControl) {
                            element.winControl.dispose();
                        }
                    });
                }
            };
        })(Flyout = Controls.Flyout || (Controls.Flyout = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
ko.bindingHandlers.formatPrice = {
    update: function (element, valueAccessor) {
        var value = ko.utils.unwrapObservable(valueAccessor());
        if (!Commerce.ObjectExtensions.isNumber(value)) {
            value = 0;
        }
        element.innerText = Commerce.NumberExtensions.formatCurrency(value);
    }
};
ko.bindingHandlers.formatPriceOrEmpty = {
    update: function (element, valueAccessor) {
        var value = ko.utils.unwrapObservable(valueAccessor());
        if (!Commerce.ObjectExtensions.isNumber(value)) {
            element.innerText = Commerce.StringExtensions.EMPTY;
        }
        else {
            element.innerText = Commerce.NumberExtensions.formatCurrency(value);
        }
    }
};
var Commerce;
(function (Commerce) {
    "use strict";
})(Commerce || (Commerce = {}));
ko.bindingHandlers.gridSelectionMode = {
    createAfterRender: function (id) {
        if (Commerce.ObjectExtensions.isNullOrUndefined(id)) {
            return null;
        }
        return function (element) {
            var $element = $(element);
            var enableMultiSelectionForDataList = function (dataListViewModel) {
                dataListViewModel.toggleSelectionMode();
            };
            var enableMultiSelectionForListView = function (listViewControlInstance) {
                listViewControlInstance.selection.clear();
                switch (listViewControlInstance.selectionMode) {
                    case "multi":
                        listViewControlInstance.selectionMode = WinJS.UI.SelectionMode.multi;
                        listViewControlInstance.tapBehavior = WinJS.UI.TapBehavior.toggleSelect;
                        break;
                    case "single":
                        listViewControlInstance.selectionMode = WinJS.UI.SelectionMode.single;
                        listViewControlInstance.tapBehavior = WinJS.UI.TapBehavior.toggleSelect;
                        $(listViewControlInstance.element).find(".win-surface").addClass("win-selectionmode");
                        break;
                    case "none":
                        listViewControlInstance.selectionMode = WinJS.UI.SelectionMode.none;
                        listViewControlInstance.tapBehavior = WinJS.UI.TapBehavior.invokeOnly;
                        break;
                }
            };
            $element.parent().click(function (event) {
                var $listViewElement = $(id);
                if ($listViewElement.length > 0) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined($listViewElement[0].dataListViewModel)) {
                        var dataListViewModel = $listViewElement[0].dataListViewModel;
                        enableMultiSelectionForDataList(dataListViewModel);
                    }
                    else {
                        var listViewWinControl = $listViewElement[0].winControl;
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(listViewWinControl)) {
                            if (Commerce.ObjectExtensions.isNullOrUndefined(listViewWinControl.mode)) {
                                listViewWinControl.mode = listViewWinControl.selectionMode;
                            }
                            else if (listViewWinControl.mode === listViewWinControl.selectionMode) {
                                listViewWinControl.selectionMode = WinJS.UI.SelectionMode.none;
                            }
                            else {
                                listViewWinControl.selectionMode = listViewWinControl.mode;
                            }
                            enableMultiSelectionForListView(listViewWinControl);
                        }
                        event.preventDefault();
                        event.stopImmediatePropagation();
                    }
                }
            });
            $element.keydown(function (event) {
                var anyKeyPressHandled = false;
                if ((event.keyCode === 13 || event.keyCode === 108)) {
                    $element.click();
                    anyKeyPressHandled = true;
                }
                if (anyKeyPressHandled) {
                    event.preventDefault();
                    event.stopImmediatePropagation();
                }
            });
        };
    },
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var options = ko.utils.unwrapObservable(valueAccessor()) || {};
        $(element).addClass("gridSelection");
        var afterRender = ko.bindingHandlers.gridSelectionMode.createAfterRender(options.id);
        ko.applyBindingsToNode(element, {
            template: { afterRender: afterRender }
        });
        return { controlsDescendantBindings: true };
    }
};
ko.bindingHandlers.hasfocus.update = function (element, valueAccessor) {
    var value = ko.utils.unwrapObservable(valueAccessor());
    window.setTimeout(function () {
        if (value
            && element.offsetWidth && element.offsetHeight
            && document.activeElement !== element) {
            element.focus();
        }
    });
};
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var SelfPackingList;
        (function (SelfPackingList) {
            var PackingItem = (function () {
                function PackingItem(id) {
                    this.id = id;
                    this._isVisible = true;
                    this._eventManager = new Commerce.EventManager();
                }
                Object.defineProperty(PackingItem.prototype, "isVisible", {
                    get: function () {
                        return this._isVisible;
                    },
                    set: function (isVisible) {
                        if (this._isVisible === isVisible) {
                            return;
                        }
                        this._isVisible = isVisible;
                        this._raiseEvent("VisibilityChanged", isVisible);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PackingItem.prototype, "isPacked", {
                    get: function () {
                        return !this._packedElement.classList.contains(PackingItem.HIDE_CLASS)
                            && this._unpackedElement.classList.contains(PackingItem.HIDE_CLASS);
                    },
                    enumerable: true,
                    configurable: true
                });
                PackingItem.prototype.onReady = function (packedElement, unpackedElement) {
                    this._packedElement = packedElement;
                    this._unpackedElement = unpackedElement;
                };
                PackingItem.prototype.dispose = function () {
                    Commerce.ObjectExtensions.disposeAllProperties(this);
                };
                PackingItem.prototype.addEventListener = function (eventName, eventListener) {
                    this._eventManager.addEventListener(eventName, eventListener);
                };
                PackingItem.prototype._raiseEvent = function (eventName, eventData) {
                    this._eventManager.raiseEvent(eventName, eventData);
                };
                PackingItem.HIDE_CLASS = "hide";
                return PackingItem;
            }());
            SelfPackingList.PackingItem = PackingItem;
        })(SelfPackingList = Controls.SelfPackingList || (Controls.SelfPackingList = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var HeaderSplitView;
        (function (HeaderSplitView) {
            "use strict";
            var ConnectionStatusSelfPackingItem = (function (_super) {
                __extends(ConnectionStatusSelfPackingItem, _super);
                function ConnectionStatusSelfPackingItem(id, isConnected, isConnectionStatusPulsing) {
                    var _this = _super.call(this, id) || this;
                    _this.isConnected = isConnected;
                    _this.isConnectionStatusPulsing = isConnectionStatusPulsing;
                    _this._isConnectionStatusPulsingSubscription = _this.isConnectionStatusPulsing.subscribe(function (isPulsing) {
                        if (_this.isPacked) {
                            var overflowButton = $(_this._unpackedElement).closest(".headerSplitViewSelfPackingList").find(".selfPackingListOverflowEllipsis").get(0);
                            if (isPulsing) {
                                overflowButton.classList.add("pulse");
                            }
                            else {
                                overflowButton.classList.remove("pulse");
                            }
                        }
                    });
                    _this.connectivityStatus = ko.computed(function () {
                        return _this.isConnected() ? Commerce.ViewModelAdapter.getResourceString("string_6610") : Commerce.ViewModelAdapter.getResourceString("string_6611");
                    });
                    return _this;
                }
                ConnectionStatusSelfPackingItem.prototype.onReady = function (packedElement, unpackedElement) {
                    _super.prototype.onReady.call(this, packedElement, unpackedElement);
                    ko.applyBindingsToNode(packedElement, { template: { name: "SelfPackingConnectionStatusPacked", data: this } });
                    ko.applyBindingsToNode(unpackedElement, { template: { name: "SelfPackingConnectionStatusUnpacked", data: this } });
                };
                ConnectionStatusSelfPackingItem.prototype.dispose = function () {
                    this._isConnectionStatusPulsingSubscription.dispose();
                    _super.prototype.dispose.call(this);
                };
                ConnectionStatusSelfPackingItem.prototype.showConnectivityStatusDialog = function () {
                    var state = {
                        connectionStatus: Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online
                    };
                    var dataBaseConnectionStatusDialog = new Controls.DatabaseConnectionStatusDialog();
                    dataBaseConnectionStatusDialog.show(state)
                        .onError(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                };
                return ConnectionStatusSelfPackingItem;
            }(Controls.SelfPackingList.PackingItem));
            HeaderSplitView.ConnectionStatusSelfPackingItem = ConnectionStatusSelfPackingItem;
        })(HeaderSplitView = Controls.HeaderSplitView || (Controls.HeaderSplitView = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var HeaderSplitView;
        (function (HeaderSplitView) {
            "use strict";
            var DateAndTimeSelfPackingItem = (function (_super) {
                __extends(DateAndTimeSelfPackingItem, _super);
                function DateAndTimeSelfPackingItem(id) {
                    var _this = _super.call(this, id) || this;
                    _this._clockViewModel = new Commerce.ViewModels.ClockViewModel({
                        stringResourceManager: Commerce.StringResourceManager,
                        managerFactory: Commerce.Model.Managers.Factory,
                        peripherals: Commerce.Peripherals.instance,
                        runtime: Commerce.Runtime,
                        triggerManager: Commerce.Triggers.TriggerManager.instance
                    });
                    _this._clockViewModel.start();
                    return _this;
                }
                DateAndTimeSelfPackingItem.prototype.onReady = function (packedElement, unpackedElement) {
                    _super.prototype.onReady.call(this, packedElement, unpackedElement);
                    ko.applyBindingsToNode(packedElement, { template: { name: "SelfPackingDateAndTimeInfoPacked", data: this._clockViewModel } });
                    ko.applyBindingsToNode(unpackedElement, { template: { name: "SelfPackingDateAndTimeInfoUnpacked", data: this._clockViewModel } });
                };
                return DateAndTimeSelfPackingItem;
            }(Controls.SelfPackingList.PackingItem));
            HeaderSplitView.DateAndTimeSelfPackingItem = DateAndTimeSelfPackingItem;
        })(HeaderSplitView = Controls.HeaderSplitView || (Controls.HeaderSplitView = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var HeaderSplitView;
        (function (HeaderSplitView) {
            "use strict";
            var HelpSelfPackingItem = (function (_super) {
                __extends(HelpSelfPackingItem, _super);
                function HelpSelfPackingItem(id) {
                    return _super.call(this, id) || this;
                }
                HelpSelfPackingItem.prototype.onReady = function (packedElement, unpackedElement) {
                    _super.prototype.onReady.call(this, packedElement, unpackedElement);
                    ko.applyBindingsToNode(packedElement, { template: { name: "SelfPackingHelpPacked", data: this } });
                    ko.applyBindingsToNode(unpackedElement, { template: { name: "SelfPackingHelpUnpacked", data: this } });
                };
                HelpSelfPackingItem.prototype.openHelpPane = function () {
                    var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                    Commerce.TaskRecorder.taskRecorder.activateRecorder(correlationId, "Help");
                };
                return HelpSelfPackingItem;
            }(Controls.SelfPackingList.PackingItem));
            HeaderSplitView.HelpSelfPackingItem = HelpSelfPackingItem;
        })(HeaderSplitView = Controls.HeaderSplitView || (Controls.HeaderSplitView = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var HeaderSplitView;
        (function (HeaderSplitView) {
            "use strict";
            var NotificationSelfPackingItem = (function (_super) {
                __extends(NotificationSelfPackingItem, _super);
                function NotificationSelfPackingItem(id, showNotificationIcon, isNewNotifications) {
                    var _this = _super.call(this, id) || this;
                    _this.isNewNotifications = isNewNotifications;
                    _this.showNotificationIcon = showNotificationIcon;
                    return _this;
                }
                NotificationSelfPackingItem.prototype.onReady = function (packedElement, unpackedElement) {
                    _super.prototype.onReady.call(this, packedElement, unpackedElement);
                    ko.applyBindingsToNode(packedElement, { template: { name: "SelfPackingNotificationPacked", data: this } });
                    ko.applyBindingsToNode(unpackedElement, { template: { name: "SelfPackingNotificationUnpacked", data: this } });
                };
                NotificationSelfPackingItem.prototype.showNotificationCenterDialog = function () {
                    var state = {
                        handleOperation: Commerce.Operations.DefaultButtonGridHandler.handleOperation
                    };
                    var notificationCenterDialog = new Controls.NotificationCenterDialog();
                    notificationCenterDialog.show(state)
                        .onError(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                };
                return NotificationSelfPackingItem;
            }(Controls.SelfPackingList.PackingItem));
            HeaderSplitView.NotificationSelfPackingItem = NotificationSelfPackingItem;
        })(HeaderSplitView = Controls.HeaderSplitView || (Controls.HeaderSplitView = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var HeaderSplitView;
        (function (HeaderSplitView) {
            "use strict";
            var SettingsSelfPackingItem = (function (_super) {
                __extends(SettingsSelfPackingItem, _super);
                function SettingsSelfPackingItem(id, onItemClickedHandler) {
                    var _this = _super.call(this, id) || this;
                    _this.onItemClickedHandler = onItemClickedHandler;
                    return _this;
                }
                SettingsSelfPackingItem.prototype.onReady = function (packedElement, unpackedElement) {
                    _super.prototype.onReady.call(this, packedElement, unpackedElement);
                    ko.applyBindingsToNode(packedElement, { template: { name: "SelfPackingSettingsPacked", data: this } });
                    ko.applyBindingsToNode(unpackedElement, { template: { name: "SelfPackingSettingsUnpacked", data: this } });
                };
                return SettingsSelfPackingItem;
            }(Controls.SelfPackingList.PackingItem));
            HeaderSplitView.SettingsSelfPackingItem = SettingsSelfPackingItem;
        })(HeaderSplitView = Controls.HeaderSplitView || (Controls.HeaderSplitView = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var HeaderSplitView;
        (function (HeaderSplitView) {
            "use strict";
            var TaskRecorderSelfPackingItem = (function (_super) {
                __extends(TaskRecorderSelfPackingItem, _super);
                function TaskRecorderSelfPackingItem(id, isRecordingInProgress, isRecordingPaused) {
                    var _this = _super.call(this, id) || this;
                    _this.isRecordingInProgress = isRecordingInProgress;
                    _this.isRecordingPaused = isRecordingPaused;
                    return _this;
                }
                TaskRecorderSelfPackingItem.prototype.onReady = function (packedElement, unpackedElement) {
                    _super.prototype.onReady.call(this, packedElement, unpackedElement);
                    ko.applyBindingsToNode(packedElement, { template: { name: "SelfPackingTaskRecorderPacked", data: this } });
                    ko.applyBindingsToNode(unpackedElement, { template: { name: "SelfPackingTaskRecorderUnpacked", data: this } });
                };
                TaskRecorderSelfPackingItem.prototype.openRecordingPane = function () {
                    var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                    Commerce.TaskRecorder.taskRecorder.activateRecorder(correlationId);
                };
                return TaskRecorderSelfPackingItem;
            }(Controls.SelfPackingList.PackingItem));
            HeaderSplitView.TaskRecorderSelfPackingItem = TaskRecorderSelfPackingItem;
        })(HeaderSplitView = Controls.HeaderSplitView || (Controls.HeaderSplitView = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var HeaderSplitView;
        (function (HeaderSplitView) {
            "use strict";
            var UserImageSelfPackingItem = (function (_super) {
                __extends(UserImageSelfPackingItem, _super);
                function UserImageSelfPackingItem(id, userImageOrInitialsOptions, onItemClickedHandler) {
                    var _this = _super.call(this, id) || this;
                    _this.userImageOrInitialsOptions = userImageOrInitialsOptions;
                    _this.onItemClickedHandler = onItemClickedHandler;
                    return _this;
                }
                UserImageSelfPackingItem.prototype.onReady = function (packedElement, unpackedElement) {
                    _super.prototype.onReady.call(this, packedElement, unpackedElement);
                    ko.applyBindingsToNode(unpackedElement, { template: { name: "SelfPackingUserInitialsUnpacked", data: this } });
                };
                return UserImageSelfPackingItem;
            }(Controls.SelfPackingList.PackingItem));
            HeaderSplitView.UserImageSelfPackingItem = UserImageSelfPackingItem;
        })(HeaderSplitView = Controls.HeaderSplitView || (Controls.HeaderSplitView = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var HeaderSplitView;
        (function (HeaderSplitView) {
            "use strict";
            var UserInfoSelfPackingItem = (function (_super) {
                __extends(UserInfoSelfPackingItem, _super);
                function UserInfoSelfPackingItem(id, userImageOrInitialsOptions, shiftInfo, onItemClickedHandler) {
                    var _this = _super.call(this, id) || this;
                    _this.shiftInfo = shiftInfo;
                    _this.userImageOrInitialsOptions = userImageOrInitialsOptions;
                    _this.onItemClickedHandler = onItemClickedHandler;
                    _this.userAndShiftInfo = ko.computed(function () {
                        return Commerce.StringExtensions.format("{0}\n{1}", _this.userImageOrInitialsOptions().name, _this.shiftInfo());
                    });
                    return _this;
                }
                UserInfoSelfPackingItem.prototype.onReady = function (packedElement, unpackedElement) {
                    _super.prototype.onReady.call(this, packedElement, unpackedElement);
                    ko.applyBindingsToNode(packedElement, { template: { name: "SelfPackingUserInfoPacked", data: this } });
                    ko.applyBindingsToNode(unpackedElement, { template: { name: "SelfPackingUserInfoUnpacked", data: this } });
                };
                return UserInfoSelfPackingItem;
            }(Controls.SelfPackingList.PackingItem));
            HeaderSplitView.UserInfoSelfPackingItem = UserInfoSelfPackingItem;
        })(HeaderSplitView = Controls.HeaderSplitView || (Controls.HeaderSplitView = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var HorizontalStatusBarState = (function () {
            function HorizontalStatusBarState() {
                this.patternId = Microsoft.Dynamics.Diagnostics.TypeScriptCore.Utils.generateGuid();
                this.solidBarWidth = ko.observable("0%");
                this.stripBarWidth = ko.observable("0%");
                this.isInitializing = ko.observable(true);
                this.remainingNumberText = ko.observable(Commerce.StringExtensions.EMPTY);
                this.remainingLabel = Commerce.StringExtensions.EMPTY;
                this.overallStatusLabel = ko.observable(Commerce.StringExtensions.EMPTY);
                this.showNumbersBelowBar = false;
                this.finishedNumberText = ko.observable(Commerce.StringExtensions.EMPTY);
                this.finishedAriaLabel = ko.observable(Commerce.StringExtensions.EMPTY);
                this.inProgressNumberText = ko.observable(Commerce.StringExtensions.EMPTY);
                this.totalNumberText = ko.observable(Commerce.StringExtensions.EMPTY);
                this.totalAriaLabel = ko.observable(Commerce.StringExtensions.EMPTY);
                this.finishedLabel = Commerce.StringExtensions.EMPTY;
                this.totalLabel = Commerce.StringExtensions.EMPTY;
                this.ariaLabel = ko.observable("");
            }
            return HorizontalStatusBarState;
        }());
        var HorizontalStatusBar = (function () {
            function HorizontalStatusBar() {
            }
            HorizontalStatusBar.prototype.init = function (element, valueAccessor) {
                var state = new HorizontalStatusBarState();
                var $element = $(element);
                $element.data(HorizontalStatusBar.STATE_ATTRIBUTE_NAME, state);
                var options = ko.utils.unwrapObservable(valueAccessor());
                if (Commerce.StringExtensions.isNullOrWhitespace(options.controlLoggingId)) {
                    throw new Error("controlLoggingId is required in HorizontalStatusBar");
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.finishedNumber) ||
                    Commerce.ObjectExtensions.isNullOrUndefined(options.inProgressNumber) ||
                    Commerce.ObjectExtensions.isNullOrUndefined(options.notStartedNumber)) {
                    throw new Error("finishedNumber, inProgressNumber, and notStartedNumber are required in HorizontalStatusBar");
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.showNumbersBelowBar)) {
                    throw new Error("showNumbersBelowBar is required");
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.decimalPrecision) || options.decimalPrecision < 0) {
                    throw new Error("decimalPrecision is required and should be non-negative in HorizontalStatusBar");
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options.labels) && (Commerce.StringExtensions.isNullOrWhitespace(options.labels.remainingLabel) ||
                    Commerce.StringExtensions.isNullOrWhitespace(options.labels.overallStatusLabel) ||
                    Commerce.StringExtensions.isNullOrWhitespace(options.labels.finishedLabel) ||
                    Commerce.StringExtensions.isNullOrWhitespace(options.labels.totalLabel))) {
                    throw new Error("the labels should be either not provided or completedly provided in HorizontalStatusBar");
                }
                state.showNumbersBelowBar = options.showNumbersBelowBar;
                var labelOptions = options.labels;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(labelOptions)) {
                    state.finishedLabel = labelOptions.finishedLabel;
                    state.remainingLabel = labelOptions.remainingLabel;
                    state.totalLabel = labelOptions.totalLabel;
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options.ariaLabel)) {
                    state.ariaLabel = options.ariaLabel;
                }
                ko.applyBindingsToNode(element, {
                    template: {
                        name: "horizontalStatusBarTemplate",
                        data: state
                    }
                });
                HorizontalStatusBar._initBars(element, valueAccessor);
                return { controlsDescendantBindings: true };
            };
            HorizontalStatusBar.prototype.update = function (element, valueAccessor) {
                var $element = $(element);
                var state = $element.data(HorizontalStatusBar.STATE_ATTRIBUTE_NAME);
                if (!state.isInitializing()) {
                    HorizontalStatusBar._update(element, valueAccessor, true);
                }
            };
            HorizontalStatusBar._normalizeNonNegativeNumber = function (num, controlLoggingId, fieldName) {
                if (fieldName === void 0) { fieldName = Commerce.StringExtensions.EMPTY; }
                var result = Commerce.NumberExtensions.isNullOrNaN(num) || num < 0 ? 0 : num;
                if (!Commerce.StringExtensions.isNullOrWhitespace(fieldName) && result !== num) {
                    Commerce.RetailLogger.controlsHorizontalStatusBarInvalidValue(num, controlLoggingId, fieldName);
                }
                return result;
            };
            HorizontalStatusBar._initBars = function (element, valueAccessor) {
                var $element = $(element);
                $element.addClass("horizontalStatusBar");
                $element.addClass("col");
                var state = $element.data(HorizontalStatusBar.STATE_ATTRIBUTE_NAME);
                Commerce.Host.instance.timers.setImmediate(function () {
                    HorizontalStatusBar._update(element, valueAccessor, false);
                    Commerce.Host.instance.timers.setImmediate(function () {
                        state.isInitializing(false);
                    });
                });
            };
            HorizontalStatusBar._update = function (element, valueAccessor, removeInitializingIndicator) {
                var $element = $(element);
                var options = ko.utils.unwrapObservable(valueAccessor());
                var state = $element.data(HorizontalStatusBar.STATE_ATTRIBUTE_NAME);
                if (Commerce.ObjectExtensions.isNullOrUndefined(state)) {
                    return;
                }
                var notStartedNumber = HorizontalStatusBar._normalizeNonNegativeNumber(ko.utils.unwrapObservable(options.notStartedNumber), options.controlLoggingId, "notStartedNumber");
                var finishedNumber = HorizontalStatusBar._normalizeNonNegativeNumber(ko.utils.unwrapObservable(options.finishedNumber), options.controlLoggingId, "finishedNumber");
                var inProgressNumber = HorizontalStatusBar._normalizeNonNegativeNumber(ko.utils.unwrapObservable(options.inProgressNumber), options.controlLoggingId, "inProgressNumber");
                var total = notStartedNumber + finishedNumber + inProgressNumber;
                var stripWidthRatio = total > 0 ? (finishedNumber + inProgressNumber) / total : 0;
                state.stripBarWidth("" + (stripWidthRatio * 100) + "%");
                var solidWidthRatio = total > 0 ? finishedNumber / total : 0;
                state.solidBarWidth("" + (solidWidthRatio * 100) + "%");
                var decimalPrecision = HorizontalStatusBar._normalizeNonNegativeNumber(options.decimalPrecision, options.controlLoggingId, "decimalPrecision");
                state.finishedNumberText(Commerce.NumberExtensions.formatNumber(finishedNumber, decimalPrecision));
                state.inProgressNumberText(Commerce.NumberExtensions.formatNumber(inProgressNumber, decimalPrecision));
                state.remainingNumberText(Commerce.NumberExtensions.formatNumber(notStartedNumber + inProgressNumber, decimalPrecision));
                state.totalNumberText(Commerce.NumberExtensions.formatNumber(total, decimalPrecision));
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options.labels)) {
                    if (!Commerce.StringExtensions.isNullOrWhitespace(options.labels.overallStatusLabel)) {
                        state.overallStatusLabel(Commerce.StringExtensions.format(Commerce.StringResourceManager.getString("string_30401"), options.labels.overallStatusLabel, state.inProgressNumberText()));
                    }
                    if (!Commerce.StringExtensions.isNullOrWhitespace(options.labels.finishedLabel)) {
                        state.finishedAriaLabel(Commerce.StringExtensions.format(Commerce.StringResourceManager.getString("string_30402"), options.labels.finishedLabel, state.finishedNumberText()));
                    }
                    else {
                        state.finishedAriaLabel(state.finishedNumberText());
                    }
                    if (!Commerce.StringExtensions.isNullOrWhitespace(options.labels.totalLabel)) {
                        state.totalAriaLabel(Commerce.StringExtensions.format(Commerce.StringResourceManager.getString("string_30402"), options.labels.totalLabel, state.totalNumberText()));
                    }
                    else {
                        state.totalAriaLabel(state.totalNumberText());
                    }
                }
                var areAllLabelsMissing = Commerce.ObjectExtensions.isNullOrUndefined(options.ariaLabel) &&
                    Commerce.ObjectExtensions.isNullOrUndefined(options.labels);
                if (areAllLabelsMissing) {
                    var notStartedNumberLabel = Commerce.NumberExtensions.formatNumber(notStartedNumber, decimalPrecision);
                    state.ariaLabel(Commerce.StringExtensions.format(Commerce.StringResourceManager.getString("string_30400"), notStartedNumberLabel, state.inProgressNumberText(), state.finishedNumberText(), state.totalNumberText()));
                }
            };
            HorizontalStatusBar.STATE_ATTRIBUTE_NAME = "HorizontalStatusBarState";
            return HorizontalStatusBar;
        }());
        Controls.HorizontalStatusBar = HorizontalStatusBar;
        ko.bindingHandlers.horizontalStatusBar = new Commerce.Controls.HorizontalStatusBar();
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var IncrementalControl;
        (function (IncrementalControl) {
            var CategoryTreeNode = (function () {
                function CategoryTreeNode() {
                }
                return CategoryTreeNode;
            }());
            var CategoryTreeDataRenderer = (function () {
                function CategoryTreeDataRenderer(categories, onClick) {
                    var categoryNodes = this._arrangeCategoriesInTree(categories);
                    this._categoryTreeNodes = [];
                    this._getCategoryTreeNodes(this._categoryTreeNodes, categoryNodes, 0);
                    this._maxIndex = Commerce.ObjectExtensions.isNullOrUndefined(this._categoryTreeNodes) ? -1 : this._categoryTreeNodes.length - 1;
                    this._index = -1;
                    this._onClick = onClick;
                }
                CategoryTreeDataRenderer.prototype.moveNext = function () {
                    if (this._index <= this._maxIndex) {
                        this._index++;
                    }
                    return this._index <= this._maxIndex;
                };
                CategoryTreeDataRenderer.prototype.current = function () {
                    if ((this._index > -1) && (this._index <= this._maxIndex)) {
                        var categoryTreeNode = this._categoryTreeNodes[this._index];
                        var $dialogContainer = $(CategoryTreeDataRenderer.EMPTY_DIV_HTML);
                        ko.cleanNode($dialogContainer[0]);
                        ko.applyBindingsToNode($dialogContainer[0], {
                            template: {
                                name: CategoryTreeDataRenderer.CATEGORY_TREE_DATA_RENDERER_NODE_TEMPLATE_ID,
                                data: { category: categoryTreeNode.categoryNode.value, onClick: this._onClick }
                            }
                        });
                        var padding = void 0;
                        if (Commerce.CSSHelpers.isRightToLeft()) {
                            padding = "padding-right";
                        }
                        else {
                            padding = "padding-left";
                        }
                        $dialogContainer.css(padding, "calc(" + categoryTreeNode.level.toString() + " * 20px)");
                        return $dialogContainer[0];
                    }
                    return null;
                };
                CategoryTreeDataRenderer.prototype.getRendererContainerStyles = function () {
                    return "pad0 padRight20 padBottom100 marginTop0";
                };
                CategoryTreeDataRenderer.prototype.reset = function () {
                    this._index = -1;
                };
                CategoryTreeDataRenderer.prototype.dispose = function () {
                    this._categoryTreeNodes = null;
                    this._onClick = null;
                };
                CategoryTreeDataRenderer.prototype._arrangeCategoriesInTree = function (categories) {
                    var rootNodes = [];
                    var childNodesByParentId = Object.create(null);
                    for (var i = 0, len = categories.length; i < len; ++i) {
                        var currentCategory = categories[i];
                        var parentId = currentCategory.ParentCategory;
                        var target = !parentId ? rootNodes : (childNodesByParentId[parentId] || (childNodesByParentId[parentId] = []));
                        target.push({ value: currentCategory });
                    }
                    var findChildren = function (parentCategory) {
                        if (childNodesByParentId[parentCategory.value.RecordId]) {
                            parentCategory.children = childNodesByParentId[parentCategory.value.RecordId];
                            for (var i = 0, len = parentCategory.children.length; i < len; ++i) {
                                findChildren(parentCategory.children[i]);
                            }
                        }
                        else {
                            parentCategory.children = [];
                        }
                    };
                    for (var i = 0, ltd = rootNodes.length; i < ltd; ++i) {
                        findChildren(rootNodes[i]);
                    }
                    return rootNodes;
                };
                CategoryTreeDataRenderer.prototype._getCategoryTreeNodes = function (categoryTreeNodes, categoryNodes, level) {
                    var _this = this;
                    if (Commerce.ArrayExtensions.hasElements(categoryNodes)) {
                        categoryNodes.forEach(function (categoryNode) {
                            categoryTreeNodes.push({ categoryNode: categoryNode, level: level });
                            _this._getCategoryTreeNodes(categoryTreeNodes, categoryNode.children, level + 1);
                        });
                    }
                };
                CategoryTreeDataRenderer.EMPTY_DIV_HTML = "<div></div>";
                CategoryTreeDataRenderer.CATEGORY_TREE_DATA_RENDERER_NODE_TEMPLATE_ID = "categoryTreeDataRendererNodeTemplate";
                return CategoryTreeDataRenderer;
            }());
            IncrementalControl.CategoryTreeDataRenderer = CategoryTreeDataRenderer;
        })(IncrementalControl = Controls.IncrementalControl || (Controls.IncrementalControl = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var IncrementalScrollableControlViewModel = (function () {
        function IncrementalScrollableControlViewModel(element, options) {
            var _this = this;
            this._numberItemsToRenderIfRenderedSizeInfoNotAvailable = IncrementalScrollableControlViewModel.DEFAULT_NUMBER_ITEMS_TO_RENDER;
            ko.cleanNode(element);
            ko.applyBindingsToNode(element, {
                template: {
                    name: "incrementalScrollableControlTemplate"
                }
            });
            this._scrollableDivElement = element.children[0];
            this._dataContainerElement = this._scrollableDivElement.children[0];
            var renderedContainedStyles = options.dataRenderer.getRendererContainerStyles();
            if (!Commerce.StringExtensions.isNullOrWhitespace(renderedContainedStyles)) {
                $(this._dataContainerElement).addClass(renderedContainedStyles);
            }
            this.updateOptions(options);
            this._scrollableDivElement.onscroll = this.renderItems.bind(this);
            this._windowResizeHandler = this.renderItems.bind(this);
            window.addEventListener("resize", this._windowResizeHandler);
            ko.utils.domNodeDisposal.addDisposeCallback($(this._scrollableDivElement).get(0), function (e) {
                _this.dispose();
            });
        }
        IncrementalScrollableControlViewModel.prototype.renderItems = function () {
            var scrollableDivElement = this._scrollableDivElement;
            var dataRenderer = this._options.dataRenderer;
            if (scrollableDivElement.clientHeight > 0) {
                var offSetHeight = IncrementalScrollableControlViewModel.DEFAULT_ADDITONAL_ITEM_RENDER_FACTOR * scrollableDivElement.clientHeight;
                var clientHeight = scrollableDivElement.clientHeight;
                while ((scrollableDivElement.scrollTop >= (scrollableDivElement.scrollHeight - offSetHeight) - clientHeight) &&
                    dataRenderer.moveNext()) {
                    this._numRenderedElements++;
                    scrollableDivElement.children[0].appendChild(dataRenderer.current());
                }
            }
            else {
                while (((this._numRenderedElements < this._numberItemsToRenderIfRenderedSizeInfoNotAvailable) ||
                    (this._numberItemsToRenderIfRenderedSizeInfoNotAvailable < 0)) &&
                    dataRenderer.moveNext()) {
                    this._numRenderedElements++;
                    scrollableDivElement.children[0].appendChild(dataRenderer.current());
                }
            }
        };
        IncrementalScrollableControlViewModel.prototype.dispose = function () {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(this._windowResizeHandler)) {
                window.removeEventListener("resize", this._windowResizeHandler);
            }
            Commerce.ObjectExtensions.disposeAllProperties(this);
        };
        IncrementalScrollableControlViewModel.prototype.updateOptions = function (options) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(options) || Commerce.ObjectExtensions.isNullOrUndefined(options.dataRenderer)) {
                throw "The options and data renderer for an incrementalScrollableControl must be specified.";
            }
            this._options = options;
            this.clearControlItems();
            this.renderItems();
        };
        IncrementalScrollableControlViewModel.prototype.clearControlItems = function () {
            this._numRenderedElements = 0;
            $(this._dataContainerElement).empty();
            this._options.dataRenderer.reset();
        };
        IncrementalScrollableControlViewModel.DEFAULT_ADDITONAL_ITEM_RENDER_FACTOR = .20;
        IncrementalScrollableControlViewModel.DEFAULT_NUMBER_ITEMS_TO_RENDER = 40;
        return IncrementalScrollableControlViewModel;
    }());
    Commerce.IncrementalScrollableControlViewModel = IncrementalScrollableControlViewModel;
    var IncrementalScrollableControlHandler = (function () {
        function IncrementalScrollableControlHandler() {
        }
        IncrementalScrollableControlHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var options = ko.utils.unwrapObservable(valueAccessor()) || { dataRenderer: null, onClick: null };
            var incrementalScrollableControlViewModel = new IncrementalScrollableControlViewModel(element, options);
            element.controlViewModel = incrementalScrollableControlViewModel;
            return { controlsDescendantBindings: true };
        };
        IncrementalScrollableControlHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var options = ko.utils.unwrapObservable(valueAccessor()) || { dataRenderer: null, onClick: null };
            var incrementalScrollableControlViewModel = element.controlViewModel;
            incrementalScrollableControlViewModel.updateOptions(options);
        };
        return IncrementalScrollableControlHandler;
    }());
    Commerce.IncrementalScrollableControlHandler = IncrementalScrollableControlHandler;
})(Commerce || (Commerce = {}));
ko.bindingHandlers.incrementalScrollableControl = new Commerce.IncrementalScrollableControlHandler();
var Commerce;
(function (Commerce) {
    "use strict";
    var InteractionData = (function () {
        function InteractionData() {
        }
        return InteractionData;
    }());
    Commerce.InteractionData = InteractionData;
    var InteractionEvents = (function () {
        function InteractionEvents() {
        }
        InteractionEvents.VIEWSHOWN = "viewShown";
        InteractionEvents.VIEWUNLOAD = "viewUnload";
        InteractionEvents.ROWSELECTEDEVENT = "rowSelected";
        InteractionEvents.ROWCLICKEDEVENT = "rowClicked";
        InteractionEvents.NUMPADENTER = "numpadEnter";
        InteractionEvents.BUTTONGRIDBUTTONCLICKED = "buttonGridButtonClicked";
        return InteractionEvents;
    }());
    Commerce.InteractionEvents = InteractionEvents;
    var Interaction = (function () {
        function Interaction() {
        }
        Object.defineProperty(Interaction, "instance", {
            get: function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(Interaction._instance)) {
                    Interaction._instance = new Interaction();
                }
                return Interaction._instance;
            },
            enumerable: true,
            configurable: true
        });
        Interaction.prototype.triggerEvent = function (element, eventName) {
            var interactionObject = Interaction.instance.getInteractionObject(element);
            if (Commerce.ObjectExtensions.isNullOrUndefined(interactionObject)) {
                return Interaction.instance.raiseEvent(element, eventName);
            }
            interactionObject.triggerEvent(eventName);
        };
        Interaction.prototype.raiseEvent = function (element, eventName) {
            var interactionObject = Interaction.instance.getClosestParentInteractionObject(element);
            if (Commerce.ObjectExtensions.isNullOrUndefined(interactionObject)) {
                return;
            }
            interactionObject.triggerEvent(eventName);
        };
        Interaction.prototype.getInteractionObject = function (element) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(element)) {
                return $(element).data(InteractionElement.interactionElementMarker);
            }
            return null;
        };
        Interaction.prototype.getClosestParentInteractionObject = function (element) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(element)) {
                return $(element.parentElement)
                    .closest("." + InteractionElement.interactionElementMarker).data(InteractionElement.interactionElementMarker);
            }
            return null;
        };
        Interaction._instance = null;
        return Interaction;
    }());
    Commerce.Interaction = Interaction;
    var InteractionElement = (function () {
        function InteractionElement(element, options) {
            var _this = this;
            this._supportedEvents = [];
            this._currentEventName = "";
            if (Commerce.ObjectExtensions.isNullOrUndefined(element)) {
                throw "'element' is required parameter for Interaction class.";
            }
            this._$element = $(element);
            this._$element.addClass(InteractionElement.interactionElementMarker);
            this._$element.data(InteractionElement.interactionElementMarker, this);
            this._$pageElement = this._$element.closest(".pagecontrol");
            if (this._$pageElement.length < 1) {
                throw "Unable to locate view control. This element is required to narrow down search area.";
            }
            for (var key in InteractionEvents) {
                if (key) {
                    this._supportedEvents.push(InteractionEvents[key]);
                }
            }
            if (!Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                $.each(options, function (key, value) {
                    if (Commerce.StringExtensions.isNullOrWhitespace(key) ||
                        Commerce.ObjectExtensions.isNullOrUndefined(value)) {
                        throw "One or more items in 'options' is missing eventName or activity for Interaction class.";
                    }
                    _this.on(key).setActivityData(value);
                });
            }
            ko.utils.domNodeDisposal.addDisposeCallback(element, function (e) {
                _this.dispose();
            });
        }
        InteractionElement.prototype.dispose = function () {
            this._$element
                .off()
                .removeData(InteractionElement.interactionElementMarker);
        };
        InteractionElement.prototype.on = function (eventName, callback) {
            if (Commerce.StringExtensions.isNullOrWhitespace(eventName)) {
                throw "Parameter 'eventName' cannot be empty in Interaction.on method.";
            }
            if (this._supportedEvents.indexOf(eventName) < 0) {
                this._supportedEvents.push(eventName);
            }
            this._currentEventName = eventName;
            if (Commerce.ObjectExtensions.isFunction) {
                this._$element.on(this._currentEventName, callback);
            }
            return this;
        };
        InteractionElement.prototype.triggerEvent = function (eventName) {
            this.validateEventName(eventName);
            this._$element.trigger(eventName);
        };
        InteractionElement.prototype.setActivityData = function (interactionActivityData) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(interactionActivityData)) {
                for (var key in interactionActivityData) {
                    if (key) {
                        this[key](interactionActivityData[key]);
                    }
                }
            }
            return this;
        };
        InteractionElement.prototype.show = function (elementSelector) {
            if (Commerce.StringExtensions.isNullOrWhitespace(elementSelector)) {
                throw "'elementSelector' is a required parameter for Interaction.show method.";
            }
            this.jQuery({
                method: "show",
                selector: elementSelector
            });
            return this;
        };
        InteractionElement.prototype.hide = function (elementSelector) {
            if (Commerce.StringExtensions.isNullOrWhitespace(elementSelector)) {
                throw "'elementSelector' is a required parameter for Interaction.hide method.";
            }
            this.jQuery({
                method: "hide",
                selector: elementSelector
            });
            return this;
        };
        InteractionElement.prototype.toggle = function (elementSelector) {
            if (Commerce.StringExtensions.isNullOrWhitespace(elementSelector)) {
                throw "'elementSelector' is a required parameter for Interaction.toggle method.";
            }
            this.jQuery({
                method: "toggle",
                selector: elementSelector
            });
            return this;
        };
        InteractionElement.prototype.focus = function (elementSelector) {
            var _this = this;
            if (Commerce.StringExtensions.isNullOrWhitespace(elementSelector)) {
                throw "'elementSelector' is a required parameter for Interaction.focus method.";
            }
            this._$element.on(this._currentEventName, function () {
                setTimeout(function () {
                    _this._$pageElement.find(elementSelector).focus();
                }, 500);
            });
            return this;
        };
        InteractionElement.prototype.navigate = function (viewName) {
            if (Commerce.StringExtensions.isNullOrWhitespace(viewName)) {
                throw "'viewName' is a required parameter for Interaction.navigate method.";
            }
            this._$element.on(this._currentEventName, function () {
                if (!Commerce.ViewModelAdapter.isInView(viewName)) {
                    Commerce.ViewModelAdapter.navigate(viewName);
                }
            });
            return this;
        };
        InteractionElement.prototype.click = function (elementSelector) {
            if (Commerce.StringExtensions.isNullOrWhitespace(elementSelector)) {
                throw "'elementSelector' is a required parameter for Interaction.click method.";
            }
            this.jQuery({
                method: "click",
                selector: elementSelector
            });
            return this;
        };
        InteractionElement.prototype.selectPivot = function (elementSelector) {
            var _this = this;
            this._$element.on(this._currentEventName, function () {
                var $targetElement = _this._$pageElement.find(elementSelector);
                var pivotItemElement = $targetElement.get(0);
                if (Commerce.ObjectExtensions.isNullOrUndefined(pivotItemElement) ||
                    Commerce.ObjectExtensions.isNullOrUndefined(pivotItemElement.winControl)) {
                    throw "Unable to find PivotItem control for TargetElementInteractionActivity.selectPivot method.";
                }
                var pivotItem = pivotItemElement.winControl;
                var pivotControlElement = _this._$pageElement.find(elementSelector).closest(".win-pivot").get(0);
                if (Commerce.ObjectExtensions.isNullOrUndefined(pivotControlElement) ||
                    Commerce.ObjectExtensions.isNullOrUndefined(pivotControlElement.winControl)) {
                    throw "Unable to find Pivot control for TargetElementInteractionActivity.selectPivot method.";
                }
                var pivotControl = pivotControlElement.winControl;
                if (pivotControl.selectedItem !== pivotItem) {
                    pivotControl.selectedItem = pivotItem;
                }
            });
            return this;
        };
        InteractionElement.prototype.raiseEvent = function (eventName) {
            var _this = this;
            if (Commerce.StringExtensions.isNullOrWhitespace(eventName)) {
                throw "'eventName' is a required parameter for Interaction.raiseEvent method.";
            }
            this._$element.on(this._currentEventName, function () {
                Interaction.instance.raiseEvent(_this._$element.get(0).parentElement, eventName);
            });
            return this;
        };
        InteractionElement.prototype.jQuery = function (activitySettings) {
            var _this = this;
            if (Commerce.ObjectExtensions.isNullOrUndefined(activitySettings)) {
                throw "'activitySettings' is a required parameter for Interaction.jQuery method.";
            }
            if (Commerce.StringExtensions.isNullOrWhitespace(activitySettings.method) ||
                Commerce.StringExtensions.isNullOrWhitespace(activitySettings.selector)) {
                throw "'selector' and 'method' are required in 'activitySettings' parameter for Interaction.jQuery method.";
            }
            this._$element.on(this._currentEventName, function () {
                var selectedActivityElement = _this._$pageElement.find(activitySettings.selector);
                if (selectedActivityElement.length < 1) {
                    return;
                }
                var activityMethod = selectedActivityElement[activitySettings.method];
                if (Commerce.ObjectExtensions.isFunction(activityMethod)) {
                    activityMethod.apply(selectedActivityElement, activitySettings.param);
                }
            });
            return this;
        };
        InteractionElement.prototype.validateEventName = function (eventName) {
            if (Commerce.StringExtensions.isNullOrWhitespace(eventName) ||
                this._supportedEvents.indexOf(eventName) < 0) {
                throw "'" + eventName + "' event name is not supported by Interaction class.";
            }
        };
        InteractionElement.interactionElementMarker = "interactionElement";
        return InteractionElement;
    }());
    Commerce.InteractionElement = InteractionElement;
})(Commerce || (Commerce = {}));
ko.bindingHandlers.interaction = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var options = ko.utils.unwrapObservable(valueAccessor()) || null;
        if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
            throw "Interaction options are required parameters for ko.bindingHandlers.interaction class.";
        }
        new Commerce.InteractionElement(element, options);
    }
};
ko.bindingHandlers.invoke = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var methodToInvoke = ko.utils.unwrapObservable(valueAccessor());
        var tagName = element.tagName;
        if (tagName === "a" || tagName === "button" || tagName === "area"
            || tagName === "select" || tagName === "textArea" || tagName === "object") {
            throw "Invoke binding doesn't support element " + tagName;
        }
        if (typeof (methodToInvoke) !== "function") {
            throw "Invoke binding value must be a function";
        }
        var parent = element.parentElement;
        var wrapper = document.createElement("div");
        parent.replaceChild(wrapper, element);
        wrapper.appendChild(element);
        var itemContainer = new WinJS.UI.ItemContainer(wrapper, null);
        itemContainer.selectionDisabled = true;
        itemContainer.tapBehavior = WinJS.UI.TapBehavior.invokeOnly;
        var item = $(wrapper).find(".win-itembox");
        item.css("background-color", "transparent");
        itemContainer.addEventListener("invoked", WinJS.Utilities.markSupportedForProcessing(methodToInvoke));
        ko.utils.domNodeDisposal.addDisposeCallback(element, function (e) {
            if (wrapper.winControl) {
                wrapper.winControl.dispose();
            }
        });
    }
};
ko.bindingHandlers.invokeButton = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var options = ko.utils.unwrapObservable(valueAccessor()) || {};
        var itemContainer = new WinJS.UI.ItemContainer(element);
        if (Commerce.ObjectExtensions.isFunction(options.itemInvoked)) {
            var itemInvokeHandler = function (eventArgs) {
                options.itemInvoked.call(viewModel, { currentTarget: eventArgs.currentTarget, data: options.data });
            };
            itemContainer.addEventListener("invoked", WinJS.Utilities.markSupportedForProcessing(itemInvokeHandler));
        }
        ko.utils.domNodeDisposal.addDisposeCallback(element, function (e) {
            if (element.winControl) {
                element.winControl.dispose();
            }
        });
        return { controlsDescendantBindings: true };
    }
};
ko.bindingHandlers.invokeButtonList = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var options = ko.utils.unwrapObservable(valueAccessor()) || {};
        var afterForeachRender = function (elements, elementBindingContext) {
            if (Commerce.ArrayExtensions.hasElements(elements)) {
                elements.forEach(function (invokeButtonElement) {
                    if (invokeButtonElement.nodeType === 1) {
                        var invokeButtonOptions = {
                            itemInvoked: options.itemInvoked,
                            data: elementBindingContext
                        };
                        invokeButtonOptions.data = elementBindingContext;
                        ko.applyBindingsToNode(invokeButtonElement, { invokeButton: invokeButtonOptions });
                    }
                });
            }
        };
        var template = {
            name: options.template,
            foreach: options.data,
            afterRender: afterForeachRender
        };
        ko.applyBindingsToNode(element, { template: template });
        return { controlsDescendantBindings: true };
    }
};
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var InvokeValidate = (function () {
            function InvokeValidate() {
            }
            InvokeValidate.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var $element = $(element);
                var methodToInvoke = ko.utils.unwrapObservable(valueAccessor());
                if (typeof methodToInvoke !== "function") {
                    throw "invokeValidate binding value must be a function.";
                }
                var $formElementQuery = $(element).parents("form").first();
                if ($formElementQuery.length < 1) {
                    throw "Button with invokeValidate binding must be enclosed into a form.";
                }
                var clickHandler = function (eventObject) {
                    var $submitButton = $("<input type='submit' class='hide invokeValidateHiddenButton' />");
                    $formElementQuery.append($submitButton);
                    $submitButton.attr("type", "submit");
                    InvokeValidate.currentHandler = methodToInvoke;
                    $submitButton.click();
                    $submitButton.remove();
                    return false;
                };
                $element.click(clickHandler);
                $formElementQuery.submit(function (eventObject) {
                    if (InvokeValidate.currentHandler !== null) {
                        InvokeValidate.currentHandler.call(viewModel);
                        InvokeValidate.currentHandler = null;
                    }
                    return false;
                });
            };
            InvokeValidate.currentHandler = null;
            return InvokeValidate;
        }());
        Controls.InvokeValidate = InvokeValidate;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
ko.bindingHandlers.invokeValidate = new Commerce.Controls.InvokeValidate();
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var Let = (function () {
            function Let() {
            }
            Let.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var innerContext = bindingContext.extend(valueAccessor());
                ko.applyBindingsToDescendants(innerContext, element);
                return { controlsDescendantBindings: true };
            };
            return Let;
        }());
        ko.bindingHandlers.let = Let;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var TextConverter;
        (function (TextConverter) {
            "use strict";
            var TextConverterBindingHandler = (function () {
                function TextConverterBindingHandler() {
                }
                TextConverterBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var value = ko.utils.unwrapObservable(valueAccessor()) || {};
                    var data = value.data;
                    var fieldValue;
                    var convertedValue;
                    var columnToBind = value.columnToBind || Commerce.StringExtensions.EMPTY;
                    var columnToBindResx = value.columnToBindResx || Commerce.StringExtensions.EMPTY;
                    if (value.field === "$data") {
                        fieldValue = data;
                    }
                    else if (!Commerce.StringExtensions.isNullOrWhitespace(value.field)) {
                        var fieldSplit = value.field.split(".");
                        if (fieldSplit.length > 1) {
                            fieldValue = data;
                            fieldSplit.forEach(function (field) {
                                if (!Commerce.ObjectExtensions.isNullOrUndefined(fieldValue)) {
                                    fieldValue = fieldValue[field];
                                }
                            });
                        }
                        else {
                            fieldValue = data[value.field];
                        }
                    }
                    var converterMethodOrObject;
                    if (Commerce.ObjectExtensions.isFunction(value.converter) || Commerce.ObjectExtensions.isObject(value.converter)) {
                        converterMethodOrObject = value.converter;
                    }
                    else if (Commerce.ObjectExtensions.isString(value.converter) && !Commerce.StringExtensions.isNullOrWhitespace(value.converter)) {
                        var pathNames = value.converter.split(".");
                        converterMethodOrObject = window[pathNames[0]];
                        for (var i = 1; i < pathNames.length; i++) {
                            converterMethodOrObject = converterMethodOrObject[pathNames[i]];
                        }
                    }
                    var converterMethod;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(converterMethodOrObject) &&
                        Commerce.ObjectExtensions.isObject(converterMethodOrObject) &&
                        Commerce.ObjectExtensions.isFunction(converterMethodOrObject.computeValue)) {
                        converterMethod = converterMethodOrObject.computeValue.bind(converterMethodOrObject);
                    }
                    else if (Commerce.ObjectExtensions.isFunction(converterMethodOrObject)) {
                        converterMethod = converterMethodOrObject;
                    }
                    else {
                        converterMethod = undefined;
                    }
                    if (Commerce.ObjectExtensions.isFunction(converterMethod)) {
                        if (converterMethod.supportedForProcessing) {
                            var destinationData = {
                                convertedValue: "",
                                winBindingToken: { configurable: false, writable: false, enumerable: false, value: "innerText" }
                            };
                            var sourceProperties = [];
                            var destinationProperties = ["convertedValue"];
                            if (Commerce.ObjectExtensions.isNullOrUndefined(fieldValue)) {
                                if (!Commerce.ObjectExtensions.isNullOrUndefined(value.defaultValue)) {
                                    converterMethod(value.defaultValue, sourceProperties, destinationData, destinationProperties, null);
                                    convertedValue = destinationData.convertedValue;
                                }
                                else {
                                    convertedValue = "";
                                }
                            }
                            else {
                                converterMethod(fieldValue, sourceProperties, destinationData, destinationProperties, null);
                                convertedValue = destinationData.convertedValue;
                            }
                        }
                        else {
                            convertedValue = converterMethod(fieldValue);
                        }
                    }
                    else {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(fieldValue)) {
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(value.defaultValue)) {
                                convertedValue = value.defaultValue;
                            }
                            else {
                                convertedValue = "";
                            }
                        }
                        else {
                            convertedValue = fieldValue;
                        }
                    }
                    var type = value.type ? value.type : TextConverter.FieldType.text;
                    var binding = {};
                    binding[type] = convertedValue;
                    if (value.cssClassField) {
                        var cssAttributeName = "css";
                        binding[cssAttributeName] = data[value.cssClassField];
                    }
                    if (!value.cssClassField && type === TextConverter.FieldType.text) {
                        $(element).on("mouseover", function () {
                            var title = element.innerHTML;
                            var overflowed = element.scrollWidth > element.clientWidth;
                            element.setAttribute("title", overflowed ? title : Commerce.StringExtensions.EMPTY);
                        }).on("mouseout", "[title]", function () {
                            element.setAttribute("title", Commerce.StringExtensions.EMPTY);
                        });
                        element.innerHTML = convertedValue;
                        if (type === TextConverter.FieldType.text && value.ariaLabel === "true") {
                            if (Commerce.StringExtensions.isEmptyOrWhitespace(columnToBind)) {
                                columnToBind = Commerce.ViewModelAdapter.getResourceString(columnToBindResx);
                            }
                            var ariaLabel = String(convertedValue) || Commerce.StringExtensions.EMPTY;
                            if (Commerce.ObjectExtensions.isString(fieldValue) && !Commerce.NumberExtensions.isNullNaNOrZero(Number(fieldValue))) {
                                if (Number(fieldValue) < 0) {
                                    ariaLabel = fieldValue;
                                }
                            }
                            else if (!Commerce.StringExtensions.isNullOrWhitespace(ariaLabel) &&
                                ariaLabel.length > 2 &&
                                Commerce.StringExtensions.beginsWith(ariaLabel, "(") &&
                                Commerce.StringExtensions.endsWith(ariaLabel, ")")) {
                                ariaLabel = "-" + ariaLabel.substring(2, ariaLabel.length - 1);
                            }
                            ariaLabel = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_1831"), columnToBind, ariaLabel);
                            element.setAttribute("aria-label", ariaLabel);
                        }
                        return;
                    }
                    ko.applyBindingsToNode(element, binding);
                    return { controlsDescendantBindings: true };
                };
                return TextConverterBindingHandler;
            }());
            TextConverter.TextConverterBindingHandler = TextConverterBindingHandler;
        })(TextConverter = Controls.TextConverter || (Controls.TextConverter = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var ListView;
        (function (ListView) {
            var ListViewViewModel = (function () {
                function ListViewViewModel(itemContainersAndItems) {
                    this._itemContainersAndItems = Commerce.ObjectExtensions.isNullOrUndefined(itemContainersAndItems) ? [] : itemContainersAndItems;
                    this._isChangingItemSelectionCount = 0;
                }
                ListViewViewModel.prototype.unselectAllItems = function () {
                    if (Commerce.ArrayExtensions.hasElements(this._itemContainersAndItems)) {
                        this._isChangingItemSelectionCount++;
                        this._itemContainersAndItems.forEach(function (itemContainersAndItems) {
                            itemContainersAndItems.itemContainer.element.winControl.selected = false;
                        });
                        this._isChangingItemSelectionCount--;
                    }
                };
                ListViewViewModel.prototype.selectAllItems = function () {
                    if (Commerce.ArrayExtensions.hasElements(this._itemContainersAndItems)) {
                        this._isChangingItemSelectionCount++;
                        this._itemContainersAndItems.forEach(function (itemContainersAndItems) {
                            itemContainersAndItems.itemContainer.element.winControl.selected = true;
                        });
                        this._isChangingItemSelectionCount--;
                    }
                };
                ListViewViewModel.prototype.selectItems = function (items) {
                    items = Commerce.ObjectExtensions.isNullOrUndefined(items) ? [] : items;
                    if (Commerce.ArrayExtensions.hasElements(this._itemContainersAndItems)) {
                        this._isChangingItemSelectionCount++;
                        this._itemContainersAndItems.forEach(function (itemContainersAndItems) {
                            var itemsIndex = items.indexOf(itemContainersAndItems.item);
                            if (itemsIndex > -1) {
                                itemContainersAndItems.itemContainer.element.winControl.selected = true;
                            }
                            else {
                                itemContainersAndItems.itemContainer.element.winControl.selected = false;
                            }
                        });
                        this._isChangingItemSelectionCount--;
                    }
                };
                Object.defineProperty(ListViewViewModel.prototype, "isChangingItemSelection", {
                    get: function () {
                        return this._isChangingItemSelectionCount > 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                ListViewViewModel.prototype.dispose = function () {
                    Commerce.ObjectExtensions.disposeAllProperties(this);
                };
                return ListViewViewModel;
            }());
            ListView.ListViewViewModel = ListViewViewModel;
            function isExpandable(options) {
                return options.displayMode === Controls.ListView.DisplayMode.Expandable
                    || options.displayMode === Controls.ListView.DisplayMode.AlwaysExpanded
                    || options.displayMode === Controls.ListView.DisplayMode.AlwaysExpandedWithCheckbox;
            }
            ListView.isExpandable = isExpandable;
            function isAlwaysExpanded(options) {
                return options.displayMode === Controls.ListView.DisplayMode.AlwaysExpanded
                    || options.displayMode === Controls.ListView.DisplayMode.AlwaysExpandedWithCheckbox;
            }
            ListView.isAlwaysExpanded = isAlwaysExpanded;
            function showsCheckbox(options) {
                return options.displayMode === Controls.ListView.DisplayMode.AlwaysExpandedWithCheckbox
                    && options.selectionMode !== WinJS.UI.SelectionMode.none;
            }
            ListView.showsCheckbox = showsCheckbox;
        })(ListView = Controls.ListView || (Controls.ListView = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
ko.bindingHandlers.textConverter = new Commerce.Controls.TextConverter.TextConverterBindingHandler();
ko.bindingHandlers.listView = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var value = ko.utils.unwrapObservable(valueAccessor()) || {};
        var $element = $(element);
        var listViewControl;
        var forceLayoutDone = "forceLayoutDone";
        var updateAriaLabel = function () {
            value.columns.forEach(function (col) {
                $element.find("." + col.field).each(function (index, columnElement) {
                    var $columnElement = $(columnElement);
                    var columnAriaLabel = Commerce.StringExtensions.EMPTY;
                    if (Commerce.ArrayExtensions.hasElements(value.itemDataSource())
                        && value.itemDataSource().length > index
                        && !Commerce.ObjectExtensions.isNullOrUndefined(value.itemDataSource()[index])) {
                        if (!Commerce.NumberExtensions.isNullNaNOrZero(Number(value.itemDataSource()[index][col.field]))
                            && Number(value.itemDataSource()[index][col.field]) < 0) {
                            columnAriaLabel = col.title + " " + value.itemDataSource()[index][col.field];
                        }
                        else {
                            columnAriaLabel = col.title + " " + $columnElement.html();
                        }
                    }
                    $columnElement.attr("aria-label", columnAriaLabel);
                });
            });
        };
        value.emptyListViewTemplate = value.emptyListViewTemplate || "emptyListViewTemplate";
        value.columns = value.columns || [];
        value.rowTemplate = value.rowTemplate || Commerce.StringExtensions.EMPTY;
        value.headerRowTemplate = value.headerRowTemplate || Commerce.StringExtensions.EMPTY;
        value.strikethroughLabel = value.strikethroughLabel || Commerce.ViewModelAdapter.getResourceString("string_4473");
        value.templateViewModel = value.templateViewModel || {};
        if (Commerce.ArrayExtensions.hasElements(value.columns)
            || (!Commerce.StringExtensions.isNullOrWhitespace(value.rowTemplate)
                && !Commerce.StringExtensions.isNullOrWhitespace(value.headerRowTemplate))) {
            value.displayMode = value.displayMode || Commerce.Controls.ListView.DisplayMode.Simple;
            value.strikethroughEnabled = value.strikethroughEnabled === true;
            value.selectionMode = value.selectionMode || WinJS.UI.SelectionMode.multi;
            value.rowClass = value.rowClass || "";
            value.headerRowClass = value.headerRowClass || "";
            value.showColumnHeaderLabels = value.showColumnHeaderLabels || ko.observable(true);
            var useWinJSListView_1 = !Commerce.ObjectExtensions.isNullOrUndefined(value.useWinJSListView)
                ? value.useWinJSListView
                : (!Commerce.Controls.ListView.isExpandable(value)
                    && !value.strikethroughEnabled
                    && Commerce.StringExtensions.isNullOrWhitespace(value.colspanRowTemplate));
            if (Commerce.ArrayExtensions.hasElements(value.columns)) {
                value.columns.forEach(function (column) {
                    column.title = column.title || (Commerce.ViewModelAdapter.getResourceString(column.titleResx) || "");
                    column.converter = column.converter || "";
                    column.cssClass = column.cssClass || "";
                    if (Commerce.StringExtensions.isNullOrWhitespace(column.defaultValue)) {
                        if (!Commerce.StringExtensions.isNullOrWhitespace(column.defaultValueResx)) {
                            column.defaultValue = Commerce.ViewModelAdapter.getResourceString(column.defaultValueResx);
                        }
                        else {
                            column.defaultValue = "";
                        }
                    }
                    column.lines = column.lines || [];
                    column.type = column.type || Commerce.Controls.TextConverter.FieldType.text;
                    if (column.field === "$data" && useWinJSListView_1) {
                        column.field = "this";
                    }
                });
            }
            var toggleEmptyGridTemplate_1 = function (count) {
                var toggleEmptyGridFunctionAsAny = toggleEmptyGridTemplate_1;
                if (count < 1) {
                    toggleEmptyGridFunctionAsAny.isHidden = true;
                    var $tableContent = $element.find(".tableContent");
                    var $listViewEmptyContentPlaceholder = $element.find(".listViewEmptyContentPlaceholder");
                    $tableContent.hide();
                    $tableContent.removeData(forceLayoutDone);
                    $listViewEmptyContentPlaceholder.css("display", "flex");
                    ko.applyBindingsToNode($listViewEmptyContentPlaceholder[0], {
                        template: {
                            name: value.emptyListViewTemplate,
                            data: viewModel
                        }
                    });
                }
                else {
                    if (toggleEmptyGridFunctionAsAny.isHidden) {
                        var $listViewEmptyContentPlaceholder = $element.find(".listViewEmptyContentPlaceholder");
                        var $tableContent = $element.find(".tableContent");
                        $listViewEmptyContentPlaceholder.hide();
                        $tableContent.show();
                        toggleEmptyGridFunctionAsAny.isHidden = false;
                        var forceControlLayout = valueAccessor().forceControlLayout;
                        if (Commerce.ObjectExtensions.isNullOrUndefined(forceControlLayout)
                            && useWinJSListView_1
                            && $tableContent.data(forceLayoutDone) !== true) {
                            listViewControl.forceLayout();
                            $tableContent.data(forceLayoutDone, true);
                        }
                    }
                }
            };
            var setLineStateHandler_1 = function (listViewLineElement) {
                var hasStrikeThrough = listViewLineElement.find(".listViewLine").hasClass("strikethrough");
                if (hasStrikeThrough && listViewLineElement.attr("aria-selected") === "true") {
                    listViewLineElement.append("<div class='hidden'>" +
                        Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_4474"), Commerce.ViewModelAdapter.getResourceString("string_4472"), value.strikethroughLabel) + "</div>");
                }
                else if (hasStrikeThrough && listViewLineElement.attr("aria-selected") === "false") {
                    listViewLineElement.append("<div class='hidden'>" + value.strikethroughLabel + "</div>");
                }
                else if (!hasStrikeThrough && listViewLineElement.attr("aria-selected") === "true") {
                    listViewLineElement.append("<div class='hidden'>" + Commerce.ViewModelAdapter.getResourceString("string_4472") + "</div>");
                }
                else {
                    listViewLineElement.find("div.hidden").remove();
                }
                listViewLineElement.find(".win-selectioncheckmark:not([role])").each(function (index, currentElement) {
                    var $currentElement = $(currentElement);
                    $currentElement.attr("role", "checkbox");
                });
            };
            var ariaLabel_1;
            if (!Commerce.StringExtensions.isNullOrWhitespace(value.ariaLabelResx)) {
                ariaLabel_1 = Commerce.ViewModelAdapter.getResourceString(value.ariaLabelResx);
            }
            if (useWinJSListView_1) {
                $element.addClass("col");
                var afterRenderHandler = function (elementSet, bindingContext) {
                    $element.find("[data-bind]").each(function (index, el) {
                        $(el).removeAttr("data-bind");
                    });
                };
                ko.applyBindingsToNode(element, { template: { name: "listViewStandardGridTemplate", data: value, afterRender: afterRenderHandler } });
                $element.find(".listViewHeader").addClass(value.rowClass);
                $element.find(".listViewLine").addClass(value.headerRowClass);
                var $standardGridItemTemplate = $element.find(".standardGridItemTemplate");
                var standardGridItemTemplate = new WinJS.Binding.Template($standardGridItemTemplate[0]);
                var $listViewPlaceholder = $element.find(".listViewPlaceholder");
                var listViewControlOptions = {
                    itemTemplate: standardGridItemTemplate.element,
                    layout: {
                        type: WinJS.UI.ListLayout
                    }
                };
                listViewControl = new WinJS.UI.ListView($listViewPlaceholder[0], listViewControlOptions);
                var forceControlLayout = valueAccessor().forceControlLayout;
                if (forceControlLayout && ko.isObservable(forceControlLayout)) {
                    forceControlLayout(function () {
                        if (listViewControl._disposed !== true) {
                            listViewControl.forceLayout();
                        }
                    });
                }
                var loadingStateChanged = function (event) {
                    if (listViewControl.loadingState === "complete") {
                        updateAriaLabel();
                    }
                    if (listViewControl.loadingState === "complete" && value.emptyListViewTemplate) {
                        toggleEmptyGridTemplate_1(listViewControl.itemDataSource.list.length);
                    }
                    if (Commerce.Controls.ListView.showsCheckbox(value)) {
                        $element.find(".win-surface").addClass("win-selectionmode");
                    }
                };
                listViewControl.addEventListener("loadingstatechanged", WinJS.Utilities.markSupportedForProcessing(loadingStateChanged));
                var selectionChanged = function (event) {
                    if (listViewControl.selection.count() > 0) {
                        Commerce.Interaction.instance.triggerEvent(element, Commerce.InteractionEvents.ROWSELECTEDEVENT);
                    }
                };
                listViewControl.addEventListener("selectionchanged", WinJS.Utilities.markSupportedForProcessing(selectionChanged));
                var itemInvoked = function (event) {
                    Commerce.Interaction.instance.triggerEvent(element, Commerce.InteractionEvents.ROWCLICKEDEVENT);
                };
                listViewControl.addEventListener("iteminvoked", WinJS.Utilities.markSupportedForProcessing(itemInvoked));
                var winControlBindings_1 = {};
                Object.keys(value).forEach(function (i) {
                    winControlBindings_1[i] = value[i];
                });
                ko.applyBindingsToNode($listViewPlaceholder[0], { winControl: winControlBindings_1 }, viewModel);
                if (!Commerce.StringExtensions.isNullOrWhitespace(ariaLabel_1)) {
                    $listViewPlaceholder.attr("aria-label", ariaLabel_1);
                }
            }
            else {
                $element.addClass("standardGrid listViewHandler");
                var itemContainersAndItems_1 = [];
                if (!Commerce.ObjectExtensions.isNullOrUndefined(value.itemDataSource)
                    && Commerce.ObjectExtensions.isFunction(value.itemDataSource.subscribe)) {
                    var subscription_1 = value.itemDataSource.subscribe(function (newValue) {
                        if (!Commerce.ArrayExtensions.hasElements(newValue)) {
                            itemContainersAndItems_1.splice(0, itemContainersAndItems_1.length);
                        }
                    });
                    ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                        subscription_1.dispose();
                    });
                }
                var afterRenderHandler = function (elementSet, dataValue) {
                    var item = dataValue.item;
                    var itemValue = Commerce.ObjectExtensions.isNullOrUndefined(item) ? dataValue : item();
                    var selectedRowsKey = "selectedRows";
                    $element.data(selectedRowsKey, []);
                    var $elementSet = $(elementSet);
                    $elementSet.filter(".itemContainer").each(function (index, listViewLineElement) {
                        var $listViewLineElement = $(listViewLineElement);
                        var $row = $listViewLineElement.find(".row");
                        $row.addClass(value.rowClass);
                        var updateRowContent = function (newValue) {
                            ko.applyBindingsToDescendants(bindingContext.createChildContext({
                                dataRow: newValue,
                                templateViewModel: value.templateViewModel
                            }), $row[0]);
                        };
                        if (Commerce.StringExtensions.isNullOrWhitespace(value.rowTemplate)) {
                            var rowTemplateElement = document.getElementById("enhancedGridDynamicRowTemplate");
                            $row[0].innerHTML = rowTemplateElement.innerHTML;
                            ko.applyBindingsToNode($row[0], {
                                foreach: {
                                    data: value.columns.map(function (column) {
                                        return { dataRow: itemValue, listViewColumn: column };
                                    })
                                }
                            }, viewModel);
                        }
                        else {
                            var rowTemplateId = value.rowTemplate;
                            var rowTemplateElement = document.getElementById(rowTemplateId);
                            $row[0].innerHTML = rowTemplateElement.innerHTML;
                            updateRowContent(itemValue);
                        }
                        if (listViewLineElement.winControl) {
                            return;
                        }
                        var itemContainer = new WinJS.UI.ItemContainer(listViewLineElement);
                        var itemContainerIndex = itemContainersAndItems_1.push({ itemContainer: itemContainer, item: itemValue }) - 1;
                        var itemInvokeHandler = function (eventArgs) {
                            if (value.tapBehavior === "toggleSelect") {
                                itemContainer.selected = !itemContainer.selected;
                            }
                            if (value.iteminvoked) {
                                var dataValue_1 = ko.dataFor(eventArgs.currentTarget);
                                var itemValue_1 = Commerce.ObjectExtensions.isNullOrUndefined(dataValue_1.item) ? dataValue_1 : dataValue_1.item();
                                value.iteminvoked.call(viewModel, {
                                    currentTarget: eventArgs.currentTarget,
                                    data: itemValue_1
                                });
                            }
                            Commerce.Interaction.instance.triggerEvent(listViewLineElement, Commerce.InteractionEvents.ROWCLICKEDEVENT);
                        };
                        itemContainer.addEventListener("invoked", WinJS.Utilities.markSupportedForProcessing(itemInvokeHandler));
                        var selectionChangedHandler = function (eventArgs) {
                            var dataValue = ko.dataFor(eventArgs.currentTarget);
                            if (Commerce.ObjectExtensions.isNullOrUndefined(dataValue)) {
                                return;
                            }
                            var itemValue = Commerce.ObjectExtensions.isNullOrUndefined(dataValue.item) ? dataValue : dataValue.item();
                            var selectedRows = $element.data(selectedRowsKey);
                            var index = selectedRows.indexOf(itemValue);
                            if (index > -1) {
                                selectedRows.splice(index, 1);
                            }
                            if (itemContainer.selected) {
                                selectedRows.push(itemValue);
                                if (value.selectionMode === WinJS.UI.SelectionMode.single) {
                                    $element.find(".itemContainer").each(function (index, listViewLineElement) {
                                        var $listViewLineElement = $(listViewLineElement);
                                        if (listViewLineElement.winControl !== itemContainer) {
                                            listViewLineElement.winControl.selected = false;
                                        }
                                        setLineStateHandler_1($listViewLineElement);
                                    });
                                }
                                else if (value.selectionMode === WinJS.UI.SelectionMode.multi) {
                                    $element.find(".itemContainer").each(function (index, listViewLineElement) {
                                        var $listViewLineElement = $(listViewLineElement);
                                        if (listViewLineElement.winControl === itemContainer) {
                                            setLineStateHandler_1($listViewLineElement);
                                        }
                                    });
                                }
                            }
                            else {
                                $element.find(".itemContainer").each(function (index, listViewLineElement) {
                                    var $listViewLineElement = $(listViewLineElement);
                                    if (listViewLineElement.winControl === itemContainer) {
                                        setLineStateHandler_1($listViewLineElement);
                                    }
                                });
                            }
                            if (value.selectionchanged) {
                                var appBarElementId = value.selectionchanged.appBarId;
                                if (!Commerce.StringExtensions.isNullOrWhitespace(appBarElementId)) {
                                    var appBarControl = $(appBarElementId).get(0);
                                    if (!Commerce.ObjectExtensions.isNullOrUndefined(appBarControl)
                                        && !Commerce.ObjectExtensions.isNullOrUndefined(appBarControl.winControl)) {
                                        if (selectedRows.length > 0 && Commerce.ObjectExtensions.isFunction(appBarControl.winControl.show)) {
                                            appBarControl.winControl.show();
                                        }
                                        else if (Commerce.ObjectExtensions.isFunction(appBarControl.winControl.hide)) {
                                            appBarControl.winControl.hide();
                                        }
                                    }
                                }
                                value.selectionchanged.eventHandlerCallBack.call(viewModel, [].concat(selectedRows));
                            }
                            if (selectedRows.length > 0) {
                                Commerce.Interaction.instance.triggerEvent(listViewLineElement, Commerce.InteractionEvents.ROWSELECTEDEVENT);
                            }
                        };
                        itemContainer.addEventListener("selectionchanged", WinJS.Utilities.markSupportedForProcessing(selectionChangedHandler));
                        var updateSecondaryTextContext = function (newValue) {
                            var $colspanRow = $listViewLineElement.find(".colspanRow");
                            var expand = false;
                            var templateId = "";
                            if (!Commerce.StringExtensions.isNullOrWhitespace(value.colspanRowTemplate)) {
                                templateId = value.colspanRowTemplate;
                            }
                            if (!Commerce.StringExtensions.isNullOrWhitespace(value.rowExpandedTemplateId)
                                && $colspanRow.closest(".itemContainer").hasClass("expanded")) {
                                templateId = value.rowExpandedTemplateId;
                                expand = true;
                            }
                            if (!Commerce.StringExtensions.isNullOrWhitespace(templateId)) {
                                ko.applyBindingsToNode($colspanRow[0], {
                                    template: {
                                        name: templateId,
                                        data: newValue
                                    }
                                }, viewModel);
                            }
                            expand ? $colspanRow.show() : $colspanRow.hide();
                        };
                        $listViewLineElement.find(".expandButton").click(function (eventArgs) {
                            var $expandButton = $(eventArgs.currentTarget);
                            var $itemContainer = $expandButton.closest(".itemContainer");
                            $itemContainer.toggleClass("expanded");
                            var dataValue = ko.dataFor(eventArgs.currentTarget);
                            var itemValue = Commerce.ObjectExtensions.isNullOrUndefined(dataValue.item) ? dataValue : dataValue.item();
                            if ($itemContainer.hasClass("expanded")) {
                                $expandButton.removeClass("iconChevronDown icon-14x14").addClass("iconChevronUp icon-14x14");
                                $expandButton.attr("aria-expanded", "true");
                            }
                            else {
                                $expandButton.removeClass("iconChevronUp icon-14x14").addClass("iconChevronDown icon-14x14");
                                $expandButton.attr("aria-expanded", "false");
                            }
                            updateSecondaryTextContext(itemValue);
                        });
                        if (Commerce.Controls.ListView.isAlwaysExpanded(value)) {
                            $listViewLineElement.find(".colspanRow").closest(".itemContainer").addClass("expanded");
                        }
                        updateSecondaryTextContext(itemValue);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(item)) {
                            var subscription_2 = item.subscribe(function (newValue) {
                                var oldValue = itemContainersAndItems_1[itemContainerIndex].item;
                                itemContainersAndItems_1[itemContainerIndex].item = newValue;
                                var selectedRows = $element.data(selectedRowsKey);
                                var index = selectedRows.indexOf(oldValue);
                                if (index > -1) {
                                    selectedRows[index] = newValue;
                                }
                                updateRowContent(newValue);
                                updateSecondaryTextContext(newValue);
                            });
                            ko.utils.domNodeDisposal.addDisposeCallback(listViewLineElement, function () {
                                subscription_2.dispose();
                            });
                        }
                    });
                };
                value.dataRowsAfterRender = afterRenderHandler;
                ko.applyBindingsToNode(element, {
                    template: {
                        name: "listViewEnhancedGridTemplate",
                        data: value,
                        afterRender: function () {
                            if (value.headerRowClass) {
                                $element.find(".listViewHeader").addClass(value.headerRowClass);
                            }
                            var scrollDiv = $element.find(".tableContent");
                            if (value.emptyListViewTemplate) {
                                if (value.itemDataSource) {
                                    if (value.itemDataSource.subscribe) {
                                        var subscription_3 = value.itemDataSource.subscribe(function (newValue) {
                                            toggleEmptyGridTemplate_1(newValue.length);
                                            if (value.scrollToBottom) {
                                                scrollDiv.scrollTop(scrollDiv[0].scrollHeight);
                                            }
                                        });
                                        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                                            subscription_3.dispose();
                                        });
                                        toggleEmptyGridTemplate_1(value.itemDataSource().length);
                                    }
                                    else {
                                        toggleEmptyGridTemplate_1(value.itemDataSource.length);
                                    }
                                }
                                else {
                                    toggleEmptyGridTemplate_1(0);
                                }
                            }
                            if (!Commerce.StringExtensions.isNullOrWhitespace(ariaLabel_1)) {
                                scrollDiv.attr("aria-label", ariaLabel_1);
                            }
                        }
                    }
                }, this);
                var listViewViewModel = new Commerce.Controls.ListView.ListViewViewModel(itemContainersAndItems_1);
                element.listViewViewModel = listViewViewModel;
                return { controlsDescendantBindings: true };
            }
        }
        return { controlsDescendantBindings: false };
    }
};
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var NumPad;
        (function (NumPad) {
            "use strict";
            var NumPadBindingHandler = (function () {
                function NumPadBindingHandler() {
                    this.init = this.init.bind(this);
                    this.update = this.update.bind(this);
                }
                NumPadBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    ko.applyBindingsToNode(element, { template: this.templateId });
                    var $element = $(element);
                    var options = ko.utils.unwrapObservable(valueAccessor() || Object.create(null));
                    if (Commerce.ObjectExtensions.isNullOrUndefined(options.inputDataBinding) && Commerce.ObjectExtensions.isNullOrUndefined(options.labelDataBinding)) {
                        throw new Error("Atleast one of the inputDataBinding and labelDataBinding parameters has to be specified for numpad control.");
                    }
                    var state = this.createState(element, options, viewModel);
                    $element.addClass("numpad flex stretch");
                    this.setNumpadStateOfElement($element, state);
                    this._initNumPadControlInput(options, state);
                    this._initNumPadControlLabel(options, $element);
                    this._attachToButtonEvent($element);
                    this._attachToKeyboardEvent($element, state.inputElement);
                    this._attachToNumpadInputSource($element, options.numPadInputSource);
                    this.attachClearMarkToTarget($element, state.inputElement);
                    var mutationObserver = new MutationObserver(this._updateNumpadInputAriaLabel.bind(this));
                    this._initializeObserver(mutationObserver, state.inputElement);
                    this._updateInputElementState(state, false);
                    this._updateValues(state);
                    ko.utils.domNodeDisposal.addDisposeCallback($element.get(0), function () {
                        mutationObserver.disconnect();
                    });
                    return { controlsDescendantBindings: true };
                };
                NumPadBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var $element = $(element);
                    var state = this.getNumpadStateOfElement($element);
                    this._updateValues(state);
                    this._updateNumPadDecimalButtonVisibility($element, state);
                };
                NumPadBindingHandler.prototype.getNumPadLabel = function ($numPad) {
                    return $numPad.find(NumPadBindingHandler.NUMPAD_LABEL_CLASS);
                };
                NumPadBindingHandler.prototype.getNumpadStateOfElement = function ($element) {
                    return $element.data(NumPadBindingHandler.STATE_KEY_NAME);
                };
                NumPadBindingHandler.prototype.setNumpadStateOfElement = function ($element, value) {
                    $element.data(NumPadBindingHandler.STATE_KEY_NAME, value);
                };
                Object.defineProperty(NumPadBindingHandler.prototype, "templateId", {
                    get: function () {
                        throw "Abstract";
                    },
                    enumerable: true,
                    configurable: true
                });
                NumPadBindingHandler.prototype.getAllowedInputHandlers = function (options) {
                    return [
                        NumPad.InputHandlers.clear,
                        NumPad.InputHandlers.backspace,
                        NumPad.InputHandlers.enter,
                        NumPad.InputHandlers.decimalSeparator
                    ];
                };
                NumPadBindingHandler.prototype.createState = function (numpad, options, callerContext) {
                    return new NumPad.NumPadState(numpad, options, callerContext);
                };
                NumPadBindingHandler.prototype.updateState = function (state) {
                    var parsedValue = this._parse(state, state.textContent);
                    if (!Commerce.StringExtensions.isNullOrWhitespace(state.textContent) && Commerce.StringExtensions.isNullOrWhitespace(parsedValue)) {
                        state.textContent = state.oldTextContent;
                        parsedValue = this._parse(state, state.textContent);
                    }
                    state.oldTextContent = state.textContent;
                    var value = state.options.value;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(value)) {
                        if (typeof value === "string") {
                            value = parsedValue;
                        }
                        else {
                            value(parsedValue);
                        }
                    }
                    state.value = parsedValue;
                    this._updateInputElementState(state);
                };
                NumPadBindingHandler.prototype.handleButtonEvent = function ($element, key) {
                    var state = this.getNumpadStateOfElement($element);
                    this._handleKey(state, key, null, NumPad.KeySource.UI);
                };
                NumPadBindingHandler.prototype.attachClearMarkToTarget = function ($numpad, target, setFocusOnTarget) {
                    var _this = this;
                    if (setFocusOnTarget === void 0) { setFocusOnTarget = false; }
                    if (Commerce.ObjectExtensions.isNullOrUndefined(target)) {
                        return;
                    }
                    ko.applyBindingsToNode(target, {
                        clearMark: {
                            fontSize: "24px",
                            handler: function () {
                                if (setFocusOnTarget) {
                                    target.focus();
                                    Commerce.Host.instance.timers.setImmediate(function () { return _this.handleButtonEvent($numpad, "clear"); });
                                }
                                else {
                                    _this.handleButtonEvent($numpad, "clear");
                                }
                            }
                        }
                    });
                };
                NumPadBindingHandler.prototype._getUniqueInputHandlers = function (options) {
                    return this.getAllowedInputHandlers(options).filter(function (value, index, array) {
                        return index === array.indexOf(value);
                    });
                };
                NumPadBindingHandler.prototype._initializeObserver = function (mutationObserver, inputElement) {
                    mutationObserver.observe(inputElement, {
                        attributes: true,
                        attributeFilter: ["value", "readonly", "aria-label", "style"]
                    });
                };
                NumPadBindingHandler.prototype._updateNumpadInputAriaLabel = function (mutationRecordsList, mutationObserver) {
                    var _this = this;
                    mutationRecordsList.forEach(function (mutationRecord) {
                        var inputElement = mutationRecord.target;
                        if (Commerce.ObjectExtensions.isNullOrUndefined(inputElement)) {
                            return;
                        }
                        var ariaLabel = inputElement.getAttribute("aria-label");
                        if (Commerce.StringExtensions.isNullOrWhitespace(ariaLabel)) {
                            return;
                        }
                        var editingTextString = Commerce.ViewModelAdapter.getResourceString("string_4398");
                        var indexOfEditing = ariaLabel.indexOf(editingTextString);
                        if (indexOfEditing >= 0) {
                            ariaLabel = ariaLabel.substr(0, indexOfEditing);
                        }
                        if (inputElement.readOnly) {
                            inputElement.setAttribute("role", "presentation");
                            ariaLabel = ariaLabel + editingTextString + inputElement.value;
                        }
                        else {
                            inputElement.setAttribute("role", "textbox");
                        }
                        mutationObserver.disconnect();
                        inputElement.setAttribute("aria-label", ariaLabel);
                        _this._initializeObserver(mutationObserver, inputElement);
                    });
                };
                NumPadBindingHandler.prototype._initNumPadControlInput = function (options, state) {
                    var inputDataBinding = options.inputDataBinding;
                    if (Commerce.ObjectExtensions.isNullOrUndefined(inputDataBinding)) {
                        inputDataBinding = {};
                    }
                    if (Commerce.ObjectExtensions.isNullOrUndefined(inputDataBinding.resx) && !Commerce.ObjectExtensions.isNullOrUndefined(options.labelDataBinding)) {
                        Object.keys(options.labelDataBinding).forEach(function (memberName) {
                            switch (memberName) {
                                case "resx":
                                    inputDataBinding.resx = { ariaLabel: options.labelDataBinding[memberName].textContent };
                                    break;
                                case "text":
                                    inputDataBinding.resx = { ariaLabel: options.labelDataBinding[memberName] };
                                    break;
                            }
                        });
                    }
                    if (Commerce.ObjectExtensions.isNullOrUndefined(inputDataBinding.resx)) {
                        return;
                    }
                    ko.applyBindingsToNode(state.inputElement, inputDataBinding);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(options.autoFocusOnInput) && options.autoFocusOnInput) {
                        setTimeout(function () {
                            state.inputElement.focus();
                        }, 0);
                    }
                };
                NumPadBindingHandler.prototype._initNumPadControlLabel = function (options, $numPad) {
                    var labelDataBinding = options.labelDataBinding;
                    if (Commerce.ObjectExtensions.isNullOrUndefined(labelDataBinding)) {
                        return;
                    }
                    var $label = this.getNumPadLabel($numPad);
                    ko.applyBindingsToNode($label.get(0), labelDataBinding);
                };
                NumPadBindingHandler.prototype._updateNumPadDecimalButtonVisibility = function ($numPad, state) {
                    if (state.getDecimalPrecision() !== 0) {
                        $numPad.find(".decimal-button-container").show();
                    }
                    else {
                        $numPad.find(".decimal-button-container").hide();
                    }
                };
                NumPadBindingHandler.prototype._updateValues = function (state) {
                    var newValue = ko.utils.unwrapObservable(state.options.value);
                    if (Commerce.ObjectExtensions.isNullOrUndefined(newValue)) {
                        newValue = Commerce.StringExtensions.EMPTY;
                    }
                    var parsedValue = this._parse(state, newValue);
                    var parsedTextContent = this._parse(state, state.textContent);
                    if ((parsedTextContent !== parsedValue) || (Commerce.StringExtensions.isEmpty(parsedValue))) {
                        state.value = parsedValue;
                        state.oldTextContent = state.textContent = Commerce.StringExtensions.EMPTY;
                        this._updateInputElementState(state);
                    }
                };
                NumPadBindingHandler.prototype._attachToButtonEvent = function ($element) {
                    var _this = this;
                    $element.find("button").on("mousedown keydown", function (event) {
                        if ((event.type === "keydown") && (!_this._isEnterOrWhitespace(event.originalEvent))) {
                            return;
                        }
                        var state = _this.getNumpadStateOfElement($element);
                        if (document.activeElement === state.inputElement) {
                            state.ignoreInputElementBlurOnce = true;
                        }
                        var key = _this._getButtonKeyFromEvent(event);
                        _this.handleButtonEvent($element, key);
                        _this._focusInputOnAbc($element, key);
                    });
                };
                NumPadBindingHandler.prototype._focusInputOnAbc = function ($numpad, key) {
                    if (key === "abc") {
                        var state_2 = this.getNumpadStateOfElement($numpad);
                        if (!state_2.inputElement.readOnly) {
                            setTimeout(function () {
                                state_2.inputElement.focus();
                            }, 0);
                        }
                    }
                };
                NumPadBindingHandler.prototype._getButtonKeyFromEvent = function (event) {
                    var $buttonElement = $(event.target);
                    if ($buttonElement.is(":button") === false) {
                        $buttonElement = $buttonElement.closest(":button");
                    }
                    return $buttonElement.val();
                };
                NumPadBindingHandler.prototype._attachToKeyboardEvent = function ($element, textInput) {
                    var _this = this;
                    if (Commerce.ObjectExtensions.isNullOrUndefined(textInput)) {
                        return;
                    }
                    var $textInput = $(textInput);
                    $textInput.keydown(function (event) {
                        _this._handleKeyboardEvent($element, event);
                    });
                    $textInput.keypress(function (event) {
                        _this._handleKeyboardEvent($element, event);
                    });
                    $textInput.bind("input", function (event) {
                        var state = _this.getNumpadStateOfElement($element);
                        state.textContent = $(event.target).val();
                        _this.updateState(state);
                        event.preventDefault();
                        event.stopPropagation();
                    });
                    $textInput.blur(function (event) {
                        var state = _this.getNumpadStateOfElement($element);
                        if (!state.alwaysAllowTargetInputEnabled) {
                            if (state.ignoreInputElementBlurOnce) {
                                state.ignoreInputElementBlurOnce = false;
                                return;
                            }
                            state.inputElement.readOnly = true;
                            _this._updateInputElementState(state);
                        }
                    });
                };
                NumPadBindingHandler.prototype._attachToNumpadInputSource = function ($element, subscriber) {
                    var _this = this;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(subscriber)) {
                        var listener_1 = function (event) {
                            if (!_this._ignoreNumpadInputSourceEvent(event, $element)) {
                                return _this._handleKeyboardEvent($element, event);
                            }
                            return false;
                        };
                        subscriber.subscribe(listener_1);
                        ko.utils.domNodeDisposal.addDisposeCallback($element.get(0), function () {
                            subscriber.unsubscribe(listener_1);
                        });
                    }
                };
                NumPadBindingHandler.prototype._handleKeyboardEvent = function ($element, event) {
                    var state = this.getNumpadStateOfElement($element);
                    var handled = false;
                    if (!this._ignoreKeyboardEvent(event, state)) {
                        handled = this._handleKey(state, null, event.which, NumPad.KeySource.KEYBOARD);
                    }
                    if (handled) {
                        event.preventDefault();
                        event.stopImmediatePropagation();
                    }
                    return handled;
                };
                NumPadBindingHandler.prototype._handleKey = function (state, uiCode, keyboardCode, keySource) {
                    var handledBy = null;
                    var handlers = this._getUniqueInputHandlers(state.options);
                    var handled = handlers.some(function (handler) {
                        var result = handler(state, uiCode, keyboardCode, keySource);
                        if (result) {
                            handledBy = handler;
                        }
                        return result;
                    });
                    if (handled && (handledBy !== NumPad.InputHandlers.enter)) {
                        this.updateState(state);
                    }
                    return handled;
                };
                NumPadBindingHandler.prototype._updateInputElementState = function (state, adjustFont) {
                    if (adjustFont === void 0) { adjustFont = true; }
                    if (Commerce.ObjectExtensions.isNullOrUndefined(state.inputElement)) {
                        return;
                    }
                    this._adjustPlaceholder(state.inputElement);
                    var targetReadonlyClass = "numpad-control-input-readonly";
                    if (state.inputElement.readOnly) {
                        state.inputElement.classList.add(targetReadonlyClass);
                    }
                    else {
                        state.inputElement.classList.remove(targetReadonlyClass);
                    }
                    if (adjustFont) {
                        this._adjustFontSizeToContainer(state.inputElement);
                    }
                    state.updateClearMark();
                };
                NumPadBindingHandler.prototype._adjustPlaceholder = function (element) {
                    var targetPlaceholderClass = "numpad-control-input-placeholder";
                    var targetClassList = element.classList;
                    if (element.clientWidth > 0) {
                        element.style.fontSize = null;
                    }
                    if (Commerce.StringExtensions.isNullOrWhitespace(element.value)) {
                        if (Commerce.StringExtensions.isNullOrWhitespace(element.dataset[NumPadBindingHandler.ORIGINAL_FONT_SIZE_KEY])) {
                            var computedStyle = window.getComputedStyle(element, null);
                            element.dataset[NumPadBindingHandler.ORIGINAL_FONT_SIZE_KEY] = computedStyle.fontSize;
                        }
                        targetClassList.add(targetPlaceholderClass);
                    }
                    else {
                        targetClassList.remove(targetPlaceholderClass);
                    }
                };
                NumPadBindingHandler.prototype._adjustFontSizeToContainer = function (element) {
                    if (element.clientWidth <= 0) {
                        return;
                    }
                    var MIN_FONT_SIZE = 6;
                    var measuringDiv = document.createElement("div");
                    var measuringDivStyle = measuringDiv.style;
                    measuringDivStyle.position = "absolute";
                    measuringDivStyle.top = "0";
                    measuringDivStyle.left = "0";
                    measuringDivStyle.width = "auto";
                    measuringDivStyle.height = "auto";
                    measuringDivStyle.display = "block";
                    measuringDivStyle.visibility = "hidden";
                    var computedStyle = window.getComputedStyle(element, null);
                    measuringDivStyle.font = computedStyle.font;
                    measuringDivStyle.fontFamily = computedStyle.fontFamily;
                    measuringDivStyle.fontStyle = computedStyle.fontStyle;
                    measuringDivStyle.fontSize = computedStyle.fontSize;
                    measuringDivStyle.fontWeight = computedStyle.fontWeight;
                    measuringDivStyle.fontVariant = computedStyle.fontVariant;
                    measuringDivStyle.fontFeatureSettings = computedStyle.fontFeatureSettings;
                    measuringDivStyle.fontStretch = computedStyle.fontStretch;
                    measuringDivStyle.whiteSpace = computedStyle.whiteSpace;
                    measuringDivStyle.padding = computedStyle.padding;
                    measuringDivStyle.paddingBottom = computedStyle.paddingBottom;
                    measuringDivStyle.paddingTop = computedStyle.paddingTop;
                    measuringDivStyle.paddingLeft = computedStyle.paddingLeft;
                    measuringDivStyle.paddingRight = computedStyle.paddingRight;
                    var originalFontSize = parseInt(element.dataset[NumPadBindingHandler.ORIGINAL_FONT_SIZE_KEY], 10);
                    if (Commerce.StringExtensions.isNullOrWhitespace(element.value)) {
                        measuringDiv.innerText = element.placeholder;
                        originalFontSize = parseInt(computedStyle.fontSize, 10);
                    }
                    else {
                        measuringDiv.innerText = element.value;
                    }
                    document.body.appendChild(measuringDiv);
                    while (measuringDiv.clientWidth < element.clientWidth) {
                        var fontSize = parseInt(measuringDivStyle.fontSize, 10);
                        if (fontSize >= originalFontSize) {
                            break;
                        }
                        measuringDivStyle.fontSize = fontSize + 1 + "px";
                    }
                    while ((measuringDiv.clientWidth > element.clientWidth) && (measuringDiv.clientWidth > 0)) {
                        var fontSize = parseInt(measuringDivStyle.fontSize, 10);
                        if (fontSize <= MIN_FONT_SIZE) {
                            break;
                        }
                        measuringDivStyle.fontSize = fontSize - 1 + "px";
                    }
                    if (measuringDiv.clientWidth > 0) {
                        element.style.fontSize = measuringDivStyle.fontSize;
                    }
                    document.body.removeChild(measuringDiv);
                };
                NumPadBindingHandler.prototype._parse = function (state, valueToParse) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(state.options.parser)) {
                        return valueToParse;
                    }
                    return state.options.parser.parse(valueToParse, { decimalPrecision: state.getDecimalPrecision() });
                };
                NumPadBindingHandler.prototype._ignoreKeyboardEvent = function (event, state) {
                    var keyCode = event.keyCode;
                    var isEnter = keyCode === 13;
                    var ignore = false;
                    switch (event.type) {
                        case "keydown":
                            var specialKeysOnKeydownExceptBackspace = (event.charCode === 0) && (keyCode !== 8) && !isEnter;
                            ignore = ignore || specialKeysOnKeydownExceptBackspace;
                            break;
                        case "keypress":
                            ignore = ignore || Commerce.ObjectExtensions.isUndefined(keyCode);
                            ignore = ignore || isEnter;
                            break;
                    }
                    ignore = ignore || (!state.inputElement.readOnly && !isEnter && !state.alwaysAllowTargetInputEnabled);
                    return ignore;
                };
                NumPadBindingHandler.prototype._isInputField = function (event) {
                    return Commerce.Peripherals.KeyboardEventAggregator.isInputField(event.target);
                };
                NumPadBindingHandler.prototype._isButton = function (event) {
                    var element = event.srcElement;
                    if (Commerce.ObjectExtensions.isNullOrUndefined(element)) {
                        return false;
                    }
                    return (element.tagName === "BUTTON");
                };
                NumPadBindingHandler.prototype._isActiveHyperlink = function (event) {
                    var anchor = event.srcElement;
                    if (Commerce.ObjectExtensions.isNullOrUndefined(anchor)) {
                        return false;
                    }
                    return (anchor.tagName === "A") && (!Commerce.StringExtensions.isNullOrWhitespace(anchor.href));
                };
                NumPadBindingHandler.prototype._isCheckbox = function (event) {
                    var input = event.srcElement;
                    if (Commerce.ObjectExtensions.isNullOrUndefined(input)) {
                        return false;
                    }
                    return (input.tagName === "INPUT" && input.type === "checkbox");
                };
                NumPadBindingHandler.prototype._isEnter = function (event) {
                    return event.which === 13;
                };
                NumPadBindingHandler.prototype._isWhitespace = function (event) {
                    return event.which === 32;
                };
                NumPadBindingHandler.prototype._isEnterOrWhitespace = function (event) {
                    return this._isEnter(event) || this._isWhitespace(event);
                };
                NumPadBindingHandler.prototype._isWinElementInFocus = function (event) {
                    var $srcElement = $(event.srcElement);
                    if ($srcElement.hasClass("win-itemcontainer") && ($srcElement.children(".win-itembox.win-focused").length > 0)) {
                        return true;
                    }
                    if ($srcElement.hasClass("win-item") && ($srcElement.closest(".win-itembox.win-focused").length > 0)) {
                        return true;
                    }
                    return false;
                };
                NumPadBindingHandler.prototype._isMarkedForIgnore = function (event) {
                    var $srcElement = $(event.srcElement);
                    var data = $srcElement.data("retail-numpad-ignore-keys");
                    data = Commerce.StringExtensions.isNullOrWhitespace(data) ? data : data.toLowerCase();
                    switch (data) {
                        case "all":
                            return true;
                        case "enter":
                            return this._isEnter(event);
                        case "whitespace":
                            return this._isWhitespace(event);
                        case "enterorwhitespace":
                            return this._isEnterOrWhitespace(event);
                        default:
                            return false;
                    }
                };
                NumPadBindingHandler.prototype._isElementHidden = function (element) {
                    var isHidden = true;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(element)) {
                        var $element = $(element);
                        isHidden = !$element.is(":visible") || ($element.css("visibility") === "hidden");
                    }
                    return isHidden;
                };
                NumPadBindingHandler.prototype._ignoreNumpadInputSourceEvent = function (event, $numpad) {
                    var state = this.getNumpadStateOfElement($numpad);
                    return (!state.inputElement.readOnly && !state.alwaysAllowTargetInputEnabled)
                        || (this._isElementHidden(state.numPadButtons) && this._isElementHidden(state.inputElement))
                        || this._isInputField(event)
                        || (this._isButton(event) && this._isEnterOrWhitespace(event))
                        || (this._isCheckbox(event) && this._isWhitespace(event))
                        || (this._isWinElementInFocus(event) && this._isEnterOrWhitespace(event))
                        || (this._isActiveHyperlink(event) && this._isEnter(event))
                        || this._isMarkedForIgnore(event);
                };
                NumPadBindingHandler.STATE_KEY_NAME = "BaseNumPadKnockoutHandlerState";
                NumPadBindingHandler.NUMPAD_LABEL_CLASS = ".numpad-control-label";
                NumPadBindingHandler.ORIGINAL_FONT_SIZE_KEY = "axRetailOriginalFontSize";
                return NumPadBindingHandler;
            }());
            NumPad.NumPadBindingHandler = NumPadBindingHandler;
        })(NumPad = Controls.NumPad || (Controls.NumPad = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var NumPad;
        (function (NumPad) {
            "use strict";
            var AlphanumericNumPadBindingHandler = (function (_super) {
                __extends(AlphanumericNumPadBindingHandler, _super);
                function AlphanumericNumPadBindingHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                AlphanumericNumPadBindingHandler.prototype.getAllowedInputHandlers = function (options) {
                    return [
                        NumPad.InputHandlers.clear,
                        NumPad.InputHandlers.abc
                    ]
                        .concat(_super.prototype.getAllowedInputHandlers.call(this, options))
                        .concat([NumPad.InputHandlers.anyText]);
                };
                Object.defineProperty(AlphanumericNumPadBindingHandler.prototype, "templateId", {
                    get: function () {
                        return "numberpad-alphanumeric-template";
                    },
                    enumerable: true,
                    configurable: true
                });
                return AlphanumericNumPadBindingHandler;
            }(NumPad.NumPadBindingHandler));
            NumPad.AlphanumericNumPadBindingHandler = AlphanumericNumPadBindingHandler;
        })(NumPad = Controls.NumPad || (Controls.NumPad = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var NumPad;
        (function (NumPad) {
            "use strict";
            var CurrencyNumPadBindingHandler = (function (_super) {
                __extends(CurrencyNumPadBindingHandler, _super);
                function CurrencyNumPadBindingHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                CurrencyNumPadBindingHandler.prototype.getAllowedInputHandlers = function (options) {
                    return _super.prototype.getAllowedInputHandlers.call(this, options).concat([
                        NumPad.InputHandlers.toggleMinus,
                        NumPad.InputHandlers.numbers
                    ]);
                };
                CurrencyNumPadBindingHandler.prototype.createState = function (element, options, callerContext) {
                    options.parser = options.parser || new Commerce.DecimalNotRequiredParser();
                    options.decimalPrecision = options.decimalPrecision
                        || Commerce.NumberExtensions.getDecimalPrecision(Commerce.ApplicationContext.Instance.deviceConfiguration.Currency);
                    return _super.prototype.createState.call(this, element, options, callerContext);
                };
                Object.defineProperty(CurrencyNumPadBindingHandler.prototype, "templateId", {
                    get: function () {
                        return "numberpad-currency-template";
                    },
                    enumerable: true,
                    configurable: true
                });
                return CurrencyNumPadBindingHandler;
            }(NumPad.NumPadBindingHandler));
            NumPad.CurrencyNumPadBindingHandler = CurrencyNumPadBindingHandler;
        })(NumPad = Controls.NumPad || (Controls.NumPad = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var NumPad;
        (function (NumPad) {
            "use strict";
            var NumericNumPadBindingHandler = (function (_super) {
                __extends(NumericNumPadBindingHandler, _super);
                function NumericNumPadBindingHandler() {
                    return _super.call(this) || this;
                }
                Object.defineProperty(NumericNumPadBindingHandler.prototype, "templateId", {
                    get: function () {
                        return "numberpad-numeric-template";
                    },
                    enumerable: true,
                    configurable: true
                });
                NumericNumPadBindingHandler.prototype.getAllowedInputHandlers = function (options) {
                    return _super.prototype.getAllowedInputHandlers.call(this, options).concat([NumPad.InputHandlers.numbers]);
                };
                return NumericNumPadBindingHandler;
            }(NumPad.NumPadBindingHandler));
            NumPad.NumericNumPadBindingHandler = NumericNumPadBindingHandler;
        })(NumPad = Controls.NumPad || (Controls.NumPad = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var NumPad;
        (function (NumPad) {
            "use strict";
            var NumPadState = (function () {
                function NumPadState(element, options, callerContext) {
                    this.inputElement = null;
                    this.numPadButtons = null;
                    this.options = options || Object.create(null);
                    this._element = element;
                    this._callerContext = callerContext;
                    this.initializeState();
                }
                NumPadState.setTriggerEventMethod = function (triggerEventMethod) {
                    NumPadState._triggerEvent = triggerEventMethod;
                };
                NumPadState.addOnEnterListener = function (listener) {
                    if (!Commerce.ObjectExtensions.isFunction(listener)) {
                        throw new Error("NumPadState.setOnEnterListner - listener must be a function.");
                    }
                    NumPadState._onEnterListeners.push(listener);
                };
                Object.defineProperty(NumPadState.prototype, "element", {
                    get: function () {
                        return this._element;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NumPadState.prototype, "value", {
                    get: function () {
                        if (this.inputElement) {
                            return this.inputElement.value = this._value;
                        }
                        return this._value;
                    },
                    set: function (newValue) {
                        this._value = newValue;
                        if (this.inputElement) {
                            var oldValue = this.inputElement.value;
                            if (oldValue !== newValue) {
                                this.inputElement.value = newValue;
                            }
                            this.updateClearMark();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                NumPadState.prototype.updateClearMark = function () {
                    $(this.inputElement).trigger("ax-retail-clearMark-toggle");
                };
                NumPadState.prototype.getDecimalPrecision = function () {
                    var decimalPrecision = ko.utils.unwrapObservable(this.options.decimalPrecision);
                    return Commerce.ObjectExtensions.isNumber(decimalPrecision) ? decimalPrecision : Number.MAX_VALUE;
                };
                NumPadState.prototype.getResult = function () {
                    return { value: this.value };
                };
                NumPadState.prototype.clearState = function () {
                    this.oldTextContent = this.textContent = Commerce.StringExtensions.EMPTY;
                };
                NumPadState.prototype.initializeState = function (clearOnEnter) {
                    var _this = this;
                    if (clearOnEnter === void 0) { clearOnEnter = false; }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this.options.onEnter)) {
                        var originalOnEnter_1 = this.options.onEnter;
                        this.options.onEnter = function (result) {
                            originalOnEnter_1.call(_this._callerContext, result);
                            if (clearOnEnter) {
                                _this.clearState();
                            }
                            if (Commerce.ArrayExtensions.hasElements(NumPadState._onEnterListeners)) {
                                NumPadState._onEnterListeners.forEach(function (listener) {
                                    listener(_this.element, result.value);
                                });
                            }
                            NumPadState._triggerEvent(_this.element, NumPad.InteractionEvents.NumpadEnter);
                        };
                    }
                    this.numPadButtons = $(this._element).find(NumPadState.NUMPAD_CONTROL_BUTTONS_CLASS)[0];
                    this.inputElement = $(this._element).find(".numpad-control-input")[0];
                    this.ignoreInputElementBlurOnce = false;
                    this.inputElement.readOnly = true;
                    this.alwaysAllowTargetInputEnabled = false;
                    this.initializeContent(this.inputElement.value);
                };
                NumPadState.prototype.initializeContent = function (content) {
                    if (Commerce.StringExtensions.isNullOrWhitespace(content)) {
                        content = Commerce.StringExtensions.EMPTY;
                    }
                    this._value = this.oldTextContent = this.textContent = content;
                };
                NumPadState._onEnterListeners = [];
                NumPadState.NUMPAD_CONTROL_BUTTONS_CLASS = ".numpad-control-buttons";
                return NumPadState;
            }());
            NumPad.NumPadState = NumPadState;
        })(NumPad = Controls.NumPad || (Controls.NumPad = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var NumPad;
        (function (NumPad) {
            "use strict";
            var TransactionNumPadBindingHandler = (function (_super) {
                __extends(TransactionNumPadBindingHandler, _super);
                function TransactionNumPadBindingHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                TransactionNumPadBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    _super.prototype.update.call(this, element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);
                    var $element = $(element);
                    var $numPadButtons = $element.find(".numpad-control-buttons");
                    this.updateControlLayout($element, $numPadButtons);
                };
                Object.defineProperty(TransactionNumPadBindingHandler.prototype, "templateId", {
                    get: function () {
                        return "numberpad-transaction-template";
                    },
                    enumerable: true,
                    configurable: true
                });
                TransactionNumPadBindingHandler.prototype.getAllowedInputHandlers = function (options) {
                    return [
                        NumPad.InputHandlers.clear,
                        NumPad.InputHandlers.abc
                    ]
                        .concat(_super.prototype.getAllowedInputHandlers.call(this, options))
                        .concat([
                        NumPad.InputHandlers.quantity,
                        NumPad.InputHandlers.toggleMinus,
                        NumPad.InputHandlers.anyText
                    ]);
                };
                TransactionNumPadBindingHandler.prototype.createState = function (element, options, callerContext) {
                    return new NumPad.CartNumPadState(element, options, callerContext);
                };
                TransactionNumPadBindingHandler.prototype.updateControlLayout = function ($element, $numPadButtons) {
                    var state = this.getNumpadStateOfElement($element);
                    var options = state.options;
                    var layout;
                    if (options.viewName) {
                        if (options.containerId) {
                            layout = Commerce.ApplicationContext.Instance.tillLayoutProxy.getLayoutItem(options.viewName, options.containerId);
                        }
                        else {
                            Commerce.ViewModelAdapter.displayMessage("NumPad control requires a unique identifier as a parameter.", Commerce.MessageType.Error);
                        }
                    }
                    if (Commerce.ObjectExtensions.isNullOrUndefined(layout)) {
                        state.updateState(undefined, options.placeholder, undefined);
                        return;
                    }
                    else {
                        state.updateState(layout.DisplayTitleAboveControl, options.placeholder, layout.HideButtons);
                    }
                    if (state.hasDisplayTitleAboveControlsChanged || state.hasPlaceholderChanged) {
                        if (!layout.DisplayTitleAboveControl) {
                            this.getNumPadLabel($element).hide();
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(options.placeholder)) {
                                state.inputElement.placeholder = Commerce.ViewModelAdapter.getResourceString(options.placeholder);
                                state.inputElement.blur();
                            }
                        }
                        else {
                            this.getNumPadLabel($element).show();
                            state.inputElement.placeholder = Commerce.StringExtensions.EMPTY;
                        }
                    }
                    if (state.hasHideButtonsChanged) {
                        if (layout.HideButtons) {
                            $numPadButtons.hide();
                            state.inputElement.readOnly = false;
                            state.alwaysAllowTargetInputEnabled = true;
                        }
                        else {
                            $numPadButtons.show();
                            state.inputElement.readOnly = true;
                            state.alwaysAllowTargetInputEnabled = false;
                        }
                    }
                    this.updateState(state);
                };
                return TransactionNumPadBindingHandler;
            }(NumPad.NumPadBindingHandler));
            NumPad.TransactionNumPadBindingHandler = TransactionNumPadBindingHandler;
        })(NumPad = Controls.NumPad || (Controls.NumPad = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var NumPad;
        (function (NumPad) {
            "use strict";
            var MultipleInputNumPadViewModel = (function () {
                function MultipleInputNumPadViewModel(multipleInputNumPadState) {
                    this._multipleInputNumPadState = multipleInputNumPadState;
                }
                MultipleInputNumPadViewModel.prototype.selectIndex = function (index) {
                    if (index < 0 || index >= this._multipleInputNumPadState.inputs.length) {
                        return;
                    }
                    this._multipleInputNumPadState.inputs[index].focus();
                };
                return MultipleInputNumPadViewModel;
            }());
            NumPad.MultipleInputNumPadViewModel = MultipleInputNumPadViewModel;
            var MultipleInputNumPadBindingHandler = (function (_super) {
                __extends(MultipleInputNumPadBindingHandler, _super);
                function MultipleInputNumPadBindingHandler() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.getAllowedInputHandlers = function (options) {
                        return _this.getAllowedMultipleInputHandlers(options);
                    };
                    return _this;
                }
                Object.defineProperty(MultipleInputNumPadBindingHandler.prototype, "templateId", {
                    get: function () {
                        return "numberpad-multipleInput-template";
                    },
                    enumerable: true,
                    configurable: true
                });
                MultipleInputNumPadBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var options = ko.utils.unwrapObservable(valueAccessor() || Object.create(null));
                    options.size = Commerce.ObjectExtensions.isNullOrUndefined(options.size) ? NumPad.MultipleInputNumPadSize.Small : options.size;
                    if (!Commerce.ArrayExtensions.hasElements(options.inputOptions)) {
                        throw new Error("At least one element in inputOptions for multiple input numpad control.");
                    }
                    ko.applyBindingsToNode(element, { template: "numberpad-multipleInput-container-template" }, options);
                    if (element.nodeType !== Node.COMMENT_NODE) {
                        element.classList.add("multiple-input-numpad-control");
                    }
                    var koVirtualElements = ko.virtualElements;
                    var inputsContainerElement = koVirtualElements.nextSibling(koVirtualElements.firstChild(element));
                    var numpadContainerElement = koVirtualElements.nextSibling(koVirtualElements.nextSibling(inputsContainerElement));
                    options.labelDataBinding = {
                        resx: { textContent: options.inputOptions[0].labelResourceId }
                    };
                    _super.prototype.init.call(this, numpadContainerElement.children[0], valueAccessor, allBindingsAccessor, viewModel, bindingContext);
                    var $element = $(element);
                    var state = this.getNumpadStateOfElement($(numpadContainerElement.children[0]));
                    this.setNumpadStateOfElement($element, state);
                    var multipleInputNumPadViewModel = new MultipleInputNumPadViewModel(state);
                    element.multipleInputNumPadViewModel = multipleInputNumPadViewModel;
                    ko.applyBindingsToNode(inputsContainerElement, {
                        template: {
                            name: "numberpad-multipleInput-inputContainer-template",
                            data: {
                                inputOptions: options.inputOptions
                            }
                        }
                    });
                    this.initInputs($element, inputsContainerElement, options, state);
                    this._attachToAbcButtonClickEvent($element);
                    return { controlsDescendantBindings: true };
                };
                MultipleInputNumPadBindingHandler.prototype.getNumpadStateOfElement = function ($element) {
                    var node = $element.get(0);
                    if (node.nodeType === Node.COMMENT_NODE) {
                        var koVirtualElements = ko.virtualElements;
                        var inputsContainerElement = koVirtualElements.nextSibling(koVirtualElements.firstChild(node));
                        var numpadContainerElement = koVirtualElements.nextSibling(koVirtualElements.nextSibling(inputsContainerElement));
                        return $(numpadContainerElement.children[0]).data(NumPad.NumPadBindingHandler.STATE_KEY_NAME);
                    }
                    return $element.data(NumPad.NumPadBindingHandler.STATE_KEY_NAME);
                };
                MultipleInputNumPadBindingHandler.prototype.setNumpadStateOfElement = function ($element, value) {
                    var node = $element.get(0);
                    if (node.nodeType === Node.COMMENT_NODE) {
                        return;
                    }
                    $element.data(NumPad.NumPadBindingHandler.STATE_KEY_NAME, value);
                };
                MultipleInputNumPadBindingHandler.prototype.createState = function (element, options, callerContext) {
                    return new NumPad.MultipleInputNumPadState(element, options, callerContext);
                };
                MultipleInputNumPadBindingHandler.prototype.initInputs = function ($numpad, inputsContainer, options, state) {
                    var _this = this;
                    var $inputsContainerChildren = $(inputsContainer).children();
                    state.inputs = [];
                    state.values = [];
                    state.isPopingUpSystemKeyboard = false;
                    options.inputOptions.forEach(function (option, index) {
                        var labelElement = $inputsContainerChildren.get(index * 2);
                        var inputElement = $inputsContainerChildren.get(index * 2 + 1);
                        state.inputs.push(inputElement);
                        var value = ko.observable(Commerce.StringExtensions.EMPTY);
                        state.values.push(value);
                        ko.applyBindingsToNode(labelElement, {
                            resx: { textContent: option.labelResourceId },
                            attr: { for: option.inputId }
                        });
                        var inputBindings = __assign(__assign({}, MultipleInputNumPadBindingHandler.DEFAULT_INPUT_BINDINGS), { attr: {
                                id: option.inputId,
                                type: option.inputType === Controls.NumPad.MultipleInputNumPadInputType.Password ? "password" : "text"
                            }, enterKeyPress: function () { return _this.handleButtonEvent($numpad, "enter"); }, axBubbleAttr: "multipleInputNumpadControl_" + option.inputId, value: value });
                        if (option.inputType === Controls.NumPad.MultipleInputNumPadInputType.Password) {
                            inputBindings.attr.sensitiveDataFor = option.sensitiveDataFor;
                        }
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(option.disable)) {
                            inputBindings.disable = option.disable;
                        }
                        ko.applyBindingsToNode(inputElement, inputBindings);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(option.validator)) {
                            var fieldValidator = new Commerce.Proxy.Entities.FieldValidator(option.validator);
                            fieldValidator.setValidationAttributes(inputElement);
                        }
                        _this.attachClearMarkToTarget($numpad, inputElement, true);
                        $(inputElement).focus(function () {
                            state.currentInputType = option.inputType;
                            state.currentInputIndex = index;
                            state.currentValue = value;
                            if (!state.isPopingUpSystemKeyboard) {
                                NumPad.MultipleInputNumPadSharedInputHandles.resetInputMode(state);
                            }
                        });
                        if (index === 0) {
                            state.currentInputType = option.inputType;
                            state.currentInputIndex = index;
                            state.currentValue = value;
                        }
                    });
                    NumPad.MultipleInputNumPadSharedInputHandles.resetInputMode(state);
                };
                MultipleInputNumPadBindingHandler.prototype._attachToAbcButtonClickEvent = function ($numPadRootElement) {
                    var _this = this;
                    $numPadRootElement.find(".button-abc").click(function (event) {
                        var state = _this.getNumpadStateOfElement($numPadRootElement);
                        var inputElement = state.currentInput;
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(inputElement)) {
                            state.isPopingUpSystemKeyboard = true;
                            inputElement.inputMode = "text";
                            var tempElement_1 = document.createElement("input");
                            tempElement_1.style.position = "absolute";
                            tempElement_1.style.top = inputElement.offsetTop + inputElement.offsetHeight / 2 + "px";
                            tempElement_1.style.left = inputElement.offsetLeft + "px";
                            tempElement_1.style.height = "0";
                            tempElement_1.style.opacity = "0";
                            var offsetParent_1 = Commerce.ObjectExtensions.isNullOrUndefined(inputElement.offsetParent) ? document.body : inputElement.offsetParent;
                            offsetParent_1.appendChild(tempElement_1);
                            tempElement_1.focus();
                            Commerce.Host.instance.timers.setImmediate(function () {
                                inputElement.focus();
                                inputElement.click();
                                inputElement.setSelectionRange(inputElement.value.length, inputElement.value.length);
                                offsetParent_1.removeChild(tempElement_1);
                                state.isPopingUpSystemKeyboard = false;
                            });
                        }
                    });
                };
                MultipleInputNumPadBindingHandler.DEFAULT_INPUT_BINDINGS = {
                    valueUpdate: "afterkeydown"
                };
                return MultipleInputNumPadBindingHandler;
            }(NumPad.NumPadBindingHandler));
            NumPad.MultipleInputNumPadBindingHandler = MultipleInputNumPadBindingHandler;
        })(NumPad = Controls.NumPad || (Controls.NumPad = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var NumPad;
        (function (NumPad) {
            "use strict";
            var MultipleTextInputNumPadBindingHandler = (function (_super) {
                __extends(MultipleTextInputNumPadBindingHandler, _super);
                function MultipleTextInputNumPadBindingHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                MultipleTextInputNumPadBindingHandler.prototype.getAllowedMultipleInputHandlers = function (options) {
                    return [
                        NumPad.MultipleInputNumPadSharedInputHandles.clear,
                        NumPad.MultipleInputNumPadSharedInputHandles.enter,
                        NumPad.MultipleInputNumPadTextInputHandles.backspace,
                        NumPad.MultipleInputNumPadTextInputHandles.decimalSeparator,
                        NumPad.MultipleInputNumPadTextInputHandles.numbers
                    ];
                };
                return MultipleTextInputNumPadBindingHandler;
            }(NumPad.MultipleInputNumPadBindingHandler));
            NumPad.MultipleTextInputNumPadBindingHandler = MultipleTextInputNumPadBindingHandler;
        })(NumPad = Controls.NumPad || (Controls.NumPad = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var NumPad;
        (function (NumPad) {
            function triggerInteractionEvent(element, event) {
                var eventName;
                if (event === NumPad.InteractionEvents.NumpadEnter) {
                    eventName = Commerce.InteractionEvents.NUMPADENTER;
                }
                else {
                    throw "Commerce.Controls.NumPad.triggerInteractionEvent: unsupported event type.";
                }
                Commerce.Interaction.instance.triggerEvent(element, eventName);
            }
            NumPad.triggerInteractionEvent = triggerInteractionEvent;
        })(NumPad = Controls.NumPad || (Controls.NumPad = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
Commerce.Controls.NumPad.NumPadState.setTriggerEventMethod(Commerce.Controls.NumPad.triggerInteractionEvent);
ko.bindingHandlers.transactionNumpad = new Commerce.Controls.NumPad.TransactionNumPadBindingHandler();
ko.bindingHandlers.numericNumpad = new Commerce.Controls.NumPad.NumericNumPadBindingHandler();
ko.bindingHandlers.alphanumericNumpad = new Commerce.Controls.NumPad.AlphanumericNumPadBindingHandler();
ko.bindingHandlers.currencyNumpad = new Commerce.Controls.NumPad.CurrencyNumPadBindingHandler();
ko.bindingHandlers.multipleTextInputNumpad = new Commerce.Controls.NumPad.MultipleTextInputNumPadBindingHandler();
ko.virtualElements.allowedBindings.multipleTextInputNumpad = true;
var orientationEnum;
(function (orientationEnum) {
    orientationEnum[orientationEnum["landscape"] = 1] = "landscape";
    orientationEnum[orientationEnum["portrait"] = 2] = "portrait";
})(orientationEnum || (orientationEnum = {}));
var ParallaxOptions = (function () {
    function ParallaxOptions() {
    }
    return ParallaxOptions;
}());
ko.bindingHandlers.parallax = (function () {
    "use strict";
    var DEFAULT_PARALLAX_SPEED = 3;
    function applyParallax(element, options, orientation, $parallaxBackground) {
        var isOrientationLandscape = orientation === orientationEnum.landscape;
        var parallaxScrollElement = options.parallaxScrollElement ? options.parallaxScrollElement : element;
        $(parallaxScrollElement).scroll(function (event) {
            var scrollPosition = isOrientationLandscape ? scrollLeft(this) : $(this).scrollTop();
            var direction;
            var backgroundScrollDirection;
            if (isOrientationLandscape) {
                direction = (!Commerce.CSSHelpers.isRightToLeft() && options.parallaxReverse) ||
                    (Commerce.CSSHelpers.isRightToLeft() && !options.parallaxReverse) ? 1 : -1;
                backgroundScrollDirection = "background-position-x";
            }
            else {
                direction = 1;
                backgroundScrollDirection = "background-position-y";
            }
            var scrollTo = scrollPosition / (options.parallaxSpeed ? options.parallaxSpeed : DEFAULT_PARALLAX_SPEED);
            $parallaxBackground.css(backgroundScrollDirection, Math.floor(direction * scrollTo) + "px");
        });
    }
    function scrollLeft(elem) {
        var scrollLeft = $(elem).scrollLeft();
        if (Commerce.CSSHelpers.isRightToLeft() && Commerce.Host.instance.application.getBrowserType() === Commerce.Client.Entities.BrowserType.Chrome) {
            scrollLeft = elem.scrollWidth - elem.clientWidth - scrollLeft;
        }
        return scrollLeft;
    }
    return {
        init: function (element, optionsValueAccessor) {
            var orientation = window.innerHeight > window.innerWidth ? orientationEnum.portrait : orientationEnum.landscape;
            var value = optionsValueAccessor();
            var $parallaxBackground;
            if (value.parallaxBackgroundElement) {
                $parallaxBackground = $(value.parallaxBackgroundElement);
            }
            else {
                Commerce.RetailLogger.viewsControlsKnockoutParallaxBackgroundElementRequired();
                return;
            }
            Commerce.ApplicationContext.Instance.tillLayoutProxy.addOrientationChangedHandler(element, function () {
                orientation = (Commerce.ApplicationContext.Instance.tillLayoutProxy.orientation === "Portrait") ?
                    orientationEnum.portrait : orientationEnum.landscape;
                $(element).scrollTop(0);
                $(element).scrollLeft(0);
                $parallaxBackground.unbind("scroll");
                applyParallax(element, value, orientation, $parallaxBackground);
            });
            applyParallax(element, optionsValueAccessor(), orientation, $parallaxBackground);
        }
    };
})();
var Commerce;
(function (Commerce) {
    "use strict";
})(Commerce || (Commerce = {}));
ko.bindingHandlers.progressBar = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var $element = $(element);
        var options = ko.utils.unwrapObservable(valueAccessor()) || {};
        var progressBarCssClass = "win-progress-bar win-large width100Percent progressBar height08";
        var $progress = $("<progress />").addClass(progressBarCssClass).attr("value", ko.utils.unwrapObservable(options.value));
        $element.append($progress);
        return { controlsDescendantBindings: false };
    },
    update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var $element = $(element);
        var options = ko.utils.unwrapObservable(valueAccessor()) || {};
        $element.find("progress").attr("value", ko.utils.unwrapObservable(options.value));
        return { controlsDescendantBindings: false };
    }
};
var Commerce;
(function (Commerce) {
    "use strict";
    var IRefinerOptions = (function () {
        function IRefinerOptions() {
        }
        return IRefinerOptions;
    }());
    Commerce.IRefinerOptions = IRefinerOptions;
    var Refiner = (function () {
        function Refiner() {
        }
        Refiner.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var _this = this;
            var options = ko.utils.unwrapObservable(valueAccessor()) || {};
            var $element = $(element);
            $element.addClass("Refiner");
            var refinerViewModel = options.refinerViewModel;
            var availableRefinersDisposable;
            availableRefinersDisposable = refinerViewModel.availableRefiners.subscribe(function (newAvailableRefiners) {
                ko.applyBindingsToNode(element, {
                    template: {
                        name: "refinerControlTemplate",
                        data: refinerViewModel
                    }
                }, _this);
            }, this);
            ko.applyBindingsToNode(element, {
                template: {
                    name: "refinerControlTemplate",
                    data: refinerViewModel
                }
            }, this);
            ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(availableRefinersDisposable)) {
                    availableRefinersDisposable.dispose();
                }
            });
            return { controlsDescendantBindings: true };
        };
        return Refiner;
    }());
    Commerce.Refiner = Refiner;
    ko.bindingHandlers.refiner = new Refiner();
})(Commerce || (Commerce = {}));
ko.bindingHandlers.resx = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var _this = this;
        var value = ko.utils.unwrapObservable(valueAccessor() || {});
        Object.keys(value).forEach(function (memberName) {
            switch (memberName) {
                case "textContent":
                    var textContent = value[memberName];
                    if (ko.isObservable(value[memberName])) {
                        textContent = ko.utils.unwrapObservable(value[memberName]);
                        value[memberName].subscribe(function (updatedTextContent) {
                            setTextContent(Commerce.ViewModelAdapter.getResourceString(updatedTextContent));
                        }, _this);
                    }
                    setTextContent(Commerce.ViewModelAdapter.getResourceString(textContent));
                    break;
                case "textWithTooltip":
                    var memberValue = Commerce.ViewModelAdapter.getResourceString(value[memberName]);
                    setTextContent(memberValue);
                    element.setAttribute("title", memberValue);
                    break;
                case "label":
                    {
                        var memberValue_1 = Commerce.ViewModelAdapter.getResourceString(value[memberName]);
                        element.winControl.label = memberValue_1;
                        setDefaultTooltip(memberValue_1);
                    }
                    break;
                case "ariaLabel":
                    var areaLabel = value[memberName];
                    if (ko.isObservable(value[memberName])) {
                        areaLabel = ko.utils.unwrapObservable(value[memberName]);
                        value[memberName].subscribe(function (updatedAreaLabel) {
                            element.setAttribute("aria-label", Commerce.ViewModelAdapter.getResourceString(updatedAreaLabel));
                        }, _this);
                    }
                    element.setAttribute("aria-label", Commerce.ViewModelAdapter.getResourceString(areaLabel));
                    break;
            }
        });
        function setDefaultTooltip(memberValue) {
            if (("tooltip" in element.winControl) && !("tooltip" in value)) {
                element.winControl.tooltip = memberValue;
            }
        }
        function setTextContent(content) {
            element.textContent = content;
            if (Commerce.StringExtensions.endsWith(content, ")")) {
                var leftToRightMark = "\u200E";
                element.textContent += leftToRightMark;
            }
        }
    }
};
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var ISalesOrderAttributeGroupOptions = (function () {
            function ISalesOrderAttributeGroupOptions() {
            }
            return ISalesOrderAttributeGroupOptions;
        }());
        Controls.ISalesOrderAttributeGroupOptions = ISalesOrderAttributeGroupOptions;
        var SalesOrderAttributeGroup = (function () {
            function SalesOrderAttributeGroup() {
            }
            SalesOrderAttributeGroup.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var options = ko.utils.unwrapObservable(valueAccessor()) || {};
                var $element = $(element);
                $element.addClass("salesOrderAttributeGroup");
                var salesOrderAttributeGroupViewModel = options.salesOrderAttributeGroupViewModel;
                ko.applyBindingsToNode(element, {
                    template: {
                        name: "salesOrderAttributeGroupTemplate",
                        data: salesOrderAttributeGroupViewModel
                    }
                }, this);
                return { controlsDescendantBindings: true };
            };
            return SalesOrderAttributeGroup;
        }());
        Controls.SalesOrderAttributeGroup = SalesOrderAttributeGroup;
        ko.bindingHandlers.salesOrderAttributeGroup = new SalesOrderAttributeGroup();
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var ISalesOrderAttributesOptions = (function () {
        function ISalesOrderAttributesOptions() {
        }
        return ISalesOrderAttributesOptions;
    }());
    Commerce.ISalesOrderAttributesOptions = ISalesOrderAttributesOptions;
    var SalesOrderAttributes = (function () {
        function SalesOrderAttributes() {
        }
        SalesOrderAttributes.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var options = ko.utils.unwrapObservable(valueAccessor()) || {};
            var $element = $(element);
            $element.addClass("salesOrderAttributes");
            var salesOrderAttributesViewModel = options.salesOrderAttributesViewModel;
            ko.applyBindingsToNode(element, {
                template: {
                    name: "salesOrderAttributesTemplate",
                    data: salesOrderAttributesViewModel
                }
            }, this);
            return { controlsDescendantBindings: true };
        };
        return SalesOrderAttributes;
    }());
    Commerce.SalesOrderAttributes = SalesOrderAttributes;
    ko.bindingHandlers.salesOrderAttributes = new SalesOrderAttributes();
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var SectionWrapper;
        (function (SectionWrapper) {
            "use strict";
            ko.bindingHandlers.sectionWrapper = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var options = ko.utils.unwrapObservable(valueAccessor()) || {};
                    if (Commerce.ObjectExtensions.isNullOrUndefined(options.header) && Commerce.ObjectExtensions.isNullOrUndefined(options.headerResx)) {
                        throw new Error("SectionWrapper: Either the 'header' or the 'headerResx' parameter must be defined");
                    }
                    ko.applyBindingsToDescendants(bindingContext, element);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(options.headerResx)) {
                        options.header = Commerce.ViewModelAdapter.getResourceString(ko.utils.unwrapObservable(options.headerResx));
                    }
                    var $divElement = $("<div></div>");
                    $(element).prepend($divElement);
                    ko.applyBindingsToNode($divElement[0], {
                        template: {
                            name: "sectionWrapperTemplate",
                            data: { header: options.header }
                        }
                    });
                    return { controlsDescendantBindings: true };
                }
            };
        })(SectionWrapper = Controls.SectionWrapper || (Controls.SectionWrapper = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
})(Commerce || (Commerce = {}));
ko.bindingHandlers.selectRefinerControl = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var options = ko.utils.unwrapObservable(valueAccessor()) || {};
        var selectedRefinerValues = ko.observableArray(Commerce.ObjectExtensions.isNullOrUndefined(options.refiner.SelectedValues) ? [] : options.refiner.SelectedValues);
        var controlAttribute = Commerce.StringExtensions.format("selectRefinerControl_{0}", options.refiner.KeyName);
        var controlAddButtonAttribute = Commerce.StringExtensions.format("selectRefinerControl_addButton_{0}", options.refiner.KeyName);
        var addButtonAriaLabelAttribute = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_4185"), options.refiner.KeyName);
        var removeButtonAriaLabelAttribute = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_941"), "{0}", options.refiner.KeyName);
        var showInputDialog = function () {
            options.showInputDialogCallback().done(function (refinerValues) {
                if (Commerce.ArrayExtensions.hasElements(refinerValues)) {
                    selectedRefinerValues(refinerValues);
                    options.refiner.SelectedValues = refinerValues;
                }
                else if (!Commerce.ArrayExtensions.hasElements(options.refiner.SelectedValues)) {
                    element.parentNode.removeChild(element);
                    options.refinerRemovedHandler();
                }
            });
        };
        var removeButtonHandler = function (data, eventInfo) {
            selectedRefinerValues.remove(data);
            if (!Commerce.ArrayExtensions.hasElements(selectedRefinerValues())) {
                element.parentNode.removeChild(element);
                options.refinerRemovedHandler();
            }
        };
        var addButtonHandler = function (data, eventInfo) {
            showInputDialog();
        };
        ko.applyBindingsToNode(element, {
            template: {
                name: "selectRefinerControlTemplate", data: {
                    values: selectedRefinerValues,
                    addButton: addButtonHandler,
                    removeButton: removeButtonHandler,
                    refiner: options.refiner,
                    refinerValueTemplate: options.refinerValueTemplate,
                    controlAttribute: controlAttribute,
                    controlAddButtonAttribute: controlAddButtonAttribute,
                    addButtonAriaLabelAttribute: addButtonAriaLabelAttribute,
                    removeButtonAriaLabelAttribute: removeButtonAriaLabelAttribute
                }
            }
        });
        if (!Commerce.ArrayExtensions.hasElements(options.refiner.SelectedValues)) {
            showInputDialog();
        }
        return { controlsDescendantBindings: true };
    }
};
var Commerce;
(function (Commerce) {
    "use strict";
    var SelectTileControl = (function () {
        function SelectTileControl() {
        }
        SelectTileControl.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var _this = this;
            var options = ko.utils.unwrapObservable(valueAccessor()) || {};
            var $element = $(element);
            if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                throw new Error("Invalid options passed to the SelectTile control: options cannot be null or undefined.");
            }
            else if (Commerce.ObjectExtensions.isNullOrUndefined(options.primaryText)) {
                throw new Error("Invalid options passed to the SelectTile control: primaryText cannot be null or undefined.");
            }
            else if (Commerce.ObjectExtensions.isNullOrUndefined(options.iteminvoked)) {
                throw new Error("Invalid options passed to the SelectTile control: iteminvoked cannot be null or undefined.");
            }
            else if (!Commerce.ObjectExtensions.isFunction(options.iteminvoked)) {
                throw new Error("Invalid options passed to the SelectTile control: iteminvoked must be a function.");
            }
            options.secondaryText = options.secondaryText || Commerce.StringExtensions.EMPTY;
            options.iconClass = options.iconClass || null;
            options.tileType = options.tileType || Commerce.Controls.SelectTile.SelectTileType.SingleLine;
            options.disabled = options.disabled || false;
            options.displayChevron = Commerce.ObjectExtensions.isNullOrUndefined(options.displayChevron) ? true : options.displayChevron;
            options.isPreSelected = Commerce.ObjectExtensions.isNullOrUndefined(options.isPreSelected) ? false : options.isPreSelected;
            options.primaryTextCssClass = options.primaryTextCssClass || Commerce.StringExtensions.EMPTY;
            options.secondaryTextCssClass = options.secondaryTextCssClass || Commerce.StringExtensions.EMPTY;
            options.displayBottomBorder = options.displayBottomBorder || false;
            options.cheveronCssClass = options.cheveronCssClass || Commerce.StringExtensions.EMPTY;
            options.backgroundCssClass = options.backgroundCssClass || "accentBackground";
            options.backgroundCssClass += options.disabled ? " disabled" : Commerce.StringExtensions.EMPTY;
            $element.addClass("selectTile wrap");
            var afterRender = function () {
                var viewModelTemp = viewModel;
                $element.find(".itemContainer").each(function (index, itemContainerElement) {
                    if (!itemContainerElement.winControl) {
                        var $itemContainer_1 = $(itemContainerElement);
                        if (options.disabled) {
                            (itemContainerElement).tabIndex = -1;
                        }
                        $itemContainer_1.attr("role", "button");
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(viewModel._viewModel)
                            && !Commerce.ObjectExtensions.isNullOrUndefined(viewModel._viewModel.selectionType)) {
                            var primaryTextValue = void 0;
                            if (ko.isObservable(options.primaryText)) {
                                primaryTextValue = ko.utils.unwrapObservable(options.primaryText);
                                options.primaryText.subscribe(function (newPrimaryText) {
                                    $itemContainer_1.attr("aria-label", viewModel._viewModel.selectionType() + " " + newPrimaryText);
                                }, _this);
                            }
                            else {
                                primaryTextValue = options.primaryText;
                            }
                            $itemContainer_1.attr("aria-label", viewModel._viewModel.selectionType() + " " + primaryTextValue);
                        }
                        var itemContainerOptions = {
                            selectionDisabled: true,
                            tapBehavior: WinJS.UI.TapBehavior.invokeOnly
                        };
                        var itemContainer = new WinJS.UI.ItemContainer(itemContainerElement, itemContainerOptions);
                        if (!options.disabled) {
                            var itemInvokeHandler = void 0;
                            itemInvokeHandler = function (event) {
                                if (options.iteminvoked) {
                                    options.iteminvoked.call(viewModelTemp);
                                }
                                event.stopPropagation();
                            };
                            var handler = void 0;
                            handler = WinJS.Utilities.markSupportedForProcessing(itemInvokeHandler);
                            itemContainer.addEventListener("invoked", handler);
                        }
                        $itemContainer_1.find(".win-itembox, .win-item").addClass("col grow");
                    }
                });
            };
            ko.applyBindingsToNode(element, {
                template: {
                    name: SelectTileControl.selectTileTemplateName,
                    data: options,
                    afterRender: afterRender
                }
            }, this);
            return { controlsDescendantBindings: true };
        };
        SelectTileControl.selectTileTemplateName = "selectTileTemplate";
        return SelectTileControl;
    }());
    Commerce.SelectTileControl = SelectTileControl;
    ko.bindingHandlers.selectTile = new SelectTileControl();
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var SelfPackingList;
        (function (SelfPackingList) {
            "use strict";
            var SelfPackingItemWrapper = (function () {
                function SelfPackingItemWrapper(item) {
                    var _this = this;
                    this._item = item;
                    this._lastRecordedWidth = 0;
                    this._isPacked = ko.observable(undefined);
                    this.isVisible = ko.observable(false);
                    this._isPackedSubscription = this._isPacked.subscribe(function () {
                        _this._updatePackedAndUnpackedElementsVisibility();
                    });
                    this._isVisibleSubscription = this.isVisible.subscribe(function () {
                        _this._updatePackedAndUnpackedElementsVisibility();
                    });
                    this._item.addEventListener("VisibilityChanged", this._visibilityChanged.bind(this));
                }
                Object.defineProperty(SelfPackingItemWrapper.prototype, "id", {
                    get: function () {
                        return this._item.id;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SelfPackingItemWrapper.prototype, "width", {
                    get: function () {
                        if (!this._isPacked()) {
                            this._lastRecordedWidth = this._unpackedElement.offsetWidth;
                        }
                        return this._lastRecordedWidth;
                    },
                    enumerable: true,
                    configurable: true
                });
                SelfPackingItemWrapper.prototype.onReady = function (packedElement, unpackedElement) {
                    this._packedElement = packedElement;
                    this._unpackedElement = unpackedElement;
                    this._item.onReady(packedElement, unpackedElement);
                    this.isVisible(this._item.isVisible);
                };
                SelfPackingItemWrapper.prototype.dispose = function () {
                    this._isPackedSubscription.dispose();
                    this._isVisibleSubscription.dispose();
                    Commerce.ObjectExtensions.disposeAllProperties(this);
                };
                SelfPackingItemWrapper.prototype.pack = function () {
                    this._isPacked(true);
                };
                SelfPackingItemWrapper.prototype.unpack = function () {
                    this._isPacked(false);
                };
                SelfPackingItemWrapper.prototype.hasPackedElement = function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(this._packedElement)
                        && !Commerce.StringExtensions.isNullOrWhitespace(this._packedElement.innerHTML);
                };
                SelfPackingItemWrapper.prototype.hasUnpackedElement = function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(this._unpackedElement)
                        && !Commerce.StringExtensions.isNullOrWhitespace(this._unpackedElement.innerHTML);
                };
                SelfPackingItemWrapper.prototype._updatePackedAndUnpackedElementsVisibility = function () {
                    if (!this.isVisible()) {
                        this._hidePackedAndUnpackedElements();
                    }
                    else if (this._isPacked()) {
                        this._showPackedAndHideUnpackedElement();
                    }
                    else {
                        this._showUnpackedAndHidePackedElement();
                    }
                };
                SelfPackingItemWrapper.prototype._hidePackedAndUnpackedElements = function () {
                    if (!this._unpackedElement.classList.contains(SelfPackingItemWrapper.HIDE_CLASS)) {
                        this._unpackedElement.classList.add(SelfPackingItemWrapper.HIDE_CLASS);
                    }
                    if (!this._packedElement.classList.contains(SelfPackingItemWrapper.HIDE_CLASS)) {
                        this._packedElement.classList.add(SelfPackingItemWrapper.HIDE_CLASS);
                    }
                };
                SelfPackingItemWrapper.prototype._showPackedAndHideUnpackedElement = function () {
                    if (!this._unpackedElement.classList.contains(SelfPackingItemWrapper.HIDE_CLASS)) {
                        this._unpackedElement.classList.add(SelfPackingItemWrapper.HIDE_CLASS);
                    }
                    if (this._packedElement.classList.contains(SelfPackingItemWrapper.HIDE_CLASS)) {
                        this._packedElement.classList.remove(SelfPackingItemWrapper.HIDE_CLASS);
                    }
                };
                SelfPackingItemWrapper.prototype._showUnpackedAndHidePackedElement = function () {
                    if (!this._packedElement.classList.contains(SelfPackingItemWrapper.HIDE_CLASS)) {
                        this._packedElement.classList.add(SelfPackingItemWrapper.HIDE_CLASS);
                    }
                    if (this._unpackedElement.classList.contains(SelfPackingItemWrapper.HIDE_CLASS)) {
                        this._unpackedElement.classList.remove(SelfPackingItemWrapper.HIDE_CLASS);
                    }
                };
                SelfPackingItemWrapper.prototype._visibilityChanged = function (isVisible) {
                    this.isVisible(isVisible);
                };
                SelfPackingItemWrapper.HIDE_CLASS = "hide";
                return SelfPackingItemWrapper;
            }());
            var SelfPackingListBindingHandler = (function () {
                function SelfPackingListBindingHandler() {
                    this.OVERFLOW_BUTTON_BLOCK_SIZE = 48;
                    this.BUFFER_FOR_SAFE_RESIZE = 5;
                    this._packedItems = [];
                    this._unpackedItems = [];
                    this._visibilitySubscriptions = [];
                }
                SelfPackingListBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    this._options = ko.utils.unwrapObservable(valueAccessor()) || {};
                    this._$element = $(element);
                    this._$element.addClass("selfPackingList alignRight row");
                    this._initializeButtons();
                    return { controlsDescendantBindings: true };
                };
                SelfPackingListBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    this._validateLayout();
                };
                SelfPackingListBindingHandler.prototype.refresh = function () {
                    this._validateLayout();
                };
                SelfPackingListBindingHandler.prototype.dispose = function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this._overflowFlyoutWinControl)) {
                        this._overflowFlyoutWinControl.dispose();
                    }
                    this._disposeVisibilitySubscriptions();
                    this._removeResizeEventListener();
                    Commerce.ObjectExtensions.disposeAllProperties(this);
                };
                SelfPackingListBindingHandler.prototype.toggleOveflowFlyout = function () {
                    if (this._overflowFlyoutWinControl.hidden) {
                        this._overflowFlyoutWinControl.show(this._$overflowButton[0]);
                    }
                    else {
                        this._overflowFlyoutWinControl.hide();
                    }
                };
                SelfPackingListBindingHandler.prototype.resize = function (newWidth) {
                    this._removeResizeEventListener();
                    if (newWidth < 0) {
                        newWidth = 0;
                    }
                    if (newWidth >= this._currentUnpackedListWidth + this.BUFFER_FOR_SAFE_RESIZE) {
                        if (Commerce.ArrayExtensions.hasElements(this._packedItems)) {
                            if (newWidth > this._getWidthAfterUnpack()) {
                                this._$element.width(newWidth);
                            }
                            else {
                                this._$element.width(this._currentUnpackedListWidth);
                            }
                        }
                    }
                    else if (newWidth < this._currentUnpackedListWidth) {
                        if (Commerce.ArrayExtensions.hasElements(this._unpackedItems)) {
                            if (newWidth < this._getWidthAfterPack()) {
                                this._$element.width(this._getWidthAfterPack());
                            }
                        }
                        else {
                            this._$element.width(this._overflowButtonWidth);
                        }
                    }
                    this._validateLayout();
                };
                Object.defineProperty(SelfPackingListBindingHandler.prototype, "_currentUnpackedListWidth", {
                    get: function () {
                        var totalWidth = 0;
                        this._unpackedItems.forEach(function (value) {
                            totalWidth = totalWidth + value.width;
                        });
                        totalWidth = totalWidth + this._overflowButtonWidth;
                        return totalWidth;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SelfPackingListBindingHandler.prototype, "_overflowButtonWidth", {
                    get: function () {
                        if (this._$overflowButton.is(":visible")) {
                            return this.OVERFLOW_BUTTON_BLOCK_SIZE;
                        }
                        else {
                            return 0;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                SelfPackingListBindingHandler.prototype._validateLayout = function () {
                    var listWidth = this._$element.width();
                    var currentListWidth = this._currentUnpackedListWidth;
                    if (listWidth < currentListWidth && listWidth >= this._overflowButtonWidth) {
                        this._packNextItem();
                        this._validateLayout();
                    }
                    else if (listWidth >= currentListWidth) {
                        var nextItem = this._getNextItemToUnpack();
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(nextItem) && listWidth > 0 && this._getWidthAfterUnpack() <= listWidth) {
                            this._unpackNextItem();
                            this._validateLayout();
                        }
                    }
                };
                SelfPackingListBindingHandler.prototype._getNextItemToPack = function () {
                    return Commerce.ArrayExtensions.lastOrUndefined(this._unpackedItems);
                };
                SelfPackingListBindingHandler.prototype._getNextItemToUnpack = function () {
                    return Commerce.ArrayExtensions.lastOrUndefined(this._packedItems);
                };
                SelfPackingListBindingHandler.prototype._getWidthAfterPack = function () {
                    var nextItemToPack = this._getNextItemToPack();
                    var totalWidth = this._currentUnpackedListWidth;
                    if (!this._itemExistsAndIsVisible(nextItemToPack)) {
                        return totalWidth;
                    }
                    totalWidth = totalWidth - nextItemToPack.width;
                    if (this._countVisiblePackedItems() === 0 && nextItemToPack.hasPackedElement()) {
                        totalWidth = totalWidth + this.OVERFLOW_BUTTON_BLOCK_SIZE;
                    }
                    return totalWidth;
                };
                SelfPackingListBindingHandler.prototype._itemExistsAndIsVisible = function (item) {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(item) && item.isVisible();
                };
                SelfPackingListBindingHandler.prototype._getWidthAfterUnpack = function () {
                    var nextItemToUnpack = this._getNextItemToUnpack();
                    var totalWidth = this._currentUnpackedListWidth;
                    if (!this._itemExistsAndIsVisible(nextItemToUnpack)) {
                        return totalWidth;
                    }
                    totalWidth = totalWidth + nextItemToUnpack.width;
                    if (this._countVisiblePackedItems() === 1 && nextItemToUnpack.hasPackedElement()) {
                        totalWidth = totalWidth - this.OVERFLOW_BUTTON_BLOCK_SIZE;
                    }
                    return totalWidth;
                };
                SelfPackingListBindingHandler.prototype._packNextItem = function () {
                    if (Commerce.ArrayExtensions.hasElements(this._unpackedItems)) {
                        var item = this._unpackedItems.pop();
                        item.pack();
                        this._packedItems.push(item);
                        this._updateOverflowButton();
                    }
                };
                SelfPackingListBindingHandler.prototype._updateOverflowButton = function () {
                    if (this._countVisiblePackedItems() > 0) {
                        this.showOverflowButton();
                    }
                    else {
                        this.hideOverflowButton();
                    }
                };
                SelfPackingListBindingHandler.prototype._unpackNextItem = function () {
                    if (Commerce.ArrayExtensions.hasElements(this._packedItems)) {
                        var item = this._packedItems.pop();
                        item.unpack();
                        this._unpackedItems.push(item);
                        this._updateOverflowButton();
                    }
                };
                SelfPackingListBindingHandler.prototype.showOverflowButton = function () {
                    this._$overflowButton.show();
                };
                SelfPackingListBindingHandler.prototype.hideOverflowButton = function () {
                    this._$overflowButton.hide();
                };
                SelfPackingListBindingHandler.prototype._countVisiblePackedItems = function () {
                    var count = 0;
                    this._packedItems.forEach(function (item) {
                        if (item.hasPackedElement() && item.isVisible()) {
                            count = count + 1;
                        }
                    });
                    return count;
                };
                SelfPackingListBindingHandler.prototype._initializeButtons = function () {
                    var _this = this;
                    this._validateOptions(this._options);
                    ko.applyBindingsToNode(this._$element[0], { template: { name: "selfPackingListTemplate", data: this } });
                    var $leftList = this._$element.find(".selfPackingListLeftList");
                    var $rightList = this._$element.find(".selfPackingListRightList");
                    this._$overflowButton = this._$element.find(".selfPackingListOverflowButton");
                    this._$oveflowFlyout = this._$element.find(".selfPackingListOverflowFlyout");
                    this._overflowFlyoutWinControl = new WinJS.UI.Flyout(this._$oveflowFlyout[0]);
                    this._unpackedItems = [];
                    this._packedItems = [];
                    this._disposeVisibilitySubscriptions();
                    this._visibilitySubscriptions = [];
                    var itemsConfig = this._options.itemsConfig.slice();
                    itemsConfig.sort(function (a, b) {
                        return a.packingOrder - b.packingOrder;
                    });
                    itemsConfig.forEach(function (itemConfig) {
                        if (itemConfig.displayBeforeOverflowButton) {
                            _this._addButtonBlock(itemConfig, $leftList, true);
                        }
                        else {
                            _this._addButtonBlock(itemConfig, $rightList, false);
                        }
                    }, this);
                    if (this._packedItems.length > 0) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(this._windowResizeHandler)) {
                            this._removeResizeEventListener();
                        }
                        this._addResizeEventListener();
                        this.showOverflowButton();
                        this._validateLayout();
                    }
                    else {
                        this.hideOverflowButton();
                    }
                };
                SelfPackingListBindingHandler.prototype._validateOptions = function (option) {
                    var uniqueIds = {};
                    if (Commerce.ObjectExtensions.isNullOrUndefined(option.itemsConfig)) {
                        throw "Invalid argument. The options for SelfPackingList must define an 'itemsConfig'.";
                    }
                    option.itemsConfig.forEach(function (selfPackingListItemConfig) {
                        if (Object.keys(uniqueIds).indexOf(selfPackingListItemConfig.item.id) < 0) {
                            uniqueIds[selfPackingListItemConfig.item.id] = true;
                        }
                        else {
                            throw Commerce.StringExtensions.format("Required parameter 'id' is not unique on items for self packing list. Found duplicate for: {0}", selfPackingListItemConfig.item.id);
                        }
                    });
                };
                SelfPackingListBindingHandler.prototype._addButtonBlock = function (selfPackingListItemConfig, $list, beforeOverflowButton) {
                    var _this = this;
                    var divTag = "<div class='selfPackingItem row' />";
                    var $unpackedButtonBlock = $(divTag);
                    var $packedButtonBlock = $(divTag);
                    var packedElement = $packedButtonBlock.get(0);
                    var unpackedElement = $unpackedButtonBlock.get(0);
                    var selfPackingListItem = new SelfPackingItemWrapper(selfPackingListItemConfig.item);
                    this._visibilitySubscriptions.push(selfPackingListItem.isVisible.subscribe(function (isVisible) {
                        _this._validateLayout();
                        return isVisible;
                    }, this));
                    selfPackingListItem.onReady(packedElement, unpackedElement);
                    if (!selfPackingListItem.hasUnpackedElement()) {
                        throw "The unpacked item must be defined. Found empty unpacked element for:" + selfPackingListItem.id;
                    }
                    if (beforeOverflowButton) {
                        $unpackedButtonBlock.prependTo($list);
                    }
                    else {
                        $unpackedButtonBlock.appendTo($list);
                    }
                    if (selfPackingListItem.hasPackedElement()) {
                        $packedButtonBlock.appendTo(this._$oveflowFlyout);
                    }
                    this._packedItems.push(selfPackingListItem);
                    selfPackingListItem.pack();
                };
                SelfPackingListBindingHandler.prototype._removeResizeEventListener = function () {
                    window.removeEventListener("resize", this._windowResizeHandler);
                    this._windowResizeHandler = null;
                };
                SelfPackingListBindingHandler.prototype._addResizeEventListener = function () {
                    this._windowResizeHandler = this._onWindowResize.bind(this);
                    window.addEventListener("resize", this._windowResizeHandler);
                };
                SelfPackingListBindingHandler.prototype._onWindowResize = function () {
                    this._overflowFlyoutWinControl.hide();
                    this._validateLayout();
                };
                SelfPackingListBindingHandler.prototype._disposeVisibilitySubscriptions = function () {
                    this._visibilitySubscriptions.forEach(function (subscription) {
                        subscription.dispose();
                    });
                };
                return SelfPackingListBindingHandler;
            }());
            SelfPackingList.SelfPackingListBindingHandler = SelfPackingListBindingHandler;
            ko.bindingHandlers.selfPackingList
                = Commerce.KnockoutHandlerHelper.createMultiInstanceKnockoutHandler(Commerce.Controls.SelfPackingList.SelfPackingListBindingHandler);
        })(SelfPackingList = Controls.SelfPackingList || (Controls.SelfPackingList = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var SelfPackingList;
        (function (SelfPackingList) {
            "use strict";
        })(SelfPackingList = Controls.SelfPackingList || (Controls.SelfPackingList = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
ko.bindingHandlers.setElementRef = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var value = valueAccessor();
        if (ko.isObservable(value)) {
            value(element);
        }
    }
};
ko.bindingHandlers.sliderRefinerControl = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var $element = $(element);
        var refiner = ko.utils.unwrapObservable(valueAccessor()) || {};
        if (Commerce.ObjectExtensions.isNullOrUndefined(refiner) || !Commerce.ArrayExtensions.hasElements(refiner.Values)) {
            return;
        }
        var getRangeValues = function (curRefinerValue) {
            var convertedLeftValueBound = Math.floor(parseFloat(curRefinerValue.LeftValueBoundString));
            var convertedRightValueBound = Math.ceil(parseFloat(curRefinerValue.RightValueBoundString));
            return [convertedLeftValueBound, convertedRightValueBound];
        };
        var getFormattedRangeValues = function (curRangeValues, dataTypeValue, unitText) {
            var formattedLeftValueBoundString = curRangeValues[0].toString();
            var formattedRightValueBoundString = curRangeValues[1].toString();
            if (dataTypeValue === Commerce.Proxy.Entities.AttributeDataType.Currency) {
                formattedLeftValueBoundString = Commerce.NumberExtensions.formatCurrency(curRangeValues[0], unitText);
                formattedRightValueBoundString = Commerce.NumberExtensions.formatCurrency(curRangeValues[1], unitText);
            }
            return [formattedLeftValueBoundString, formattedRightValueBoundString];
        };
        var rangeFormat = "&nbsp;({0}&nbsp;&ndash;&nbsp;{1})";
        var sliderAttribute = Commerce.StringExtensions.format("sliderRefinerControl_slider_{0}", refiner.KeyName);
        var minformatString = Commerce.StringExtensions.format("{0} {1} ", Commerce.ViewModelAdapter.getResourceString("string_4193"), Commerce.ViewModelAdapter.getResourceString("string_5724"));
        var maxformatString = Commerce.StringExtensions.format("{0} {1} ", Commerce.ViewModelAdapter.getResourceString("string_4194"), Commerce.ViewModelAdapter.getResourceString("string_5724"));
        var originalRefinerValue = refiner.Values[0];
        var minValue = getRangeValues(originalRefinerValue)[0];
        var maxValue = getRangeValues(originalRefinerValue)[1];
        var currentRefinerValue = Commerce.ArrayExtensions.hasElements(refiner.SelectedValues) ?
            refiner.SelectedValues[0] : Commerce.ObjectExtensions.clone(originalRefinerValue);
        var rangeValues = ko.observableArray(getRangeValues(currentRefinerValue));
        var currentFormattedRangeValues = getFormattedRangeValues(rangeValues(), originalRefinerValue.DataTypeValue, originalRefinerValue.UnitText);
        var currentRange = ko.observable(Commerce.StringExtensions.format(rangeFormat, currentFormattedRangeValues[0], currentFormattedRangeValues[1]));
        var onSlide = function (event, selectedRangeValues) {
            currentRefinerValue.LeftValueBoundString = selectedRangeValues.values[0].toString();
            currentRefinerValue.RightValueBoundString = selectedRangeValues.values[1].toString();
            var curFormattedRangeValues = getFormattedRangeValues(selectedRangeValues.values, originalRefinerValue.DataTypeValue, originalRefinerValue.UnitText);
            currentRange(Commerce.StringExtensions.format(rangeFormat, curFormattedRangeValues[0], curFormattedRangeValues[1]));
            refiner.SelectedValues = [currentRefinerValue];
            $element.find(".ui-slider-handle").first().attr("aria-valuetext", Commerce.StringExtensions.format("{0} {1} ", minformatString, curFormattedRangeValues[0]));
            $element.find(".ui-slider-handle").last().attr("aria-valuetext", Commerce.StringExtensions.format("{0} {1} ", maxformatString, curFormattedRangeValues[1]));
        };
        var afterRefinerUIRender = function () {
            $element.find(".slider")[0].focus();
            $element.find(".ui-slider-handle").attr("role", "slider");
            $element.find(".ui-slider-handle").first().attr("aria-label", minformatString);
            $element.find(".ui-slider-handle").last().attr("aria-label", maxformatString);
            $element.find(".ui-slider-handle").first().attr("aria-valuetext", currentFormattedRangeValues[0]);
            $element.find(".ui-slider-handle").last().attr("aria-valuetext", currentFormattedRangeValues[1]);
        };
        var formattedRangeValues = getFormattedRangeValues(getRangeValues(originalRefinerValue), originalRefinerValue.DataTypeValue, originalRefinerValue.UnitText);
        ko.applyBindingsToNode(element, {
            template: {
                name: "sliderRefinerControlTemplate", data: {
                    refiner: refiner,
                    currentRange: currentRange,
                    rangeValues: rangeValues,
                    options: {
                        min: minValue,
                        max: maxValue,
                        range: true
                    },
                    formattedMin: formattedRangeValues[0],
                    formattedMax: formattedRangeValues[1],
                    sliderAttribute: sliderAttribute,
                    slide: onSlide
                }, afterRender: afterRefinerUIRender
            }
        });
        return { controlsDescendantBindings: true };
    }
};
var Commerce;
(function (Commerce) {
    var SplitViewPaneToggle;
    (function (SplitViewPaneToggle) {
        "use strict";
        ko.bindingHandlers.splitViewPaneToggle = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var $element = $(element);
                var value = valueAccessor();
                if (element.nodeName !== "BUTTON") {
                    throw "splitViewPaneToggle can only be used with <button></button> element.";
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(value)) {
                    throw new Error("options to splitViewPaneToggle binding must be defined.");
                }
                else if (!Commerce.ObjectExtensions.isFunction(value.onClick)) {
                    throw new Error("options.onClick to splitViewPaneToggle binding must be a function.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(value.splitViewElement)) {
                    throw new Error("options.splitViewElement to splitViewPaneToggle binding must be defined.");
                }
                $element.addClass("win-splitviewpanetoggle");
                var splitViewPaneToggleOptions = {
                    splitView: value.splitViewElement
                };
                var splitViewToggle = new WinJS.UI.SplitViewPaneToggle(element, splitViewPaneToggleOptions);
                splitViewToggle.addEventListener("invoked", function () {
                    value.onClick();
                    $element.find(".expandedNavButton").focus();
                });
                return { controlsDescendantBindings: true };
            }
        };
    })(SplitViewPaneToggle = Commerce.SplitViewPaneToggle || (Commerce.SplitViewPaneToggle = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var TemplateSwitcher;
        (function (TemplateSwitcher) {
            "use strict";
            var TemplateSwitcherViewModel = (function () {
                function TemplateSwitcherViewModel(element, anchorId, options) {
                    this.templateSwitcherMenu = ko.observable(null);
                    this.templateOptions = [];
                    this.templateSwitcherOptions = options;
                    this.toggleShowHideMenu = ko.observable(function () { return; });
                    this.anchorId = anchorId;
                }
                TemplateSwitcherViewModel.prototype.clickHandler = function (event) {
                    var _this = this;
                    if (Commerce.ObjectExtensions.isNullOrUndefined(this.dataListViewModel)) {
                        var $dataListElement = $(document).find(this.templateSwitcherOptions.listId);
                        if ($dataListElement.length === 0 || Commerce.ObjectExtensions.isNullOrUndefined($dataListElement[0].dataListViewModel)) {
                            throw "A valid data list id is a required parameter for the templateSwitcher control.";
                        }
                        this.dataListViewModel = $dataListElement[0].dataListViewModel;
                        this.templateOptions = this.dataListViewModel.getTemplates();
                        this.templateOptions.forEach(function (template) {
                            var buttonTemplate = document.createElement("div");
                            _this.templateSwitcherMenu().insertBefore(buttonTemplate, null);
                            ko.renderTemplate(TemplateSwitcherViewModel.menuOptionTemplate, template, {
                                afterRender: (function (nodes) {
                                    $(nodes).click(function () {
                                        _this.switchTemplate(template);
                                    });
                                }).bind(_this)
                            }, buttonTemplate, "replaceNode");
                        });
                    }
                    if ($(this.templateSwitcherMenu()).attr("aria-label") === "Menu" &&
                        $(this.templateSwitcherMenu()).attr("role") === "menu") {
                        $(this.templateSwitcherMenu()).attr("role", "presentation");
                    }
                    var currentDeviceType = this.dataListViewModel.getCurrentDeviceType();
                    this.templateOptions.forEach(function (template) {
                        if (template.templateId === _this.dataListViewModel.getCurrentTemplate().templateId ||
                            (template.deviceType !== currentDeviceType && template.deviceType !== Controls.DataList.DeviceType.All)) {
                            $(_this.templateSwitcherMenu()).find("#" + template.templateId).hide();
                        }
                        else {
                            $(_this.templateSwitcherMenu()).find("#" + template.templateId).show();
                        }
                    });
                    this.toggleShowHideMenu()();
                };
                TemplateSwitcherViewModel.prototype.switchTemplate = function (template) {
                    $(this.templateSwitcherMenu()).find("#" + template.templateId).hide();
                    $(this.templateSwitcherMenu()).find("#" + this.dataListViewModel.getCurrentTemplate().templateId).show();
                    this.dataListViewModel.switchTemplate(template);
                };
                TemplateSwitcherViewModel.menuOptionTemplate = "templateSwitcherMenuOptionTemplate";
                return TemplateSwitcherViewModel;
            }());
            TemplateSwitcher.TemplateSwitcherViewModel = TemplateSwitcherViewModel;
            var TemplateSwitcherControl = (function () {
                function TemplateSwitcherControl() {
                }
                TemplateSwitcherControl.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var options = ko.utils.unwrapObservable(valueAccessor()) || {};
                    if (Commerce.ObjectExtensions.isNullOrUndefined(options.listId)) {
                        throw "listId is a required parameter for the templateSwitcher control.";
                    }
                    var menuElement = document.createElement("div");
                    var $menuElement = $(menuElement);
                    $menuElement.addClass("templateSwitcher");
                    var templateSwitcherViewModel = new TemplateSwitcherViewModel(menuElement, element.id, options);
                    ko.applyBindingsToNode(menuElement, {
                        template: {
                            name: TemplateSwitcherControl.templateSwitcherTemplateName,
                            data: templateSwitcherViewModel
                        }
                    }, this);
                    document.body.insertBefore(menuElement, null);
                    $(element).click(templateSwitcherViewModel.clickHandler.bind(templateSwitcherViewModel));
                    ko.utils.domNodeDisposal.addDisposeCallback(element, function (e) {
                        document.body.removeChild(menuElement);
                    });
                    return { controlsDescendantBindings: true };
                };
                TemplateSwitcherControl.templateSwitcherTemplateName = "templateSwitcherMenuTemplate";
                return TemplateSwitcherControl;
            }());
            TemplateSwitcher.TemplateSwitcherControl = TemplateSwitcherControl;
            ko.bindingHandlers.templateSwitcher = new TemplateSwitcherControl();
        })(TemplateSwitcher = Controls.TemplateSwitcher || (Controls.TemplateSwitcher = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
ko.bindingHandlers.textAndTooltip = {
    init: function (element, valueAccessor) {
        setTextAndTooltip(element, valueAccessor);
    },
    update: function (element, valueAccessor) {
        setTextAndTooltip(element, valueAccessor);
    }
};
function setTextAndTooltip(element, valueAccessor) {
    var text = valueAccessor().toString();
    element.innerText = text;
    element.setAttribute("title", text);
}
ko.bindingHandlers.timestamp = {
    update: function (element, valueAccessor) {
        var value = ko.utils.unwrapObservable(valueAccessor()) || new Date();
        element.innerText = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_1146"), Commerce.Host.instance.globalization.getDateTimeFormatter(Commerce.Host.Globalization.DateTimeFormat.SHORT_DATE).format(value), Commerce.Host.instance.globalization.getDateTimeFormatter(Commerce.Host.Globalization.DateTimeFormat.SHORT_TIME).format(value));
    }
};
ko.bindingHandlers.validator = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var binding = ko.utils.unwrapObservable(valueAccessor()) || {};
        if (!Commerce.StringExtensions.isNullOrWhitespace(binding.field)) {
            var valueObject = binding.data ? binding.data[binding.field] : bindingContext.$data[binding.field];
            if (Commerce.ObjectExtensions.isNullOrUndefined(valueObject)) {
                throw "Unable to get '"
                    + binding.field
                    + "' property. Make sure that validator binding has either data attribute provided or has proper context.";
            }
            ko.applyBindingsToNode(element, { value: valueObject, valueUpdate: "afterkeydown" });
        }
        if (Commerce.ObjectExtensions.isNullOrUndefined(binding.validatorType)) {
            throw "validatorType attribute is not provided for validator binding.";
        }
        var validator = Object.create(Commerce.Proxy.Entities[binding.validatorType].prototype);
        validator.constructor.apply(validator);
        var field = binding.validatorField ? binding.validatorField : binding.field;
        validator.setValidationAttributes(element, field);
        return { controlsDescendantBindings: true };
    }
};
var Commerce;
(function (Commerce) {
    "use strict";
    var VariantMatrixViewModel = (function () {
        function VariantMatrixViewModel(matrixElement, matrixOptions, viewContext) {
            var _this = this;
            this.matrixElement = matrixElement;
            this.originalDimensionTypeValues = [];
            this.currentDimensions = matrixOptions.dimensions;
            this.itemsList = ko.observableArray([]);
            this.selectedDimension = ko.observable(null);
            this.dimensionMenuAnchor = ko.observable(null);
            this.isDimensionMenuVisible = ko.observable(false);
            this.areDimensionOptionsVisible = [];
            this.isBusy = ko.observable(false);
            this._skip = 0;
            this._pageSize = matrixOptions.pageSize;
            this._numberOfDimensionCombinations = 0;
            this._isPagingEventListenerAdded = false;
            this._isHorizontalScrollingListenerAdded = false;
            this._isRetrievingMoreData = false;
            this._cellCallerMethod = matrixOptions.cellCallerMethod.bind(viewContext);
            this.currentDimensions.forEach(function (dimension) {
                _this.areDimensionOptionsVisible.push(ko.observable(false));
                _this.originalDimensionTypeValues.push(dimension.ProductDimensions[0].DimensionTypeValue);
            });
            this._dimensionCombinations = this._createDimensionCombinations();
            this.dimensionCombinationsForDisplay = ko.observableArray(this._loadDimensionCombinationsForDisplay());
            this._createItemsList();
        }
        VariantMatrixViewModel.prototype.afterRender = function () {
            var headerWidth;
            if (this.currentDimensions.length > 1) {
                headerWidth = VariantMatrixViewModel.maxColumnWidth * this.currentDimensions[0].ProductDimensions.length;
            }
            else {
                headerWidth = VariantMatrixViewModel.maxColumnWidth + VariantMatrixViewModel.singleDimensionColumnWidth;
            }
            var topDimensionWidthClassId = Commerce.StringExtensions.format(VariantMatrixViewModel.topDimensionWidthClassIdStringTemplate, this.matrixElement.id);
            var topDimensionWidthClassContent = Commerce.StringExtensions.format(VariantMatrixViewModel.topDimensionWidthClassContentStringTemplate, this.matrixElement.id, headerWidth);
            Commerce.CSSHelpers.injectCss(topDimensionWidthClassId, topDimensionWidthClassContent);
            this._addPagingHandlers();
            this._addHorizontalScrollingHandlers();
        };
        VariantMatrixViewModel.prototype.dimensionClickHandler = function (dimension, context, clickEvent) {
            var _this = this;
            this.selectedDimension(dimension);
            this.originalDimensionTypeValues.forEach(function (dimensionTypeValue, index) {
                _this.areDimensionOptionsVisible[index](dimensionTypeValue
                    === _this.selectedDimension().ProductDimensions[0].DimensionTypeValue);
            });
            this.dimensionMenuAnchor(clickEvent.currentTarget);
            this.isDimensionMenuVisible(true);
        };
        VariantMatrixViewModel.prototype.pivotDimension = function (dimensionTarget) {
            var _this = this;
            var sourceIndex;
            var targetIndex;
            this.currentDimensions.forEach(function (dimension, index) {
                if (dimension.ProductDimensions[0].DimensionTypeValue === _this.selectedDimension().ProductDimensions[0].DimensionTypeValue) {
                    sourceIndex = index;
                }
                else if (dimension.ProductDimensions[0].DimensionTypeValue === dimensionTarget.ProductDimensions[0].DimensionTypeValue) {
                    targetIndex = index;
                }
            });
            if (!Commerce.ObjectExtensions.isNullOrUndefined(sourceIndex) && !Commerce.ObjectExtensions.isNullOrUndefined(targetIndex)
                && sourceIndex >= 0 && targetIndex >= 0) {
                var tempDimension = this.currentDimensions[sourceIndex];
                this.currentDimensions[sourceIndex] = this.currentDimensions[targetIndex];
                this.currentDimensions[targetIndex] = tempDimension;
                this._dimensionCombinations = this._createDimensionCombinations();
                this.dimensionCombinationsForDisplay(this._loadDimensionCombinationsForDisplay());
                this._skip = 0;
                this._createItemsList();
                this.afterRender();
            }
        };
        VariantMatrixViewModel.prototype.refreshMatrix = function (newDimensions) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(newDimensions)) {
                this.currentDimensions = newDimensions;
                this._dimensionCombinations = this._createDimensionCombinations();
                this.dimensionCombinationsForDisplay(this._loadDimensionCombinationsForDisplay());
            }
            this.dimensionCombinationsForDisplay(this._loadDimensionCombinationsForDisplay());
            this._skip = 0;
            this._createItemsList();
            this.afterRender();
        };
        VariantMatrixViewModel.prototype.dispose = function () {
            this._removePagingHandlers();
            this._removeHorizontalScrollingHandlers();
            Commerce.ObjectExtensions.disposeAllProperties(this);
        };
        VariantMatrixViewModel.prototype._addPagingHandlers = function () {
            if (!this._isPagingEventListenerAdded && this._numberOfDimensionCombinations > this._pageSize) {
                this._controlScrollYHandler = this._onScrollYHandler.bind(this);
                var $scrollYElement = $(this.matrixElement).find(VariantMatrixViewModel.scrollYClassString);
                if (!Commerce.ObjectExtensions.isNullOrUndefined($scrollYElement)) {
                    $scrollYElement[0].addEventListener("scroll", this._controlScrollYHandler);
                    $scrollYElement[0].addEventListener("resize", this._controlScrollYHandler);
                    this._isPagingEventListenerAdded = true;
                }
            }
        };
        VariantMatrixViewModel.prototype._addHorizontalScrollingHandlers = function () {
            if (!this._isHorizontalScrollingListenerAdded) {
                this._controlScrollXHandler = this._onScrollXHandler.bind(this);
                var $scrollXElement = $(this.matrixElement).find(VariantMatrixViewModel.scrollXClassString);
                if (!Commerce.ObjectExtensions.isNullOrUndefined($scrollXElement)) {
                    $scrollXElement[0].addEventListener("scroll", this._controlScrollXHandler);
                    $scrollXElement[0].addEventListener("resize", this._controlScrollXHandler);
                    this._isHorizontalScrollingListenerAdded = true;
                }
            }
        };
        VariantMatrixViewModel.prototype._removePagingHandlers = function () {
            if (this._isPagingEventListenerAdded) {
                var $scrollYElement = $(this.matrixElement).find(VariantMatrixViewModel.scrollYClassString);
                $scrollYElement[0].removeEventListener("scroll", this._controlScrollYHandler);
                $scrollYElement[0].removeEventListener("resize", this._controlScrollYHandler);
                this._isPagingEventListenerAdded = false;
            }
        };
        VariantMatrixViewModel.prototype._removeHorizontalScrollingHandlers = function () {
            if (this._isHorizontalScrollingListenerAdded) {
                var $scrollXElement = $(this.matrixElement).find(VariantMatrixViewModel.scrollXClassString);
                $scrollXElement[0].removeEventListener("scroll", this._controlScrollXHandler);
                $scrollXElement[0].removeEventListener("resize", this._controlScrollXHandler);
                this._isHorizontalScrollingListenerAdded = false;
            }
        };
        VariantMatrixViewModel.prototype._createItemsList = function () {
            this.itemsList([]);
            this._getMoreData();
        };
        VariantMatrixViewModel.prototype._createDimensionCombinations = function () {
            var dimensionCombinations = [];
            if (this.currentDimensions.length <= 2) {
                this.currentDimensions.forEach(function (dimension) {
                    dimensionCombinations.push(dimension);
                });
                this._numberOfDimensionCombinations = dimensionCombinations[dimensionCombinations.length - 1].ProductDimensions.length;
                return dimensionCombinations;
            }
            dimensionCombinations.push(this.currentDimensions[0]);
            var repeatValue = this.currentDimensions[2].ProductDimensions.length;
            for (var i = 3; i < this.currentDimensions.length; i++) {
                repeatValue *= this.currentDimensions[i].ProductDimensions.length;
            }
            var secondaryRepeatValue = this.currentDimensions[1].ProductDimensions.length;
            var firstDim = { ProductDimensions: [] };
            this.currentDimensions[1].ProductDimensions.forEach(function (value) {
                for (var i = 0; i < repeatValue; i++) {
                    firstDim.ProductDimensions.push(value);
                }
            });
            dimensionCombinations.push(firstDim);
            var _loop_5 = function (i) {
                repeatValue = repeatValue / this_3.currentDimensions[i].ProductDimensions.length;
                var dim = { ProductDimensions: [] };
                for (var j = 0; j < secondaryRepeatValue; j++) {
                    this_3.currentDimensions[i].ProductDimensions.forEach(function (value) {
                        for (var i_1 = 0; i_1 < repeatValue; i_1++) {
                            dim.ProductDimensions.push(value);
                        }
                    });
                }
                dimensionCombinations.push(dim);
                secondaryRepeatValue *= this_3.currentDimensions[i].ProductDimensions.length;
            };
            var this_3 = this;
            for (var i = 2; i < this.currentDimensions.length; i++) {
                _loop_5(i);
            }
            this._numberOfDimensionCombinations = dimensionCombinations[1].ProductDimensions.length;
            return dimensionCombinations;
        };
        VariantMatrixViewModel.prototype._loadDimensionCombinationsForDisplay = function () {
            var _this = this;
            var dimensionCombinations = [];
            this._dimensionCombinations.forEach(function (dimensionCombination, index) {
                if (index === 0 && _this._dimensionCombinations.length > 1) {
                    dimensionCombinations.push({
                        ProductDimensions: dimensionCombination.ProductDimensions
                    });
                }
                else {
                    var dimensionValues = [];
                    if (_this._numberOfDimensionCombinations < _this._pageSize) {
                        dimensionValues = dimensionCombination.ProductDimensions;
                    }
                    else {
                        for (var i = 0; i < _this._pageSize && i < dimensionCombination.ProductDimensions.length; i++) {
                            dimensionValues.push(dimensionCombination.ProductDimensions[i]);
                        }
                    }
                    dimensionCombinations.push({
                        ProductDimensions: dimensionValues
                    });
                }
            });
            return dimensionCombinations;
        };
        VariantMatrixViewModel.prototype._getMoreData = function () {
            var _this = this;
            if (!this._isRetrievingMoreData) {
                this._isRetrievingMoreData = true;
                this.isBusy(true);
                var dimensions_1 = [];
                for (var i = this._skip; i < this._pageSize + this._skip && i < this._numberOfDimensionCombinations; i++) {
                    var dimensionValues = [];
                    var j = (this._dimensionCombinations.length === 1) ? 0 : 1;
                    for (j; j < this._dimensionCombinations.length; j++) {
                        dimensionValues.push(this._dimensionCombinations[j].ProductDimensions[i]);
                    }
                    dimensions_1.push({ ProductDimensions: dimensionValues });
                }
                var topDimensionValues_1;
                if (this.currentDimensions.length > 1) {
                    topDimensionValues_1 = this._dimensionCombinations[0].ProductDimensions;
                }
                else {
                    topDimensionValues_1 = [];
                }
                var productDimensionCombinations_1 = new Array();
                var productDimensionCombination_1;
                if (Commerce.ArrayExtensions.hasElements(topDimensionValues_1)) {
                    dimensions_1.forEach(function (dimensionCombination) {
                        topDimensionValues_1.forEach(function (topDimension) {
                            productDimensionCombination_1 = { ProductDimensions: dimensionCombination.ProductDimensions.concat(topDimension) };
                            productDimensionCombinations_1.push(productDimensionCombination_1);
                        });
                    });
                }
                else {
                    productDimensionCombinations_1 = dimensions_1;
                }
                this._cellCallerMethod(productDimensionCombinations_1).done(function (result) {
                    var matrixColumnCount = Commerce.ArrayExtensions.hasElements(topDimensionValues_1) ? topDimensionValues_1.length : 1;
                    dimensions_1.forEach(function (dimension, index) {
                        _this.itemsList.push(result.slice(index * matrixColumnCount, (index + 1) * matrixColumnCount));
                    });
                    _this._skip += _this._pageSize;
                    var startIndex = (_this._dimensionCombinations.length === 1) ? 0 : 1;
                    if (_this.dimensionCombinationsForDisplay()[startIndex].ProductDimensions.length < _this._skip
                        && _this.dimensionCombinationsForDisplay()[startIndex].ProductDimensions.length < _this._numberOfDimensionCombinations) {
                        _this.dimensionCombinationsForDisplay().forEach(function (dimension, dimensionIndex) {
                            if (dimensionIndex !== 0 || startIndex === 0) {
                                var dimensionValues_1 = _this.dimensionCombinationsForDisplay()[dimensionIndex].ProductDimensions;
                                dimensions_1.forEach(function (dimension, dimensionValueIndex) {
                                    dimensionValues_1.push(dimension.ProductDimensions[dimensionIndex - startIndex]);
                                });
                                _this.dimensionCombinationsForDisplay()[dimensionIndex] =
                                    { ProductDimensions: dimensionValues_1 };
                            }
                        });
                        _this.dimensionCombinationsForDisplay.valueHasMutated();
                    }
                    var numRowsInViewPort = _this._getNumberOfRowsInViewport();
                    if (_this._skip < _this._numberOfDimensionCombinations && (_this._skip <= numRowsInViewPort || _this._isLastRowVisible())) {
                        _this._isRetrievingMoreData = false;
                        _this._getMoreData();
                    }
                    if (_this._skip >= _this._numberOfDimensionCombinations) {
                        _this._removePagingHandlers();
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                }).always(function () {
                    _this._isRetrievingMoreData = false;
                    _this.isBusy(false);
                });
            }
        };
        VariantMatrixViewModel.prototype._onScrollYHandler = function () {
            if (this._isLastRowVisible()) {
                this._getMoreData();
            }
        };
        VariantMatrixViewModel.prototype._onScrollXHandler = function () {
            var $topDimensionValuesRowElement = $(this.matrixElement).find(VariantMatrixViewModel.topDimensionValuesRowClassString);
            var $scrollXElement = $(this.matrixElement).find(VariantMatrixViewModel.scrollXClassString);
            if (Commerce.CSSHelpers.isRightToLeft()) {
                $topDimensionValuesRowElement.css("right", (-1) * $scrollXElement.scrollLeft());
            }
            else {
                $topDimensionValuesRowElement.css("left", (-1) * $scrollXElement.scrollLeft());
            }
        };
        VariantMatrixViewModel.prototype._isLastRowVisible = function () {
            var $scrollElement = $(this.matrixElement).find(VariantMatrixViewModel.scrollYClassString);
            var $lastRowElement = $(this.matrixElement).find(VariantMatrixViewModel.matrixRowClassString + (this.itemsList().length - 1));
            var isLastRowVisible = false;
            if (!Commerce.ObjectExtensions.isNullOrUndefined($scrollElement[0]) && !Commerce.ObjectExtensions.isNullOrUndefined($lastRowElement[0])) {
                var scrollTopPosition = $scrollElement.scrollTop() + $scrollElement[0].offsetTop;
                var scrollBottomPosition = $scrollElement.scrollTop() + $scrollElement[0].offsetTop + $scrollElement.height();
                var lastRowTopPosition = $lastRowElement[0].offsetTop;
                isLastRowVisible = (lastRowTopPosition >= scrollTopPosition) && (lastRowTopPosition <= scrollBottomPosition);
            }
            return isLastRowVisible;
        };
        VariantMatrixViewModel.prototype._getNumberOfRowsInViewport = function () {
            var numberOfRows = 0;
            var $scrollElement = $(this.matrixElement).find(VariantMatrixViewModel.scrollYClassString);
            if (!Commerce.ObjectExtensions.isNullOrUndefined($scrollElement)) {
                var scrollHeight = $scrollElement.height();
                var rowHeight = VariantMatrixViewModel.rowHeight;
                numberOfRows = scrollHeight / rowHeight;
            }
            return numberOfRows;
        };
        VariantMatrixViewModel.rowHeight = 80;
        VariantMatrixViewModel.maxColumnWidth = 296;
        VariantMatrixViewModel.singleDimensionColumnWidth = 148;
        VariantMatrixViewModel.topDimensionValuesRowClassString = ".topDimensionValuesRow";
        VariantMatrixViewModel.scrollYClassString = ".scrollY";
        VariantMatrixViewModel.scrollXClassString = ".scrollX";
        VariantMatrixViewModel.matrixRowClassString = ".matrixRow";
        VariantMatrixViewModel.topDimensionWidthClassIdStringTemplate = "variantMatrix{0}TopDimensionWidth";
        VariantMatrixViewModel.topDimensionWidthClassContentStringTemplate = "#{0}.variantMatrix .topDimensionWidth { max-width: {1}px; }";
        return VariantMatrixViewModel;
    }());
    Commerce.VariantMatrixViewModel = VariantMatrixViewModel;
    var VariantMatrixControl = (function () {
        function VariantMatrixControl() {
        }
        VariantMatrixControl.createAfterRender = function ($element, options, viewModel) {
            return function (element) {
                viewModel.afterRender();
                $element.keydown(function (event) {
                    var anyKeyPressHandled = false;
                    if ((event.keyCode === 13 || event.keyCode === 108)) {
                        $(event.target)[0].click();
                        anyKeyPressHandled = true;
                    }
                    if (anyKeyPressHandled) {
                        event.preventDefault();
                        event.stopImmediatePropagation();
                        return false;
                    }
                });
            };
        };
        VariantMatrixControl.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var options = ko.utils.unwrapObservable(valueAccessor()) || {};
            if (Commerce.StringExtensions.isNullOrWhitespace(element.id)) {
                throw "Invalid options passed to the VariantMatrix control: id cannot be null or undefined.";
            }
            else if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                throw "Invalid options passed to the VariantMatrix control: options cannot be null or undefined.";
            }
            else if (Commerce.ObjectExtensions.isNullOrUndefined(options.dimensions)) {
                throw "Invalid options passed to the VariantMatrix control: dimensions cannot be null or undefined.";
            }
            else if (Commerce.ObjectExtensions.isNullOrUndefined(options.cellTemplateId)) {
                throw "Invalid options passed to the VariantMatrix control: cellTemplateId cannot be null or undefined.";
            }
            else if (Commerce.ObjectExtensions.isNullOrUndefined(options.cellClickHandler)) {
                throw "Invalid options passed to the VariantMatrix control: cellClickHandler cannot be null or undefined.";
            }
            else if (Commerce.ObjectExtensions.isNullOrUndefined(options.cellCallerMethod)) {
                throw "Invalid options passed to the VariantMatrix control: cellCallerMethod cannot be null or undefined.";
            }
            else if (Commerce.ObjectExtensions.isNullOrUndefined(options.pageSize)) {
                throw "Invalid options passed to the VariantMatrix control: pageSize cannot be null or undefined.";
            }
            else if (Commerce.ObjectExtensions.isNullOrUndefined(options.isCellSlashStyleVisible)) {
                options.isCellSlashStyleVisible = function (item) {
                    return false;
                };
            }
            var variantMatrixViewModel = new VariantMatrixViewModel(element, options, viewModel);
            var matrixOptions = {
                options: options,
                itemsList: variantMatrixViewModel.itemsList,
                dimensions: variantMatrixViewModel.dimensionCombinationsForDisplay,
                matrixViewModel: variantMatrixViewModel,
                viewContext: viewModel
            };
            var afterRender = VariantMatrixControl.createAfterRender($(element), options, variantMatrixViewModel);
            ko.applyBindingsToNode(element, {
                template: {
                    name: VariantMatrixControl.variantMatrixTemplateName,
                    data: matrixOptions,
                    afterRender: afterRender
                }
            });
            element.variantMatrixViewModel = variantMatrixViewModel;
            $(element).addClass("variantMatrix");
            var menuElement = document.createElement("div");
            ko.applyBindingsToNode(menuElement, {
                template: {
                    name: VariantMatrixControl.dimensionMenuTemplateName,
                    data: matrixOptions
                }
            }, this);
            document.body.insertBefore(menuElement, null);
            ko.utils.domNodeDisposal.addDisposeCallback(element, function (e) {
                document.body.removeChild(menuElement);
                variantMatrixViewModel.dispose();
            });
            return { controlsDescendantBindings: true };
        };
        VariantMatrixControl.variantMatrixTemplateName = "variantMatrixTemplate";
        VariantMatrixControl.dimensionMenuTemplateName = "dimensionMenuTemplate";
        return VariantMatrixControl;
    }());
    Commerce.VariantMatrixControl = VariantMatrixControl;
    ko.bindingHandlers.variantMatrix = new VariantMatrixControl();
})(Commerce || (Commerce = {}));
ko.bindingHandlers.withCustomerPanelTillLayout = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var $element = $(element);
        var boundLayoutData = $element.closest("div[tillLayoutItem]").data("tillLayoutItem") ||
            $element.closest("div[layoutData]").data("layoutData");
        var layoutData;
        if (Commerce.ObjectExtensions.isNullOrUndefined(boundLayoutData)) {
            layoutData = {
                ShowImage: true,
                ShowName: true,
                ShowAccountNumber: true,
                ShowLoyaltyCard: true,
                ShowBalance: true,
                ShowCreditLimit: true,
                AddressType: 1,
                SelectedCustomerFields: [{
                        "__type": "ControlField:#Microsoft.Dynamics.Retail.TillLayoutDesigner.Contracts.Controls",
                        "AttributeName": null,
                        "AttributeTypeName": null,
                        "ID": "LoyaltyCardField",
                        "IsCustomAttribute": false,
                        "Width": 0
                    }, {
                        "__type": "ControlField:#Microsoft.Dynamics.Retail.TillLayoutDesigner.Contracts.Controls",
                        "AttributeName": null,
                        "AttributeTypeName": null,
                        "ID": "BalanceField",
                        "IsCustomAttribute": false,
                        "Width": 0
                    }, {
                        "__type": "ControlField:#Microsoft.Dynamics.Retail.TillLayoutDesigner.Contracts.Controls",
                        "AttributeName": null,
                        "AttributeTypeName": null,
                        "ID": "CreditLimitField",
                        "IsCustomAttribute": false,
                        "Width": 0
                    }
                ]
            };
        }
        else {
            layoutData = {
                ShowImage: boundLayoutData.ShowImage,
                ShowName: boundLayoutData.ShowName,
                ShowAccountNumber: boundLayoutData.ShowAccountNumber,
                ShowLoyaltyCard: boundLayoutData.ShowLoyaltyCard,
                ShowBalance: boundLayoutData.ShowBalance,
                ShowCreditLimit: boundLayoutData.ShowCreditLimit,
                AddressType: boundLayoutData.AddressType,
                SelectedCustomerFields: boundLayoutData.SelectedCustomerFields
            };
        }
        var childBindingContext = bindingContext.createChildContext(layoutData);
        ko.applyBindingsToDescendants(childBindingContext, element);
        return { controlsDescendantBindings: true };
    }
};
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var WithPairs = (function () {
            function WithPairs() {
            }
            WithPairs.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var value = ko.utils.unwrapObservable(valueAccessor()) || {};
                var data = ko.isObservable(value.data) ? value.data : ko.observable(value.data);
                var pairData = WithPairs.getDataPairs(data);
                var childBindingContext = bindingContext.createChildContext(pairData);
                ko.applyBindingsToDescendants(childBindingContext, element);
                return { controlsDescendantBindings: true };
            };
            WithPairs.getDataPairs = function (data) {
                return ko.computed(function () {
                    var dataPairs = [];
                    if (Commerce.ArrayExtensions.hasElements(data())) {
                        for (var i = 0; i < data().length; i += 2) {
                            var firstData = data()[i];
                            var secondData = (i + 1 < data().length) ? data()[i + 1] : null;
                            dataPairs.push({ first: firstData, second: secondData });
                        }
                    }
                    return dataPairs;
                });
            };
            return WithPairs;
        }());
        ko.bindingHandlers.withPairs = WithPairs;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var ListView;
        (function (ListView) {
            var DisplayMode;
            (function (DisplayMode) {
                DisplayMode[DisplayMode["Simple"] = 0] = "Simple";
                DisplayMode[DisplayMode["Expandable"] = 1] = "Expandable";
                DisplayMode[DisplayMode["AlwaysExpanded"] = 2] = "AlwaysExpanded";
                DisplayMode[DisplayMode["AlwaysExpandedWithCheckbox"] = 3] = "AlwaysExpandedWithCheckbox";
            })(DisplayMode = ListView.DisplayMode || (ListView.DisplayMode = {}));
        })(ListView = Controls.ListView || (Controls.ListView = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var Loader;
        (function (Loader) {
            "use strict";
            var LoaderColor;
            (function (LoaderColor) {
                LoaderColor[LoaderColor["White"] = 1] = "White";
                LoaderColor[LoaderColor["Accent"] = 2] = "Accent";
            })(LoaderColor = Loader.LoaderColor || (Loader.LoaderColor = {}));
            var LoaderType;
            (function (LoaderType) {
                LoaderType[LoaderType["Page"] = 1] = "Page";
                LoaderType[LoaderType["Nested"] = 2] = "Nested";
                LoaderType[LoaderType["Dialog"] = 3] = "Dialog";
                LoaderType[LoaderType["NestedWithBackground"] = 4] = "NestedWithBackground";
            })(LoaderType = Loader.LoaderType || (Loader.LoaderType = {}));
        })(Loader = Controls.Loader || (Controls.Loader = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var Loader;
        (function (Loader) {
            "use strict";
            var LoaderBindingHandler = (function () {
                function LoaderBindingHandler() {
                }
                LoaderBindingHandler.hasLoader = function (element, loaderType, onlyVisible) {
                    var loaderTypeClass = LoaderBindingHandler.getLoaderTypeClass(loaderType);
                    var loaders = $(element).find("." + loaderTypeClass + " > ." + LoaderBindingHandler.loaderClass);
                    var hasLoader = false;
                    if (onlyVisible) {
                        loaders.each(function (index, elem) {
                            hasLoader = hasLoader || Commerce.CSSHelpers.isVisible(elem);
                        });
                    }
                    else {
                        hasLoader = loaders.length > 0;
                    }
                    return hasLoader;
                };
                LoaderBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var options = ko.utils.unwrapObservable(valueAccessor() || {});
                    options.delayedAppearance = options.delayedAppearance || false;
                    options.color = options.color || Loader.LoaderColor.Accent;
                    options.type = options.type || Loader.LoaderType.Page;
                    options.isSmall = Commerce.ObjectExtensions.isNullOrUndefined(options.isSmall) ? false : options.isSmall;
                    var $element = $(element);
                    var data = {
                        isSmall: options.isSmall,
                        innerCircleClass: Commerce.StringExtensions.format(LoaderBindingHandler.innerCircleClassFormat, LoaderBindingHandler.colors[options.color - 1])
                    };
                    var template = {
                        name: LoaderBindingHandler.templateName,
                        data: data
                    };
                    ko.applyBindingsToNode(element, { template: template });
                    var loaderClass = LoaderBindingHandler.getLoaderTypeClass(options.type);
                    if (Commerce.StringExtensions.isNullOrWhitespace(loaderClass)) {
                        throw new Error(Commerce.StringExtensions.format("Unknown loader type {0}", options.type));
                    }
                    switch (options.type) {
                        case Loader.LoaderType.Nested:
                        case Loader.LoaderType.NestedWithBackground:
                            $element.parent().css("position", "relative");
                            break;
                    }
                    LoaderBindingHandler.setTabIndex($element, options);
                    $element.addClass(loaderClass);
                    $element.attr("aria-label", Commerce.ViewModelAdapter.getResourceString("string_525"));
                    $element.on("keydown", function (event) {
                        var data = [];
                        for (var _i = 1; _i < arguments.length; _i++) {
                            data[_i - 1] = arguments[_i];
                        }
                        if (options.type !== Loader.LoaderType.Nested) {
                            event.preventDefault();
                        }
                    });
                    element.focusManager = new Controls.FocusManager(options.delayOnReturnFocus);
                    LoaderBindingHandler.toggleElementVisibility($element, options);
                    return { controlsDescendantBindings: true };
                };
                LoaderBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var $element = $(element);
                    var options = ko.utils.unwrapObservable(valueAccessor() || {});
                    LoaderBindingHandler.toggleElementVisibility($element, options);
                    ko.utils.domNodeDisposal.addDisposeCallback(element, function (e) {
                        var currentElement = element;
                        currentElement.focusManager = null;
                    });
                    return { controlsDescendantBindings: true };
                };
                LoaderBindingHandler.toggleElementVisibility = function ($element, options) {
                    var isVisible = $element.css("display") !== "none";
                    var optionVisible = ko.utils.unwrapObservable(options.visible) || false;
                    var restoreFocus = Commerce.ObjectExtensions.isBoolean(options.restoreFocus) ? options.restoreFocus : true;
                    var manageFocus = Commerce.ObjectExtensions.isBoolean(options.manageFocus) ? options.manageFocus : true;
                    if (optionVisible !== isVisible) {
                        if (options.delayedAppearance) {
                            if (!isVisible) {
                                $element.css("opacity", "0");
                                $element.delayedAppearanceTimer = setTimeout(function () {
                                    $element.css("opacity", "1");
                                    $element.delayedAppearanceTimer = undefined;
                                }, 1000);
                            }
                            else {
                                clearTimeout($element.delayedAppearanceTimer);
                                $element.delayedAppearanceTimer = undefined;
                            }
                        }
                        $element.toggle();
                    }
                    var targetElementVisibilityState;
                    if (ko.isObservable(options.visible)) {
                        targetElementVisibilityState = options.visible;
                    }
                    else if (Commerce.ObjectExtensions.isBoolean(options.visible)) {
                        targetElementVisibilityState = ko.observable(options.visible);
                    }
                    if (!LoaderBindingHandler.isNestedLoaderType(options.type) && manageFocus) {
                        var currentElement = $element.get(0);
                        var focusManager = currentElement.focusManager;
                        if (optionVisible) {
                            focusManager.stealFocus($element.get(0), function () { return targetElementVisibilityState(); });
                        }
                        else {
                            if (restoreFocus) {
                                focusManager.returnFocus();
                            }
                        }
                    }
                };
                LoaderBindingHandler.setTabIndex = function ($element, options) {
                    var tabIndex = "tabindex";
                    if (LoaderBindingHandler.isNestedLoaderType(options.type) || (!Commerce.StringExtensions.isNullOrWhitespace($element.attr(tabIndex)))) {
                        return;
                    }
                    $element.attr(tabIndex, "-1");
                };
                LoaderBindingHandler.isNestedLoaderType = function (loaderType) {
                    return loaderType === Loader.LoaderType.Nested || loaderType === Loader.LoaderType.NestedWithBackground;
                };
                LoaderBindingHandler.getLoaderTypeClass = function (loaderType) {
                    var loaderTypeClass;
                    switch (loaderType) {
                        case Loader.LoaderType.Page:
                            loaderTypeClass = LoaderBindingHandler.pageLoaderClass;
                            break;
                        case Loader.LoaderType.Nested:
                            loaderTypeClass = LoaderBindingHandler.nestedLoaderClass;
                            break;
                        case Loader.LoaderType.NestedWithBackground:
                            loaderTypeClass = LoaderBindingHandler.nestedLoaderWithBackgroundClass;
                            break;
                        case Loader.LoaderType.Dialog:
                            loaderTypeClass = LoaderBindingHandler.dialogLoaderClass;
                            break;
                        default:
                            loaderTypeClass = null;
                            break;
                    }
                    return loaderTypeClass;
                };
                LoaderBindingHandler.pageLoaderClass = "page-loader";
                LoaderBindingHandler.nestedLoaderClass = "nested-loader";
                LoaderBindingHandler.nestedLoaderWithBackgroundClass = "nested-loader-with-background";
                LoaderBindingHandler.dialogLoaderClass = "dialog-loader";
                LoaderBindingHandler.loaderClass = "loader";
                LoaderBindingHandler.templateName = "loader-template";
                LoaderBindingHandler.innerCircleClassFormat = "inner-circle {0}";
                LoaderBindingHandler.colors = ["inner-circle-white", "accentBackground"];
                return LoaderBindingHandler;
            }());
            Loader.LoaderBindingHandler = LoaderBindingHandler;
        })(Loader = Controls.Loader || (Controls.Loader = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var LoaderWithCheckmark;
        (function (LoaderWithCheckmark) {
            "use strict";
            var LoaderWithCheckmarkStatus;
            (function (LoaderWithCheckmarkStatus) {
                LoaderWithCheckmarkStatus[LoaderWithCheckmarkStatus["InProgress"] = 1] = "InProgress";
                LoaderWithCheckmarkStatus[LoaderWithCheckmarkStatus["Completed"] = 2] = "Completed";
                LoaderWithCheckmarkStatus[LoaderWithCheckmarkStatus["Hidden"] = 3] = "Hidden";
            })(LoaderWithCheckmarkStatus = LoaderWithCheckmark.LoaderWithCheckmarkStatus || (LoaderWithCheckmark.LoaderWithCheckmarkStatus = {}));
        })(LoaderWithCheckmark = Controls.LoaderWithCheckmark || (Controls.LoaderWithCheckmark = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var LoaderWithCheckmark;
        (function (LoaderWithCheckmark) {
            "use strict";
        })(LoaderWithCheckmark = Controls.LoaderWithCheckmark || (Controls.LoaderWithCheckmark = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var LoaderWithCheckmark;
        (function (LoaderWithCheckmark) {
            "use strict";
            var LoaderWithCheckmarkBindingHandler = (function () {
                function LoaderWithCheckmarkBindingHandler() {
                }
                LoaderWithCheckmarkBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var options = ko.utils.unwrapObservable(valueAccessor() || {});
                    var loaderStatus = options.loaderStatus || ko.observable(LoaderWithCheckmark.LoaderWithCheckmarkStatus.InProgress);
                    var loaderLabel = options.loaderLabel || ko.observable(Commerce.StringExtensions.EMPTY);
                    var template = {
                        name: LoaderWithCheckmarkBindingHandler.templateName,
                        data: { loaderStatus: loaderStatus, loaderLabel: loaderLabel },
                    };
                    ko.applyBindingsToNode(element, { template: template });
                    return { controlsDescendantBindings: true };
                };
                LoaderWithCheckmarkBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var options = ko.utils.unwrapObservable(valueAccessor() || {});
                    var $element = $(element);
                    var $loaderWithCheckmarkElement = $element.find(".checkmarkRoot").last();
                    if (options.loaderStatus() === LoaderWithCheckmark.LoaderWithCheckmarkStatus.Completed) {
                        $loaderWithCheckmarkElement.on("animationend", function () {
                            options.loaderStatus(LoaderWithCheckmark.LoaderWithCheckmarkStatus.Hidden);
                        });
                    }
                    if (options.loaderStatus() === LoaderWithCheckmark.LoaderWithCheckmarkStatus.Hidden && Commerce.ObjectExtensions.isFunction(options.onHiddenCallback)) {
                        options.onHiddenCallback.call(viewModel);
                    }
                };
                LoaderWithCheckmarkBindingHandler.templateName = "loaderWithCheckmarkTemplate";
                return LoaderWithCheckmarkBindingHandler;
            }());
            LoaderWithCheckmark.LoaderWithCheckmarkBindingHandler = LoaderWithCheckmarkBindingHandler;
        })(LoaderWithCheckmark = Controls.LoaderWithCheckmark || (Controls.LoaderWithCheckmark = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
ko.bindingHandlers.loaderWithCheckmark = new Commerce.Controls.LoaderWithCheckmark.LoaderWithCheckmarkBindingHandler();
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var Menu;
        (function (Menu) {
            "use strict";
        })(Menu = Controls.Menu || (Controls.Menu = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var Menu;
        (function (Menu) {
            "use strict";
        })(Menu = Controls.Menu || (Controls.Menu = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var Menu;
        (function (Menu) {
            "use strict";
        })(Menu = Controls.Menu || (Controls.Menu = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var Menu;
        (function (Menu) {
            "use strict";
        })(Menu = Controls.Menu || (Controls.Menu = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var Menu;
        (function (Menu_1) {
            "use strict";
            var DirectionalHint = Commerce.Extensibility.DirectionalHint;
            var Menu = (function (_super) {
                __extends(Menu, _super);
                function Menu(options) {
                    var _this = _super.call(this) || this;
                    _this._anchorElement = ko.observable(null);
                    _this._visible = ko.observable(false);
                    _this._directionalHint = options.directionalHint;
                    _this._menuCommands = options.commands;
                    var internalMenuCommands = _this._menuCommands.map(function (value, index) {
                        return {
                            id: value.id,
                            label: value.label,
                            selected: value.selected,
                            type: _this._type,
                            onClick: function () {
                                _this._raiseEvent("CommandInvoked", { id: value.id });
                            },
                            canExecute: value.canExecute
                        };
                    });
                    _this._internalMenuCommandsById = new Commerce.Dictionary();
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(internalMenuCommands)) {
                        internalMenuCommands.forEach(function (command) {
                            _this._internalMenuCommandsById.setItem(command.id, command);
                        });
                    }
                    if (Commerce.ObjectExtensions.isNullOrUndefined(options.type)) {
                        _this._type = "button";
                    }
                    else {
                        _this._type = options.type;
                    }
                    return _this;
                }
                Object.defineProperty(Menu.prototype, "menuCommands", {
                    get: function () {
                        return this._menuCommands.slice();
                    },
                    enumerable: true,
                    configurable: true
                });
                Menu.prototype.show = function (anchorElement) {
                    var _this = this;
                    if (Commerce.ObjectExtensions.isNullOrUndefined(anchorElement)) {
                        throw new Error("Invalid options passed to the Menu 'show' method: anchorElement cannot be null or undefined.");
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this.menuCommands)) {
                        this.menuCommands.forEach(function (command) {
                            var foundCommand = _this._internalMenuCommandsById.getItem(command.id);
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(foundCommand)) {
                                foundCommand.canExecute = command.canExecute;
                            }
                        });
                    }
                    this._anchorElement(anchorElement);
                    this._visible(true);
                };
                Menu.prototype.render = function (rootElement) {
                    var menuOptions = {
                        anchor: "",
                        anchorElement: this._anchorElement,
                        alignment: this._alignment,
                        placement: this._placement,
                        visible: this._visible,
                        commands: this._internalMenuCommandsById.getItems()
                    };
                    if (this._type === "toggle") {
                        this._renderBinding("toggleMenu", menuOptions, rootElement);
                    }
                    else {
                        this._renderBinding("menu", menuOptions, rootElement);
                    }
                };
                Object.defineProperty(Menu.prototype, "_alignment", {
                    get: function () {
                        var menuAlignment;
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(this._directionalHint)) {
                            switch (this._directionalHint) {
                                case DirectionalHint.TopLeftEdge:
                                case DirectionalHint.BottomLeftEdge:
                                    menuAlignment = "left";
                                    break;
                                case DirectionalHint.BottomRightEdge:
                                case DirectionalHint.TopRightEdge:
                                    menuAlignment = "right";
                                    break;
                                case DirectionalHint.TopCenter:
                                case DirectionalHint.BottomCenter:
                                case DirectionalHint.LeftCenter:
                                case DirectionalHint.RightCenter:
                                    menuAlignment = "center";
                                    break;
                            }
                        }
                        return menuAlignment;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Menu.prototype, "_placement", {
                    get: function () {
                        var menuPlacement;
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(this._directionalHint)) {
                            switch (this._directionalHint) {
                                case DirectionalHint.TopLeftEdge:
                                case DirectionalHint.TopRightEdge:
                                case DirectionalHint.TopCenter:
                                    menuPlacement = "top";
                                    break;
                                case DirectionalHint.BottomLeftEdge:
                                case DirectionalHint.BottomRightEdge:
                                case DirectionalHint.BottomCenter:
                                    menuPlacement = "bottom";
                                    break;
                                case DirectionalHint.LeftCenter:
                                    menuPlacement = "left";
                                    break;
                                case DirectionalHint.RightCenter:
                                    menuPlacement = "right";
                                    break;
                                case DirectionalHint.Auto:
                                    menuPlacement = "auto";
                                    break;
                            }
                        }
                        return menuPlacement;
                    },
                    enumerable: true,
                    configurable: true
                });
                return Menu;
            }(Controls.ControlBase));
            Menu_1.Menu = Menu;
        })(Menu = Controls.Menu || (Controls.Menu = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var Menu;
        (function (Menu) {
            "use strict";
            var MenuBindingHandler = (function () {
                function MenuBindingHandler() {
                }
                MenuBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var options = ko.utils.unwrapObservable(valueAccessor()) || {};
                    var disposables = [];
                    $(element).addClass("menu");
                    ko.applyBindingsToDescendants(bindingContext, element);
                    if (Commerce.StringExtensions.isNullOrWhitespace(options.anchor) &&
                        Commerce.ObjectExtensions.isNullOrUndefined(options.anchorElement)) {
                        throw new Error("MenuBindingHandler: The parameter 'anchor' or 'anchorElement' must be defined");
                    }
                    if (Commerce.ObjectExtensions.isNullOrUndefined(options.placement)) {
                        options.placement = "auto";
                    }
                    if (Commerce.ObjectExtensions.isNullOrUndefined(options.alignment)) {
                        options.alignment = "center";
                    }
                    if ((options.alignment === "right" || options.alignment === "left") && Commerce.CSSHelpers.isRightToLeft()) {
                        options.alignment = (options.alignment === "right") ? "left" : "right";
                    }
                    if (Commerce.ArrayExtensions.hasElements(options.commands)) {
                        options.commands.forEach(function (value) {
                            var winJsCommandOption = value;
                            winJsCommandOption.onclick = value.onClick;
                            if (Commerce.ObjectExtensions.isString(value.label) && !Commerce.StringExtensions.isNullOrWhitespace(value.label)) {
                                winJsCommandOption.tooltip = value.label;
                            }
                            if (Commerce.ObjectExtensions.isBoolean(value.canExecute) && !value.canExecute) {
                                winJsCommandOption.disabled = true;
                            }
                            else {
                                winJsCommandOption.disabled = false;
                            }
                        });
                    }
                    var menuWinControl = new WinJS.UI.Menu(element, options);
                    if (ko.isObservable(options.visible)) {
                        disposables.push(options.visible.subscribe(function (newValue) {
                            var menuControlReference = menuWinControl;
                            if (newValue === true) {
                                if (Commerce.ArrayExtensions.hasElements(options.commands)) {
                                    options.commands.forEach(function (value) {
                                        if (!Commerce.ObjectExtensions.isNullOrUndefined(value.id)) {
                                            var menuCommand = menuControlReference.getCommandById(value.id);
                                            if (!Commerce.ObjectExtensions.isNullOrUndefined(value.canExecute) && !value.canExecute) {
                                                menuCommand.disabled = true;
                                            }
                                            else {
                                                menuCommand.disabled = false;
                                            }
                                        }
                                    });
                                }
                                var anchorElement = void 0;
                                if (ko.isObservable(options.anchorElement) && !Commerce.ObjectExtensions.isNullOrUndefined(options.anchorElement())) {
                                    anchorElement = options.anchorElement();
                                }
                                else {
                                    anchorElement = $(options.anchor).get(0);
                                }
                                menuControlReference.show(anchorElement, options.placement, options.alignment);
                                options.visible(false);
                            }
                        }));
                    }
                    var toggleShowHide = function () {
                        if (element.winControl.hidden) {
                            element.winControl.show($(element.winControl.anchor)[0], element.winControl.placement, element.winControl.alignment);
                        }
                        else {
                            element.winControl.hide();
                        }
                    };
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(options.toggleShowHide)) {
                        options.toggleShowHide(toggleShowHide);
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(options.itemDataSource) &&
                        !Commerce.ObjectExtensions.isNullOrUndefined(options.template)) {
                        ko.applyBindingsToNode(element, {
                            template: {
                                name: options.template,
                                foreach: options.itemDataSource
                            }
                        }, this);
                    }
                    ko.utils.domNodeDisposal.addDisposeCallback(element, function (e) {
                        if (Commerce.ArrayExtensions.hasElements(disposables)) {
                            disposables.forEach(function (disposableObject) {
                                Commerce.ObjectExtensions.tryDispose(disposableObject);
                            });
                        }
                        if (element.winControl) {
                            Commerce.ObjectExtensions.tryDispose(element.winControl);
                        }
                    });
                    return { controlsDescendantBindings: true };
                };
                return MenuBindingHandler;
            }());
            Menu.MenuBindingHandler = MenuBindingHandler;
        })(Menu = Controls.Menu || (Controls.Menu = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var Menu;
        (function (Menu) {
            "use strict";
            var MenuCommandBindingHandler = (function () {
                function MenuCommandBindingHandler() {
                }
                MenuCommandBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var options = ko.utils.unwrapObservable(valueAccessor()) || {};
                    if (Commerce.ObjectExtensions.isString(options.label) && !Commerce.StringExtensions.isNullOrWhitespace(options.label)) {
                        options.tooltip = options.label;
                    }
                    var menuCommand = new WinJS.UI.MenuCommand(element, options);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(element.winControl)) {
                        var onclickHandler_1 = options.onClick;
                        if (menuCommand.type === "toggle") {
                            options.onClick = function (eventArgs) {
                                var childNodes = $(element).parent().children();
                                childNodes.each(function (index, childElement) {
                                    var item = childElement.winControl;
                                    if (item.id === options.id) {
                                        item.selected = true;
                                    }
                                    else {
                                        item.selected = false;
                                    }
                                });
                                if (Commerce.ObjectExtensions.isFunction(onclickHandler_1)) {
                                    onclickHandler_1.call(viewModel, viewModel, { selected: menuCommand.selected });
                                }
                            };
                            menuCommand.onclick = options.onClick;
                        }
                        else if (Commerce.ObjectExtensions.isFunction(onclickHandler_1)) {
                            menuCommand.onclick = function () {
                                onclickHandler_1.call(viewModel, viewModel, { selected: menuCommand.selected });
                            };
                        }
                        if (Commerce.ObjectExtensions.isBoolean(options.canExecute) && !options.canExecute) {
                            menuCommand.disabled = true;
                        }
                        Commerce.BubbleHelper.addAttribute(element, options.id);
                    }
                    ko.utils.domNodeDisposal.addDisposeCallback(element, function (e) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(element.winControl)) {
                            element.winControl.onclick = Function.prototype;
                            element.winControl.dispose();
                        }
                    });
                };
                return MenuCommandBindingHandler;
            }());
            Menu.MenuCommandBindingHandler = MenuCommandBindingHandler;
        })(Menu = Controls.Menu || (Controls.Menu = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var Menu;
        (function (Menu) {
            "use strict";
            var ToggleMenuBindingHandler = (function (_super) {
                __extends(ToggleMenuBindingHandler, _super);
                function ToggleMenuBindingHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                ToggleMenuBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var options = ko.utils.unwrapObservable(valueAccessor()) || {};
                    if (Commerce.ArrayExtensions.hasElements(options.commands)) {
                        options.commands.forEach(function (menuCommand) {
                            var menuCommandOnClick = menuCommand.onClick;
                            menuCommand.onClick = function (eventArgs) {
                                var currentMenuCommand = $(eventArgs.target).closest(Menu.ToggleMenuCommandBindingHandler.TOGGLE_COMMAND_BUTTON_SELECTOR).get(0).winControl;
                                Menu.ToggleMenuCommandBindingHandler.selectCurrentUnselectOther(currentMenuCommand, menuCommandOnClick);
                            };
                        });
                    }
                    _super.prototype.init.call(this, element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);
                };
                return ToggleMenuBindingHandler;
            }(Menu.MenuBindingHandler));
            Menu.ToggleMenuBindingHandler = ToggleMenuBindingHandler;
        })(Menu = Controls.Menu || (Controls.Menu = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var Menu;
        (function (Menu) {
            "use strict";
            var ToggleMenuCommandBindingHandler = (function () {
                function ToggleMenuCommandBindingHandler() {
                }
                ToggleMenuCommandBindingHandler.selectCurrentUnselectOther = function (currentMenuCommand, menuCommandOnClick) {
                    var childNodes = $(currentMenuCommand.element).parent().children(ToggleMenuCommandBindingHandler.TOGGLE_COMMAND_BUTTON_SELECTOR);
                    childNodes.each(function (index, childElement) {
                        var menuCommand = childElement.winControl;
                        menuCommand.selected = menuCommand.id === currentMenuCommand.id;
                    });
                    if (Commerce.ObjectExtensions.isFunction(menuCommandOnClick)) {
                        menuCommandOnClick({ id: currentMenuCommand.id, selected: currentMenuCommand.selected });
                    }
                };
                ToggleMenuCommandBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var options = ko.utils.unwrapObservable(valueAccessor()) || {};
                    options.type = "toggle";
                    var menuCommandWinControl = new WinJS.UI.MenuCommand(element, options);
                    menuCommandWinControl.onclick = function (eventArgs) {
                        var menuCommandOnClick = options.onClick;
                        var currentMenuCommand = element.winControl;
                        ToggleMenuCommandBindingHandler.selectCurrentUnselectOther(currentMenuCommand, menuCommandOnClick);
                    };
                    ko.utils.domNodeDisposal.addDisposeCallback(element, function (e) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(element.winControl)) {
                            element.winControl.onclick = Function.prototype;
                            element.winControl.dispose();
                        }
                    });
                };
                ToggleMenuCommandBindingHandler.TOGGLE_COMMAND_BUTTON_SELECTOR = ".win-command-toggle";
                return ToggleMenuCommandBindingHandler;
            }());
            Menu.ToggleMenuCommandBindingHandler = ToggleMenuCommandBindingHandler;
        })(Menu = Controls.Menu || (Controls.Menu = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var NumPad;
        (function (NumPad) {
            "use strict";
            var NumPadBase = (function (_super) {
                __extends(NumPadBase, _super);
                function NumPadBase(options) {
                    var _this = _super.call(this) || this;
                    if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                        throw new Error("Invalid options passed to the NumPadBase constructor: options cannot be null or undefined.");
                    }
                    _this._label = options.label;
                    _this._globalInputBroker = options.globalInputBroker;
                    _this._value = ko.observable(Commerce.StringExtensions.EMPTY);
                    _this._valueSubscription = _this._value.subscribe(function (newValue) {
                        _this._raiseEvent("ValueChanged", { value: _this.value });
                    });
                    return _this;
                }
                Object.defineProperty(NumPadBase.prototype, "value", {
                    get: function () {
                        return this.parseValue(this._value());
                    },
                    set: function (value) {
                        this._value(this.formatValue(value));
                    },
                    enumerable: true,
                    configurable: true
                });
                NumPadBase.prototype.dispose = function () {
                    this._valueSubscription.dispose();
                    _super.prototype.dispose.call(this);
                };
                return NumPadBase;
            }(Controls.ControlBase));
            NumPad.NumPadBase = NumPadBase;
        })(NumPad = Controls.NumPad || (Controls.NumPad = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var NumPad;
        (function (NumPad) {
            "use strict";
            var AlphanumericNumPad = (function (_super) {
                __extends(AlphanumericNumPad, _super);
                function AlphanumericNumPad(options) {
                    var _this = _super.call(this, options) || this;
                    _this.value = options.value;
                    return _this;
                }
                AlphanumericNumPad.prototype.render = function (rootElement) {
                    var _this = this;
                    var bindingOptions = {
                        labelDataBinding: { text: this._label },
                        inputDataBinding: undefined,
                        onEnter: function () {
                            _this._raiseEvent("EnterPressed", { value: _this.value });
                        },
                        value: this._value,
                        decimalPrecision: undefined,
                        numPadInputSource: this._globalInputBroker
                    };
                    this._renderBinding("alphanumericNumpad", bindingOptions, rootElement);
                };
                AlphanumericNumPad.prototype.parseValue = function (stringVal) {
                    return stringVal || Commerce.StringExtensions.EMPTY;
                };
                AlphanumericNumPad.prototype.formatValue = function (value) {
                    return value || Commerce.StringExtensions.EMPTY;
                };
                return AlphanumericNumPad;
            }(NumPad.NumPadBase));
            NumPad.AlphanumericNumPad = AlphanumericNumPad;
        })(NumPad = Controls.NumPad || (Controls.NumPad = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var NumPad;
        (function (NumPad) {
            "use strict";
            var CartNumPadModes;
            (function (CartNumPadModes) {
                CartNumPadModes[CartNumPadModes["QuantityOrProduct"] = 0] = "QuantityOrProduct";
                CartNumPadModes[CartNumPadModes["Product"] = 1] = "Product";
            })(CartNumPadModes = NumPad.CartNumPadModes || (NumPad.CartNumPadModes = {}));
            var KeySource;
            (function (KeySource) {
                KeySource[KeySource["UI"] = 0] = "UI";
                KeySource[KeySource["KEYBOARD"] = 1] = "KEYBOARD";
            })(KeySource = NumPad.KeySource || (NumPad.KeySource = {}));
            var CartNumPadState = (function (_super) {
                __extends(CartNumPadState, _super);
                function CartNumPadState() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(CartNumPadState.prototype, "hasDisplayTitleAboveControlsChanged", {
                    get: function () {
                        return this.isValueDifferent(this.lastDisplayTitleAboveControls, this.currentDisplayTitleAboveControls);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CartNumPadState.prototype, "hasPlaceholderChanged", {
                    get: function () {
                        return this.isValueDifferent(this.lastPlaceholder, this.currentPlaceholder);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CartNumPadState.prototype, "hasHideButtonsChanged", {
                    get: function () {
                        return this.isValueDifferent(this.lastHideButtons, this.currentHideButtons);
                    },
                    enumerable: true,
                    configurable: true
                });
                CartNumPadState.prototype.getResult = function () {
                    return { value: this.value, quantity: this.quantity };
                };
                CartNumPadState.prototype.updateState = function (displayTitleAboveControls, placeholder, hideButtons) {
                    this.lastDisplayTitleAboveControls = this.currentDisplayTitleAboveControls;
                    this.lastPlaceholder = this.currentPlaceholder;
                    this.lastHideButtons = this.currentHideButtons;
                    this.currentDisplayTitleAboveControls = displayTitleAboveControls;
                    this.currentPlaceholder = placeholder;
                    this.currentHideButtons = hideButtons;
                };
                CartNumPadState.prototype.initializeState = function (clearOnEnter) {
                    if (clearOnEnter === void 0) { clearOnEnter = false; }
                    _super.prototype.initializeState.call(this, true);
                    this.quantity = undefined;
                    this.numPadMode = CartNumPadModes.QuantityOrProduct;
                    this.lastDisplayTitleAboveControls = undefined;
                    this.lastPlaceholder = undefined;
                    this.lastHideButtons = undefined;
                };
                CartNumPadState.prototype.clearState = function () {
                    _super.prototype.clearState.call(this);
                    this.quantity = undefined;
                    this.numPadMode = CartNumPadModes.QuantityOrProduct;
                };
                CartNumPadState.prototype.isValueDifferent = function (val1, val2) {
                    var isSame = false;
                    var isVal1NullOrUndefined = Commerce.ObjectExtensions.isNullOrUndefined(val1);
                    var isVal2NullOrUndefined = Commerce.ObjectExtensions.isNullOrUndefined(val2);
                    if (isVal1NullOrUndefined || isVal2NullOrUndefined) {
                        isSame = isVal1NullOrUndefined && isVal2NullOrUndefined;
                    }
                    else {
                        isSame = val1 === val2;
                    }
                    return !isSame;
                };
                return CartNumPadState;
            }(NumPad.NumPadState));
            NumPad.CartNumPadState = CartNumPadState;
        })(NumPad = Controls.NumPad || (Controls.NumPad = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var NumPad;
        (function (NumPad) {
            "use strict";
            var CurrencyNumPad = (function (_super) {
                __extends(CurrencyNumPad, _super);
                function CurrencyNumPad(options) {
                    var _this = _super.call(this, options) || this;
                    _this._decimalPrecision = ko.observable(Commerce.NumberExtensions.getDecimalPrecision());
                    _this._updateCurrency(options.currencyCode);
                    _this.value = options.value;
                    return _this;
                }
                Object.defineProperty(CurrencyNumPad.prototype, "currencyCode", {
                    get: function () {
                        return this._currencyCode;
                    },
                    set: function (code) {
                        this._updateCurrency(code);
                    },
                    enumerable: true,
                    configurable: true
                });
                CurrencyNumPad.prototype.render = function (rootElement) {
                    var _this = this;
                    var bindingOptions = {
                        labelDataBinding: { text: this._label },
                        inputDataBinding: undefined,
                        onEnter: function () {
                            _this._raiseEvent("EnterPressed", { value: _this.value });
                        },
                        value: this._value,
                        decimalPrecision: this._decimalPrecision,
                        numPadInputSource: this._globalInputBroker
                    };
                    this._renderBinding("currencyNumpad", bindingOptions, rootElement);
                };
                CurrencyNumPad.prototype.parseValue = function (stringVal) {
                    return Commerce.NumberExtensions.roundToCurrencyPrecision(Commerce.NumberExtensions.parseNumber(stringVal), this._currencyCode);
                };
                CurrencyNumPad.prototype.formatValue = function (value) {
                    return Commerce.NumberExtensions.formatNumber(value, this._decimalPrecision());
                };
                CurrencyNumPad.prototype._updateCurrency = function (currencyCode) {
                    if (Commerce.StringExtensions.isNullOrWhitespace(currencyCode)) {
                        throw new Error("Invalid currency code: currencyCode cannot be null or whitespace.");
                    }
                    else if (!Commerce.ApplicationContext.Instance.currenciesMap.hasItem(currencyCode)) {
                        throw new Error("Invalid currency code: currencyCode does not match a configured currency.");
                    }
                    this._currencyCode = currencyCode;
                    this._decimalPrecision(Commerce.NumberExtensions.getDecimalPrecision(this._currencyCode));
                };
                return CurrencyNumPad;
            }(NumPad.NumPadBase));
            NumPad.CurrencyNumPad = CurrencyNumPad;
        })(NumPad = Controls.NumPad || (Controls.NumPad = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var NumPad;
        (function (NumPad) {
            "use strict";
        })(NumPad = Controls.NumPad || (Controls.NumPad = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var NumPad;
        (function (NumPad) {
            "use strict";
        })(NumPad = Controls.NumPad || (Controls.NumPad = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var NumPad;
        (function (NumPad) {
            "use strict";
            var MultipleInputNumPadSize;
            (function (MultipleInputNumPadSize) {
                MultipleInputNumPadSize[MultipleInputNumPadSize["Small"] = 0] = "Small";
                MultipleInputNumPadSize[MultipleInputNumPadSize["Regular"] = 1] = "Regular";
            })(MultipleInputNumPadSize = NumPad.MultipleInputNumPadSize || (NumPad.MultipleInputNumPadSize = {}));
            var MultipleInputNumPadInputType;
            (function (MultipleInputNumPadInputType) {
                MultipleInputNumPadInputType[MultipleInputNumPadInputType["Text"] = 0] = "Text";
                MultipleInputNumPadInputType[MultipleInputNumPadInputType["Password"] = 1] = "Password";
                MultipleInputNumPadInputType[MultipleInputNumPadInputType["Numeric"] = 2] = "Numeric";
            })(MultipleInputNumPadInputType = NumPad.MultipleInputNumPadInputType || (NumPad.MultipleInputNumPadInputType = {}));
        })(NumPad = Controls.NumPad || (Controls.NumPad = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var NumPad;
        (function (NumPad) {
            "use strict";
        })(NumPad = Controls.NumPad || (Controls.NumPad = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var NumPad;
        (function (NumPad) {
            "use strict";
            var InteractionEvents;
            (function (InteractionEvents) {
                InteractionEvents[InteractionEvents["NumpadEnter"] = 0] = "NumpadEnter";
            })(InteractionEvents = NumPad.InteractionEvents || (NumPad.InteractionEvents = {}));
        })(NumPad = Controls.NumPad || (Controls.NumPad = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var NumPad;
        (function (NumPad) {
            "use strict";
        })(NumPad = Controls.NumPad || (Controls.NumPad = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var NumPad;
        (function (NumPad) {
            "use strict";
            var InputHandlers = (function () {
                function InputHandlers() {
                }
                InputHandlers.enter = function (state, uiCode, keyboardCode, source) {
                    if ((uiCode === "enter") || (keyboardCode === 13)) {
                        Commerce.RetailLogger.librariesNumpadEnterKey(state.value);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(state.options.onEnter)) {
                            state.options.onEnter(state.getResult());
                        }
                        return true;
                    }
                    return false;
                };
                InputHandlers.toggleMinus = function (state, uiCode, keyboardCode, source) {
                    var minusChar = "-";
                    var isNumber = !isNaN(parseFloat(state.textContent));
                    if ((uiCode === minusChar) || (String.fromCharCode(keyboardCode) === minusChar)) {
                        if (Commerce.StringExtensions.isNullOrWhitespace(state.textContent) ||
                            isNumber) {
                            if (state.textContent.charAt(0) !== minusChar) {
                                state.textContent = minusChar + state.textContent;
                            }
                            else {
                                state.textContent = state.textContent.substr(1);
                            }
                        }
                        else {
                            state.textContent += minusChar;
                        }
                        return true;
                    }
                    return false;
                };
                InputHandlers.clear = function (state, uiCode, keyboardCode, source) {
                    if (uiCode === "clear") {
                        state.textContent = Commerce.StringExtensions.EMPTY;
                        return true;
                    }
                    return false;
                };
                InputHandlers.backspace = function (state, uiCode, keyboardCode, source) {
                    if ((uiCode === "backspace") || (keyboardCode === 8)) {
                        if (state.textContent.length >= 1) {
                            state.textContent = state.textContent.substr(0, state.textContent.length - 1);
                        }
                        return true;
                    }
                    return false;
                };
                InputHandlers.decimalSeparator = function (state, uiCode, keyboardCode, source) {
                    var separator = Commerce.NumberExtensions.decimalSeparator;
                    if ((uiCode === "decimal") || (String.fromCharCode(keyboardCode) === separator)) {
                        if (state.textContent.indexOf(separator) === -1 && state.getDecimalPrecision() !== 0) {
                            state.textContent += separator;
                        }
                        return true;
                    }
                    return false;
                };
                InputHandlers.numbers = function (state, uiCode, keyboardCode, source) {
                    var decimalSeparatorIndex = state.textContent.indexOf(Commerce.NumberExtensions.decimalSeparator);
                    var currentPrecision = decimalSeparatorIndex !== -1 ? (state.textContent.length - decimalSeparatorIndex - 1) : -1;
                    var valueToAdd;
                    var algarism = uiCode || String.fromCharCode(keyboardCode);
                    if (algarism >= "0" && algarism <= "9") {
                        valueToAdd = algarism;
                    }
                    if (!Commerce.ObjectExtensions.isUndefined(valueToAdd) && (currentPrecision < state.getDecimalPrecision())) {
                        state.textContent += valueToAdd;
                        return true;
                    }
                    return false;
                };
                InputHandlers.anyText = function (state, uiCode, keyboardCode, source) {
                    var valueToAdd = uiCode || String.fromCharCode(keyboardCode);
                    state.textContent += valueToAdd;
                    return true;
                };
                InputHandlers.quantity = function (state, uiCode, keyboardCode, source) {
                    if (uiCode === "*" || String.fromCharCode(keyboardCode) === "*") {
                        if (state.numPadMode === NumPad.CartNumPadModes.QuantityOrProduct) {
                            var value = Commerce.NumberExtensions.parseNumber(state.textContent);
                            if (isNaN(value)) {
                                Commerce.NotificationHandler.displayErrorMessage("string_29823");
                            }
                            else {
                                state.quantity = value;
                                state.numPadMode = NumPad.CartNumPadModes.Product;
                                state.textContent = Commerce.StringExtensions.EMPTY;
                            }
                        }
                        else {
                            state.quantity = null;
                            state.numPadMode = NumPad.CartNumPadModes.QuantityOrProduct;
                        }
                        return true;
                    }
                    return false;
                };
                InputHandlers.abc = function (state, uiCode, keyboardCode, source) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(state.inputElement)) {
                        throw new Error("Cannot find input element.");
                    }
                    if (uiCode === "abc") {
                        state.inputElement.readOnly = !state.inputElement.readOnly;
                        return true;
                    }
                    else if (!state.inputElement.readOnly && (source === NumPad.KeySource.UI)) {
                        state.inputElement.readOnly = true;
                        return false;
                    }
                    return false;
                };
                return InputHandlers;
            }());
            NumPad.InputHandlers = InputHandlers;
        })(NumPad = Controls.NumPad || (Controls.NumPad = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var NumPad;
        (function (NumPad) {
            "use strict";
            var MultipleInputNumPadSharedInputHandles = (function () {
                function MultipleInputNumPadSharedInputHandles() {
                }
                MultipleInputNumPadSharedInputHandles.clear = function (state, uiCode, keyboardCode, source) {
                    if (uiCode === "clear") {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(state.currentValue) && state.currentValue().length >= 1) {
                            state.currentValue("");
                            state.syncInputValue();
                        }
                        return true;
                    }
                    return false;
                };
                MultipleInputNumPadSharedInputHandles.enter = function (state, uiCode, keyboardCode, source) {
                    if (uiCode === "enter" || keyboardCode === 13) {
                        if (Commerce.ArrayExtensions.hasElements(state.options.inputOptions)) {
                            var index = state.currentInputIndex;
                            var inputCount = state.options.inputOptions.length;
                            Commerce.RetailLogger.librariesMultipleInputNumpadEnterKey(inputCount, index);
                            if (index >= 0 && index < state.options.inputOptions.length - 1) {
                                var element_1 = state.inputs[index + 1];
                                state.currentInputIndex = index + 1;
                                state.currentValue = state.values[index + 1];
                                Commerce.Host.instance.timers.setImmediate(function () {
                                    element_1.setSelectionRange(element_1.value.length, element_1.value.length);
                                    element_1.focus();
                                });
                            }
                            else if (index === state.options.inputOptions.length - 1 && !Commerce.ObjectExtensions.isNullOrUndefined(state.options.onCompleted)) {
                                var result_1 = new Commerce.Dictionary();
                                state.inputs.forEach(function (input, index) {
                                    result_1.setItem(input.id, state.values[index]());
                                });
                                state.options.onCompleted({ valuesByInputId: result_1 });
                            }
                        }
                        return true;
                    }
                    return false;
                };
                MultipleInputNumPadSharedInputHandles.resetInputMode = function (state) {
                    state.inputs.forEach(function (inputElement) {
                        inputElement.inputMode = "none";
                    });
                };
                return MultipleInputNumPadSharedInputHandles;
            }());
            NumPad.MultipleInputNumPadSharedInputHandles = MultipleInputNumPadSharedInputHandles;
            var MultipleInputNumPadTextInputHandles = (function () {
                function MultipleInputNumPadTextInputHandles() {
                }
                MultipleInputNumPadTextInputHandles.backspace = function (state, uiCode, keyboardCode, source) {
                    if ((state.currentInputType === NumPad.MultipleInputNumPadInputType.Text || state.currentInputType === NumPad.MultipleInputNumPadInputType.Password) &&
                        (uiCode === "backspace" || keyboardCode === 8)) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(state.currentValue) &&
                            !Commerce.ObjectExtensions.isNullOrUndefined(state.currentValue()) &&
                            !Commerce.StringExtensions.isEmpty(state.currentValue())) {
                            state.currentValue(state.currentValue().substr(0, state.currentValue().length - 1));
                            state.syncInputValue();
                        }
                        return true;
                    }
                    return false;
                };
                MultipleInputNumPadTextInputHandles.numbers = function (state, uiCode, keyboardCode, source) {
                    var valueToAdd = Commerce.StringExtensions.EMPTY;
                    var algarism = uiCode || String.fromCharCode(keyboardCode);
                    if ((state.currentInputType === NumPad.MultipleInputNumPadInputType.Text || state.currentInputType === NumPad.MultipleInputNumPadInputType.Password) &&
                        algarism >= "0" && algarism <= "9") {
                        valueToAdd = algarism;
                    }
                    if (!Commerce.ObjectExtensions.isUndefined(valueToAdd)) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(state.currentValue)) {
                            state.currentValue(state.currentValue() + valueToAdd);
                            state.syncInputValue();
                        }
                        MultipleInputNumPadSharedInputHandles.resetInputMode(state);
                        return true;
                    }
                    return false;
                };
                MultipleInputNumPadTextInputHandles.decimalSeparator = function (state, uiCode, keyboardCode, source) {
                    var separator = Commerce.NumberExtensions.decimalSeparator;
                    if ((state.currentInputType === NumPad.MultipleInputNumPadInputType.Text || state.currentInputType === NumPad.MultipleInputNumPadInputType.Password) &&
                        (uiCode === "decimal" || String.fromCharCode(keyboardCode) === separator)) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(state.currentValue)) {
                            state.currentValue(state.currentValue() + separator);
                            state.syncInputValue();
                        }
                        MultipleInputNumPadSharedInputHandles.resetInputMode(state);
                        return true;
                    }
                    return false;
                };
                return MultipleInputNumPadTextInputHandles;
            }());
            NumPad.MultipleInputNumPadTextInputHandles = MultipleInputNumPadTextInputHandles;
        })(NumPad = Controls.NumPad || (Controls.NumPad = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var NumPad;
        (function (NumPad) {
            "use strict";
            var MultipleInputNumPadState = (function (_super) {
                __extends(MultipleInputNumPadState, _super);
                function MultipleInputNumPadState() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(MultipleInputNumPadState.prototype, "currentInput", {
                    get: function () {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(this.inputs)) {
                            return undefined;
                        }
                        return this.inputs[this.currentInputIndex];
                    },
                    enumerable: true,
                    configurable: true
                });
                MultipleInputNumPadState.prototype.syncInputValue = function () {
                    var inputElement = this.currentInput;
                    if (Commerce.ObjectExtensions.isNullOrUndefined(inputElement)) {
                        return;
                    }
                    var newValue = this.currentValue();
                    if (inputElement.value !== newValue) {
                        inputElement.value = newValue;
                    }
                    $(inputElement).trigger("ax-retail-clearMark-toggle");
                };
                return MultipleInputNumPadState;
            }(NumPad.NumPadState));
            NumPad.MultipleInputNumPadState = MultipleInputNumPadState;
        })(NumPad = Controls.NumPad || (Controls.NumPad = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var NumPad;
        (function (NumPad) {
            "use strict";
            var NumericNumPad = (function (_super) {
                __extends(NumericNumPad, _super);
                function NumericNumPad(options) {
                    var _this = _super.call(this, options) || this;
                    _this._decimalPrecision = Commerce.ObjectExtensions.isNumber(options.decimalPrecision) ? options.decimalPrecision : Commerce.NumberExtensions.getDecimalPrecision();
                    _this.value = options.value;
                    return _this;
                }
                NumericNumPad.prototype.render = function (rootElement) {
                    var _this = this;
                    var bindingOptions = {
                        labelDataBinding: { text: this._label },
                        inputDataBinding: undefined,
                        onEnter: function () {
                            _this._raiseEvent("EnterPressed", { value: _this.value });
                        },
                        value: this._value,
                        decimalPrecision: this._decimalPrecision,
                        numPadInputSource: this._globalInputBroker,
                        parser: new Commerce.NumberParser()
                    };
                    this._renderBinding("numericNumpad", bindingOptions, rootElement);
                };
                NumericNumPad.prototype.parseValue = function (stringVal) {
                    return Commerce.NumberExtensions.parseNumber(stringVal);
                };
                NumericNumPad.prototype.formatValue = function (value) {
                    return Commerce.NumberExtensions.formatNumber(value, this._decimalPrecision);
                };
                return NumericNumPad;
            }(NumPad.NumPadBase));
            NumPad.NumericNumPad = NumericNumPad;
        })(NumPad = Controls.NumPad || (Controls.NumPad = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var NumPad;
        (function (NumPad) {
            "use strict";
            var TransactionNumPad = (function (_super) {
                __extends(TransactionNumPad, _super);
                function TransactionNumPad(options) {
                    var _this = _super.call(this, options) || this;
                    _this.value = options.value;
                    return _this;
                }
                TransactionNumPad.prototype.render = function (rootElement) {
                    var _this = this;
                    var bindingOptions = {
                        labelDataBinding: { text: this._label },
                        inputDataBinding: undefined,
                        onEnter: function (result) {
                            _this._raiseEvent("EnterPressed", { value: _this.value, quantity: result.quantity });
                        },
                        value: this._value,
                        numPadInputSource: this._globalInputBroker,
                        viewName: undefined,
                        containerId: undefined,
                        placeholder: undefined
                    };
                    this._renderBinding("transactionNumpad", bindingOptions, rootElement);
                };
                TransactionNumPad.prototype.parseValue = function (stringVal) {
                    return stringVal || Commerce.StringExtensions.EMPTY;
                };
                TransactionNumPad.prototype.formatValue = function (value) {
                    return value || Commerce.StringExtensions.EMPTY;
                };
                return TransactionNumPad;
            }(NumPad.NumPadBase));
            NumPad.TransactionNumPad = TransactionNumPad;
        })(NumPad = Controls.NumPad || (Controls.NumPad = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var Pivot;
        (function (Pivot) {
            "use strict";
        })(Pivot = Controls.Pivot || (Controls.Pivot = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var Pivot;
        (function (Pivot) {
            "use strict";
        })(Pivot = Controls.Pivot || (Controls.Pivot = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var Pivot;
        (function (Pivot) {
            var PivotBindingHandler = (function () {
                function PivotBindingHandler() {
                }
                PivotBindingHandler.prototype.init = function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                    var options = ko.utils.unwrapObservable(valueAccessor()) || Object.create(null);
                    var $element = $(element);
                    $element.addClass("pivot height100Percent");
                    ko.applyBindingsToDescendants(bindingContext, element);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(options.groupedDataSource)) {
                        var observableMember = options.groupedDataSource;
                        var memberValue = ko.utils.unwrapObservable(observableMember);
                        var memberValueTmp_1 = memberValue;
                        var itemInvokedHandler_1 = function (invokedItem) {
                            if (Commerce.ObjectExtensions.isFunction(options.iteminvoked)) {
                                options.iteminvoked.call(viewModel, invokedItem);
                            }
                        };
                        var applyList = function (value) {
                            if (!value || value.length < 1) {
                                return;
                            }
                            var elementRecordId = memberValueTmp_1.parentId();
                            var groupsCollection = [];
                            var groupHeaderItems = [];
                            groupHeaderItems = value.filter(function (element) {
                                return (element[memberValueTmp_1.groupKeySelector] === elementRecordId ||
                                    element[memberValueTmp_1.groupKeySelector] === element[memberValueTmp_1.groupDataSelector]);
                            });
                            groupHeaderItems = Commerce.ObjectExtensions.clone(groupHeaderItems);
                            $.each(groupHeaderItems, function (index, groupHeaderItem) {
                                var secondlevelItems = [groupHeaderItem];
                                var childItems = value.filter(function (element) {
                                    return element[memberValueTmp_1.groupKeySelector] === groupHeaderItem[memberValueTmp_1.groupDataSelector];
                                });
                                secondlevelItems = secondlevelItems.concat(childItems);
                                groupsCollection.push({
                                    groupDetails: groupHeaderItem,
                                    groupItems: ko.observableArray(secondlevelItems),
                                    itemInvokedHandler: itemInvokedHandler_1,
                                    templateName: options.templateName,
                                    orientation: options.orientation || WinJS.UI.Orientation.vertical
                                });
                            });
                            ko.applyBindingsToNode(element, {
                                template: { name: "groupedPivotTemplate", data: groupsCollection }
                            });
                        };
                        applyList(memberValue.itemList());
                    }
                    var pivotWinControl = new WinJS.UI.Pivot(element, options);
                    var allPivotItems = pivotWinControl.items.filter(function () { return true; });
                    $element.data(PivotBindingHandler.ALL_PIVOT_ITEMS_KEY, allPivotItems);
                    pivotWinControl.locked = pivotWinControl.items.length === 1;
                    pivotWinControl.addEventListener("selectionchanged", function () {
                        var event = document.createEvent("Event");
                        event.initEvent("resize", true, false);
                        window.dispatchEvent(event);
                    });
                    pivotWinControl.addEventListener("itemanimationend", function () {
                        var listViewQuery = $(pivotWinControl.selectedItem.element).find(".win-listview");
                        if (listViewQuery.length > 0 &&
                            !Commerce.ObjectExtensions.isNullOrUndefined(listViewQuery[0].winControl) &&
                            listViewQuery.is(":visible") &&
                            listViewQuery[0].winControl.indexOfFirstVisible === -1) {
                            listViewQuery[0].winControl.forceLayout();
                        }
                        if (pivotWinControl.items.length === 1) {
                            $(".win-pivot-header-items").children("div").attr("tabindex", "-1");
                            $(".win-pivot-header-items .win-pivot-headers").find("button").attr("tabindex", "-1");
                        }
                    });
                    if (!Commerce.StringExtensions.isNullOrWhitespace(options.headerItemsAxBubbleAttr)) {
                        Commerce.BubbleHelper.addAttribute(pivotWinControl.element.querySelector(".win-pivot-header-items"), options.headerItemsAxBubbleAttr);
                    }
                    ko.utils.domNodeDisposal.addDisposeCallback(element, function (e) {
                        if (element.winControl) {
                            element.winControl.dispose();
                        }
                    });
                    PivotBindingHandler.setTabIndex($element);
                    return { controlsDescendantBindings: true };
                };
                PivotBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var options = ko.utils.unwrapObservable(valueAccessor()) || {};
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(options) && !Commerce.ObjectExtensions.isNullOrUndefined(options.pivotItemVisibilities)) {
                        options.pivotItemVisibilities.forEach(function (value) {
                            value.visible();
                        });
                    }
                    PivotBindingHandler._setPivotVisibility(element, options, viewModel, bindingContext);
                };
                PivotBindingHandler._setPivotVisibility = function (element, options, viewModel, bindingContext) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(options) && !Commerce.ObjectExtensions.isNullOrUndefined(options.pivotItemVisibilities)) {
                        var $element = $(element);
                        var allPivotItems = $element.data(PivotBindingHandler.ALL_PIVOT_ITEMS_KEY);
                        var numberOfHiddenPivotItems = 0;
                        var _loop_6 = function (index) {
                            var pivotItem = allPivotItems[index];
                            var pivotItemVisibility = Commerce.ArrayExtensions.firstOrUndefined(options.pivotItemVisibilities, function (currentPivotItemVisibility) {
                                return currentPivotItemVisibility.pivotItemId === pivotItem.element.id;
                            });
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(pivotItemVisibility)) {
                                var isPivotItemAlreadyVisible = element.winControl.items.some(function (value) {
                                    return value.element.id === pivotItem.element.id;
                                });
                                var pivotItemIndex = index - numberOfHiddenPivotItems;
                                if (pivotItemVisibility.visible()) {
                                    if (!isPivotItemAlreadyVisible) {
                                        var selectedIndex = element.winControl.selectedIndex;
                                        if (selectedIndex >= pivotItemIndex) {
                                            selectedIndex++;
                                        }
                                        element.winControl.items.splice(pivotItemIndex, 0, pivotItem);
                                        var pivotItemOriginalInnerHtml = pivotItem.PivotItemOriginalInnerHtml;
                                        pivotItem.contentElement.innerHTML = pivotItemOriginalInnerHtml;
                                        ko.applyBindings(bindingContext, pivotItem.contentElement);
                                        element.winControl.selectedIndex = selectedIndex;
                                    }
                                }
                                else {
                                    var pivotHeaders = $element.find(".win-pivot-header-area").first().find(".win-pivot-header").not("[aria-hidden='true']");
                                    if (pivotHeaders.length === 0) {
                                        Commerce.Host.instance.timers.setImmediate(function () {
                                            PivotBindingHandler._setPivotVisibility(element, options, viewModel, bindingContext);
                                        });
                                        return "break";
                                    }
                                    else {
                                        if (isPivotItemAlreadyVisible) {
                                            $(pivotItem.contentElement).empty();
                                            element.winControl.items.splice(pivotItemIndex, 1);
                                        }
                                        numberOfHiddenPivotItems++;
                                    }
                                }
                            }
                        };
                        for (var index = 0; index < allPivotItems.length; index++) {
                            var state_3 = _loop_6(index);
                            if (state_3 === "break")
                                break;
                        }
                    }
                };
                PivotBindingHandler.setTabIndex = function ($element) {
                    $element.children("object.win-resizeinstrument").attr("tabindex", "-1");
                };
                PivotBindingHandler.ALL_PIVOT_ITEMS_KEY = "AllPivotItems";
                return PivotBindingHandler;
            }());
            Pivot.PivotBindingHandler = PivotBindingHandler;
            ko.bindingHandlers.pivot = new PivotBindingHandler();
        })(Pivot = Controls.Pivot || (Controls.Pivot = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var Pivot;
        (function (Pivot) {
            var PivotItemBindingHandler = (function () {
                function PivotItemBindingHandler() {
                }
                PivotItemBindingHandler.prototype.init = function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                    var options = ko.utils.unwrapObservable(valueAccessor()) || Object.create(null);
                    var $element = $(element);
                    $element.addClass("pivotItem");
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(options.headerResx)) {
                        options.header = Commerce.ViewModelAdapter.getResourceString(ko.utils.unwrapObservable(options.headerResx));
                    }
                    var pivotItem = new WinJS.UI.PivotItem(element, options);
                    pivotItem.PivotItemOriginalInnerHtml = element.innerHTML;
                    if ($element.attr("role") === "tabpanel") {
                        $element.removeAttr("role");
                    }
                    ko.utils.domNodeDisposal.addDisposeCallback(element, function (e) {
                        if (element.winControl) {
                            element.winControl.dispose();
                        }
                    });
                };
                return PivotItemBindingHandler;
            }());
            Pivot.PivotItemBindingHandler = PivotItemBindingHandler;
            ko.bindingHandlers.pivotItem = new PivotItemBindingHandler();
        })(Pivot = Controls.Pivot || (Controls.Pivot = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var PreventInteraction;
        (function (PreventInteraction) {
            "use strict";
            var PreventInteractionBindingHandler = (function () {
                function PreventInteractionBindingHandler() {
                }
                PreventInteractionBindingHandler.prototype.init = function (element, valueAccessor) {
                    var preventInteraction = ko.utils.unwrapObservable(valueAccessor()) === true;
                    PreventInteraction.PreventInteractionHelper.setInteractionState($(element), preventInteraction);
                };
                PreventInteractionBindingHandler.prototype.update = function (element, valueAccessor) {
                    var preventInteraction = ko.utils.unwrapObservable(valueAccessor()) === true;
                    PreventInteraction.PreventInteractionHelper.setInteractionState($(element), preventInteraction);
                };
                return PreventInteractionBindingHandler;
            }());
            ko.bindingHandlers.preventInteraction = new PreventInteractionBindingHandler();
        })(PreventInteraction = Controls.PreventInteraction || (Controls.PreventInteraction = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var PreventInteraction;
        (function (PreventInteraction) {
            "use strict";
            var PreventInteractionHelper = (function () {
                function PreventInteractionHelper() {
                }
                PreventInteractionHelper.setInteractionState = function ($element, prevent) {
                    if (prevent) {
                        PreventInteractionHelper._preventInteraction($element);
                    }
                    else {
                        PreventInteractionHelper._enableInteraction($element);
                    }
                };
                PreventInteractionHelper._stopPropagation = function (e) {
                    var eventData = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        eventData[_i - 1] = arguments[_i];
                    }
                    e.stopPropagation();
                };
                PreventInteractionHelper._enableInteraction = function ($element) {
                    var enableOnDisabledElement = false;
                    var $elementsWithPointerAccess = $element.find("[" + PreventInteractionHelper.HAD_ORIGINAL_POINTER_EVENT_CLASS_ATTRIBUTE_NAME + "]").add($element);
                    $elementsWithPointerAccess.each(function (index, elem) {
                        var $elem = $(elem);
                        var originalPointerEventClassAttribute = $elem.attr(PreventInteractionHelper.HAD_ORIGINAL_POINTER_EVENT_CLASS_ATTRIBUTE_NAME);
                        if (!Commerce.StringExtensions.isNullOrWhitespace(originalPointerEventClassAttribute)) {
                            $elem.removeAttr(PreventInteractionHelper.HAD_ORIGINAL_POINTER_EVENT_CLASS_ATTRIBUTE_NAME);
                            enableOnDisabledElement = true;
                            if ((originalPointerEventClassAttribute === "false") && $elem.hasClass(PreventInteractionHelper.POINTER_EVENT_CLASS_NAME)) {
                                $elem.removeClass(PreventInteractionHelper.POINTER_EVENT_CLASS_NAME);
                            }
                            $elem.off("keypress keydown keyup", PreventInteractionHelper._stopPropagation);
                        }
                    });
                    if (enableOnDisabledElement) {
                        var $listOfElementsToRestoreTabOrder = $element.find("[" + PreventInteractionHelper.ORIGINAL_TAB_INDEX_ATTRIBUTE_NAME + "]").add($element);
                        $listOfElementsToRestoreTabOrder.each(function (index, elem) {
                            var $elem = $(elem);
                            var originalTabIndex = $elem.attr(PreventInteractionHelper.ORIGINAL_TAB_INDEX_ATTRIBUTE_NAME);
                            if (!Commerce.StringExtensions.isNullOrWhitespace(originalTabIndex)) {
                                if (originalTabIndex === "false") {
                                    $elem.removeAttr(PreventInteractionHelper.TAB_INDEX_ATTRIBUTE_NAME);
                                }
                                else {
                                    if (elem.getAttribute(PreventInteractionHelper.TAB_INDEX_ATTRIBUTE_NAME) === "-1") {
                                        $elem.attr(PreventInteractionHelper.TAB_INDEX_ATTRIBUTE_NAME, originalTabIndex);
                                    }
                                }
                                $elem.removeAttr(PreventInteractionHelper.ORIGINAL_TAB_INDEX_ATTRIBUTE_NAME);
                            }
                        });
                    }
                };
                PreventInteractionHelper._preventInteraction = function ($element) {
                    var originalPointerEventClassAttribute = $element.attr(PreventInteractionHelper.HAD_ORIGINAL_POINTER_EVENT_CLASS_ATTRIBUTE_NAME);
                    if (Commerce.StringExtensions.isNullOrWhitespace(originalPointerEventClassAttribute)) {
                        if ($element.hasClass(PreventInteractionHelper.POINTER_EVENT_CLASS_NAME)) {
                            $element.attr(PreventInteractionHelper.HAD_ORIGINAL_POINTER_EVENT_CLASS_ATTRIBUTE_NAME, "true");
                        }
                        else {
                            $element.attr(PreventInteractionHelper.HAD_ORIGINAL_POINTER_EVENT_CLASS_ATTRIBUTE_NAME, "false");
                            $element.addClass(PreventInteractionHelper.POINTER_EVENT_CLASS_NAME);
                        }
                        $element.on("keypress keydown keyup", PreventInteractionHelper._stopPropagation);
                    }
                    var listOfElementsToRemoveFromTabOrder = $element.find(PreventInteractionHelper.ELEMENTS_TO_SET_INTERACTION_STATE_QUERY).add($element[0]);
                    listOfElementsToRemoveFromTabOrder.each(function (index, elem) {
                        var $elem = $(elem);
                        var tabIndexAttributeValue = $elem.attr(PreventInteractionHelper.TAB_INDEX_ATTRIBUTE_NAME);
                        if (Commerce.StringExtensions.isNullOrWhitespace($elem.attr(PreventInteractionHelper.ORIGINAL_TAB_INDEX_ATTRIBUTE_NAME))) {
                            if (Commerce.StringExtensions.isNullOrWhitespace(tabIndexAttributeValue)) {
                                $elem.attr(PreventInteractionHelper.ORIGINAL_TAB_INDEX_ATTRIBUTE_NAME, "false");
                            }
                            else {
                                $elem.attr(PreventInteractionHelper.ORIGINAL_TAB_INDEX_ATTRIBUTE_NAME, tabIndexAttributeValue);
                            }
                            $elem.attr(PreventInteractionHelper.TAB_INDEX_ATTRIBUTE_NAME, "-1");
                            if (elem.isSameNode(document.activeElement)) {
                                $elem.blur();
                            }
                        }
                    });
                };
                PreventInteractionHelper.ORIGINAL_TAB_INDEX_ATTRIBUTE_NAME = "originaltabindex";
                PreventInteractionHelper.TAB_INDEX_ATTRIBUTE_NAME = "tabindex";
                PreventInteractionHelper.HAD_ORIGINAL_POINTER_EVENT_CLASS_ATTRIBUTE_NAME = "hadoriginalpointereventsnone";
                PreventInteractionHelper.POINTER_EVENT_CLASS_NAME = "pointerEventsNone";
                PreventInteractionHelper.ELEMENTS_TO_SET_INTERACTION_STATE_QUERY = ":input,[data-bind]";
                return PreventInteractionHelper;
            }());
            PreventInteraction.PreventInteractionHelper = PreventInteractionHelper;
        })(PreventInteraction = Controls.PreventInteraction || (Controls.PreventInteraction = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SelectTile;
        (function (SelectTile) {
            var SelectTileType;
            (function (SelectTileType) {
                SelectTileType[SelectTileType["SingleLine"] = 0] = "SingleLine";
                SelectTileType[SelectTileType["DoubleLine"] = 1] = "DoubleLine";
                SelectTileType[SelectTileType["SmallDoubleLine"] = 2] = "SmallDoubleLine";
            })(SelectTileType = SelectTile.SelectTileType || (SelectTile.SelectTileType = {}));
        })(SelectTile = Controls.SelectTile || (Controls.SelectTile = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var Tab;
        (function (Tab) {
            "use strict";
        })(Tab = Controls.Tab || (Controls.Tab = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var TestRecorderDisplayFloat = (function (_super) {
            __extends(TestRecorderDisplayFloat, _super);
            function TestRecorderDisplayFloat(options) {
                var _this = _super.call(this) || this;
                _this.TEST_RECORDER_FLOAT_CONTAINER_ID = "testRecorderFloat";
                _this._title = Commerce.ViewModelAdapter.getResourceString("string_10407");
                _this._grabPanelLocation = Commerce.Controls.Float.GrabPanelLocations.Left;
                _this.visible = ko.observable(false);
                _this.canSwitchToPauseState = ko.observable(false);
                _this.canSwitchToRecordingState = ko.observable(false);
                _this.canSwitchToValidationState = ko.observable(false);
                _this.isTestRecordingPaneOpen = ko.observable(false);
                _this.isValidating = ko.observable(false);
                _this.isRecordingNotStartedOrCompleted = ko.observable(true);
                _this.isRecordingOff = ko.computed(function () {
                    return _this.canSwitchToRecordingState() || _this.isRecordingNotStartedOrCompleted();
                });
                _this.pauseStateAriaLabel = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.recordingStateAriaLabel = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.validatingStateAriaLabel = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.hidePaneLabel = ko.observable(Commerce.ViewModelAdapter.getResourceString("string_10412"));
                _this.showPaneLabel = ko.observable(Commerce.ViewModelAdapter.getResourceString("string_10411"));
                _this._pauseRecordingLabel = Commerce.ViewModelAdapter.getResourceString("string_10415");
                _this._recordingPausedLabel = Commerce.ViewModelAdapter.getResourceString("string_10416");
                _this._recordingLabel = Commerce.ViewModelAdapter.getResourceString("string_10417");
                _this._startRecordingLabel = Commerce.ViewModelAdapter.getResourceString("string_10418");
                _this._validatingOffLabel = Commerce.ViewModelAdapter.getResourceString("string_10420");
                _this._validatingOnLabel = Commerce.ViewModelAdapter.getResourceString("string_10419");
                _this._pauseLabel = Commerce.ViewModelAdapter.getResourceString("string_10421");
                _this._recordLabel = Commerce.ViewModelAdapter.getResourceString("string_10422");
                _this._validateLabel = Commerce.ViewModelAdapter.getResourceString("string_10423");
                _this._toggleMainPanel = options.toggleMainPanel;
                _this._pauseRecording = options.pauseRecording;
                _this._continueRecording = options.continueRecording;
                _this._continueValidation = options.continueValidation;
                _this.updateTestRecorderStatePropertiesWithState(options.state);
                return _this;
            }
            Object.defineProperty(TestRecorderDisplayFloat.prototype, "title", {
                get: function () {
                    return this._title;
                },
                enumerable: true,
                configurable: true
            });
            TestRecorderDisplayFloat.prototype.updateState = function (state) {
                this.updateTestRecorderStatePropertiesWithState(state);
            };
            TestRecorderDisplayFloat.prototype.updateRecordingMainPanelStatus = function (isOpen) {
                this.isTestRecordingPaneOpen(isOpen);
            };
            Object.defineProperty(TestRecorderDisplayFloat.prototype, "grabPanelLocation", {
                get: function () {
                    return this._grabPanelLocation;
                },
                enumerable: true,
                configurable: true
            });
            TestRecorderDisplayFloat.prototype.show = function () {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.element.parentNode)) {
                    var testRecorderFloat = $("#" + this.TEST_RECORDER_FLOAT_CONTAINER_ID);
                    if (testRecorderFloat.length > 0) {
                        testRecorderFloat[0].appendChild(this.element);
                    }
                    else {
                        Commerce.RetailLogger.testRecorderFloatContainerElementNotAvailable(this.TEST_RECORDER_FLOAT_CONTAINER_ID);
                    }
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.element.parentNode)) {
                    this.render().done(function () {
                        _this.isTestRecordingPaneOpen(true);
                        _this.visible(true);
                    });
                }
            };
            TestRecorderDisplayFloat.prototype.hide = function () {
                this.visible(false);
            };
            TestRecorderDisplayFloat.prototype.dispose = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.element.parentElement)) {
                    this.element.parentElement.removeChild(this.element);
                }
                _super.prototype.dispose.call(this);
            };
            TestRecorderDisplayFloat.prototype.showTestRecordingPane = function () {
                this._toggleMainPanel();
            };
            TestRecorderDisplayFloat.prototype.hideTestRecordingPane = function () {
                this._toggleMainPanel();
            };
            TestRecorderDisplayFloat.prototype.continueWithRecording = function () {
                if (this.isValidating()) {
                    this._continueValidation();
                }
                else {
                    this._continueRecording();
                }
            };
            TestRecorderDisplayFloat.prototype.toggleValidation = function () {
                if (this.isValidating()) {
                    this._continueRecording();
                }
                else {
                    this._continueValidation();
                }
            };
            TestRecorderDisplayFloat.prototype.pauseRecording = function () {
                this._pauseRecording();
            };
            TestRecorderDisplayFloat.prototype.updateTestRecorderStatePropertiesWithState = function (state) {
                if (state === Commerce.UserActivityRecorder.UserActivityRecorderState.Recording) {
                    this.canSwitchToPauseState(true);
                    this.canSwitchToRecordingState(false);
                    this.canSwitchToValidationState(true);
                    this.pauseStateAriaLabel(this._pauseRecordingLabel);
                    this.recordingStateAriaLabel(this._recordingLabel);
                    this.validatingStateAriaLabel(this._validatingOffLabel);
                    this.isValidating(false);
                    this.isRecordingNotStartedOrCompleted(false);
                }
                else if (state === Commerce.UserActivityRecorder.UserActivityRecorderState.RecordingPaused) {
                    this.canSwitchToPauseState(false);
                    this.canSwitchToRecordingState(true);
                    this.canSwitchToValidationState(false);
                    this.pauseStateAriaLabel(this._recordingPausedLabel);
                    this.recordingStateAriaLabel(this._startRecordingLabel);
                    this.validatingStateAriaLabel(this._validatingOffLabel);
                    this.isValidating(false);
                    this.isRecordingNotStartedOrCompleted(false);
                }
                else if (state === Commerce.UserActivityRecorder.UserActivityRecorderState.Validating) {
                    this.canSwitchToPauseState(true);
                    this.canSwitchToRecordingState(false);
                    this.canSwitchToValidationState(true);
                    this.pauseStateAriaLabel(this._pauseRecordingLabel);
                    this.recordingStateAriaLabel(this._recordingLabel);
                    this.validatingStateAriaLabel(this._validatingOnLabel);
                    this.isValidating(true);
                    this.isRecordingNotStartedOrCompleted(false);
                }
                else if (state === Commerce.UserActivityRecorder.UserActivityRecorderState.ValidationPaused) {
                    this.canSwitchToPauseState(false);
                    this.canSwitchToRecordingState(true);
                    this.canSwitchToValidationState(false);
                    this.pauseStateAriaLabel(this._recordingPausedLabel);
                    this.recordingStateAriaLabel(this._startRecordingLabel);
                    this.validatingStateAriaLabel(this._validatingOnLabel);
                    this.isValidating(true);
                    this.isRecordingNotStartedOrCompleted(false);
                }
                else {
                    this.canSwitchToPauseState(false);
                    this.canSwitchToRecordingState(false);
                    this.canSwitchToValidationState(false);
                    this.pauseStateAriaLabel(this._pauseLabel);
                    this.recordingStateAriaLabel(this._recordLabel);
                    this.validatingStateAriaLabel(this._validateLabel);
                    this.isValidating(false);
                    this.isRecordingNotStartedOrCompleted(true);
                }
            };
            return TestRecorderDisplayFloat;
        }(Controls.UserControl));
        Controls.TestRecorderDisplayFloat = TestRecorderDisplayFloat;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var TextConverter;
        (function (TextConverter) {
            "use strict";
            var FieldType = (function () {
                function FieldType() {
                }
                FieldType.html = "html";
                FieldType.text = "text";
                return FieldType;
            }());
            TextConverter.FieldType = FieldType;
        })(TextConverter = Controls.TextConverter || (Controls.TextConverter = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var TileList;
        (function (TileList) {
            "use strict";
            var TileType;
            (function (TileType) {
                TileType[TileType["Square"] = 1] = "Square";
                TileType[TileType["Flat"] = 2] = "Flat";
                TileType[TileType["DoubleLine"] = 3] = "DoubleLine";
            })(TileType = TileList.TileType || (TileList.TileType = {}));
        })(TileList = Controls.TileList || (Controls.TileList = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var TileList;
        (function (TileList) {
            "use strict";
            function setFocusOnElement(element) {
                var $element = $(element);
                $element.focus();
                if (!Commerce.ObjectExtensions.isNullOrUndefined(element.parentNode)) {
                    element.parentNode.defaultFocusSet = true;
                }
            }
            TileList.setFocusOnElement = setFocusOnElement;
            ko.bindingHandlers.tileList = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var $element = $(element);
                    var defaultSize = 120;
                    var sizeFormat = "{0}px";
                    var value = ko.utils.unwrapObservable(valueAccessor()) || {};
                    var baseWidth = value.width || defaultSize;
                    var baseHeight = value.height || defaultSize;
                    var isInDialog = false;
                    value.field = value.field || null;
                    value.secondaryField = value.secondaryField || null;
                    value.converter = value.converter || null;
                    value.secondaryConverter = value.secondaryConverter || null;
                    value.iconCssClassField = value.iconCssClassField || null;
                    value.tileType = value.tileType || (Commerce.Config.isPhone ? TileList.TileType.Flat : TileList.TileType.Square);
                    $element.addClass("tileList col stretch");
                    if ($element.closest(".commerceDialog").length > 0) {
                        if (value.tileType === TileList.TileType.Square) {
                            value.tileType = TileList.TileType.Flat;
                        }
                        isInDialog = true;
                    }
                    if (Commerce.Config.isPhone || isInDialog) {
                        $element.addClass("scrollY");
                    }
                    if (value.tileType !== TileList.TileType.Flat && value.tileType !== TileList.TileType.DoubleLine) {
                        $element.addClass("wrap");
                    }
                    var blockStyle = {
                        "min-width": value.tileType === TileList.TileType.Square ? Commerce.StringExtensions.format(sizeFormat, baseWidth) : "100%",
                        "max-width": value.tileType === TileList.TileType.Square ? Commerce.StringExtensions.format(sizeFormat, baseWidth) : "100%",
                        "min-height": value.tileType === TileList.TileType.Square ? Commerce.StringExtensions.format(sizeFormat, baseHeight) : "auto",
                        "max-height": value.tileType === TileList.TileType.Square ? Commerce.StringExtensions.format(sizeFormat, baseHeight) : "auto"
                    };
                    value.afterRender = function () {
                        var viewModelTemp = viewModel;
                        $element.find(".itemContainer").each(function (index, itemContainerElement) {
                            if (!itemContainerElement.winControl) {
                                var rowData_1 = value.itemDataSource()[index];
                                var $itemContainer = $(itemContainerElement);
                                if (((itemContainerElement.parentNode.defaultFocusSet !== true) || index === 0)
                                    && !rowData_1.disabled) {
                                    Commerce.Controls.TileList.setFocusOnElement(itemContainerElement);
                                    if (ko.isObservable(value.focusOnFirstTileCallback)) {
                                        value.focusOnFirstTileCallback(Commerce.Controls.TileList.setFocusOnElement.bind(null, itemContainerElement));
                                    }
                                }
                                else if (rowData_1.disabled) {
                                    (itemContainerElement).tabIndex = -1;
                                }
                                $itemContainer.css(blockStyle);
                                $itemContainer.attr("role", "menuitem");
                                if (!Commerce.ObjectExtensions.isNullOrUndefined(viewModel._viewModel)
                                    && !Commerce.ObjectExtensions.isNullOrUndefined(viewModel._viewModel.selectionType)) {
                                    $itemContainer.attr("aria-label", viewModel._viewModel.selectionType() + " " + rowData_1.Value);
                                }
                                var itemContainerOptions = {
                                    selectionDisabled: true,
                                    tapBehavior: WinJS.UI.TapBehavior.invokeOnly
                                };
                                var itemContainer = new WinJS.UI.ItemContainer(itemContainerElement, itemContainerOptions);
                                $itemContainer.addClass("highContrastBorder");
                                if (!rowData_1.disabled) {
                                    var itemInvokeHandler = void 0;
                                    itemInvokeHandler = function (event) {
                                        if (value.iteminvoked) {
                                            value.iteminvoked.call(viewModelTemp, { data: rowData_1 });
                                        }
                                        event.stopPropagation();
                                    };
                                    var handler = void 0;
                                    handler = WinJS.Utilities.markSupportedForProcessing(itemInvokeHandler);
                                    itemContainer.addEventListener("invoked", handler);
                                }
                                $itemContainer.find(".win-itembox, .win-item").addClass("col grow");
                            }
                        });
                    };
                    if (ko.isObservable(value.focusOnFirstTileCallback)) {
                        value.focusOnFirstTileCallback(function () { return; });
                    }
                    ko.applyBindingsToNode(element, {
                        template: {
                            name: "tileListTemplate",
                            data: value
                        }
                    }, this);
                    if (value.flipInPortrait) {
                        $element.find(".itemList").addClass("flip");
                    }
                    return { controlsDescendantBindings: true };
                }
            };
        })(TileList = Controls.TileList || (Controls.TileList = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var TimePicker;
        (function (TimePicker) {
            "use strict";
        })(TimePicker = Controls.TimePicker || (Controls.TimePicker = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var TimePicker;
        (function (TimePicker_1) {
            "use strict";
            var TimePicker = (function (_super) {
                __extends(TimePicker, _super);
                function TimePicker(options) {
                    var _this = _super.call(this) || this;
                    _this._enabled = ko.observable(options.enabled);
                    _this._disabled = ko.computed(function () {
                        return !_this._enabled();
                    });
                    _this._minuteIncrement = options.minuteIncrement;
                    _this._time = options.time;
                    return _this;
                }
                Object.defineProperty(TimePicker.prototype, "enabled", {
                    get: function () {
                        return this._enabled();
                    },
                    set: function (newValue) {
                        this._enabled(newValue);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(TimePicker.prototype, "time", {
                    get: function () {
                        return this._time;
                    },
                    enumerable: true,
                    configurable: true
                });
                TimePicker.prototype.render = function (rootElement) {
                    var _this = this;
                    this._renderBinding("timePicker", {
                        current: this._time,
                        disabled: this._disabled,
                        hourPattern: TimePicker.HOUR_PATTERN,
                        minuteIncrement: this._minuteIncrement,
                        minutePattern: TimePicker.MINUTE_PATTERN,
                        onChange: function (newTimeValue) {
                            _this._time = newTimeValue;
                            _this._raiseEvent("TimeChanged", { time: newTimeValue });
                        }
                    }, rootElement);
                };
                TimePicker.HOUR_PATTERN = "{hour.integer(2)}";
                TimePicker.MINUTE_PATTERN = "{minute.integer(2)}";
                return TimePicker;
            }(Controls.ControlBase));
            TimePicker_1.TimePicker = TimePicker;
        })(TimePicker = Controls.TimePicker || (Controls.TimePicker = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var TimePicker;
        (function (TimePicker) {
            var TimePickerBindingHandler = (function () {
                function TimePickerBindingHandler() {
                }
                TimePickerBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var options = ko.utils.unwrapObservable(valueAccessor()) || Object.create(null);
                    var picker = new WinJS.UI.TimePicker(element);
                    ko.applyBindingsToNode(picker.element, {
                        winControl: {
                            disabled: options.disabled || false,
                            current: options.current || Commerce.DateExtensions.now,
                            hourPattern: options.hourPattern || Commerce.StringExtensions.EMPTY,
                            minutePattern: options.minutePattern || Commerce.StringExtensions.EMPTY,
                            minuteIncrement: options.minuteIncrement || 1
                        }
                    }, viewModel);
                    if (Commerce.ObjectExtensions.isFunction(options.onChange)) {
                        picker.onchange = function (event) {
                            var datePickerDiv = event.currentTarget;
                            var datePickerControl = datePickerDiv.winControl;
                            options.onChange(datePickerControl.current);
                        };
                    }
                    return { controlsDescendantBindings: true };
                };
                return TimePickerBindingHandler;
            }());
            TimePicker.TimePickerBindingHandler = TimePickerBindingHandler;
            ko.bindingHandlers.timePicker = new TimePickerBindingHandler();
        })(TimePicker = Controls.TimePicker || (Controls.TimePicker = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var Timeline;
        (function (Timeline) {
            "use strict";
        })(Timeline = Controls.Timeline || (Controls.Timeline = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var Timeline;
        (function (Timeline) {
            "use strict";
        })(Timeline = Controls.Timeline || (Controls.Timeline = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var Timeline;
        (function (Timeline) {
            "use strict";
        })(Timeline = Controls.Timeline || (Controls.Timeline = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var Timeline;
        (function (Timeline) {
            "use strict";
        })(Timeline = Controls.Timeline || (Controls.Timeline = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var Timeline;
        (function (Timeline) {
            "use strict";
        })(Timeline = Controls.Timeline || (Controls.Timeline = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var Timeline;
        (function (Timeline) {
            "use strict";
        })(Timeline = Controls.Timeline || (Controls.Timeline = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var Timeline;
        (function (Timeline) {
            var TimelineBindingHandler = (function () {
                function TimelineBindingHandler() {
                    this.timelineItemActionInvoked = this.timelineItemActionInvoked.bind(this);
                    this.timelineItemFilterInvoked = this.timelineItemFilterInvoked.bind(this);
                }
                TimelineBindingHandler.prototype.dispose = function () {
                    Commerce.ObjectExtensions.disposeAllProperties(this);
                };
                TimelineBindingHandler.prototype.init = function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                    var _this = this;
                    this._$element = $(element);
                    this._options = ko.utils.unwrapObservable(valueAccessor()) || Object.create(null);
                    this.title = ko.computed(function () {
                        return ko.utils.unwrapObservable(_this._options.title);
                    });
                    this._timelineItemTypesMap = this._mapTimelineItemTypes(ko.utils.unwrapObservable(this._options.types));
                    this.timelineItemFiltersData = ko.computed(function () {
                        return ko.utils.unwrapObservable(_this._options.filters);
                    });
                    this.isFilterAvailable = ko.computed(function () {
                        return Commerce.ArrayExtensions.hasElements(_this.timelineItemFiltersData());
                    });
                    this.timelineItemGroupsData = ko.computed(function () {
                        return ko.utils.unwrapObservable(_this._options.groups);
                    });
                    this.isFilterPanelVisible = ko.observable(false);
                    ko.applyBindingsToNode(this._$element[0], { template: { name: "timeline-template", data: this } });
                    return { controlsDescendantBindings: true };
                };
                TimelineBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    this._options = ko.utils.unwrapObservable(valueAccessor()) || {};
                    this._timelineItemTypesMap = this._mapTimelineItemTypes(ko.utils.unwrapObservable(this._options.types));
                };
                TimelineBindingHandler.prototype.timelineItemInvoked = function (timelineItem) {
                    if (Commerce.ObjectExtensions.isFunction(this._options.timelineItemInvoked)) {
                        this._options.timelineItemInvoked({ timelineItem: timelineItem });
                    }
                };
                TimelineBindingHandler.prototype.timelineItemActionInvoked = function (action, timelineItem) {
                    if (Commerce.ObjectExtensions.isFunction(this._options.timelineItemActionInvoked)) {
                        this._options.timelineItemActionInvoked({ action: action, timelineItem: timelineItem });
                    }
                };
                TimelineBindingHandler.prototype.timelineItemFilterInvoked = function (filter) {
                    var _this = this;
                    if (Commerce.ObjectExtensions.isFunction(this._options.timelineItemFilterInvoked)) {
                        var returnedPromise = this._options.timelineItemFilterInvoked({ filter: filter });
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(returnedPromise)) {
                            returnedPromise.then(function (shouldHideFilters) {
                                if (shouldHideFilters !== false) {
                                    _this.isFilterPanelVisible(false);
                                }
                            });
                        }
                        else {
                            this.isFilterPanelVisible(false);
                        }
                    }
                };
                TimelineBindingHandler.prototype.getTimelineItemType = function (type) {
                    var returnValue = this._timelineItemTypesMap[type];
                    if (Commerce.ObjectExtensions.isNullOrUndefined(returnValue)) {
                        returnValue = {
                            type: "__undefined",
                            label: Commerce.StringExtensions.EMPTY,
                            ariaLabel: Commerce.StringExtensions.EMPTY,
                            iconCssClass: Commerce.TimelineHelper.DEFAULT_ICON_CSS_CLASS
                        };
                    }
                    return returnValue;
                };
                TimelineBindingHandler.prototype.expandCollapseFilterPanelHandler = function () {
                    this.isFilterPanelVisible(!this.isFilterPanelVisible());
                };
                TimelineBindingHandler.prototype.formatDateTime = function (dateTimeValue) {
                    if (!Commerce.DateExtensions.isValidDate(dateTimeValue)) {
                        return Commerce.StringExtensions.EMPTY;
                    }
                    if (Commerce.ObjectExtensions.isFunction(this._options.dateTimeFormatter)) {
                        return this._options.dateTimeFormatter.call(null, dateTimeValue);
                    }
                    return dateTimeValue.toLocaleString();
                };
                TimelineBindingHandler.prototype.getTimelineItemAriaLabel = function (timelineItem) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(timelineItem)) {
                        return Commerce.StringExtensions.EMPTY;
                    }
                    var outputValue = this.getTimelineItemType(timelineItem.type).label;
                    if (!Commerce.StringExtensions.isNullOrWhitespace(timelineItem.headerSecondaryText)) {
                        outputValue = Commerce.StringExtensions.format(Commerce.StringResourceManager.getString("string_30239"), outputValue, timelineItem.headerSecondaryText);
                    }
                    if (!Commerce.StringExtensions.isNullOrWhitespace(timelineItem.title)) {
                        outputValue = Commerce.StringExtensions.format(Commerce.StringResourceManager.getString("string_30239"), outputValue, timelineItem.title);
                    }
                    return outputValue;
                };
                TimelineBindingHandler.prototype._mapTimelineItemTypes = function (listOfTypes) {
                    var mappedValues = {};
                    if (Commerce.ArrayExtensions.hasElements(listOfTypes)) {
                        listOfTypes.forEach(function (el) {
                            mappedValues[el.type] = el;
                        });
                    }
                    return mappedValues;
                };
                return TimelineBindingHandler;
            }());
            ko.bindingHandlers.timeline =
                Commerce.KnockoutHandlerHelper.createMultiInstanceKnockoutHandler(TimelineBindingHandler);
        })(Timeline = Controls.Timeline || (Controls.Timeline = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var ToggleSwitch;
        (function (ToggleSwitch) {
            "use strict";
        })(ToggleSwitch = Controls.ToggleSwitch || (Controls.ToggleSwitch = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var ToggleSwitch;
        (function (ToggleSwitch) {
            var ToggleSwitchBindingHandler = (function () {
                function ToggleSwitchBindingHandler() {
                }
                ToggleSwitchBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var toggleSwitch = new WinJS.UI.ToggleSwitch(element);
                    var value = ko.utils.unwrapObservable(valueAccessor() || Object.create(null));
                    $(element).addClass("toggleSwitch");
                    if (Commerce.ObjectExtensions.isFunction(value.onChange)) {
                        toggleSwitch.addEventListener("change", function (event) {
                            var element = event.target;
                            var toggleSwitch = element.winControl;
                            value.onChange.apply(viewModel, [toggleSwitch.checked, toggleSwitch, viewModel]);
                        });
                    }
                    var checked = ko.utils.unwrapObservable(value.checked) === true;
                    toggleSwitch.checked = checked;
                    var enabled = ko.utils.unwrapObservable(value.enabled) !== false;
                    toggleSwitch.disabled = !enabled;
                    if (!Commerce.StringExtensions.isNullOrWhitespace(value.title)) {
                        toggleSwitch.title = Commerce.ViewModelAdapter.getResourceString(value.title);
                    }
                    toggleSwitch.labelOn = Commerce.ViewModelAdapter.getResourceString(value.labelOn)
                        || Commerce.ViewModelAdapter.getResourceString("string_7411");
                    toggleSwitch.labelOff = Commerce.ViewModelAdapter.getResourceString(value.labelOff)
                        || Commerce.ViewModelAdapter.getResourceString("string_7412");
                    element.tabIndex = value.tabIndex;
                    ko.utils.domNodeDisposal.addDisposeCallback(element, function (e) {
                        if (element.winControl) {
                            element.winControl.dispose();
                        }
                    });
                };
                ToggleSwitchBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var toggleSwitch = element.winControl;
                    var value = ko.utils.unwrapObservable(valueAccessor() || {});
                    if (ko.isObservable(value.checked)) {
                        var checked = ko.utils.unwrapObservable(value.checked) === true;
                        if (toggleSwitch.checked !== checked) {
                            toggleSwitch.checked = checked;
                        }
                    }
                    if (toggleSwitch.checked) {
                        $(element).attr("title", toggleSwitch.labelOn);
                    }
                    else {
                        $(element).attr("title", toggleSwitch.labelOff);
                    }
                    var enabled = ko.utils.unwrapObservable(value.enabled) !== false;
                    toggleSwitch.disabled = !enabled;
                };
                return ToggleSwitchBindingHandler;
            }());
            ToggleSwitch.ToggleSwitchBindingHandler = ToggleSwitchBindingHandler;
            ko.bindingHandlers.toggleSwitch = new ToggleSwitchBindingHandler();
        })(ToggleSwitch = Controls.ToggleSwitch || (Controls.ToggleSwitch = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var TotalsPanel;
        (function (TotalsPanel) {
            "use strict";
        })(TotalsPanel = Controls.TotalsPanel || (Controls.TotalsPanel = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var TotalsPanel;
        (function (TotalsPanel) {
            "use strict";
        })(TotalsPanel = Controls.TotalsPanel || (Controls.TotalsPanel = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var TotalsPanel;
        (function (TotalsPanel) {
            "use strict";
            var TotalsPanelBindingHandler = (function () {
                function TotalsPanelBindingHandler() {
                }
                TotalsPanelBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var leftFieldsClass = ".left";
                    var rightFieldsClass = ".right";
                    var mainFieldsClass = ".fields";
                    var value = ko.utils.unwrapObservable(valueAccessor()) || {};
                    var $element = $(element);
                    var dynamicElements = [];
                    var id = $element.attr("id");
                    if (!id) {
                        Commerce.ViewModelAdapter.displayMessage("tab control requires a unique Id", Commerce.MessageType.Error);
                        return;
                    }
                    if (!Commerce.StringExtensions.isNullOrWhitespace(value.view)) {
                        var $leftPanel_1 = $element.find(leftFieldsClass);
                        var $rightPanel_1 = $element.find(rightFieldsClass);
                        var $mainPanel_1 = $element.find(mainFieldsClass);
                        var item = Commerce.ApplicationContext.Instance.tillLayoutProxy.getLayoutItem(value.view, id);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(item)) {
                            var addFieldsToPanel = function ($fromPanel, $toPanel, selectedFields) {
                                if (Commerce.ArrayExtensions.hasElements(selectedFields)) {
                                    $toPanel.show();
                                    selectedFields.forEach(function (item, index) {
                                        var $field;
                                        var customFieldIndex = Commerce.ArrayExtensions.findIndex(value.customFieldViewModels, function (vm) {
                                            return vm.id === item.ID;
                                        });
                                        $field = $fromPanel.find("#" + item.ID);
                                        if ($field.length === 0) {
                                            if (customFieldIndex !== -1) {
                                                var vm = value.customFieldViewModels[customFieldIndex];
                                                vm.captionResourceId = Commerce.StringExtensions.format("string_{0}", item.CaptionTextId);
                                                var field = document.createElement("div");
                                                field.id = Commerce.StringExtensions.format("CartViewTotalsPanelCustomField-{0}", item.ID);
                                                var customFieldOptions = {
                                                    captionResourceId: vm.captionResourceId,
                                                    value: vm.value
                                                };
                                                dynamicElements.push({
                                                    element: field,
                                                    fieldOptions: customFieldOptions
                                                });
                                                $field = $(field);
                                            }
                                            else {
                                                Commerce.RetailLogger.extensibilityFrameworkTotalsPanelCustomFieldNotImplemented(item.ID);
                                            }
                                        }
                                        else if (customFieldIndex !== -1) {
                                            Commerce.RetailLogger.extensibilityFrameworkTotalsPanelCustomFieldConflictsWithStandardField(item.ID);
                                        }
                                        if ($field.length !== 0) {
                                            $field.css({
                                                visibility: "visible",
                                                position: "relative"
                                            });
                                            $toPanel.append($field);
                                        }
                                    });
                                }
                                else {
                                    $toPanel.hide();
                                }
                            };
                            if (Commerce.Config.isPhone) {
                                addFieldsToPanel($mainPanel_1, $mainPanel_1, [].concat(item.LeftSelectedTotalsFields, item.RightSelectedTotalsFields));
                            }
                            else {
                                addFieldsToPanel($leftPanel_1, $leftPanel_1, item.LeftSelectedTotalsFields);
                                addFieldsToPanel($leftPanel_1, $rightPanel_1, item.RightSelectedTotalsFields);
                            }
                        }
                        var orientationChangedHandler_1 = function (args) {
                            if (Commerce.Config.isPhone) {
                                $mainPanel_1.children().removeAttr("style");
                            }
                            else {
                                $rightPanel_1.children().appendTo($leftPanel_1);
                                $leftPanel_1.children().removeAttr("style");
                            }
                            dynamicElements.forEach(function (dynamicElement) {
                                $(dynamicElement.element).remove();
                            });
                            Commerce.ApplicationContext.Instance.tillLayoutProxy.removeOrientationChangedHandler(element, orientationChangedHandler_1);
                            ko.cleanNode(element);
                            ko.applyBindings(viewModel, element);
                        };
                        Commerce.ApplicationContext.Instance.tillLayoutProxy.addOrientationChangedHandler(element, orientationChangedHandler_1);
                    }
                    ko.applyBindingsToDescendants(viewModel, element);
                    dynamicElements.forEach(function (dynamicElement) {
                        ko.cleanNode(dynamicElement.element);
                        ko.applyBindingsToNode(dynamicElement.element, { totalsPanelField: dynamicElement.fieldOptions });
                    });
                    return { controlsDescendantBindings: true };
                };
                return TotalsPanelBindingHandler;
            }());
            TotalsPanel.TotalsPanelBindingHandler = TotalsPanelBindingHandler;
        })(TotalsPanel = Controls.TotalsPanel || (Controls.TotalsPanel = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var TotalsPanel;
        (function (TotalsPanel) {
            "use strict";
            var TotalsPanelFieldBindingHandler = (function () {
                function TotalsPanelFieldBindingHandler() {
                }
                TotalsPanelFieldBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var options = ko.utils.unwrapObservable(valueAccessor()) || {};
                    options.isCurrency = options.isCurrency || false;
                    ko.applyBindingsToNode(element, {
                        template: {
                            name: "totalsPanelFieldTemplate",
                            data: options
                        }
                    });
                    return { controlsDescendantBindings: true };
                };
                return TotalsPanelFieldBindingHandler;
            }());
            TotalsPanel.TotalsPanelFieldBindingHandler = TotalsPanelFieldBindingHandler;
        })(TotalsPanel = Controls.TotalsPanel || (Controls.TotalsPanel = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var UI;
    (function (UI) {
        "use strict";
        var Tutorial = (function () {
            function Tutorial() {
                var _this = this;
                this._arrowColor = "#0F6FCF";
                this._accentColors = {
                    13004559: "#8D4294",
                    3776084: "#0F6FCF",
                    2376177: "#8D4294",
                    13850523: "#0F6FCF"
                };
                this._isInitialized = false;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(Tutorial._instance)) {
                    throw new Commerce.Proxy.Entities.Error("Tutorial may not be instantiated more than once.");
                }
                var htmlElementForEvents = $("#contenthost").get(0);
                Commerce.EventProxy.Instance.addCustomEventHandler(htmlElementForEvents, "DeviceDeactivatedEvent", function () {
                    _this.init();
                });
            }
            Object.defineProperty(Tutorial, "instance", {
                get: function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(Tutorial._instance)) {
                        Tutorial._instance = new Tutorial();
                    }
                    return Tutorial._instance;
                },
                enumerable: true,
                configurable: true
            });
            Tutorial.stopBubbleTour = function () {
                if (!Tutorial.instance._isInitialized) {
                    return;
                }
                Tutorial.instance._bubbleControl.stopTour(true);
            };
            Tutorial.prototype.init = function () {
                this._bubbleControl = UI.HelpBubbles.BubbleControl.instance();
                this._isTutorialStarted = false;
                this._tutorialVideoDisabled = false;
                this._bubbleTourDisabled = false;
                this._tutorialVideoDialog = new Commerce.Controls.TutorialVideoDialog(this);
                this._isInitialized = true;
            };
            Tutorial.prototype.setBubbleTourDisabled = function (value) {
                this._bubbleTourDisabled = value;
                Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.BUBBLE_TOUR_DISABLED, JSON.stringify(value));
            };
            Tutorial.prototype.isBubbleTourDisabled = function () {
                return this._bubbleTourDisabled;
            };
            Tutorial.prototype.setTutorialVideoDisabled = function (value) {
                this._tutorialVideoDisabled = value;
                Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.VIDEO_TUTORIAL_DISABLED, JSON.stringify(value));
            };
            Tutorial.prototype.isTutorialVideoDisabled = function () {
                return this._tutorialVideoDisabled;
            };
            Tutorial.prototype.onBeforeNavigate = function () {
                if (!this._isInitialized || !this.isTutorialModeEnabled()) {
                    return;
                }
                if (this._bubbleControl.isInProgress()) {
                    this._bubbleControl.onBeforeNavigate();
                }
            };
            Tutorial.prototype.onAfterNavigate = function (location, element) {
                if (!this._isInitialized) {
                    return;
                }
                else if (!this.isTutorialModeEnabled()) {
                    this._isTutorialStarted = false;
                    if (this._bubbleControl.isInProgress()) {
                        this._bubbleControl.stopTour(false);
                    }
                    return;
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(location)) {
                    return;
                }
                this._activeLocation = location;
                this._pageElement = element;
                if (location === Tutorial._startPage && !this._isTutorialStarted) {
                    this.startTutorialMode();
                }
                else if (this._bubbleControl.isInProgress()) {
                    this._bubbleControl.onAfterNavigate(location, element);
                }
            };
            Tutorial.prototype.startTutorialMode = function () {
                var _this = this;
                if (!this._isInitialized) {
                    return;
                }
                this.setTutorialVideoDisabled(this.readBooleanSetting(Commerce.ApplicationStorageIDs.VIDEO_TUTORIAL_DISABLED));
                this.setColor();
                this._isTutorialStarted = true;
                if (this.isSupportedScreenSize()) {
                    if (!this.isTutorialVideoDisabled()) {
                        this.startVideoTutorial().onAny(function () {
                            _this.startBubbleTour();
                        });
                    }
                    else {
                        this.startBubbleTour();
                    }
                }
            };
            Tutorial.prototype.startVideoTutorial = function () {
                if (!this._isInitialized) {
                    var result = new Commerce.AsyncDialogResult(null);
                    var tutorialDialogResult = {
                        isBubbleTourDisabled: this.isBubbleTourDisabled(),
                        isTutorialVideoOnStartupDisabled: this.isTutorialVideoDisabled()
                    };
                    result.resolve(Commerce.DialogResult.Cancel, tutorialDialogResult);
                    return result;
                }
                return this._tutorialVideoDialog.show(null, true);
            };
            Tutorial.prototype.startBubbleTour = function () {
                if (!this._isInitialized) {
                    return;
                }
                this.setBubbleTourDisabled(this.readBooleanSetting(Commerce.ApplicationStorageIDs.BUBBLE_TOUR_DISABLED));
                if (this._bubbleControl.isInProgress() || this.isBubbleTourDisabled()) {
                    return;
                }
                this._bubbleControl.reset(this._activeLocation, this._pageElement, this._arrowColor);
            };
            Tutorial.prototype.isTutorialModeEnabled = function () {
                return Commerce.Session.instance.isLoggedOn && Commerce.ApplicationContext.Instance.retailTrialPlanOffer;
            };
            Tutorial.prototype.toggleBubbleTour = function () {
                if (!this._isInitialized) {
                    return;
                }
                this.setBubbleTourDisabled(!this.isBubbleTourDisabled());
            };
            Tutorial.prototype.setColor = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(Commerce.CSSHelpers.accentColorId)) {
                    this._arrowColor = this._accentColors[Commerce.CSSHelpers.accentColorId];
                }
            };
            Tutorial.prototype.readBooleanSetting = function (key) {
                var settingValue = JSON.parse(Commerce.ApplicationStorage.getItem(key));
                return Commerce.ObjectExtensions.isBoolean(settingValue) && settingValue;
            };
            Tutorial.prototype.isSupportedScreenSize = function () {
                var $window = $(window);
                return $window.width() >= 1180;
            };
            Tutorial._instance = null;
            Tutorial._startPage = "HomeView";
            return Tutorial;
        }());
        UI.Tutorial = Tutorial;
    })(UI = Commerce.UI || (Commerce.UI = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
ko.bindingHandlers.__posStopExtensionBinding = {
    init: function () {
        return { controlsDescendantBindings: true };
    }
};

// SIG // Begin signature block
// SIG // MIIkAgYJKoZIhvcNAQcCoIIj8zCCI+8CAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // GX2XZNahbYEHIYuDi0CxsrV0l99+60p85UzMtILuYxqg
// SIG // gg2FMIIGAzCCA+ugAwIBAgITMwAAAYivUta5km3o+QAA
// SIG // AAABiDANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExMB4XDTIwMDMwNDE4Mzk0OFoX
// SIG // DTIxMDMwMzE4Mzk0OFowdDELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // kgja8hPgnsMtpuLf2u+MGewvWE8L9T8guAbzP5EljzbP
// SIG // J9EU3vhb2H1PhPbn9Le52JQMx4yvqZYn9gYQ/jYHYSFE
// SIG // PLFcFjt/bY70ER4z9v/70ryH5ppEaDC9SIZ47PZEImUM
// SIG // 2EQ2GEafcUkGJkcEI5OYZfP1O0YDokA4rVR2lOwU9TCP
// SIG // dpX2UbiCAw2AXb17W3JWCTFTsKmbb9Dvc0Aq3rekfn0U
// SIG // hmgzXxBKXCCy/g+0VdzOLmiROE2uigDnb1fjFWiadWFx
// SIG // U2TyraYxzunfaR0D2YhuzXQukG50RprGuPLjUK2+gH5i
// SIG // ygyNS6d9VjKIE2l+bWX/gmU/T0rr4zgizQIDAQABo4IB
// SIG // gjCCAX4wHwYDVR0lBBgwFgYKKwYBBAGCN0wIAQYIKwYB
// SIG // BQUHAwMwHQYDVR0OBBYEFI/USS/czaz3C9dEWXTECF2T
// SIG // ezBvMFQGA1UdEQRNMEukSTBHMS0wKwYDVQQLEyRNaWNy
// SIG // b3NvZnQgSXJlbGFuZCBPcGVyYXRpb25zIExpbWl0ZWQx
// SIG // FjAUBgNVBAUTDTIzMDAxMis0NTgzODYwHwYDVR0jBBgw
// SIG // FoAUSG5k5VAF04KqFzc3IrVtqMp1ApUwVAYDVR0fBE0w
// SIG // SzBJoEegRYZDaHR0cDovL3d3dy5taWNyb3NvZnQuY29t
// SIG // L3BraW9wcy9jcmwvTWljQ29kU2lnUENBMjAxMV8yMDEx
// SIG // LTA3LTA4LmNybDBhBggrBgEFBQcBAQRVMFMwUQYIKwYB
// SIG // BQUHMAKGRWh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9w
// SIG // a2lvcHMvY2VydHMvTWljQ29kU2lnUENBMjAxMV8yMDEx
// SIG // LTA3LTA4LmNydDAMBgNVHRMBAf8EAjAAMA0GCSqGSIb3
// SIG // DQEBCwUAA4ICAQAp16PIY6exXk/h+okJVdwnBp5Emxby
// SIG // KSmGn4M2AhaN1B2NVR2CVW+YxxDvKBtukKgRC5mpOjEy
// SIG // Pq2t1ijExoRNbBCJaME3KeCALPGucKQoelX+Gf2wLSKa
// SIG // T96d4F5Nl/FF03PlsY0GLA5BYks6PzgWuYZHVtYOBKTu
// SIG // N5fZo06AXahD7SF7Gex4tf+suICtD5jIsBvCzKUp9J/6
// SIG // Ehxo61DQYByT8YLOt0pX+fEBgc57l4kWl5n01A3a74Ua
// SIG // HHcSDIvJ10MFgAjIkMyUkcwT+UtsFKu5zAKo2k23l4Sa
// SIG // g9khVR3VGJSq7r7T0sG56kkVkxiPLOBRF7fky98OSZ8F
// SIG // WZmZFBaIqEAzDIxcmirq3SeqZ8269YekFtEfe31nPMRC
// SIG // MyyDolNq48FgLZUKhTvCjYspI2BshH+S8gCSgDvqyXfX
// SIG // 7GEflQWriBEKGJo51G01zEmNi3+SjJblpQzhlYfKul45
// SIG // gXHKWk/vLQn8aWlWD4tZ3J8E8Gj0L1avEY1g0Qez2vK7
// SIG // h4I9hyRYuvfoXKu5lseZ01Lc8xWu0UmXxOWtWuQLgZhj
// SIG // Ua+3/HDX2tNfrYlo1SpNWvoCVAUj9LCMXnBW1Ul02e26
// SIG // nmpeOV0gyIrGQZFm/vN0213UxjA0lBSkwHbQvq9+Rn7D
// SIG // fEFcufR2+WWMwF3M4YEZpOzchOow9GJuUyoluTCCB3ow
// SIG // ggVioAMCAQICCmEOkNIAAAAAAAMwDQYJKoZIhvcNAQEL
// SIG // BQAwgYgxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNo
// SIG // aW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQK
// SIG // ExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xMjAwBgNVBAMT
// SIG // KU1pY3Jvc29mdCBSb290IENlcnRpZmljYXRlIEF1dGhv
// SIG // cml0eSAyMDExMB4XDTExMDcwODIwNTkwOVoXDTI2MDcw
// SIG // ODIxMDkwOVowfjELMAkGA1UEBhMCVVMxEzARBgNVBAgT
// SIG // Cldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAc
// SIG // BgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEoMCYG
// SIG // A1UEAxMfTWljcm9zb2Z0IENvZGUgU2lnbmluZyBQQ0Eg
// SIG // MjAxMTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoC
// SIG // ggIBAKvw+nIQHC6t2G6qghBNNLrytlghn0IbKmvpWlCq
// SIG // uAY4GgRJun/DDB7dN2vGEtgL8DjCmQawyDnVARQxQtOJ
// SIG // DXlkh36UYCRsr55JnOloXtLfm1OyCizDr9mpK656Ca/X
// SIG // llnKYBoF6WZ26DJSJhIv56sIUM+zRLdd2MQuA3WraPPL
// SIG // bfM6XKEW9Ea64DhkrG5kNXimoGMPLdNAk/jj3gcN1Vx5
// SIG // pUkp5w2+oBN3vpQ97/vjK1oQH01WKKJ6cuASOrdJXtjt
// SIG // 7UORg9l7snuGG9k+sYxd6IlPhBryoS9Z5JA7La4zWMW3
// SIG // Pv4y07MDPbGyr5I4ftKdgCz1TlaRITUlwzluZH9TupwP
// SIG // rRkjhMv0ugOGjfdf8NBSv4yUh7zAIXQlXxgotswnKDgl
// SIG // mDlKNs98sZKuHCOnqWbsYR9q4ShJnV+I4iVd0yFLPlLE
// SIG // tVc/JAPw0XpbL9Uj43BdD1FGd7P4AOG8rAKCX9vAFbO9
// SIG // G9RVS+c5oQ/pI0m8GLhEfEXkwcNyeuBy5yTfv0aZxe/C
// SIG // HFfbg43sTUkwp6uO3+xbn6/83bBm4sGXgXvt1u1L50kp
// SIG // pxMopqd9Z4DmimJ4X7IvhNdXnFy/dygo8e1twyiPLI9A
// SIG // N0/B4YVEicQJTMXUpUMvdJX3bvh4IFgsE11glZo+TzOE
// SIG // 2rCIF96eTvSWsLxGoGyY0uDWiIwLAgMBAAGjggHtMIIB
// SIG // 6TAQBgkrBgEEAYI3FQEEAwIBADAdBgNVHQ4EFgQUSG5k
// SIG // 5VAF04KqFzc3IrVtqMp1ApUwGQYJKwYBBAGCNxQCBAwe
// SIG // CgBTAHUAYgBDAEEwCwYDVR0PBAQDAgGGMA8GA1UdEwEB
// SIG // /wQFMAMBAf8wHwYDVR0jBBgwFoAUci06AjGQQ7kUBU7h
// SIG // 6qfHMdEjiTQwWgYDVR0fBFMwUTBPoE2gS4ZJaHR0cDov
// SIG // L2NybC5taWNyb3NvZnQuY29tL3BraS9jcmwvcHJvZHVj
// SIG // dHMvTWljUm9vQ2VyQXV0MjAxMV8yMDExXzAzXzIyLmNy
// SIG // bDBeBggrBgEFBQcBAQRSMFAwTgYIKwYBBQUHMAKGQmh0
// SIG // dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMv
// SIG // TWljUm9vQ2VyQXV0MjAxMV8yMDExXzAzXzIyLmNydDCB
// SIG // nwYDVR0gBIGXMIGUMIGRBgkrBgEEAYI3LgMwgYMwPwYI
// SIG // KwYBBQUHAgEWM2h0dHA6Ly93d3cubWljcm9zb2Z0LmNv
// SIG // bS9wa2lvcHMvZG9jcy9wcmltYXJ5Y3BzLmh0bTBABggr
// SIG // BgEFBQcCAjA0HjIgHQBMAGUAZwBhAGwAXwBwAG8AbABp
// SIG // AGMAeQBfAHMAdABhAHQAZQBtAGUAbgB0AC4gHTANBgkq
// SIG // hkiG9w0BAQsFAAOCAgEAZ/KGpZjgVHkaLtPYdGcimwuW
// SIG // EeFjkplCln3SeQyQwWVfLiw++MNy0W2D/r4/6ArKO79H
// SIG // qaPzadtjvyI1pZddZYSQfYtGUFXYDJJ80hpLHPM8QotS
// SIG // 0LD9a+M+By4pm+Y9G6XUtR13lDni6WTJRD14eiPzE32m
// SIG // kHSDjfTLJgJGKsKKELukqQUMm+1o+mgulaAqPyprWElj
// SIG // HwlpblqYluSD9MCP80Yr3vw70L01724lruWvJ+3Q3fMO
// SIG // r5kol5hNDj0L8giJ1h/DMhji8MUtzluetEk5CsYKwsat
// SIG // ruWy2dsViFFFWDgycScaf7H0J/jeLDogaZiyWYlobm+n
// SIG // t3TDQAUGpgEqKD6CPxNNZgvAs0314Y9/HG8VfUWnduVA
// SIG // KmWjw11SYobDHWM2l4bf2vP48hahmifhzaWX0O5dY0Hj
// SIG // Wwechz4GdwbRBrF1HxS+YWG18NzGGwS+30HHDiju3mUv
// SIG // 7Jf2oVyW2ADWoUa9WfOXpQlLSBCZgB/QACnFsZulP0V3
// SIG // HjXG0qKin3p6IvpIlR+r+0cjgPWe+L9rt0uX4ut1eBrs
// SIG // 6jeZeRhL/9azI2h15q/6/IvrC4DqaTuv/DDtBEyO3991
// SIG // bWORPdGdVk5Pv4BXIqF4ETIheu9BCrE/+6jMpF3BoYib
// SIG // V3FWTkhFwELJm3ZbCoBIa/15n8G9bW1qyVJzEw16UM0x
// SIG // ghXVMIIV0QIBATCBlTB+MQswCQYDVQQGEwJVUzETMBEG
// SIG // A1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9u
// SIG // ZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBTaWduaW5n
// SIG // IFBDQSAyMDExAhMzAAABiK9S1rmSbej5AAAAAAGIMA0G
// SIG // CWCGSAFlAwQCAQUAoIIBJzAZBgkqhkiG9w0BCQMxDAYK
// SIG // KwYBBAGCNwIBBDAcBgorBgEEAYI3AgELMQ4wDAYKKwYB
// SIG // BAGCNwIBFTAvBgkqhkiG9w0BCQQxIgQgUJuVCKjWQKTv
// SIG // JfcfOCC0N4+7LHiqaSFNoMGYB067hOQwgboGCisGAQQB
// SIG // gjcCAQwxgaswgaiggYmAgYYAUwBpAG0AcABsAGkAZgB5
// SIG // AEMAbwBtAG0AZQByAGMAZQAuAE0AaQBjAHIAbwBzAG8A
// SIG // ZgB0AEQAeQBuAGEAbQBpAGMAcwAuAEMAbwBuAG4AZQBj
// SIG // AHQAbwByAC4AUABvAHIAdABhAGIAbABlAC4AcgBlAHMA
// SIG // bwB1AHIAYwBlAHMALgBkAGwAbKEagBhodHRwOi8vd3d3
// SIG // Lm1pY3Jvc29mdC5jb20wDQYJKoZIhvcNAQEBBQAEggEA
// SIG // Fe2TEEOMcKSSiO8h6SHLYEpb6El+ln7xmMnzGsC6xQue
// SIG // z8RzrmUGoLfs57UVOp9oNKBuGISVwk80TloAWz8qiyuZ
// SIG // E1HNQedxKBXtUTzolQmRBGSMq1lx1N7ny7frAcs8Orgg
// SIG // 2E5uPJRAmIXjQQ4fkECjU3o+G6a2cPl3O8aboBwoJjJV
// SIG // dLREDkQPkxtTNWbOiBq3CllKzc2d6R7FhAW+7oReuFUu
// SIG // a1wr2rSHz/t3o73keAQ/9OJU+3MTwKIefu/KTcA+A+SU
// SIG // 4ff1J1baO3HAhNSk1p2Rr9Qje7f5mlcWrEsX6IfPzk2c
// SIG // rn7VwLimDa3/XxdSWXtL0j3p4Sjq1sZrWaGCEuUwghLh
// SIG // BgorBgEEAYI3AwMBMYIS0TCCEs0GCSqGSIb3DQEHAqCC
// SIG // Er4wghK6AgEDMQ8wDQYJYIZIAWUDBAIBBQAwggFRBgsq
// SIG // hkiG9w0BCRABBKCCAUAEggE8MIIBOAIBAQYKKwYBBAGE
// SIG // WQoDATAxMA0GCWCGSAFlAwQCAQUABCBE6FYyF1kdP1py
// SIG // w6sIXl3/8a4kJ8KUTSIsn4oMSTUTCAIGXz0tSNNoGBMy
// SIG // MDIwMDgyMzA0MDI0Ny41MTVaMASAAgH0oIHQpIHNMIHK
// SIG // MQswCQYDVQQGEwJVUzELMAkGA1UECBMCV0ExEDAOBgNV
// SIG // BAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBD
// SIG // b3Jwb3JhdGlvbjEtMCsGA1UECxMkTWljcm9zb2Z0IEly
// SIG // ZWxhbmQgT3BlcmF0aW9ucyBMaW1pdGVkMSYwJAYDVQQL
// SIG // Ex1UaGFsZXMgVFNTIEVTTjowODQyLTRCRTYtQzI5QTEl
// SIG // MCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2Vy
// SIG // dmljZaCCDjwwggTxMIID2aADAgECAhMzAAABCX6CvR57
// SIG // 02EiAAAAAAEJMA0GCSqGSIb3DQEBCwUAMHwxCzAJBgNV
// SIG // BAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYD
// SIG // VQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQg
// SIG // Q29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBU
// SIG // aW1lLVN0YW1wIFBDQSAyMDEwMB4XDTE5MTAyMzIzMTkx
// SIG // NFoXDTIxMDEyMTIzMTkxNFowgcoxCzAJBgNVBAYTAlVT
// SIG // MQswCQYDVQQIEwJXQTEQMA4GA1UEBxMHUmVkbW9uZDEe
// SIG // MBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMS0w
// SIG // KwYDVQQLEyRNaWNyb3NvZnQgSXJlbGFuZCBPcGVyYXRp
// SIG // b25zIExpbWl0ZWQxJjAkBgNVBAsTHVRoYWxlcyBUU1Mg
// SIG // RVNOOjA4NDItNEJFNi1DMjlBMSUwIwYDVQQDExxNaWNy
// SIG // b3NvZnQgVGltZS1TdGFtcCBTZXJ2aWNlMIIBIjANBgkq
// SIG // hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuMMhEGUCBxoJ
// SIG // LkP9VJ63U+43pWt+W1wqQfY2EpXPmxYlw7NSy19We/Z5
// SIG // C+GVH4/sLTqzezshKl1dn4IsHYtLmf1t9aM3Ojk3GN4B
// SIG // fshqdGT0wgOOt80nQQkqR6RhunO18mF4oPHET0Lju0b+
// SIG // XRacaT5Q8qTLctfjpYBXGVGKDEkGm1uEFLvO8jN4WezE
// SIG // 7ky2bLise/nQ8ycSAGxsHnAjUrD3dA9sxP1sEfiwiJ7H
// SIG // vuFBa62GD8CSrDzInzt1L5ghey3f65si0Gxna0escFzJ
// SIG // s3OBwQTk+cMrWujqdAmHZ1Hp7MTif6oBDcP3zU1j134I
// SIG // JrPAy7DibYU2KxtkJA0q9wIDAQABo4IBGzCCARcwHQYD
// SIG // VR0OBBYEFKWkknNMg0L8QnGI59So7zY/bklGMB8GA1Ud
// SIG // IwQYMBaAFNVjOlyKMZDzQ3t8RhvFM2hahW1VMFYGA1Ud
// SIG // HwRPME0wS6BJoEeGRWh0dHA6Ly9jcmwubWljcm9zb2Z0
// SIG // LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY1RpbVN0YVBD
// SIG // QV8yMDEwLTA3LTAxLmNybDBaBggrBgEFBQcBAQROMEww
// SIG // SgYIKwYBBQUHMAKGPmh0dHA6Ly93d3cubWljcm9zb2Z0
// SIG // LmNvbS9wa2kvY2VydHMvTWljVGltU3RhUENBXzIwMTAt
// SIG // MDctMDEuY3J0MAwGA1UdEwEB/wQCMAAwEwYDVR0lBAww
// SIG // CgYIKwYBBQUHAwgwDQYJKoZIhvcNAQELBQADggEBADhY
// SIG // hwOLB0dLkBKuk0wuRv/Jbga8qDkPpBbiVOYlwE0l3tAa
// SIG // 3Ulc5Sqt6pBOhB763FxYM5dShyxYtm4LIfCYj5Qyx3y5
// SIG // n05BTcSxB69+TBUz8GvSd1OGn6wpO2mLGCBNCbIgxd/k
// SIG // WNuBx4eksNJ4yENSvMh+Twufnr5I/pYeZOpoUH+O9pvF
// SIG // XP3yzz7TrHcnnMzhMOXIrV79c1CDSVsB8tpt3kJerpcQ
// SIG // N7IGKQM3ZvjULX/6ItMkOkJpEEpnfq6W4JOraotY/4jo
// SIG // NBAkZpitMLb32hL48MVOu2JMcMoNfPJES4QAM+ne/0vx
// SIG // Rq6vr9O8wlScca9GRKArWkxZe8yf6mgwggZxMIIEWaAD
// SIG // AgECAgphCYEqAAAAAAACMA0GCSqGSIb3DQEBCwUAMIGI
// SIG // MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3Rv
// SIG // bjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWlj
// SIG // cm9zb2Z0IENvcnBvcmF0aW9uMTIwMAYDVQQDEylNaWNy
// SIG // b3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkg
// SIG // MjAxMDAeFw0xMDA3MDEyMTM2NTVaFw0yNTA3MDEyMTQ2
// SIG // NTVaMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNo
// SIG // aW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQK
// SIG // ExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMT
// SIG // HU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwMIIB
// SIG // IjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqR0N
// SIG // vHcRijog7PwTl/X6f2mUa3RUENWlCgCChfvtfGhLLF/F
// SIG // w+Vhwna3PmYrW/AVUycEMR9BGxqVHc4JE458YTBZsTBE
// SIG // D/FgiIRUQwzXTbg4CLNC3ZOs1nMwVyaCo0UN0Or1R4HN
// SIG // vyRgMlhgRvJYR4YyhB50YWeRX4FUsc+TTJLBxKZd0WET
// SIG // bijGGvmGgLvfYfxGwScdJGcSchohiq9LZIlQYrFd/Xcf
// SIG // PfBXday9ikJNQFHRD5wGPmd/9WbAA5ZEfu/QS/1u5ZrK
// SIG // sajyeioKMfDaTgaRtogINeh4HLDpmc085y9Euqf03GS9
// SIG // pAHBIAmTeM38vMDJRF1eFpwBBU8iTQIDAQABo4IB5jCC
// SIG // AeIwEAYJKwYBBAGCNxUBBAMCAQAwHQYDVR0OBBYEFNVj
// SIG // OlyKMZDzQ3t8RhvFM2hahW1VMBkGCSsGAQQBgjcUAgQM
// SIG // HgoAUwB1AGIAQwBBMAsGA1UdDwQEAwIBhjAPBgNVHRMB
// SIG // Af8EBTADAQH/MB8GA1UdIwQYMBaAFNX2VsuP6KJcYmjR
// SIG // PZSQW9fOmhjEMFYGA1UdHwRPME0wS6BJoEeGRWh0dHA6
// SIG // Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1
// SIG // Y3RzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNybDBa
// SIG // BggrBgEFBQcBAQROMEwwSgYIKwYBBQUHMAKGPmh0dHA6
// SIG // Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMvTWlj
// SIG // Um9vQ2VyQXV0XzIwMTAtMDYtMjMuY3J0MIGgBgNVHSAB
// SIG // Af8EgZUwgZIwgY8GCSsGAQQBgjcuAzCBgTA9BggrBgEF
// SIG // BQcCARYxaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL1BL
// SIG // SS9kb2NzL0NQUy9kZWZhdWx0Lmh0bTBABggrBgEFBQcC
// SIG // AjA0HjIgHQBMAGUAZwBhAGwAXwBQAG8AbABpAGMAeQBf
// SIG // AFMAdABhAHQAZQBtAGUAbgB0AC4gHTANBgkqhkiG9w0B
// SIG // AQsFAAOCAgEAB+aIUQ3ixuCYP4FxAz2do6Ehb7Prpsz1
// SIG // Mb7PBeKp/vpXbRkws8LFZslq3/Xn8Hi9x6ieJeP5vO1r
// SIG // VFcIK1GCRBL7uVOMzPRgEop2zEBAQZvcXBf/XPleFzWY
// SIG // JFZLdO9CEMivv3/Gf/I3fVo/HPKZeUqRUgCvOA8X9S95
// SIG // gWXZqbVr5MfO9sp6AG9LMEQkIjzP7QOllo9ZKby2/QTh
// SIG // cJ8ySif9Va8v/rbljjO7Yl+a21dA6fHOmWaQjP9qYn/d
// SIG // xUoLkSbiOewZSnFjnXshbcOco6I8+n99lmqQeKZt0uGc
// SIG // +R38ONiU9MalCpaGpL2eGq4EQoO4tYCbIjggtSXlZOz3
// SIG // 9L9+Y1klD3ouOVd2onGqBooPiRa6YacRy5rYDkeagMXQ
// SIG // zafQ732D8OE7cQnfXXSYIghh2rBQHm+98eEA3+cxB6ST
// SIG // OvdlR3jo+KhIq/fecn5ha293qYHLpwmsObvsxsvYgrRy
// SIG // zR30uIUBHoD7G4kqVDmyW9rIDVWZeodzOwjmmC3qjeAz
// SIG // LhIp9cAvVCch98isTtoouLGp25ayp0Kiyc8ZQU3ghvkq
// SIG // mqMRZjDTu3QyS99je/WZii8bxyGvWbWu3EQ8l1Bx16HS
// SIG // xVXjad5XwdHeMMD9zOZN+w2/XU/pnR4ZOC+8z1gFLu8N
// SIG // oFA12u8JJxzVs341Hgi62jbb01+P3nSISRKhggLOMIIC
// SIG // NwIBATCB+KGB0KSBzTCByjELMAkGA1UEBhMCVVMxCzAJ
// SIG // BgNVBAgTAldBMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYD
// SIG // VQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xLTArBgNV
// SIG // BAsTJE1pY3Jvc29mdCBJcmVsYW5kIE9wZXJhdGlvbnMg
// SIG // TGltaXRlZDEmMCQGA1UECxMdVGhhbGVzIFRTUyBFU046
// SIG // MDg0Mi00QkU2LUMyOUExJTAjBgNVBAMTHE1pY3Jvc29m
// SIG // dCBUaW1lLVN0YW1wIFNlcnZpY2WiIwoBATAHBgUrDgMC
// SIG // GgMVAArBvLsdZyIJdH5HLYAWto86YngAoIGDMIGApH4w
// SIG // fDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0
// SIG // b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1p
// SIG // Y3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWlj
// SIG // cm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTAwDQYJKoZI
// SIG // hvcNAQEFBQACBQDi7EjrMCIYDzIwMjAwODIzMDk0NjE5
// SIG // WhgPMjAyMDA4MjQwOTQ2MTlaMHcwPQYKKwYBBAGEWQoE
// SIG // ATEvMC0wCgIFAOLsSOsCAQAwCgIBAAICHMMCAf8wBwIB
// SIG // AAICEcwwCgIFAOLtmmsCAQAwNgYKKwYBBAGEWQoEAjEo
// SIG // MCYwDAYKKwYBBAGEWQoDAqAKMAgCAQACAwehIKEKMAgC
// SIG // AQACAwGGoDANBgkqhkiG9w0BAQUFAAOBgQApPOuJDtqA
// SIG // As5VhPERbMWMnlAoyiWPBS8KlxoQx0YeJMC+QLDPF5qe
// SIG // 4n1h6CtWrWIZ8N9IsuRw7v9Bs6Kv9vsl1AJHDYxxSzcM
// SIG // olD+BUepxKv0MKOAaMjhtwl77805RD2YORrP/ppmY+JW
// SIG // lKXBuGxVQGJMdHIGj51q9RDcowmeujGCAw0wggMJAgEB
// SIG // MIGTMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNo
// SIG // aW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQK
// SIG // ExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMT
// SIG // HU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwAhMz
// SIG // AAABCX6CvR5702EiAAAAAAEJMA0GCWCGSAFlAwQCAQUA
// SIG // oIIBSjAaBgkqhkiG9w0BCQMxDQYLKoZIhvcNAQkQAQQw
// SIG // LwYJKoZIhvcNAQkEMSIEIDT4uN79cPmdOyv2rzMsBE16
// SIG // k8fxYEIzxIwkgGWZaNPWMIH6BgsqhkiG9w0BCRACLzGB
// SIG // 6jCB5zCB5DCBvQQgglT4YQYbSjI8YhNv3N2HQ3Ad/tXk
// SIG // 27MFY13/nqWdUo8wgZgwgYCkfjB8MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1T
// SIG // dGFtcCBQQ0EgMjAxMAITMwAAAQl+gr0ee9NhIgAAAAAB
// SIG // CTAiBCAY5kY8E3q2Gov8GbZBkDgjoW9cGYnBXuhm4Nho
// SIG // TeR2JTANBgkqhkiG9w0BAQsFAASCAQCyb1urnKsvXFJW
// SIG // GAR26pnxXiS+McKU1BeWcJvGypXEMM98U1B7uFI/mKFy
// SIG // 0DWFB/0H1TKESVE9Iz4O9N7J4dCVE/snlKb9y15QDpWT
// SIG // OxZeJ1lhO8dL7rd8yX73Ag1JJpI1YuhG4cvijcqAnDDh
// SIG // m5B7dEFVbjyC25J6C5Z/uus5pC0WqWDvVTmBSRLese9B
// SIG // mReJkSnJyVEqPg6kcC9f547CNKYVI2MXgnVeHkQRyJTv
// SIG // Fot0u7WzLklXfXvmptHHxvm7dFg+KMlWcT1bCyH9UMHA
// SIG // CbvuqLLkpd/Mjg+mHFW2DmHV7TiZqG+FQFWKonRKhnim
// SIG // WcOKs05FuO4g4BlmeH+v
// SIG // End signature block
